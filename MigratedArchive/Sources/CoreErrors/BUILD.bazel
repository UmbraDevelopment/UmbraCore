# Error handling improvements:
# This module has been updated to use fully qualified error types instead of typealiases.
# All error mapping should follow the UmbraErrors.* canonical hierarchy.
# Ensure proper error propagation and mapping when adding new code.

# IMPORTANT: In accordance with UmbraCore typealias policy:
# - Prefer fully qualified types over typealiases
# - Only use typealiases when interfacing with external APIs or simplifying complex generic signatures
# - Typealias declarations require explicit justification in code comments
# See the typealias policy document for details.

load("//bazel:swift_rules.bzl", "umbra_swift_library")

umbra_swift_library(
    name = "CoreErrors",
    srcs = glob(
        [
            "*.swift",
            "**/*.swift",
        ],
        allow_empty = False,
        exclude = [
            "**/Tests/**",
            "**/*Test.swift",
            "**/*.generated.swift",
        ],
        exclude_directories = 1,
    ),
    deps = [
        # Additional dependencies as needed:
        # "//Sources/CoreDTOs",
        # "//Sources/UmbraLogging",
        # "@com_github_apple_swift_log//:Logging",
        # Removing dependency on ErrorHandling to break circular dependency
        # "//Sources/ErrorHandling",
        # Removing dependencies on SecurityInterfaces and SecurityTypes to break circular dependency
        # "//Sources/SecurityInterfaces",
        # "//Sources/SecurityTypes",
    ],
    visibility = ["//visibility:public"],
)

# Uncomment if documentation generation is needed
# load("@build_bazel_rules_swift//swift:swift.bzl", "swift_library")
# load("@rules_swift_package_manager//swiftpkg:defs.bzl", "swift_package")
# swift_package(
#     name = "docc_documentation",
#     srcs = glob([
#         "**/*.swift",
#         "**/*.docc/**",
#     ]),
#     deps = [
#         # Additional dependencies as needed:
#         # "//Sources/CoreDTOs",
#         # "//Sources/UmbraLogging",
#         # "@com_github_apple_swift_log//:Logging",
#         # Removing dependency on ErrorHandling to break circular dependency
#         # "//Sources/ErrorHandling",
#         # Removing dependencies on SecurityInterfaces and SecurityTypes to break circular dependency
#         # "//Sources/SecurityInterfaces",
#         # "//Sources/SecurityTypes",
#     ],
# )
