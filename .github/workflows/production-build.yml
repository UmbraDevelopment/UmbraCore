name: Production Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: Enable additional debugging output
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: [self-hosted, macos]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Prepare Build Environment
        run: |
          # Check if bazelisk is installed, install only if needed
          if ! command -v bazelisk &> /dev/null; then
            echo "Installing bazelisk..."
            brew install bazelisk
          fi
          bazelisk --version
          
          # Check if yq is installed, install only if needed
          if ! command -v yq &> /dev/null; then
            echo "Installing yq..."
            brew install yq
          fi
          yq --version
          
      - name: Discover Production Targets
        run: |
          echo "Discovering production targets..."
          chmod +x team-utils/discover_production_targets.sh
          ./team-utils/discover_production_targets.sh
          
          # Verify that production targets file exists and is not empty
          if [ ! -f team-utils/production_targets.txt ] || [ ! -s team-utils/production_targets.txt ]; then
            echo "Error: No production targets found or production_targets.txt is empty"
            touch team-utils/production_targets.txt  # Ensure file exists even if empty
            exit 1
          else
            echo "Found $(wc -l < team-utils/production_targets.txt | xargs) production targets"
          fi
          
          # Filter out test targets to avoid "not compiled for testing" errors
          if [ -f team-utils/production_targets.txt ]; then
            echo "Filtering out test targets from production build..."
            grep -v "Tests" team-utils/production_targets.txt > team-utils/filtered_production_targets.txt
            mv team-utils/filtered_production_targets.txt team-utils/production_targets.txt
            echo "After filtering: $(wc -l < team-utils/production_targets.txt | xargs) production targets"
          fi
          
      - name: Process Build Targets
        run: |
          if [[ "${{ github.event.inputs.debug_enabled }}" == "true" ]]; then
            echo "Debug mode enabled - listing all production targets:"
            cat team-utils/production_targets.txt
          fi
          
      - name: Build All Production Targets
        run: |
          # Check if we have production targets to build
          if [ ! -s team-utils/production_targets.txt ]; then
            echo "No production targets to build. Exiting."
            exit 1
          fi
          
          echo "Building all production targets with prodonly configuration..."
          set +e  # Don't exit immediately on error
          bazelisk build --config=prodonly --define=build_environment=nonlocal -k --verbose_failures $(cat team-utils/production_targets.txt)
          BUILD_EXIT_CODE=$?
          set -e
          
          # Store exit code for the summary step
          echo "BUILD_EXIT_CODE=$BUILD_EXIT_CODE" >> $GITHUB_ENV
          
      - name: Summarise Build Results
        run: |
          if [ -f team-utils/production_targets.txt ]; then
            TARGET_COUNT=$(wc -l < team-utils/production_targets.txt | xargs)
            echo "Attempted to build $TARGET_COUNT production targets"
            
            # Check the build exit code
            if [ "${BUILD_EXIT_CODE:-0}" -eq 0 ]; then
              echo "All production targets built successfully!"
            else
              echo "Some production targets failed to build. Please check the logs for details."
              # Exit with the same code to properly reflect build status
              exit ${BUILD_EXIT_CODE:-1}
            fi
          else
            echo "No production targets were found to build"
            exit 1
          fi
        if: always()
