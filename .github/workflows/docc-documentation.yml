name: Build and Deploy DocC Documentation

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'Sources/**/Documentation.docc/**'
      - 'tools/go/cmd/docc/**'
      - 'tools/swift/docc_rules.bzl'
      - '.github/workflows/docc-documentation.yml'
  pull_request:
    paths:
      - 'Sources/**/Documentation.docc/**'
      - 'tools/go/cmd/docc/**'
      - 'tools/swift/docc_rules.bzl'
  workflow_dispatch:  # Allow manual triggering

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write  # Needed to commit changes back to the repository
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "docc-pages"
  cancel-in-progress: false

jobs:
  build-docc:
    name: Build DocC Documentation
    runs-on: [self-hosted, macos]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Swift
        uses: fwal/setup-swift@v1
        with:
          swift-version: '5.9'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Install Dependencies
        run: |
          brew install bazel || true
          
      - name: Build DocC Tools
        run: |
          cd tools/go
          go build -o bin/docc cmd/docc/main.go
          echo "Built DocC tools successfully"
          
      - name: Build DocC Documentation for All Modules
        run: |
          echo "Building DocC documentation for all modules..."
          mkdir -p docs
          
          # Get all modules with DocC documentation
          modules=$(find Sources -name "Documentation.docc" -type d | awk -F'/' '{print $(NF-2)}')
          
          for module in $modules; do
            echo "Building documentation for $module..."
            tools/go/bin/docc --module $module --output docs/${module}DocC.doccarchive
          done
          
          echo "DocC documentation built successfully"
          
      - name: Create Documentation Index
        run: |
          echo "Creating documentation index..."
          cat > docs/index.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>UmbraCore Documentation</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
              }
              h1 {
                color: #0066cc;
                border-bottom: 1px solid #eee;
                padding-bottom: 10px;
              }
              ul {
                list-style-type: none;
                padding: 0;
              }
              li {
                margin-bottom: 10px;
              }
              a {
                color: #0066cc;
                text-decoration: none;
                font-weight: 500;
              }
              a:hover {
                text-decoration: underline;
              }
              .module {
                background-color: #f5f5f7;
                border-radius: 8px;
                padding: 15px;
                margin-bottom: 15px;
              }
              .module h2 {
                margin-top: 0;
              }
            </style>
          </head>
          <body>
            <h1>UmbraCore Documentation</h1>
            <p>Browse documentation for UmbraCore modules:</p>
            <div class="modules">
          EOF
          
          # Add links to each module's documentation
          for module_archive in docs/*DocC.doccarchive; do
            module_name=$(basename $module_archive .doccarchive)
            module_name=${module_name%DocC}
            echo "  <div class=\"module\">" >> docs/index.html
            echo "    <h2>$module_name</h2>" >> docs/index.html
            echo "    <a href=\"${module_name}DocC.doccarchive/index.html\">View Documentation</a>" >> docs/index.html
            echo "  </div>" >> docs/index.html
          done
          
          cat >> docs/index.html << EOF
            </div>
            <p><small>Last updated: $(date)</small></p>
          </body>
          </html>
          EOF
          
          echo "Documentation index created successfully"
          
      - name: Setup Pages
        if: github.event_name != 'pull_request'
        uses: actions/configure-pages@v4
        
      - name: Upload artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs
          
      - name: Deploy to GitHub Pages
        if: github.event_name != 'pull_request'
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Commit updated documentation
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add docs/
          git commit -m "Update DocC documentation [skip ci]" || echo "No changes to commit"
          git push
