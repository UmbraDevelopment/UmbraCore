name: CI Test Suite

on: 
  push:
    branches:
      - main
      - feature/**
    paths:
      - 'Sources/**'
      - 'Tests/**'
      - 'BUILD.bazel'
      - '.bazelrc'
      - '.github/workflows/ci-tests.yml'
  pull_request:
    paths:
      - 'Sources/**'
      - 'Tests/**'
      - 'BUILD.bazel'
      - '.bazelrc'
      - '.github/workflows/ci-tests.yml'
  workflow_dispatch:
    inputs:
      run_security_tests:
        description: 'Run security tests'
        required: false
        default: true
        type: boolean
      run_core_tests:
        description: 'Run core tests'
        required: false
        default: true
        type: boolean
      debug_enabled:
        description: 'Run with additional debug logging'
        required: false
        default: false
        type: boolean

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk

permissions:
  contents: read
  security-events: write
  id-token: write
  checks: write
  pull-requests: write

jobs:
  tests:
    name: Run Tests
    runs-on: [self-hosted, macOS, ARM64]
    
    steps:
    - uses: actions/checkout@v4
      with:
        clean: true
        fetch-depth: 0

    - name: Setup Xcode
      run: |
        xcode-select --print-path
        swift --version

    - name: Install Bazelisk
      run: |
        brew install bazelisk || true
        bazelisk --version

    - name: Setup Test Environment
      run: |
        mkdir -p ~/UmbraTest/{Core,Security,Coverage}
        chmod -R 755 ~/UmbraTest

    - name: Generate Test Target List
      id: test-targets
      run: |
        # Create a directory for storing target lists
        mkdir -p .build_targets
        
        # Find all test targets
        echo "Finding test targets..."
        bazelisk query 'kind("swift_test rule", //...)' --output=label > .build_targets/test_targets.txt
        
        # Find security-tagged tests
        echo "Finding security tests..."
        bazelisk query 'attr(tags, "security", kind("swift_test rule", //...))' --output=label > .build_targets/security_test_targets.txt
        
        # Find core tests by filtering out security tests
        echo "Finding core tests..."
        grep -v -f .build_targets/security_test_targets.txt .build_targets/test_targets.txt > .build_targets/core_test_targets.txt || echo "No core tests found"
        
        # Count targets
        TEST_COUNT=$(wc -l < .build_targets/test_targets.txt | xargs)
        CORE_COUNT=$(wc -l < .build_targets/core_test_targets.txt | xargs)
        SECURITY_COUNT=$(wc -l < .build_targets/security_test_targets.txt | xargs)
        
        echo "Found $TEST_COUNT total test targets ($CORE_COUNT core, $SECURITY_COUNT security)"
        
        # Output sample of targets
        echo "Sample core test targets:"
        head -n 3 .build_targets/core_test_targets.txt || echo "No core test targets found"
        
        echo "Sample security test targets:"
        head -n 3 .build_targets/security_test_targets.txt || echo "No security test targets found"
        
        # Enable additional debugging if requested
        if [[ "${{ github.event.inputs.debug_enabled }}" == "true" ]]; then
          echo "Debug mode enabled - listing all test targets:"
          cat .build_targets/test_targets.txt
        fi

    - name: Run Core Tests
      if: ${{ github.event.inputs.run_core_tests != 'false' }}
      env:
        UMBRA_TEST_ROOT: ~/UmbraTest/Core
      run: |
        echo "Running core tests..."
        bazelisk test //Sources/... \
          --test_tag_filters=-security,-requires_keychain \
          --test_env=UMBRA_TEST_ROOT

    - name: Run Security Tests
      if: ${{ github.event.inputs.run_security_tests != 'false' }}
      env:
        UMBRA_TEST_ROOT: ~/UmbraTest/Security
      run: |
        echo "Running security tests..."
        bazelisk test //Sources/... \
          --test_tag_filters=security \
          --test_env=UMBRA_TEST_ROOT

    - name: Cleanup
      if: always()
      run: |
        rm -rf ~/UmbraTest
        rm -rf .build_targets
        bazelisk clean --expunge || true
