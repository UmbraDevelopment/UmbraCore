name: Deploy Documentation

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feature/mkdocs-migration
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
      - 'requirements.txt'
      - 'Sources/**/*.docc/**'
      - 'tools/bazel/docc.bzl'
      - 'BUILD.bazel'
  pull_request:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
      - 'requirements.txt'
      - 'Sources/**/*.docc/**'
      - 'tools/bazel/docc.bzl'
      - 'BUILD.bazel'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Bazel
        uses: bazelbuild/setup-bazelisk@v2

      - name: Restore Bazel cache
        uses: actions/cache@v3
        with:
          path: |
            /private/var/tmp/_bazel_runner
            /tmp/bazel-cache
            /tmp/bazel-repo-cache
          key: bazel-cache-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            bazel-cache-${{ runner.os }}-

      - name: Build API documentation
        run: |
          bazel build //:all_docs --config=ci
          mkdir -p site/api
          for module in UmbraCore SecurityTypes CryptoTypes UmbraKeychainService; do
            module_dir="bazel-bin/$module.docc"
            if [ -L "$module_dir" ]; then
              # Handle symlinks on both macOS and Linux
              if [[ "$OSTYPE" == "darwin"* ]]; then
                module_path=$(stat -f %Y "$module_dir")
              else
                module_path=$(readlink -f "$module_dir")
              fi
            else
              module_path="$module_dir"
            fi
            if [ -d "$module_path" ]; then
              cp -R "$module_path" "site/api/$module"
            fi
          done

      - name: Build documentation
        run: mkdocs build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
