name: CI

on: 
  push:
  pull_request:
  workflow_dispatch:

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk

permissions:
  contents: write
  security-events: write
  id-token: write
  checks: write
  pull-requests: write

jobs:
  core-build:
    name: Core Build
    runs-on: [self-hosted, macOS, X64]
    
    steps:
    - uses: actions/checkout@v4
      with:
        clean: true
        fetch-depth: 0

    - name: Setup Xcode
      run: |
        xcode-select --print-path
        swift --version

    - name: Install Bazelisk
      run: |
        brew install bazelisk || true
        bazelisk --version

    - name: Setup Test Environment
      run: |
        mkdir -p ~/UmbraTest/{Core,Security,Coverage}
        chmod -R 755 ~/UmbraTest

    - name: Generate Target Lists
      id: target-lists
      run: |
        # Create a directory for storing target lists
        mkdir -p .build_targets
        
        # Find production targets (library and binary targets, excluding tests)
        echo "Finding production targets..."
        bazelisk query 'kind("swift_library rule", //Sources/...)' --output=label > .build_targets/prod_targets.txt
        bazelisk query 'kind("swift_binary rule", //Sources/...)' --output=label >> .build_targets/prod_targets.txt
        
        # Find test targets
        echo "Finding test targets..."
        bazelisk query 'kind("swift_test rule", //...)' --output=label > .build_targets/test_targets.txt
        
        # Count targets
        PROD_COUNT=$(wc -l < .build_targets/prod_targets.txt | xargs)
        TEST_COUNT=$(wc -l < .build_targets/test_targets.txt | xargs)
        
        echo "Found $PROD_COUNT production targets and $TEST_COUNT test targets"
        
        # Output sample of targets (first 5 of each)
        echo "Sample production targets:"
        head -n 5 .build_targets/prod_targets.txt
        
        echo "Sample test targets:"
        head -n 5 .build_targets/test_targets.txt

    - name: Build Production Targets
      run: |
        echo "Building production targets..."
        cat .build_targets/prod_targets.txt | xargs bazelisk build || echo "Some production targets failed to build, continuing"

    - name: Run Core Tests
      env:
        UMBRA_TEST_ROOT: ~/UmbraTest/Core
      run: |
        echo "Running core tests..."
        bazelisk test //Sources/... \
          --test_tag_filters=-security,-requires_keychain \
          --test_env=UMBRA_TEST_ROOT || echo "Some core tests failed, continuing"

    - name: Run Security Tests
      env:
        UMBRA_TEST_ROOT: ~/UmbraTest/Security
      run: |
        echo "Running security tests..."
        bazelisk test //Sources/... \
          --test_tag_filters=security \
          --test_env=UMBRA_TEST_ROOT || echo "Some security tests failed, continuing"

    - name: Cleanup
      if: always()
      run: |
        rm -rf ~/UmbraTest
        rm -rf .build_targets
        bazelisk clean --expunge || true
