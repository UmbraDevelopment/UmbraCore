name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk

permissions:
  contents: read
  security-events: write
  id-token: write

jobs:
  build-and-test:
    name: Build & Test
    runs-on: [self-hosted, macOS, ARM64]
    
    steps:
    - uses: actions/checkout@v4
      with:
        clean: true
        fetch-depth: 0

    - name: System Info
      run: |
        uname -a
        swift --version
        bazel --version

    - name: Configure Bazel
      run: |
        cat >> .bazelrc << 'EOF'
        build --cpu=darwin_arm64
        build --apple_platform_type=macos
        build --macos_minimum_os=14.0
        build --features=swift.use_global_module_cache
        build --features=swift.enable_batch_mode
        build --features=swift.enable_concurrency_checking
        build --verbose_failures
        test --test_output=errors
        EOF

    - name: Setup Test Environment
      run: |
        mkdir -p ~/UmbraTest/{Core,Security,Coverage}
        chmod -R 755 ~/UmbraTest

    - name: Build
      run: |
        bazel build //... --show_progress_rate_limit=5

    - name: Core Tests
      env:
        UMBRA_TEST_ROOT: ~/UmbraTest/Core
      run: |
        bazel test //... \
          --test_tag_filters=-security,-requires_keychain \
          --test_env=UMBRA_TEST_ROOT

    - name: Security Tests
      env:
        UMBRA_TEST_ROOT: ~/UmbraTest/Security
      run: |
        bazel test //... \
          --test_tag_filters=security \
          --test_env=UMBRA_TEST_ROOT

    - name: Generate Coverage
      env:
        UMBRA_TEST_ROOT: ~/UmbraTest/Coverage
      run: |
        bazel coverage //... \
          --experimental_generate_llvm_lcov \
          --combined_report=lcov \
          --test_env=UMBRA_TEST_ROOT
        
        # Create coverage directory and ensure it exists
        mkdir -p coverage
        
        # Find and copy the coverage file, showing debug info
        echo "Looking for coverage files in $(bazel info output_path)/_coverage"
        find "$(bazel info output_path)/_coverage" -name "coverage.dat" -ls
        find "$(bazel info output_path)/_coverage" -name "coverage.dat" -exec cp {} coverage/lcov.info \;
        
        # Verify the coverage file exists and show its contents
        ls -la coverage/
        head -n 5 coverage/lcov.info

    - name: Upload Coverage
      uses: codecov/codecov-action@v4
      with:
        files: coverage/lcov.info
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: mpy-dev-ml/UmbraCore

    - name: Cleanup
      if: always()
      run: |
        rm -rf ~/UmbraTest
        bazel clean --expunge
