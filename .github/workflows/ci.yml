name: CI

on: [push, pull_request]

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk

permissions:
  contents: write
  security-events: write
  id-token: write
  checks: write
  pull-requests: write

jobs:
  build-and-test:
    name: Build & Test
    runs-on: [self-hosted, macOS, ARM64]
    
    steps:
    - uses: actions/checkout@v4
      with:
        clean: true
        fetch-depth: 0

    - name: Setup Xcode
      run: |
        xcode-select --print-path
        xcrun --show-sdk-path
        swift --version

    - name: System Info
      run: |
        uname -a
        bazelisk --version || echo "Bazelisk not installed yet"

    - name: Install Bazelisk
      run: |
        brew install bazelisk
        bazelisk --version

    - name: Configure Bazel
      run: |
        cat >> .bazelrc << 'EOF'
        build --cpu=darwin_arm64
        build --apple_platform_type=macos
        build --macos_minimum_os=14.0
        build --features=swift.use_global_module_cache
        build --features=swift.enable_batch_mode
        build --features=swift.enable_concurrency_checking
        build --verbose_failures
        test --test_output=errors
        EOF

    - name: Setup Test Environment
      run: |
        mkdir -p ~/UmbraTest/{Core,Security,Coverage}
        chmod -R 755 ~/UmbraTest

    - name: Debug - List available targets
      run: |
        echo "Listing main source targets:"
        bazelisk query 'kind(".*_library", //Sources/...)' --output=label || echo "No Source targets found"
        
        echo "Listing test targets:"
        bazelisk query 'kind(".*_test", //...)' --output=label || echo "No test targets found"

    - name: Build Source Targets
      run: |
        # Build only Sources instead of everything
        bazelisk build //Sources/... --show_progress_rate_limit=5

    - name: Core Tests
      env:
        UMBRA_TEST_ROOT: ~/UmbraTest/Core
      run: |
        bazelisk test //Sources/... \
          --test_tag_filters=-security,-requires_keychain \
          --test_env=UMBRA_TEST_ROOT

    - name: Security Tests
      env:
        UMBRA_TEST_ROOT: ~/UmbraTest/Security
      run: |
        bazelisk test //Sources/... \
          --test_tag_filters=security \
          --test_env=UMBRA_TEST_ROOT

    - name: Generate Coverage
      env:
        UMBRA_TEST_ROOT: ~/UmbraTest/Coverage
      run: |
        # Generate coverage data for Source files only
        bazelisk coverage //Sources/... \
          --collect_code_coverage \
          --instrument_test_targets \
          --experimental_generate_llvm_lcov \
          --coverage_report_generator=@bazel_tools//tools/test/CoverageOutputGenerator/java/com/google/devtools/coverageoutputgenerator:Main \
          --combined_report=lcov \
          --test_env=UMBRA_TEST_ROOT \
          --verbose_failures \
          --test_output=errors
        
        # Create coverage directory
        mkdir -p coverage
        
        # Find coverage file in bazel-out/_coverage
        COVERAGE_FILE="$(pwd)/bazel-out/_coverage/_coverage_report.dat"
        if [ -f "$COVERAGE_FILE" ]; then
          echo "Found coverage file at: $COVERAGE_FILE"
          cp "$COVERAGE_FILE" coverage/lcov.info
          echo "Coverage file contents:"
          head -n 5 coverage/lcov.info
        else
          echo "Error: Coverage file not found at $COVERAGE_FILE"
          echo "Searching for any coverage files:"
          find bazel-out -type f -name "*coverage*.dat" -ls
          exit 1
        fi

    - name: Upload Coverage
      uses: codecov/codecov-action@v4
      with:
        files: coverage/lcov.info
        fail_ci_if_error: true
        token: \${{ secrets.CODECOV_TOKEN }}
        slug: mpy-dev-ml/UmbraCore

    - name: Cleanup
      if: always()
      run: |
        rm -rf ~/UmbraTest
        bazelisk clean --expunge
