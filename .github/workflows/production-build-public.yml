name: Production Build (Public Runner)

on: 
  push:
    branches: [ main, umbracore-alpha ]
  pull_request:
    branches: [ main, umbracore-alpha ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run with additional debug logging'
        required: false
        default: false
        type: boolean

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  production-build:
    name: Build All Production Targets
    runs-on: macos-14 # GitHub-hosted macOS ARM64 runner
    timeout-minutes: 120
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Xcode
      run: |
        xcode-select --print-path
        swift --version

    - name: Install Bazelisk
      run: |
        brew install bazelisk
        bazelisk --version

    - name: Verify Production Targets File
      id: verify-targets
      run: |
        # Ensure the production targets file exists
        if [ ! -f "team-utils/production_targets.txt" ]; then
          echo "Error: Production targets file not found at team-utils/production_targets.txt"
          exit 1
        fi
        
        # Count targets
        TARGET_COUNT=$(wc -l < team-utils/production_targets.txt | xargs)
        echo "Found $TARGET_COUNT production targets in team-utils/production_targets.txt"
        
        # Output sample of production targets (first 5)
        echo "Sample production targets:"
        head -n 5 team-utils/production_targets.txt
        
        # Enable additional debugging if requested
        if [[ "${{ github.event.inputs.debug_enabled }}" == "true" ]]; then
          echo "Debug mode enabled - listing all production targets:"
          cat team-utils/production_targets.txt
        fi

    - name: Build All Production Targets
      run: |
        echo "Building all production targets with prodonly configuration..."
        
        # Create batch build lists to help with timeouts (approximately 25 targets per batch)
        split -l 25 team-utils/production_targets.txt target_batch_
        
        # Count batches
        BATCH_COUNT=$(ls target_batch_* | wc -l | xargs)
        echo "Split build into $BATCH_COUNT batches"
        
        # Build each batch
        for batch in target_batch_*; do
          echo "Building batch $(basename $batch)..."
          bazelisk build --config=prodonly -k --verbose_failures $(cat $batch)
        done

    - name: Summarise Build Results
      if: always()
      run: |
        TARGET_COUNT=$(wc -l < team-utils/production_targets.txt | xargs)
        echo "Completed build of $TARGET_COUNT production targets"
        echo "This build was run on a GitHub-hosted macOS ARM64 runner"
        echo "See team-utils/production_targets.txt for the complete list of targets"
