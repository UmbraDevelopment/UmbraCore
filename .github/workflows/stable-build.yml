name: Production Build

on: 
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run with additional debug logging'
        required: false
        default: false
        type: boolean

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  SDKROOT: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  production-build:
    name: Build All Production Targets
    runs-on: [self-hosted, macOS, ARM64]
    
    steps:
    - uses: actions/checkout@v4
      with:
        clean: true
        fetch-depth: 0

    - name: Setup Xcode
      run: |
        xcode-select --print-path
        swift --version

    - name: Install Bazelisk
      run: |
        brew install bazelisk || true
        bazelisk --version

    - name: Verify Production Targets File
      id: verify-targets
      run: |
        # Ensure the production targets file exists
        if [ ! -f "team-utils/production_targets.txt" ]; then
          echo "Error: Production targets file not found at team-utils/production_targets.txt"
          exit 1
        fi
        
        # Count targets
        TARGET_COUNT=$(wc -l < team-utils/production_targets.txt | xargs)
        echo "Found $TARGET_COUNT production targets in team-utils/production_targets.txt"
        
        # Output sample of production targets (first 5)
        echo "Sample production targets:"
        head -n 5 team-utils/production_targets.txt
        
        # Enable additional debugging if requested
        if [[ "${{ github.event.inputs.debug_enabled }}" == "true" ]]; then
          echo "Debug mode enabled - listing all production targets:"
          cat team-utils/production_targets.txt
        fi

    - name: Build All Production Targets
      run: |
        echo "Building all production targets with prodonly configuration..."
        # DocC documentation is only built in local environments or through the docs.yml workflow
        # Using --define=build_environment=nonlocal explicitly prevents DocC from being built for targets with localonly=True
        bazelisk build --config=prodonly --define=build_environment=nonlocal -k --verbose_failures $(cat team-utils/production_targets.txt)

    - name: Summarise Build Results
      if: always()
      run: |
        TARGET_COUNT=$(wc -l < team-utils/production_targets.txt | xargs)
        echo "Completed build of $TARGET_COUNT production targets"
        echo "This build included all production targets for the Alpha release"
        echo "See team-utils/production_targets.txt for the complete list of targets"
