[
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:26:21.285107+01:00",
    "end_time": "2025-04-06T11:26:23.759821+01:00",
    "duration": "2.474724084s",
    "output": "INFO: Invocation ID: 23724392-08e7-4509-a427-69aefe876817\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (1 packages loaded)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (4 packages loaded, 7 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (4 packages loaded, 7 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (105 packages loaded, 2792 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/APIInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/APIInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/APIInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/libAPIInterfaces.a\nINFO: Elapsed time: 1.873s, Critical Path: 0.01s\nINFO: 1 process: 61 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:26:23.759853+01:00",
    "end_time": "2025-04-06T11:26:24.719859+01:00",
    "duration": "960.009625ms",
    "output": "INFO: Invocation ID: 167b4a2b-5ac7-48b2-b481-8f99db14d40f\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces (1 packages loaded, 6 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/ConfigInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/ConfigInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/ConfigInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/libConfigInterfaces.a\nINFO: Elapsed time: 0.141s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs",
    "success": true,
    "start_time": "2025-04-06T11:26:24.719866+01:00",
    "end_time": "2025-04-06T11:26:25.423381+01:00",
    "duration": "703.517875ms",
    "output": "INFO: Invocation ID: 3280bb08-ea81-4cfc-bebd-6550cbc4122e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/libCoreDTOs.a\nINFO: Elapsed time: 0.142s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests",
    "success": true,
    "start_time": "2025-04-06T11:26:25.423385+01:00",
    "end_time": "2025-04-06T11:26:26.161333+01:00",
    "duration": "737.950917ms",
    "output": "INFO: Invocation ID: 142a2c99-4217-4b3d-bb03-02cd4a8e954c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests (0 packages loaded, 1 target configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOsTests.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOsTests.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOsTests.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/libCoreDTOsTests.a\nINFO: Elapsed time: 0.149s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:26:26.161338+01:00",
    "end_time": "2025-04-06T11:26:26.912109+01:00",
    "duration": "750.774125ms",
    "output": "INFO: Invocation ID: 3fa4eaff-d306-42f4-bb09-1c8587db53e7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces (1 packages loaded, 8 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/CoreInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/CoreInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/CoreInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/libCoreInterfaces.a\nINFO: Elapsed time: 0.161s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes",
    "success": true,
    "start_time": "2025-04-06T11:26:26.912114+01:00",
    "end_time": "2025-04-06T11:26:27.613352+01:00",
    "duration": "701.240875ms",
    "output": "INFO: Invocation ID: 134d2b68-ce08-442a-a2ad-a89bc3fae49b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/libCoreSecurityTypes.a\nINFO: Elapsed time: 0.124s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:26:27.613357+01:00",
    "end_time": "2025-04-06T11:26:28.304461+01:00",
    "duration": "691.106792ms",
    "output": "INFO: Invocation ID: 7210c46d-547c-47d0-aee5-dabe304a1590\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces (2 packages loaded, 15 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/CryptoInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/CryptoInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/CryptoInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/libCryptoInterfaces.a\nINFO: Elapsed time: 0.134s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes",
    "success": true,
    "start_time": "2025-04-06T11:26:28.304468+01:00",
    "end_time": "2025-04-06T11:26:29.035477+01:00",
    "duration": "731.012125ms",
    "output": "INFO: Invocation ID: a9c8a008-640e-4c95-84fb-220454aede8a\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/CryptoTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/CryptoTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/CryptoTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/libCryptoTypes.a\nINFO: Elapsed time: 0.138s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes",
    "success": true,
    "start_time": "2025-04-06T11:26:29.035486+01:00",
    "end_time": "2025-04-06T11:26:29.746526+01:00",
    "duration": "711.04275ms",
    "output": "INFO: Invocation ID: e3c22e63-f213-4255-9c87-cb9379347afa\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/DateTimeTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/DateTimeTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/DateTimeTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/libDateTimeTypes.a\nINFO: Elapsed time: 0.143s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes",
    "success": true,
    "start_time": "2025-04-06T11:26:29.746531+01:00",
    "end_time": "2025-04-06T11:26:30.451334+01:00",
    "duration": "704.806125ms",
    "output": "INFO: Invocation ID: 8a3046e8-ea81-4192-80c9-c271503b46e0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/DomainSecurityTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/DomainSecurityTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/DomainSecurityTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/libDomainSecurityTypes.a\nINFO: Elapsed time: 0.142s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes",
    "success": true,
    "start_time": "2025-04-06T11:26:30.451354+01:00",
    "end_time": "2025-04-06T11:26:31.164932+01:00",
    "duration": "713.580792ms",
    "output": "INFO: Invocation ID: 7ba5a9dd-0c16-41fc-a80d-84e17d2fa059\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/ErrorCoreTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/ErrorCoreTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/ErrorCoreTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/libErrorCoreTypes.a\nINFO: Elapsed time: 0.135s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes",
    "success": true,
    "start_time": "2025-04-06T11:26:31.164938+01:00",
    "end_time": "2025-04-06T11:26:31.860824+01:00",
    "duration": "695.888875ms",
    "output": "INFO: Invocation ID: cefd1790-988f-418a-a274-b42057d00479\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/FileSystemTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/FileSystemTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/FileSystemTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/libFileSystemTypes.a\nINFO: Elapsed time: 0.141s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes",
    "success": true,
    "start_time": "2025-04-06T11:26:31.860833+01:00",
    "end_time": "2025-04-06T11:26:32.576065+01:00",
    "duration": "715.235834ms",
    "output": "INFO: Invocation ID: 8e02fb4b-98f9-4b94-b473-a854203b4bd0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes (1 packages loaded, 7 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/libKeyManagementTypes.a\nINFO: Elapsed time: 0.148s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests",
    "success": true,
    "start_time": "2025-04-06T11:26:32.576072+01:00",
    "end_time": "2025-04-06T11:26:33.285968+01:00",
    "duration": "709.8995ms",
    "output": "INFO: Invocation ID: fac1b317-1483-4674-bf19-eb3ff2ed1da7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests (0 packages loaded, 1 target configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypesTests.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypesTests.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypesTests.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/libKeyManagementTypesTests.a\nINFO: Elapsed time: 0.149s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes",
    "success": true,
    "start_time": "2025-04-06T11:26:33.285974+01:00",
    "end_time": "2025-04-06T11:26:34.002989+01:00",
    "duration": "717.018708ms",
    "output": "INFO: Invocation ID: 53f027e1-50e9-4f1c-b60a-8c2c79c1a536\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes (2 packages loaded, 9 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/packages_UmbraCoreTypes_Sources_KeychainTypes_KeychainTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/packages_UmbraCoreTypes_Sources_KeychainTypes_KeychainTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/packages_UmbraCoreTypes_Sources_KeychainTypes_KeychainTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/libKeychainTypes.a\nINFO: Elapsed time: 0.153s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes",
    "success": true,
    "start_time": "2025-04-06T11:26:34.002995+01:00",
    "end_time": "2025-04-06T11:26:34.72861+01:00",
    "duration": "725.617583ms",
    "output": "INFO: Invocation ID: b7e61939-20a2-455a-b109-4c5d99f773a1\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/libLoggingTypes.a\nINFO: Elapsed time: 0.149s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/Notification:Notification",
    "success": true,
    "start_time": "2025-04-06T11:26:34.728616+01:00",
    "end_time": "2025-04-06T11:26:35.447857+01:00",
    "duration": "719.244041ms",
    "output": "INFO: Invocation ID: 031bbd1e-5603-42ae-9773-b6bdfbfab89e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Notification:Notification (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Notification:Notification (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/Notification:Notification (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/Notification:Notification up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/Notification.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/Notification.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/Notification.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/libNotification.a\nINFO: Elapsed time: 0.146s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling",
    "success": true,
    "start_time": "2025-04-06T11:26:35.447864+01:00",
    "end_time": "2025-04-06T11:26:36.142806+01:00",
    "duration": "694.94425ms",
    "output": "INFO: Invocation ID: 16d497a7-3dc1-472a-b49b-fa843b0f6c77\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/Scheduling.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/Scheduling.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/Scheduling.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/libScheduling.a\nINFO: Elapsed time: 0.139s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:26:36.142814+01:00",
    "end_time": "2025-04-06T11:26:36.866469+01:00",
    "duration": "723.657791ms",
    "output": "INFO: Invocation ID: b2fe370d-59ce-4d3b-b359-5377ea4a9f3c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/SecurityInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/SecurityInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/SecurityInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/libSecurityInterfaces.a\nINFO: Elapsed time: 0.153s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters",
    "success": true,
    "start_time": "2025-04-06T11:26:36.866474+01:00",
    "end_time": "2025-04-06T11:26:37.585391+01:00",
    "duration": "718.92025ms",
    "output": "INFO: Invocation ID: adf9326d-5058-4544-a196-ced39eba88bd\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters (3 packages loaded, 17 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/SecurityInterfacesAdapters.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/SecurityInterfacesAdapters.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/SecurityInterfacesAdapters.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/libSecurityInterfacesAdapters.a\nINFO: Elapsed time: 0.142s, Critical Path: 0.00s\nINFO: 1 process: 7 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs",
    "success": true,
    "start_time": "2025-04-06T11:26:37.585414+01:00",
    "end_time": "2025-04-06T11:26:38.278844+01:00",
    "duration": "693.433042ms",
    "output": "INFO: Invocation ID: ad9a1abc-5937-4e7e-9528-25906cee7c69\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/SecurityInterfacesDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/SecurityInterfacesDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/SecurityInterfacesDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/libSecurityInterfacesDTOs.a\nINFO: Elapsed time: 0.147s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels",
    "success": true,
    "start_time": "2025-04-06T11:26:38.278849+01:00",
    "end_time": "2025-04-06T11:26:39.020273+01:00",
    "duration": "741.426709ms",
    "output": "INFO: Invocation ID: 1ff83092-adf4-4887-b127-80bb462fd088\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/SecurityInterfacesModels.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/SecurityInterfacesModels.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/SecurityInterfacesModels.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/libSecurityInterfacesModels.a\nINFO: Elapsed time: 0.151s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols",
    "success": true,
    "start_time": "2025-04-06T11:26:39.020279+01:00",
    "end_time": "2025-04-06T11:26:39.74171+01:00",
    "duration": "721.434208ms",
    "output": "INFO: Invocation ID: b063b267-43c1-477c-b420-f427272cbe09\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/libSecurityInterfacesProtocols.a\nINFO: Elapsed time: 0.145s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes",
    "success": true,
    "start_time": "2025-04-06T11:26:39.741716+01:00",
    "end_time": "2025-04-06T11:26:40.448562+01:00",
    "duration": "706.849084ms",
    "output": "INFO: Invocation ID: 65863aa2-0c98-4483-8460-f92cf6efa1b1\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/SecurityInterfacesTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/SecurityInterfacesTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/SecurityInterfacesTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/libSecurityInterfacesTypes.a\nINFO: Elapsed time: 0.154s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC",
    "success": true,
    "start_time": "2025-04-06T11:26:40.448567+01:00",
    "end_time": "2025-04-06T11:26:41.163498+01:00",
    "duration": "714.933916ms",
    "output": "INFO: Invocation ID: 2fc08ea2-770a-4e15-9d6b-a2c752f27a90\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/SecurityInterfacesXPC.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/SecurityInterfacesXPC.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/SecurityInterfacesXPC.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/libSecurityInterfacesXPC.a\nINFO: Elapsed time: 0.155s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes",
    "success": true,
    "start_time": "2025-04-06T11:26:41.163505+01:00",
    "end_time": "2025-04-06T11:26:41.883635+01:00",
    "duration": "720.132959ms",
    "output": "INFO: Invocation ID: 11f30fa0-33fa-4bbe-a6f7-c133a16554c2\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes (1 packages loaded, 3 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/SecurityKeyTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/SecurityKeyTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/SecurityKeyTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/libSecurityKeyTypes.a\nINFO: Elapsed time: 0.144s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors",
    "success": true,
    "start_time": "2025-04-06T11:26:41.883649+01:00",
    "end_time": "2025-04-06T11:26:42.57653+01:00",
    "duration": "692.88375ms",
    "output": "INFO: Invocation ID: 072f0b50-a3e8-4687-8fbb-970d6470f116\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/UmbraErrors.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/UmbraErrors.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/UmbraErrors.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/libUmbraErrors.a\nINFO: Elapsed time: 0.145s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore",
    "success": true,
    "start_time": "2025-04-06T11:26:42.576538+01:00",
    "end_time": "2025-04-06T11:26:43.251914+01:00",
    "duration": "675.378709ms",
    "output": "INFO: Invocation ID: 278ce84d-3f7e-456c-8cac-48f9c1a586a0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/UmbraErrorsCore.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/UmbraErrorsCore.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/UmbraErrorsCore.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/libUmbraErrorsCore.a\nINFO: Elapsed time: 0.126s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs",
    "success": true,
    "start_time": "2025-04-06T11:26:43.251926+01:00",
    "end_time": "2025-04-06T11:26:43.98861+01:00",
    "duration": "736.686459ms",
    "output": "INFO: Invocation ID: ce8e2f02-ec26-4f6e-8ffa-4ac931c81afc\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/UmbraErrorsDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/UmbraErrorsDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/UmbraErrorsDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/libUmbraErrorsDTOs.a\nINFO: Elapsed time: 0.143s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains",
    "success": true,
    "start_time": "2025-04-06T11:26:43.988615+01:00",
    "end_time": "2025-04-06T11:26:44.710276+01:00",
    "duration": "721.664458ms",
    "output": "INFO: Invocation ID: 49932e10-e3df-4c0a-86d9-c5231299e631\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/UmbraErrorsDomains.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/UmbraErrorsDomains.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/UmbraErrorsDomains.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/libUmbraErrorsDomains.a\nINFO: Elapsed time: 0.135s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping",
    "success": true,
    "start_time": "2025-04-06T11:26:44.710283+01:00",
    "end_time": "2025-04-06T11:26:45.434651+01:00",
    "duration": "724.370541ms",
    "output": "INFO: Invocation ID: 55cbb262-b870-4200-a203-e2004e6236b3\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/UmbraErrorsMapping.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/UmbraErrorsMapping.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/UmbraErrorsMapping.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/libUmbraErrorsMapping.a\nINFO: Elapsed time: 0.142s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults",
    "success": true,
    "start_time": "2025-04-06T11:26:45.434661+01:00",
    "end_time": "2025-04-06T11:26:46.155198+01:00",
    "duration": "720.539625ms",
    "output": "INFO: Invocation ID: 8409d6ef-1db9-4795-83e6-a2fb9f95981f\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/UserDefaults.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/UserDefaults.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/UserDefaults.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/libUserDefaults.a\nINFO: Elapsed time: 0.150s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters",
    "success": true,
    "start_time": "2025-04-06T11:26:46.155204+01:00",
    "end_time": "2025-04-06T11:26:46.851518+01:00",
    "duration": "696.316792ms",
    "output": "INFO: Invocation ID: 5b2cd612-2865-48c1-b0ad-aa50ef51f87a\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/UserDefaultsAdapters.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/UserDefaultsAdapters.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/UserDefaultsAdapters.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/libUserDefaultsAdapters.a\nINFO: Elapsed time: 0.143s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs",
    "success": true,
    "start_time": "2025-04-06T11:26:46.851541+01:00",
    "end_time": "2025-04-06T11:26:47.602231+01:00",
    "duration": "750.693292ms",
    "output": "INFO: Invocation ID: 14648ad8-4ac9-4b3b-b62d-b1a0eea9e022\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/UserDefaultsDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/UserDefaultsDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/UserDefaultsDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/libUserDefaultsDTOs.a\nINFO: Elapsed time: 0.143s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/APIServices:APIServices",
    "success": false,
    "start_time": "2025-04-06T11:26:47.602237+01:00",
    "end_time": "2025-04-06T11:26:50.565179+01:00",
    "duration": "2.962954375s",
    "output": "INFO: Invocation ID: f13759c4-a68e-4c12-8de9-650faead29a9\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/APIServices:APIServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/APIServices:APIServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/APIServices:APIServices (11 packages loaded, 95 targets configured).\n[22 / 24] Compiling Swift module //packages/UmbraImplementations/Sources/APIServices:APIServices; 1s disk-cache, worker\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/APIServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/APIServices:APIServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/APIServices:APIServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.4.1-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/APIServices/APIServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:2:8: error: no such module 'LoggingServices'\n  1 | import APIInterfaces\n  2 | import LoggingServices\n    |        `- error: no such module 'LoggingServices'\n  3 | \n  4 | import BackupInterfaces\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:2:8: error: no such module 'LoggingServices'\n  1 | import APIInterfaces\n  2 | import LoggingServices\n    |        `- error: no such module 'LoggingServices'\n  3 | \n  4 | import BackupInterfaces\nTarget //packages/UmbraImplementations/Sources/APIServices:APIServices failed to build\nINFO: Elapsed time: 2.421s, Critical Path: 2.26s\nINFO: 2 processes: 21 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator",
    "success": false,
    "start_time": "2025-04-06T11:26:50.565185+01:00",
    "end_time": "2025-04-06T11:26:57.780971+01:00",
    "duration": "7.215815792s",
    "output": "INFO: Invocation ID: 7b3f1846-1d96-48be-9bf2-e46dd6bc0576\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator (17 packages loaded, 155 targets configured).\n[33 / 36] Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices; 1s disk-cache, worker\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/BackupServices/BUILD.bazel:3:14: Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/BackupServices:BackupServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.4.1-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/BackupServices/BackupServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:712:45: error: cannot find type 'VerificationResult' in scope\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n713 |     // Create a log context\n714 |     let logContext=BackupLogContext()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:710:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n708 |     snapshotID: String?,\n709 |     verifyData: Bool=true,\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n    |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:60:65: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                 `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:59:26: error: cannot find type 'CancellationToken' in scope\n 57 |     parameters: BackupCreateParameters,\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:129:66: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:128:26: error: cannot find type 'CancellationToken' in scope\n126 |     parameters: BackupRestoreParameters,\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:193:26: error: cannot find type 'CancellationToken' in scope\n191 |   public func listBackups(\n192 |     parameters: BackupListParameters,\n193 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n194 |   ) async throws -\u003e [BackupSnapshot] {\n195 |     // Create the list command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:250:21: error: cannot find type 'DeleteResult' in scope\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n250 |   ) async throws -\u003e DeleteResult {\n    |                     `- error: cannot find type 'DeleteResult' in scope\n251 |     // Create the delete command\n252 |     var command=ResticCommandImpl(arguments: [\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:249:26: error: cannot find type 'CancellationToken' in scope\n247 |   public func deleteBackup(\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n250 |   ) async throws -\u003e DeleteResult {\n251 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:296:26: error: cannot find type 'CancellationToken' in scope\n294 |     pattern: String?=nil,\n295 |     progressReporter _: BackupProgressReporter?,\n296 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n297 |   ) async throws -\u003e [SnapshotFileEntry] {\n298 |     // Create the find command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:664:80: error: cannot find type 'DeleteResult' in scope\n662 |    * Parse delete result from JSON output.\n663 |    */\n664 |   private func parseDeleteResult(output: String, snapshotID: String) throws -\u003e DeleteResult {\n    |                                                                                `- error: cannot find type 'DeleteResult' in scope\n665 |     guard let data=output.data(using: .utf8) else {\n666 |       throw BackupOperationError.parsingFailure(\"Could not convert output to data\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:707:70: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                      `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:706:26: error: cannot find type 'CancellationToken' in scope\n704 |     parameters: BackupMaintenanceParameters,\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:204:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n202 |         if let progressReporter=reporter {\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n205 |               phase: .processing,\n206 |               percentComplete: 0.3,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:204:27: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n202 |         if let progressReporter=reporter {\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n205 |               phase: .processing,\n206 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:205:15: error: missing argument for parameter 'from' in call\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n205 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n206 |               percentComplete: 0.3,\n207 |               currentItem: \"Retrieving snapshot details\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:205:23: error: cannot infer contextual base in reference to member 'processing'\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n205 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n206 |               percentComplete: 0.3,\n207 |               currentItem: \"Retrieving snapshot details\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:212:39: error: 'nil' requires a contextual type\n210 |               processedBytes: 0,\n211 |               totalBytes: 0,\n212 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n213 |               bytesPerSecond: nil,\n214 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:213:31: error: 'nil' requires a contextual type\n211 |               totalBytes: 0,\n212 |               estimatedTimeRemaining: nil,\n213 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n214 |               error: nil\n215 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:214:22: error: 'nil' requires a contextual type\n212 |               estimatedTimeRemaining: nil,\n213 |               bytesPerSecond: nil,\n214 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n215 |             ),\n216 |             for: .getSnapshotDetails\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:356:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n354 |         if let reporter {\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n357 |               phase: .processing,\n358 |               percentComplete: 0.3,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:356:27: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n354 |         if let reporter {\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n357 |               phase: .processing,\n358 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:357:15: error: missing argument for parameter 'from' in call\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n357 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n358 |               percentComplete: 0.3,\n359 |               currentItem: \"Searching for files\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:357:23: error: cannot infer contextual base in reference to member 'processing'\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n357 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n358 |               percentComplete: 0.3,\n359 |               currentItem: \"Searching for files\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:364:39: error: 'nil' requires a contextual type\n362 |               processedBytes: 0,\n363 |               totalBytes: 0,\n364 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n365 |               bytesPerSecond: nil,\n366 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:365:31: error: 'nil' requires a contextual type\n363 |               totalBytes: 0,\n364 |               estimatedTimeRemaining: nil,\n365 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n366 |               error: nil\n367 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:366:22: error: 'nil' requires a contextual type\n364 |               estimatedTimeRemaining: nil,\n365 |               bytesPerSecond: nil,\n366 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n367 |             ),\n368 |             for: .findFiles\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:105:14: error: 'ResticCommand' is ambiguous for type lookup in this context\n103 |    */\n104 |   private func executeWithProgressUpdates(\n105 |     command: ResticCommand,\n    |              `- error: 'ResticCommand' is ambiguous for type lookup in this context\n106 |     progressReporter: BackupProgressReporter?,\n107 |     cancellationToken: BackupCancellationToken?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:4:17: note: found this candidate\n 2 | \n 3 | /// Protocol defining the requirements for a Restic command\n 4 | public protocol ResticCommand: Sendable {\n   |                 `- note: found this candidate\n 5 |   /// Arguments for the command\n 6 |   var arguments: [String] { get }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticCommand.swift:21:15: note: found this candidate\n 19 | \n 20 | /// A structured representation of a Restic command\n 21 | public struct ResticCommand: ResticInterfaces.ResticCommand, Sendable {\n    |               `- note: found this candidate\n 22 |   /// The command action to execute\n 23 |   public let action: ResticCommandAction\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n266 |             for: .getSnapshotDetails\n267 |           )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:27: error: extra arguments at positions #1, #2 in call\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |                           `- error: extra arguments at positions #1, #2 in call\n266 |             for: .getSnapshotDetails\n267 |           )\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:28: error: missing argument for parameter 'from' in call\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |                            `- error: missing argument for parameter 'from' in call\n266 |             for: .getSnapshotDetails\n267 |           )\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:36: error: cannot infer contextual base in reference to member 'processing'\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |                                    `- error: cannot infer contextual base in reference to member 'processing'\n266 |             for: .getSnapshotDetails\n267 |           )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:65:45: error: cannot find type 'CancellationToken' in scope\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n    |                                             `- error: cannot find type 'CancellationToken' in scope\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:67:24: error: cannot find type 'CancellationToken' in scope\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 68 |   ) async throws -\u003e R {\n 69 |     // Create a log context for this operation\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:332:47: error: cannot find type 'BackupCreationParameters' in scope\n330 | extension BackupCreateParameters {\n331 |   /// Convert to BackupInterfaces.BackupCreationParameters\n332 |   public func toBackupCreationParameters() -\u003e BackupCreationParameters {\n    |                                               `- error: cannot find type 'BackupCreationParameters' in scope\n333 |     BackupCreationParameters(\n334 |       sources: sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:342:39: error: cannot find type 'BackupCreationParameters' in scope\n340 | \n341 |   /// Create from BackupInterfaces.BackupCreationParameters\n342 |   public static func from(parameters: BackupCreationParameters) -\u003e BackupCreateParameters {\n    |                                       `- error: cannot find type 'BackupCreationParameters' in scope\n343 |     BackupCreateParameters(\n344 |       sources: parameters.sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:354:63: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n352 | extension BackupRestoreParameters {\n353 |   /// Convert to BackupInterfaces.BackupRestoreParameters\n354 |   public func toBackupRestoreParameters() -\u003e BackupInterfaces.BackupRestoreParameters {\n    |                                                               `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n355 |     BackupInterfaces.BackupRestoreParameters(\n356 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:368:8: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n366 |   public static func from(\n367 |     parameters: BackupInterfaces\n368 |       .BackupRestoreParameters\n    |        `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n369 |   ) -\u003e BackupRestoreParameters {\n370 |     BackupRestoreParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:382:60: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n380 | extension BackupListParameters {\n381 |   /// Convert to BackupInterfaces.BackupListParameters\n382 |   public func toBackupListParameters() -\u003e BackupInterfaces.BackupListParameters {\n    |                                                            `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n383 |     BackupInterfaces.BackupListParameters(\n384 |       tags: tags,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:396:8: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n394 |   public static func from(\n395 |     parameters: BackupInterfaces\n396 |       .BackupListParameters\n    |        `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n397 |   ) -\u003e BackupListParameters {\n398 |     BackupListParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:217:41: error: cannot find type 'VerificationResult' in scope\n215 | extension BackupVerificationResultDTO {\n216 |   /// Convert this DTO to a BackupInterfaces.VerificationResult\n217 |   public func toVerificationResult() -\u003e VerificationResult {\n    |                                         `- error: cannot find type 'VerificationResult' in scope\n218 |     VerificationResult(\n219 |       verified: verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:231:47: error: cannot find type 'VerificationResult' in scope\n229 | \n230 |   /// Create a BackupVerificationResultDTO from a BackupInterfaces.VerificationResult\n231 |   public static func from(verificationResult: VerificationResult) -\u003e BackupVerificationResultDTO {\n    |                                               `- error: cannot find type 'VerificationResult' in scope\n232 |     BackupVerificationResultDTO(\n233 |       verified: verificationResult.verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:245:39: error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n243 | }\n244 | \n245 | extension BackupVerificationResultDTO.VerificationIssue {\n    |                                       `- error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n246 |   /// Convert this DTO to a BackupInterfaces.VerificationIssue\n247 |   public func toVerificationIssue() -\u003e VerificationResult.VerificationIssue {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:271:39: error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n269 | }\n270 | \n271 | extension BackupVerificationResultDTO.RepairSummary {\n    |                                       `- error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n272 |   /// Convert this DTO to a BackupInterfaces.RepairSummary\n273 |   public func toRepairSummary() -\u003e VerificationResult.RepairSummary {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:294:39: error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n292 | }\n293 | \n294 | extension BackupVerificationResultDTO.RepairAction {\n    |                                       `- error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n295 |   /// Convert this DTO to a BackupInterfaces.RepairAction\n296 |   public func toRepairAction() -\u003e VerificationResult.RepairAction {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:25:21: error: type 'ProgressCancellationTokenAdapter' does not conform to protocol 'ProgressCancellationToken'\n23 | \n24 | /// Adapter that allows a BackupOperationCancellationToken to be used as a ProgressCancellationToken\n25 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken {\n   |                     |- error: type 'ProgressCancellationTokenAdapter' does not conform to protocol 'ProgressCancellationToken'\n   |                     `- note: add stubs for conformance\n26 |   private let token: BackupOperationCancellationToken\n27 | \n   :\n31 | \n32 |   var isCancelled: Bool {\n33 |     get async {\n   |     `- note: candidate is 'async', but protocol requirement is not\n34 |       await token.isCancelled\n35 |     }\n36 |   }\n37 | \n38 |   func cancel() async {\n   |        `- note: candidate is 'async', but protocol requirement is not\n39 |     await token.cancel()\n40 |   }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:341:7: note: protocol requires property 'isCancelled' with type 'Bool'\n339 | public protocol ProgressCancellationToken: Sendable {\n340 |   /// Checks if the operation has been cancelled\n341 |   var isCancelled: Bool { get }\n    |       `- note: protocol requires property 'isCancelled' with type 'Bool'\n342 | \n343 |   /// Attempts to cancel the operation\n344 |   func cancel()\n    |        `- note: protocol requires function 'cancel()' with type '() -\u003e ()'\n345 | }\n346 | \npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:39:9: warning: initialization of immutable value 'operationsService' was never used; consider replacing with assignment to '_' or removing it\n 37 | \n 38 |     // Create operations service\n 39 |     let operationsService=BackupOperationsService(\n    |         `- warning: initialization of immutable value 'operationsService' was never used; consider replacing with assignment to '_' or removing it\n 40 |       resticService: resticService,\n 41 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:47:9: warning: initialization of immutable value 'operationExecutor' was never used; consider replacing with assignment to '_' or removing it\n 45 | \n 46 |     // Create operation executor\n 47 |     let operationExecutor=BackupOperationExecutor(\n    |         `- warning: initialization of immutable value 'operationExecutor' was never used; consider replacing with assignment to '_' or removing it\n 48 |       logger: logger,\n 49 |       cancellationHandler: cancellationHandler,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:43:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 41 |     let defaultMessage=\"Starting backup operation: \\(operation)\"\n 42 | \n 43 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 44 |       message ?? defaultMessage,\n 45 |       metadata: logContext.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:67:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 65 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"success\", privacy: .public)\n 66 | \n 67 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 68 |       message ?? defaultMessage,\n 69 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:91:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 89 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n 90 | \n 91 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 92 |       message ?? defaultMessage,\n 93 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:119:88: error: value of type 'BackupError' has no member 'code'\n117 |     // Add error details with appropriate privacy levels\n118 |     if let backupError=error as? BackupError {\n119 |       metadata[\"errorCode\"]=PrivacyMetadataValue(value: String(describing: backupError.code),\n    |                                                                                        `- error: value of type 'BackupError' has no member 'code'\n120 |                                                  privacy: .public)\n121 |       metadata[\"errorMessage\"]=PrivacyMetadataValue(value: backupError.localizedDescription,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:125:39: error: value of type 'BackupError' has no member 'context'\n123 | \n124 |       // Add structured error context if available\n125 |       if let errorContext=backupError.context {\n    |                                       `- error: value of type 'BackupError' has no member 'context'\n126 |         for (key, value) in errorContext {\n127 |           metadata[\"error_\\(key)\"]=PrivacyMetadataValue(value: value, privacy: .private)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:137:18: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n135 |     }\n136 | \n137 |     await logger.error(\n    |                  `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n138 |       message ?? defaultMessage,\n139 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:166:22: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n164 |         metadata[\"description\"]=PrivacyMetadataValue(value: description, privacy: .public)\n165 | \n166 |         await logger.info(\n    |                      `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n167 |           \"Initialising backup operation: \\(operation)\",\n168 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:188:22: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n186 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"completed\", privacy: .public)\n187 | \n188 |         await logger.info(\n    |                      `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n189 |           \"Completed backup operation: \\(operation)\",\n190 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:197:22: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n195 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n196 | \n197 |         await logger.info(\n    |                      `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n198 |           \"Cancelled backup operation: \\(operation)\",\n199 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:218:22: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n216 |         }\n217 | \n218 |         await logger.error(\n    |                      `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n219 |           \"Failed backup operation: \\(operation)\",\n220 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupCommandFactory.swift:178:9: warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n176 |   ) throws -\u003e ResticCommand {\n177 |     // Determine base command from maintenance type\n178 |     var baseCommand=switch type {\n    |         `- warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n179 |       case .check:\n180 |         \"check\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:712:45: error: cannot find type 'VerificationResult' in scope\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n713 |     // Create a log context\n714 |     let logContext=BackupLogContext()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:710:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n708 |     snapshotID: String?,\n709 |     verifyData: Bool=true,\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n    |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:65:45: error: cannot find type 'CancellationToken' in scope\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n    |                                             `- error: cannot find type 'CancellationToken' in scope\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:67:24: error: cannot find type 'CancellationToken' in scope\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 68 |   ) async throws -\u003e R {\n 69 |     // Create a log context for this operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:60:65: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                 `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:59:26: error: cannot find type 'CancellationToken' in scope\n 57 |     parameters: BackupCreateParameters,\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:210:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n208 |         value: result,\n209 |         progressStream: progressReporter.stream,\n210 |         metadata: metadata\n    |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n211 |       )\n212 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:226:26: error: generic parameter 'some Sendable' could not be inferred\n224 | \n225 |       // Log success\n226 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n227 |         context: enhancedContext,\n228 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)? = nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:129:66: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:128:26: error: cannot find type 'CancellationToken' in scope\n126 |     parameters: BackupRestoreParameters,\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:364:26: error: generic parameter 'some Sendable' could not be inferred\n362 | \n363 |       // Log success\n364 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n365 |         context: enhancedContext,\n366 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)? = nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:440:20: error: extra argument 'listOptions' in call\n438 |       before: before,\n439 |       after: after,\n440 |       listOptions: listOptions\n    |                    `- error: extra argument 'listOptions' in call\n441 |     )\n442 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:445:49: error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n443 |     do {\n444 |       // Execute the operation\n445 |       let snapshots=try await operationsService.listSnapshots(parameters: parameters)\n    |                                                 `- error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n446 | \n447 |       // Record the end time\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:460:26: error: generic parameter 'some Sendable' could not be inferred\n458 | \n459 |       // Log success\n460 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n461 |         context: enhancedContext,\n462 |         result: snapshots\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)? = nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:513:40: error: value of type 'DeleteOptions' has no member 'prune'\n511 |     let parameters=BackupDeleteParameters(\n512 |       snapshotID: snapshotID,\n513 |       pruneAfterDelete: deleteOptions?.prune ?? false\n    |                                        `- error: value of type 'DeleteOptions' has no member 'prune'\n514 |     )\n515 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:250:21: error: cannot find type 'DeleteResult' in scope\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n250 |   ) async throws -\u003e DeleteResult {\n    |                     `- error: cannot find type 'DeleteResult' in scope\n251 |     // Create the delete command\n252 |     var command=ResticCommandImpl(arguments: [\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:249:26: error: cannot find type 'CancellationToken' in scope\n247 |   public func deleteBackup(\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n250 |   ) async throws -\u003e DeleteResult {\n251 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:567:26: error: generic parameter 'some Sendable' could not be inferred\n565 | \n566 |       // Log success\n567 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n568 |         context: enhancedContext,\n569 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)? = nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:707:70: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                      `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:706:26: error: cannot find type 'CancellationToken' in scope\n704 |     parameters: BackupMaintenanceParameters,\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:660:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n658 |         value: result,\n659 |         progressStream: progressReporter.stream,\n660 |         metadata: metadata\n    |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n661 |       )\n662 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:670:26: error: generic parameter 'some Sendable' could not be inferred\n668 | \n669 |       // Log success\n670 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n671 |         context: enhancedContext,\n672 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)? = nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:734:19: error: type 'BackupOperation' has no member 'verifyBackup'\n732 |     let token=BackupOperationToken(\n733 |       id: UUID(),\n734 |       operation: .verifyBackup,\n    |                   `- error: type 'BackupOperation' has no member 'verifyBackup'\n735 |       cancellable: true\n736 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:747:30: error: type 'BackupVerifyParameters' has no member 'RepairMode'\n745 |     // Create DTO parameters for the operation using adapter pattern\n746 |     let localRepairMode=repairMode.map {\n747 |       BackupVerifyParameters.RepairMode(rawValue: $0.rawValue) ?? .reportOnly\n    |                              `- error: type 'BackupVerifyParameters' has no member 'RepairMode'\n748 |     }\n749 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:750:50: error: type 'VerifyOptions' has no member 'from'\n748 |     }\n749 | \n750 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n    |                                                  `- error: type 'VerifyOptions' has no member 'from'\n751 | \n752 |     let parameters=BackupVerifyParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:752:42: error: extra arguments at positions #2, #3, #4 in call\n750 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n751 | \n752 |     let parameters=BackupVerifyParameters(\n    |                                          `- error: extra arguments at positions #2, #3, #4 in call\n753 |       snapshotID: snapshotID,\n754 |       verifyData: verifyData,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:753:29: error: missing argument for parameter 'verifyOptions' in call\n751 | \n752 |     let parameters=BackupVerifyParameters(\n753 |       snapshotID: snapshotID,\n    |                             `- error: missing argument for parameter 'verifyOptions' in call\n754 |       verifyData: verifyData,\n755 |       repairMode: localRepairMode,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:761:61: error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n759 |     do {\n760 |       // Execute the operation\n761 |       let verificationResultDTO=try await operationExecutor.executeVerifyOperation(\n    |                                                             `- error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n762 |         parameters: parameters,\n763 |         progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:772:26: error: generic parameter 'some Sendable' could not be inferred\n770 | \n771 |       // Log operation success\n772 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n773 |         context: enhancedContext,\n774 |         duration: duration\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)? = nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:774:19: error: extra argument 'duration' in call\n772 |       await backupLogger.logOperationSuccess(\n773 |         context: enhancedContext,\n774 |         duration: duration\n    |                   `- error: extra argument 'duration' in call\n775 |       )\n776 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:792:29: error: value of type 'any Error' has no member 'asBackupOperationError'\n790 |     } catch {\n791 |       // Map error\n792 |       let backupError=error.asBackupOperationError\n    |                             `- error: value of type 'any Error' has no member 'asBackupOperationError'\n793 | \n794 |       // Log error\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:831:37: error: extra argument 'error' in call\n829 |       await backupLogger.logOperationFailure(\n830 |         context: logContext,\n831 |         error: BackupOperationError.operationNotFound(\"Operation with ID \\(operationID) not found\")\n    |                                     `- error: extra argument 'error' in call\n832 |       )\n833 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:831:37: error: type 'BackupOperationError' has no member 'operationNotFound'\n829 |       await backupLogger.logOperationFailure(\n830 |         context: logContext,\n831 |         error: BackupOperationError.operationNotFound(\"Operation with ID \\(operationID) not found\")\n    |                                     `- error: type 'BackupOperationError' has no member 'operationNotFound'\n832 |       )\n833 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:842:12: error: extra argument 'error' in call\n840 |         context: logContext,\n841 |         error: BackupOperationError\n842 |           .operationNotCancellable(\"Operation \\(token.operation) cannot be cancelled\")\n    |            `- error: extra argument 'error' in call\n843 |       )\n844 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:842:12: error: type 'BackupOperationError' has no member 'operationNotCancellable'\n840 |         context: logContext,\n841 |         error: BackupOperationError\n842 |           .operationNotCancellable(\"Operation \\(token.operation) cannot be cancelled\")\n    |            `- error: type 'BackupOperationError' has no member 'operationNotCancellable'\n843 |       )\n844 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:852:26: error: generic parameter 'some Sendable' could not be inferred\n850 | \n851 |       // Log success\n852 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n853 |         context: logContext,\n854 |         message: \"Operation cancelled successfully\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)? = nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:862:16: error: extra argument 'error' in call\n860 |       await backupLogger.logOperationFailure(\n861 |         context: logContext,\n862 |         error: error\n    |                `- error: extra argument 'error' in call\n863 |       )\n864 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:877:11: error: cannot assign to property: 'cancelled' setter is inaccessible\n875 |   private func cancelOperationImpl(token: BackupOperationToken) async throws {\n876 |     // Signal cancellation to the operation\n877 |     token.cancelled=true\n    |           `- error: cannot assign to property: 'cancelled' setter is inaccessible\n878 | \n879 |     // Remove from active operations\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:888:24: error: value of type 'BackupLogger' has no member 'logInfo'\n886 |       .withPublic(key: \"operationType\", value: String(describing: token.operation))\n887 | \n888 |     await backupLogger.logInfo(\n    |                        `- error: value of type 'BackupLogger' has no member 'logInfo'\n889 |       context: logContext,\n890 |       message: \"Operation cancellation complete\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:907:45: error: cannot find type 'RepositoryError' in scope\n905 |     } else if error is CancellationError {\n906 |       .operationCancelled(\"Operation was cancelled\")\n907 |     } else if let repositoryError=error as? RepositoryError {\n    |                                             `- error: cannot find type 'RepositoryError' in scope\n908 |       .repositoryError(repositoryError)\n909 |     } else if let timeout=error as? TimeoutError {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:930:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n928 | \n929 |     // Map known error types\n930 |     if let nsError=error as? NSError {\n    |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n931 |       switch nsError.domain {\n932 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:935:19: error: type 'BackupOperationError' has no member 'fileSystemError'\n933 |           return .networkError(\"Network error: \\(nsError.localizedDescription)\")\n934 |         case NSCocoaErrorDomain:\n935 |           return .fileSystemError(\"File system error: \\(nsError.localizedDescription)\")\n    |                   `- error: type 'BackupOperationError' has no member 'fileSystemError'\n936 |         default:\n937 |           break\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:942:13: error: type 'BackupOperationError' has no member 'unknownError'\n940 | \n941 |     // Default to unknown error with the original description\n942 |     return .unknownError(\"Operation failed: \\(error.localizedDescription)\")\n    |             `- error: type 'BackupOperationError' has no member 'unknownError'\n943 |   }\n944 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:954:13: warning: result of call to 'cancelOperation(id:)' is unused\n952 | \n953 |     for (id, _) in activeOperationsCancellationTokens {\n954 |       await cancelOperation(id: id)\n    |             `- warning: result of call to 'cancelOperation(id:)' is unused\n955 |     }\n956 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:974:49: error: value of type 'String' has no member 'uuidString'\n972 |     let logContext=BackupLogContext()\n973 |       .withOperation(\"cancelOperation\")\n974 |       .withPublic(key: \"operationID\", value: id.uuidString)\n    |                                                 `- error: value of type 'String' has no member 'uuidString'\n975 | \n976 |     // Log cancellation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:980:29: error: value of type 'BackupOperationExecutor' has no member 'cancelOperation'\n978 | \n979 |     // Cancel the operation\n980 |     await operationExecutor.cancelOperation(id: token.id)\n    |                             `- error: value of type 'BackupOperationExecutor' has no member 'cancelOperation'\n981 | \n982 |     // Remove the token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:193:26: error: cannot find type 'CancellationToken' in scope\n191 |   public func listBackups(\n192 |     parameters: BackupListParameters,\n193 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n194 |   ) async throws -\u003e [BackupSnapshot] {\n195 |     // Create the list command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:296:26: error: cannot find type 'CancellationToken' in scope\n294 |     pattern: String?=nil,\n295 |     progressReporter _: BackupProgressReporter?,\n296 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n297 |   ) async throws -\u003e [SnapshotFileEntry] {\n298 |     // Create the find command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:664:80: error: cannot find type 'DeleteResult' in scope\n662 |    * Parse delete result from JSON output.\n663 |    */\n664 |   private func parseDeleteResult(output: String, snapshotID: String) throws -\u003e DeleteResult {\n    |                                                                                `- error: cannot find type 'DeleteResult' in scope\n665 |     guard let data=output.data(using: .utf8) else {\n666 |       throw BackupOperationError.parsingFailure(\"Could not convert output to data\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:62:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n 64 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:63:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 64 |       progressContinuation=continuation\n 65 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:63:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n 64 |       progressContinuation=continuation\n 65 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:69:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 67 |     // Create a progress handler that forwards to both the reporter and the stream\n 68 |     let progressHandler={ [progressReporter, progressContinuation] (\n 69 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 70 |     ) async in\n 71 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:94:20: error: value of optional type '[URL]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[URL]'\n 92 | \n 93 |     // Add exclude paths\n 94 |     if !parameters.excludePaths.isEmpty {\n    |                    |- error: value of optional type '[URL]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[URL]'\n    |                    |- note: chain the optional using '?' to access member 'isEmpty' only for non-'nil' base values\n    |                    `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n 95 |       command.arguments.append(\"--exclude\")\n 96 |       command.arguments.append(contentsOf: parameters.excludePaths)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:96:25: error: no exact matches in call to instance method 'append'\n 94 |     if !parameters.excludePaths.isEmpty {\n 95 |       command.arguments.append(\"--exclude\")\n 96 |       command.arguments.append(contentsOf: parameters.excludePaths)\n    |                         |- error: no exact matches in call to instance method 'append'\n    |                         |- note: candidate expects value of type '[String]' for parameter #1 (got '[URL]?')\n    |                         `- note: candidate expects value of type '[String]' for parameter #1 (got '[URL]?')\n 97 |     }\n 98 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:100:20: error: value of optional type '[String]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[String]'\n 98 | \n 99 |     // Add tags\n100 |     if !parameters.tags.isEmpty {\n    |                    |- error: value of optional type '[String]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[String]'\n    |                    |- note: chain the optional using '?' to access member 'isEmpty' only for non-'nil' base values\n    |                    `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n101 |       command.arguments.append(\"--tag\")\n102 |       command.arguments.append(contentsOf: parameters.tags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:102:55: error: value of optional type '[String]?' must be unwrapped to a value of type '[String]'\n100 |     if !parameters.tags.isEmpty {\n101 |       command.arguments.append(\"--tag\")\n102 |       command.arguments.append(contentsOf: parameters.tags)\n    |                                                       |- error: value of optional type '[String]?' must be unwrapped to a value of type '[String]'\n    |                                                       |- note: coalesce using '??' to provide a default when the optional value contains 'nil'\n    |                                                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n103 |     }\n104 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:109:71: error: missing argument for parameter 'sources' in call\n107 | \n108 |     // Parse the result\n109 |     let backupResult=try resultParser.parseBackupResult(output: output)\n    |                                                                       `- error: missing argument for parameter 'sources' in call\n110 | \n111 |     // Return the result and the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:16:15: note: 'parseBackupResult(output:sources:)' declared here\n 14 |   /// - Returns: A backup result with details about the operation\n 15 |   /// - Throws: BackupError if parsing fails\n 16 |   public func parseBackupResult(output: String, sources: [URL]) throws -\u003e BackupResult {\n    |               `- note: 'parseBackupResult(output:sources:)' declared here\n 17 |     guard !output.isEmpty else {\n 18 |       throw BackupError.parsingError(details: \"Empty output from backup command\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:131:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n133 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:132:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n133 |       progressContinuation=continuation\n134 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:132:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n133 |       progressContinuation=continuation\n134 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:138:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n136 |     // Create a progress handler that forwards to both the reporter and the stream\n137 |     let progressHandler={ [progressReporter, progressContinuation] (\n138 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n139 |     ) async in\n140 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:157:18: error: cannot convert value of type 'URL' to expected element type 'Array\u003cString\u003e.ArrayLiteralElement' (aka 'String')\n155 |       parameters.snapshotID,\n156 |       \"--target\",\n157 |       parameters.targetPath\n    |                  `- error: cannot convert value of type 'URL' to expected element type 'Array\u003cString\u003e.ArrayLiteralElement' (aka 'String')\n158 |     ])\n159 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:161:20: error: value of optional type '[URL]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[URL]'\n159 | \n160 |     // Add include paths\n161 |     if !parameters.includePaths.isEmpty {\n    |                    |- error: value of optional type '[URL]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[URL]'\n    |                    |- note: chain the optional using '?' to access member 'isEmpty' only for non-'nil' base values\n    |                    `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n162 |       command.arguments.append(\"--include\")\n163 |       command.arguments.append(contentsOf: parameters.includePaths)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:167:20: error: value of optional type '[URL]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[URL]'\n165 | \n166 |     // Add exclude paths\n167 |     if !parameters.excludePaths.isEmpty {\n    |                    |- error: value of optional type '[URL]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[URL]'\n    |                    |- note: chain the optional using '?' to access member 'isEmpty' only for non-'nil' base values\n    |                    `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n168 |       command.arguments.append(\"--exclude\")\n169 |       command.arguments.append(contentsOf: parameters.excludePaths)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:176:73: error: missing argument for parameter 'targetPath' in call\n174 | \n175 |     // Parse the result\n176 |     let restoreResult=try resultParser.parseRestoreResult(output: output)\n    |                                                                         `- error: missing argument for parameter 'targetPath' in call\n177 | \n178 |     // Return the result and the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:63:15: note: 'parseRestoreResult(output:targetPath:)' declared here\n 61 |   /// - Returns: A RestoreResult object\n 62 |   /// - Throws: BackupError if parsing fails\n 63 |   public func parseRestoreResult(output: String, targetPath: URL) throws -\u003e RestoreResult {\n    |               `- note: 'parseRestoreResult(output:targetPath:)' declared here\n 64 |     // Simple parsing - look for file restoration lines\n 65 |     let lines=output.components(separatedBy: .newlines)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:202:20: error: value of optional type '[String]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[String]'\n200 | \n201 |     // Add tags\n202 |     if !parameters.tags.isEmpty {\n    |                    |- error: value of optional type '[String]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[String]'\n    |                    |- note: chain the optional using '?' to access member 'isEmpty' only for non-'nil' base values\n    |                    `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n203 |       command.arguments.append(\"--tag\")\n204 |       command.arguments.append(contentsOf: parameters.tags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:204:55: error: value of optional type '[String]?' must be unwrapped to a value of type '[String]'\n202 |     if !parameters.tags.isEmpty {\n203 |       command.arguments.append(\"--tag\")\n204 |       command.arguments.append(contentsOf: parameters.tags)\n    |                                                       |- error: value of optional type '[String]?' must be unwrapped to a value of type '[String]'\n    |                                                       |- note: coalesce using '??' to provide a default when the optional value contains 'nil'\n    |                                                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n205 |     }\n206 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:353:55: error: type 'BackupOperation' has no member 'verifyBackup'\n351 |       // Forward to the progress reporter if provided\n352 |       if let reporter=progressReporter {\n353 |         await reporter.reportProgress(progress, for: .verifyBackup)\n    |                                                       `- error: type 'BackupOperation' has no member 'verifyBackup'\n354 |       }\n355 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:376:11: error: cannot find 'snapshotService' in scope\n374 |       let snapshot=try await (\n375 |         snapshotID != nil ?\n376 |           snapshotService.getSnapshot(id: snapshotID!) :\n    |           `- error: cannot find 'snapshotService' in scope\n377 |           snapshotService.getLatestSnapshot()\n378 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:377:11: error: cannot find 'snapshotService' in scope\n375 |         snapshotID != nil ?\n376 |           snapshotService.getSnapshot(id: snapshotID!) :\n377 |           snapshotService.getLatestSnapshot()\n    |           `- error: cannot find 'snapshotService' in scope\n378 |       )\n379 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:382:36: error: type 'BackupOperationError' has no member 'snapshotNotFound'\n380 |       // Early exit if no snapshot found\n381 |       guard let snapshot else {\n382 |         throw BackupOperationError.snapshotNotFound(\n    |                                    `- error: type 'BackupOperationError' has no member 'snapshotNotFound'\n383 |           \"No snapshot found to verify\" + (snapshotID != nil ? \" with ID \\(snapshotID!)\" : \"\")\n384 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:388:7: error: cannot find 'logger' in scope\n386 | \n387 |       // Log verification start\n388 |       logger.info(\n    |       `- error: cannot find 'logger' in scope\n389 |         context: backupLogContext.withOperation(\"verifyBackup\")\n390 |           .withPublic(key: \"snapshotID\", value: snapshot.id)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:389:18: error: cannot find 'backupLogContext' in scope\n387 |       // Log verification start\n388 |       logger.info(\n389 |         context: backupLogContext.withOperation(\"verifyBackup\")\n    |                  `- error: cannot find 'backupLogContext' in scope\n390 |           .withPublic(key: \"snapshotID\", value: snapshot.id)\n391 |           .withPublic(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:407:23: error: extra argument 'transferRate' in call\n405 |         totalBytes: 0,\n406 |         estimatedTimeRemaining: nil,\n407 |         transferRate: nil,\n    |                       `- error: extra argument 'transferRate' in call\n408 |         details: \"Analysing snapshot structure\"\n409 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:407:23: error: 'nil' requires a contextual type\n405 |         totalBytes: 0,\n406 |         estimatedTimeRemaining: nil,\n407 |         transferRate: nil,\n    |                       `- error: 'nil' requires a contextual type\n408 |         details: \"Analysing snapshot structure\"\n409 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:412:40: error: cannot find 'snapshotService' in scope\n410 | \n411 |       // Use snapshot service to perform actual verification\n412 |       let verificationResult=try await snapshotService.verifySnapshot(\n    |                                        `- error: cannot find 'snapshotService' in scope\n413 |         id: snapshot.id,\n414 |         fullVerification: verifyOptions?.fullVerification ?? false,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:434:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n432 |         itemsProcessed: Int(Double(totalItems) * 0.25),\n433 |         totalItems: totalItems,\n434 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.25),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n435 |         totalBytes: UInt64(snapshot.stats.totalSize)\n436 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:450:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n448 |         itemsProcessed: Int(Double(totalItems) * 0.5),\n449 |         totalItems: totalItems,\n450 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.5),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n451 |         totalBytes: UInt64(snapshot.stats.totalSize)\n452 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:466:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n464 |         itemsProcessed: Int(Double(totalItems) * 0.75),\n465 |         totalItems: totalItems,\n466 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.75),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n467 |         totalBytes: UInt64(snapshot.stats.totalSize)\n468 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:709:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n711 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n711 |       progressContinuation=continuation\n712 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n711 |       progressContinuation=continuation\n712 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:716:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n714 |     // Create a progress handler that forwards to both the reporter and the stream\n715 |     let progressHandler={ [progressReporter, progressContinuation] (\n716 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n717 |     ) async in\n718 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:758:7: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n756 |     // Report progress\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n    |       `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n759 |         phase: .processing,\n760 |         percentComplete: 0.1,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:758:21: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n756 |     // Report progress\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n    |                     `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n759 |         phase: .processing,\n760 |         percentComplete: 0.1,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:759:9: error: missing argument for parameter 'from' in call\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n759 |         phase: .processing,\n    |         `- error: missing argument for parameter 'from' in call\n760 |         percentComplete: 0.1,\n761 |         currentItem: \"Starting maintenance\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:759:17: error: cannot infer contextual base in reference to member 'processing'\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n759 |         phase: .processing,\n    |                 `- error: cannot infer contextual base in reference to member 'processing'\n760 |         percentComplete: 0.1,\n761 |         currentItem: \"Starting maintenance\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:766:33: error: 'nil' requires a contextual type\n764 |         processedBytes: 0,\n765 |         totalBytes: 0,\n766 |         estimatedTimeRemaining: nil,\n    |                                 `- error: 'nil' requires a contextual type\n767 |         bytesPerSecond: nil,\n768 |         error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:767:25: error: 'nil' requires a contextual type\n765 |         totalBytes: 0,\n766 |         estimatedTimeRemaining: nil,\n767 |         bytesPerSecond: nil,\n    |                         `- error: 'nil' requires a contextual type\n768 |         error: nil\n769 |       ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:768:16: error: 'nil' requires a contextual type\n766 |         estimatedTimeRemaining: nil,\n767 |         bytesPerSecond: nil,\n768 |         error: nil\n    |                `- error: 'nil' requires a contextual type\n769 |       ),\n770 |       for: .maintenance\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:773:46: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n771 |     )\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n    |                                              `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n774 |       phase: .processing,\n775 |       percentComplete: 0.1,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:774:7: error: missing argument for parameter 'from' in call\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n774 |       phase: .processing,\n    |       `- error: missing argument for parameter 'from' in call\n775 |       percentComplete: 0.1,\n776 |       currentItem: \"Starting maintenance\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:774:15: error: cannot infer contextual base in reference to member 'processing'\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n774 |       phase: .processing,\n    |               `- error: cannot infer contextual base in reference to member 'processing'\n775 |       percentComplete: 0.1,\n776 |       currentItem: \"Starting maintenance\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:781:31: error: 'nil' requires a contextual type\n779 |       processedBytes: 0,\n780 |       totalBytes: 0,\n781 |       estimatedTimeRemaining: nil,\n    |                               `- error: 'nil' requires a contextual type\n782 |       bytesPerSecond: nil,\n783 |       error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:782:23: error: 'nil' requires a contextual type\n780 |       totalBytes: 0,\n781 |       estimatedTimeRemaining: nil,\n782 |       bytesPerSecond: nil,\n    |                       `- error: 'nil' requires a contextual type\n783 |       error: nil\n784 |     ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:783:14: error: 'nil' requires a contextual type\n781 |       estimatedTimeRemaining: nil,\n782 |       bytesPerSecond: nil,\n783 |       error: nil\n    |              `- error: 'nil' requires a contextual type\n784 |     ))\n785 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:791:7: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n789 |     // Report completion\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n    |       `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n792 |         phase: .completed,\n793 |         percentComplete: 1.0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:791:21: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n789 |     // Report completion\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n    |                     `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n792 |         phase: .completed,\n793 |         percentComplete: 1.0,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:792:9: error: missing argument for parameter 'from' in call\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n792 |         phase: .completed,\n    |         `- error: missing argument for parameter 'from' in call\n793 |         percentComplete: 1.0,\n794 |         currentItem: \"Maintenance completed\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:792:17: error: cannot infer contextual base in reference to member 'completed'\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n792 |         phase: .completed,\n    |                 `- error: cannot infer contextual base in reference to member 'completed'\n793 |         percentComplete: 1.0,\n794 |         currentItem: \"Maintenance completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:799:33: error: 'nil' requires a contextual type\n797 |         processedBytes: 0,\n798 |         totalBytes: 0,\n799 |         estimatedTimeRemaining: nil,\n    |                                 `- error: 'nil' requires a contextual type\n800 |         bytesPerSecond: nil,\n801 |         error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:800:25: error: 'nil' requires a contextual type\n798 |         totalBytes: 0,\n799 |         estimatedTimeRemaining: nil,\n800 |         bytesPerSecond: nil,\n    |                         `- error: 'nil' requires a contextual type\n801 |         error: nil\n802 |       ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:801:16: error: 'nil' requires a contextual type\n799 |         estimatedTimeRemaining: nil,\n800 |         bytesPerSecond: nil,\n801 |         error: nil\n    |                `- error: 'nil' requires a contextual type\n802 |       ),\n803 |       for: .maintenance\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:806:46: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n804 |     )\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n    |                                              `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n807 |       phase: .completed,\n808 |       percentComplete: 1.0,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:807:7: error: missing argument for parameter 'from' in call\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n807 |       phase: .completed,\n    |       `- error: missing argument for parameter 'from' in call\n808 |       percentComplete: 1.0,\n809 |       currentItem: \"Maintenance completed\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:807:15: error: cannot infer contextual base in reference to member 'completed'\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n807 |       phase: .completed,\n    |               `- error: cannot infer contextual base in reference to member 'completed'\n808 |       percentComplete: 1.0,\n809 |       currentItem: \"Maintenance completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:814:31: error: 'nil' requires a contextual type\n812 |       processedBytes: 0,\n813 |       totalBytes: 0,\n814 |       estimatedTimeRemaining: nil,\n    |                               `- error: 'nil' requires a contextual type\n815 |       bytesPerSecond: nil,\n816 |       error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:815:23: error: 'nil' requires a contextual type\n813 |       totalBytes: 0,\n814 |       estimatedTimeRemaining: nil,\n815 |       bytesPerSecond: nil,\n    |                       `- error: 'nil' requires a contextual type\n816 |       error: nil\n817 |     ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:816:14: error: 'nil' requires a contextual type\n814 |       estimatedTimeRemaining: nil,\n815 |       bytesPerSecond: nil,\n816 |       error: nil\n    |              `- error: 'nil' requires a contextual type\n817 |     ))\n818 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:71:14: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 69 |     if\n 70 |       error is CancellationError ||\n 71 |       (error as? NSError)?.domain == NSURLErrorDomain \u0026\u0026\n    |              `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 72 |       (error as? NSError)?.code == NSURLErrorCancelled\n 73 |     {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:72:14: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 70 |       error is CancellationError ||\n 71 |       (error as? NSError)?.domain == NSURLErrorDomain \u0026\u0026\n 72 |       (error as? NSError)?.code == NSURLErrorCancelled\n    |              `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 73 |     {\n 74 |       return BackupOperationError.operationCancelled(\"Operation was cancelled by the user\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:85:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 83 | \n 84 |     // Map NSError\n 85 |     if let nsError=error as? NSError {\n    |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 86 |       switch nsError.domain {\n 87 |         case NSPOSIXErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:83:40: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n 81 |           // Update progress\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n    |                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n 84 |               phase: .processing,\n 85 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:84:15: error: missing argument for parameter 'from' in call\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n 84 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n 85 |               percentComplete: 0.3,\n 86 |               currentItem: \"Updating snapshot tags\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:84:23: error: cannot infer contextual base in reference to member 'processing'\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n 84 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n 85 |               percentComplete: 0.3,\n 86 |               currentItem: \"Updating snapshot tags\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:91:39: error: 'nil' requires a contextual type\n 89 |               processedBytes: 0,\n 90 |               totalBytes: 0,\n 91 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n 92 |               bytesPerSecond: nil,\n 93 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:92:31: error: 'nil' requires a contextual type\n 90 |               totalBytes: 0,\n 91 |               estimatedTimeRemaining: nil,\n 92 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n 93 |               error: nil\n 94 |             )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:93:22: error: 'nil' requires a contextual type\n 91 |               estimatedTimeRemaining: nil,\n 92 |               bytesPerSecond: nil,\n 93 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n 94 |             )\n 95 |             await reporter.reportProgress(progress, for: .updateTags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:152:40: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n150 |           // Update progress\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n    |                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n153 |               phase: .processing,\n154 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:153:15: error: missing argument for parameter 'from' in call\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n153 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n154 |               percentComplete: 0.3,\n155 |               currentItem: \"Updating snapshot description\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:153:23: error: cannot infer contextual base in reference to member 'processing'\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n153 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n154 |               percentComplete: 0.3,\n155 |               currentItem: \"Updating snapshot description\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:160:39: error: 'nil' requires a contextual type\n158 |               processedBytes: 0,\n159 |               totalBytes: 0,\n160 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n161 |               bytesPerSecond: nil,\n162 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:161:31: error: 'nil' requires a contextual type\n159 |               totalBytes: 0,\n160 |               estimatedTimeRemaining: nil,\n161 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n162 |               error: nil\n163 |             )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:162:22: error: 'nil' requires a contextual type\n160 |               estimatedTimeRemaining: nil,\n161 |               bytesPerSecond: nil,\n162 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n163 |             )\n164 |             await reporter.reportProgress(progress, for: .updateTags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:80:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n 78 |         if let progressReporter=reporter {\n 79 |           await progressReporter.reportProgress(\n 80 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n 81 |               phase: .processing,\n 82 |               percentComplete: 0.3\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:80:27: error: extra arguments at positions #1, #2 in call\n 78 |         if let progressReporter=reporter {\n 79 |           await progressReporter.reportProgress(\n 80 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2 in call\n 81 |               phase: .processing,\n 82 |               percentComplete: 0.3\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:81:15: error: missing argument for parameter 'from' in call\n 79 |           await progressReporter.reportProgress(\n 80 |             BackupProgress(\n 81 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n 82 |               percentComplete: 0.3\n 83 |             ),\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:81:23: error: cannot infer contextual base in reference to member 'processing'\n 79 |           await progressReporter.reportProgress(\n 80 |             BackupProgress(\n 81 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n 82 |               percentComplete: 0.3\n 83 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:127:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n125 |         if let progressReporter=reporter {\n126 |           await progressReporter.reportProgress(\n127 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n128 |               phase: .processing,\n129 |               percentComplete: 0.3\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:127:27: error: extra arguments at positions #1, #2 in call\n125 |         if let progressReporter=reporter {\n126 |           await progressReporter.reportProgress(\n127 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2 in call\n128 |               phase: .processing,\n129 |               percentComplete: 0.3\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:128:15: error: missing argument for parameter 'from' in call\n126 |           await progressReporter.reportProgress(\n127 |             BackupProgress(\n128 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n129 |               percentComplete: 0.3\n130 |             ),\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:128:23: error: cannot infer contextual base in reference to member 'processing'\n126 |           await progressReporter.reportProgress(\n127 |             BackupProgress(\n128 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n129 |               percentComplete: 0.3\n130 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:204:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n202 |         if let progressReporter=reporter {\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n205 |               phase: .processing,\n206 |               percentComplete: 0.3,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:204:27: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n202 |         if let progressReporter=reporter {\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n205 |               phase: .processing,\n206 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:205:15: error: missing argument for parameter 'from' in call\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n205 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n206 |               percentComplete: 0.3,\n207 |               currentItem: \"Retrieving snapshot details\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:205:23: error: cannot infer contextual base in reference to member 'processing'\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n205 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n206 |               percentComplete: 0.3,\n207 |               currentItem: \"Retrieving snapshot details\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:212:39: error: 'nil' requires a contextual type\n210 |               processedBytes: 0,\n211 |               totalBytes: 0,\n212 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n213 |               bytesPerSecond: nil,\n214 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:213:31: error: 'nil' requires a contextual type\n211 |               totalBytes: 0,\n212 |               estimatedTimeRemaining: nil,\n213 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n214 |               error: nil\n215 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:214:22: error: 'nil' requires a contextual type\n212 |               estimatedTimeRemaining: nil,\n213 |               bytesPerSecond: nil,\n214 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n215 |             ),\n216 |             for: .getSnapshotDetails\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:254:9: error: type of expression is ambiguous without a type annotation\n252 |     cancellationToken: BackupCancellationToken?\n253 |   ) async throws -\u003e BackupSnapshotComparisonResult {\n254 |     try await operationExecutor.execute(\n    |         `- error: type of expression is ambiguous without a type annotation\n255 |       parameters: parameters,\n256 |       progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:356:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n354 |         if let reporter {\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n357 |               phase: .processing,\n358 |               percentComplete: 0.3,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:356:27: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n354 |         if let reporter {\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n357 |               phase: .processing,\n358 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:357:15: error: missing argument for parameter 'from' in call\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n357 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n358 |               percentComplete: 0.3,\n359 |               currentItem: \"Searching for files\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:357:23: error: cannot infer contextual base in reference to member 'processing'\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n357 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n358 |               percentComplete: 0.3,\n359 |               currentItem: \"Searching for files\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:364:39: error: 'nil' requires a contextual type\n362 |               processedBytes: 0,\n363 |               totalBytes: 0,\n364 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n365 |               bytesPerSecond: nil,\n366 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:365:31: error: 'nil' requires a contextual type\n363 |               totalBytes: 0,\n364 |               estimatedTimeRemaining: nil,\n365 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n366 |               error: nil\n367 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:366:22: error: 'nil' requires a contextual type\n364 |               estimatedTimeRemaining: nil,\n365 |               bytesPerSecond: nil,\n366 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n367 |             ),\n368 |             for: .findFiles\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:475:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n473 |         if let progressReporter=reporter {\n474 |           await progressReporter.reportProgress(\n475 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n476 |               phase: .processing,\n477 |               percentComplete: 0.3\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:475:27: error: extra arguments at positions #1, #2 in call\n473 |         if let progressReporter=reporter {\n474 |           await progressReporter.reportProgress(\n475 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2 in call\n476 |               phase: .processing,\n477 |               percentComplete: 0.3\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:476:15: error: missing argument for parameter 'from' in call\n474 |           await progressReporter.reportProgress(\n475 |             BackupProgress(\n476 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n477 |               percentComplete: 0.3\n478 |             ),\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:476:23: error: cannot infer contextual base in reference to member 'processing'\n474 |           await progressReporter.reportProgress(\n475 |             BackupProgress(\n476 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n477 |               percentComplete: 0.3\n478 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:326:92: error: cannot convert value of type 'LogPrivacyLevel' to expected argument type 'PrivacyClassification'\n324 | \n325 |         return context\n326 |           .with(key: \"pattern\", value: pattern, privacy: LoggingInterfaces.LogPrivacyLevel.public)\n    |                                                                                            `- error: cannot convert value of type 'LogPrivacyLevel' to expected argument type 'PrivacyClassification'\n327 |           .with(\n328 |             key: \"caseSensitive\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:330:56: error: cannot convert value of type 'LogPrivacyLevel' to expected argument type 'PrivacyClassification'\n328 |             key: \"caseSensitive\",\n329 |             value: String(caseSensitive),\n330 |             privacy: LoggingInterfaces.LogPrivacyLevel.public\n    |                                                        `- error: cannot convert value of type 'LogPrivacyLevel' to expected argument type 'PrivacyClassification'\n331 |           )\n332 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:105:14: error: 'ResticCommand' is ambiguous for type lookup in this context\n103 |    */\n104 |   private func executeWithProgressUpdates(\n105 |     command: ResticCommand,\n    |              `- error: 'ResticCommand' is ambiguous for type lookup in this context\n106 |     progressReporter: BackupProgressReporter?,\n107 |     cancellationToken: BackupCancellationToken?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:4:17: note: found this candidate\n 2 | \n 3 | /// Protocol defining the requirements for a Restic command\n 4 | public protocol ResticCommand: Sendable {\n   |                 `- note: found this candidate\n 5 |   /// Arguments for the command\n 6 |   var arguments: [String] { get }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticCommand.swift:21:15: note: found this candidate\n 19 | \n 20 | /// A structured representation of a Restic command\n 21 | public struct ResticCommand: ResticInterfaces.ResticCommand, Sendable {\n    |               `- note: found this candidate\n 22 |   /// The command action to execute\n 23 |   public let action: ResticCommandAction\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:73:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n 71 |         if let progressReporter=reporter {\n 72 |           await progressReporter.reportProgress(\n 73 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n 74 |               phase: .processing,\n 75 |               percentComplete: 0.3\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:73:27: error: extra arguments at positions #1, #2 in call\n 71 |         if let progressReporter=reporter {\n 72 |           await progressReporter.reportProgress(\n 73 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2 in call\n 74 |               phase: .processing,\n 75 |               percentComplete: 0.3\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:74:15: error: missing argument for parameter 'from' in call\n 72 |           await progressReporter.reportProgress(\n 73 |             BackupProgress(\n 74 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n 75 |               percentComplete: 0.3\n 76 |             ),\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:74:23: error: cannot infer contextual base in reference to member 'processing'\n 72 |           await progressReporter.reportProgress(\n 73 |             BackupProgress(\n 74 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n 75 |               percentComplete: 0.3\n 76 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:125:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n123 |         if let reporter=progressReporter {\n124 |           await reporter.reportProgress(\n125 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n126 |               phase: .processing,\n127 |               percentComplete: progress\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:125:27: error: extra arguments at positions #1, #2 in call\n123 |         if let reporter=progressReporter {\n124 |           await reporter.reportProgress(\n125 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2 in call\n126 |               phase: .processing,\n127 |               percentComplete: progress\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:126:15: error: missing argument for parameter 'from' in call\n124 |           await reporter.reportProgress(\n125 |             BackupProgress(\n126 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n127 |               percentComplete: progress\n128 |             ),\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:126:23: error: cannot infer contextual base in reference to member 'processing'\n124 |           await reporter.reportProgress(\n125 |             BackupProgress(\n126 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n127 |               percentComplete: progress\n128 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:143:26: error: cannot call value of non-function type 'Bool'\n141 |         // Check for cancellation in a loop\n142 |         while !Task.isCancelled {\n143 |           if await token.isCancelled() {\n    |                          `- error: cannot call value of non-function type 'Bool'\n144 |             executionTask.cancel()\n145 |             progressTask.cancel()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:158:22: warning: no 'async' operations occur within 'await' expression\n156 |     do {\n157 |       // Wait for execution to complete\n158 |       let result=try await executionTask.value\n    |                      `- warning: no 'async' operations occur within 'await' expression\n159 | \n160 |       // Cancel progress updates\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:158:18: warning: no calls to throwing functions occur within 'try' expression\n156 |     do {\n157 |       // Wait for execution to complete\n158 |       let result=try await executionTask.value\n    |                  `- warning: no calls to throwing functions occur within 'try' expression\n159 | \n160 |       // Cancel progress updates\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n266 |             for: .getSnapshotDetails\n267 |           )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:27: error: extra arguments at positions #1, #2 in call\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |                           `- error: extra arguments at positions #1, #2 in call\n266 |             for: .getSnapshotDetails\n267 |           )\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:28: error: missing argument for parameter 'from' in call\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |                            `- error: missing argument for parameter 'from' in call\n266 |             for: .getSnapshotDetails\n267 |           )\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:36: error: cannot infer contextual base in reference to member 'processing'\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |                                    `- error: cannot infer contextual base in reference to member 'processing'\n266 |             for: .getSnapshotDetails\n267 |           )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupErrorMapper.swift:43:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n41 | \n42 |     // Handle NSError types\n43 |     if let nsError=error as? NSError {\n   |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n44 |       switch nsError.domain {\n45 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:76:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 74 | \n 75 |     // Log the start of the operation\n 76 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 77 |       \"Starting backup operation: \\(parameters.operationType)\",\n 78 |       metadata: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:108:20: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n106 | \n107 |       // Log the completion of the operation\n108 |       await logger.info(\n    |                    `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n109 |         \"Completed backup operation: \\(parameters.operationType)\",\n110 |         metadata: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:124:20: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n122 | \n123 |       // Log the cancellation of the operation\n124 |       await logger.info(\n    |                    `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n125 |         \"Cancelled backup operation: \\(parameters.operationType)\",\n126 |         metadata: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:145:20: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n143 | \n144 |       // Log the failure of the operation\n145 |       await logger.error(\n    |                    `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n146 |         \"Failed backup operation: \\(parameters.operationType) - \\(error.localizedDescription)\",\n147 |         metadata: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:101:26: error: cannot call value of non-function type 'Bool'\n 99 |     // Check if we have a token for this ID\n100 |     if let token=cancellationTokens[id] {\n101 |       return await token.isCancelled()\n    |                          `- error: cannot call value of non-function type 'Bool'\n102 |     }\n103 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:234:30: error: cannot call value of non-function type 'Bool'\n232 |           while !task.isCancelled {\n233 |             if await isOperationActive(id: operationID) {\n234 |               if await token.isCancelled() {\n    |                              `- error: cannot call value of non-function type 'Bool'\n235 |                 _=await cancelOperation(id: operationID)\n236 |                 break\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorMapper.swift:16:5: error: switch must be exhaustive\n 14 |   /// - Returns: An appropriate BackupError\n 15 |   public func convertResticError(_ error: ResticError) -\u003e BackupError {\n 16 |     switch error {\n    |     |- error: switch must be exhaustive\n    |     |- note: add missing case: '.executableNotFound(_)'\n    |     |- note: add missing case: '.commandFailed(exitCode: let exitCode, output: let output)'\n    |     |- note: add missing case: '.credentialError(_)'\n    |     |- note: add missing case: '.repositoryExists(_)'\n    |     `- note: add missing cases\n 17 |       case let .repositoryNotFound(path):\n 18 |         BackupError.repositoryAccessFailure(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:101:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 99 | \n100 |     // Log operation start\n101 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n102 |       \"Starting snapshot operation: \\(operationType.rawValue)\",\n103 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:110:9: error: module 'BackupInterfaces' has no member named 'BackupProgress'\n108 |     if let reporter=progressReporter {\n109 |       await reporter.reportProgress(\n110 |         BackupInterfaces.BackupProgress(\n    |         `- error: module 'BackupInterfaces' has no member named 'BackupProgress'\n111 |           phase: .initialising,\n112 |           percentComplete: 0.0\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:111:19: error: cannot infer contextual base in reference to member 'initialising'\n109 |       await reporter.reportProgress(\n110 |         BackupInterfaces.BackupProgress(\n111 |           phase: .initialising,\n    |                   `- error: cannot infer contextual base in reference to member 'initialising'\n112 |           percentComplete: 0.0\n113 |         ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:133:11: error: module 'BackupInterfaces' has no member named 'BackupProgress'\n131 |       if let reporter=progressReporter {\n132 |         await reporter.reportProgress(\n133 |           BackupInterfaces.BackupProgress(\n    |           `- error: module 'BackupInterfaces' has no member named 'BackupProgress'\n134 |             phase: .completed,\n135 |             percentComplete: 1.0\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:134:21: error: cannot infer contextual base in reference to member 'completed'\n132 |         await reporter.reportProgress(\n133 |           BackupInterfaces.BackupProgress(\n134 |             phase: .completed,\n    |                     `- error: cannot infer contextual base in reference to member 'completed'\n135 |             percentComplete: 1.0\n136 |           ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:146:20: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n144 |                                                           privacy: .public)\n145 | \n146 |       await logger.info(\n    |                    `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n147 |         \"Completed snapshot operation: \\(operationType.rawValue)\",\n148 |         metadata: completionMetadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:170:11: error: module 'BackupInterfaces' has no member named 'BackupProgress'\n168 |       if let reporter=progressReporter {\n169 |         await reporter.reportProgress(\n170 |           BackupInterfaces.BackupProgress(\n    |           `- error: module 'BackupInterfaces' has no member named 'BackupProgress'\n171 |             phase: .failed,\n172 |             percentComplete: 1.0\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:171:21: error: cannot infer contextual base in reference to member 'failed'\n169 |         await reporter.reportProgress(\n170 |           BackupInterfaces.BackupProgress(\n171 |             phase: .failed,\n    |                     `- error: cannot infer contextual base in reference to member 'failed'\n172 |             percentComplete: 1.0\n173 |           ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:186:20: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n184 | \n185 |       // Log error with privacy-aware context\n186 |       await logger.error(\n    |                    `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n187 |         \"Failed snapshot operation: \\(operationType.rawValue)\",\n188 |         metadata: errorContext.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:39:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 37 |     let defaultMessage=\"Starting snapshot operation: \\(logContext.operation)\"\n 38 | \n 39 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 40 |       message ?? defaultMessage,\n 41 |       metadata: logContext.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:59:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 57 |     let defaultMessage=\"Completed snapshot operation: \\(logContext.operation)\"\n 58 | \n 59 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 60 |       message ?? defaultMessage,\n 61 |       metadata: logContext.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:81:18: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n 79 |     let defaultMessage=\"Error during snapshot operation: \\(logContext.operation)\"\n 80 | \n 81 |     await logger.error(\n    |                  `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n 82 |       message ?? defaultMessage,\n 83 |       metadata: logContext.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:108:18: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n106 |                                                privacy: .public)\n107 | \n108 |     await logger.error(\n    |                  `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n109 |       message,\n110 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:128:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n126 |     let defaultMessage=\"Operation completed successfully\"\n127 | \n128 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n129 |       message ?? defaultMessage,\n130 |       metadata: logContext.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:167:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n165 |     }\n166 | \n167 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n168 |       \"Starting snapshot operation: \\(operation)\",\n169 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:214:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n212 |     }\n213 | \n214 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n215 |       \"Completed snapshot operation: \\(operation)\",\n216 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:258:18: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n256 |     }\n257 | \n258 |     await logger.error(\n    |                  `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n259 |       \"Error during snapshot operation: \\(operation)\",\n260 |       metadata: metadata,\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:302:21: error: extra argument 'resolution' in call\n300 |         path: nil,\n301 |         description: \"Repository structure verification failed\",\n302 |         resolution: \"Run a repository maintenance operation to rebuild indices\"\n    |                     `- error: extra argument 'resolution' in call\n303 |       ))\n304 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:300:15: error: 'nil' is not compatible with expected argument type 'String'\n298 |       issues.append(VerificationIssue(\n299 |         type: .inconsistentMetadata,\n300 |         path: nil,\n    |               `- error: 'nil' is not compatible with expected argument type 'String'\n301 |         description: \"Repository structure verification failed\",\n302 |         resolution: \"Run a repository maintenance operation to rebuild indices\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:299:16: error: type 'VerificationIssue.IssueType' has no member 'inconsistentMetadata'\n297 |     if !repositoryValid {\n298 |       issues.append(VerificationIssue(\n299 |         type: .inconsistentMetadata,\n    |                `- error: type 'VerificationIssue.IssueType' has no member 'inconsistentMetadata'\n300 |         path: nil,\n301 |         description: \"Repository structure verification failed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:311:21: error: extra argument 'resolution' in call\n309 |         path: nil,\n310 |         description: \"Data integrity verification failed\",\n311 |         resolution: \"Restore from an alternate backup if possible\"\n    |                     `- error: extra argument 'resolution' in call\n312 |       ))\n313 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:309:15: error: 'nil' is not compatible with expected argument type 'String'\n307 |       issues.append(VerificationIssue(\n308 |         type: .corruptedData,\n309 |         path: nil,\n    |               `- error: 'nil' is not compatible with expected argument type 'String'\n310 |         description: \"Data integrity verification failed\",\n311 |         resolution: \"Restore from an alternate backup if possible\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:308:16: error: type 'VerificationIssue.IssueType' has no member 'corruptedData'\n306 |     if !dataIntegrityValid {\n307 |       issues.append(VerificationIssue(\n308 |         type: .corruptedData,\n    |                `- error: type 'VerificationIssue.IssueType' has no member 'corruptedData'\n309 |         path: nil,\n310 |         description: \"Data integrity verification failed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:320:39: error: extra arguments at positions #1, #3, #4 in call\n318 | \n319 |     // Create and return verification result\n320 |     return BackupVerificationResultDTO(\n    |                                       `- error: extra arguments at positions #1, #3, #4 in call\n321 |       successful: repositoryValid \u0026\u0026 dataIntegrityValid,\n322 |       issues: issues,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:48:10: note: 'init(verified:objectsVerified:bytesVerified:errorCount:issues:repairSummary:snapshotID:verificationTime:)' declared here\n 46 |    *   - verificationTime: Time taken for verification\n 47 |    */\n 48 |   public init(\n    |          `- note: 'init(verified:objectsVerified:bytesVerified:errorCount:issues:repairSummary:snapshotID:verificationTime:)' declared here\n 49 |     verified: Bool,\n 50 |     objectsVerified: Int,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:320:39: error: missing arguments for parameters 'verified', 'objectsVerified', 'bytesVerified', 'errorCount', 'repairSummary', 'snapshotID', 'verificationTime' in call\n318 | \n319 |     // Create and return verification result\n320 |     return BackupVerificationResultDTO(\n    |                                       `- error: missing arguments for parameters 'verified', 'objectsVerified', 'bytesVerified', 'errorCount', 'repairSummary', 'snapshotID', 'verificationTime' in call\n321 |       successful: repositoryValid \u0026\u0026 dataIntegrityValid,\n322 |       issues: issues,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:48:10: note: 'init(verified:objectsVerified:bytesVerified:errorCount:issues:repairSummary:snapshotID:verificationTime:)' declared here\n 46 |    *   - verificationTime: Time taken for verification\n 47 |    */\n 48 |   public init(\n    |          `- note: 'init(verified:objectsVerified:bytesVerified:errorCount:issues:repairSummary:snapshotID:verificationTime:)' declared here\n 49 |     verified: Bool,\n 50 |     objectsVerified: Int,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:384:42: error: extra arguments at positions #5, #6 in call\n382 | \n383 |     // Create a comparison result using the difference data\n384 |     return BackupSnapshotComparisonResult(\n    |                                          `- error: extra arguments at positions #5, #6 in call\n385 |       addedFiles: convertToFileInfoArray(difference.addedFiles),\n386 |       modifiedFiles: convertToFileInfoArray(difference.modifiedFiles),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/SnapshotComparisonResult.swift:48:10: note: 'init(firstSnapshotID:secondSnapshotID:addedFiles:removedFiles:modifiedFiles:unchangedFiles:changeSize:comparisonTimestamp:)' declared here\n46 |    *   - comparisonTimestamp: Timestamp when the comparison was performed\n47 |    */\n48 |   public init(\n   |          `- note: 'init(firstSnapshotID:secondSnapshotID:addedFiles:removedFiles:modifiedFiles:unchangedFiles:changeSize:comparisonTimestamp:)' declared here\n49 |     firstSnapshotID: String,\n50 |     secondSnapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:384:42: error: missing arguments for parameters 'firstSnapshotID', 'secondSnapshotID', 'changeSize' in call\n382 | \n383 |     // Create a comparison result using the difference data\n384 |     return BackupSnapshotComparisonResult(\n    |                                          `- error: missing arguments for parameters 'firstSnapshotID', 'secondSnapshotID', 'changeSize' in call\n385 |       addedFiles: convertToFileInfoArray(difference.addedFiles),\n386 |       modifiedFiles: convertToFileInfoArray(difference.modifiedFiles),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/SnapshotComparisonResult.swift:48:10: note: 'init(firstSnapshotID:secondSnapshotID:addedFiles:removedFiles:modifiedFiles:unchangedFiles:changeSize:comparisonTimestamp:)' declared here\n46 |    *   - comparisonTimestamp: Timestamp when the comparison was performed\n47 |    */\n48 |   public init(\n   |          `- note: 'init(firstSnapshotID:secondSnapshotID:addedFiles:removedFiles:modifiedFiles:unchangedFiles:changeSize:comparisonTimestamp:)' declared here\n49 |     firstSnapshotID: String,\n50 |     secondSnapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:385:19: error: cannot convert value of type '[FileInfo]' to expected argument type '[BackupFile]'\n383 |     // Create a comparison result using the difference data\n384 |     return BackupSnapshotComparisonResult(\n385 |       addedFiles: convertToFileInfoArray(difference.addedFiles),\n    |                   |- error: cannot convert value of type '[FileInfo]' to expected argument type '[BackupFile]'\n    |                   `- note: arguments to generic parameter 'Element' ('FileInfo' and 'BackupFile') are expected to be equal\n386 |       modifiedFiles: convertToFileInfoArray(difference.modifiedFiles),\n387 |       removedFiles: convertToFileInfoArray(difference.removedFiles),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:387:21: error: cannot convert value of type '[FileInfo]' to expected argument type '[BackupFile]'\n385 |       addedFiles: convertToFileInfoArray(difference.addedFiles),\n386 |       modifiedFiles: convertToFileInfoArray(difference.modifiedFiles),\n387 |       removedFiles: convertToFileInfoArray(difference.removedFiles),\n    |                     |- error: cannot convert value of type '[FileInfo]' to expected argument type '[BackupFile]'\n    |                     `- note: arguments to generic parameter 'Element' ('FileInfo' and 'BackupFile') are expected to be equal\n388 |       unchangedFiles: [],\n389 |       totalChangeCount: (difference.addedFiles?.count ?? 0) +\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:386:22: error: cannot convert value of type '[FileInfo]' to expected argument type '[BackupFile]'\n384 |     return BackupSnapshotComparisonResult(\n385 |       addedFiles: convertToFileInfoArray(difference.addedFiles),\n386 |       modifiedFiles: convertToFileInfoArray(difference.modifiedFiles),\n    |                      |- error: cannot convert value of type '[FileInfo]' to expected argument type '[BackupFile]'\n    |                      `- note: arguments to generic parameter 'Element' ('FileInfo' and 'BackupFile') are expected to be equal\n387 |       removedFiles: convertToFileInfoArray(difference.removedFiles),\n388 |       unchangedFiles: [],\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:495:11: warning: initialization of immutable value 'unchangedFiles' was never used; consider replacing with assignment to '_' or removing it\n493 | \n494 |       // Process unchanged files\n495 |       let unchangedFiles=diffResult.unchanged?.map { file in\n    |           `- warning: initialization of immutable value 'unchangedFiles' was never used; consider replacing with assignment to '_' or removing it\n496 |         SnapshotFileEntry(\n497 |           path: file.path ?? \"\",\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:81:41: error: value of type 'any LoggableErrorProtocol' has no member 'getLogMetadata'\n 79 |     if let loggableError = error as? LoggableErrorProtocol {\n 80 |       // Handle loggable errors with enriched metadata\n 81 |       let errorMetadata = loggableError.getLogMetadata()\n    |                                         `- error: value of type 'any LoggableErrorProtocol' has no member 'getLogMetadata'\n 82 |       let formattedMessage = \"[\\(domainName)] \\(loggableError.getLogMessage())\"\n 83 |       let source = \"\\(loggableError.getSource()) via \\(domainName)\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:124:41: error: value of type 'any LoggableErrorProtocol' has no member 'getLogMetadata'\n122 |     if let loggableError = error as? LoggableErrorProtocol {\n123 |       // Handle loggable errors with enriched metadata\n124 |       let errorMetadata = loggableError.getLogMetadata()\n    |                                         `- error: value of type 'any LoggableErrorProtocol' has no member 'getLogMetadata'\n125 |       let formattedMessage = message ?? \"[\\(domainName)] \\(loggableError.getLogMessage())\"\n126 |       let source = \"\\(loggableError.getSource()) via \\(domainName)\"\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:332:47: error: cannot find type 'BackupCreationParameters' in scope\n330 | extension BackupCreateParameters {\n331 |   /// Convert to BackupInterfaces.BackupCreationParameters\n332 |   public func toBackupCreationParameters() -\u003e BackupCreationParameters {\n    |                                               `- error: cannot find type 'BackupCreationParameters' in scope\n333 |     BackupCreationParameters(\n334 |       sources: sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:342:39: error: cannot find type 'BackupCreationParameters' in scope\n340 | \n341 |   /// Create from BackupInterfaces.BackupCreationParameters\n342 |   public static func from(parameters: BackupCreationParameters) -\u003e BackupCreateParameters {\n    |                                       `- error: cannot find type 'BackupCreationParameters' in scope\n343 |     BackupCreateParameters(\n344 |       sources: parameters.sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:354:63: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n352 | extension BackupRestoreParameters {\n353 |   /// Convert to BackupInterfaces.BackupRestoreParameters\n354 |   public func toBackupRestoreParameters() -\u003e BackupInterfaces.BackupRestoreParameters {\n    |                                                               `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n355 |     BackupInterfaces.BackupRestoreParameters(\n356 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:368:8: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n366 |   public static func from(\n367 |     parameters: BackupInterfaces\n368 |       .BackupRestoreParameters\n    |        `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n369 |   ) -\u003e BackupRestoreParameters {\n370 |     BackupRestoreParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:382:60: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n380 | extension BackupListParameters {\n381 |   /// Convert to BackupInterfaces.BackupListParameters\n382 |   public func toBackupListParameters() -\u003e BackupInterfaces.BackupListParameters {\n    |                                                            `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n383 |     BackupInterfaces.BackupListParameters(\n384 |       tags: tags,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:396:8: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n394 |   public static func from(\n395 |     parameters: BackupInterfaces\n396 |       .BackupListParameters\n    |        `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n397 |   ) -\u003e BackupListParameters {\n398 |     BackupListParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:413:35: error: extra arguments at positions #2, #3, #4 in call\n411 |   /// Convert to BackupInterfaces.BackupOptions\n412 |   public func toBackupOptions() -\u003e BackupInterfaces.BackupOptions {\n413 |     BackupInterfaces.BackupOptions(\n    |                                   `- error: extra arguments at positions #2, #3, #4 in call\n414 |       compressionLevel: 0,\n415 |       deduplicate: false,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:27:10: note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 25 |   ///   - useParallelisation: Whether to use parallel operations\n 26 |   ///   - priority: Priority of the backup operation\n 27 |   public init(\n    |          `- note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 28 |     compressionLevel: Int?=nil,\n 29 |     maxSize: UInt64?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:423:18: error: extra arguments at positions #2, #3, #4 in call\n421 |   /// Create from BackupInterfaces.BackupOptions\n422 |   public static func from(options: BackupInterfaces.BackupOptions) -\u003e BackupOptions {\n423 |     BackupOptions(\n    |                  `- error: extra arguments at positions #2, #3, #4 in call\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:27:10: note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 25 |   ///   - useParallelisation: Whether to use parallel operations\n 26 |   ///   - priority: Priority of the backup operation\n 27 |   public init(\n    |          `- note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 28 |     compressionLevel: Int?=nil,\n 29 |     maxSize: UInt64?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:425:28: error: value of type 'BackupOptions' has no member 'deduplicate'\n423 |     BackupOptions(\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n    |                            `- error: value of type 'BackupOptions' has no member 'deduplicate'\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n427 |       metadata: options.metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:426:36: error: value of type 'BackupOptions' has no member 'encryptionAlgorithm'\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n    |                                    `- error: value of type 'BackupOptions' has no member 'encryptionAlgorithm'\n427 |       metadata: options.metadata\n428 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:427:25: error: value of type 'BackupOptions' has no member 'metadata'\n425 |       deduplicate: options.deduplicate,\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n427 |       metadata: options.metadata\n    |                         `- error: value of type 'BackupOptions' has no member 'metadata'\n428 |     )\n429 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:435:36: error: extra arguments at positions #2, #3, #4, #5 in call\n433 |   /// Convert to BackupInterfaces.RestoreOptions\n434 |   public func toRestoreOptions() -\u003e BackupInterfaces.RestoreOptions {\n435 |     BackupInterfaces.RestoreOptions(\n    |                                    `- error: extra arguments at positions #2, #3, #4, #5 in call\n436 |       preservePermissions: false,\n437 |       preserveOwnership: false,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:66:10: note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 64 |   ///   - useParallelisation: Whether to use parallel operations\n 65 |   ///   - priority: Priority of the restore operation\n 66 |   public init(\n    |          `- note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 67 |     overwriteExisting: Bool=false,\n 68 |     restorePermissions: Bool=true,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:446:19: error: extra arguments at positions #2, #3, #4, #5 in call\n444 |   /// Create from BackupInterfaces.RestoreOptions\n445 |   public static func from(options: BackupInterfaces.RestoreOptions) -\u003e RestoreOptions {\n446 |     RestoreOptions(\n    |                   `- error: extra arguments at positions #2, #3, #4, #5 in call\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:66:10: note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 64 |   ///   - useParallelisation: Whether to use parallel operations\n 65 |   ///   - priority: Priority of the restore operation\n 66 |   public init(\n    |          `- note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 67 |     overwriteExisting: Bool=false,\n 68 |     restorePermissions: Bool=true,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:447:36: error: value of type 'RestoreOptions' has no member 'preservePermissions'\n445 |   public static func from(options: BackupInterfaces.RestoreOptions) -\u003e RestoreOptions {\n446 |     RestoreOptions(\n447 |       preservePermissions: options.preservePermissions,\n    |                                    `- error: value of type 'RestoreOptions' has no member 'preservePermissions'\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:448:34: error: value of type 'RestoreOptions' has no member 'preserveOwnership'\n446 |     RestoreOptions(\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n    |                                  `- error: value of type 'RestoreOptions' has no member 'preserveOwnership'\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:449:30: error: value of type 'RestoreOptions' has no member 'preserveTimes'\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n    |                              `- error: value of type 'RestoreOptions' has no member 'preserveTimes'\n450 |       skipExisting: options.skipExisting,\n451 |       metadata: options.metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:450:29: error: value of type 'RestoreOptions' has no member 'skipExisting'\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n    |                             `- error: value of type 'RestoreOptions' has no member 'skipExisting'\n451 |       metadata: options.metadata\n452 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:451:25: error: value of type 'RestoreOptions' has no member 'metadata'\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n451 |       metadata: options.metadata\n    |                         `- error: value of type 'RestoreOptions' has no member 'metadata'\n452 |     )\n453 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:217:41: error: cannot find type 'VerificationResult' in scope\n215 | extension BackupVerificationResultDTO {\n216 |   /// Convert this DTO to a BackupInterfaces.VerificationResult\n217 |   public func toVerificationResult() -\u003e VerificationResult {\n    |                                         `- error: cannot find type 'VerificationResult' in scope\n218 |     VerificationResult(\n219 |       verified: verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:231:47: error: cannot find type 'VerificationResult' in scope\n229 | \n230 |   /// Create a BackupVerificationResultDTO from a BackupInterfaces.VerificationResult\n231 |   public static func from(verificationResult: VerificationResult) -\u003e BackupVerificationResultDTO {\n    |                                               `- error: cannot find type 'VerificationResult' in scope\n232 |     BackupVerificationResultDTO(\n233 |       verified: verificationResult.verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:245:39: error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n243 | }\n244 | \n245 | extension BackupVerificationResultDTO.VerificationIssue {\n    |                                       `- error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n246 |   /// Convert this DTO to a BackupInterfaces.VerificationIssue\n247 |   public func toVerificationIssue() -\u003e VerificationResult.VerificationIssue {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:271:39: error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n269 | }\n270 | \n271 | extension BackupVerificationResultDTO.RepairSummary {\n    |                                       `- error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n272 |   /// Convert this DTO to a BackupInterfaces.RepairSummary\n273 |   public func toRepairSummary() -\u003e VerificationResult.RepairSummary {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:294:39: error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n292 | }\n293 | \n294 | extension BackupVerificationResultDTO.RepairAction {\n    |                                       `- error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n295 |   /// Convert this DTO to a BackupInterfaces.RepairAction\n296 |   public func toRepairAction() -\u003e VerificationResult.RepairAction {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:237:65: error: type 'VerificationIssue' has no member 'from'\n235 |       bytesVerified: verificationResult.bytesVerified,\n236 |       errorCount: verificationResult.errorCount,\n237 |       issues: verificationResult.issues.map { VerificationIssue.from(issue: $0) },\n    |                                                                 `- error: type 'VerificationIssue' has no member 'from'\n238 |       repairSummary: verificationResult.repairSummary.map { RepairSummary.from(summary: $0) },\n239 |       snapshotID: verificationResult.snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:238:75: error: type 'RepairSummary' has no member 'from'\n236 |       errorCount: verificationResult.errorCount,\n237 |       issues: verificationResult.issues.map { VerificationIssue.from(issue: $0) },\n238 |       repairSummary: verificationResult.repairSummary.map { RepairSummary.from(summary: $0) },\n    |                                                                           `- error: type 'RepairSummary' has no member 'from'\n239 |       snapshotID: verificationResult.snapshotID,\n240 |       verificationTime: verificationResult.verificationTime\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:25:21: error: type 'ProgressCancellationTokenAdapter' does not conform to protocol 'ProgressCancellationToken'\n23 | \n24 | /// Adapter that allows a BackupOperationCancellationToken to be used as a ProgressCancellationToken\n25 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken {\n   |                     |- error: type 'ProgressCancellationTokenAdapter' does not conform to protocol 'ProgressCancellationToken'\n   |                     `- note: add stubs for conformance\n26 |   private let token: BackupOperationCancellationToken\n27 | \n   :\n31 | \n32 |   var isCancelled: Bool {\n33 |     get async {\n   |     `- note: candidate is 'async', but protocol requirement is not\n34 |       await token.isCancelled\n35 |     }\n36 |   }\n37 | \n38 |   func cancel() async {\n   |        `- note: candidate is 'async', but protocol requirement is not\n39 |     await token.cancel()\n40 |   }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:341:7: note: protocol requires property 'isCancelled' with type 'Bool'\n339 | public protocol ProgressCancellationToken: Sendable {\n340 |   /// Checks if the operation has been cancelled\n341 |   var isCancelled: Bool { get }\n    |       `- note: protocol requires property 'isCancelled' with type 'Bool'\n342 | \n343 |   /// Attempts to cancel the operation\n344 |   func cancel()\n    |        `- note: protocol requires function 'cancel()' with type '() -\u003e ()'\n345 | }\n346 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:43:17: error: value of type 'BackupOperationCancellationToken' has no member 'onCancel'\n41 | \n42 |   func onCancel(_ callback: @escaping () -\u003e Void) async {\n43 |     await token.onCancel(callback)\n   |                 `- error: value of type 'BackupOperationCancellationToken' has no member 'onCancel'\n44 |   }\n45 | }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:92:16: error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n 90 |       .with(\n 91 |         key: \"repositoryID\",\n 92 |         value: repositoryID,\n    |                |- error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n    |                |- note: coalesce using '??' to provide a default when the optional value contains 'nil'\n    |                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n 93 |         privacy: LoggingTypes.PrivacyClassification.public\n 94 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:97:16: error: value of optional type '[String]?' must be unwrapped to refer to member 'joined' of wrapped base type '[String]'\n 95 |       .with(\n 96 |         key: \"tags\",\n 97 |         value: tags.joined(separator: \", \"),\n    |                |- error: value of optional type '[String]?' must be unwrapped to refer to member 'joined' of wrapped base type '[String]'\n    |                |- note: chain the optional using '?' to access member 'joined' only for non-'nil' base values\n    |                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n 98 |         privacy: LoggingTypes.PrivacyClassification.public\n 99 |       )\nTarget //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator failed to build\nINFO: Elapsed time: 6.676s, Critical Path: 6.48s\nINFO: 2 processes: 32 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BackupServices:BackupServices",
    "success": false,
    "start_time": "2025-04-06T11:26:57.781003+01:00",
    "end_time": "2025-04-06T11:27:04.985413+01:00",
    "duration": "7.204439s",
    "output": "INFO: Invocation ID: 2a07beec-c17a-4a24-942f-b4d43edd11e7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupServices:BackupServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupServices:BackupServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BackupServices:BackupServices (0 packages loaded, 0 targets configured).\n[1 / 3] Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices; 1s disk-cache, worker\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/BackupServices/BUILD.bazel:3:14: Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/BackupServices:BackupServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.4.1-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/BackupServices/BackupServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:712:45: error: cannot find type 'VerificationResult' in scope\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n713 |     // Create a log context\n714 |     let logContext=BackupLogContext()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:710:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n708 |     snapshotID: String?,\n709 |     verifyData: Bool=true,\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n    |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:60:65: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                 `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:59:26: error: cannot find type 'CancellationToken' in scope\n 57 |     parameters: BackupCreateParameters,\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:129:66: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:128:26: error: cannot find type 'CancellationToken' in scope\n126 |     parameters: BackupRestoreParameters,\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:193:26: error: cannot find type 'CancellationToken' in scope\n191 |   public func listBackups(\n192 |     parameters: BackupListParameters,\n193 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n194 |   ) async throws -\u003e [BackupSnapshot] {\n195 |     // Create the list command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:250:21: error: cannot find type 'DeleteResult' in scope\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n250 |   ) async throws -\u003e DeleteResult {\n    |                     `- error: cannot find type 'DeleteResult' in scope\n251 |     // Create the delete command\n252 |     var command=ResticCommandImpl(arguments: [\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:249:26: error: cannot find type 'CancellationToken' in scope\n247 |   public func deleteBackup(\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n250 |   ) async throws -\u003e DeleteResult {\n251 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:296:26: error: cannot find type 'CancellationToken' in scope\n294 |     pattern: String?=nil,\n295 |     progressReporter _: BackupProgressReporter?,\n296 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n297 |   ) async throws -\u003e [SnapshotFileEntry] {\n298 |     // Create the find command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:664:80: error: cannot find type 'DeleteResult' in scope\n662 |    * Parse delete result from JSON output.\n663 |    */\n664 |   private func parseDeleteResult(output: String, snapshotID: String) throws -\u003e DeleteResult {\n    |                                                                                `- error: cannot find type 'DeleteResult' in scope\n665 |     guard let data=output.data(using: .utf8) else {\n666 |       throw BackupOperationError.parsingFailure(\"Could not convert output to data\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:707:70: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                      `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:706:26: error: cannot find type 'CancellationToken' in scope\n704 |     parameters: BackupMaintenanceParameters,\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:204:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n202 |         if let progressReporter=reporter {\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n205 |               phase: .processing,\n206 |               percentComplete: 0.3,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:204:27: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n202 |         if let progressReporter=reporter {\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n205 |               phase: .processing,\n206 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:205:15: error: missing argument for parameter 'from' in call\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n205 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n206 |               percentComplete: 0.3,\n207 |               currentItem: \"Retrieving snapshot details\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:205:23: error: cannot infer contextual base in reference to member 'processing'\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n205 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n206 |               percentComplete: 0.3,\n207 |               currentItem: \"Retrieving snapshot details\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:212:39: error: 'nil' requires a contextual type\n210 |               processedBytes: 0,\n211 |               totalBytes: 0,\n212 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n213 |               bytesPerSecond: nil,\n214 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:213:31: error: 'nil' requires a contextual type\n211 |               totalBytes: 0,\n212 |               estimatedTimeRemaining: nil,\n213 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n214 |               error: nil\n215 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:214:22: error: 'nil' requires a contextual type\n212 |               estimatedTimeRemaining: nil,\n213 |               bytesPerSecond: nil,\n214 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n215 |             ),\n216 |             for: .getSnapshotDetails\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:356:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n354 |         if let reporter {\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n357 |               phase: .processing,\n358 |               percentComplete: 0.3,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:356:27: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n354 |         if let reporter {\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n357 |               phase: .processing,\n358 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:357:15: error: missing argument for parameter 'from' in call\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n357 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n358 |               percentComplete: 0.3,\n359 |               currentItem: \"Searching for files\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:357:23: error: cannot infer contextual base in reference to member 'processing'\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n357 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n358 |               percentComplete: 0.3,\n359 |               currentItem: \"Searching for files\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:364:39: error: 'nil' requires a contextual type\n362 |               processedBytes: 0,\n363 |               totalBytes: 0,\n364 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n365 |               bytesPerSecond: nil,\n366 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:365:31: error: 'nil' requires a contextual type\n363 |               totalBytes: 0,\n364 |               estimatedTimeRemaining: nil,\n365 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n366 |               error: nil\n367 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:366:22: error: 'nil' requires a contextual type\n364 |               estimatedTimeRemaining: nil,\n365 |               bytesPerSecond: nil,\n366 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n367 |             ),\n368 |             for: .findFiles\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:105:14: error: 'ResticCommand' is ambiguous for type lookup in this context\n103 |    */\n104 |   private func executeWithProgressUpdates(\n105 |     command: ResticCommand,\n    |              `- error: 'ResticCommand' is ambiguous for type lookup in this context\n106 |     progressReporter: BackupProgressReporter?,\n107 |     cancellationToken: BackupCancellationToken?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:4:17: note: found this candidate\n 2 | \n 3 | /// Protocol defining the requirements for a Restic command\n 4 | public protocol ResticCommand: Sendable {\n   |                 `- note: found this candidate\n 5 |   /// Arguments for the command\n 6 |   var arguments: [String] { get }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticCommand.swift:21:15: note: found this candidate\n 19 | \n 20 | /// A structured representation of a Restic command\n 21 | public struct ResticCommand: ResticInterfaces.ResticCommand, Sendable {\n    |               `- note: found this candidate\n 22 |   /// The command action to execute\n 23 |   public let action: ResticCommandAction\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n266 |             for: .getSnapshotDetails\n267 |           )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:27: error: extra arguments at positions #1, #2 in call\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |                           `- error: extra arguments at positions #1, #2 in call\n266 |             for: .getSnapshotDetails\n267 |           )\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:28: error: missing argument for parameter 'from' in call\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |                            `- error: missing argument for parameter 'from' in call\n266 |             for: .getSnapshotDetails\n267 |           )\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:36: error: cannot infer contextual base in reference to member 'processing'\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |                                    `- error: cannot infer contextual base in reference to member 'processing'\n266 |             for: .getSnapshotDetails\n267 |           )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:65:45: error: cannot find type 'CancellationToken' in scope\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n    |                                             `- error: cannot find type 'CancellationToken' in scope\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:67:24: error: cannot find type 'CancellationToken' in scope\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 68 |   ) async throws -\u003e R {\n 69 |     // Create a log context for this operation\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:332:47: error: cannot find type 'BackupCreationParameters' in scope\n330 | extension BackupCreateParameters {\n331 |   /// Convert to BackupInterfaces.BackupCreationParameters\n332 |   public func toBackupCreationParameters() -\u003e BackupCreationParameters {\n    |                                               `- error: cannot find type 'BackupCreationParameters' in scope\n333 |     BackupCreationParameters(\n334 |       sources: sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:342:39: error: cannot find type 'BackupCreationParameters' in scope\n340 | \n341 |   /// Create from BackupInterfaces.BackupCreationParameters\n342 |   public static func from(parameters: BackupCreationParameters) -\u003e BackupCreateParameters {\n    |                                       `- error: cannot find type 'BackupCreationParameters' in scope\n343 |     BackupCreateParameters(\n344 |       sources: parameters.sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:354:63: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n352 | extension BackupRestoreParameters {\n353 |   /// Convert to BackupInterfaces.BackupRestoreParameters\n354 |   public func toBackupRestoreParameters() -\u003e BackupInterfaces.BackupRestoreParameters {\n    |                                                               `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n355 |     BackupInterfaces.BackupRestoreParameters(\n356 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:368:8: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n366 |   public static func from(\n367 |     parameters: BackupInterfaces\n368 |       .BackupRestoreParameters\n    |        `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n369 |   ) -\u003e BackupRestoreParameters {\n370 |     BackupRestoreParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:382:60: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n380 | extension BackupListParameters {\n381 |   /// Convert to BackupInterfaces.BackupListParameters\n382 |   public func toBackupListParameters() -\u003e BackupInterfaces.BackupListParameters {\n    |                                                            `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n383 |     BackupInterfaces.BackupListParameters(\n384 |       tags: tags,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:396:8: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n394 |   public static func from(\n395 |     parameters: BackupInterfaces\n396 |       .BackupListParameters\n    |        `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n397 |   ) -\u003e BackupListParameters {\n398 |     BackupListParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:217:41: error: cannot find type 'VerificationResult' in scope\n215 | extension BackupVerificationResultDTO {\n216 |   /// Convert this DTO to a BackupInterfaces.VerificationResult\n217 |   public func toVerificationResult() -\u003e VerificationResult {\n    |                                         `- error: cannot find type 'VerificationResult' in scope\n218 |     VerificationResult(\n219 |       verified: verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:231:47: error: cannot find type 'VerificationResult' in scope\n229 | \n230 |   /// Create a BackupVerificationResultDTO from a BackupInterfaces.VerificationResult\n231 |   public static func from(verificationResult: VerificationResult) -\u003e BackupVerificationResultDTO {\n    |                                               `- error: cannot find type 'VerificationResult' in scope\n232 |     BackupVerificationResultDTO(\n233 |       verified: verificationResult.verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:245:39: error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n243 | }\n244 | \n245 | extension BackupVerificationResultDTO.VerificationIssue {\n    |                                       `- error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n246 |   /// Convert this DTO to a BackupInterfaces.VerificationIssue\n247 |   public func toVerificationIssue() -\u003e VerificationResult.VerificationIssue {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:271:39: error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n269 | }\n270 | \n271 | extension BackupVerificationResultDTO.RepairSummary {\n    |                                       `- error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n272 |   /// Convert this DTO to a BackupInterfaces.RepairSummary\n273 |   public func toRepairSummary() -\u003e VerificationResult.RepairSummary {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:294:39: error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n292 | }\n293 | \n294 | extension BackupVerificationResultDTO.RepairAction {\n    |                                       `- error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n295 |   /// Convert this DTO to a BackupInterfaces.RepairAction\n296 |   public func toRepairAction() -\u003e VerificationResult.RepairAction {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:25:21: error: type 'ProgressCancellationTokenAdapter' does not conform to protocol 'ProgressCancellationToken'\n23 | \n24 | /// Adapter that allows a BackupOperationCancellationToken to be used as a ProgressCancellationToken\n25 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken {\n   |                     |- error: type 'ProgressCancellationTokenAdapter' does not conform to protocol 'ProgressCancellationToken'\n   |                     `- note: add stubs for conformance\n26 |   private let token: BackupOperationCancellationToken\n27 | \n   :\n31 | \n32 |   var isCancelled: Bool {\n33 |     get async {\n   |     `- note: candidate is 'async', but protocol requirement is not\n34 |       await token.isCancelled\n35 |     }\n36 |   }\n37 | \n38 |   func cancel() async {\n   |        `- note: candidate is 'async', but protocol requirement is not\n39 |     await token.cancel()\n40 |   }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:341:7: note: protocol requires property 'isCancelled' with type 'Bool'\n339 | public protocol ProgressCancellationToken: Sendable {\n340 |   /// Checks if the operation has been cancelled\n341 |   var isCancelled: Bool { get }\n    |       `- note: protocol requires property 'isCancelled' with type 'Bool'\n342 | \n343 |   /// Attempts to cancel the operation\n344 |   func cancel()\n    |        `- note: protocol requires function 'cancel()' with type '() -\u003e ()'\n345 | }\n346 | \npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:39:9: warning: initialization of immutable value 'operationsService' was never used; consider replacing with assignment to '_' or removing it\n 37 | \n 38 |     // Create operations service\n 39 |     let operationsService=BackupOperationsService(\n    |         `- warning: initialization of immutable value 'operationsService' was never used; consider replacing with assignment to '_' or removing it\n 40 |       resticService: resticService,\n 41 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:47:9: warning: initialization of immutable value 'operationExecutor' was never used; consider replacing with assignment to '_' or removing it\n 45 | \n 46 |     // Create operation executor\n 47 |     let operationExecutor=BackupOperationExecutor(\n    |         `- warning: initialization of immutable value 'operationExecutor' was never used; consider replacing with assignment to '_' or removing it\n 48 |       logger: logger,\n 49 |       cancellationHandler: cancellationHandler,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:43:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 41 |     let defaultMessage=\"Starting backup operation: \\(operation)\"\n 42 | \n 43 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 44 |       message ?? defaultMessage,\n 45 |       metadata: logContext.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:67:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 65 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"success\", privacy: .public)\n 66 | \n 67 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 68 |       message ?? defaultMessage,\n 69 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:91:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 89 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n 90 | \n 91 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 92 |       message ?? defaultMessage,\n 93 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:119:88: error: value of type 'BackupError' has no member 'code'\n117 |     // Add error details with appropriate privacy levels\n118 |     if let backupError=error as? BackupError {\n119 |       metadata[\"errorCode\"]=PrivacyMetadataValue(value: String(describing: backupError.code),\n    |                                                                                        `- error: value of type 'BackupError' has no member 'code'\n120 |                                                  privacy: .public)\n121 |       metadata[\"errorMessage\"]=PrivacyMetadataValue(value: backupError.localizedDescription,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:125:39: error: value of type 'BackupError' has no member 'context'\n123 | \n124 |       // Add structured error context if available\n125 |       if let errorContext=backupError.context {\n    |                                       `- error: value of type 'BackupError' has no member 'context'\n126 |         for (key, value) in errorContext {\n127 |           metadata[\"error_\\(key)\"]=PrivacyMetadataValue(value: value, privacy: .private)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:137:18: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n135 |     }\n136 | \n137 |     await logger.error(\n    |                  `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n138 |       message ?? defaultMessage,\n139 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:166:22: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n164 |         metadata[\"description\"]=PrivacyMetadataValue(value: description, privacy: .public)\n165 | \n166 |         await logger.info(\n    |                      `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n167 |           \"Initialising backup operation: \\(operation)\",\n168 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:188:22: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n186 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"completed\", privacy: .public)\n187 | \n188 |         await logger.info(\n    |                      `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n189 |           \"Completed backup operation: \\(operation)\",\n190 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:197:22: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n195 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n196 | \n197 |         await logger.info(\n    |                      `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n198 |           \"Cancelled backup operation: \\(operation)\",\n199 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:218:22: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n216 |         }\n217 | \n218 |         await logger.error(\n    |                      `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n219 |           \"Failed backup operation: \\(operation)\",\n220 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupCommandFactory.swift:178:9: warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n176 |   ) throws -\u003e ResticCommand {\n177 |     // Determine base command from maintenance type\n178 |     var baseCommand=switch type {\n    |         `- warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n179 |       case .check:\n180 |         \"check\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:712:45: error: cannot find type 'VerificationResult' in scope\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n713 |     // Create a log context\n714 |     let logContext=BackupLogContext()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:710:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n708 |     snapshotID: String?,\n709 |     verifyData: Bool=true,\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n    |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:65:45: error: cannot find type 'CancellationToken' in scope\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n    |                                             `- error: cannot find type 'CancellationToken' in scope\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:67:24: error: cannot find type 'CancellationToken' in scope\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 68 |   ) async throws -\u003e R {\n 69 |     // Create a log context for this operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:60:65: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                 `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:59:26: error: cannot find type 'CancellationToken' in scope\n 57 |     parameters: BackupCreateParameters,\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:210:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n208 |         value: result,\n209 |         progressStream: progressReporter.stream,\n210 |         metadata: metadata\n    |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n211 |       )\n212 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:226:26: error: generic parameter 'some Sendable' could not be inferred\n224 | \n225 |       // Log success\n226 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n227 |         context: enhancedContext,\n228 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)? = nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:129:66: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:128:26: error: cannot find type 'CancellationToken' in scope\n126 |     parameters: BackupRestoreParameters,\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:364:26: error: generic parameter 'some Sendable' could not be inferred\n362 | \n363 |       // Log success\n364 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n365 |         context: enhancedContext,\n366 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)? = nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:440:20: error: extra argument 'listOptions' in call\n438 |       before: before,\n439 |       after: after,\n440 |       listOptions: listOptions\n    |                    `- error: extra argument 'listOptions' in call\n441 |     )\n442 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:445:49: error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n443 |     do {\n444 |       // Execute the operation\n445 |       let snapshots=try await operationsService.listSnapshots(parameters: parameters)\n    |                                                 `- error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n446 | \n447 |       // Record the end time\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:460:26: error: generic parameter 'some Sendable' could not be inferred\n458 | \n459 |       // Log success\n460 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n461 |         context: enhancedContext,\n462 |         result: snapshots\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)? = nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:513:40: error: value of type 'DeleteOptions' has no member 'prune'\n511 |     let parameters=BackupDeleteParameters(\n512 |       snapshotID: snapshotID,\n513 |       pruneAfterDelete: deleteOptions?.prune ?? false\n    |                                        `- error: value of type 'DeleteOptions' has no member 'prune'\n514 |     )\n515 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:250:21: error: cannot find type 'DeleteResult' in scope\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n250 |   ) async throws -\u003e DeleteResult {\n    |                     `- error: cannot find type 'DeleteResult' in scope\n251 |     // Create the delete command\n252 |     var command=ResticCommandImpl(arguments: [\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:249:26: error: cannot find type 'CancellationToken' in scope\n247 |   public func deleteBackup(\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n250 |   ) async throws -\u003e DeleteResult {\n251 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:567:26: error: generic parameter 'some Sendable' could not be inferred\n565 | \n566 |       // Log success\n567 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n568 |         context: enhancedContext,\n569 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)? = nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:707:70: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                      `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:706:26: error: cannot find type 'CancellationToken' in scope\n704 |     parameters: BackupMaintenanceParameters,\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:660:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n658 |         value: result,\n659 |         progressStream: progressReporter.stream,\n660 |         metadata: metadata\n    |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n661 |       )\n662 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:670:26: error: generic parameter 'some Sendable' could not be inferred\n668 | \n669 |       // Log success\n670 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n671 |         context: enhancedContext,\n672 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)? = nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:734:19: error: type 'BackupOperation' has no member 'verifyBackup'\n732 |     let token=BackupOperationToken(\n733 |       id: UUID(),\n734 |       operation: .verifyBackup,\n    |                   `- error: type 'BackupOperation' has no member 'verifyBackup'\n735 |       cancellable: true\n736 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:747:30: error: type 'BackupVerifyParameters' has no member 'RepairMode'\n745 |     // Create DTO parameters for the operation using adapter pattern\n746 |     let localRepairMode=repairMode.map {\n747 |       BackupVerifyParameters.RepairMode(rawValue: $0.rawValue) ?? .reportOnly\n    |                              `- error: type 'BackupVerifyParameters' has no member 'RepairMode'\n748 |     }\n749 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:750:50: error: type 'VerifyOptions' has no member 'from'\n748 |     }\n749 | \n750 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n    |                                                  `- error: type 'VerifyOptions' has no member 'from'\n751 | \n752 |     let parameters=BackupVerifyParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:752:42: error: extra arguments at positions #2, #3, #4 in call\n750 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n751 | \n752 |     let parameters=BackupVerifyParameters(\n    |                                          `- error: extra arguments at positions #2, #3, #4 in call\n753 |       snapshotID: snapshotID,\n754 |       verifyData: verifyData,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:753:29: error: missing argument for parameter 'verifyOptions' in call\n751 | \n752 |     let parameters=BackupVerifyParameters(\n753 |       snapshotID: snapshotID,\n    |                             `- error: missing argument for parameter 'verifyOptions' in call\n754 |       verifyData: verifyData,\n755 |       repairMode: localRepairMode,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:761:61: error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n759 |     do {\n760 |       // Execute the operation\n761 |       let verificationResultDTO=try await operationExecutor.executeVerifyOperation(\n    |                                                             `- error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n762 |         parameters: parameters,\n763 |         progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:772:26: error: generic parameter 'some Sendable' could not be inferred\n770 | \n771 |       // Log operation success\n772 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n773 |         context: enhancedContext,\n774 |         duration: duration\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)? = nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:774:19: error: extra argument 'duration' in call\n772 |       await backupLogger.logOperationSuccess(\n773 |         context: enhancedContext,\n774 |         duration: duration\n    |                   `- error: extra argument 'duration' in call\n775 |       )\n776 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:792:29: error: value of type 'any Error' has no member 'asBackupOperationError'\n790 |     } catch {\n791 |       // Map error\n792 |       let backupError=error.asBackupOperationError\n    |                             `- error: value of type 'any Error' has no member 'asBackupOperationError'\n793 | \n794 |       // Log error\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:831:37: error: extra argument 'error' in call\n829 |       await backupLogger.logOperationFailure(\n830 |         context: logContext,\n831 |         error: BackupOperationError.operationNotFound(\"Operation with ID \\(operationID) not found\")\n    |                                     `- error: extra argument 'error' in call\n832 |       )\n833 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:831:37: error: type 'BackupOperationError' has no member 'operationNotFound'\n829 |       await backupLogger.logOperationFailure(\n830 |         context: logContext,\n831 |         error: BackupOperationError.operationNotFound(\"Operation with ID \\(operationID) not found\")\n    |                                     `- error: type 'BackupOperationError' has no member 'operationNotFound'\n832 |       )\n833 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:842:12: error: extra argument 'error' in call\n840 |         context: logContext,\n841 |         error: BackupOperationError\n842 |           .operationNotCancellable(\"Operation \\(token.operation) cannot be cancelled\")\n    |            `- error: extra argument 'error' in call\n843 |       )\n844 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:842:12: error: type 'BackupOperationError' has no member 'operationNotCancellable'\n840 |         context: logContext,\n841 |         error: BackupOperationError\n842 |           .operationNotCancellable(\"Operation \\(token.operation) cannot be cancelled\")\n    |            `- error: type 'BackupOperationError' has no member 'operationNotCancellable'\n843 |       )\n844 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:852:26: error: generic parameter 'some Sendable' could not be inferred\n850 | \n851 |       // Log success\n852 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n853 |         context: logContext,\n854 |         message: \"Operation cancelled successfully\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)? = nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:862:16: error: extra argument 'error' in call\n860 |       await backupLogger.logOperationFailure(\n861 |         context: logContext,\n862 |         error: error\n    |                `- error: extra argument 'error' in call\n863 |       )\n864 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:877:11: error: cannot assign to property: 'cancelled' setter is inaccessible\n875 |   private func cancelOperationImpl(token: BackupOperationToken) async throws {\n876 |     // Signal cancellation to the operation\n877 |     token.cancelled=true\n    |           `- error: cannot assign to property: 'cancelled' setter is inaccessible\n878 | \n879 |     // Remove from active operations\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:888:24: error: value of type 'BackupLogger' has no member 'logInfo'\n886 |       .withPublic(key: \"operationType\", value: String(describing: token.operation))\n887 | \n888 |     await backupLogger.logInfo(\n    |                        `- error: value of type 'BackupLogger' has no member 'logInfo'\n889 |       context: logContext,\n890 |       message: \"Operation cancellation complete\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:907:45: error: cannot find type 'RepositoryError' in scope\n905 |     } else if error is CancellationError {\n906 |       .operationCancelled(\"Operation was cancelled\")\n907 |     } else if let repositoryError=error as? RepositoryError {\n    |                                             `- error: cannot find type 'RepositoryError' in scope\n908 |       .repositoryError(repositoryError)\n909 |     } else if let timeout=error as? TimeoutError {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:930:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n928 | \n929 |     // Map known error types\n930 |     if let nsError=error as? NSError {\n    |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n931 |       switch nsError.domain {\n932 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:935:19: error: type 'BackupOperationError' has no member 'fileSystemError'\n933 |           return .networkError(\"Network error: \\(nsError.localizedDescription)\")\n934 |         case NSCocoaErrorDomain:\n935 |           return .fileSystemError(\"File system error: \\(nsError.localizedDescription)\")\n    |                   `- error: type 'BackupOperationError' has no member 'fileSystemError'\n936 |         default:\n937 |           break\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:942:13: error: type 'BackupOperationError' has no member 'unknownError'\n940 | \n941 |     // Default to unknown error with the original description\n942 |     return .unknownError(\"Operation failed: \\(error.localizedDescription)\")\n    |             `- error: type 'BackupOperationError' has no member 'unknownError'\n943 |   }\n944 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:954:13: warning: result of call to 'cancelOperation(id:)' is unused\n952 | \n953 |     for (id, _) in activeOperationsCancellationTokens {\n954 |       await cancelOperation(id: id)\n    |             `- warning: result of call to 'cancelOperation(id:)' is unused\n955 |     }\n956 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:974:49: error: value of type 'String' has no member 'uuidString'\n972 |     let logContext=BackupLogContext()\n973 |       .withOperation(\"cancelOperation\")\n974 |       .withPublic(key: \"operationID\", value: id.uuidString)\n    |                                                 `- error: value of type 'String' has no member 'uuidString'\n975 | \n976 |     // Log cancellation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:980:29: error: value of type 'BackupOperationExecutor' has no member 'cancelOperation'\n978 | \n979 |     // Cancel the operation\n980 |     await operationExecutor.cancelOperation(id: token.id)\n    |                             `- error: value of type 'BackupOperationExecutor' has no member 'cancelOperation'\n981 | \n982 |     // Remove the token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:193:26: error: cannot find type 'CancellationToken' in scope\n191 |   public func listBackups(\n192 |     parameters: BackupListParameters,\n193 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n194 |   ) async throws -\u003e [BackupSnapshot] {\n195 |     // Create the list command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:296:26: error: cannot find type 'CancellationToken' in scope\n294 |     pattern: String?=nil,\n295 |     progressReporter _: BackupProgressReporter?,\n296 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n297 |   ) async throws -\u003e [SnapshotFileEntry] {\n298 |     // Create the find command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:664:80: error: cannot find type 'DeleteResult' in scope\n662 |    * Parse delete result from JSON output.\n663 |    */\n664 |   private func parseDeleteResult(output: String, snapshotID: String) throws -\u003e DeleteResult {\n    |                                                                                `- error: cannot find type 'DeleteResult' in scope\n665 |     guard let data=output.data(using: .utf8) else {\n666 |       throw BackupOperationError.parsingFailure(\"Could not convert output to data\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:62:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n 64 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:63:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 64 |       progressContinuation=continuation\n 65 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:63:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n 64 |       progressContinuation=continuation\n 65 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:69:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 67 |     // Create a progress handler that forwards to both the reporter and the stream\n 68 |     let progressHandler={ [progressReporter, progressContinuation] (\n 69 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 70 |     ) async in\n 71 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:94:20: error: value of optional type '[URL]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[URL]'\n 92 | \n 93 |     // Add exclude paths\n 94 |     if !parameters.excludePaths.isEmpty {\n    |                    |- error: value of optional type '[URL]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[URL]'\n    |                    |- note: chain the optional using '?' to access member 'isEmpty' only for non-'nil' base values\n    |                    `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n 95 |       command.arguments.append(\"--exclude\")\n 96 |       command.arguments.append(contentsOf: parameters.excludePaths)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:96:25: error: no exact matches in call to instance method 'append'\n 94 |     if !parameters.excludePaths.isEmpty {\n 95 |       command.arguments.append(\"--exclude\")\n 96 |       command.arguments.append(contentsOf: parameters.excludePaths)\n    |                         |- error: no exact matches in call to instance method 'append'\n    |                         |- note: candidate expects value of type '[String]' for parameter #1 (got '[URL]?')\n    |                         `- note: candidate expects value of type '[String]' for parameter #1 (got '[URL]?')\n 97 |     }\n 98 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:100:20: error: value of optional type '[String]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[String]'\n 98 | \n 99 |     // Add tags\n100 |     if !parameters.tags.isEmpty {\n    |                    |- error: value of optional type '[String]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[String]'\n    |                    |- note: chain the optional using '?' to access member 'isEmpty' only for non-'nil' base values\n    |                    `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n101 |       command.arguments.append(\"--tag\")\n102 |       command.arguments.append(contentsOf: parameters.tags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:102:55: error: value of optional type '[String]?' must be unwrapped to a value of type '[String]'\n100 |     if !parameters.tags.isEmpty {\n101 |       command.arguments.append(\"--tag\")\n102 |       command.arguments.append(contentsOf: parameters.tags)\n    |                                                       |- error: value of optional type '[String]?' must be unwrapped to a value of type '[String]'\n    |                                                       |- note: coalesce using '??' to provide a default when the optional value contains 'nil'\n    |                                                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n103 |     }\n104 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:109:71: error: missing argument for parameter 'sources' in call\n107 | \n108 |     // Parse the result\n109 |     let backupResult=try resultParser.parseBackupResult(output: output)\n    |                                                                       `- error: missing argument for parameter 'sources' in call\n110 | \n111 |     // Return the result and the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:16:15: note: 'parseBackupResult(output:sources:)' declared here\n 14 |   /// - Returns: A backup result with details about the operation\n 15 |   /// - Throws: BackupError if parsing fails\n 16 |   public func parseBackupResult(output: String, sources: [URL]) throws -\u003e BackupResult {\n    |               `- note: 'parseBackupResult(output:sources:)' declared here\n 17 |     guard !output.isEmpty else {\n 18 |       throw BackupError.parsingError(details: \"Empty output from backup command\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:131:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n133 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:132:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n133 |       progressContinuation=continuation\n134 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:132:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n133 |       progressContinuation=continuation\n134 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:138:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n136 |     // Create a progress handler that forwards to both the reporter and the stream\n137 |     let progressHandler={ [progressReporter, progressContinuation] (\n138 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n139 |     ) async in\n140 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:157:18: error: cannot convert value of type 'URL' to expected element type 'Array\u003cString\u003e.ArrayLiteralElement' (aka 'String')\n155 |       parameters.snapshotID,\n156 |       \"--target\",\n157 |       parameters.targetPath\n    |                  `- error: cannot convert value of type 'URL' to expected element type 'Array\u003cString\u003e.ArrayLiteralElement' (aka 'String')\n158 |     ])\n159 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:161:20: error: value of optional type '[URL]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[URL]'\n159 | \n160 |     // Add include paths\n161 |     if !parameters.includePaths.isEmpty {\n    |                    |- error: value of optional type '[URL]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[URL]'\n    |                    |- note: chain the optional using '?' to access member 'isEmpty' only for non-'nil' base values\n    |                    `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n162 |       command.arguments.append(\"--include\")\n163 |       command.arguments.append(contentsOf: parameters.includePaths)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:167:20: error: value of optional type '[URL]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[URL]'\n165 | \n166 |     // Add exclude paths\n167 |     if !parameters.excludePaths.isEmpty {\n    |                    |- error: value of optional type '[URL]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[URL]'\n    |                    |- note: chain the optional using '?' to access member 'isEmpty' only for non-'nil' base values\n    |                    `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n168 |       command.arguments.append(\"--exclude\")\n169 |       command.arguments.append(contentsOf: parameters.excludePaths)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:176:73: error: missing argument for parameter 'targetPath' in call\n174 | \n175 |     // Parse the result\n176 |     let restoreResult=try resultParser.parseRestoreResult(output: output)\n    |                                                                         `- error: missing argument for parameter 'targetPath' in call\n177 | \n178 |     // Return the result and the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:63:15: note: 'parseRestoreResult(output:targetPath:)' declared here\n 61 |   /// - Returns: A RestoreResult object\n 62 |   /// - Throws: BackupError if parsing fails\n 63 |   public func parseRestoreResult(output: String, targetPath: URL) throws -\u003e RestoreResult {\n    |               `- note: 'parseRestoreResult(output:targetPath:)' declared here\n 64 |     // Simple parsing - look for file restoration lines\n 65 |     let lines=output.components(separatedBy: .newlines)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:202:20: error: value of optional type '[String]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[String]'\n200 | \n201 |     // Add tags\n202 |     if !parameters.tags.isEmpty {\n    |                    |- error: value of optional type '[String]?' must be unwrapped to refer to member 'isEmpty' of wrapped base type '[String]'\n    |                    |- note: chain the optional using '?' to access member 'isEmpty' only for non-'nil' base values\n    |                    `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n203 |       command.arguments.append(\"--tag\")\n204 |       command.arguments.append(contentsOf: parameters.tags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:204:55: error: value of optional type '[String]?' must be unwrapped to a value of type '[String]'\n202 |     if !parameters.tags.isEmpty {\n203 |       command.arguments.append(\"--tag\")\n204 |       command.arguments.append(contentsOf: parameters.tags)\n    |                                                       |- error: value of optional type '[String]?' must be unwrapped to a value of type '[String]'\n    |                                                       |- note: coalesce using '??' to provide a default when the optional value contains 'nil'\n    |                                                       `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n205 |     }\n206 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:353:55: error: type 'BackupOperation' has no member 'verifyBackup'\n351 |       // Forward to the progress reporter if provided\n352 |       if let reporter=progressReporter {\n353 |         await reporter.reportProgress(progress, for: .verifyBackup)\n    |                                                       `- error: type 'BackupOperation' has no member 'verifyBackup'\n354 |       }\n355 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:376:11: error: cannot find 'snapshotService' in scope\n374 |       let snapshot=try await (\n375 |         snapshotID != nil ?\n376 |           snapshotService.getSnapshot(id: snapshotID!) :\n    |           `- error: cannot find 'snapshotService' in scope\n377 |           snapshotService.getLatestSnapshot()\n378 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:377:11: error: cannot find 'snapshotService' in scope\n375 |         snapshotID != nil ?\n376 |           snapshotService.getSnapshot(id: snapshotID!) :\n377 |           snapshotService.getLatestSnapshot()\n    |           `- error: cannot find 'snapshotService' in scope\n378 |       )\n379 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:382:36: error: type 'BackupOperationError' has no member 'snapshotNotFound'\n380 |       // Early exit if no snapshot found\n381 |       guard let snapshot else {\n382 |         throw BackupOperationError.snapshotNotFound(\n    |                                    `- error: type 'BackupOperationError' has no member 'snapshotNotFound'\n383 |           \"No snapshot found to verify\" + (snapshotID != nil ? \" with ID \\(snapshotID!)\" : \"\")\n384 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:388:7: error: cannot find 'logger' in scope\n386 | \n387 |       // Log verification start\n388 |       logger.info(\n    |       `- error: cannot find 'logger' in scope\n389 |         context: backupLogContext.withOperation(\"verifyBackup\")\n390 |           .withPublic(key: \"snapshotID\", value: snapshot.id)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:389:18: error: cannot find 'backupLogContext' in scope\n387 |       // Log verification start\n388 |       logger.info(\n389 |         context: backupLogContext.withOperation(\"verifyBackup\")\n    |                  `- error: cannot find 'backupLogContext' in scope\n390 |           .withPublic(key: \"snapshotID\", value: snapshot.id)\n391 |           .withPublic(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:407:23: error: extra argument 'transferRate' in call\n405 |         totalBytes: 0,\n406 |         estimatedTimeRemaining: nil,\n407 |         transferRate: nil,\n    |                       `- error: extra argument 'transferRate' in call\n408 |         details: \"Analysing snapshot structure\"\n409 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:407:23: error: 'nil' requires a contextual type\n405 |         totalBytes: 0,\n406 |         estimatedTimeRemaining: nil,\n407 |         transferRate: nil,\n    |                       `- error: 'nil' requires a contextual type\n408 |         details: \"Analysing snapshot structure\"\n409 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:412:40: error: cannot find 'snapshotService' in scope\n410 | \n411 |       // Use snapshot service to perform actual verification\n412 |       let verificationResult=try await snapshotService.verifySnapshot(\n    |                                        `- error: cannot find 'snapshotService' in scope\n413 |         id: snapshot.id,\n414 |         fullVerification: verifyOptions?.fullVerification ?? false,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:434:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n432 |         itemsProcessed: Int(Double(totalItems) * 0.25),\n433 |         totalItems: totalItems,\n434 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.25),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n435 |         totalBytes: UInt64(snapshot.stats.totalSize)\n436 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:450:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n448 |         itemsProcessed: Int(Double(totalItems) * 0.5),\n449 |         totalItems: totalItems,\n450 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.5),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n451 |         totalBytes: UInt64(snapshot.stats.totalSize)\n452 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:466:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n464 |         itemsProcessed: Int(Double(totalItems) * 0.75),\n465 |         totalItems: totalItems,\n466 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.75),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n467 |         totalBytes: UInt64(snapshot.stats.totalSize)\n468 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:709:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n711 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n711 |       progressContinuation=continuation\n712 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n711 |       progressContinuation=continuation\n712 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:716:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n714 |     // Create a progress handler that forwards to both the reporter and the stream\n715 |     let progressHandler={ [progressReporter, progressContinuation] (\n716 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n717 |     ) async in\n718 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:758:7: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n756 |     // Report progress\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n    |       `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n759 |         phase: .processing,\n760 |         percentComplete: 0.1,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:758:21: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n756 |     // Report progress\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n    |                     `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n759 |         phase: .processing,\n760 |         percentComplete: 0.1,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:759:9: error: missing argument for parameter 'from' in call\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n759 |         phase: .processing,\n    |         `- error: missing argument for parameter 'from' in call\n760 |         percentComplete: 0.1,\n761 |         currentItem: \"Starting maintenance\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:759:17: error: cannot infer contextual base in reference to member 'processing'\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n759 |         phase: .processing,\n    |                 `- error: cannot infer contextual base in reference to member 'processing'\n760 |         percentComplete: 0.1,\n761 |         currentItem: \"Starting maintenance\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:766:33: error: 'nil' requires a contextual type\n764 |         processedBytes: 0,\n765 |         totalBytes: 0,\n766 |         estimatedTimeRemaining: nil,\n    |                                 `- error: 'nil' requires a contextual type\n767 |         bytesPerSecond: nil,\n768 |         error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:767:25: error: 'nil' requires a contextual type\n765 |         totalBytes: 0,\n766 |         estimatedTimeRemaining: nil,\n767 |         bytesPerSecond: nil,\n    |                         `- error: 'nil' requires a contextual type\n768 |         error: nil\n769 |       ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:768:16: error: 'nil' requires a contextual type\n766 |         estimatedTimeRemaining: nil,\n767 |         bytesPerSecond: nil,\n768 |         error: nil\n    |                `- error: 'nil' requires a contextual type\n769 |       ),\n770 |       for: .maintenance\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:773:46: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n771 |     )\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n    |                                              `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n774 |       phase: .processing,\n775 |       percentComplete: 0.1,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:774:7: error: missing argument for parameter 'from' in call\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n774 |       phase: .processing,\n    |       `- error: missing argument for parameter 'from' in call\n775 |       percentComplete: 0.1,\n776 |       currentItem: \"Starting maintenance\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:774:15: error: cannot infer contextual base in reference to member 'processing'\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n774 |       phase: .processing,\n    |               `- error: cannot infer contextual base in reference to member 'processing'\n775 |       percentComplete: 0.1,\n776 |       currentItem: \"Starting maintenance\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:781:31: error: 'nil' requires a contextual type\n779 |       processedBytes: 0,\n780 |       totalBytes: 0,\n781 |       estimatedTimeRemaining: nil,\n    |                               `- error: 'nil' requires a contextual type\n782 |       bytesPerSecond: nil,\n783 |       error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:782:23: error: 'nil' requires a contextual type\n780 |       totalBytes: 0,\n781 |       estimatedTimeRemaining: nil,\n782 |       bytesPerSecond: nil,\n    |                       `- error: 'nil' requires a contextual type\n783 |       error: nil\n784 |     ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:783:14: error: 'nil' requires a contextual type\n781 |       estimatedTimeRemaining: nil,\n782 |       bytesPerSecond: nil,\n783 |       error: nil\n    |              `- error: 'nil' requires a contextual type\n784 |     ))\n785 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:791:7: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n789 |     // Report completion\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n    |       `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n792 |         phase: .completed,\n793 |         percentComplete: 1.0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:791:21: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n789 |     // Report completion\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n    |                     `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n792 |         phase: .completed,\n793 |         percentComplete: 1.0,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:792:9: error: missing argument for parameter 'from' in call\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n792 |         phase: .completed,\n    |         `- error: missing argument for parameter 'from' in call\n793 |         percentComplete: 1.0,\n794 |         currentItem: \"Maintenance completed\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:792:17: error: cannot infer contextual base in reference to member 'completed'\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n792 |         phase: .completed,\n    |                 `- error: cannot infer contextual base in reference to member 'completed'\n793 |         percentComplete: 1.0,\n794 |         currentItem: \"Maintenance completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:799:33: error: 'nil' requires a contextual type\n797 |         processedBytes: 0,\n798 |         totalBytes: 0,\n799 |         estimatedTimeRemaining: nil,\n    |                                 `- error: 'nil' requires a contextual type\n800 |         bytesPerSecond: nil,\n801 |         error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:800:25: error: 'nil' requires a contextual type\n798 |         totalBytes: 0,\n799 |         estimatedTimeRemaining: nil,\n800 |         bytesPerSecond: nil,\n    |                         `- error: 'nil' requires a contextual type\n801 |         error: nil\n802 |       ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:801:16: error: 'nil' requires a contextual type\n799 |         estimatedTimeRemaining: nil,\n800 |         bytesPerSecond: nil,\n801 |         error: nil\n    |                `- error: 'nil' requires a contextual type\n802 |       ),\n803 |       for: .maintenance\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:806:46: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n804 |     )\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n    |                                              `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n807 |       phase: .completed,\n808 |       percentComplete: 1.0,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:807:7: error: missing argument for parameter 'from' in call\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n807 |       phase: .completed,\n    |       `- error: missing argument for parameter 'from' in call\n808 |       percentComplete: 1.0,\n809 |       currentItem: \"Maintenance completed\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:807:15: error: cannot infer contextual base in reference to member 'completed'\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n807 |       phase: .completed,\n    |               `- error: cannot infer contextual base in reference to member 'completed'\n808 |       percentComplete: 1.0,\n809 |       currentItem: \"Maintenance completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:814:31: error: 'nil' requires a contextual type\n812 |       processedBytes: 0,\n813 |       totalBytes: 0,\n814 |       estimatedTimeRemaining: nil,\n    |                               `- error: 'nil' requires a contextual type\n815 |       bytesPerSecond: nil,\n816 |       error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:815:23: error: 'nil' requires a contextual type\n813 |       totalBytes: 0,\n814 |       estimatedTimeRemaining: nil,\n815 |       bytesPerSecond: nil,\n    |                       `- error: 'nil' requires a contextual type\n816 |       error: nil\n817 |     ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:816:14: error: 'nil' requires a contextual type\n814 |       estimatedTimeRemaining: nil,\n815 |       bytesPerSecond: nil,\n816 |       error: nil\n    |              `- error: 'nil' requires a contextual type\n817 |     ))\n818 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:71:14: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 69 |     if\n 70 |       error is CancellationError ||\n 71 |       (error as? NSError)?.domain == NSURLErrorDomain \u0026\u0026\n    |              `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 72 |       (error as? NSError)?.code == NSURLErrorCancelled\n 73 |     {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:72:14: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 70 |       error is CancellationError ||\n 71 |       (error as? NSError)?.domain == NSURLErrorDomain \u0026\u0026\n 72 |       (error as? NSError)?.code == NSURLErrorCancelled\n    |              `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 73 |     {\n 74 |       return BackupOperationError.operationCancelled(\"Operation was cancelled by the user\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:85:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 83 | \n 84 |     // Map NSError\n 85 |     if let nsError=error as? NSError {\n    |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 86 |       switch nsError.domain {\n 87 |         case NSPOSIXErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:83:40: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n 81 |           // Update progress\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n    |                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n 84 |               phase: .processing,\n 85 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:84:15: error: missing argument for parameter 'from' in call\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n 84 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n 85 |               percentComplete: 0.3,\n 86 |               currentItem: \"Updating snapshot tags\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:84:23: error: cannot infer contextual base in reference to member 'processing'\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n 84 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n 85 |               percentComplete: 0.3,\n 86 |               currentItem: \"Updating snapshot tags\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:91:39: error: 'nil' requires a contextual type\n 89 |               processedBytes: 0,\n 90 |               totalBytes: 0,\n 91 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n 92 |               bytesPerSecond: nil,\n 93 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:92:31: error: 'nil' requires a contextual type\n 90 |               totalBytes: 0,\n 91 |               estimatedTimeRemaining: nil,\n 92 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n 93 |               error: nil\n 94 |             )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:93:22: error: 'nil' requires a contextual type\n 91 |               estimatedTimeRemaining: nil,\n 92 |               bytesPerSecond: nil,\n 93 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n 94 |             )\n 95 |             await reporter.reportProgress(progress, for: .updateTags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:152:40: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n150 |           // Update progress\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n    |                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n153 |               phase: .processing,\n154 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:153:15: error: missing argument for parameter 'from' in call\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n153 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n154 |               percentComplete: 0.3,\n155 |               currentItem: \"Updating snapshot description\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:153:23: error: cannot infer contextual base in reference to member 'processing'\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n153 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n154 |               percentComplete: 0.3,\n155 |               currentItem: \"Updating snapshot description\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:160:39: error: 'nil' requires a contextual type\n158 |               processedBytes: 0,\n159 |               totalBytes: 0,\n160 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n161 |               bytesPerSecond: nil,\n162 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:161:31: error: 'nil' requires a contextual type\n159 |               totalBytes: 0,\n160 |               estimatedTimeRemaining: nil,\n161 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n162 |               error: nil\n163 |             )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:162:22: error: 'nil' requires a contextual type\n160 |               estimatedTimeRemaining: nil,\n161 |               bytesPerSecond: nil,\n162 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n163 |             )\n164 |             await reporter.reportProgress(progress, for: .updateTags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:80:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n 78 |         if let progressReporter=reporter {\n 79 |           await progressReporter.reportProgress(\n 80 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n 81 |               phase: .processing,\n 82 |               percentComplete: 0.3\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:80:27: error: extra arguments at positions #1, #2 in call\n 78 |         if let progressReporter=reporter {\n 79 |           await progressReporter.reportProgress(\n 80 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2 in call\n 81 |               phase: .processing,\n 82 |               percentComplete: 0.3\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:81:15: error: missing argument for parameter 'from' in call\n 79 |           await progressReporter.reportProgress(\n 80 |             BackupProgress(\n 81 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n 82 |               percentComplete: 0.3\n 83 |             ),\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:81:23: error: cannot infer contextual base in reference to member 'processing'\n 79 |           await progressReporter.reportProgress(\n 80 |             BackupProgress(\n 81 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n 82 |               percentComplete: 0.3\n 83 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:127:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n125 |         if let progressReporter=reporter {\n126 |           await progressReporter.reportProgress(\n127 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n128 |               phase: .processing,\n129 |               percentComplete: 0.3\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:127:27: error: extra arguments at positions #1, #2 in call\n125 |         if let progressReporter=reporter {\n126 |           await progressReporter.reportProgress(\n127 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2 in call\n128 |               phase: .processing,\n129 |               percentComplete: 0.3\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:128:15: error: missing argument for parameter 'from' in call\n126 |           await progressReporter.reportProgress(\n127 |             BackupProgress(\n128 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n129 |               percentComplete: 0.3\n130 |             ),\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:128:23: error: cannot infer contextual base in reference to member 'processing'\n126 |           await progressReporter.reportProgress(\n127 |             BackupProgress(\n128 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n129 |               percentComplete: 0.3\n130 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:204:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n202 |         if let progressReporter=reporter {\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n205 |               phase: .processing,\n206 |               percentComplete: 0.3,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:204:27: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n202 |         if let progressReporter=reporter {\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n205 |               phase: .processing,\n206 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:205:15: error: missing argument for parameter 'from' in call\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n205 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n206 |               percentComplete: 0.3,\n207 |               currentItem: \"Retrieving snapshot details\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:205:23: error: cannot infer contextual base in reference to member 'processing'\n203 |           await progressReporter.reportProgress(\n204 |             BackupProgress(\n205 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n206 |               percentComplete: 0.3,\n207 |               currentItem: \"Retrieving snapshot details\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:212:39: error: 'nil' requires a contextual type\n210 |               processedBytes: 0,\n211 |               totalBytes: 0,\n212 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n213 |               bytesPerSecond: nil,\n214 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:213:31: error: 'nil' requires a contextual type\n211 |               totalBytes: 0,\n212 |               estimatedTimeRemaining: nil,\n213 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n214 |               error: nil\n215 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:214:22: error: 'nil' requires a contextual type\n212 |               estimatedTimeRemaining: nil,\n213 |               bytesPerSecond: nil,\n214 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n215 |             ),\n216 |             for: .getSnapshotDetails\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:254:9: error: type of expression is ambiguous without a type annotation\n252 |     cancellationToken: BackupCancellationToken?\n253 |   ) async throws -\u003e BackupSnapshotComparisonResult {\n254 |     try await operationExecutor.execute(\n    |         `- error: type of expression is ambiguous without a type annotation\n255 |       parameters: parameters,\n256 |       progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:356:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n354 |         if let reporter {\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n357 |               phase: .processing,\n358 |               percentComplete: 0.3,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:356:27: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n354 |         if let reporter {\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n357 |               phase: .processing,\n358 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:357:15: error: missing argument for parameter 'from' in call\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n357 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n358 |               percentComplete: 0.3,\n359 |               currentItem: \"Searching for files\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:357:23: error: cannot infer contextual base in reference to member 'processing'\n355 |           await reporter.reportProgress(\n356 |             BackupProgress(\n357 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n358 |               percentComplete: 0.3,\n359 |               currentItem: \"Searching for files\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:364:39: error: 'nil' requires a contextual type\n362 |               processedBytes: 0,\n363 |               totalBytes: 0,\n364 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n365 |               bytesPerSecond: nil,\n366 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:365:31: error: 'nil' requires a contextual type\n363 |               totalBytes: 0,\n364 |               estimatedTimeRemaining: nil,\n365 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n366 |               error: nil\n367 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:366:22: error: 'nil' requires a contextual type\n364 |               estimatedTimeRemaining: nil,\n365 |               bytesPerSecond: nil,\n366 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n367 |             ),\n368 |             for: .findFiles\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:475:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n473 |         if let progressReporter=reporter {\n474 |           await progressReporter.reportProgress(\n475 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n476 |               phase: .processing,\n477 |               percentComplete: 0.3\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:475:27: error: extra arguments at positions #1, #2 in call\n473 |         if let progressReporter=reporter {\n474 |           await progressReporter.reportProgress(\n475 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2 in call\n476 |               phase: .processing,\n477 |               percentComplete: 0.3\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:476:15: error: missing argument for parameter 'from' in call\n474 |           await progressReporter.reportProgress(\n475 |             BackupProgress(\n476 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n477 |               percentComplete: 0.3\n478 |             ),\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:476:23: error: cannot infer contextual base in reference to member 'processing'\n474 |           await progressReporter.reportProgress(\n475 |             BackupProgress(\n476 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n477 |               percentComplete: 0.3\n478 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:326:92: error: cannot convert value of type 'LogPrivacyLevel' to expected argument type 'PrivacyClassification'\n324 | \n325 |         return context\n326 |           .with(key: \"pattern\", value: pattern, privacy: LoggingInterfaces.LogPrivacyLevel.public)\n    |                                                                                            `- error: cannot convert value of type 'LogPrivacyLevel' to expected argument type 'PrivacyClassification'\n327 |           .with(\n328 |             key: \"caseSensitive\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:330:56: error: cannot convert value of type 'LogPrivacyLevel' to expected argument type 'PrivacyClassification'\n328 |             key: \"caseSensitive\",\n329 |             value: String(caseSensitive),\n330 |             privacy: LoggingInterfaces.LogPrivacyLevel.public\n    |                                                        `- error: cannot convert value of type 'LogPrivacyLevel' to expected argument type 'PrivacyClassification'\n331 |           )\n332 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:105:14: error: 'ResticCommand' is ambiguous for type lookup in this context\n103 |    */\n104 |   private func executeWithProgressUpdates(\n105 |     command: ResticCommand,\n    |              `- error: 'ResticCommand' is ambiguous for type lookup in this context\n106 |     progressReporter: BackupProgressReporter?,\n107 |     cancellationToken: BackupCancellationToken?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:4:17: note: found this candidate\n 2 | \n 3 | /// Protocol defining the requirements for a Restic command\n 4 | public protocol ResticCommand: Sendable {\n   |                 `- note: found this candidate\n 5 |   /// Arguments for the command\n 6 |   var arguments: [String] { get }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticCommand.swift:21:15: note: found this candidate\n 19 | \n 20 | /// A structured representation of a Restic command\n 21 | public struct ResticCommand: ResticInterfaces.ResticCommand, Sendable {\n    |               `- note: found this candidate\n 22 |   /// The command action to execute\n 23 |   public let action: ResticCommandAction\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:73:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n 71 |         if let progressReporter=reporter {\n 72 |           await progressReporter.reportProgress(\n 73 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n 74 |               phase: .processing,\n 75 |               percentComplete: 0.3\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:73:27: error: extra arguments at positions #1, #2 in call\n 71 |         if let progressReporter=reporter {\n 72 |           await progressReporter.reportProgress(\n 73 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2 in call\n 74 |               phase: .processing,\n 75 |               percentComplete: 0.3\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:74:15: error: missing argument for parameter 'from' in call\n 72 |           await progressReporter.reportProgress(\n 73 |             BackupProgress(\n 74 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n 75 |               percentComplete: 0.3\n 76 |             ),\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:74:23: error: cannot infer contextual base in reference to member 'processing'\n 72 |           await progressReporter.reportProgress(\n 73 |             BackupProgress(\n 74 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n 75 |               percentComplete: 0.3\n 76 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:125:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n123 |         if let reporter=progressReporter {\n124 |           await reporter.reportProgress(\n125 |             BackupProgress(\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n126 |               phase: .processing,\n127 |               percentComplete: progress\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:125:27: error: extra arguments at positions #1, #2 in call\n123 |         if let reporter=progressReporter {\n124 |           await reporter.reportProgress(\n125 |             BackupProgress(\n    |                           `- error: extra arguments at positions #1, #2 in call\n126 |               phase: .processing,\n127 |               percentComplete: progress\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:126:15: error: missing argument for parameter 'from' in call\n124 |           await reporter.reportProgress(\n125 |             BackupProgress(\n126 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n127 |               percentComplete: progress\n128 |             ),\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:126:23: error: cannot infer contextual base in reference to member 'processing'\n124 |           await reporter.reportProgress(\n125 |             BackupProgress(\n126 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n127 |               percentComplete: progress\n128 |             ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:143:26: error: cannot call value of non-function type 'Bool'\n141 |         // Check for cancellation in a loop\n142 |         while !Task.isCancelled {\n143 |           if await token.isCancelled() {\n    |                          `- error: cannot call value of non-function type 'Bool'\n144 |             executionTask.cancel()\n145 |             progressTask.cancel()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:158:22: warning: no 'async' operations occur within 'await' expression\n156 |     do {\n157 |       // Wait for execution to complete\n158 |       let result=try await executionTask.value\n    |                      `- warning: no 'async' operations occur within 'await' expression\n159 | \n160 |       // Cancel progress updates\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:158:18: warning: no calls to throwing functions occur within 'try' expression\n156 |     do {\n157 |       // Wait for execution to complete\n158 |       let result=try await executionTask.value\n    |                  `- warning: no calls to throwing functions occur within 'try' expression\n159 | \n160 |       // Cancel progress updates\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:13: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |             `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n266 |             for: .getSnapshotDetails\n267 |           )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:27: error: extra arguments at positions #1, #2 in call\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |                           `- error: extra arguments at positions #1, #2 in call\n266 |             for: .getSnapshotDetails\n267 |           )\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:28: error: missing argument for parameter 'from' in call\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |                            `- error: missing argument for parameter 'from' in call\n266 |             for: .getSnapshotDetails\n267 |           )\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:265:36: error: cannot infer contextual base in reference to member 'processing'\n263 |         if let reporter {\n264 |           await reporter.reportProgress(\n265 |             BackupProgress(phase: .processing, percentComplete: 0.3),\n    |                                    `- error: cannot infer contextual base in reference to member 'processing'\n266 |             for: .getSnapshotDetails\n267 |           )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupErrorMapper.swift:43:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n41 | \n42 |     // Handle NSError types\n43 |     if let nsError=error as? NSError {\n   |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n44 |       switch nsError.domain {\n45 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:76:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 74 | \n 75 |     // Log the start of the operation\n 76 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 77 |       \"Starting backup operation: \\(parameters.operationType)\",\n 78 |       metadata: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:108:20: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n106 | \n107 |       // Log the completion of the operation\n108 |       await logger.info(\n    |                    `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n109 |         \"Completed backup operation: \\(parameters.operationType)\",\n110 |         metadata: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:124:20: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n122 | \n123 |       // Log the cancellation of the operation\n124 |       await logger.info(\n    |                    `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n125 |         \"Cancelled backup operation: \\(parameters.operationType)\",\n126 |         metadata: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:145:20: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n143 | \n144 |       // Log the failure of the operation\n145 |       await logger.error(\n    |                    `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n146 |         \"Failed backup operation: \\(parameters.operationType) - \\(error.localizedDescription)\",\n147 |         metadata: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:101:26: error: cannot call value of non-function type 'Bool'\n 99 |     // Check if we have a token for this ID\n100 |     if let token=cancellationTokens[id] {\n101 |       return await token.isCancelled()\n    |                          `- error: cannot call value of non-function type 'Bool'\n102 |     }\n103 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:234:30: error: cannot call value of non-function type 'Bool'\n232 |           while !task.isCancelled {\n233 |             if await isOperationActive(id: operationID) {\n234 |               if await token.isCancelled() {\n    |                              `- error: cannot call value of non-function type 'Bool'\n235 |                 _=await cancelOperation(id: operationID)\n236 |                 break\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorMapper.swift:16:5: error: switch must be exhaustive\n 14 |   /// - Returns: An appropriate BackupError\n 15 |   public func convertResticError(_ error: ResticError) -\u003e BackupError {\n 16 |     switch error {\n    |     |- error: switch must be exhaustive\n    |     |- note: add missing case: '.executableNotFound(_)'\n    |     |- note: add missing case: '.commandFailed(exitCode: let exitCode, output: let output)'\n    |     |- note: add missing case: '.credentialError(_)'\n    |     |- note: add missing case: '.repositoryExists(_)'\n    |     `- note: add missing cases\n 17 |       case let .repositoryNotFound(path):\n 18 |         BackupError.repositoryAccessFailure(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:101:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 99 | \n100 |     // Log operation start\n101 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n102 |       \"Starting snapshot operation: \\(operationType.rawValue)\",\n103 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:110:9: error: module 'BackupInterfaces' has no member named 'BackupProgress'\n108 |     if let reporter=progressReporter {\n109 |       await reporter.reportProgress(\n110 |         BackupInterfaces.BackupProgress(\n    |         `- error: module 'BackupInterfaces' has no member named 'BackupProgress'\n111 |           phase: .initialising,\n112 |           percentComplete: 0.0\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:111:19: error: cannot infer contextual base in reference to member 'initialising'\n109 |       await reporter.reportProgress(\n110 |         BackupInterfaces.BackupProgress(\n111 |           phase: .initialising,\n    |                   `- error: cannot infer contextual base in reference to member 'initialising'\n112 |           percentComplete: 0.0\n113 |         ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:133:11: error: module 'BackupInterfaces' has no member named 'BackupProgress'\n131 |       if let reporter=progressReporter {\n132 |         await reporter.reportProgress(\n133 |           BackupInterfaces.BackupProgress(\n    |           `- error: module 'BackupInterfaces' has no member named 'BackupProgress'\n134 |             phase: .completed,\n135 |             percentComplete: 1.0\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:134:21: error: cannot infer contextual base in reference to member 'completed'\n132 |         await reporter.reportProgress(\n133 |           BackupInterfaces.BackupProgress(\n134 |             phase: .completed,\n    |                     `- error: cannot infer contextual base in reference to member 'completed'\n135 |             percentComplete: 1.0\n136 |           ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:146:20: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n144 |                                                           privacy: .public)\n145 | \n146 |       await logger.info(\n    |                    `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n147 |         \"Completed snapshot operation: \\(operationType.rawValue)\",\n148 |         metadata: completionMetadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:170:11: error: module 'BackupInterfaces' has no member named 'BackupProgress'\n168 |       if let reporter=progressReporter {\n169 |         await reporter.reportProgress(\n170 |           BackupInterfaces.BackupProgress(\n    |           `- error: module 'BackupInterfaces' has no member named 'BackupProgress'\n171 |             phase: .failed,\n172 |             percentComplete: 1.0\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:171:21: error: cannot infer contextual base in reference to member 'failed'\n169 |         await reporter.reportProgress(\n170 |           BackupInterfaces.BackupProgress(\n171 |             phase: .failed,\n    |                     `- error: cannot infer contextual base in reference to member 'failed'\n172 |             percentComplete: 1.0\n173 |           ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:186:20: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n184 | \n185 |       // Log error with privacy-aware context\n186 |       await logger.error(\n    |                    `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n187 |         \"Failed snapshot operation: \\(operationType.rawValue)\",\n188 |         metadata: errorContext.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:39:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 37 |     let defaultMessage=\"Starting snapshot operation: \\(logContext.operation)\"\n 38 | \n 39 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 40 |       message ?? defaultMessage,\n 41 |       metadata: logContext.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:59:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 57 |     let defaultMessage=\"Completed snapshot operation: \\(logContext.operation)\"\n 58 | \n 59 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n 60 |       message ?? defaultMessage,\n 61 |       metadata: logContext.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:81:18: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n 79 |     let defaultMessage=\"Error during snapshot operation: \\(logContext.operation)\"\n 80 | \n 81 |     await logger.error(\n    |                  `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n 82 |       message ?? defaultMessage,\n 83 |       metadata: logContext.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:108:18: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n106 |                                                privacy: .public)\n107 | \n108 |     await logger.error(\n    |                  `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n109 |       message,\n110 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:128:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n126 |     let defaultMessage=\"Operation completed successfully\"\n127 | \n128 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n129 |       message ?? defaultMessage,\n130 |       metadata: logContext.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:167:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n165 |     }\n166 | \n167 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n168 |       \"Starting snapshot operation: \\(operation)\",\n169 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:214:18: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n212 |     }\n213 | \n214 |     await logger.info(\n    |                  `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n215 |       \"Completed snapshot operation: \\(operation)\",\n216 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:258:18: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n256 |     }\n257 | \n258 |     await logger.error(\n    |                  `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n259 |       \"Error during snapshot operation: \\(operation)\",\n260 |       metadata: metadata,\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:302:21: error: extra argument 'resolution' in call\n300 |         path: nil,\n301 |         description: \"Repository structure verification failed\",\n302 |         resolution: \"Run a repository maintenance operation to rebuild indices\"\n    |                     `- error: extra argument 'resolution' in call\n303 |       ))\n304 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:300:15: error: 'nil' is not compatible with expected argument type 'String'\n298 |       issues.append(VerificationIssue(\n299 |         type: .inconsistentMetadata,\n300 |         path: nil,\n    |               `- error: 'nil' is not compatible with expected argument type 'String'\n301 |         description: \"Repository structure verification failed\",\n302 |         resolution: \"Run a repository maintenance operation to rebuild indices\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:299:16: error: type 'VerificationIssue.IssueType' has no member 'inconsistentMetadata'\n297 |     if !repositoryValid {\n298 |       issues.append(VerificationIssue(\n299 |         type: .inconsistentMetadata,\n    |                `- error: type 'VerificationIssue.IssueType' has no member 'inconsistentMetadata'\n300 |         path: nil,\n301 |         description: \"Repository structure verification failed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:311:21: error: extra argument 'resolution' in call\n309 |         path: nil,\n310 |         description: \"Data integrity verification failed\",\n311 |         resolution: \"Restore from an alternate backup if possible\"\n    |                     `- error: extra argument 'resolution' in call\n312 |       ))\n313 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:309:15: error: 'nil' is not compatible with expected argument type 'String'\n307 |       issues.append(VerificationIssue(\n308 |         type: .corruptedData,\n309 |         path: nil,\n    |               `- error: 'nil' is not compatible with expected argument type 'String'\n310 |         description: \"Data integrity verification failed\",\n311 |         resolution: \"Restore from an alternate backup if possible\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:308:16: error: type 'VerificationIssue.IssueType' has no member 'corruptedData'\n306 |     if !dataIntegrityValid {\n307 |       issues.append(VerificationIssue(\n308 |         type: .corruptedData,\n    |                `- error: type 'VerificationIssue.IssueType' has no member 'corruptedData'\n309 |         path: nil,\n310 |         description: \"Data integrity verification failed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:320:39: error: extra arguments at positions #1, #3, #4 in call\n318 | \n319 |     // Create and return verification result\n320 |     return BackupVerificationResultDTO(\n    |                                       `- error: extra arguments at positions #1, #3, #4 in call\n321 |       successful: repositoryValid \u0026\u0026 dataIntegrityValid,\n322 |       issues: issues,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:48:10: note: 'init(verified:objectsVerified:bytesVerified:errorCount:issues:repairSummary:snapshotID:verificationTime:)' declared here\n 46 |    *   - verificationTime: Time taken for verification\n 47 |    */\n 48 |   public init(\n    |          `- note: 'init(verified:objectsVerified:bytesVerified:errorCount:issues:repairSummary:snapshotID:verificationTime:)' declared here\n 49 |     verified: Bool,\n 50 |     objectsVerified: Int,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:320:39: error: missing arguments for parameters 'verified', 'objectsVerified', 'bytesVerified', 'errorCount', 'repairSummary', 'snapshotID', 'verificationTime' in call\n318 | \n319 |     // Create and return verification result\n320 |     return BackupVerificationResultDTO(\n    |                                       `- error: missing arguments for parameters 'verified', 'objectsVerified', 'bytesVerified', 'errorCount', 'repairSummary', 'snapshotID', 'verificationTime' in call\n321 |       successful: repositoryValid \u0026\u0026 dataIntegrityValid,\n322 |       issues: issues,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:48:10: note: 'init(verified:objectsVerified:bytesVerified:errorCount:issues:repairSummary:snapshotID:verificationTime:)' declared here\n 46 |    *   - verificationTime: Time taken for verification\n 47 |    */\n 48 |   public init(\n    |          `- note: 'init(verified:objectsVerified:bytesVerified:errorCount:issues:repairSummary:snapshotID:verificationTime:)' declared here\n 49 |     verified: Bool,\n 50 |     objectsVerified: Int,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:384:42: error: extra arguments at positions #5, #6 in call\n382 | \n383 |     // Create a comparison result using the difference data\n384 |     return BackupSnapshotComparisonResult(\n    |                                          `- error: extra arguments at positions #5, #6 in call\n385 |       addedFiles: convertToFileInfoArray(difference.addedFiles),\n386 |       modifiedFiles: convertToFileInfoArray(difference.modifiedFiles),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/SnapshotComparisonResult.swift:48:10: note: 'init(firstSnapshotID:secondSnapshotID:addedFiles:removedFiles:modifiedFiles:unchangedFiles:changeSize:comparisonTimestamp:)' declared here\n46 |    *   - comparisonTimestamp: Timestamp when the comparison was performed\n47 |    */\n48 |   public init(\n   |          `- note: 'init(firstSnapshotID:secondSnapshotID:addedFiles:removedFiles:modifiedFiles:unchangedFiles:changeSize:comparisonTimestamp:)' declared here\n49 |     firstSnapshotID: String,\n50 |     secondSnapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:384:42: error: missing arguments for parameters 'firstSnapshotID', 'secondSnapshotID', 'changeSize' in call\n382 | \n383 |     // Create a comparison result using the difference data\n384 |     return BackupSnapshotComparisonResult(\n    |                                          `- error: missing arguments for parameters 'firstSnapshotID', 'secondSnapshotID', 'changeSize' in call\n385 |       addedFiles: convertToFileInfoArray(difference.addedFiles),\n386 |       modifiedFiles: convertToFileInfoArray(difference.modifiedFiles),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/SnapshotComparisonResult.swift:48:10: note: 'init(firstSnapshotID:secondSnapshotID:addedFiles:removedFiles:modifiedFiles:unchangedFiles:changeSize:comparisonTimestamp:)' declared here\n46 |    *   - comparisonTimestamp: Timestamp when the comparison was performed\n47 |    */\n48 |   public init(\n   |          `- note: 'init(firstSnapshotID:secondSnapshotID:addedFiles:removedFiles:modifiedFiles:unchangedFiles:changeSize:comparisonTimestamp:)' declared here\n49 |     firstSnapshotID: String,\n50 |     secondSnapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:385:19: error: cannot convert value of type '[FileInfo]' to expected argument type '[BackupFile]'\n383 |     // Create a comparison result using the difference data\n384 |     return BackupSnapshotComparisonResult(\n385 |       addedFiles: convertToFileInfoArray(difference.addedFiles),\n    |                   |- error: cannot convert value of type '[FileInfo]' to expected argument type '[BackupFile]'\n    |                   `- note: arguments to generic parameter 'Element' ('FileInfo' and 'BackupFile') are expected to be equal\n386 |       modifiedFiles: convertToFileInfoArray(difference.modifiedFiles),\n387 |       removedFiles: convertToFileInfoArray(difference.removedFiles),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:387:21: error: cannot convert value of type '[FileInfo]' to expected argument type '[BackupFile]'\n385 |       addedFiles: convertToFileInfoArray(difference.addedFiles),\n386 |       modifiedFiles: convertToFileInfoArray(difference.modifiedFiles),\n387 |       removedFiles: convertToFileInfoArray(difference.removedFiles),\n    |                     |- error: cannot convert value of type '[FileInfo]' to expected argument type '[BackupFile]'\n    |                     `- note: arguments to generic parameter 'Element' ('FileInfo' and 'BackupFile') are expected to be equal\n388 |       unchangedFiles: [],\n389 |       totalChangeCount: (difference.addedFiles?.count ?? 0) +\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:386:22: error: cannot convert value of type '[FileInfo]' to expected argument type '[BackupFile]'\n384 |     return BackupSnapshotComparisonResult(\n385 |       addedFiles: convertToFileInfoArray(difference.addedFiles),\n386 |       modifiedFiles: convertToFileInfoArray(difference.modifiedFiles),\n    |                      |- error: cannot convert value of type '[FileInfo]' to expected argument type '[BackupFile]'\n    |                      `- note: arguments to generic parameter 'Element' ('FileInfo' and 'BackupFile') are expected to be equal\n387 |       removedFiles: convertToFileInfoArray(difference.removedFiles),\n388 |       unchangedFiles: [],\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:495:11: warning: initialization of immutable value 'unchangedFiles' was never used; consider replacing with assignment to '_' or removing it\n493 | \n494 |       // Process unchanged files\n495 |       let unchangedFiles=diffResult.unchanged?.map { file in\n    |           `- warning: initialization of immutable value 'unchangedFiles' was never used; consider replacing with assignment to '_' or removing it\n496 |         SnapshotFileEntry(\n497 |           path: file.path ?? \"\",\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:81:41: error: value of type 'any LoggableErrorProtocol' has no member 'getLogMetadata'\n 79 |     if let loggableError = error as? LoggableErrorProtocol {\n 80 |       // Handle loggable errors with enriched metadata\n 81 |       let errorMetadata = loggableError.getLogMetadata()\n    |                                         `- error: value of type 'any LoggableErrorProtocol' has no member 'getLogMetadata'\n 82 |       let formattedMessage = \"[\\(domainName)] \\(loggableError.getLogMessage())\"\n 83 |       let source = \"\\(loggableError.getSource()) via \\(domainName)\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:124:41: error: value of type 'any LoggableErrorProtocol' has no member 'getLogMetadata'\n122 |     if let loggableError = error as? LoggableErrorProtocol {\n123 |       // Handle loggable errors with enriched metadata\n124 |       let errorMetadata = loggableError.getLogMetadata()\n    |                                         `- error: value of type 'any LoggableErrorProtocol' has no member 'getLogMetadata'\n125 |       let formattedMessage = message ?? \"[\\(domainName)] \\(loggableError.getLogMessage())\"\n126 |       let source = \"\\(loggableError.getSource()) via \\(domainName)\"\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:332:47: error: cannot find type 'BackupCreationParameters' in scope\n330 | extension BackupCreateParameters {\n331 |   /// Convert to BackupInterfaces.BackupCreationParameters\n332 |   public func toBackupCreationParameters() -\u003e BackupCreationParameters {\n    |                                               `- error: cannot find type 'BackupCreationParameters' in scope\n333 |     BackupCreationParameters(\n334 |       sources: sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:342:39: error: cannot find type 'BackupCreationParameters' in scope\n340 | \n341 |   /// Create from BackupInterfaces.BackupCreationParameters\n342 |   public static func from(parameters: BackupCreationParameters) -\u003e BackupCreateParameters {\n    |                                       `- error: cannot find type 'BackupCreationParameters' in scope\n343 |     BackupCreateParameters(\n344 |       sources: parameters.sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:354:63: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n352 | extension BackupRestoreParameters {\n353 |   /// Convert to BackupInterfaces.BackupRestoreParameters\n354 |   public func toBackupRestoreParameters() -\u003e BackupInterfaces.BackupRestoreParameters {\n    |                                                               `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n355 |     BackupInterfaces.BackupRestoreParameters(\n356 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:368:8: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n366 |   public static func from(\n367 |     parameters: BackupInterfaces\n368 |       .BackupRestoreParameters\n    |        `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n369 |   ) -\u003e BackupRestoreParameters {\n370 |     BackupRestoreParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:382:60: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n380 | extension BackupListParameters {\n381 |   /// Convert to BackupInterfaces.BackupListParameters\n382 |   public func toBackupListParameters() -\u003e BackupInterfaces.BackupListParameters {\n    |                                                            `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n383 |     BackupInterfaces.BackupListParameters(\n384 |       tags: tags,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:396:8: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n394 |   public static func from(\n395 |     parameters: BackupInterfaces\n396 |       .BackupListParameters\n    |        `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n397 |   ) -\u003e BackupListParameters {\n398 |     BackupListParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:413:35: error: extra arguments at positions #2, #3, #4 in call\n411 |   /// Convert to BackupInterfaces.BackupOptions\n412 |   public func toBackupOptions() -\u003e BackupInterfaces.BackupOptions {\n413 |     BackupInterfaces.BackupOptions(\n    |                                   `- error: extra arguments at positions #2, #3, #4 in call\n414 |       compressionLevel: 0,\n415 |       deduplicate: false,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:27:10: note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 25 |   ///   - useParallelisation: Whether to use parallel operations\n 26 |   ///   - priority: Priority of the backup operation\n 27 |   public init(\n    |          `- note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 28 |     compressionLevel: Int?=nil,\n 29 |     maxSize: UInt64?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:423:18: error: extra arguments at positions #2, #3, #4 in call\n421 |   /// Create from BackupInterfaces.BackupOptions\n422 |   public static func from(options: BackupInterfaces.BackupOptions) -\u003e BackupOptions {\n423 |     BackupOptions(\n    |                  `- error: extra arguments at positions #2, #3, #4 in call\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:27:10: note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 25 |   ///   - useParallelisation: Whether to use parallel operations\n 26 |   ///   - priority: Priority of the backup operation\n 27 |   public init(\n    |          `- note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 28 |     compressionLevel: Int?=nil,\n 29 |     maxSize: UInt64?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:425:28: error: value of type 'BackupOptions' has no member 'deduplicate'\n423 |     BackupOptions(\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n    |                            `- error: value of type 'BackupOptions' has no member 'deduplicate'\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n427 |       metadata: options.metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:426:36: error: value of type 'BackupOptions' has no member 'encryptionAlgorithm'\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n    |                                    `- error: value of type 'BackupOptions' has no member 'encryptionAlgorithm'\n427 |       metadata: options.metadata\n428 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:427:25: error: value of type 'BackupOptions' has no member 'metadata'\n425 |       deduplicate: options.deduplicate,\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n427 |       metadata: options.metadata\n    |                         `- error: value of type 'BackupOptions' has no member 'metadata'\n428 |     )\n429 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:435:36: error: extra arguments at positions #2, #3, #4, #5 in call\n433 |   /// Convert to BackupInterfaces.RestoreOptions\n434 |   public func toRestoreOptions() -\u003e BackupInterfaces.RestoreOptions {\n435 |     BackupInterfaces.RestoreOptions(\n    |                                    `- error: extra arguments at positions #2, #3, #4, #5 in call\n436 |       preservePermissions: false,\n437 |       preserveOwnership: false,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:66:10: note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 64 |   ///   - useParallelisation: Whether to use parallel operations\n 65 |   ///   - priority: Priority of the restore operation\n 66 |   public init(\n    |          `- note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 67 |     overwriteExisting: Bool=false,\n 68 |     restorePermissions: Bool=true,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:446:19: error: extra arguments at positions #2, #3, #4, #5 in call\n444 |   /// Create from BackupInterfaces.RestoreOptions\n445 |   public static func from(options: BackupInterfaces.RestoreOptions) -\u003e RestoreOptions {\n446 |     RestoreOptions(\n    |                   `- error: extra arguments at positions #2, #3, #4, #5 in call\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:66:10: note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 64 |   ///   - useParallelisation: Whether to use parallel operations\n 65 |   ///   - priority: Priority of the restore operation\n 66 |   public init(\n    |          `- note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 67 |     overwriteExisting: Bool=false,\n 68 |     restorePermissions: Bool=true,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:447:36: error: value of type 'RestoreOptions' has no member 'preservePermissions'\n445 |   public static func from(options: BackupInterfaces.RestoreOptions) -\u003e RestoreOptions {\n446 |     RestoreOptions(\n447 |       preservePermissions: options.preservePermissions,\n    |                                    `- error: value of type 'RestoreOptions' has no member 'preservePermissions'\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:448:34: error: value of type 'RestoreOptions' has no member 'preserveOwnership'\n446 |     RestoreOptions(\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n    |                                  `- error: value of type 'RestoreOptions' has no member 'preserveOwnership'\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:449:30: error: value of type 'RestoreOptions' has no member 'preserveTimes'\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n    |                              `- error: value of type 'RestoreOptions' has no member 'preserveTimes'\n450 |       skipExisting: options.skipExisting,\n451 |       metadata: options.metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:450:29: error: value of type 'RestoreOptions' has no member 'skipExisting'\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n    |                             `- error: value of type 'RestoreOptions' has no member 'skipExisting'\n451 |       metadata: options.metadata\n452 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:451:25: error: value of type 'RestoreOptions' has no member 'metadata'\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n451 |       metadata: options.metadata\n    |                         `- error: value of type 'RestoreOptions' has no member 'metadata'\n452 |     )\n453 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:217:41: error: cannot find type 'VerificationResult' in scope\n215 | extension BackupVerificationResultDTO {\n216 |   /// Convert this DTO to a BackupInterfaces.VerificationResult\n217 |   public func toVerificationResult() -\u003e VerificationResult {\n    |                                         `- error: cannot find type 'VerificationResult' in scope\n218 |     VerificationResult(\n219 |       verified: verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:231:47: error: cannot find type 'VerificationResult' in scope\n229 | \n230 |   /// Create a BackupVerificationResultDTO from a BackupInterfaces.VerificationResult\n231 |   public static func from(verificationResult: VerificationResult) -\u003e BackupVerificationResultDTO {\n    |                                               `- error: cannot find type 'VerificationResult' in scope\n232 |     BackupVerificationResultDTO(\n233 |       verified: verificationResult.verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:245:39: error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n243 | }\n244 | \n245 | extension BackupVerificationResultDTO.VerificationIssue {\n    |                                       `- error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n246 |   /// Convert this DTO to a BackupInterfaces.VerificationIssue\n247 |   public func toVerificationIssue() -\u003e VerificationResult.VerificationIssue {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:271:39: error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n269 | }\n270 | \n271 | extension BackupVerificationResultDTO.RepairSummary {\n    |                                       `- error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n272 |   /// Convert this DTO to a BackupInterfaces.RepairSummary\n273 |   public func toRepairSummary() -\u003e VerificationResult.RepairSummary {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:294:39: error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n292 | }\n293 | \n294 | extension BackupVerificationResultDTO.RepairAction {\n    |                                       `- error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n295 |   /// Convert this DTO to a BackupInterfaces.RepairAction\n296 |   public func toRepairAction() -\u003e VerificationResult.RepairAction {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:237:65: error: type 'VerificationIssue' has no member 'from'\n235 |       bytesVerified: verificationResult.bytesVerified,\n236 |       errorCount: verificationResult.errorCount,\n237 |       issues: verificationResult.issues.map { VerificationIssue.from(issue: $0) },\n    |                                                                 `- error: type 'VerificationIssue' has no member 'from'\n238 |       repairSummary: verificationResult.repairSummary.map { RepairSummary.from(summary: $0) },\n239 |       snapshotID: verificationResult.snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:238:75: error: type 'RepairSummary' has no member 'from'\n236 |       errorCount: verificationResult.errorCount,\n237 |       issues: verificationResult.issues.map { VerificationIssue.from(issue: $0) },\n238 |       repairSummary: verificationResult.repairSummary.map { RepairSummary.from(summary: $0) },\n    |                                                                           `- error: type 'RepairSummary' has no member 'from'\n239 |       snapshotID: verificationResult.snapshotID,\n240 |       verificationTime: verificationResult.verificationTime\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:25:21: error: type 'ProgressCancellationTokenAdapter' does not conform to protocol 'ProgressCancellationToken'\n23 | \n24 | /// Adapter that allows a BackupOperationCancellationToken to be used as a ProgressCancellationToken\n25 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken {\n   |                     |- error: type 'ProgressCancellationTokenAdapter' does not conform to protocol 'ProgressCancellationToken'\n   |                     `- note: add stubs for conformance\n26 |   private let token: BackupOperationCancellationToken\n27 | \n   :\n31 | \n32 |   var isCancelled: Bool {\n33 |     get async {\n   |     `- note: candidate is 'async', but protocol requirement is not\n34 |       await token.isCancelled\n35 |     }\n36 |   }\n37 | \n38 |   func cancel() async {\n   |        `- note: candidate is 'async', but protocol requirement is not\n39 |     await token.cancel()\n40 |   }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:341:7: note: protocol requires property 'isCancelled' with type 'Bool'\n339 | public protocol ProgressCancellationToken: Sendable {\n340 |   /// Checks if the operation has been cancelled\n341 |   var isCancelled: Bool { get }\n    |       `- note: protocol requires property 'isCancelled' with type 'Bool'\n342 | \n343 |   /// Attempts to cancel the operation\n344 |   func cancel()\n    |        `- note: protocol requires function 'cancel()' with type '() -\u003e ()'\n345 | }\n346 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:43:17: error: value of type 'BackupOperationCancellationToken' has no member 'onCancel'\n41 | \n42 |   func onCancel(_ callback: @escaping () -\u003e Void) async {\n43 |     await token.onCancel(callback)\n   |                 `- error: value of type 'BackupOperationCancellationToken' has no member 'onCancel'\n44 |   }\n45 | }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:92:16: error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n 90 |       .with(\n 91 |         key: \"repositoryID\",\n 92 |         value: repositoryID,\n    |                |- error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n    |                |- note: coalesce using '??' to provide a default when the optional value contains 'nil'\n    |                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n 93 |         privacy: LoggingTypes.PrivacyClassification.public\n 94 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:97:16: error: value of optional type '[String]?' must be unwrapped to refer to member 'joined' of wrapped base type '[String]'\n 95 |       .with(\n 96 |         key: \"tags\",\n 97 |         value: tags.joined(separator: \", \"),\n    |                |- error: value of optional type '[String]?' must be unwrapped to refer to member 'joined' of wrapped base type '[String]'\n    |                |- note: chain the optional using '?' to access member 'joined' only for non-'nil' base values\n    |                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n 98 |         privacy: LoggingTypes.PrivacyClassification.public\n 99 |       )\nTarget //packages/UmbraImplementations/Sources/BackupServices:BackupServices failed to build\nINFO: Elapsed time: 6.646s, Critical Path: 6.50s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices",
    "success": true,
    "start_time": "2025-04-06T11:27:04.985461+01:00",
    "end_time": "2025-04-06T11:27:05.714424+01:00",
    "duration": "728.965459ms",
    "output": "INFO: Invocation ID: fbe58d20-ec3d-4a76-9d65-e826805afb8e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices (3 packages loaded, 8 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/BookmarkServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/BookmarkServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/BookmarkServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/libBookmarkServices.a\nINFO: Elapsed time: 0.160s, Critical Path: 0.00s\nINFO: 1 process: 7 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger",
    "success": true,
    "start_time": "2025-04-06T11:27:05.714446+01:00",
    "end_time": "2025-04-06T11:27:06.652497+01:00",
    "duration": "938.0545ms",
    "output": "INFO: Invocation ID: c37fbbb6-8312-465b-a40a-ce418b43af80\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/BookmarkLogger.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/BookmarkLogger.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/BookmarkLogger.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/libBookmarkLogger.a\nINFO: Elapsed time: 0.151s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel",
    "success": true,
    "start_time": "2025-04-06T11:27:06.652502+01:00",
    "end_time": "2025-04-06T11:27:07.36077+01:00",
    "duration": "708.270625ms",
    "output": "INFO: Invocation ID: d5324332-3f70-49e1-9650-44fca3c5a106\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/BookmarkModel.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/BookmarkModel.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/BookmarkModel.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/libBookmarkModel.a\nINFO: Elapsed time: 0.145s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices",
    "success": true,
    "start_time": "2025-04-06T11:27:07.360781+01:00",
    "end_time": "2025-04-06T11:27:08.07003+01:00",
    "duration": "709.252833ms",
    "output": "INFO: Invocation ID: d7905352-3242-4578-9355-ea25150e0634\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices (2 packages loaded, 12 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/libConfigServices.a\nINFO: Elapsed time: 0.159s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CoreServices:CoreServices",
    "success": false,
    "start_time": "2025-04-06T11:27:08.070038+01:00",
    "end_time": "2025-04-06T11:27:09.827445+01:00",
    "duration": "1.757413542s",
    "output": "INFO: Invocation ID: e3be3280-bb7e-4fbe-b624-3307984498f2\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CoreServices:CoreServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CoreServices:CoreServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CoreServices:CoreServices (3 packages loaded, 41 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:14: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.4.1-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:55:8: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 53 |   private static func convert(\n 54 |     _ algorithm: SecurityCoreInterfaces\n 55 |       .EncryptionAlgorithm\n    |        `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 56 |   ) -\u003e EncryptionAlgorithm {\n 57 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:69:4: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 67 | \n 68 |   private static func convertToInterface(_ algorithm: EncryptionAlgorithm) -\u003e SecurityCoreInterfaces\n 69 |   .EncryptionAlgorithm {\n    |    `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 70 |     switch algorithm {\n 71 |       case .aes:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:81:62: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 79 | \n 80 |   // Helper methods for mode conversion\n 81 |   private static func convert(_ mode: SecurityCoreInterfaces.EncryptionMode) -\u003e EncryptionMode {\n    |                                                              `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 82 |     switch mode {\n 83 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:94:4: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 92 | \n 93 |   private static func convertToInterface(_ mode: EncryptionMode) -\u003e SecurityCoreInterfaces\n 94 |   .EncryptionMode {\n    |    `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 95 |     switch mode {\n 96 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:109:8: error: cannot find type 'EncryptionPadding' in scope\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n109 |   ) -\u003e EncryptionPadding {\n    |        `- error: cannot find type 'EncryptionPadding' in scope\n110 |     switch padding {\n111 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:108:8: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n106 |   private static func convert(\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n    |        `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n109 |   ) -\u003e EncryptionPadding {\n110 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:122:4: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n122 |   .EncryptionPadding {\n    |    `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n123 |     switch padding {\n124 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:121:53: error: cannot find type 'EncryptionPadding' in scope\n119 |   }\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n    |                                                     `- error: cannot find type 'EncryptionPadding' in scope\n122 |   .EncryptionPadding {\n123 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:147:8: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n145 |     _ options: SecurityCoreInterfaces\n146 |       .DecryptionOptions?\n147 |   ) -\u003e DecryptionOptions? {\n    |        `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n148 |     guard let options else { return nil }\n149 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:164:52: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n162 |    - Returns: The converted options or nil if input was nil\n163 |    */\n164 |   public static func convertToInterface(_ options: DecryptionOptions?) -\u003e SecurityCoreInterfaces\n    |                                                    `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n165 |   .DecryptionOptions? {\n166 |     guard let options else { return nil }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:216:8: error: cannot find type 'HashingAlgorithm' in scope\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n216 |   ) -\u003e HashingAlgorithm {\n    |        `- error: cannot find type 'HashingAlgorithm' in scope\n217 |     switch algorithm {\n218 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:215:8: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n213 |   private static func convert(\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n    |        `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n216 |   ) -\u003e HashingAlgorithm {\n217 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:231:4: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n231 |   .HashingAlgorithm {\n    |    `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n232 |     switch algorithm {\n233 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:230:55: error: cannot find type 'HashingAlgorithm' in scope\n228 |   }\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n    |                                                       `- error: cannot find type 'HashingAlgorithm' in scope\n231 |   .HashingAlgorithm {\n232 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:228:18: error: cannot find type 'DeploymentEnvironment' in scope\n226 |     secureStorage: SecureStorageProtocol?=nil,\n227 |     logger: LoggingProtocol?=nil,\n228 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:33:14: error: cannot find type 'SecurityProviderOptions' in scope\n31 |     data: [UInt8],\n32 |     keyIdentifier: String?=nil,\n33 |     options: SecurityProviderOptions?=nil\n   |              `- error: cannot find type 'SecurityProviderOptions' in scope\n34 |   ) async -\u003e Result\u003c[UInt8], Error\u003e {\n35 |     // Basic implementation of security operations\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:80:16: error: cannot find type 'SecurityProviderOptions' in scope\n78 | \n79 |   public func generateKey(\n80 |     options _: SecurityProviderOptions\n   |                `- error: cannot find type 'SecurityProviderOptions' in scope\n81 |   ) async -\u003e Result\u003cString, Error\u003e {\n82 |     // In a real implementation, this would generate an actual cryptographic key\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              |- error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n   |              `- note: add stubs for conformance\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:30:8: note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 28 | \n 29 |   /// Access to cryptographic service implementation\n 30 |   func cryptoService() async -\u003e CryptoServiceProtocol\n    |        `- note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 31 | \n 32 |   /// Access to key management service implementation\n 33 |   func keyManager() async -\u003e KeyManagementProtocol\n    |        `- note: protocol requires function 'keyManager()' with type '() async -\u003e any KeyManagementProtocol'\n 34 | \n 35 |   // MARK: - Core Operations\n    :\n 41 |    - Returns: Result containing encrypted data or error\n 42 |    */\n 43 |   func encrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'encrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 44 | \n 45 |   /**\n    :\n 49 |    - Returns: Result containing decrypted data or error\n 50 |    */\n 51 |   func decrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'decrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 52 | \n 53 |   /**\n    :\n 65 |    - Returns: Result containing storage confirmation or error\n 66 |    */\n 67 |   func secureStore(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureStore(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 68 | \n 69 |   /**\n    :\n 73 |    - Returns: Result containing retrieved data or error\n 74 |    */\n 75 |   func secureRetrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureRetrieve(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 76 | \n 77 |   /**\n    :\n 81 |    - Returns: Result containing deletion confirmation or error\n 82 |    */\n 83 |   func secureDelete(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureDelete(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 84 | \n 85 |   /**\n    :\n 89 |    - Returns: Result containing signature data or error\n 90 |    */\n 91 |   func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'sign(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 92 | \n 93 |   /**\n    :\n 97 |    - Returns: Result containing verification status or error\n 98 |    */\n 99 |   func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'verify(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n100 | \n101 |   /**\n    :\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n    :\n121 |    - Returns: A properly configured SecurityConfigDTO\n122 |    */\n123 |   func createSecureConfig(options: SecurityConfigOptions) async -\u003e SecurityConfigDTO\n    |        `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n124 | }\n125 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 | \n 21 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:17:14: error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  as the baseline implementation when more specialised providers aren't selected.\n 16 |  */\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n 97 |   }\n 98 | \n 99 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n100 |     encryptedDataIdentifier: String,\n101 |     keyIdentifier: String,\n    :\n198 |   }\n199 | \n200 |   public func verifyHash(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n201 |     dataIdentifier: String,\n202 |     hashIdentifier: String,\n    :\n259 |   }\n260 | \n261 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n262 |     length: Int,\n263 |     options: CryptoServiceOptions?=nil\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 |   private let logger: LoggingProtocol\n 21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:17:14: error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  CryptoServiceProtocol API.\n 16 |  */\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n102 |   }\n103 | \n104 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n105 |     encryptedDataIdentifier: String,\n106 |     keyIdentifier: String,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:8:15: error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n 6 |  Enhanced log context for crypto operations with privacy controls\n 7 |  */\n 8 | public struct EnhancedLogContext: LogContextDTO {\n   |               |- error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n   |               `- note: add stubs for conformance\n 9 |   /// Domain name for the log context\n10 |   public let domainName: String\n   :\n14 |   \n15 |   /// Additional context metadata as key-value pairs\n16 |   public let metadata: [String: String]\n   |              `- note: candidate has non-matching type '[String : String]'\n17 |   \n18 |   /// Privacy level for each metadata field\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:13:7: note: protocol requires property 'source' with type 'String?'\n11 | \n12 |   /// Optional source information (class, file, etc.)\n13 |   var source: String? { get }\n   |       `- note: protocol requires property 'source' with type 'String?'\n14 | \n15 |   /// Optional correlation ID for tracing related log events\n16 |   var correlationID: String? { get }\n   |       `- note: protocol requires property 'correlationID' with type 'String?'\n17 | \n18 |   /// The metadata collection for this context\n19 |   var metadata: LogMetadataDTOCollection { get }\n   |       `- note: protocol requires property 'metadata' with type 'LogMetadataDTOCollection'\n20 | }\n21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:16:14: error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 14 |  logging with proper privacy tags for sensitive data.\n 15 |  */\n 16 | public actor EnhancedLoggingCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 17 |   /// The wrapped implementation\n 18 |   private let wrapped: CryptoServiceProtocol\n    :\n 81 |   }\n 82 | \n 83 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 84 |     encryptedDataIdentifier: String,\n 85 |     keyIdentifier: String,\n    :\n215 |   }\n216 | \n217 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n218 |     length: Int,\n219 |     options: KeyGenerationOptions?=nil\n    :\n258 |   }\n259 | \n260 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n261 |     data: [UInt8],\n262 |     identifier: String\n    :\n300 |   }\n301 | \n302 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n303 |     identifier: String\n304 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n    :\n421 |   }\n422 | \n423 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n424 |     identifier: String\n425 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:47:30: error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n 47 |     rateLimiter: RateLimiter=RateLimiter()\n    |                              `- error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 48 |   ) {\n 49 |     self.wrapped = wrapped\n    :\n443 |  Simple rate limiter for security operations.\n444 |  */\n445 | public class RateLimiter {\n    |              `- note: initializer 'init()' is not '@usableFromInline' or public\n446 |   public enum Operation: String {\n447 |     case encrypt, decrypt, hash, verify, export, generateKey\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:384:15: error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n382 |    - Returns: The exported data or error\n383 |    */\n384 |   public func exportData(\n    |               `- error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n385 |     withIdentifier identifier: String\n386 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:81:8: note: requirement 'exportData(identifier:)' declared here\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: requirement 'exportData(identifier:)' declared here\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:20:14: error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 18 |  validation of cryptographic operations.\n 19 |  */\n 20 | public actor EnhancedSecureCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 21 | \n 22 |   /// The wrapped implementation that does the actual cryptographic work\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/LoggingCryptoServiceImpl.swift:9:14: error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n  7 |  all operations before delegating to the wrapped implementation.\n  8 |  */\n  9 | public actor LoggingCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 10 |   /// The wrapped implementation\n 11 |   private let wrapped: CryptoServiceProtocol\n    :\n339 |    - Returns: Identifier for the imported data or an error\n340 |    */\n341 |   public func importData(\n    |               `- note: candidate has non-matching type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n342 |     _ data: [UInt8],\n343 |     customIdentifier: String?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:93:8: note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:47:31: error: cannot find type 'CryptoProviderProtocol' in scope\n  45 |   \n  46 |   /// Crypto provider for cryptographic operations\n  47 |   private let cryptoProvider: CryptoProviderProtocol\n     |                               `- error: cannot find type 'CryptoProviderProtocol' in scope\n  48 |   \n  49 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:64:21: error: cannot find type 'CryptoProviderProtocol' in scope\n  62 |     wrapped: CryptoServiceProtocol,\n  63 |     secureStorage: SecureStorageProtocol,\n  64 |     cryptoProvider: CryptoProviderProtocol,\n     |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n  65 |     logger: LoggingProtocol\n  66 |   ) {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n264 |    - Returns: Result containing array of identifiers or error details\n265 |    */\n266 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n267 |     await logger.warning(\n268 |       \"List data identifiers operation not supported\",\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecureStorageProtocol.swift:14:8: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n12 |   ///   - identifier: A string identifier for the stored data.\n13 |   /// - Returns: Success or an error.\n14 |   func storeData(_ data: [UInt8], withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n15 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n16 | \n   :\n18 |   /// - Parameter identifier: A string identifying the data to retrieve.\n19 |   /// - Returns: The retrieved data as a byte array or an error.\n20 |   func retrieveData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n21 |     -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n22 | \n   :\n24 |   /// - Parameter identifier: A string identifying the data to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n27 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n28 | \n29 |   /// Lists all available data identifiers.\n30 |   /// - Returns: An array of data identifiers or an error.\n31 |   func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityStorageError\u003e\n   |        `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n32 | }\n33 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/OptionTypes.swift:109:14: warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n107 | public struct SendableOptionsDictionary: Sendable {\n108 |   /// The underlying dictionary\n109 |   public let dictionary: [String: Any]\n    |              `- warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n110 |   \n111 |   /**\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:55:8: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 53 |   private static func convert(\n 54 |     _ algorithm: SecurityCoreInterfaces\n 55 |       .EncryptionAlgorithm\n    |        `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 56 |   ) -\u003e EncryptionAlgorithm {\n 57 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:69:4: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 67 | \n 68 |   private static func convertToInterface(_ algorithm: EncryptionAlgorithm) -\u003e SecurityCoreInterfaces\n 69 |   .EncryptionAlgorithm {\n    |    `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 70 |     switch algorithm {\n 71 |       case .aes:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:81:62: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 79 | \n 80 |   // Helper methods for mode conversion\n 81 |   private static func convert(_ mode: SecurityCoreInterfaces.EncryptionMode) -\u003e EncryptionMode {\n    |                                                              `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 82 |     switch mode {\n 83 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:94:4: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 92 | \n 93 |   private static func convertToInterface(_ mode: EncryptionMode) -\u003e SecurityCoreInterfaces\n 94 |   .EncryptionMode {\n    |    `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 95 |     switch mode {\n 96 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:109:8: error: cannot find type 'EncryptionPadding' in scope\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n109 |   ) -\u003e EncryptionPadding {\n    |        `- error: cannot find type 'EncryptionPadding' in scope\n110 |     switch padding {\n111 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:108:8: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n106 |   private static func convert(\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n    |        `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n109 |   ) -\u003e EncryptionPadding {\n110 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:122:4: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n122 |   .EncryptionPadding {\n    |    `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n123 |     switch padding {\n124 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:121:53: error: cannot find type 'EncryptionPadding' in scope\n119 |   }\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n    |                                                     `- error: cannot find type 'EncryptionPadding' in scope\n122 |   .EncryptionPadding {\n123 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:147:8: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n145 |     _ options: SecurityCoreInterfaces\n146 |       .DecryptionOptions?\n147 |   ) -\u003e DecryptionOptions? {\n    |        `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n148 |     guard let options else { return nil }\n149 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:164:52: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n162 |    - Returns: The converted options or nil if input was nil\n163 |    */\n164 |   public static func convertToInterface(_ options: DecryptionOptions?) -\u003e SecurityCoreInterfaces\n    |                                                    `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n165 |   .DecryptionOptions? {\n166 |     guard let options else { return nil }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:216:8: error: cannot find type 'HashingAlgorithm' in scope\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n216 |   ) -\u003e HashingAlgorithm {\n    |        `- error: cannot find type 'HashingAlgorithm' in scope\n217 |     switch algorithm {\n218 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:215:8: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n213 |   private static func convert(\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n    |        `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n216 |   ) -\u003e HashingAlgorithm {\n217 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:231:4: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n231 |   .HashingAlgorithm {\n    |    `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n232 |     switch algorithm {\n233 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:230:55: error: cannot find type 'HashingAlgorithm' in scope\n228 |   }\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n    |                                                       `- error: cannot find type 'HashingAlgorithm' in scope\n231 |   .HashingAlgorithm {\n232 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:26:29: error: extra arguments at positions #2, #3, #4 in call\n 24 |     guard let options else { return nil }\n 25 | \n 26 |     return EncryptionOptions(\n    |                             `- error: extra arguments at positions #2, #3, #4 in call\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:154:10: note: 'init(algorithm:authenticatedData:)' declared here\n152 | \n153 |   /// Initialises encryption options with defaults.\n154 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n155 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n156 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:27:18: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 25 | \n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n    |                  `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:27:34: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 25 | \n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n    |                                  `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:28:29: error: value of type 'EncryptionOptions' has no member 'mode'\n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n    |                             `- error: value of type 'EncryptionOptions' has no member 'mode'\n 29 |       padding: convert(options.padding),\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:29:32: error: value of type 'EncryptionOptions' has no member 'padding'\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n    |                                `- error: value of type 'EncryptionOptions' has no member 'padding'\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n 31 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:30:44: error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 31 |     )\n 32 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:44:52: error: extra arguments at positions #2, #3, #4 in call\n 42 |     guard let options else { return nil }\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n    |                                                    `- error: extra arguments at positions #2, #3, #4 in call\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:154:10: note: 'init(algorithm:authenticatedData:)' declared here\n152 | \n153 |   /// Initialises encryption options with defaults.\n154 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n155 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n156 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:45:18: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n    |                  `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:45:45: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n    |                                             `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:46:40: error: value of type 'EncryptionOptions' has no member 'mode'\n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n    |                                        `- error: value of type 'EncryptionOptions' has no member 'mode'\n 47 |       padding: convertToInterface(options.padding),\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:47:43: error: value of type 'EncryptionOptions' has no member 'padding'\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n    |                                           `- error: value of type 'EncryptionOptions' has no member 'padding'\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n 49 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:48:44: error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 49 |     )\n 50 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:59:17: error: type 'EncryptionAlgorithm' has no member 'aes'\n 57 |     switch algorithm {\n 58 |       case .aes:\n 59 |         return .aes\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 60 |       case .chacha20:\n 61 |         return .chacha20\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:61:17: error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 59 |         return .aes\n 60 |       case .chacha20:\n 61 |         return .chacha20\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 62 |       @unknown default:\n 63 |         // Default to a safe algorithm if an unknown one is provided\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:64:17: error: type 'EncryptionAlgorithm' has no member 'aes'\n 62 |       @unknown default:\n 63 |         // Default to a safe algorithm if an unknown one is provided\n 64 |         return .aes\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 65 |     }\n 66 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:71:13: error: type 'EncryptionAlgorithm' has no member 'aes'\n 69 |   .EncryptionAlgorithm {\n 70 |     switch algorithm {\n 71 |       case .aes:\n    |             `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 72 |         return .aes\n 73 |       case .chacha20:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:73:13: error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 71 |       case .aes:\n 72 |         return .aes\n 73 |       case .chacha20:\n    |             `- error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 74 |         return .chacha20\n 75 |       @unknown default:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:150:29: error: extra arguments at positions #2, #4 in call\n148 |     guard let options else { return nil }\n149 | \n150 |     return DecryptionOptions(\n    |                             `- error: extra arguments at positions #2, #4 in call\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:31:10: note: 'init(algorithm:authenticatedData:padding:)' declared here\n29 |      - padding: Optional padding mode to use\n30 |    */\n31 |   public init(\n   |          `- note: 'init(algorithm:authenticatedData:padding:)' declared here\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:151:43: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n149 | \n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n    |                                           `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:41: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'PaddingMode?'\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n    |                                         `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'PaddingMode?'\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n155 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:151:59: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n149 | \n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n    |                                                           `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:152:54: error: value of type 'DecryptionOptions' has no member 'mode'\n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n    |                                                      `- error: value of type 'DecryptionOptions' has no member 'mode'\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:57: error: value of type 'DecryptionOptions' has no member 'padding'\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n    |                                                         `- error: value of type 'DecryptionOptions' has no member 'padding'\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n155 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:154:44: error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n155 |     )\n156 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:168:52: error: extra arguments at positions #2, #3, #4 in call\n166 |     guard let options else { return nil }\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n    |                                                    `- error: extra arguments at positions #2, #3, #4 in call\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:172:10: note: 'init(algorithm:authenticatedData:)' declared here\n170 | \n171 |   /// Initialises decryption options with defaults.\n172 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n173 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n174 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:43: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n    |                                           `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:70: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n    |                                                                      `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:170:65: error: value of type 'DecryptionOptions' has no member 'mode'\n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n    |                                                                 `- error: value of type 'DecryptionOptions' has no member 'mode'\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:171:68: error: cannot convert value of type 'PaddingMode?' to expected argument type 'EncryptionOptions?'\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n    |                                                                    `- error: cannot convert value of type 'PaddingMode?' to expected argument type 'EncryptionOptions?'\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n173 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:172:44: error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n173 |     )\n174 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:192:21: error: extra argument 'salt' in call\n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n192 |       salt: options.salt\n    |                     `- error: extra argument 'salt' in call\n193 |     )\n194 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:191:18: error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n189 | \n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n    |                  `- error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n192 |       salt: options.salt\n193 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:191:34: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n189 | \n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n    |                                  `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n192 |       salt: options.salt\n193 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:192:21: error: value of type 'HashingOptions' has no member 'salt'\n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n192 |       salt: options.salt\n    |                     `- error: value of type 'HashingOptions' has no member 'salt'\n193 |     )\n194 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:208:21: error: extra argument 'salt' in call\n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n208 |       salt: options.salt\n    |                     `- error: extra argument 'salt' in call\n209 |     )\n210 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:207:18: error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n205 | \n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n    |                  `- error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n208 |       salt: options.salt\n209 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:207:45: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n205 | \n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n    |                                             `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n208 |       salt: options.salt\n209 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:208:21: error: value of type 'HashingOptions' has no member 'salt'\n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n208 |       salt: options.salt\n    |                     `- error: value of type 'HashingOptions' has no member 'salt'\n209 |     )\n210 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:264:33: error: extra argument 'customIdentifier' in call\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n264 |       customIdentifier: options.customIdentifier\n    |                                 `- error: extra argument 'customIdentifier' in call\n265 |     )\n266 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:263:33: error: value of type 'KeyGenerationOptions' has no member 'useSecureEnclave'\n261 |     return KeyGenerationOptions(\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'useSecureEnclave'\n264 |       customIdentifier: options.customIdentifier\n265 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:264:33: error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n264 |       customIdentifier: options.customIdentifier\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n265 |     )\n266 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:278:55: error: extra arguments at positions #2, #3 in call\n276 |     guard let options else { return nil }\n277 | \n278 |     return SecurityCoreInterfaces.KeyGenerationOptions(\n    |                                                       `- error: extra arguments at positions #2, #3 in call\n279 |       keyType: convertToInterface(options.keyType),\n280 |       useSecureEnclave: options.useSecureEnclave,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:201:10: note: 'init(persistent:keyType:)' declared here\n199 | \n200 |   /// Initialises key generation options with defaults.\n201 |   public init(persistent: Bool=true, keyType: KeyType = .symmetric) {\n    |          `- note: 'init(persistent:keyType:)' declared here\n202 |     self.persistent=persistent\n203 |     self.keyType=keyType\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:281:33: error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n279 |       keyType: convertToInterface(options.keyType),\n280 |       useSecureEnclave: options.useSecureEnclave,\n281 |       customIdentifier: options.customIdentifier\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n282 |     )\n283 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:289:17: error: type 'KeyType' has no member 'symmetric'\n287 |     switch keyType {\n288 |       case .symmetric:\n289 |         return .symmetric\n    |                 `- error: type 'KeyType' has no member 'symmetric'\n290 |       case .asymmetric:\n291 |         return .asymmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:291:17: error: type 'KeyType' has no member 'asymmetric'\n289 |         return .symmetric\n290 |       case .asymmetric:\n291 |         return .asymmetric\n    |                 `- error: type 'KeyType' has no member 'asymmetric'\n292 |       @unknown default:\n293 |         // Default to symmetric if unknown\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:294:17: error: type 'KeyType' has no member 'symmetric'\n292 |       @unknown default:\n293 |         // Default to symmetric if unknown\n294 |         return .symmetric\n    |                 `- error: type 'KeyType' has no member 'symmetric'\n295 |     }\n296 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:287:5: warning: switch must be exhaustive\n285 |   // Helper methods for key type conversion\n286 |   private static func convert(_ keyType: SecurityCoreInterfaces.KeyType) -\u003e KeyType {\n287 |     switch keyType {\n    |     |- warning: switch must be exhaustive\n    |     `- note: add missing case: '.hybrid'\n288 |       case .symmetric:\n289 |         return .symmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:300:13: error: type 'KeyType' has no member 'symmetric'\n298 |   private static func convertToInterface(_ keyType: KeyType) -\u003e SecurityCoreInterfaces.KeyType {\n299 |     switch keyType {\n300 |       case .symmetric:\n    |             `- error: type 'KeyType' has no member 'symmetric'\n301 |         return .symmetric\n302 |       case .asymmetric:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:302:13: error: type 'KeyType' has no member 'asymmetric'\n300 |       case .symmetric:\n301 |         return .symmetric\n302 |       case .asymmetric:\n    |             `- error: type 'KeyType' has no member 'asymmetric'\n303 |         return .asymmetric\n304 |       @unknown default:\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:97:22: error: extra argument 'secureStorage' in call\n 95 |   ) async -\u003e CryptoServiceProtocol {\n 96 |     await CryptoServiceFactory.createMock(\n 97 |       secureStorage: secureStorage,\n    |                      `- error: extra argument 'secureStorage' in call\n 98 |       configuration: configuration\n 99 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:228:18: error: cannot find type 'DeploymentEnvironment' in scope\n226 |     secureStorage: SecureStorageProtocol?=nil,\n227 |     logger: LoggingProtocol?=nil,\n228 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:98:32: error: cannot find 'DefaultConsoleLogger' in scope\n 96 |     logger: LoggingProtocol?=nil\n 97 |   ) async -\u003e CryptoServiceProtocol {\n 98 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n 99 | \n100 |     return await DefaultCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:119:32: error: cannot find 'DefaultConsoleLogger' in scope\n117 |     logger: LoggingProtocol?=nil\n118 |   ) async -\u003e CryptoServiceProtocol {\n119 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n120 | \n121 |     return await LoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:143:32: error: cannot find 'DefaultConsoleLogger' in scope\n141 |     logger: LoggingProtocol?=nil\n142 |   ) async -\u003e CryptoServiceProtocol {\n143 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n144 | \n145 |     return await EnhancedLoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:167:32: error: cannot find 'DefaultConsoleLogger' in scope\n165 |     logger: LoggingProtocol?=nil\n166 |   ) async -\u003e CryptoServiceProtocol {\n167 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n168 | \n169 |     // Create secure service with enhanced parameters\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:179:16: error: extra argument 'storage' in call\n177 |         )\n178 |       ),\n179 |       storage: createSecureStorage(),\n    |                `- error: extra argument 'storage' in call\n180 |       logger: actualLogger\n181 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:201:32: error: cannot find 'DefaultConsoleLogger' in scope\n199 |     logger: LoggingProtocol?=nil\n200 |   ) async -\u003e CryptoServiceProtocol {\n201 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n202 | \n203 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:204:22: error: cannot find 'MockCryptoConfiguration' in scope\n202 | \n203 |     return await MockCryptoServiceImpl(\n204 |       configuration: MockCryptoConfiguration(\n    |                      `- error: cannot find 'MockCryptoConfiguration' in scope\n205 |         encryptionSucceeds: shouldSucceed,\n206 |         decryptionSucceeds: shouldSucceed,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:213:27: error: missing argument for parameter 'secureStorage' in call\n211 |         retrievalSucceeds: shouldSucceed\n212 |       ),\n213 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureStorage' in call\n214 |     )\n215 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:230:32: error: cannot find 'DefaultConsoleLogger' in scope\n228 |     environment: DeploymentEnvironment = .production\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n231 | \n232 |     switch environment {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:245:26: error: cannot find 'MockCryptoConfiguration' in scope\n243 |       case .testing:\n244 |         return await MockCryptoServiceImpl(\n245 |           configuration: MockCryptoConfiguration(\n    |                          `- error: cannot find 'MockCryptoConfiguration' in scope\n246 |             encryptionSucceeds: true,\n247 |             decryptionSucceeds: true,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:254:31: error: missing argument for parameter 'secureStorage' in call\n252 |             retrievalSucceeds: true\n253 |           ),\n254 |           logger: actualLogger\n    |                               `- error: missing argument for parameter 'secureStorage' in call\n255 |         )\n256 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:299:32: error: cannot find 'DefaultConsoleLogger' in scope\n297 |     logger: LoggingProtocol?=nil\n298 |   ) async -\u003e CryptoServiceProtocol {\n299 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n300 | \n301 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:302:46: error: 'await' cannot appear to the right of a non-assignment operator\n300 | \n301 |     // Use the provided secure storage or create a default one\n302 |     let actualSecureStorage=secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                              `- error: 'await' cannot appear to the right of a non-assignment operator\n303 | \n304 |     // Create provider based on the specified type\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:327:42: error: missing argument label 'providerType:' in call\n325 | \n326 |       // Return a basic implementation as fallback\n327 |       return await createWithProviderType(\n    |                                          `- error: missing argument label 'providerType:' in call\n328 |         .basic,\n329 |         secureStorage: actualSecureStorage,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:358:32: error: cannot find 'DefaultConsoleLogger' in scope\n356 |     logger: LoggingProtocol?=nil\n357 |   ) async -\u003e CryptoServiceProtocol {\n358 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n359 | \n360 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:361:46: error: 'await' cannot appear to the right of a non-assignment operator\n359 | \n360 |     // Use the provided secure storage or create a default one\n361 |     let actualSecureStorage=secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                              `- error: 'await' cannot appear to the right of a non-assignment operator\n362 | \n363 |     // Create a crypto service implementation using DefaultCryptoServiceWithProviderImpl\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:386:32: error: cannot find 'DefaultConsoleLogger' in scope\n384 |     logger: LoggingProtocol?=nil\n385 |   ) async -\u003e SecureStorageProtocol {\n386 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n387 |     let url=storageURL ?? URL(fileURLWithPath: NSTemporaryDirectory())\n388 |       .appendingPathComponent(\"CryptoSecureStorage\")\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:393:16: error: extra argument 'baseURL' in call\n391 |     return InMemorySecureStorage(\n392 |       logger: actualLogger,\n393 |       baseURL: url\n    |                `- error: extra argument 'baseURL' in call\n394 |     )\n395 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:421:32: error: cannot find 'DefaultConsoleLogger' in scope\n419 |     logger: LoggingProtocol?=nil\n420 |   ) async -\u003e CryptoServiceProtocol {\n421 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n422 |     return await MockCryptoServiceImpl(configuration: configuration, logger: actualLogger)\n423 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:422:90: error: missing argument for parameter 'secureStorage' in call\n420 |   ) async -\u003e CryptoServiceProtocol {\n421 |     let actualLogger=logger ?? DefaultConsoleLogger()\n422 |     return await MockCryptoServiceImpl(configuration: configuration, logger: actualLogger)\n    |                                                                                          `- error: missing argument for parameter 'secureStorage' in call\n423 |   }\n424 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:440:7: warning: no 'async' operations occur within 'await' expression\n438 |   ) async -\u003e CryptoServiceProtocol {\n439 |     if let secureLogger {\n440 |       await EnhancedLoggingCryptoServiceImpl(\n    |       `- warning: no 'async' operations occur within 'await' expression\n441 |         wrapped: wrapped,\n442 |         logger: secureLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:445:7: warning: no 'async' operations occur within 'await' expression\n443 |       )\n444 |     } else {\n445 |       await LoggingCryptoServiceImpl(\n    |       `- warning: no 'async' operations occur within 'await' expression\n446 |         wrapped: wrapped,\n447 |         logger: logger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:33:14: error: cannot find type 'SecurityProviderOptions' in scope\n31 |     data: [UInt8],\n32 |     keyIdentifier: String?=nil,\n33 |     options: SecurityProviderOptions?=nil\n   |              `- error: cannot find type 'SecurityProviderOptions' in scope\n34 |   ) async -\u003e Result\u003c[UInt8], Error\u003e {\n35 |     // Basic implementation of security operations\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:80:16: error: cannot find type 'SecurityProviderOptions' in scope\n78 | \n79 |   public func generateKey(\n80 |     options _: SecurityProviderOptions\n   |                `- error: cannot find type 'SecurityProviderOptions' in scope\n81 |   ) async -\u003e Result\u003cString, Error\u003e {\n82 |     // In a real implementation, this would generate an actual cryptographic key\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              |- error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n   |              `- note: add stubs for conformance\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:30:8: note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 28 | \n 29 |   /// Access to cryptographic service implementation\n 30 |   func cryptoService() async -\u003e CryptoServiceProtocol\n    |        `- note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 31 | \n 32 |   /// Access to key management service implementation\n 33 |   func keyManager() async -\u003e KeyManagementProtocol\n    |        `- note: protocol requires function 'keyManager()' with type '() async -\u003e any KeyManagementProtocol'\n 34 | \n 35 |   // MARK: - Core Operations\n    :\n 41 |    - Returns: Result containing encrypted data or error\n 42 |    */\n 43 |   func encrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'encrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 44 | \n 45 |   /**\n    :\n 49 |    - Returns: Result containing decrypted data or error\n 50 |    */\n 51 |   func decrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'decrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 52 | \n 53 |   /**\n    :\n 65 |    - Returns: Result containing storage confirmation or error\n 66 |    */\n 67 |   func secureStore(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureStore(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 68 | \n 69 |   /**\n    :\n 73 |    - Returns: Result containing retrieved data or error\n 74 |    */\n 75 |   func secureRetrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureRetrieve(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 76 | \n 77 |   /**\n    :\n 81 |    - Returns: Result containing deletion confirmation or error\n 82 |    */\n 83 |   func secureDelete(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureDelete(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 84 | \n 85 |   /**\n    :\n 89 |    - Returns: Result containing signature data or error\n 90 |    */\n 91 |   func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'sign(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 92 | \n 93 |   /**\n    :\n 97 |    - Returns: Result containing verification status or error\n 98 |    */\n 99 |   func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'verify(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n100 | \n101 |   /**\n    :\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n    :\n121 |    - Returns: A properly configured SecurityConfigDTO\n122 |    */\n123 |   func createSecureConfig(options: SecurityConfigOptions) async -\u003e SecurityConfigDTO\n    |        `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n124 | }\n125 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:37:13: error: type 'SecurityOperation' has no member 'encryption'\n35 |     // Basic implementation of security operations\n36 |     switch operation {\n37 |       case .encryption:\n   |             `- error: type 'SecurityOperation' has no member 'encryption'\n38 |         guard let keyIdentifier else {\n39 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:50:13: error: type 'SecurityOperation' has no member 'decryption'\n48 |         return .success(encryptedData)\n49 | \n50 |       case .decryption:\n   |             `- error: type 'SecurityOperation' has no member 'decryption'\n51 |         guard let keyIdentifier else {\n52 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:59:13: error: type 'SecurityOperation' has no member 'hashing'\n57 |         return .success(data)\n58 | \n59 |       case .hashing:\n   |             `- error: type 'SecurityOperation' has no member 'hashing'\n60 |         // Determine the hash algorithm to use\n61 |         let algorithm=options?.hashAlgorithm ?? .sha256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:39:27: error: module 'UmbraErrors' has no member named 'Security'\n37 |       case .encryption:\n38 |         guard let keyIdentifier else {\n39 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n   |                           `- error: module 'UmbraErrors' has no member named 'Security'\n40 |         }\n41 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:52:27: error: module 'UmbraErrors' has no member named 'Security'\n50 |       case .decryption:\n51 |         guard let keyIdentifier else {\n52 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n   |                           `- error: module 'UmbraErrors' has no member named 'Security'\n53 |         }\n54 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:75:25: error: module 'UmbraErrors' has no member named 'Security'\n73 | \n74 |       default:\n75 |         return .failure(UmbraErrors.Security.Core.unsupportedOperation)\n   |                         `- error: module 'UmbraErrors' has no member named 'Security'\n76 |     }\n77 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 | \n 21 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:17:14: error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  as the baseline implementation when more specialised providers aren't selected.\n 16 |  */\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n 97 |   }\n 98 | \n 99 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n100 |     encryptedDataIdentifier: String,\n101 |     keyIdentifier: String,\n    :\n198 |   }\n199 | \n200 |   public func verifyHash(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n201 |     dataIdentifier: String,\n202 |     hashIdentifier: String,\n    :\n259 |   }\n260 | \n261 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n262 |     length: Int,\n263 |     options: CryptoServiceOptions?=nil\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:53:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n 51 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n 52 | \n 53 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n 54 |       \"Encrypting data with key: \\(keyIdentifier)\",\n 55 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:81:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n 79 |     // Store the encrypted data\n 80 |     let dataIdentifier=\"encrypted_\\(UUID().uuidString)\"\n 81 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n 82 |       data: encryptedData,\n 83 |       identifier: dataIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:95:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n 93 |           source: \"DefaultCryptoService\"\n 94 |         )\n 95 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n 96 |     }\n 97 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:107:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n105 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n106 | \n107 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n108 |       \"Decrypting data with identifier: \\(encryptedDataIdentifier) using key: \\(keyIdentifier)\",\n109 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:114:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n112 | \n113 |     // Retrieve the encrypted data\n114 |     let dataResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n115 |       identifier: encryptedDataIdentifier\n116 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:136:24: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n134 |           return .success(decryptedData)\n135 |         } else {\n136 |           await logger.error(\n    |                        `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n137 |             \"Invalid encrypted data format\",\n138 |             metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:141:44: error: module 'UmbraErrors' has no member named 'Security'\n139 |             source: \"DefaultCryptoService\"\n140 |           )\n141 |           return .failure(.operationFailed(UmbraErrors.Security.Core.invalidData))\n    |                                            `- error: module 'UmbraErrors' has no member named 'Security'\n142 |         }\n143 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:150:26: error: enum case 'keyNotFound' has no associated values\n148 |           source: \"DefaultCryptoService\"\n149 |         )\n150 |         return .failure(.keyNotFound(encryptedDataIdentifier))\n    |                          `- error: enum case 'keyNotFound' has no associated values\n151 |     }\n152 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:162:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n160 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n161 | \n162 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n163 |       \"Generating hash with algorithm: \\(algorithm ?? .sha256)\",\n164 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:171:27: error: switch must be exhaustive\n169 | \n170 |     // For this implementation, we'll create a simple mock hash\n171 |     var hashData: [UInt8]=switch algorithm ?? .sha256 {\n    |                           |- error: switch must be exhaustive\n    |                           `- note: add missing case: '.blake2b'\n172 |       case .sha256:\n173 |         // Generate a mock SHA-256 hash (32 bytes)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:182:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n180 |     // Store the hash\n181 |     let hashIdentifier=\"hash_\\(UUID().uuidString)\"\n182 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n183 |       data: hashData,\n184 |       identifier: hashIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:196:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n194 |           source: \"DefaultCryptoService\"\n195 |         )\n196 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n197 |     }\n198 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:208:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n206 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n207 | \n208 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n209 |       \"Verifying hash for data with identifier: \\(dataIdentifier)\",\n210 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:215:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n213 | \n214 |     // Retrieve the data\n215 |     let dataResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n216 |       identifier: dataIdentifier\n217 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:227:24: error: enum case 'keyNotFound' has no associated values\n225 |         )\n226 |       }\n227 |       return .failure(.keyNotFound(dataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n228 |     }\n229 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:231:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n229 | \n230 |     // Retrieve the expected hash\n231 |     let hashResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n232 |       identifier: hashIdentifier\n233 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:243:24: error: enum case 'keyNotFound' has no associated values\n241 |         )\n242 |       }\n243 |       return .failure(.keyNotFound(hashIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n244 |     }\n245 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:252:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n250 |     let matchesHash=Bool.random()\n251 | \n252 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n253 |       \"Hash verification result: \\(matchesHash)\",\n254 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:268:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n266 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n267 | \n268 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n269 |       \"Generating key with length: \\(length)\",\n270 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:276:20: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n274 |     // Validate key length\n275 |     guard length \u003e= 16 else { // Minimum 128-bit key\n276 |       await logger.error(\n    |                    `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n277 |         \"Key length too short: \\(length) bytes\",\n278 |         metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:281:40: error: module 'UmbraErrors' has no member named 'Security'\n279 |         source: \"DefaultCryptoService\"\n280 |       )\n281 |       return .failure(.operationFailed(UmbraErrors.Security.Core.invalidKeyLength))\n    |                                        `- error: module 'UmbraErrors' has no member named 'Security'\n282 |     }\n283 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:289:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n287 |     // Store the key\n288 |     let keyIdentifier=\"key_\\(UUID().uuidString)\"\n289 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n290 |       data: keyData,\n291 |       identifier: keyIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:303:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n301 |           source: \"DefaultCryptoService\"\n302 |         )\n303 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n304 |     }\n305 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:315:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n313 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n314 | \n315 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n316 |       \"Storing data with identifier: \\(identifier)\",\n317 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:321:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n319 |     )\n320 | \n321 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n322 |       data: data,\n323 |       identifier: identifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:335:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n333 |           source: \"DefaultCryptoService\"\n334 |         )\n335 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n336 |     }\n337 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:346:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n344 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n345 | \n346 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n347 |       \"Retrieving data with identifier: \\(identifier)\",\n348 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:352:44: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n350 |     )\n351 | \n352 |     let retrieveResult=await secureStorage.retrieveSecurely(\n    |                                            `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n353 |       identifier: identifier\n354 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:365:26: error: enum case 'keyNotFound' has no associated values\n363 |           source: \"DefaultCryptoService\"\n364 |         )\n365 |         return .failure(.keyNotFound(identifier))\n    |                          `- error: enum case 'keyNotFound' has no associated values\n366 |     }\n367 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:376:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n374 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n375 | \n376 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n377 |       \"Exporting data with identifier: \\(identifier)\",\n378 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:374:9: warning: initialization of immutable value 'actualOptions' was never used; consider replacing with assignment to '_' or removing it\n372 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n373 |     // Use provided options or convert our factory options to CryptoServiceOptions\n374 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n    |         `- warning: initialization of immutable value 'actualOptions' was never used; consider replacing with assignment to '_' or removing it\n375 | \n376 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:394:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n392 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n393 | \n394 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n395 |       \"Importing data with identifier: \\(identifier)\",\n396 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:400:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n398 |     )\n399 | \n400 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n401 |       data: data,\n402 |       identifier: identifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:414:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n412 |           source: \"DefaultCryptoService\"\n413 |         )\n414 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n415 |     }\n416 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:425:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n423 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n424 | \n425 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n426 |       \"Deleting data with identifier: \\(identifier)\",\n427 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:431:42: error: value of type 'any SecureStorageProtocol' has no member 'deleteSecurely'\n429 |     )\n430 | \n431 |     let deleteResult=await secureStorage.deleteSecurely(\n    |                                          `- error: value of type 'any SecureStorageProtocol' has no member 'deleteSecurely'\n432 |       identifier: identifier\n433 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:445:28: error: enum case 'keyNotFound' has no associated values\n443 |         )\n444 |         if case .keyNotFound=error {\n445 |           return .failure(.keyNotFound(identifier))\n    |                            `- error: enum case 'keyNotFound' has no associated values\n446 |         } else {\n447 |           return .failure(.storageFailure(error))\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:447:28: error: type 'SecurityStorageError' has no member 'storageFailure'\n445 |           return .failure(.keyNotFound(identifier))\n446 |         } else {\n447 |           return .failure(.storageFailure(error))\n    |                            `- error: type 'SecurityStorageError' has no member 'storageFailure'\n448 |         }\n449 |     }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 |   private let logger: LoggingProtocol\n 21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:17:14: error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  CryptoServiceProtocol API.\n 16 |  */\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n102 |   }\n103 | \n104 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n105 |     encryptedDataIdentifier: String,\n106 |     keyIdentifier: String,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:49:29: error: cannot find 'SecurityProviderOptions' in scope\n 47 | \n 48 |     // Prepare operation options\n 49 |     let encryptionOptions = SecurityProviderOptions(\n    |                             `- error: cannot find 'SecurityProviderOptions' in scope\n 50 |       algorithm: .aes256GCM,\n 51 |       mode: .encrypt,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:50:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n 48 |     // Prepare operation options\n 49 |     let encryptionOptions = SecurityProviderOptions(\n 50 |       algorithm: .aes256GCM,\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n 51 |       mode: .encrypt,\n 52 |       keySize: 256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:51:14: error: cannot infer contextual base in reference to member 'encrypt'\n 49 |     let encryptionOptions = SecurityProviderOptions(\n 50 |       algorithm: .aes256GCM,\n 51 |       mode: .encrypt,\n    |              `- error: cannot infer contextual base in reference to member 'encrypt'\n 52 |       keySize: 256\n 53 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:56:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n 54 | \n 55 |     // Delegate to security provider\n 56 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n 57 |       .encryption,\n 58 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:57:8: error: cannot infer contextual base in reference to member 'encryption'\n 55 |     // Delegate to security provider\n 56 |     let result = await provider.performOperation(\n 57 |       .encryption,\n    |        `- error: cannot infer contextual base in reference to member 'encryption'\n 58 |       data: data,\n 59 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:87:30: error: type 'SecurityStorageError' has no member 'storageFailure'\n 85 |               )\n 86 |             )\n 87 |             return .failure(.storageFailure(error))\n    |                              `- error: type 'SecurityStorageError' has no member 'storageFailure'\n 88 |         }\n 89 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:123:24: error: enum case 'keyNotFound' has no associated values\n121 |         )\n122 |       }\n123 |       return .failure(.keyNotFound(encryptedDataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n124 |     }\n125 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:138:29: error: cannot find 'SecurityProviderOptions' in scope\n136 | \n137 |     // Prepare operation options\n138 |     let decryptionOptions = SecurityProviderOptions(\n    |                             `- error: cannot find 'SecurityProviderOptions' in scope\n139 |       algorithm: .aes256GCM,\n140 |       mode: .decrypt,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:139:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n137 |     // Prepare operation options\n138 |     let decryptionOptions = SecurityProviderOptions(\n139 |       algorithm: .aes256GCM,\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n140 |       mode: .decrypt,\n141 |       keySize: 256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:140:14: error: cannot infer contextual base in reference to member 'decrypt'\n138 |     let decryptionOptions = SecurityProviderOptions(\n139 |       algorithm: .aes256GCM,\n140 |       mode: .decrypt,\n    |              `- error: cannot infer contextual base in reference to member 'decrypt'\n141 |       keySize: 256\n142 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:145:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n143 | \n144 |     // Delegate to security provider\n145 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n146 |       .decryption,\n147 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:146:8: error: cannot infer contextual base in reference to member 'decryption'\n144 |     // Delegate to security provider\n145 |     let result = await provider.performOperation(\n146 |       .decryption,\n    |        `- error: cannot infer contextual base in reference to member 'decryption'\n147 |       data: data,\n148 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:186:28: error: cannot find type 'HashingAlgorithm' in scope\n184 | \n185 |     // Map hash algorithm to security provider algorithm\n186 |     let providerAlgorithm: HashingAlgorithm = switch algorithm {\n    |                            `- error: cannot find type 'HashingAlgorithm' in scope\n187 |       case .sha256:\n188 |         .sha256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:194:23: error: cannot find 'SecurityProviderOptions' in scope\n192 | \n193 |     // Prepare operation options\n194 |     let hashOptions = SecurityProviderOptions(\n    |                       `- error: cannot find 'SecurityProviderOptions' in scope\n195 |       hashAlgorithm: providerAlgorithm\n196 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:199:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n197 | \n198 |     // Delegate to security provider\n199 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n200 |       .hashing,\n201 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:200:8: error: cannot infer contextual base in reference to member 'hashing'\n198 |     // Delegate to security provider\n199 |     let result = await provider.performOperation(\n200 |       .hashing,\n    |        `- error: cannot infer contextual base in reference to member 'hashing'\n201 |       data: data,\n202 |       options: hashOptions\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:229:30: error: type 'SecurityStorageError' has no member 'storageFailure'\n227 |               )\n228 |             )\n229 |             return .failure(.storageFailure(error))\n    |                              `- error: type 'SecurityStorageError' has no member 'storageFailure'\n230 |         }\n231 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:264:24: error: enum case 'keyNotFound' has no associated values\n262 |         )\n263 |       }\n264 |       return .failure(.keyNotFound(dataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n265 |     }\n266 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:281:24: error: enum case 'keyNotFound' has no associated values\n279 |         )\n280 |       }\n281 |       return .failure(.keyNotFound(expectedHashIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n282 |     }\n283 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:296:33: error: value of type 'any SecurityProviderProtocol' has no member 'verifyHash'\n294 | \n295 |     // Delegate to security provider\n296 |     let result = await provider.verifyHash(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'verifyHash'\n297 |       data: data,\n298 |       expectedHash: expectedHash\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:329:22: error: cannot find 'SecurityKeyOptions' in scope\n327 |     \n328 |     // Prepare key generation options\n329 |     let keyOptions = SecurityKeyOptions(\n    |                      `- error: cannot find 'SecurityKeyOptions' in scope\n330 |       keySize: length * 8,\n331 |       algorithm: .aes256GCM\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:331:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n329 |     let keyOptions = SecurityKeyOptions(\n330 |       keySize: length * 8,\n331 |       algorithm: .aes256GCM\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n332 |     )\n333 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:8:15: error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n 6 |  Enhanced log context for crypto operations with privacy controls\n 7 |  */\n 8 | public struct EnhancedLogContext: LogContextDTO {\n   |               |- error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n   |               `- note: add stubs for conformance\n 9 |   /// Domain name for the log context\n10 |   public let domainName: String\n   :\n14 |   \n15 |   /// Additional context metadata as key-value pairs\n16 |   public let metadata: [String: String]\n   |              `- note: candidate has non-matching type '[String : String]'\n17 |   \n18 |   /// Privacy level for each metadata field\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:13:7: note: protocol requires property 'source' with type 'String?'\n11 | \n12 |   /// Optional source information (class, file, etc.)\n13 |   var source: String? { get }\n   |       `- note: protocol requires property 'source' with type 'String?'\n14 | \n15 |   /// Optional correlation ID for tracing related log events\n16 |   var correlationID: String? { get }\n   |       `- note: protocol requires property 'correlationID' with type 'String?'\n17 | \n18 |   /// The metadata collection for this context\n19 |   var metadata: LogMetadataDTOCollection { get }\n   |       `- note: protocol requires property 'metadata' with type 'LogMetadataDTOCollection'\n20 | }\n21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:63:7: error: switch must be exhaustive\n61 |       let privacy = privacyLevel(for: key)\n62 |       \n63 |       switch privacy {\n   |       |- error: switch must be exhaustive\n   |       `- note: add missing case: '.hash'\n64 |       case .private:\n65 |         _ = collection.withPrivate(key: key, value: value)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:16:14: error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 14 |  logging with proper privacy tags for sensitive data.\n 15 |  */\n 16 | public actor EnhancedLoggingCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 17 |   /// The wrapped implementation\n 18 |   private let wrapped: CryptoServiceProtocol\n    :\n 81 |   }\n 82 | \n 83 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 84 |     encryptedDataIdentifier: String,\n 85 |     keyIdentifier: String,\n    :\n215 |   }\n216 | \n217 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n218 |     length: Int,\n219 |     options: KeyGenerationOptions?=nil\n    :\n258 |   }\n259 | \n260 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n261 |     data: [UInt8],\n262 |     identifier: String\n    :\n300 |   }\n301 | \n302 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n303 |     identifier: String\n304 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n    :\n421 |   }\n422 | \n423 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n424 |     identifier: String\n425 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:58:37: error: incorrect argument label in call (have 'data:keyIdentifier:options:', expected 'dataIdentifier:keyIdentifier:options:')\n 56 | \n 57 |     // Perform the operation\n 58 |     let result=await wrapped.encrypt(\n    |                                     `- error: incorrect argument label in call (have 'data:keyIdentifier:options:', expected 'dataIdentifier:keyIdentifier:options:')\n 59 |       data: data,\n 60 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:59:13: error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n 57 |     // Perform the operation\n 58 |     let result=await wrapped.encrypt(\n 59 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n 60 |       keyIdentifier: keyIdentifier,\n 61 |       options: options\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:61:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'EncryptionOptions?'\n 59 |       data: data,\n 60 |       keyIdentifier: keyIdentifier,\n 61 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'EncryptionOptions?'\n 62 |     )\n 63 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:67:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 65 |     switch result {\n 66 |       case let .success(identifier):\n 67 |         context.updateMetadata([\"dataIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 68 |         await logger.debug(\n 69 |           \"Encryption successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:67:52: error: type 'Any' has no member 'private'\n 65 |     switch result {\n 66 |       case let .success(identifier):\n 67 |         context.updateMetadata([\"dataIdentifier\": .private(identifier)])\n    |                                                    `- error: type 'Any' has no member 'private'\n 68 |         await logger.debug(\n 69 |           \"Encryption successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:73:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 71 |         )\n 72 |       case let .failure(error):\n 73 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 74 |         await logger.error(\n 75 |           \"Encryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:73:43: error: type 'Any' has no member 'hash'\n 71 |         )\n 72 |       case let .failure(error):\n 73 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n 74 |         await logger.error(\n 75 |           \"Encryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:107:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'DecryptionOptions?'\n105 |       encryptedDataIdentifier: encryptedDataIdentifier,\n106 |       keyIdentifier: keyIdentifier,\n107 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'DecryptionOptions?'\n108 |     )\n109 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:118:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n116 |         )\n117 |       case let .failure(error):\n118 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n119 |         await logger.error(\n120 |           \"Decryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:118:43: error: type 'Any' has no member 'hash'\n116 |         )\n117 |       case let .failure(error):\n118 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n119 |         await logger.error(\n120 |           \"Decryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:147:42: error: incorrect argument labels in call (have 'data:algorithm:', expected 'dataIdentifier:options:')\n145 | \n146 |     // Perform the operation\n147 |     let result=await wrapped.generateHash(\n    |                                          `- error: incorrect argument labels in call (have 'data:algorithm:', expected 'dataIdentifier:options:')\n148 |       data: data,\n149 |       algorithm: algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:148:13: error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n146 |     // Perform the operation\n147 |     let result=await wrapped.generateHash(\n148 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n149 |       algorithm: algorithm\n150 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:149:18: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n147 |     let result=await wrapped.generateHash(\n148 |       data: data,\n149 |       algorithm: algorithm\n    |                  `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n150 |     )\n151 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:155:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n153 |     switch result {\n154 |       case let .success(identifier):\n155 |         context.updateMetadata([\"hashIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n156 |         await logger.debug(\n157 |           \"Hash generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:155:52: error: type 'Any' has no member 'private'\n153 |     switch result {\n154 |       case let .success(identifier):\n155 |         context.updateMetadata([\"hashIdentifier\": .private(identifier)])\n    |                                                    `- error: type 'Any' has no member 'private'\n156 |         await logger.debug(\n157 |           \"Hash generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:161:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n159 |         )\n160 |       case let .failure(error):\n161 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n162 |         await logger.error(\n163 |           \"Hash generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:161:43: error: type 'Any' has no member 'hash'\n159 |         )\n160 |       case let .failure(error):\n161 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n162 |         await logger.error(\n163 |           \"Hash generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:195:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'HashingOptions?'\n193 |       dataIdentifier: dataIdentifier,\n194 |       hashIdentifier: expectedHashIdentifier,\n195 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'HashingOptions?'\n196 |     )\n197 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:201:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n199 |     switch result {\n200 |       case let .success(matches):\n201 |         context.updateMetadata([\"matches\": .public(String(describing: matches))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n202 |         await logger.debug(\n203 |           \"Hash verification completed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:201:45: error: type 'Any' has no member 'public'\n199 |     switch result {\n200 |       case let .success(matches):\n201 |         context.updateMetadata([\"matches\": .public(String(describing: matches))])\n    |                                             `- error: type 'Any' has no member 'public'\n202 |         await logger.debug(\n203 |           \"Hash verification completed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:207:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n205 |         )\n206 |       case let .failure(error):\n207 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n208 |         await logger.error(\n209 |           \"Hash verification failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:207:43: error: type 'Any' has no member 'hash'\n205 |         )\n206 |       case let .failure(error):\n207 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n208 |         await logger.error(\n209 |           \"Hash verification failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:238:16: error: cannot convert value of type 'CryptoServices.KeyGenerationOptions?' to expected argument type 'SecurityCoreInterfaces.KeyGenerationOptions?'\n236 |     let result=await wrapped.generateKey(\n237 |       length: length,\n238 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServices.KeyGenerationOptions?' to expected argument type 'SecurityCoreInterfaces.KeyGenerationOptions?'\n239 |     )\n240 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:244:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n242 |     switch result {\n243 |       case let .success(identifier):\n244 |         context.updateMetadata([\"keyIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n245 |         await logger.debug(\n246 |           \"Key generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:244:51: error: type 'Any' has no member 'private'\n242 |     switch result {\n243 |       case let .success(identifier):\n244 |         context.updateMetadata([\"keyIdentifier\": .private(identifier)])\n    |                                                   `- error: type 'Any' has no member 'private'\n245 |         await logger.debug(\n246 |           \"Key generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:250:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n248 |         )\n249 |       case let .failure(error):\n250 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n251 |         await logger.error(\n252 |           \"Key generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:250:43: error: type 'Any' has no member 'hash'\n248 |         )\n249 |       case let .failure(error):\n250 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n251 |         await logger.error(\n252 |           \"Key generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:280:13: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n278 |     // Perform the operation\n279 |     let result=await wrapped.storeData(\n280 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n281 |       identifier: identifier\n282 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:292:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n290 |         )\n291 |       case let .failure(error):\n292 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n293 |         await logger.error(\n294 |           \"Data storage failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:292:43: error: type 'Any' has no member 'hash'\n290 |         )\n291 |       case let .failure(error):\n292 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n293 |         await logger.error(\n294 |           \"Data storage failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:332:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n330 |         )\n331 |       case let .failure(error):\n332 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n333 |         await logger.error(\n334 |           \"Data retrieval failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:332:43: error: type 'Any' has no member 'hash'\n330 |         )\n331 |       case let .failure(error):\n332 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n333 |         await logger.error(\n334 |           \"Data retrieval failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:339:12: error: cannot convert return expression of type 'Result\u003cData, SecurityStorageError\u003e' to return type 'Result\u003c[UInt8], SecurityStorageError\u003e'\n337 |     }\n338 | \n339 |     return result\n    |            |- error: cannot convert return expression of type 'Result\u003cData, SecurityStorageError\u003e' to return type 'Result\u003c[UInt8], SecurityStorageError\u003e'\n    |            `- note: arguments to generic parameter 'Success' ('Data' and '[UInt8]') are expected to be equal\n340 |   }\n341 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:372:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n370 |         )\n371 |       case let .failure(error):\n372 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n373 |         await logger.error(\n374 |           \"Data export failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:372:43: error: type 'Any' has no member 'hash'\n370 |         )\n371 |       case let .failure(error):\n372 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n373 |         await logger.error(\n374 |           \"Data export failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:407:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n405 |     switch result {\n406 |       case let .success(resultIdentifier):\n407 |         context.updateMetadata([\"resultIdentifier\": .private(resultIdentifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n408 |         await logger.debug(\n409 |           \"Data import successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:407:54: error: type 'Any' has no member 'private'\n405 |     switch result {\n406 |       case let .success(resultIdentifier):\n407 |         context.updateMetadata([\"resultIdentifier\": .private(resultIdentifier)])\n    |                                                      `- error: type 'Any' has no member 'private'\n408 |         await logger.debug(\n409 |           \"Data import successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:413:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n411 |         )\n412 |       case let .failure(error):\n413 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n414 |         await logger.error(\n415 |           \"Data import failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:413:43: error: type 'Any' has no member 'hash'\n411 |         )\n412 |       case let .failure(error):\n413 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n414 |         await logger.error(\n415 |           \"Data import failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:453:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n451 |         )\n452 |       case let .failure(error):\n453 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n454 |         await logger.error(\n455 |           \"Data deletion failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:453:43: error: type 'Any' has no member 'hash'\n451 |         )\n452 |       case let .failure(error):\n453 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n454 |         await logger.error(\n455 |           \"Data deletion failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:460:12: error: cannot convert return expression of type 'Result\u003cVoid, SecurityStorageError\u003e' to return type 'Result\u003cBool, SecurityStorageError\u003e'\n458 |     }\n459 | \n460 |     return result\n    |            |- error: cannot convert return expression of type 'Result\u003cVoid, SecurityStorageError\u003e' to return type 'Result\u003cBool, SecurityStorageError\u003e'\n    |            `- note: arguments to generic parameter 'Success' ('Void' and 'Bool') are expected to be equal\n461 |   }\n462 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:477:35: error: extra arguments at positions #2, #3 in call\n475 |     identifiers: [String: PrivacyLevel]\n476 |   ) -\u003e EnhancedLogContext {\n477 |     var context=EnhancedLogContext(\n    |                                   `- error: extra arguments at positions #2, #3 in call\n478 |       domainName: \"CryptoServices\",\n479 |       source: \"CryptoServiceFactory\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:30:10: note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n28 |      - privacyLevels: Privacy levels for each metadata field\n29 |    */\n30 |   public init(\n   |          `- note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n31 |     domainName: String,\n32 |     operationName: String,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:478:35: error: missing argument for parameter 'operationName' in call\n476 |   ) -\u003e EnhancedLogContext {\n477 |     var context=EnhancedLogContext(\n478 |       domainName: \"CryptoServices\",\n    |                                   `- error: missing argument for parameter 'operationName' in call\n479 |       source: \"CryptoServiceFactory\",\n480 |       correlationID: nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:30:10: note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n28 |      - privacyLevels: Privacy levels for each metadata field\n29 |    */\n30 |   public init(\n   |          `- note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n31 |     domainName: String,\n32 |     operationName: String,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:480:22: error: 'nil' requires a contextual type\n478 |       domainName: \"CryptoServices\",\n479 |       source: \"CryptoServiceFactory\",\n480 |       correlationID: nil\n    |                      `- error: 'nil' requires a contextual type\n481 |     )\n482 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:47:30: error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n 47 |     rateLimiter: RateLimiter=RateLimiter()\n    |                              `- error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 48 |   ) {\n 49 |     self.wrapped = wrapped\n    :\n443 |  Simple rate limiter for security operations.\n444 |  */\n445 | public class RateLimiter {\n    |              `- note: initializer 'init()' is not '@usableFromInline' or public\n446 |   public enum Operation: String {\n447 |     case encrypt, decrypt, hash, verify, export, generateKey\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:384:15: error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n382 |    - Returns: The exported data or error\n383 |    */\n384 |   public func exportData(\n    |               `- error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n385 |     withIdentifier identifier: String\n386 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:81:8: note: requirement 'exportData(identifier:)' declared here\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: requirement 'exportData(identifier:)' declared here\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:20:14: error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 18 |  validation of cryptographic operations.\n 19 |  */\n 20 | public actor EnhancedSecureCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 21 | \n 22 |   /// The wrapped implementation that does the actual cryptographic work\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:412:36: error: incorrect argument label in call (have 'withIdentifier:', expected 'identifier:')\n410 | \n411 |     // Use the wrapped implementation to perform the export\n412 |     return await wrapped.exportData(withIdentifier: identifier)\n    |                                    `- error: incorrect argument label in call (have 'withIdentifier:', expected 'identifier:')\n413 |   }\n414 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:438:38: error: missing argument for parameter 'length' in call\n436 | \n437 |     // Use the wrapped implementation to generate the key\n438 |     return await wrapped.generateKey(options: options)\n    |                                      `- error: missing argument for parameter 'length' in call\n439 |   }\n440 | }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: 'generateKey(length:options:)' declared here\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: 'generateKey(length:options:)' declared here\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/LoggingCryptoServiceImpl.swift:9:14: error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n  7 |  all operations before delegating to the wrapped implementation.\n  8 |  */\n  9 | public actor LoggingCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 10 |   /// The wrapped implementation\n 11 |   private let wrapped: CryptoServiceProtocol\n    :\n339 |    - Returns: Identifier for the imported data or an error\n340 |    */\n341 |   public func importData(\n    |               `- note: candidate has non-matching type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n342 |     _ data: [UInt8],\n343 |     customIdentifier: String?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:93:8: note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:47:31: error: cannot find type 'CryptoProviderProtocol' in scope\n  45 |   \n  46 |   /// Crypto provider for cryptographic operations\n  47 |   private let cryptoProvider: CryptoProviderProtocol\n     |                               `- error: cannot find type 'CryptoProviderProtocol' in scope\n  48 |   \n  49 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:64:21: error: cannot find type 'CryptoProviderProtocol' in scope\n  62 |     wrapped: CryptoServiceProtocol,\n  63 |     secureStorage: SecureStorageProtocol,\n  64 |     cryptoProvider: CryptoProviderProtocol,\n     |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n  65 |     logger: LoggingProtocol\n  66 |   ) {\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoStorage.swift:417:33: error: cannot find 'getSecureStorage' in scope\n415 |     // Currently we just attempt to retrieve the data and check if it exists\n416 |     // This could be optimized in a real implementation to avoid loading the data\n417 |     let secureStore = try await getSecureStorage()\n    |                                 `- error: cannot find 'getSecureStorage' in scope\n418 |     return secureStore.hasKey(identifier)\n419 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n264 |    - Returns: Result containing array of identifiers or error details\n265 |    */\n266 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n267 |     await logger.warning(\n268 |       \"List data identifiers operation not supported\",\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecureStorageProtocol.swift:14:8: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n12 |   ///   - identifier: A string identifier for the stored data.\n13 |   /// - Returns: Success or an error.\n14 |   func storeData(_ data: [UInt8], withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n15 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n16 | \n   :\n18 |   /// - Parameter identifier: A string identifying the data to retrieve.\n19 |   /// - Returns: The retrieved data as a byte array or an error.\n20 |   func retrieveData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n21 |     -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n22 | \n   :\n24 |   /// - Parameter identifier: A string identifying the data to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n27 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n28 | \n29 |   /// Lists all available data identifiers.\n30 |   /// - Returns: An array of data identifiers or an error.\n31 |   func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityStorageError\u003e\n   |        `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n32 | }\n33 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:158:63: error: type '_ErrorCodeProtocol' has no member 'notFound'\n156 |       )\n157 |       \n158 |       if let storageError = error as? StorageCoreError, case .notFound = storageError {\n    |                                                               `- error: type '_ErrorCodeProtocol' has no member 'notFound'\n159 |         return .failure(.dataNotFound)\n160 |       }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:162:61: error: cannot convert value of type 'SecurityCoreInterfaces.KeyType' to expected argument type 'CryptoServices.KeyType'\n160 |     var configOptions=SecurityConfigOptions()\n161 | \n162 |     let metadataDict=addMetadata(keySize: keySize, keyType: keyType)\n    |                                                             `- error: cannot convert value of type 'SecurityCoreInterfaces.KeyType' to expected argument type 'CryptoServices.KeyType'\n163 | \n164 |     if !metadataDict.isEmpty {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:196:13: error: type 'KeyType' has no member 'symmetric'\n194 |     let localKeyType: KeyType\n195 |     switch keyType {\n196 |       case .symmetric:\n    |             `- error: type 'KeyType' has no member 'symmetric'\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:198:13: error: type 'KeyType' has no member 'asymmetric'\n196 |       case .symmetric:\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n    |             `- error: type 'KeyType' has no member 'asymmetric'\n199 |         localKeyType = .asymmetric\n200 |       default:\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:197:25: error: type 'KeyType' has no member 'symmetric'\n195 |     switch keyType {\n196 |       case .symmetric:\n197 |         localKeyType = .symmetric\n    |                         `- error: type 'KeyType' has no member 'symmetric'\n198 |       case .asymmetric:\n199 |         localKeyType = .asymmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:199:25: error: type 'KeyType' has no member 'asymmetric'\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n199 |         localKeyType = .asymmetric\n    |                         `- error: type 'KeyType' has no member 'asymmetric'\n200 |       default:\n201 |         localKeyType = .symmetric // Default to symmetric as fallback\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:25: error: type 'KeyType' has no member 'symmetric'\n199 |         localKeyType = .asymmetric\n200 |       default:\n201 |         localKeyType = .symmetric // Default to symmetric as fallback\n    |                         `- error: type 'KeyType' has no member 'symmetric'\n202 |     }\n203 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/OptionTypes.swift:109:14: warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n107 | public struct SendableOptionsDictionary: Sendable {\n108 |   /// The underlying dictionary\n109 |   public let dictionary: [String: Any]\n    |              `- warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n110 |   \n111 |   /**\nTarget //packages/UmbraImplementations/Sources/CoreServices:CoreServices failed to build\nINFO: Elapsed time: 1.163s, Critical Path: 1.00s\nINFO: 2 processes: 4 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices",
    "success": false,
    "start_time": "2025-04-06T11:27:09.827469+01:00",
    "end_time": "2025-04-06T11:27:11.532887+01:00",
    "duration": "1.705424833s",
    "output": "INFO: Invocation ID: 81814571-55ac-4600-bd00-58f19c35bd00\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:14: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.4.1-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:55:8: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 53 |   private static func convert(\n 54 |     _ algorithm: SecurityCoreInterfaces\n 55 |       .EncryptionAlgorithm\n    |        `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 56 |   ) -\u003e EncryptionAlgorithm {\n 57 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:69:4: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 67 | \n 68 |   private static func convertToInterface(_ algorithm: EncryptionAlgorithm) -\u003e SecurityCoreInterfaces\n 69 |   .EncryptionAlgorithm {\n    |    `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 70 |     switch algorithm {\n 71 |       case .aes:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:81:62: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 79 | \n 80 |   // Helper methods for mode conversion\n 81 |   private static func convert(_ mode: SecurityCoreInterfaces.EncryptionMode) -\u003e EncryptionMode {\n    |                                                              `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 82 |     switch mode {\n 83 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:94:4: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 92 | \n 93 |   private static func convertToInterface(_ mode: EncryptionMode) -\u003e SecurityCoreInterfaces\n 94 |   .EncryptionMode {\n    |    `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 95 |     switch mode {\n 96 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:109:8: error: cannot find type 'EncryptionPadding' in scope\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n109 |   ) -\u003e EncryptionPadding {\n    |        `- error: cannot find type 'EncryptionPadding' in scope\n110 |     switch padding {\n111 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:108:8: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n106 |   private static func convert(\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n    |        `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n109 |   ) -\u003e EncryptionPadding {\n110 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:122:4: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n122 |   .EncryptionPadding {\n    |    `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n123 |     switch padding {\n124 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:121:53: error: cannot find type 'EncryptionPadding' in scope\n119 |   }\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n    |                                                     `- error: cannot find type 'EncryptionPadding' in scope\n122 |   .EncryptionPadding {\n123 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:147:8: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n145 |     _ options: SecurityCoreInterfaces\n146 |       .DecryptionOptions?\n147 |   ) -\u003e DecryptionOptions? {\n    |        `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n148 |     guard let options else { return nil }\n149 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:164:52: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n162 |    - Returns: The converted options or nil if input was nil\n163 |    */\n164 |   public static func convertToInterface(_ options: DecryptionOptions?) -\u003e SecurityCoreInterfaces\n    |                                                    `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n165 |   .DecryptionOptions? {\n166 |     guard let options else { return nil }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:216:8: error: cannot find type 'HashingAlgorithm' in scope\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n216 |   ) -\u003e HashingAlgorithm {\n    |        `- error: cannot find type 'HashingAlgorithm' in scope\n217 |     switch algorithm {\n218 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:215:8: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n213 |   private static func convert(\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n    |        `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n216 |   ) -\u003e HashingAlgorithm {\n217 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:231:4: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n231 |   .HashingAlgorithm {\n    |    `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n232 |     switch algorithm {\n233 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:230:55: error: cannot find type 'HashingAlgorithm' in scope\n228 |   }\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n    |                                                       `- error: cannot find type 'HashingAlgorithm' in scope\n231 |   .HashingAlgorithm {\n232 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:228:18: error: cannot find type 'DeploymentEnvironment' in scope\n226 |     secureStorage: SecureStorageProtocol?=nil,\n227 |     logger: LoggingProtocol?=nil,\n228 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:33:14: error: cannot find type 'SecurityProviderOptions' in scope\n31 |     data: [UInt8],\n32 |     keyIdentifier: String?=nil,\n33 |     options: SecurityProviderOptions?=nil\n   |              `- error: cannot find type 'SecurityProviderOptions' in scope\n34 |   ) async -\u003e Result\u003c[UInt8], Error\u003e {\n35 |     // Basic implementation of security operations\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:80:16: error: cannot find type 'SecurityProviderOptions' in scope\n78 | \n79 |   public func generateKey(\n80 |     options _: SecurityProviderOptions\n   |                `- error: cannot find type 'SecurityProviderOptions' in scope\n81 |   ) async -\u003e Result\u003cString, Error\u003e {\n82 |     // In a real implementation, this would generate an actual cryptographic key\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              |- error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n   |              `- note: add stubs for conformance\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:30:8: note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 28 | \n 29 |   /// Access to cryptographic service implementation\n 30 |   func cryptoService() async -\u003e CryptoServiceProtocol\n    |        `- note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 31 | \n 32 |   /// Access to key management service implementation\n 33 |   func keyManager() async -\u003e KeyManagementProtocol\n    |        `- note: protocol requires function 'keyManager()' with type '() async -\u003e any KeyManagementProtocol'\n 34 | \n 35 |   // MARK: - Core Operations\n    :\n 41 |    - Returns: Result containing encrypted data or error\n 42 |    */\n 43 |   func encrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'encrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 44 | \n 45 |   /**\n    :\n 49 |    - Returns: Result containing decrypted data or error\n 50 |    */\n 51 |   func decrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'decrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 52 | \n 53 |   /**\n    :\n 65 |    - Returns: Result containing storage confirmation or error\n 66 |    */\n 67 |   func secureStore(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureStore(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 68 | \n 69 |   /**\n    :\n 73 |    - Returns: Result containing retrieved data or error\n 74 |    */\n 75 |   func secureRetrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureRetrieve(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 76 | \n 77 |   /**\n    :\n 81 |    - Returns: Result containing deletion confirmation or error\n 82 |    */\n 83 |   func secureDelete(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureDelete(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 84 | \n 85 |   /**\n    :\n 89 |    - Returns: Result containing signature data or error\n 90 |    */\n 91 |   func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'sign(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 92 | \n 93 |   /**\n    :\n 97 |    - Returns: Result containing verification status or error\n 98 |    */\n 99 |   func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'verify(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n100 | \n101 |   /**\n    :\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n    :\n121 |    - Returns: A properly configured SecurityConfigDTO\n122 |    */\n123 |   func createSecureConfig(options: SecurityConfigOptions) async -\u003e SecurityConfigDTO\n    |        `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n124 | }\n125 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 | \n 21 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:17:14: error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  as the baseline implementation when more specialised providers aren't selected.\n 16 |  */\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n 97 |   }\n 98 | \n 99 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n100 |     encryptedDataIdentifier: String,\n101 |     keyIdentifier: String,\n    :\n198 |   }\n199 | \n200 |   public func verifyHash(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n201 |     dataIdentifier: String,\n202 |     hashIdentifier: String,\n    :\n259 |   }\n260 | \n261 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n262 |     length: Int,\n263 |     options: CryptoServiceOptions?=nil\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 |   private let logger: LoggingProtocol\n 21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:17:14: error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  CryptoServiceProtocol API.\n 16 |  */\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n102 |   }\n103 | \n104 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n105 |     encryptedDataIdentifier: String,\n106 |     keyIdentifier: String,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:8:15: error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n 6 |  Enhanced log context for crypto operations with privacy controls\n 7 |  */\n 8 | public struct EnhancedLogContext: LogContextDTO {\n   |               |- error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n   |               `- note: add stubs for conformance\n 9 |   /// Domain name for the log context\n10 |   public let domainName: String\n   :\n14 |   \n15 |   /// Additional context metadata as key-value pairs\n16 |   public let metadata: [String: String]\n   |              `- note: candidate has non-matching type '[String : String]'\n17 |   \n18 |   /// Privacy level for each metadata field\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:13:7: note: protocol requires property 'source' with type 'String?'\n11 | \n12 |   /// Optional source information (class, file, etc.)\n13 |   var source: String? { get }\n   |       `- note: protocol requires property 'source' with type 'String?'\n14 | \n15 |   /// Optional correlation ID for tracing related log events\n16 |   var correlationID: String? { get }\n   |       `- note: protocol requires property 'correlationID' with type 'String?'\n17 | \n18 |   /// The metadata collection for this context\n19 |   var metadata: LogMetadataDTOCollection { get }\n   |       `- note: protocol requires property 'metadata' with type 'LogMetadataDTOCollection'\n20 | }\n21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:16:14: error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 14 |  logging with proper privacy tags for sensitive data.\n 15 |  */\n 16 | public actor EnhancedLoggingCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 17 |   /// The wrapped implementation\n 18 |   private let wrapped: CryptoServiceProtocol\n    :\n 81 |   }\n 82 | \n 83 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 84 |     encryptedDataIdentifier: String,\n 85 |     keyIdentifier: String,\n    :\n215 |   }\n216 | \n217 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n218 |     length: Int,\n219 |     options: KeyGenerationOptions?=nil\n    :\n258 |   }\n259 | \n260 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n261 |     data: [UInt8],\n262 |     identifier: String\n    :\n300 |   }\n301 | \n302 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n303 |     identifier: String\n304 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n    :\n421 |   }\n422 | \n423 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n424 |     identifier: String\n425 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:47:30: error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n 47 |     rateLimiter: RateLimiter=RateLimiter()\n    |                              `- error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 48 |   ) {\n 49 |     self.wrapped = wrapped\n    :\n443 |  Simple rate limiter for security operations.\n444 |  */\n445 | public class RateLimiter {\n    |              `- note: initializer 'init()' is not '@usableFromInline' or public\n446 |   public enum Operation: String {\n447 |     case encrypt, decrypt, hash, verify, export, generateKey\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:384:15: error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n382 |    - Returns: The exported data or error\n383 |    */\n384 |   public func exportData(\n    |               `- error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n385 |     withIdentifier identifier: String\n386 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:81:8: note: requirement 'exportData(identifier:)' declared here\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: requirement 'exportData(identifier:)' declared here\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:20:14: error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 18 |  validation of cryptographic operations.\n 19 |  */\n 20 | public actor EnhancedSecureCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 21 | \n 22 |   /// The wrapped implementation that does the actual cryptographic work\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/LoggingCryptoServiceImpl.swift:9:14: error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n  7 |  all operations before delegating to the wrapped implementation.\n  8 |  */\n  9 | public actor LoggingCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 10 |   /// The wrapped implementation\n 11 |   private let wrapped: CryptoServiceProtocol\n    :\n339 |    - Returns: Identifier for the imported data or an error\n340 |    */\n341 |   public func importData(\n    |               `- note: candidate has non-matching type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n342 |     _ data: [UInt8],\n343 |     customIdentifier: String?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:93:8: note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:47:31: error: cannot find type 'CryptoProviderProtocol' in scope\n  45 |   \n  46 |   /// Crypto provider for cryptographic operations\n  47 |   private let cryptoProvider: CryptoProviderProtocol\n     |                               `- error: cannot find type 'CryptoProviderProtocol' in scope\n  48 |   \n  49 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:64:21: error: cannot find type 'CryptoProviderProtocol' in scope\n  62 |     wrapped: CryptoServiceProtocol,\n  63 |     secureStorage: SecureStorageProtocol,\n  64 |     cryptoProvider: CryptoProviderProtocol,\n     |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n  65 |     logger: LoggingProtocol\n  66 |   ) {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n264 |    - Returns: Result containing array of identifiers or error details\n265 |    */\n266 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n267 |     await logger.warning(\n268 |       \"List data identifiers operation not supported\",\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecureStorageProtocol.swift:14:8: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n12 |   ///   - identifier: A string identifier for the stored data.\n13 |   /// - Returns: Success or an error.\n14 |   func storeData(_ data: [UInt8], withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n15 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n16 | \n   :\n18 |   /// - Parameter identifier: A string identifying the data to retrieve.\n19 |   /// - Returns: The retrieved data as a byte array or an error.\n20 |   func retrieveData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n21 |     -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n22 | \n   :\n24 |   /// - Parameter identifier: A string identifying the data to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n27 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n28 | \n29 |   /// Lists all available data identifiers.\n30 |   /// - Returns: An array of data identifiers or an error.\n31 |   func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityStorageError\u003e\n   |        `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n32 | }\n33 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/OptionTypes.swift:109:14: warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n107 | public struct SendableOptionsDictionary: Sendable {\n108 |   /// The underlying dictionary\n109 |   public let dictionary: [String: Any]\n    |              `- warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n110 |   \n111 |   /**\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:55:8: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 53 |   private static func convert(\n 54 |     _ algorithm: SecurityCoreInterfaces\n 55 |       .EncryptionAlgorithm\n    |        `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 56 |   ) -\u003e EncryptionAlgorithm {\n 57 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:69:4: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 67 | \n 68 |   private static func convertToInterface(_ algorithm: EncryptionAlgorithm) -\u003e SecurityCoreInterfaces\n 69 |   .EncryptionAlgorithm {\n    |    `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 70 |     switch algorithm {\n 71 |       case .aes:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:81:62: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 79 | \n 80 |   // Helper methods for mode conversion\n 81 |   private static func convert(_ mode: SecurityCoreInterfaces.EncryptionMode) -\u003e EncryptionMode {\n    |                                                              `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 82 |     switch mode {\n 83 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:94:4: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 92 | \n 93 |   private static func convertToInterface(_ mode: EncryptionMode) -\u003e SecurityCoreInterfaces\n 94 |   .EncryptionMode {\n    |    `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 95 |     switch mode {\n 96 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:109:8: error: cannot find type 'EncryptionPadding' in scope\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n109 |   ) -\u003e EncryptionPadding {\n    |        `- error: cannot find type 'EncryptionPadding' in scope\n110 |     switch padding {\n111 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:108:8: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n106 |   private static func convert(\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n    |        `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n109 |   ) -\u003e EncryptionPadding {\n110 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:122:4: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n122 |   .EncryptionPadding {\n    |    `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n123 |     switch padding {\n124 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:121:53: error: cannot find type 'EncryptionPadding' in scope\n119 |   }\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n    |                                                     `- error: cannot find type 'EncryptionPadding' in scope\n122 |   .EncryptionPadding {\n123 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:147:8: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n145 |     _ options: SecurityCoreInterfaces\n146 |       .DecryptionOptions?\n147 |   ) -\u003e DecryptionOptions? {\n    |        `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n148 |     guard let options else { return nil }\n149 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:164:52: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n162 |    - Returns: The converted options or nil if input was nil\n163 |    */\n164 |   public static func convertToInterface(_ options: DecryptionOptions?) -\u003e SecurityCoreInterfaces\n    |                                                    `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n165 |   .DecryptionOptions? {\n166 |     guard let options else { return nil }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:216:8: error: cannot find type 'HashingAlgorithm' in scope\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n216 |   ) -\u003e HashingAlgorithm {\n    |        `- error: cannot find type 'HashingAlgorithm' in scope\n217 |     switch algorithm {\n218 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:215:8: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n213 |   private static func convert(\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n    |        `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n216 |   ) -\u003e HashingAlgorithm {\n217 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:231:4: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n231 |   .HashingAlgorithm {\n    |    `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n232 |     switch algorithm {\n233 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:230:55: error: cannot find type 'HashingAlgorithm' in scope\n228 |   }\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n    |                                                       `- error: cannot find type 'HashingAlgorithm' in scope\n231 |   .HashingAlgorithm {\n232 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:26:29: error: extra arguments at positions #2, #3, #4 in call\n 24 |     guard let options else { return nil }\n 25 | \n 26 |     return EncryptionOptions(\n    |                             `- error: extra arguments at positions #2, #3, #4 in call\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:154:10: note: 'init(algorithm:authenticatedData:)' declared here\n152 | \n153 |   /// Initialises encryption options with defaults.\n154 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n155 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n156 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:27:18: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 25 | \n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n    |                  `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:27:34: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 25 | \n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n    |                                  `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:28:29: error: value of type 'EncryptionOptions' has no member 'mode'\n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n    |                             `- error: value of type 'EncryptionOptions' has no member 'mode'\n 29 |       padding: convert(options.padding),\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:29:32: error: value of type 'EncryptionOptions' has no member 'padding'\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n    |                                `- error: value of type 'EncryptionOptions' has no member 'padding'\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n 31 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:30:44: error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 31 |     )\n 32 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:44:52: error: extra arguments at positions #2, #3, #4 in call\n 42 |     guard let options else { return nil }\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n    |                                                    `- error: extra arguments at positions #2, #3, #4 in call\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:154:10: note: 'init(algorithm:authenticatedData:)' declared here\n152 | \n153 |   /// Initialises encryption options with defaults.\n154 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n155 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n156 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:45:18: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n    |                  `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:45:45: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n    |                                             `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:46:40: error: value of type 'EncryptionOptions' has no member 'mode'\n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n    |                                        `- error: value of type 'EncryptionOptions' has no member 'mode'\n 47 |       padding: convertToInterface(options.padding),\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:47:43: error: value of type 'EncryptionOptions' has no member 'padding'\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n    |                                           `- error: value of type 'EncryptionOptions' has no member 'padding'\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n 49 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:48:44: error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 49 |     )\n 50 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:59:17: error: type 'EncryptionAlgorithm' has no member 'aes'\n 57 |     switch algorithm {\n 58 |       case .aes:\n 59 |         return .aes\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 60 |       case .chacha20:\n 61 |         return .chacha20\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:61:17: error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 59 |         return .aes\n 60 |       case .chacha20:\n 61 |         return .chacha20\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 62 |       @unknown default:\n 63 |         // Default to a safe algorithm if an unknown one is provided\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:64:17: error: type 'EncryptionAlgorithm' has no member 'aes'\n 62 |       @unknown default:\n 63 |         // Default to a safe algorithm if an unknown one is provided\n 64 |         return .aes\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 65 |     }\n 66 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:71:13: error: type 'EncryptionAlgorithm' has no member 'aes'\n 69 |   .EncryptionAlgorithm {\n 70 |     switch algorithm {\n 71 |       case .aes:\n    |             `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 72 |         return .aes\n 73 |       case .chacha20:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:73:13: error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 71 |       case .aes:\n 72 |         return .aes\n 73 |       case .chacha20:\n    |             `- error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 74 |         return .chacha20\n 75 |       @unknown default:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:150:29: error: extra arguments at positions #2, #4 in call\n148 |     guard let options else { return nil }\n149 | \n150 |     return DecryptionOptions(\n    |                             `- error: extra arguments at positions #2, #4 in call\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:31:10: note: 'init(algorithm:authenticatedData:padding:)' declared here\n29 |      - padding: Optional padding mode to use\n30 |    */\n31 |   public init(\n   |          `- note: 'init(algorithm:authenticatedData:padding:)' declared here\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:151:43: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n149 | \n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n    |                                           `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:41: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'PaddingMode?'\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n    |                                         `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'PaddingMode?'\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n155 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:151:59: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n149 | \n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n    |                                                           `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:152:54: error: value of type 'DecryptionOptions' has no member 'mode'\n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n    |                                                      `- error: value of type 'DecryptionOptions' has no member 'mode'\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:57: error: value of type 'DecryptionOptions' has no member 'padding'\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n    |                                                         `- error: value of type 'DecryptionOptions' has no member 'padding'\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n155 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:154:44: error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n155 |     )\n156 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:168:52: error: extra arguments at positions #2, #3, #4 in call\n166 |     guard let options else { return nil }\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n    |                                                    `- error: extra arguments at positions #2, #3, #4 in call\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:172:10: note: 'init(algorithm:authenticatedData:)' declared here\n170 | \n171 |   /// Initialises decryption options with defaults.\n172 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n173 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n174 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:43: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n    |                                           `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:70: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n    |                                                                      `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:170:65: error: value of type 'DecryptionOptions' has no member 'mode'\n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n    |                                                                 `- error: value of type 'DecryptionOptions' has no member 'mode'\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:171:68: error: cannot convert value of type 'PaddingMode?' to expected argument type 'EncryptionOptions?'\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n    |                                                                    `- error: cannot convert value of type 'PaddingMode?' to expected argument type 'EncryptionOptions?'\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n173 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:172:44: error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n173 |     )\n174 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:192:21: error: extra argument 'salt' in call\n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n192 |       salt: options.salt\n    |                     `- error: extra argument 'salt' in call\n193 |     )\n194 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:191:18: error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n189 | \n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n    |                  `- error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n192 |       salt: options.salt\n193 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:191:34: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n189 | \n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n    |                                  `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n192 |       salt: options.salt\n193 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:192:21: error: value of type 'HashingOptions' has no member 'salt'\n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n192 |       salt: options.salt\n    |                     `- error: value of type 'HashingOptions' has no member 'salt'\n193 |     )\n194 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:208:21: error: extra argument 'salt' in call\n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n208 |       salt: options.salt\n    |                     `- error: extra argument 'salt' in call\n209 |     )\n210 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:207:18: error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n205 | \n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n    |                  `- error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n208 |       salt: options.salt\n209 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:207:45: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n205 | \n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n    |                                             `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n208 |       salt: options.salt\n209 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:208:21: error: value of type 'HashingOptions' has no member 'salt'\n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n208 |       salt: options.salt\n    |                     `- error: value of type 'HashingOptions' has no member 'salt'\n209 |     )\n210 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:264:33: error: extra argument 'customIdentifier' in call\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n264 |       customIdentifier: options.customIdentifier\n    |                                 `- error: extra argument 'customIdentifier' in call\n265 |     )\n266 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:263:33: error: value of type 'KeyGenerationOptions' has no member 'useSecureEnclave'\n261 |     return KeyGenerationOptions(\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'useSecureEnclave'\n264 |       customIdentifier: options.customIdentifier\n265 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:264:33: error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n264 |       customIdentifier: options.customIdentifier\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n265 |     )\n266 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:278:55: error: extra arguments at positions #2, #3 in call\n276 |     guard let options else { return nil }\n277 | \n278 |     return SecurityCoreInterfaces.KeyGenerationOptions(\n    |                                                       `- error: extra arguments at positions #2, #3 in call\n279 |       keyType: convertToInterface(options.keyType),\n280 |       useSecureEnclave: options.useSecureEnclave,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:201:10: note: 'init(persistent:keyType:)' declared here\n199 | \n200 |   /// Initialises key generation options with defaults.\n201 |   public init(persistent: Bool=true, keyType: KeyType = .symmetric) {\n    |          `- note: 'init(persistent:keyType:)' declared here\n202 |     self.persistent=persistent\n203 |     self.keyType=keyType\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:281:33: error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n279 |       keyType: convertToInterface(options.keyType),\n280 |       useSecureEnclave: options.useSecureEnclave,\n281 |       customIdentifier: options.customIdentifier\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n282 |     )\n283 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:289:17: error: type 'KeyType' has no member 'symmetric'\n287 |     switch keyType {\n288 |       case .symmetric:\n289 |         return .symmetric\n    |                 `- error: type 'KeyType' has no member 'symmetric'\n290 |       case .asymmetric:\n291 |         return .asymmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:291:17: error: type 'KeyType' has no member 'asymmetric'\n289 |         return .symmetric\n290 |       case .asymmetric:\n291 |         return .asymmetric\n    |                 `- error: type 'KeyType' has no member 'asymmetric'\n292 |       @unknown default:\n293 |         // Default to symmetric if unknown\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:294:17: error: type 'KeyType' has no member 'symmetric'\n292 |       @unknown default:\n293 |         // Default to symmetric if unknown\n294 |         return .symmetric\n    |                 `- error: type 'KeyType' has no member 'symmetric'\n295 |     }\n296 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:287:5: warning: switch must be exhaustive\n285 |   // Helper methods for key type conversion\n286 |   private static func convert(_ keyType: SecurityCoreInterfaces.KeyType) -\u003e KeyType {\n287 |     switch keyType {\n    |     |- warning: switch must be exhaustive\n    |     `- note: add missing case: '.hybrid'\n288 |       case .symmetric:\n289 |         return .symmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:300:13: error: type 'KeyType' has no member 'symmetric'\n298 |   private static func convertToInterface(_ keyType: KeyType) -\u003e SecurityCoreInterfaces.KeyType {\n299 |     switch keyType {\n300 |       case .symmetric:\n    |             `- error: type 'KeyType' has no member 'symmetric'\n301 |         return .symmetric\n302 |       case .asymmetric:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:302:13: error: type 'KeyType' has no member 'asymmetric'\n300 |       case .symmetric:\n301 |         return .symmetric\n302 |       case .asymmetric:\n    |             `- error: type 'KeyType' has no member 'asymmetric'\n303 |         return .asymmetric\n304 |       @unknown default:\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:97:22: error: extra argument 'secureStorage' in call\n 95 |   ) async -\u003e CryptoServiceProtocol {\n 96 |     await CryptoServiceFactory.createMock(\n 97 |       secureStorage: secureStorage,\n    |                      `- error: extra argument 'secureStorage' in call\n 98 |       configuration: configuration\n 99 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:228:18: error: cannot find type 'DeploymentEnvironment' in scope\n226 |     secureStorage: SecureStorageProtocol?=nil,\n227 |     logger: LoggingProtocol?=nil,\n228 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:98:32: error: cannot find 'DefaultConsoleLogger' in scope\n 96 |     logger: LoggingProtocol?=nil\n 97 |   ) async -\u003e CryptoServiceProtocol {\n 98 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n 99 | \n100 |     return await DefaultCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:119:32: error: cannot find 'DefaultConsoleLogger' in scope\n117 |     logger: LoggingProtocol?=nil\n118 |   ) async -\u003e CryptoServiceProtocol {\n119 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n120 | \n121 |     return await LoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:143:32: error: cannot find 'DefaultConsoleLogger' in scope\n141 |     logger: LoggingProtocol?=nil\n142 |   ) async -\u003e CryptoServiceProtocol {\n143 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n144 | \n145 |     return await EnhancedLoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:167:32: error: cannot find 'DefaultConsoleLogger' in scope\n165 |     logger: LoggingProtocol?=nil\n166 |   ) async -\u003e CryptoServiceProtocol {\n167 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n168 | \n169 |     // Create secure service with enhanced parameters\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:179:16: error: extra argument 'storage' in call\n177 |         )\n178 |       ),\n179 |       storage: createSecureStorage(),\n    |                `- error: extra argument 'storage' in call\n180 |       logger: actualLogger\n181 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:201:32: error: cannot find 'DefaultConsoleLogger' in scope\n199 |     logger: LoggingProtocol?=nil\n200 |   ) async -\u003e CryptoServiceProtocol {\n201 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n202 | \n203 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:204:22: error: cannot find 'MockCryptoConfiguration' in scope\n202 | \n203 |     return await MockCryptoServiceImpl(\n204 |       configuration: MockCryptoConfiguration(\n    |                      `- error: cannot find 'MockCryptoConfiguration' in scope\n205 |         encryptionSucceeds: shouldSucceed,\n206 |         decryptionSucceeds: shouldSucceed,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:213:27: error: missing argument for parameter 'secureStorage' in call\n211 |         retrievalSucceeds: shouldSucceed\n212 |       ),\n213 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureStorage' in call\n214 |     )\n215 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:230:32: error: cannot find 'DefaultConsoleLogger' in scope\n228 |     environment: DeploymentEnvironment = .production\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n231 | \n232 |     switch environment {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:245:26: error: cannot find 'MockCryptoConfiguration' in scope\n243 |       case .testing:\n244 |         return await MockCryptoServiceImpl(\n245 |           configuration: MockCryptoConfiguration(\n    |                          `- error: cannot find 'MockCryptoConfiguration' in scope\n246 |             encryptionSucceeds: true,\n247 |             decryptionSucceeds: true,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:254:31: error: missing argument for parameter 'secureStorage' in call\n252 |             retrievalSucceeds: true\n253 |           ),\n254 |           logger: actualLogger\n    |                               `- error: missing argument for parameter 'secureStorage' in call\n255 |         )\n256 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:299:32: error: cannot find 'DefaultConsoleLogger' in scope\n297 |     logger: LoggingProtocol?=nil\n298 |   ) async -\u003e CryptoServiceProtocol {\n299 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n300 | \n301 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:302:46: error: 'await' cannot appear to the right of a non-assignment operator\n300 | \n301 |     // Use the provided secure storage or create a default one\n302 |     let actualSecureStorage=secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                              `- error: 'await' cannot appear to the right of a non-assignment operator\n303 | \n304 |     // Create provider based on the specified type\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:327:42: error: missing argument label 'providerType:' in call\n325 | \n326 |       // Return a basic implementation as fallback\n327 |       return await createWithProviderType(\n    |                                          `- error: missing argument label 'providerType:' in call\n328 |         .basic,\n329 |         secureStorage: actualSecureStorage,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:358:32: error: cannot find 'DefaultConsoleLogger' in scope\n356 |     logger: LoggingProtocol?=nil\n357 |   ) async -\u003e CryptoServiceProtocol {\n358 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n359 | \n360 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:361:46: error: 'await' cannot appear to the right of a non-assignment operator\n359 | \n360 |     // Use the provided secure storage or create a default one\n361 |     let actualSecureStorage=secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                              `- error: 'await' cannot appear to the right of a non-assignment operator\n362 | \n363 |     // Create a crypto service implementation using DefaultCryptoServiceWithProviderImpl\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:386:32: error: cannot find 'DefaultConsoleLogger' in scope\n384 |     logger: LoggingProtocol?=nil\n385 |   ) async -\u003e SecureStorageProtocol {\n386 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n387 |     let url=storageURL ?? URL(fileURLWithPath: NSTemporaryDirectory())\n388 |       .appendingPathComponent(\"CryptoSecureStorage\")\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:393:16: error: extra argument 'baseURL' in call\n391 |     return InMemorySecureStorage(\n392 |       logger: actualLogger,\n393 |       baseURL: url\n    |                `- error: extra argument 'baseURL' in call\n394 |     )\n395 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:421:32: error: cannot find 'DefaultConsoleLogger' in scope\n419 |     logger: LoggingProtocol?=nil\n420 |   ) async -\u003e CryptoServiceProtocol {\n421 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n422 |     return await MockCryptoServiceImpl(configuration: configuration, logger: actualLogger)\n423 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:422:90: error: missing argument for parameter 'secureStorage' in call\n420 |   ) async -\u003e CryptoServiceProtocol {\n421 |     let actualLogger=logger ?? DefaultConsoleLogger()\n422 |     return await MockCryptoServiceImpl(configuration: configuration, logger: actualLogger)\n    |                                                                                          `- error: missing argument for parameter 'secureStorage' in call\n423 |   }\n424 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:440:7: warning: no 'async' operations occur within 'await' expression\n438 |   ) async -\u003e CryptoServiceProtocol {\n439 |     if let secureLogger {\n440 |       await EnhancedLoggingCryptoServiceImpl(\n    |       `- warning: no 'async' operations occur within 'await' expression\n441 |         wrapped: wrapped,\n442 |         logger: secureLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:445:7: warning: no 'async' operations occur within 'await' expression\n443 |       )\n444 |     } else {\n445 |       await LoggingCryptoServiceImpl(\n    |       `- warning: no 'async' operations occur within 'await' expression\n446 |         wrapped: wrapped,\n447 |         logger: logger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:33:14: error: cannot find type 'SecurityProviderOptions' in scope\n31 |     data: [UInt8],\n32 |     keyIdentifier: String?=nil,\n33 |     options: SecurityProviderOptions?=nil\n   |              `- error: cannot find type 'SecurityProviderOptions' in scope\n34 |   ) async -\u003e Result\u003c[UInt8], Error\u003e {\n35 |     // Basic implementation of security operations\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:80:16: error: cannot find type 'SecurityProviderOptions' in scope\n78 | \n79 |   public func generateKey(\n80 |     options _: SecurityProviderOptions\n   |                `- error: cannot find type 'SecurityProviderOptions' in scope\n81 |   ) async -\u003e Result\u003cString, Error\u003e {\n82 |     // In a real implementation, this would generate an actual cryptographic key\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              |- error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n   |              `- note: add stubs for conformance\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:30:8: note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 28 | \n 29 |   /// Access to cryptographic service implementation\n 30 |   func cryptoService() async -\u003e CryptoServiceProtocol\n    |        `- note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 31 | \n 32 |   /// Access to key management service implementation\n 33 |   func keyManager() async -\u003e KeyManagementProtocol\n    |        `- note: protocol requires function 'keyManager()' with type '() async -\u003e any KeyManagementProtocol'\n 34 | \n 35 |   // MARK: - Core Operations\n    :\n 41 |    - Returns: Result containing encrypted data or error\n 42 |    */\n 43 |   func encrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'encrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 44 | \n 45 |   /**\n    :\n 49 |    - Returns: Result containing decrypted data or error\n 50 |    */\n 51 |   func decrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'decrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 52 | \n 53 |   /**\n    :\n 65 |    - Returns: Result containing storage confirmation or error\n 66 |    */\n 67 |   func secureStore(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureStore(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 68 | \n 69 |   /**\n    :\n 73 |    - Returns: Result containing retrieved data or error\n 74 |    */\n 75 |   func secureRetrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureRetrieve(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 76 | \n 77 |   /**\n    :\n 81 |    - Returns: Result containing deletion confirmation or error\n 82 |    */\n 83 |   func secureDelete(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureDelete(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 84 | \n 85 |   /**\n    :\n 89 |    - Returns: Result containing signature data or error\n 90 |    */\n 91 |   func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'sign(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 92 | \n 93 |   /**\n    :\n 97 |    - Returns: Result containing verification status or error\n 98 |    */\n 99 |   func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'verify(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n100 | \n101 |   /**\n    :\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n    :\n121 |    - Returns: A properly configured SecurityConfigDTO\n122 |    */\n123 |   func createSecureConfig(options: SecurityConfigOptions) async -\u003e SecurityConfigDTO\n    |        `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n124 | }\n125 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:37:13: error: type 'SecurityOperation' has no member 'encryption'\n35 |     // Basic implementation of security operations\n36 |     switch operation {\n37 |       case .encryption:\n   |             `- error: type 'SecurityOperation' has no member 'encryption'\n38 |         guard let keyIdentifier else {\n39 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:50:13: error: type 'SecurityOperation' has no member 'decryption'\n48 |         return .success(encryptedData)\n49 | \n50 |       case .decryption:\n   |             `- error: type 'SecurityOperation' has no member 'decryption'\n51 |         guard let keyIdentifier else {\n52 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:59:13: error: type 'SecurityOperation' has no member 'hashing'\n57 |         return .success(data)\n58 | \n59 |       case .hashing:\n   |             `- error: type 'SecurityOperation' has no member 'hashing'\n60 |         // Determine the hash algorithm to use\n61 |         let algorithm=options?.hashAlgorithm ?? .sha256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:39:27: error: module 'UmbraErrors' has no member named 'Security'\n37 |       case .encryption:\n38 |         guard let keyIdentifier else {\n39 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n   |                           `- error: module 'UmbraErrors' has no member named 'Security'\n40 |         }\n41 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:52:27: error: module 'UmbraErrors' has no member named 'Security'\n50 |       case .decryption:\n51 |         guard let keyIdentifier else {\n52 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n   |                           `- error: module 'UmbraErrors' has no member named 'Security'\n53 |         }\n54 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:75:25: error: module 'UmbraErrors' has no member named 'Security'\n73 | \n74 |       default:\n75 |         return .failure(UmbraErrors.Security.Core.unsupportedOperation)\n   |                         `- error: module 'UmbraErrors' has no member named 'Security'\n76 |     }\n77 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 | \n 21 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:17:14: error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  as the baseline implementation when more specialised providers aren't selected.\n 16 |  */\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n 97 |   }\n 98 | \n 99 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n100 |     encryptedDataIdentifier: String,\n101 |     keyIdentifier: String,\n    :\n198 |   }\n199 | \n200 |   public func verifyHash(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n201 |     dataIdentifier: String,\n202 |     hashIdentifier: String,\n    :\n259 |   }\n260 | \n261 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n262 |     length: Int,\n263 |     options: CryptoServiceOptions?=nil\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:53:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n 51 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n 52 | \n 53 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n 54 |       \"Encrypting data with key: \\(keyIdentifier)\",\n 55 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:81:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n 79 |     // Store the encrypted data\n 80 |     let dataIdentifier=\"encrypted_\\(UUID().uuidString)\"\n 81 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n 82 |       data: encryptedData,\n 83 |       identifier: dataIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:95:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n 93 |           source: \"DefaultCryptoService\"\n 94 |         )\n 95 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n 96 |     }\n 97 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:107:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n105 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n106 | \n107 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n108 |       \"Decrypting data with identifier: \\(encryptedDataIdentifier) using key: \\(keyIdentifier)\",\n109 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:114:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n112 | \n113 |     // Retrieve the encrypted data\n114 |     let dataResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n115 |       identifier: encryptedDataIdentifier\n116 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:136:24: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n134 |           return .success(decryptedData)\n135 |         } else {\n136 |           await logger.error(\n    |                        `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n137 |             \"Invalid encrypted data format\",\n138 |             metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:141:44: error: module 'UmbraErrors' has no member named 'Security'\n139 |             source: \"DefaultCryptoService\"\n140 |           )\n141 |           return .failure(.operationFailed(UmbraErrors.Security.Core.invalidData))\n    |                                            `- error: module 'UmbraErrors' has no member named 'Security'\n142 |         }\n143 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:150:26: error: enum case 'keyNotFound' has no associated values\n148 |           source: \"DefaultCryptoService\"\n149 |         )\n150 |         return .failure(.keyNotFound(encryptedDataIdentifier))\n    |                          `- error: enum case 'keyNotFound' has no associated values\n151 |     }\n152 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:162:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n160 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n161 | \n162 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n163 |       \"Generating hash with algorithm: \\(algorithm ?? .sha256)\",\n164 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:171:27: error: switch must be exhaustive\n169 | \n170 |     // For this implementation, we'll create a simple mock hash\n171 |     var hashData: [UInt8]=switch algorithm ?? .sha256 {\n    |                           |- error: switch must be exhaustive\n    |                           `- note: add missing case: '.blake2b'\n172 |       case .sha256:\n173 |         // Generate a mock SHA-256 hash (32 bytes)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:182:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n180 |     // Store the hash\n181 |     let hashIdentifier=\"hash_\\(UUID().uuidString)\"\n182 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n183 |       data: hashData,\n184 |       identifier: hashIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:196:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n194 |           source: \"DefaultCryptoService\"\n195 |         )\n196 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n197 |     }\n198 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:208:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n206 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n207 | \n208 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n209 |       \"Verifying hash for data with identifier: \\(dataIdentifier)\",\n210 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:215:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n213 | \n214 |     // Retrieve the data\n215 |     let dataResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n216 |       identifier: dataIdentifier\n217 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:227:24: error: enum case 'keyNotFound' has no associated values\n225 |         )\n226 |       }\n227 |       return .failure(.keyNotFound(dataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n228 |     }\n229 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:231:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n229 | \n230 |     // Retrieve the expected hash\n231 |     let hashResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n232 |       identifier: hashIdentifier\n233 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:243:24: error: enum case 'keyNotFound' has no associated values\n241 |         )\n242 |       }\n243 |       return .failure(.keyNotFound(hashIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n244 |     }\n245 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:252:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n250 |     let matchesHash=Bool.random()\n251 | \n252 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n253 |       \"Hash verification result: \\(matchesHash)\",\n254 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:268:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n266 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n267 | \n268 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n269 |       \"Generating key with length: \\(length)\",\n270 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:276:20: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n274 |     // Validate key length\n275 |     guard length \u003e= 16 else { // Minimum 128-bit key\n276 |       await logger.error(\n    |                    `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n277 |         \"Key length too short: \\(length) bytes\",\n278 |         metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:281:40: error: module 'UmbraErrors' has no member named 'Security'\n279 |         source: \"DefaultCryptoService\"\n280 |       )\n281 |       return .failure(.operationFailed(UmbraErrors.Security.Core.invalidKeyLength))\n    |                                        `- error: module 'UmbraErrors' has no member named 'Security'\n282 |     }\n283 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:289:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n287 |     // Store the key\n288 |     let keyIdentifier=\"key_\\(UUID().uuidString)\"\n289 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n290 |       data: keyData,\n291 |       identifier: keyIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:303:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n301 |           source: \"DefaultCryptoService\"\n302 |         )\n303 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n304 |     }\n305 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:315:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n313 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n314 | \n315 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n316 |       \"Storing data with identifier: \\(identifier)\",\n317 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:321:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n319 |     )\n320 | \n321 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n322 |       data: data,\n323 |       identifier: identifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:335:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n333 |           source: \"DefaultCryptoService\"\n334 |         )\n335 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n336 |     }\n337 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:346:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n344 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n345 | \n346 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n347 |       \"Retrieving data with identifier: \\(identifier)\",\n348 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:352:44: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n350 |     )\n351 | \n352 |     let retrieveResult=await secureStorage.retrieveSecurely(\n    |                                            `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n353 |       identifier: identifier\n354 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:365:26: error: enum case 'keyNotFound' has no associated values\n363 |           source: \"DefaultCryptoService\"\n364 |         )\n365 |         return .failure(.keyNotFound(identifier))\n    |                          `- error: enum case 'keyNotFound' has no associated values\n366 |     }\n367 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:376:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n374 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n375 | \n376 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n377 |       \"Exporting data with identifier: \\(identifier)\",\n378 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:374:9: warning: initialization of immutable value 'actualOptions' was never used; consider replacing with assignment to '_' or removing it\n372 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n373 |     // Use provided options or convert our factory options to CryptoServiceOptions\n374 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n    |         `- warning: initialization of immutable value 'actualOptions' was never used; consider replacing with assignment to '_' or removing it\n375 | \n376 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:394:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n392 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n393 | \n394 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n395 |       \"Importing data with identifier: \\(identifier)\",\n396 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:400:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n398 |     )\n399 | \n400 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n401 |       data: data,\n402 |       identifier: identifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:414:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n412 |           source: \"DefaultCryptoService\"\n413 |         )\n414 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n415 |     }\n416 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:425:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n423 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n424 | \n425 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n426 |       \"Deleting data with identifier: \\(identifier)\",\n427 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:431:42: error: value of type 'any SecureStorageProtocol' has no member 'deleteSecurely'\n429 |     )\n430 | \n431 |     let deleteResult=await secureStorage.deleteSecurely(\n    |                                          `- error: value of type 'any SecureStorageProtocol' has no member 'deleteSecurely'\n432 |       identifier: identifier\n433 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:445:28: error: enum case 'keyNotFound' has no associated values\n443 |         )\n444 |         if case .keyNotFound=error {\n445 |           return .failure(.keyNotFound(identifier))\n    |                            `- error: enum case 'keyNotFound' has no associated values\n446 |         } else {\n447 |           return .failure(.storageFailure(error))\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:447:28: error: type 'SecurityStorageError' has no member 'storageFailure'\n445 |           return .failure(.keyNotFound(identifier))\n446 |         } else {\n447 |           return .failure(.storageFailure(error))\n    |                            `- error: type 'SecurityStorageError' has no member 'storageFailure'\n448 |         }\n449 |     }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 |   private let logger: LoggingProtocol\n 21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:17:14: error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  CryptoServiceProtocol API.\n 16 |  */\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n102 |   }\n103 | \n104 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n105 |     encryptedDataIdentifier: String,\n106 |     keyIdentifier: String,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:49:29: error: cannot find 'SecurityProviderOptions' in scope\n 47 | \n 48 |     // Prepare operation options\n 49 |     let encryptionOptions = SecurityProviderOptions(\n    |                             `- error: cannot find 'SecurityProviderOptions' in scope\n 50 |       algorithm: .aes256GCM,\n 51 |       mode: .encrypt,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:50:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n 48 |     // Prepare operation options\n 49 |     let encryptionOptions = SecurityProviderOptions(\n 50 |       algorithm: .aes256GCM,\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n 51 |       mode: .encrypt,\n 52 |       keySize: 256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:51:14: error: cannot infer contextual base in reference to member 'encrypt'\n 49 |     let encryptionOptions = SecurityProviderOptions(\n 50 |       algorithm: .aes256GCM,\n 51 |       mode: .encrypt,\n    |              `- error: cannot infer contextual base in reference to member 'encrypt'\n 52 |       keySize: 256\n 53 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:56:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n 54 | \n 55 |     // Delegate to security provider\n 56 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n 57 |       .encryption,\n 58 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:57:8: error: cannot infer contextual base in reference to member 'encryption'\n 55 |     // Delegate to security provider\n 56 |     let result = await provider.performOperation(\n 57 |       .encryption,\n    |        `- error: cannot infer contextual base in reference to member 'encryption'\n 58 |       data: data,\n 59 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:87:30: error: type 'SecurityStorageError' has no member 'storageFailure'\n 85 |               )\n 86 |             )\n 87 |             return .failure(.storageFailure(error))\n    |                              `- error: type 'SecurityStorageError' has no member 'storageFailure'\n 88 |         }\n 89 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:123:24: error: enum case 'keyNotFound' has no associated values\n121 |         )\n122 |       }\n123 |       return .failure(.keyNotFound(encryptedDataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n124 |     }\n125 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:138:29: error: cannot find 'SecurityProviderOptions' in scope\n136 | \n137 |     // Prepare operation options\n138 |     let decryptionOptions = SecurityProviderOptions(\n    |                             `- error: cannot find 'SecurityProviderOptions' in scope\n139 |       algorithm: .aes256GCM,\n140 |       mode: .decrypt,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:139:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n137 |     // Prepare operation options\n138 |     let decryptionOptions = SecurityProviderOptions(\n139 |       algorithm: .aes256GCM,\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n140 |       mode: .decrypt,\n141 |       keySize: 256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:140:14: error: cannot infer contextual base in reference to member 'decrypt'\n138 |     let decryptionOptions = SecurityProviderOptions(\n139 |       algorithm: .aes256GCM,\n140 |       mode: .decrypt,\n    |              `- error: cannot infer contextual base in reference to member 'decrypt'\n141 |       keySize: 256\n142 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:145:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n143 | \n144 |     // Delegate to security provider\n145 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n146 |       .decryption,\n147 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:146:8: error: cannot infer contextual base in reference to member 'decryption'\n144 |     // Delegate to security provider\n145 |     let result = await provider.performOperation(\n146 |       .decryption,\n    |        `- error: cannot infer contextual base in reference to member 'decryption'\n147 |       data: data,\n148 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:186:28: error: cannot find type 'HashingAlgorithm' in scope\n184 | \n185 |     // Map hash algorithm to security provider algorithm\n186 |     let providerAlgorithm: HashingAlgorithm = switch algorithm {\n    |                            `- error: cannot find type 'HashingAlgorithm' in scope\n187 |       case .sha256:\n188 |         .sha256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:194:23: error: cannot find 'SecurityProviderOptions' in scope\n192 | \n193 |     // Prepare operation options\n194 |     let hashOptions = SecurityProviderOptions(\n    |                       `- error: cannot find 'SecurityProviderOptions' in scope\n195 |       hashAlgorithm: providerAlgorithm\n196 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:199:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n197 | \n198 |     // Delegate to security provider\n199 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n200 |       .hashing,\n201 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:200:8: error: cannot infer contextual base in reference to member 'hashing'\n198 |     // Delegate to security provider\n199 |     let result = await provider.performOperation(\n200 |       .hashing,\n    |        `- error: cannot infer contextual base in reference to member 'hashing'\n201 |       data: data,\n202 |       options: hashOptions\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:229:30: error: type 'SecurityStorageError' has no member 'storageFailure'\n227 |               )\n228 |             )\n229 |             return .failure(.storageFailure(error))\n    |                              `- error: type 'SecurityStorageError' has no member 'storageFailure'\n230 |         }\n231 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:264:24: error: enum case 'keyNotFound' has no associated values\n262 |         )\n263 |       }\n264 |       return .failure(.keyNotFound(dataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n265 |     }\n266 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:281:24: error: enum case 'keyNotFound' has no associated values\n279 |         )\n280 |       }\n281 |       return .failure(.keyNotFound(expectedHashIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n282 |     }\n283 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:296:33: error: value of type 'any SecurityProviderProtocol' has no member 'verifyHash'\n294 | \n295 |     // Delegate to security provider\n296 |     let result = await provider.verifyHash(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'verifyHash'\n297 |       data: data,\n298 |       expectedHash: expectedHash\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:329:22: error: cannot find 'SecurityKeyOptions' in scope\n327 |     \n328 |     // Prepare key generation options\n329 |     let keyOptions = SecurityKeyOptions(\n    |                      `- error: cannot find 'SecurityKeyOptions' in scope\n330 |       keySize: length * 8,\n331 |       algorithm: .aes256GCM\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:331:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n329 |     let keyOptions = SecurityKeyOptions(\n330 |       keySize: length * 8,\n331 |       algorithm: .aes256GCM\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n332 |     )\n333 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:8:15: error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n 6 |  Enhanced log context for crypto operations with privacy controls\n 7 |  */\n 8 | public struct EnhancedLogContext: LogContextDTO {\n   |               |- error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n   |               `- note: add stubs for conformance\n 9 |   /// Domain name for the log context\n10 |   public let domainName: String\n   :\n14 |   \n15 |   /// Additional context metadata as key-value pairs\n16 |   public let metadata: [String: String]\n   |              `- note: candidate has non-matching type '[String : String]'\n17 |   \n18 |   /// Privacy level for each metadata field\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:13:7: note: protocol requires property 'source' with type 'String?'\n11 | \n12 |   /// Optional source information (class, file, etc.)\n13 |   var source: String? { get }\n   |       `- note: protocol requires property 'source' with type 'String?'\n14 | \n15 |   /// Optional correlation ID for tracing related log events\n16 |   var correlationID: String? { get }\n   |       `- note: protocol requires property 'correlationID' with type 'String?'\n17 | \n18 |   /// The metadata collection for this context\n19 |   var metadata: LogMetadataDTOCollection { get }\n   |       `- note: protocol requires property 'metadata' with type 'LogMetadataDTOCollection'\n20 | }\n21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:63:7: error: switch must be exhaustive\n61 |       let privacy = privacyLevel(for: key)\n62 |       \n63 |       switch privacy {\n   |       |- error: switch must be exhaustive\n   |       `- note: add missing case: '.hash'\n64 |       case .private:\n65 |         _ = collection.withPrivate(key: key, value: value)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:16:14: error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 14 |  logging with proper privacy tags for sensitive data.\n 15 |  */\n 16 | public actor EnhancedLoggingCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 17 |   /// The wrapped implementation\n 18 |   private let wrapped: CryptoServiceProtocol\n    :\n 81 |   }\n 82 | \n 83 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 84 |     encryptedDataIdentifier: String,\n 85 |     keyIdentifier: String,\n    :\n215 |   }\n216 | \n217 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n218 |     length: Int,\n219 |     options: KeyGenerationOptions?=nil\n    :\n258 |   }\n259 | \n260 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n261 |     data: [UInt8],\n262 |     identifier: String\n    :\n300 |   }\n301 | \n302 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n303 |     identifier: String\n304 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n    :\n421 |   }\n422 | \n423 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n424 |     identifier: String\n425 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:58:37: error: incorrect argument label in call (have 'data:keyIdentifier:options:', expected 'dataIdentifier:keyIdentifier:options:')\n 56 | \n 57 |     // Perform the operation\n 58 |     let result=await wrapped.encrypt(\n    |                                     `- error: incorrect argument label in call (have 'data:keyIdentifier:options:', expected 'dataIdentifier:keyIdentifier:options:')\n 59 |       data: data,\n 60 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:59:13: error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n 57 |     // Perform the operation\n 58 |     let result=await wrapped.encrypt(\n 59 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n 60 |       keyIdentifier: keyIdentifier,\n 61 |       options: options\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:61:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'EncryptionOptions?'\n 59 |       data: data,\n 60 |       keyIdentifier: keyIdentifier,\n 61 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'EncryptionOptions?'\n 62 |     )\n 63 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:67:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 65 |     switch result {\n 66 |       case let .success(identifier):\n 67 |         context.updateMetadata([\"dataIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 68 |         await logger.debug(\n 69 |           \"Encryption successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:67:52: error: type 'Any' has no member 'private'\n 65 |     switch result {\n 66 |       case let .success(identifier):\n 67 |         context.updateMetadata([\"dataIdentifier\": .private(identifier)])\n    |                                                    `- error: type 'Any' has no member 'private'\n 68 |         await logger.debug(\n 69 |           \"Encryption successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:73:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 71 |         )\n 72 |       case let .failure(error):\n 73 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 74 |         await logger.error(\n 75 |           \"Encryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:73:43: error: type 'Any' has no member 'hash'\n 71 |         )\n 72 |       case let .failure(error):\n 73 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n 74 |         await logger.error(\n 75 |           \"Encryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:107:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'DecryptionOptions?'\n105 |       encryptedDataIdentifier: encryptedDataIdentifier,\n106 |       keyIdentifier: keyIdentifier,\n107 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'DecryptionOptions?'\n108 |     )\n109 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:118:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n116 |         )\n117 |       case let .failure(error):\n118 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n119 |         await logger.error(\n120 |           \"Decryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:118:43: error: type 'Any' has no member 'hash'\n116 |         )\n117 |       case let .failure(error):\n118 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n119 |         await logger.error(\n120 |           \"Decryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:147:42: error: incorrect argument labels in call (have 'data:algorithm:', expected 'dataIdentifier:options:')\n145 | \n146 |     // Perform the operation\n147 |     let result=await wrapped.generateHash(\n    |                                          `- error: incorrect argument labels in call (have 'data:algorithm:', expected 'dataIdentifier:options:')\n148 |       data: data,\n149 |       algorithm: algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:148:13: error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n146 |     // Perform the operation\n147 |     let result=await wrapped.generateHash(\n148 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n149 |       algorithm: algorithm\n150 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:149:18: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n147 |     let result=await wrapped.generateHash(\n148 |       data: data,\n149 |       algorithm: algorithm\n    |                  `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n150 |     )\n151 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:155:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n153 |     switch result {\n154 |       case let .success(identifier):\n155 |         context.updateMetadata([\"hashIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n156 |         await logger.debug(\n157 |           \"Hash generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:155:52: error: type 'Any' has no member 'private'\n153 |     switch result {\n154 |       case let .success(identifier):\n155 |         context.updateMetadata([\"hashIdentifier\": .private(identifier)])\n    |                                                    `- error: type 'Any' has no member 'private'\n156 |         await logger.debug(\n157 |           \"Hash generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:161:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n159 |         )\n160 |       case let .failure(error):\n161 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n162 |         await logger.error(\n163 |           \"Hash generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:161:43: error: type 'Any' has no member 'hash'\n159 |         )\n160 |       case let .failure(error):\n161 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n162 |         await logger.error(\n163 |           \"Hash generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:195:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'HashingOptions?'\n193 |       dataIdentifier: dataIdentifier,\n194 |       hashIdentifier: expectedHashIdentifier,\n195 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'HashingOptions?'\n196 |     )\n197 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:201:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n199 |     switch result {\n200 |       case let .success(matches):\n201 |         context.updateMetadata([\"matches\": .public(String(describing: matches))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n202 |         await logger.debug(\n203 |           \"Hash verification completed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:201:45: error: type 'Any' has no member 'public'\n199 |     switch result {\n200 |       case let .success(matches):\n201 |         context.updateMetadata([\"matches\": .public(String(describing: matches))])\n    |                                             `- error: type 'Any' has no member 'public'\n202 |         await logger.debug(\n203 |           \"Hash verification completed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:207:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n205 |         )\n206 |       case let .failure(error):\n207 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n208 |         await logger.error(\n209 |           \"Hash verification failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:207:43: error: type 'Any' has no member 'hash'\n205 |         )\n206 |       case let .failure(error):\n207 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n208 |         await logger.error(\n209 |           \"Hash verification failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:238:16: error: cannot convert value of type 'CryptoServices.KeyGenerationOptions?' to expected argument type 'SecurityCoreInterfaces.KeyGenerationOptions?'\n236 |     let result=await wrapped.generateKey(\n237 |       length: length,\n238 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServices.KeyGenerationOptions?' to expected argument type 'SecurityCoreInterfaces.KeyGenerationOptions?'\n239 |     )\n240 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:244:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n242 |     switch result {\n243 |       case let .success(identifier):\n244 |         context.updateMetadata([\"keyIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n245 |         await logger.debug(\n246 |           \"Key generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:244:51: error: type 'Any' has no member 'private'\n242 |     switch result {\n243 |       case let .success(identifier):\n244 |         context.updateMetadata([\"keyIdentifier\": .private(identifier)])\n    |                                                   `- error: type 'Any' has no member 'private'\n245 |         await logger.debug(\n246 |           \"Key generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:250:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n248 |         )\n249 |       case let .failure(error):\n250 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n251 |         await logger.error(\n252 |           \"Key generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:250:43: error: type 'Any' has no member 'hash'\n248 |         )\n249 |       case let .failure(error):\n250 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n251 |         await logger.error(\n252 |           \"Key generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:280:13: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n278 |     // Perform the operation\n279 |     let result=await wrapped.storeData(\n280 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n281 |       identifier: identifier\n282 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:292:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n290 |         )\n291 |       case let .failure(error):\n292 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n293 |         await logger.error(\n294 |           \"Data storage failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:292:43: error: type 'Any' has no member 'hash'\n290 |         )\n291 |       case let .failure(error):\n292 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n293 |         await logger.error(\n294 |           \"Data storage failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:332:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n330 |         )\n331 |       case let .failure(error):\n332 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n333 |         await logger.error(\n334 |           \"Data retrieval failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:332:43: error: type 'Any' has no member 'hash'\n330 |         )\n331 |       case let .failure(error):\n332 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n333 |         await logger.error(\n334 |           \"Data retrieval failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:339:12: error: cannot convert return expression of type 'Result\u003cData, SecurityStorageError\u003e' to return type 'Result\u003c[UInt8], SecurityStorageError\u003e'\n337 |     }\n338 | \n339 |     return result\n    |            |- error: cannot convert return expression of type 'Result\u003cData, SecurityStorageError\u003e' to return type 'Result\u003c[UInt8], SecurityStorageError\u003e'\n    |            `- note: arguments to generic parameter 'Success' ('Data' and '[UInt8]') are expected to be equal\n340 |   }\n341 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:372:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n370 |         )\n371 |       case let .failure(error):\n372 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n373 |         await logger.error(\n374 |           \"Data export failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:372:43: error: type 'Any' has no member 'hash'\n370 |         )\n371 |       case let .failure(error):\n372 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n373 |         await logger.error(\n374 |           \"Data export failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:407:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n405 |     switch result {\n406 |       case let .success(resultIdentifier):\n407 |         context.updateMetadata([\"resultIdentifier\": .private(resultIdentifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n408 |         await logger.debug(\n409 |           \"Data import successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:407:54: error: type 'Any' has no member 'private'\n405 |     switch result {\n406 |       case let .success(resultIdentifier):\n407 |         context.updateMetadata([\"resultIdentifier\": .private(resultIdentifier)])\n    |                                                      `- error: type 'Any' has no member 'private'\n408 |         await logger.debug(\n409 |           \"Data import successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:413:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n411 |         )\n412 |       case let .failure(error):\n413 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n414 |         await logger.error(\n415 |           \"Data import failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:413:43: error: type 'Any' has no member 'hash'\n411 |         )\n412 |       case let .failure(error):\n413 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n414 |         await logger.error(\n415 |           \"Data import failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:453:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n451 |         )\n452 |       case let .failure(error):\n453 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n454 |         await logger.error(\n455 |           \"Data deletion failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:453:43: error: type 'Any' has no member 'hash'\n451 |         )\n452 |       case let .failure(error):\n453 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n454 |         await logger.error(\n455 |           \"Data deletion failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:460:12: error: cannot convert return expression of type 'Result\u003cVoid, SecurityStorageError\u003e' to return type 'Result\u003cBool, SecurityStorageError\u003e'\n458 |     }\n459 | \n460 |     return result\n    |            |- error: cannot convert return expression of type 'Result\u003cVoid, SecurityStorageError\u003e' to return type 'Result\u003cBool, SecurityStorageError\u003e'\n    |            `- note: arguments to generic parameter 'Success' ('Void' and 'Bool') are expected to be equal\n461 |   }\n462 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:477:35: error: extra arguments at positions #2, #3 in call\n475 |     identifiers: [String: PrivacyLevel]\n476 |   ) -\u003e EnhancedLogContext {\n477 |     var context=EnhancedLogContext(\n    |                                   `- error: extra arguments at positions #2, #3 in call\n478 |       domainName: \"CryptoServices\",\n479 |       source: \"CryptoServiceFactory\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:30:10: note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n28 |      - privacyLevels: Privacy levels for each metadata field\n29 |    */\n30 |   public init(\n   |          `- note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n31 |     domainName: String,\n32 |     operationName: String,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:478:35: error: missing argument for parameter 'operationName' in call\n476 |   ) -\u003e EnhancedLogContext {\n477 |     var context=EnhancedLogContext(\n478 |       domainName: \"CryptoServices\",\n    |                                   `- error: missing argument for parameter 'operationName' in call\n479 |       source: \"CryptoServiceFactory\",\n480 |       correlationID: nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:30:10: note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n28 |      - privacyLevels: Privacy levels for each metadata field\n29 |    */\n30 |   public init(\n   |          `- note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n31 |     domainName: String,\n32 |     operationName: String,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:480:22: error: 'nil' requires a contextual type\n478 |       domainName: \"CryptoServices\",\n479 |       source: \"CryptoServiceFactory\",\n480 |       correlationID: nil\n    |                      `- error: 'nil' requires a contextual type\n481 |     )\n482 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:47:30: error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n 47 |     rateLimiter: RateLimiter=RateLimiter()\n    |                              `- error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 48 |   ) {\n 49 |     self.wrapped = wrapped\n    :\n443 |  Simple rate limiter for security operations.\n444 |  */\n445 | public class RateLimiter {\n    |              `- note: initializer 'init()' is not '@usableFromInline' or public\n446 |   public enum Operation: String {\n447 |     case encrypt, decrypt, hash, verify, export, generateKey\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:384:15: error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n382 |    - Returns: The exported data or error\n383 |    */\n384 |   public func exportData(\n    |               `- error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n385 |     withIdentifier identifier: String\n386 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:81:8: note: requirement 'exportData(identifier:)' declared here\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: requirement 'exportData(identifier:)' declared here\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:20:14: error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 18 |  validation of cryptographic operations.\n 19 |  */\n 20 | public actor EnhancedSecureCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 21 | \n 22 |   /// The wrapped implementation that does the actual cryptographic work\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:412:36: error: incorrect argument label in call (have 'withIdentifier:', expected 'identifier:')\n410 | \n411 |     // Use the wrapped implementation to perform the export\n412 |     return await wrapped.exportData(withIdentifier: identifier)\n    |                                    `- error: incorrect argument label in call (have 'withIdentifier:', expected 'identifier:')\n413 |   }\n414 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:438:38: error: missing argument for parameter 'length' in call\n436 | \n437 |     // Use the wrapped implementation to generate the key\n438 |     return await wrapped.generateKey(options: options)\n    |                                      `- error: missing argument for parameter 'length' in call\n439 |   }\n440 | }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: 'generateKey(length:options:)' declared here\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: 'generateKey(length:options:)' declared here\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/LoggingCryptoServiceImpl.swift:9:14: error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n  7 |  all operations before delegating to the wrapped implementation.\n  8 |  */\n  9 | public actor LoggingCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 10 |   /// The wrapped implementation\n 11 |   private let wrapped: CryptoServiceProtocol\n    :\n339 |    - Returns: Identifier for the imported data or an error\n340 |    */\n341 |   public func importData(\n    |               `- note: candidate has non-matching type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n342 |     _ data: [UInt8],\n343 |     customIdentifier: String?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:93:8: note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:47:31: error: cannot find type 'CryptoProviderProtocol' in scope\n  45 |   \n  46 |   /// Crypto provider for cryptographic operations\n  47 |   private let cryptoProvider: CryptoProviderProtocol\n     |                               `- error: cannot find type 'CryptoProviderProtocol' in scope\n  48 |   \n  49 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:64:21: error: cannot find type 'CryptoProviderProtocol' in scope\n  62 |     wrapped: CryptoServiceProtocol,\n  63 |     secureStorage: SecureStorageProtocol,\n  64 |     cryptoProvider: CryptoProviderProtocol,\n     |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n  65 |     logger: LoggingProtocol\n  66 |   ) {\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoStorage.swift:417:33: error: cannot find 'getSecureStorage' in scope\n415 |     // Currently we just attempt to retrieve the data and check if it exists\n416 |     // This could be optimized in a real implementation to avoid loading the data\n417 |     let secureStore = try await getSecureStorage()\n    |                                 `- error: cannot find 'getSecureStorage' in scope\n418 |     return secureStore.hasKey(identifier)\n419 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n264 |    - Returns: Result containing array of identifiers or error details\n265 |    */\n266 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n267 |     await logger.warning(\n268 |       \"List data identifiers operation not supported\",\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecureStorageProtocol.swift:14:8: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n12 |   ///   - identifier: A string identifier for the stored data.\n13 |   /// - Returns: Success or an error.\n14 |   func storeData(_ data: [UInt8], withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n15 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n16 | \n   :\n18 |   /// - Parameter identifier: A string identifying the data to retrieve.\n19 |   /// - Returns: The retrieved data as a byte array or an error.\n20 |   func retrieveData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n21 |     -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n22 | \n   :\n24 |   /// - Parameter identifier: A string identifying the data to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n27 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n28 | \n29 |   /// Lists all available data identifiers.\n30 |   /// - Returns: An array of data identifiers or an error.\n31 |   func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityStorageError\u003e\n   |        `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n32 | }\n33 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:158:63: error: type '_ErrorCodeProtocol' has no member 'notFound'\n156 |       )\n157 |       \n158 |       if let storageError = error as? StorageCoreError, case .notFound = storageError {\n    |                                                               `- error: type '_ErrorCodeProtocol' has no member 'notFound'\n159 |         return .failure(.dataNotFound)\n160 |       }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:162:61: error: cannot convert value of type 'SecurityCoreInterfaces.KeyType' to expected argument type 'CryptoServices.KeyType'\n160 |     var configOptions=SecurityConfigOptions()\n161 | \n162 |     let metadataDict=addMetadata(keySize: keySize, keyType: keyType)\n    |                                                             `- error: cannot convert value of type 'SecurityCoreInterfaces.KeyType' to expected argument type 'CryptoServices.KeyType'\n163 | \n164 |     if !metadataDict.isEmpty {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:196:13: error: type 'KeyType' has no member 'symmetric'\n194 |     let localKeyType: KeyType\n195 |     switch keyType {\n196 |       case .symmetric:\n    |             `- error: type 'KeyType' has no member 'symmetric'\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:198:13: error: type 'KeyType' has no member 'asymmetric'\n196 |       case .symmetric:\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n    |             `- error: type 'KeyType' has no member 'asymmetric'\n199 |         localKeyType = .asymmetric\n200 |       default:\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:197:25: error: type 'KeyType' has no member 'symmetric'\n195 |     switch keyType {\n196 |       case .symmetric:\n197 |         localKeyType = .symmetric\n    |                         `- error: type 'KeyType' has no member 'symmetric'\n198 |       case .asymmetric:\n199 |         localKeyType = .asymmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:199:25: error: type 'KeyType' has no member 'asymmetric'\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n199 |         localKeyType = .asymmetric\n    |                         `- error: type 'KeyType' has no member 'asymmetric'\n200 |       default:\n201 |         localKeyType = .symmetric // Default to symmetric as fallback\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:25: error: type 'KeyType' has no member 'symmetric'\n199 |         localKeyType = .asymmetric\n200 |       default:\n201 |         localKeyType = .symmetric // Default to symmetric as fallback\n    |                         `- error: type 'KeyType' has no member 'symmetric'\n202 |     }\n203 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/OptionTypes.swift:109:14: warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n107 | public struct SendableOptionsDictionary: Sendable {\n108 |   /// The underlying dictionary\n109 |   public let dictionary: [String: Any]\n    |              `- warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n110 |   \n111 |   /**\nTarget //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed to build\nINFO: Elapsed time: 1.133s, Critical Path: 0.99s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger",
    "success": true,
    "start_time": "2025-04-06T11:27:11.532916+01:00",
    "end_time": "2025-04-06T11:27:12.24237+01:00",
    "duration": "709.45725ms",
    "output": "INFO: Invocation ID: b6c418a5-047b-48de-910d-d16a207b98eb\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/CryptoLogger.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/CryptoLogger.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/CryptoLogger.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/libCryptoLogger.a\nINFO: Elapsed time: 0.143s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices",
    "success": true,
    "start_time": "2025-04-06T11:27:12.242388+01:00",
    "end_time": "2025-04-06T11:27:12.957769+01:00",
    "duration": "715.384708ms",
    "output": "INFO: Invocation ID: 030c6739-c5de-4d17-b9b4-bb79db6be386\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/libCryptoXPCServices.a\nINFO: Elapsed time: 0.153s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices",
    "success": true,
    "start_time": "2025-04-06T11:27:12.957776+01:00",
    "end_time": "2025-04-06T11:27:13.662104+01:00",
    "duration": "704.331291ms",
    "output": "INFO: Invocation ID: 2cc885c4-b818-478b-88ee-61b057bb0d26\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices (2 packages loaded, 5 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/DateTimeServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/DateTimeServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/DateTimeServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/libDateTimeServices.a\nINFO: Elapsed time: 0.155s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl",
    "success": true,
    "start_time": "2025-04-06T11:27:13.662111+01:00",
    "end_time": "2025-04-06T11:27:14.365105+01:00",
    "duration": "702.996708ms",
    "output": "INFO: Invocation ID: 21b0ca02-6694-4d87-ba84-2ce025ff2fe1\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/ErrorDomainsImpl.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/ErrorDomainsImpl.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/ErrorDomainsImpl.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/libErrorDomainsImpl.a\nINFO: Elapsed time: 0.142s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl",
    "success": true,
    "start_time": "2025-04-06T11:27:14.365116+01:00",
    "end_time": "2025-04-06T11:27:15.04304+01:00",
    "duration": "677.927375ms",
    "output": "INFO: Invocation ID: 3394df53-ef4e-444a-89df-87fa9f7b5ecb\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/ErrorHandlingImpl.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/ErrorHandlingImpl.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/ErrorHandlingImpl.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/libErrorHandlingImpl.a\nINFO: Elapsed time: 0.138s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices",
    "success": true,
    "start_time": "2025-04-06T11:27:15.043047+01:00",
    "end_time": "2025-04-06T11:27:15.746116+01:00",
    "duration": "703.072334ms",
    "output": "INFO: Invocation ID: 2dcd94fa-2194-472f-95c9-1e0cd37a4d0a\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices (2 packages loaded, 8 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/ErrorLoggingServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/ErrorLoggingServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/ErrorLoggingServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/libErrorLoggingServices.a\nINFO: Elapsed time: 0.156s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices",
    "success": true,
    "start_time": "2025-04-06T11:27:15.746124+01:00",
    "end_time": "2025-04-06T11:27:16.448253+01:00",
    "duration": "702.131958ms",
    "output": "INFO: Invocation ID: bf1918d7-78f3-4f61-9531-842465221308\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices (3 packages loaded, 43 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/FileSystemServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/FileSystemServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/FileSystemServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/libFileSystemServices.a\nINFO: Elapsed time: 0.156s, Critical Path: 0.00s\nINFO: 1 process: 7 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices",
    "success": true,
    "start_time": "2025-04-06T11:27:16.448262+01:00",
    "end_time": "2025-04-06T11:27:17.153785+01:00",
    "duration": "705.526291ms",
    "output": "INFO: Invocation ID: c7e33800-6fca-48be-8db1-0946bc07e612\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/KeychainServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/KeychainServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/KeychainServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/libKeychainServices.a\nINFO: Elapsed time: 0.151s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor",
    "success": true,
    "start_time": "2025-04-06T11:27:17.153792+01:00",
    "end_time": "2025-04-06T11:27:17.872077+01:00",
    "duration": "718.2875ms",
    "output": "INFO: Invocation ID: 98ca445b-c81a-41fc-bb8a-0acd24eb170a\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/KeychainSecurityActor.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/KeychainSecurityActor.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/KeychainSecurityActor.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/libKeychainSecurityActor.a\nINFO: Elapsed time: 0.151s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor",
    "success": true,
    "start_time": "2025-04-06T11:27:17.872085+01:00",
    "end_time": "2025-04-06T11:27:18.599777+01:00",
    "duration": "727.694375ms",
    "output": "INFO: Invocation ID: ab2e7603-8027-4d24-8d4b-65da8080f356\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/KeychainSecurityActor.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/KeychainSecurityActor.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/KeychainSecurityActor.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/libKeychainSecurityActor.a\nINFO: Elapsed time: 0.151s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks",
    "success": true,
    "start_time": "2025-04-06T11:27:18.599799+01:00",
    "end_time": "2025-04-06T11:27:19.305366+01:00",
    "duration": "705.569667ms",
    "output": "INFO: Invocation ID: c9894ea5-5861-41b3-9545-c1fb6801466f\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/Fallbacks.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/Fallbacks.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/Fallbacks.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/libFallbacks.a\nINFO: Elapsed time: 0.143s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger",
    "success": true,
    "start_time": "2025-04-06T11:27:19.305373+01:00",
    "end_time": "2025-04-06T11:27:20.004922+01:00",
    "duration": "699.552542ms",
    "output": "INFO: Invocation ID: 2b2f603b-e81e-4a4a-b270-0fa5ea035c2e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/KeychainLogger.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/KeychainLogger.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/KeychainLogger.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/libKeychainLogger.a\nINFO: Elapsed time: 0.139s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters",
    "success": true,
    "start_time": "2025-04-06T11:27:20.00493+01:00",
    "end_time": "2025-04-06T11:27:20.694476+01:00",
    "duration": "689.54875ms",
    "output": "INFO: Invocation ID: 955f4b9e-9afd-4b06-8a4f-849526c07912\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/libLoggingAdapters.a\nINFO: Elapsed time: 0.148s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices",
    "success": true,
    "start_time": "2025-04-06T11:27:20.694488+01:00",
    "end_time": "2025-04-06T11:27:21.396591+01:00",
    "duration": "702.105875ms",
    "output": "INFO: Invocation ID: cbf7f077-2be1-4858-a2c7-62112a231b74\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/LoggingServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/LoggingServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/LoggingServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/libLoggingServices.a\nINFO: Elapsed time: 0.144s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices",
    "success": true,
    "start_time": "2025-04-06T11:27:21.396616+01:00",
    "end_time": "2025-04-06T11:27:22.111882+01:00",
    "duration": "715.268291ms",
    "output": "INFO: Invocation ID: bea25784-13e3-4153-a175-a1ee95739803\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/LoggingWrapperServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/LoggingWrapperServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/LoggingWrapperServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/libLoggingWrapperServices.a\nINFO: Elapsed time: 0.138s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices",
    "success": true,
    "start_time": "2025-04-06T11:27:22.111889+01:00",
    "end_time": "2025-04-06T11:27:22.815769+01:00",
    "duration": "703.882584ms",
    "output": "INFO: Invocation ID: b164d51e-b8a4-4a80-b8a3-ee9622fd911c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/NetworkServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/NetworkServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/NetworkServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/libNetworkServices.a\nINFO: Elapsed time: 0.152s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices",
    "success": true,
    "start_time": "2025-04-06T11:27:22.815774+01:00",
    "end_time": "2025-04-06T11:27:23.529457+01:00",
    "duration": "713.686083ms",
    "output": "INFO: Invocation ID: 3877c978-1beb-48c7-84dc-9c3a6c8a9f7d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices (1 packages loaded, 7 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/RepositoryServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/RepositoryServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/RepositoryServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/libRepositoryServices.a\nINFO: Elapsed time: 0.149s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ResticServices:ResticServices",
    "success": true,
    "start_time": "2025-04-06T11:27:23.529464+01:00",
    "end_time": "2025-04-06T11:27:24.244371+01:00",
    "duration": "714.910042ms",
    "output": "INFO: Invocation ID: f3dd48b9-062b-4bd5-8ca3-f0e0dbab60c0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ResticServices:ResticServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ResticServices:ResticServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ResticServices:ResticServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ResticServices:ResticServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/libResticServices.a\nINFO: Elapsed time: 0.146s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore",
    "success": true,
    "start_time": "2025-04-06T11:27:24.244388+01:00",
    "end_time": "2025-04-06T11:27:24.919579+01:00",
    "duration": "675.192875ms",
    "output": "INFO: Invocation ID: 7ca2c718-5944-4d29-9ad6-840f10c78e0b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/SecurityCore.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/SecurityCore.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/SecurityCore.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/libSecurityCore.a\nINFO: Elapsed time: 0.137s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices",
    "success": false,
    "start_time": "2025-04-06T11:27:24.919591+01:00",
    "end_time": "2025-04-06T11:27:26.661423+01:00",
    "duration": "1.741839208s",
    "output": "INFO: Invocation ID: ad31083d-4b86-4c40-9acf-6eb2572eeb87\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices (7 packages loaded, 55 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:14: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.4.1-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:55:8: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 53 |   private static func convert(\n 54 |     _ algorithm: SecurityCoreInterfaces\n 55 |       .EncryptionAlgorithm\n    |        `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 56 |   ) -\u003e EncryptionAlgorithm {\n 57 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:69:4: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 67 | \n 68 |   private static func convertToInterface(_ algorithm: EncryptionAlgorithm) -\u003e SecurityCoreInterfaces\n 69 |   .EncryptionAlgorithm {\n    |    `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 70 |     switch algorithm {\n 71 |       case .aes:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:81:62: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 79 | \n 80 |   // Helper methods for mode conversion\n 81 |   private static func convert(_ mode: SecurityCoreInterfaces.EncryptionMode) -\u003e EncryptionMode {\n    |                                                              `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 82 |     switch mode {\n 83 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:94:4: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 92 | \n 93 |   private static func convertToInterface(_ mode: EncryptionMode) -\u003e SecurityCoreInterfaces\n 94 |   .EncryptionMode {\n    |    `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 95 |     switch mode {\n 96 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:109:8: error: cannot find type 'EncryptionPadding' in scope\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n109 |   ) -\u003e EncryptionPadding {\n    |        `- error: cannot find type 'EncryptionPadding' in scope\n110 |     switch padding {\n111 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:108:8: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n106 |   private static func convert(\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n    |        `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n109 |   ) -\u003e EncryptionPadding {\n110 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:122:4: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n122 |   .EncryptionPadding {\n    |    `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n123 |     switch padding {\n124 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:121:53: error: cannot find type 'EncryptionPadding' in scope\n119 |   }\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n    |                                                     `- error: cannot find type 'EncryptionPadding' in scope\n122 |   .EncryptionPadding {\n123 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:147:8: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n145 |     _ options: SecurityCoreInterfaces\n146 |       .DecryptionOptions?\n147 |   ) -\u003e DecryptionOptions? {\n    |        `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n148 |     guard let options else { return nil }\n149 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:164:52: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n162 |    - Returns: The converted options or nil if input was nil\n163 |    */\n164 |   public static func convertToInterface(_ options: DecryptionOptions?) -\u003e SecurityCoreInterfaces\n    |                                                    `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n165 |   .DecryptionOptions? {\n166 |     guard let options else { return nil }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:216:8: error: cannot find type 'HashingAlgorithm' in scope\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n216 |   ) -\u003e HashingAlgorithm {\n    |        `- error: cannot find type 'HashingAlgorithm' in scope\n217 |     switch algorithm {\n218 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:215:8: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n213 |   private static func convert(\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n    |        `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n216 |   ) -\u003e HashingAlgorithm {\n217 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:231:4: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n231 |   .HashingAlgorithm {\n    |    `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n232 |     switch algorithm {\n233 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:230:55: error: cannot find type 'HashingAlgorithm' in scope\n228 |   }\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n    |                                                       `- error: cannot find type 'HashingAlgorithm' in scope\n231 |   .HashingAlgorithm {\n232 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:228:18: error: cannot find type 'DeploymentEnvironment' in scope\n226 |     secureStorage: SecureStorageProtocol?=nil,\n227 |     logger: LoggingProtocol?=nil,\n228 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:33:14: error: cannot find type 'SecurityProviderOptions' in scope\n31 |     data: [UInt8],\n32 |     keyIdentifier: String?=nil,\n33 |     options: SecurityProviderOptions?=nil\n   |              `- error: cannot find type 'SecurityProviderOptions' in scope\n34 |   ) async -\u003e Result\u003c[UInt8], Error\u003e {\n35 |     // Basic implementation of security operations\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:80:16: error: cannot find type 'SecurityProviderOptions' in scope\n78 | \n79 |   public func generateKey(\n80 |     options _: SecurityProviderOptions\n   |                `- error: cannot find type 'SecurityProviderOptions' in scope\n81 |   ) async -\u003e Result\u003cString, Error\u003e {\n82 |     // In a real implementation, this would generate an actual cryptographic key\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              |- error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n   |              `- note: add stubs for conformance\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:30:8: note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 28 | \n 29 |   /// Access to cryptographic service implementation\n 30 |   func cryptoService() async -\u003e CryptoServiceProtocol\n    |        `- note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 31 | \n 32 |   /// Access to key management service implementation\n 33 |   func keyManager() async -\u003e KeyManagementProtocol\n    |        `- note: protocol requires function 'keyManager()' with type '() async -\u003e any KeyManagementProtocol'\n 34 | \n 35 |   // MARK: - Core Operations\n    :\n 41 |    - Returns: Result containing encrypted data or error\n 42 |    */\n 43 |   func encrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'encrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 44 | \n 45 |   /**\n    :\n 49 |    - Returns: Result containing decrypted data or error\n 50 |    */\n 51 |   func decrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'decrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 52 | \n 53 |   /**\n    :\n 65 |    - Returns: Result containing storage confirmation or error\n 66 |    */\n 67 |   func secureStore(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureStore(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 68 | \n 69 |   /**\n    :\n 73 |    - Returns: Result containing retrieved data or error\n 74 |    */\n 75 |   func secureRetrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureRetrieve(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 76 | \n 77 |   /**\n    :\n 81 |    - Returns: Result containing deletion confirmation or error\n 82 |    */\n 83 |   func secureDelete(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureDelete(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 84 | \n 85 |   /**\n    :\n 89 |    - Returns: Result containing signature data or error\n 90 |    */\n 91 |   func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'sign(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 92 | \n 93 |   /**\n    :\n 97 |    - Returns: Result containing verification status or error\n 98 |    */\n 99 |   func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'verify(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n100 | \n101 |   /**\n    :\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n    :\n121 |    - Returns: A properly configured SecurityConfigDTO\n122 |    */\n123 |   func createSecureConfig(options: SecurityConfigOptions) async -\u003e SecurityConfigDTO\n    |        `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n124 | }\n125 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 | \n 21 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:17:14: error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  as the baseline implementation when more specialised providers aren't selected.\n 16 |  */\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n 97 |   }\n 98 | \n 99 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n100 |     encryptedDataIdentifier: String,\n101 |     keyIdentifier: String,\n    :\n198 |   }\n199 | \n200 |   public func verifyHash(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n201 |     dataIdentifier: String,\n202 |     hashIdentifier: String,\n    :\n259 |   }\n260 | \n261 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n262 |     length: Int,\n263 |     options: CryptoServiceOptions?=nil\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 |   private let logger: LoggingProtocol\n 21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:17:14: error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  CryptoServiceProtocol API.\n 16 |  */\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n102 |   }\n103 | \n104 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n105 |     encryptedDataIdentifier: String,\n106 |     keyIdentifier: String,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:8:15: error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n 6 |  Enhanced log context for crypto operations with privacy controls\n 7 |  */\n 8 | public struct EnhancedLogContext: LogContextDTO {\n   |               |- error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n   |               `- note: add stubs for conformance\n 9 |   /// Domain name for the log context\n10 |   public let domainName: String\n   :\n14 |   \n15 |   /// Additional context metadata as key-value pairs\n16 |   public let metadata: [String: String]\n   |              `- note: candidate has non-matching type '[String : String]'\n17 |   \n18 |   /// Privacy level for each metadata field\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:13:7: note: protocol requires property 'source' with type 'String?'\n11 | \n12 |   /// Optional source information (class, file, etc.)\n13 |   var source: String? { get }\n   |       `- note: protocol requires property 'source' with type 'String?'\n14 | \n15 |   /// Optional correlation ID for tracing related log events\n16 |   var correlationID: String? { get }\n   |       `- note: protocol requires property 'correlationID' with type 'String?'\n17 | \n18 |   /// The metadata collection for this context\n19 |   var metadata: LogMetadataDTOCollection { get }\n   |       `- note: protocol requires property 'metadata' with type 'LogMetadataDTOCollection'\n20 | }\n21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:16:14: error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 14 |  logging with proper privacy tags for sensitive data.\n 15 |  */\n 16 | public actor EnhancedLoggingCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 17 |   /// The wrapped implementation\n 18 |   private let wrapped: CryptoServiceProtocol\n    :\n 81 |   }\n 82 | \n 83 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 84 |     encryptedDataIdentifier: String,\n 85 |     keyIdentifier: String,\n    :\n215 |   }\n216 | \n217 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n218 |     length: Int,\n219 |     options: KeyGenerationOptions?=nil\n    :\n258 |   }\n259 | \n260 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n261 |     data: [UInt8],\n262 |     identifier: String\n    :\n300 |   }\n301 | \n302 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n303 |     identifier: String\n304 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n    :\n421 |   }\n422 | \n423 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n424 |     identifier: String\n425 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:47:30: error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n 47 |     rateLimiter: RateLimiter=RateLimiter()\n    |                              `- error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 48 |   ) {\n 49 |     self.wrapped = wrapped\n    :\n443 |  Simple rate limiter for security operations.\n444 |  */\n445 | public class RateLimiter {\n    |              `- note: initializer 'init()' is not '@usableFromInline' or public\n446 |   public enum Operation: String {\n447 |     case encrypt, decrypt, hash, verify, export, generateKey\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:384:15: error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n382 |    - Returns: The exported data or error\n383 |    */\n384 |   public func exportData(\n    |               `- error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n385 |     withIdentifier identifier: String\n386 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:81:8: note: requirement 'exportData(identifier:)' declared here\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: requirement 'exportData(identifier:)' declared here\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:20:14: error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 18 |  validation of cryptographic operations.\n 19 |  */\n 20 | public actor EnhancedSecureCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 21 | \n 22 |   /// The wrapped implementation that does the actual cryptographic work\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/LoggingCryptoServiceImpl.swift:9:14: error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n  7 |  all operations before delegating to the wrapped implementation.\n  8 |  */\n  9 | public actor LoggingCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 10 |   /// The wrapped implementation\n 11 |   private let wrapped: CryptoServiceProtocol\n    :\n339 |    - Returns: Identifier for the imported data or an error\n340 |    */\n341 |   public func importData(\n    |               `- note: candidate has non-matching type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n342 |     _ data: [UInt8],\n343 |     customIdentifier: String?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:93:8: note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:47:31: error: cannot find type 'CryptoProviderProtocol' in scope\n  45 |   \n  46 |   /// Crypto provider for cryptographic operations\n  47 |   private let cryptoProvider: CryptoProviderProtocol\n     |                               `- error: cannot find type 'CryptoProviderProtocol' in scope\n  48 |   \n  49 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:64:21: error: cannot find type 'CryptoProviderProtocol' in scope\n  62 |     wrapped: CryptoServiceProtocol,\n  63 |     secureStorage: SecureStorageProtocol,\n  64 |     cryptoProvider: CryptoProviderProtocol,\n     |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n  65 |     logger: LoggingProtocol\n  66 |   ) {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n264 |    - Returns: Result containing array of identifiers or error details\n265 |    */\n266 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n267 |     await logger.warning(\n268 |       \"List data identifiers operation not supported\",\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecureStorageProtocol.swift:14:8: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n12 |   ///   - identifier: A string identifier for the stored data.\n13 |   /// - Returns: Success or an error.\n14 |   func storeData(_ data: [UInt8], withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n15 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n16 | \n   :\n18 |   /// - Parameter identifier: A string identifying the data to retrieve.\n19 |   /// - Returns: The retrieved data as a byte array or an error.\n20 |   func retrieveData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n21 |     -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n22 | \n   :\n24 |   /// - Parameter identifier: A string identifying the data to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n27 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n28 | \n29 |   /// Lists all available data identifiers.\n30 |   /// - Returns: An array of data identifiers or an error.\n31 |   func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityStorageError\u003e\n   |        `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n32 | }\n33 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/OptionTypes.swift:109:14: warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n107 | public struct SendableOptionsDictionary: Sendable {\n108 |   /// The underlying dictionary\n109 |   public let dictionary: [String: Any]\n    |              `- warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n110 |   \n111 |   /**\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:55:8: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 53 |   private static func convert(\n 54 |     _ algorithm: SecurityCoreInterfaces\n 55 |       .EncryptionAlgorithm\n    |        `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 56 |   ) -\u003e EncryptionAlgorithm {\n 57 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:69:4: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 67 | \n 68 |   private static func convertToInterface(_ algorithm: EncryptionAlgorithm) -\u003e SecurityCoreInterfaces\n 69 |   .EncryptionAlgorithm {\n    |    `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 70 |     switch algorithm {\n 71 |       case .aes:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:81:62: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 79 | \n 80 |   // Helper methods for mode conversion\n 81 |   private static func convert(_ mode: SecurityCoreInterfaces.EncryptionMode) -\u003e EncryptionMode {\n    |                                                              `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 82 |     switch mode {\n 83 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:94:4: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 92 | \n 93 |   private static func convertToInterface(_ mode: EncryptionMode) -\u003e SecurityCoreInterfaces\n 94 |   .EncryptionMode {\n    |    `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 95 |     switch mode {\n 96 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:109:8: error: cannot find type 'EncryptionPadding' in scope\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n109 |   ) -\u003e EncryptionPadding {\n    |        `- error: cannot find type 'EncryptionPadding' in scope\n110 |     switch padding {\n111 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:108:8: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n106 |   private static func convert(\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n    |        `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n109 |   ) -\u003e EncryptionPadding {\n110 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:122:4: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n122 |   .EncryptionPadding {\n    |    `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n123 |     switch padding {\n124 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:121:53: error: cannot find type 'EncryptionPadding' in scope\n119 |   }\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n    |                                                     `- error: cannot find type 'EncryptionPadding' in scope\n122 |   .EncryptionPadding {\n123 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:147:8: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n145 |     _ options: SecurityCoreInterfaces\n146 |       .DecryptionOptions?\n147 |   ) -\u003e DecryptionOptions? {\n    |        `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n148 |     guard let options else { return nil }\n149 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:164:52: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n162 |    - Returns: The converted options or nil if input was nil\n163 |    */\n164 |   public static func convertToInterface(_ options: DecryptionOptions?) -\u003e SecurityCoreInterfaces\n    |                                                    `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n165 |   .DecryptionOptions? {\n166 |     guard let options else { return nil }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:216:8: error: cannot find type 'HashingAlgorithm' in scope\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n216 |   ) -\u003e HashingAlgorithm {\n    |        `- error: cannot find type 'HashingAlgorithm' in scope\n217 |     switch algorithm {\n218 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:215:8: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n213 |   private static func convert(\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n    |        `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n216 |   ) -\u003e HashingAlgorithm {\n217 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:231:4: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n231 |   .HashingAlgorithm {\n    |    `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n232 |     switch algorithm {\n233 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:230:55: error: cannot find type 'HashingAlgorithm' in scope\n228 |   }\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n    |                                                       `- error: cannot find type 'HashingAlgorithm' in scope\n231 |   .HashingAlgorithm {\n232 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:26:29: error: extra arguments at positions #2, #3, #4 in call\n 24 |     guard let options else { return nil }\n 25 | \n 26 |     return EncryptionOptions(\n    |                             `- error: extra arguments at positions #2, #3, #4 in call\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:154:10: note: 'init(algorithm:authenticatedData:)' declared here\n152 | \n153 |   /// Initialises encryption options with defaults.\n154 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n155 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n156 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:27:18: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 25 | \n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n    |                  `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:27:34: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 25 | \n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n    |                                  `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:28:29: error: value of type 'EncryptionOptions' has no member 'mode'\n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n    |                             `- error: value of type 'EncryptionOptions' has no member 'mode'\n 29 |       padding: convert(options.padding),\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:29:32: error: value of type 'EncryptionOptions' has no member 'padding'\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n    |                                `- error: value of type 'EncryptionOptions' has no member 'padding'\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n 31 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:30:44: error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 31 |     )\n 32 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:44:52: error: extra arguments at positions #2, #3, #4 in call\n 42 |     guard let options else { return nil }\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n    |                                                    `- error: extra arguments at positions #2, #3, #4 in call\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:154:10: note: 'init(algorithm:authenticatedData:)' declared here\n152 | \n153 |   /// Initialises encryption options with defaults.\n154 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n155 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n156 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:45:18: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n    |                  `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:45:45: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n    |                                             `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:46:40: error: value of type 'EncryptionOptions' has no member 'mode'\n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n    |                                        `- error: value of type 'EncryptionOptions' has no member 'mode'\n 47 |       padding: convertToInterface(options.padding),\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:47:43: error: value of type 'EncryptionOptions' has no member 'padding'\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n    |                                           `- error: value of type 'EncryptionOptions' has no member 'padding'\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n 49 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:48:44: error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 49 |     )\n 50 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:59:17: error: type 'EncryptionAlgorithm' has no member 'aes'\n 57 |     switch algorithm {\n 58 |       case .aes:\n 59 |         return .aes\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 60 |       case .chacha20:\n 61 |         return .chacha20\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:61:17: error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 59 |         return .aes\n 60 |       case .chacha20:\n 61 |         return .chacha20\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 62 |       @unknown default:\n 63 |         // Default to a safe algorithm if an unknown one is provided\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:64:17: error: type 'EncryptionAlgorithm' has no member 'aes'\n 62 |       @unknown default:\n 63 |         // Default to a safe algorithm if an unknown one is provided\n 64 |         return .aes\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 65 |     }\n 66 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:71:13: error: type 'EncryptionAlgorithm' has no member 'aes'\n 69 |   .EncryptionAlgorithm {\n 70 |     switch algorithm {\n 71 |       case .aes:\n    |             `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 72 |         return .aes\n 73 |       case .chacha20:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:73:13: error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 71 |       case .aes:\n 72 |         return .aes\n 73 |       case .chacha20:\n    |             `- error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 74 |         return .chacha20\n 75 |       @unknown default:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:150:29: error: extra arguments at positions #2, #4 in call\n148 |     guard let options else { return nil }\n149 | \n150 |     return DecryptionOptions(\n    |                             `- error: extra arguments at positions #2, #4 in call\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:31:10: note: 'init(algorithm:authenticatedData:padding:)' declared here\n29 |      - padding: Optional padding mode to use\n30 |    */\n31 |   public init(\n   |          `- note: 'init(algorithm:authenticatedData:padding:)' declared here\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:151:43: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n149 | \n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n    |                                           `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:41: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'PaddingMode?'\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n    |                                         `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'PaddingMode?'\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n155 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:151:59: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n149 | \n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n    |                                                           `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:152:54: error: value of type 'DecryptionOptions' has no member 'mode'\n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n    |                                                      `- error: value of type 'DecryptionOptions' has no member 'mode'\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:57: error: value of type 'DecryptionOptions' has no member 'padding'\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n    |                                                         `- error: value of type 'DecryptionOptions' has no member 'padding'\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n155 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:154:44: error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n155 |     )\n156 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:168:52: error: extra arguments at positions #2, #3, #4 in call\n166 |     guard let options else { return nil }\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n    |                                                    `- error: extra arguments at positions #2, #3, #4 in call\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:172:10: note: 'init(algorithm:authenticatedData:)' declared here\n170 | \n171 |   /// Initialises decryption options with defaults.\n172 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n173 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n174 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:43: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n    |                                           `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:70: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n    |                                                                      `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:170:65: error: value of type 'DecryptionOptions' has no member 'mode'\n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n    |                                                                 `- error: value of type 'DecryptionOptions' has no member 'mode'\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:171:68: error: cannot convert value of type 'PaddingMode?' to expected argument type 'EncryptionOptions?'\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n    |                                                                    `- error: cannot convert value of type 'PaddingMode?' to expected argument type 'EncryptionOptions?'\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n173 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:172:44: error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n173 |     )\n174 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:192:21: error: extra argument 'salt' in call\n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n192 |       salt: options.salt\n    |                     `- error: extra argument 'salt' in call\n193 |     )\n194 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:191:18: error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n189 | \n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n    |                  `- error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n192 |       salt: options.salt\n193 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:191:34: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n189 | \n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n    |                                  `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n192 |       salt: options.salt\n193 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:192:21: error: value of type 'HashingOptions' has no member 'salt'\n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n192 |       salt: options.salt\n    |                     `- error: value of type 'HashingOptions' has no member 'salt'\n193 |     )\n194 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:208:21: error: extra argument 'salt' in call\n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n208 |       salt: options.salt\n    |                     `- error: extra argument 'salt' in call\n209 |     )\n210 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:207:18: error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n205 | \n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n    |                  `- error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n208 |       salt: options.salt\n209 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:207:45: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n205 | \n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n    |                                             `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n208 |       salt: options.salt\n209 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:208:21: error: value of type 'HashingOptions' has no member 'salt'\n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n208 |       salt: options.salt\n    |                     `- error: value of type 'HashingOptions' has no member 'salt'\n209 |     )\n210 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:264:33: error: extra argument 'customIdentifier' in call\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n264 |       customIdentifier: options.customIdentifier\n    |                                 `- error: extra argument 'customIdentifier' in call\n265 |     )\n266 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:263:33: error: value of type 'KeyGenerationOptions' has no member 'useSecureEnclave'\n261 |     return KeyGenerationOptions(\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'useSecureEnclave'\n264 |       customIdentifier: options.customIdentifier\n265 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:264:33: error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n264 |       customIdentifier: options.customIdentifier\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n265 |     )\n266 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:278:55: error: extra arguments at positions #2, #3 in call\n276 |     guard let options else { return nil }\n277 | \n278 |     return SecurityCoreInterfaces.KeyGenerationOptions(\n    |                                                       `- error: extra arguments at positions #2, #3 in call\n279 |       keyType: convertToInterface(options.keyType),\n280 |       useSecureEnclave: options.useSecureEnclave,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:201:10: note: 'init(persistent:keyType:)' declared here\n199 | \n200 |   /// Initialises key generation options with defaults.\n201 |   public init(persistent: Bool=true, keyType: KeyType = .symmetric) {\n    |          `- note: 'init(persistent:keyType:)' declared here\n202 |     self.persistent=persistent\n203 |     self.keyType=keyType\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:281:33: error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n279 |       keyType: convertToInterface(options.keyType),\n280 |       useSecureEnclave: options.useSecureEnclave,\n281 |       customIdentifier: options.customIdentifier\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n282 |     )\n283 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:289:17: error: type 'KeyType' has no member 'symmetric'\n287 |     switch keyType {\n288 |       case .symmetric:\n289 |         return .symmetric\n    |                 `- error: type 'KeyType' has no member 'symmetric'\n290 |       case .asymmetric:\n291 |         return .asymmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:291:17: error: type 'KeyType' has no member 'asymmetric'\n289 |         return .symmetric\n290 |       case .asymmetric:\n291 |         return .asymmetric\n    |                 `- error: type 'KeyType' has no member 'asymmetric'\n292 |       @unknown default:\n293 |         // Default to symmetric if unknown\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:294:17: error: type 'KeyType' has no member 'symmetric'\n292 |       @unknown default:\n293 |         // Default to symmetric if unknown\n294 |         return .symmetric\n    |                 `- error: type 'KeyType' has no member 'symmetric'\n295 |     }\n296 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:287:5: warning: switch must be exhaustive\n285 |   // Helper methods for key type conversion\n286 |   private static func convert(_ keyType: SecurityCoreInterfaces.KeyType) -\u003e KeyType {\n287 |     switch keyType {\n    |     |- warning: switch must be exhaustive\n    |     `- note: add missing case: '.hybrid'\n288 |       case .symmetric:\n289 |         return .symmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:300:13: error: type 'KeyType' has no member 'symmetric'\n298 |   private static func convertToInterface(_ keyType: KeyType) -\u003e SecurityCoreInterfaces.KeyType {\n299 |     switch keyType {\n300 |       case .symmetric:\n    |             `- error: type 'KeyType' has no member 'symmetric'\n301 |         return .symmetric\n302 |       case .asymmetric:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:302:13: error: type 'KeyType' has no member 'asymmetric'\n300 |       case .symmetric:\n301 |         return .symmetric\n302 |       case .asymmetric:\n    |             `- error: type 'KeyType' has no member 'asymmetric'\n303 |         return .asymmetric\n304 |       @unknown default:\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:97:22: error: extra argument 'secureStorage' in call\n 95 |   ) async -\u003e CryptoServiceProtocol {\n 96 |     await CryptoServiceFactory.createMock(\n 97 |       secureStorage: secureStorage,\n    |                      `- error: extra argument 'secureStorage' in call\n 98 |       configuration: configuration\n 99 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:228:18: error: cannot find type 'DeploymentEnvironment' in scope\n226 |     secureStorage: SecureStorageProtocol?=nil,\n227 |     logger: LoggingProtocol?=nil,\n228 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:98:32: error: cannot find 'DefaultConsoleLogger' in scope\n 96 |     logger: LoggingProtocol?=nil\n 97 |   ) async -\u003e CryptoServiceProtocol {\n 98 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n 99 | \n100 |     return await DefaultCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:119:32: error: cannot find 'DefaultConsoleLogger' in scope\n117 |     logger: LoggingProtocol?=nil\n118 |   ) async -\u003e CryptoServiceProtocol {\n119 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n120 | \n121 |     return await LoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:143:32: error: cannot find 'DefaultConsoleLogger' in scope\n141 |     logger: LoggingProtocol?=nil\n142 |   ) async -\u003e CryptoServiceProtocol {\n143 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n144 | \n145 |     return await EnhancedLoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:167:32: error: cannot find 'DefaultConsoleLogger' in scope\n165 |     logger: LoggingProtocol?=nil\n166 |   ) async -\u003e CryptoServiceProtocol {\n167 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n168 | \n169 |     // Create secure service with enhanced parameters\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:179:16: error: extra argument 'storage' in call\n177 |         )\n178 |       ),\n179 |       storage: createSecureStorage(),\n    |                `- error: extra argument 'storage' in call\n180 |       logger: actualLogger\n181 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:201:32: error: cannot find 'DefaultConsoleLogger' in scope\n199 |     logger: LoggingProtocol?=nil\n200 |   ) async -\u003e CryptoServiceProtocol {\n201 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n202 | \n203 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:204:22: error: cannot find 'MockCryptoConfiguration' in scope\n202 | \n203 |     return await MockCryptoServiceImpl(\n204 |       configuration: MockCryptoConfiguration(\n    |                      `- error: cannot find 'MockCryptoConfiguration' in scope\n205 |         encryptionSucceeds: shouldSucceed,\n206 |         decryptionSucceeds: shouldSucceed,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:213:27: error: missing argument for parameter 'secureStorage' in call\n211 |         retrievalSucceeds: shouldSucceed\n212 |       ),\n213 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureStorage' in call\n214 |     )\n215 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:230:32: error: cannot find 'DefaultConsoleLogger' in scope\n228 |     environment: DeploymentEnvironment = .production\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n231 | \n232 |     switch environment {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:245:26: error: cannot find 'MockCryptoConfiguration' in scope\n243 |       case .testing:\n244 |         return await MockCryptoServiceImpl(\n245 |           configuration: MockCryptoConfiguration(\n    |                          `- error: cannot find 'MockCryptoConfiguration' in scope\n246 |             encryptionSucceeds: true,\n247 |             decryptionSucceeds: true,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:254:31: error: missing argument for parameter 'secureStorage' in call\n252 |             retrievalSucceeds: true\n253 |           ),\n254 |           logger: actualLogger\n    |                               `- error: missing argument for parameter 'secureStorage' in call\n255 |         )\n256 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:299:32: error: cannot find 'DefaultConsoleLogger' in scope\n297 |     logger: LoggingProtocol?=nil\n298 |   ) async -\u003e CryptoServiceProtocol {\n299 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n300 | \n301 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:302:46: error: 'await' cannot appear to the right of a non-assignment operator\n300 | \n301 |     // Use the provided secure storage or create a default one\n302 |     let actualSecureStorage=secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                              `- error: 'await' cannot appear to the right of a non-assignment operator\n303 | \n304 |     // Create provider based on the specified type\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:327:42: error: missing argument label 'providerType:' in call\n325 | \n326 |       // Return a basic implementation as fallback\n327 |       return await createWithProviderType(\n    |                                          `- error: missing argument label 'providerType:' in call\n328 |         .basic,\n329 |         secureStorage: actualSecureStorage,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:358:32: error: cannot find 'DefaultConsoleLogger' in scope\n356 |     logger: LoggingProtocol?=nil\n357 |   ) async -\u003e CryptoServiceProtocol {\n358 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n359 | \n360 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:361:46: error: 'await' cannot appear to the right of a non-assignment operator\n359 | \n360 |     // Use the provided secure storage or create a default one\n361 |     let actualSecureStorage=secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                              `- error: 'await' cannot appear to the right of a non-assignment operator\n362 | \n363 |     // Create a crypto service implementation using DefaultCryptoServiceWithProviderImpl\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:386:32: error: cannot find 'DefaultConsoleLogger' in scope\n384 |     logger: LoggingProtocol?=nil\n385 |   ) async -\u003e SecureStorageProtocol {\n386 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n387 |     let url=storageURL ?? URL(fileURLWithPath: NSTemporaryDirectory())\n388 |       .appendingPathComponent(\"CryptoSecureStorage\")\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:393:16: error: extra argument 'baseURL' in call\n391 |     return InMemorySecureStorage(\n392 |       logger: actualLogger,\n393 |       baseURL: url\n    |                `- error: extra argument 'baseURL' in call\n394 |     )\n395 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:421:32: error: cannot find 'DefaultConsoleLogger' in scope\n419 |     logger: LoggingProtocol?=nil\n420 |   ) async -\u003e CryptoServiceProtocol {\n421 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n422 |     return await MockCryptoServiceImpl(configuration: configuration, logger: actualLogger)\n423 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:422:90: error: missing argument for parameter 'secureStorage' in call\n420 |   ) async -\u003e CryptoServiceProtocol {\n421 |     let actualLogger=logger ?? DefaultConsoleLogger()\n422 |     return await MockCryptoServiceImpl(configuration: configuration, logger: actualLogger)\n    |                                                                                          `- error: missing argument for parameter 'secureStorage' in call\n423 |   }\n424 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:440:7: warning: no 'async' operations occur within 'await' expression\n438 |   ) async -\u003e CryptoServiceProtocol {\n439 |     if let secureLogger {\n440 |       await EnhancedLoggingCryptoServiceImpl(\n    |       `- warning: no 'async' operations occur within 'await' expression\n441 |         wrapped: wrapped,\n442 |         logger: secureLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:445:7: warning: no 'async' operations occur within 'await' expression\n443 |       )\n444 |     } else {\n445 |       await LoggingCryptoServiceImpl(\n    |       `- warning: no 'async' operations occur within 'await' expression\n446 |         wrapped: wrapped,\n447 |         logger: logger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:33:14: error: cannot find type 'SecurityProviderOptions' in scope\n31 |     data: [UInt8],\n32 |     keyIdentifier: String?=nil,\n33 |     options: SecurityProviderOptions?=nil\n   |              `- error: cannot find type 'SecurityProviderOptions' in scope\n34 |   ) async -\u003e Result\u003c[UInt8], Error\u003e {\n35 |     // Basic implementation of security operations\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:80:16: error: cannot find type 'SecurityProviderOptions' in scope\n78 | \n79 |   public func generateKey(\n80 |     options _: SecurityProviderOptions\n   |                `- error: cannot find type 'SecurityProviderOptions' in scope\n81 |   ) async -\u003e Result\u003cString, Error\u003e {\n82 |     // In a real implementation, this would generate an actual cryptographic key\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              |- error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n   |              `- note: add stubs for conformance\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:30:8: note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 28 | \n 29 |   /// Access to cryptographic service implementation\n 30 |   func cryptoService() async -\u003e CryptoServiceProtocol\n    |        `- note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 31 | \n 32 |   /// Access to key management service implementation\n 33 |   func keyManager() async -\u003e KeyManagementProtocol\n    |        `- note: protocol requires function 'keyManager()' with type '() async -\u003e any KeyManagementProtocol'\n 34 | \n 35 |   // MARK: - Core Operations\n    :\n 41 |    - Returns: Result containing encrypted data or error\n 42 |    */\n 43 |   func encrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'encrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 44 | \n 45 |   /**\n    :\n 49 |    - Returns: Result containing decrypted data or error\n 50 |    */\n 51 |   func decrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'decrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 52 | \n 53 |   /**\n    :\n 65 |    - Returns: Result containing storage confirmation or error\n 66 |    */\n 67 |   func secureStore(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureStore(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 68 | \n 69 |   /**\n    :\n 73 |    - Returns: Result containing retrieved data or error\n 74 |    */\n 75 |   func secureRetrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureRetrieve(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 76 | \n 77 |   /**\n    :\n 81 |    - Returns: Result containing deletion confirmation or error\n 82 |    */\n 83 |   func secureDelete(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureDelete(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 84 | \n 85 |   /**\n    :\n 89 |    - Returns: Result containing signature data or error\n 90 |    */\n 91 |   func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'sign(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 92 | \n 93 |   /**\n    :\n 97 |    - Returns: Result containing verification status or error\n 98 |    */\n 99 |   func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'verify(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n100 | \n101 |   /**\n    :\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n    :\n121 |    - Returns: A properly configured SecurityConfigDTO\n122 |    */\n123 |   func createSecureConfig(options: SecurityConfigOptions) async -\u003e SecurityConfigDTO\n    |        `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n124 | }\n125 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:37:13: error: type 'SecurityOperation' has no member 'encryption'\n35 |     // Basic implementation of security operations\n36 |     switch operation {\n37 |       case .encryption:\n   |             `- error: type 'SecurityOperation' has no member 'encryption'\n38 |         guard let keyIdentifier else {\n39 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:50:13: error: type 'SecurityOperation' has no member 'decryption'\n48 |         return .success(encryptedData)\n49 | \n50 |       case .decryption:\n   |             `- error: type 'SecurityOperation' has no member 'decryption'\n51 |         guard let keyIdentifier else {\n52 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:59:13: error: type 'SecurityOperation' has no member 'hashing'\n57 |         return .success(data)\n58 | \n59 |       case .hashing:\n   |             `- error: type 'SecurityOperation' has no member 'hashing'\n60 |         // Determine the hash algorithm to use\n61 |         let algorithm=options?.hashAlgorithm ?? .sha256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:39:27: error: module 'UmbraErrors' has no member named 'Security'\n37 |       case .encryption:\n38 |         guard let keyIdentifier else {\n39 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n   |                           `- error: module 'UmbraErrors' has no member named 'Security'\n40 |         }\n41 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:52:27: error: module 'UmbraErrors' has no member named 'Security'\n50 |       case .decryption:\n51 |         guard let keyIdentifier else {\n52 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n   |                           `- error: module 'UmbraErrors' has no member named 'Security'\n53 |         }\n54 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:75:25: error: module 'UmbraErrors' has no member named 'Security'\n73 | \n74 |       default:\n75 |         return .failure(UmbraErrors.Security.Core.unsupportedOperation)\n   |                         `- error: module 'UmbraErrors' has no member named 'Security'\n76 |     }\n77 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 | \n 21 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:17:14: error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  as the baseline implementation when more specialised providers aren't selected.\n 16 |  */\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n 97 |   }\n 98 | \n 99 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n100 |     encryptedDataIdentifier: String,\n101 |     keyIdentifier: String,\n    :\n198 |   }\n199 | \n200 |   public func verifyHash(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n201 |     dataIdentifier: String,\n202 |     hashIdentifier: String,\n    :\n259 |   }\n260 | \n261 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n262 |     length: Int,\n263 |     options: CryptoServiceOptions?=nil\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:53:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n 51 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n 52 | \n 53 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n 54 |       \"Encrypting data with key: \\(keyIdentifier)\",\n 55 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:81:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n 79 |     // Store the encrypted data\n 80 |     let dataIdentifier=\"encrypted_\\(UUID().uuidString)\"\n 81 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n 82 |       data: encryptedData,\n 83 |       identifier: dataIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:95:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n 93 |           source: \"DefaultCryptoService\"\n 94 |         )\n 95 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n 96 |     }\n 97 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:107:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n105 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n106 | \n107 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n108 |       \"Decrypting data with identifier: \\(encryptedDataIdentifier) using key: \\(keyIdentifier)\",\n109 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:114:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n112 | \n113 |     // Retrieve the encrypted data\n114 |     let dataResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n115 |       identifier: encryptedDataIdentifier\n116 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:136:24: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n134 |           return .success(decryptedData)\n135 |         } else {\n136 |           await logger.error(\n    |                        `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n137 |             \"Invalid encrypted data format\",\n138 |             metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:141:44: error: module 'UmbraErrors' has no member named 'Security'\n139 |             source: \"DefaultCryptoService\"\n140 |           )\n141 |           return .failure(.operationFailed(UmbraErrors.Security.Core.invalidData))\n    |                                            `- error: module 'UmbraErrors' has no member named 'Security'\n142 |         }\n143 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:150:26: error: enum case 'keyNotFound' has no associated values\n148 |           source: \"DefaultCryptoService\"\n149 |         )\n150 |         return .failure(.keyNotFound(encryptedDataIdentifier))\n    |                          `- error: enum case 'keyNotFound' has no associated values\n151 |     }\n152 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:162:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n160 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n161 | \n162 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n163 |       \"Generating hash with algorithm: \\(algorithm ?? .sha256)\",\n164 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:171:27: error: switch must be exhaustive\n169 | \n170 |     // For this implementation, we'll create a simple mock hash\n171 |     var hashData: [UInt8]=switch algorithm ?? .sha256 {\n    |                           |- error: switch must be exhaustive\n    |                           `- note: add missing case: '.blake2b'\n172 |       case .sha256:\n173 |         // Generate a mock SHA-256 hash (32 bytes)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:182:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n180 |     // Store the hash\n181 |     let hashIdentifier=\"hash_\\(UUID().uuidString)\"\n182 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n183 |       data: hashData,\n184 |       identifier: hashIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:196:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n194 |           source: \"DefaultCryptoService\"\n195 |         )\n196 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n197 |     }\n198 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:208:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n206 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n207 | \n208 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n209 |       \"Verifying hash for data with identifier: \\(dataIdentifier)\",\n210 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:215:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n213 | \n214 |     // Retrieve the data\n215 |     let dataResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n216 |       identifier: dataIdentifier\n217 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:227:24: error: enum case 'keyNotFound' has no associated values\n225 |         )\n226 |       }\n227 |       return .failure(.keyNotFound(dataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n228 |     }\n229 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:231:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n229 | \n230 |     // Retrieve the expected hash\n231 |     let hashResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n232 |       identifier: hashIdentifier\n233 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:243:24: error: enum case 'keyNotFound' has no associated values\n241 |         )\n242 |       }\n243 |       return .failure(.keyNotFound(hashIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n244 |     }\n245 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:252:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n250 |     let matchesHash=Bool.random()\n251 | \n252 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n253 |       \"Hash verification result: \\(matchesHash)\",\n254 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:268:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n266 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n267 | \n268 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n269 |       \"Generating key with length: \\(length)\",\n270 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:276:20: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n274 |     // Validate key length\n275 |     guard length \u003e= 16 else { // Minimum 128-bit key\n276 |       await logger.error(\n    |                    `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n277 |         \"Key length too short: \\(length) bytes\",\n278 |         metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:281:40: error: module 'UmbraErrors' has no member named 'Security'\n279 |         source: \"DefaultCryptoService\"\n280 |       )\n281 |       return .failure(.operationFailed(UmbraErrors.Security.Core.invalidKeyLength))\n    |                                        `- error: module 'UmbraErrors' has no member named 'Security'\n282 |     }\n283 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:289:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n287 |     // Store the key\n288 |     let keyIdentifier=\"key_\\(UUID().uuidString)\"\n289 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n290 |       data: keyData,\n291 |       identifier: keyIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:303:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n301 |           source: \"DefaultCryptoService\"\n302 |         )\n303 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n304 |     }\n305 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:315:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n313 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n314 | \n315 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n316 |       \"Storing data with identifier: \\(identifier)\",\n317 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:321:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n319 |     )\n320 | \n321 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n322 |       data: data,\n323 |       identifier: identifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:335:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n333 |           source: \"DefaultCryptoService\"\n334 |         )\n335 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n336 |     }\n337 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:346:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n344 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n345 | \n346 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n347 |       \"Retrieving data with identifier: \\(identifier)\",\n348 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:352:44: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n350 |     )\n351 | \n352 |     let retrieveResult=await secureStorage.retrieveSecurely(\n    |                                            `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n353 |       identifier: identifier\n354 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:365:26: error: enum case 'keyNotFound' has no associated values\n363 |           source: \"DefaultCryptoService\"\n364 |         )\n365 |         return .failure(.keyNotFound(identifier))\n    |                          `- error: enum case 'keyNotFound' has no associated values\n366 |     }\n367 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:376:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n374 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n375 | \n376 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n377 |       \"Exporting data with identifier: \\(identifier)\",\n378 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:374:9: warning: initialization of immutable value 'actualOptions' was never used; consider replacing with assignment to '_' or removing it\n372 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n373 |     // Use provided options or convert our factory options to CryptoServiceOptions\n374 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n    |         `- warning: initialization of immutable value 'actualOptions' was never used; consider replacing with assignment to '_' or removing it\n375 | \n376 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:394:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n392 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n393 | \n394 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n395 |       \"Importing data with identifier: \\(identifier)\",\n396 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:400:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n398 |     )\n399 | \n400 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n401 |       data: data,\n402 |       identifier: identifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:414:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n412 |           source: \"DefaultCryptoService\"\n413 |         )\n414 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n415 |     }\n416 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:425:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n423 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n424 | \n425 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n426 |       \"Deleting data with identifier: \\(identifier)\",\n427 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:431:42: error: value of type 'any SecureStorageProtocol' has no member 'deleteSecurely'\n429 |     )\n430 | \n431 |     let deleteResult=await secureStorage.deleteSecurely(\n    |                                          `- error: value of type 'any SecureStorageProtocol' has no member 'deleteSecurely'\n432 |       identifier: identifier\n433 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:445:28: error: enum case 'keyNotFound' has no associated values\n443 |         )\n444 |         if case .keyNotFound=error {\n445 |           return .failure(.keyNotFound(identifier))\n    |                            `- error: enum case 'keyNotFound' has no associated values\n446 |         } else {\n447 |           return .failure(.storageFailure(error))\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:447:28: error: type 'SecurityStorageError' has no member 'storageFailure'\n445 |           return .failure(.keyNotFound(identifier))\n446 |         } else {\n447 |           return .failure(.storageFailure(error))\n    |                            `- error: type 'SecurityStorageError' has no member 'storageFailure'\n448 |         }\n449 |     }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 |   private let logger: LoggingProtocol\n 21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:17:14: error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  CryptoServiceProtocol API.\n 16 |  */\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n102 |   }\n103 | \n104 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n105 |     encryptedDataIdentifier: String,\n106 |     keyIdentifier: String,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:49:29: error: cannot find 'SecurityProviderOptions' in scope\n 47 | \n 48 |     // Prepare operation options\n 49 |     let encryptionOptions = SecurityProviderOptions(\n    |                             `- error: cannot find 'SecurityProviderOptions' in scope\n 50 |       algorithm: .aes256GCM,\n 51 |       mode: .encrypt,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:50:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n 48 |     // Prepare operation options\n 49 |     let encryptionOptions = SecurityProviderOptions(\n 50 |       algorithm: .aes256GCM,\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n 51 |       mode: .encrypt,\n 52 |       keySize: 256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:51:14: error: cannot infer contextual base in reference to member 'encrypt'\n 49 |     let encryptionOptions = SecurityProviderOptions(\n 50 |       algorithm: .aes256GCM,\n 51 |       mode: .encrypt,\n    |              `- error: cannot infer contextual base in reference to member 'encrypt'\n 52 |       keySize: 256\n 53 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:56:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n 54 | \n 55 |     // Delegate to security provider\n 56 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n 57 |       .encryption,\n 58 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:57:8: error: cannot infer contextual base in reference to member 'encryption'\n 55 |     // Delegate to security provider\n 56 |     let result = await provider.performOperation(\n 57 |       .encryption,\n    |        `- error: cannot infer contextual base in reference to member 'encryption'\n 58 |       data: data,\n 59 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:87:30: error: type 'SecurityStorageError' has no member 'storageFailure'\n 85 |               )\n 86 |             )\n 87 |             return .failure(.storageFailure(error))\n    |                              `- error: type 'SecurityStorageError' has no member 'storageFailure'\n 88 |         }\n 89 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:123:24: error: enum case 'keyNotFound' has no associated values\n121 |         )\n122 |       }\n123 |       return .failure(.keyNotFound(encryptedDataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n124 |     }\n125 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:138:29: error: cannot find 'SecurityProviderOptions' in scope\n136 | \n137 |     // Prepare operation options\n138 |     let decryptionOptions = SecurityProviderOptions(\n    |                             `- error: cannot find 'SecurityProviderOptions' in scope\n139 |       algorithm: .aes256GCM,\n140 |       mode: .decrypt,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:139:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n137 |     // Prepare operation options\n138 |     let decryptionOptions = SecurityProviderOptions(\n139 |       algorithm: .aes256GCM,\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n140 |       mode: .decrypt,\n141 |       keySize: 256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:140:14: error: cannot infer contextual base in reference to member 'decrypt'\n138 |     let decryptionOptions = SecurityProviderOptions(\n139 |       algorithm: .aes256GCM,\n140 |       mode: .decrypt,\n    |              `- error: cannot infer contextual base in reference to member 'decrypt'\n141 |       keySize: 256\n142 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:145:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n143 | \n144 |     // Delegate to security provider\n145 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n146 |       .decryption,\n147 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:146:8: error: cannot infer contextual base in reference to member 'decryption'\n144 |     // Delegate to security provider\n145 |     let result = await provider.performOperation(\n146 |       .decryption,\n    |        `- error: cannot infer contextual base in reference to member 'decryption'\n147 |       data: data,\n148 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:186:28: error: cannot find type 'HashingAlgorithm' in scope\n184 | \n185 |     // Map hash algorithm to security provider algorithm\n186 |     let providerAlgorithm: HashingAlgorithm = switch algorithm {\n    |                            `- error: cannot find type 'HashingAlgorithm' in scope\n187 |       case .sha256:\n188 |         .sha256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:194:23: error: cannot find 'SecurityProviderOptions' in scope\n192 | \n193 |     // Prepare operation options\n194 |     let hashOptions = SecurityProviderOptions(\n    |                       `- error: cannot find 'SecurityProviderOptions' in scope\n195 |       hashAlgorithm: providerAlgorithm\n196 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:199:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n197 | \n198 |     // Delegate to security provider\n199 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n200 |       .hashing,\n201 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:200:8: error: cannot infer contextual base in reference to member 'hashing'\n198 |     // Delegate to security provider\n199 |     let result = await provider.performOperation(\n200 |       .hashing,\n    |        `- error: cannot infer contextual base in reference to member 'hashing'\n201 |       data: data,\n202 |       options: hashOptions\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:229:30: error: type 'SecurityStorageError' has no member 'storageFailure'\n227 |               )\n228 |             )\n229 |             return .failure(.storageFailure(error))\n    |                              `- error: type 'SecurityStorageError' has no member 'storageFailure'\n230 |         }\n231 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:264:24: error: enum case 'keyNotFound' has no associated values\n262 |         )\n263 |       }\n264 |       return .failure(.keyNotFound(dataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n265 |     }\n266 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:281:24: error: enum case 'keyNotFound' has no associated values\n279 |         )\n280 |       }\n281 |       return .failure(.keyNotFound(expectedHashIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n282 |     }\n283 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:296:33: error: value of type 'any SecurityProviderProtocol' has no member 'verifyHash'\n294 | \n295 |     // Delegate to security provider\n296 |     let result = await provider.verifyHash(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'verifyHash'\n297 |       data: data,\n298 |       expectedHash: expectedHash\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:329:22: error: cannot find 'SecurityKeyOptions' in scope\n327 |     \n328 |     // Prepare key generation options\n329 |     let keyOptions = SecurityKeyOptions(\n    |                      `- error: cannot find 'SecurityKeyOptions' in scope\n330 |       keySize: length * 8,\n331 |       algorithm: .aes256GCM\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:331:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n329 |     let keyOptions = SecurityKeyOptions(\n330 |       keySize: length * 8,\n331 |       algorithm: .aes256GCM\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n332 |     )\n333 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:8:15: error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n 6 |  Enhanced log context for crypto operations with privacy controls\n 7 |  */\n 8 | public struct EnhancedLogContext: LogContextDTO {\n   |               |- error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n   |               `- note: add stubs for conformance\n 9 |   /// Domain name for the log context\n10 |   public let domainName: String\n   :\n14 |   \n15 |   /// Additional context metadata as key-value pairs\n16 |   public let metadata: [String: String]\n   |              `- note: candidate has non-matching type '[String : String]'\n17 |   \n18 |   /// Privacy level for each metadata field\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:13:7: note: protocol requires property 'source' with type 'String?'\n11 | \n12 |   /// Optional source information (class, file, etc.)\n13 |   var source: String? { get }\n   |       `- note: protocol requires property 'source' with type 'String?'\n14 | \n15 |   /// Optional correlation ID for tracing related log events\n16 |   var correlationID: String? { get }\n   |       `- note: protocol requires property 'correlationID' with type 'String?'\n17 | \n18 |   /// The metadata collection for this context\n19 |   var metadata: LogMetadataDTOCollection { get }\n   |       `- note: protocol requires property 'metadata' with type 'LogMetadataDTOCollection'\n20 | }\n21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:63:7: error: switch must be exhaustive\n61 |       let privacy = privacyLevel(for: key)\n62 |       \n63 |       switch privacy {\n   |       |- error: switch must be exhaustive\n   |       `- note: add missing case: '.hash'\n64 |       case .private:\n65 |         _ = collection.withPrivate(key: key, value: value)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:16:14: error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 14 |  logging with proper privacy tags for sensitive data.\n 15 |  */\n 16 | public actor EnhancedLoggingCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 17 |   /// The wrapped implementation\n 18 |   private let wrapped: CryptoServiceProtocol\n    :\n 81 |   }\n 82 | \n 83 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 84 |     encryptedDataIdentifier: String,\n 85 |     keyIdentifier: String,\n    :\n215 |   }\n216 | \n217 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n218 |     length: Int,\n219 |     options: KeyGenerationOptions?=nil\n    :\n258 |   }\n259 | \n260 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n261 |     data: [UInt8],\n262 |     identifier: String\n    :\n300 |   }\n301 | \n302 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n303 |     identifier: String\n304 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n    :\n421 |   }\n422 | \n423 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n424 |     identifier: String\n425 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:58:37: error: incorrect argument label in call (have 'data:keyIdentifier:options:', expected 'dataIdentifier:keyIdentifier:options:')\n 56 | \n 57 |     // Perform the operation\n 58 |     let result=await wrapped.encrypt(\n    |                                     `- error: incorrect argument label in call (have 'data:keyIdentifier:options:', expected 'dataIdentifier:keyIdentifier:options:')\n 59 |       data: data,\n 60 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:59:13: error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n 57 |     // Perform the operation\n 58 |     let result=await wrapped.encrypt(\n 59 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n 60 |       keyIdentifier: keyIdentifier,\n 61 |       options: options\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:61:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'EncryptionOptions?'\n 59 |       data: data,\n 60 |       keyIdentifier: keyIdentifier,\n 61 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'EncryptionOptions?'\n 62 |     )\n 63 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:67:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 65 |     switch result {\n 66 |       case let .success(identifier):\n 67 |         context.updateMetadata([\"dataIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 68 |         await logger.debug(\n 69 |           \"Encryption successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:67:52: error: type 'Any' has no member 'private'\n 65 |     switch result {\n 66 |       case let .success(identifier):\n 67 |         context.updateMetadata([\"dataIdentifier\": .private(identifier)])\n    |                                                    `- error: type 'Any' has no member 'private'\n 68 |         await logger.debug(\n 69 |           \"Encryption successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:73:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 71 |         )\n 72 |       case let .failure(error):\n 73 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 74 |         await logger.error(\n 75 |           \"Encryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:73:43: error: type 'Any' has no member 'hash'\n 71 |         )\n 72 |       case let .failure(error):\n 73 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n 74 |         await logger.error(\n 75 |           \"Encryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:107:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'DecryptionOptions?'\n105 |       encryptedDataIdentifier: encryptedDataIdentifier,\n106 |       keyIdentifier: keyIdentifier,\n107 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'DecryptionOptions?'\n108 |     )\n109 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:118:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n116 |         )\n117 |       case let .failure(error):\n118 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n119 |         await logger.error(\n120 |           \"Decryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:118:43: error: type 'Any' has no member 'hash'\n116 |         )\n117 |       case let .failure(error):\n118 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n119 |         await logger.error(\n120 |           \"Decryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:147:42: error: incorrect argument labels in call (have 'data:algorithm:', expected 'dataIdentifier:options:')\n145 | \n146 |     // Perform the operation\n147 |     let result=await wrapped.generateHash(\n    |                                          `- error: incorrect argument labels in call (have 'data:algorithm:', expected 'dataIdentifier:options:')\n148 |       data: data,\n149 |       algorithm: algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:148:13: error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n146 |     // Perform the operation\n147 |     let result=await wrapped.generateHash(\n148 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n149 |       algorithm: algorithm\n150 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:149:18: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n147 |     let result=await wrapped.generateHash(\n148 |       data: data,\n149 |       algorithm: algorithm\n    |                  `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n150 |     )\n151 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:155:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n153 |     switch result {\n154 |       case let .success(identifier):\n155 |         context.updateMetadata([\"hashIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n156 |         await logger.debug(\n157 |           \"Hash generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:155:52: error: type 'Any' has no member 'private'\n153 |     switch result {\n154 |       case let .success(identifier):\n155 |         context.updateMetadata([\"hashIdentifier\": .private(identifier)])\n    |                                                    `- error: type 'Any' has no member 'private'\n156 |         await logger.debug(\n157 |           \"Hash generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:161:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n159 |         )\n160 |       case let .failure(error):\n161 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n162 |         await logger.error(\n163 |           \"Hash generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:161:43: error: type 'Any' has no member 'hash'\n159 |         )\n160 |       case let .failure(error):\n161 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n162 |         await logger.error(\n163 |           \"Hash generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:195:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'HashingOptions?'\n193 |       dataIdentifier: dataIdentifier,\n194 |       hashIdentifier: expectedHashIdentifier,\n195 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'HashingOptions?'\n196 |     )\n197 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:201:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n199 |     switch result {\n200 |       case let .success(matches):\n201 |         context.updateMetadata([\"matches\": .public(String(describing: matches))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n202 |         await logger.debug(\n203 |           \"Hash verification completed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:201:45: error: type 'Any' has no member 'public'\n199 |     switch result {\n200 |       case let .success(matches):\n201 |         context.updateMetadata([\"matches\": .public(String(describing: matches))])\n    |                                             `- error: type 'Any' has no member 'public'\n202 |         await logger.debug(\n203 |           \"Hash verification completed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:207:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n205 |         )\n206 |       case let .failure(error):\n207 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n208 |         await logger.error(\n209 |           \"Hash verification failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:207:43: error: type 'Any' has no member 'hash'\n205 |         )\n206 |       case let .failure(error):\n207 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n208 |         await logger.error(\n209 |           \"Hash verification failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:238:16: error: cannot convert value of type 'CryptoServices.KeyGenerationOptions?' to expected argument type 'SecurityCoreInterfaces.KeyGenerationOptions?'\n236 |     let result=await wrapped.generateKey(\n237 |       length: length,\n238 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServices.KeyGenerationOptions?' to expected argument type 'SecurityCoreInterfaces.KeyGenerationOptions?'\n239 |     )\n240 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:244:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n242 |     switch result {\n243 |       case let .success(identifier):\n244 |         context.updateMetadata([\"keyIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n245 |         await logger.debug(\n246 |           \"Key generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:244:51: error: type 'Any' has no member 'private'\n242 |     switch result {\n243 |       case let .success(identifier):\n244 |         context.updateMetadata([\"keyIdentifier\": .private(identifier)])\n    |                                                   `- error: type 'Any' has no member 'private'\n245 |         await logger.debug(\n246 |           \"Key generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:250:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n248 |         )\n249 |       case let .failure(error):\n250 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n251 |         await logger.error(\n252 |           \"Key generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:250:43: error: type 'Any' has no member 'hash'\n248 |         )\n249 |       case let .failure(error):\n250 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n251 |         await logger.error(\n252 |           \"Key generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:280:13: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n278 |     // Perform the operation\n279 |     let result=await wrapped.storeData(\n280 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n281 |       identifier: identifier\n282 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:292:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n290 |         )\n291 |       case let .failure(error):\n292 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n293 |         await logger.error(\n294 |           \"Data storage failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:292:43: error: type 'Any' has no member 'hash'\n290 |         )\n291 |       case let .failure(error):\n292 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n293 |         await logger.error(\n294 |           \"Data storage failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:332:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n330 |         )\n331 |       case let .failure(error):\n332 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n333 |         await logger.error(\n334 |           \"Data retrieval failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:332:43: error: type 'Any' has no member 'hash'\n330 |         )\n331 |       case let .failure(error):\n332 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n333 |         await logger.error(\n334 |           \"Data retrieval failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:339:12: error: cannot convert return expression of type 'Result\u003cData, SecurityStorageError\u003e' to return type 'Result\u003c[UInt8], SecurityStorageError\u003e'\n337 |     }\n338 | \n339 |     return result\n    |            |- error: cannot convert return expression of type 'Result\u003cData, SecurityStorageError\u003e' to return type 'Result\u003c[UInt8], SecurityStorageError\u003e'\n    |            `- note: arguments to generic parameter 'Success' ('Data' and '[UInt8]') are expected to be equal\n340 |   }\n341 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:372:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n370 |         )\n371 |       case let .failure(error):\n372 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n373 |         await logger.error(\n374 |           \"Data export failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:372:43: error: type 'Any' has no member 'hash'\n370 |         )\n371 |       case let .failure(error):\n372 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n373 |         await logger.error(\n374 |           \"Data export failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:407:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n405 |     switch result {\n406 |       case let .success(resultIdentifier):\n407 |         context.updateMetadata([\"resultIdentifier\": .private(resultIdentifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n408 |         await logger.debug(\n409 |           \"Data import successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:407:54: error: type 'Any' has no member 'private'\n405 |     switch result {\n406 |       case let .success(resultIdentifier):\n407 |         context.updateMetadata([\"resultIdentifier\": .private(resultIdentifier)])\n    |                                                      `- error: type 'Any' has no member 'private'\n408 |         await logger.debug(\n409 |           \"Data import successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:413:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n411 |         )\n412 |       case let .failure(error):\n413 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n414 |         await logger.error(\n415 |           \"Data import failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:413:43: error: type 'Any' has no member 'hash'\n411 |         )\n412 |       case let .failure(error):\n413 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n414 |         await logger.error(\n415 |           \"Data import failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:453:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n451 |         )\n452 |       case let .failure(error):\n453 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n454 |         await logger.error(\n455 |           \"Data deletion failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:453:43: error: type 'Any' has no member 'hash'\n451 |         )\n452 |       case let .failure(error):\n453 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n454 |         await logger.error(\n455 |           \"Data deletion failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:460:12: error: cannot convert return expression of type 'Result\u003cVoid, SecurityStorageError\u003e' to return type 'Result\u003cBool, SecurityStorageError\u003e'\n458 |     }\n459 | \n460 |     return result\n    |            |- error: cannot convert return expression of type 'Result\u003cVoid, SecurityStorageError\u003e' to return type 'Result\u003cBool, SecurityStorageError\u003e'\n    |            `- note: arguments to generic parameter 'Success' ('Void' and 'Bool') are expected to be equal\n461 |   }\n462 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:477:35: error: extra arguments at positions #2, #3 in call\n475 |     identifiers: [String: PrivacyLevel]\n476 |   ) -\u003e EnhancedLogContext {\n477 |     var context=EnhancedLogContext(\n    |                                   `- error: extra arguments at positions #2, #3 in call\n478 |       domainName: \"CryptoServices\",\n479 |       source: \"CryptoServiceFactory\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:30:10: note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n28 |      - privacyLevels: Privacy levels for each metadata field\n29 |    */\n30 |   public init(\n   |          `- note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n31 |     domainName: String,\n32 |     operationName: String,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:478:35: error: missing argument for parameter 'operationName' in call\n476 |   ) -\u003e EnhancedLogContext {\n477 |     var context=EnhancedLogContext(\n478 |       domainName: \"CryptoServices\",\n    |                                   `- error: missing argument for parameter 'operationName' in call\n479 |       source: \"CryptoServiceFactory\",\n480 |       correlationID: nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:30:10: note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n28 |      - privacyLevels: Privacy levels for each metadata field\n29 |    */\n30 |   public init(\n   |          `- note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n31 |     domainName: String,\n32 |     operationName: String,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:480:22: error: 'nil' requires a contextual type\n478 |       domainName: \"CryptoServices\",\n479 |       source: \"CryptoServiceFactory\",\n480 |       correlationID: nil\n    |                      `- error: 'nil' requires a contextual type\n481 |     )\n482 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:47:30: error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n 47 |     rateLimiter: RateLimiter=RateLimiter()\n    |                              `- error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 48 |   ) {\n 49 |     self.wrapped = wrapped\n    :\n443 |  Simple rate limiter for security operations.\n444 |  */\n445 | public class RateLimiter {\n    |              `- note: initializer 'init()' is not '@usableFromInline' or public\n446 |   public enum Operation: String {\n447 |     case encrypt, decrypt, hash, verify, export, generateKey\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:384:15: error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n382 |    - Returns: The exported data or error\n383 |    */\n384 |   public func exportData(\n    |               `- error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n385 |     withIdentifier identifier: String\n386 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:81:8: note: requirement 'exportData(identifier:)' declared here\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: requirement 'exportData(identifier:)' declared here\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:20:14: error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 18 |  validation of cryptographic operations.\n 19 |  */\n 20 | public actor EnhancedSecureCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 21 | \n 22 |   /// The wrapped implementation that does the actual cryptographic work\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:412:36: error: incorrect argument label in call (have 'withIdentifier:', expected 'identifier:')\n410 | \n411 |     // Use the wrapped implementation to perform the export\n412 |     return await wrapped.exportData(withIdentifier: identifier)\n    |                                    `- error: incorrect argument label in call (have 'withIdentifier:', expected 'identifier:')\n413 |   }\n414 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:438:38: error: missing argument for parameter 'length' in call\n436 | \n437 |     // Use the wrapped implementation to generate the key\n438 |     return await wrapped.generateKey(options: options)\n    |                                      `- error: missing argument for parameter 'length' in call\n439 |   }\n440 | }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: 'generateKey(length:options:)' declared here\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: 'generateKey(length:options:)' declared here\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/LoggingCryptoServiceImpl.swift:9:14: error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n  7 |  all operations before delegating to the wrapped implementation.\n  8 |  */\n  9 | public actor LoggingCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 10 |   /// The wrapped implementation\n 11 |   private let wrapped: CryptoServiceProtocol\n    :\n339 |    - Returns: Identifier for the imported data or an error\n340 |    */\n341 |   public func importData(\n    |               `- note: candidate has non-matching type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n342 |     _ data: [UInt8],\n343 |     customIdentifier: String?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:93:8: note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:47:31: error: cannot find type 'CryptoProviderProtocol' in scope\n  45 |   \n  46 |   /// Crypto provider for cryptographic operations\n  47 |   private let cryptoProvider: CryptoProviderProtocol\n     |                               `- error: cannot find type 'CryptoProviderProtocol' in scope\n  48 |   \n  49 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:64:21: error: cannot find type 'CryptoProviderProtocol' in scope\n  62 |     wrapped: CryptoServiceProtocol,\n  63 |     secureStorage: SecureStorageProtocol,\n  64 |     cryptoProvider: CryptoProviderProtocol,\n     |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n  65 |     logger: LoggingProtocol\n  66 |   ) {\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoStorage.swift:417:33: error: cannot find 'getSecureStorage' in scope\n415 |     // Currently we just attempt to retrieve the data and check if it exists\n416 |     // This could be optimized in a real implementation to avoid loading the data\n417 |     let secureStore = try await getSecureStorage()\n    |                                 `- error: cannot find 'getSecureStorage' in scope\n418 |     return secureStore.hasKey(identifier)\n419 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n264 |    - Returns: Result containing array of identifiers or error details\n265 |    */\n266 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n267 |     await logger.warning(\n268 |       \"List data identifiers operation not supported\",\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecureStorageProtocol.swift:14:8: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n12 |   ///   - identifier: A string identifier for the stored data.\n13 |   /// - Returns: Success or an error.\n14 |   func storeData(_ data: [UInt8], withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n15 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n16 | \n   :\n18 |   /// - Parameter identifier: A string identifying the data to retrieve.\n19 |   /// - Returns: The retrieved data as a byte array or an error.\n20 |   func retrieveData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n21 |     -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n22 | \n   :\n24 |   /// - Parameter identifier: A string identifying the data to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n27 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n28 | \n29 |   /// Lists all available data identifiers.\n30 |   /// - Returns: An array of data identifiers or an error.\n31 |   func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityStorageError\u003e\n   |        `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n32 | }\n33 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:158:63: error: type '_ErrorCodeProtocol' has no member 'notFound'\n156 |       )\n157 |       \n158 |       if let storageError = error as? StorageCoreError, case .notFound = storageError {\n    |                                                               `- error: type '_ErrorCodeProtocol' has no member 'notFound'\n159 |         return .failure(.dataNotFound)\n160 |       }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:162:61: error: cannot convert value of type 'SecurityCoreInterfaces.KeyType' to expected argument type 'CryptoServices.KeyType'\n160 |     var configOptions=SecurityConfigOptions()\n161 | \n162 |     let metadataDict=addMetadata(keySize: keySize, keyType: keyType)\n    |                                                             `- error: cannot convert value of type 'SecurityCoreInterfaces.KeyType' to expected argument type 'CryptoServices.KeyType'\n163 | \n164 |     if !metadataDict.isEmpty {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:196:13: error: type 'KeyType' has no member 'symmetric'\n194 |     let localKeyType: KeyType\n195 |     switch keyType {\n196 |       case .symmetric:\n    |             `- error: type 'KeyType' has no member 'symmetric'\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:198:13: error: type 'KeyType' has no member 'asymmetric'\n196 |       case .symmetric:\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n    |             `- error: type 'KeyType' has no member 'asymmetric'\n199 |         localKeyType = .asymmetric\n200 |       default:\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:197:25: error: type 'KeyType' has no member 'symmetric'\n195 |     switch keyType {\n196 |       case .symmetric:\n197 |         localKeyType = .symmetric\n    |                         `- error: type 'KeyType' has no member 'symmetric'\n198 |       case .asymmetric:\n199 |         localKeyType = .asymmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:199:25: error: type 'KeyType' has no member 'asymmetric'\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n199 |         localKeyType = .asymmetric\n    |                         `- error: type 'KeyType' has no member 'asymmetric'\n200 |       default:\n201 |         localKeyType = .symmetric // Default to symmetric as fallback\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:25: error: type 'KeyType' has no member 'symmetric'\n199 |         localKeyType = .asymmetric\n200 |       default:\n201 |         localKeyType = .symmetric // Default to symmetric as fallback\n    |                         `- error: type 'KeyType' has no member 'symmetric'\n202 |     }\n203 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/OptionTypes.swift:109:14: warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n107 | public struct SendableOptionsDictionary: Sendable {\n108 |   /// The underlying dictionary\n109 |   public let dictionary: [String: Any]\n    |              `- warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n110 |   \n111 |   /**\nTarget //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices failed to build\nINFO: Elapsed time: 1.169s, Critical Path: 1.00s\nINFO: 2 processes: 10 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations",
    "success": false,
    "start_time": "2025-04-06T11:27:26.661456+01:00",
    "end_time": "2025-04-06T11:27:28.367564+01:00",
    "duration": "1.706114666s",
    "output": "INFO: Invocation ID: 15500a50-e0f9-4771-939b-e766267eb66c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:14: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.4.1-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:55:8: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 53 |   private static func convert(\n 54 |     _ algorithm: SecurityCoreInterfaces\n 55 |       .EncryptionAlgorithm\n    |        `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 56 |   ) -\u003e EncryptionAlgorithm {\n 57 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:69:4: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 67 | \n 68 |   private static func convertToInterface(_ algorithm: EncryptionAlgorithm) -\u003e SecurityCoreInterfaces\n 69 |   .EncryptionAlgorithm {\n    |    `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 70 |     switch algorithm {\n 71 |       case .aes:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:81:62: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 79 | \n 80 |   // Helper methods for mode conversion\n 81 |   private static func convert(_ mode: SecurityCoreInterfaces.EncryptionMode) -\u003e EncryptionMode {\n    |                                                              `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 82 |     switch mode {\n 83 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:94:4: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 92 | \n 93 |   private static func convertToInterface(_ mode: EncryptionMode) -\u003e SecurityCoreInterfaces\n 94 |   .EncryptionMode {\n    |    `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 95 |     switch mode {\n 96 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:109:8: error: cannot find type 'EncryptionPadding' in scope\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n109 |   ) -\u003e EncryptionPadding {\n    |        `- error: cannot find type 'EncryptionPadding' in scope\n110 |     switch padding {\n111 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:108:8: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n106 |   private static func convert(\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n    |        `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n109 |   ) -\u003e EncryptionPadding {\n110 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:122:4: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n122 |   .EncryptionPadding {\n    |    `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n123 |     switch padding {\n124 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:121:53: error: cannot find type 'EncryptionPadding' in scope\n119 |   }\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n    |                                                     `- error: cannot find type 'EncryptionPadding' in scope\n122 |   .EncryptionPadding {\n123 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:147:8: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n145 |     _ options: SecurityCoreInterfaces\n146 |       .DecryptionOptions?\n147 |   ) -\u003e DecryptionOptions? {\n    |        `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n148 |     guard let options else { return nil }\n149 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:164:52: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n162 |    - Returns: The converted options or nil if input was nil\n163 |    */\n164 |   public static func convertToInterface(_ options: DecryptionOptions?) -\u003e SecurityCoreInterfaces\n    |                                                    `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n165 |   .DecryptionOptions? {\n166 |     guard let options else { return nil }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:216:8: error: cannot find type 'HashingAlgorithm' in scope\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n216 |   ) -\u003e HashingAlgorithm {\n    |        `- error: cannot find type 'HashingAlgorithm' in scope\n217 |     switch algorithm {\n218 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:215:8: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n213 |   private static func convert(\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n    |        `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n216 |   ) -\u003e HashingAlgorithm {\n217 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:231:4: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n231 |   .HashingAlgorithm {\n    |    `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n232 |     switch algorithm {\n233 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:230:55: error: cannot find type 'HashingAlgorithm' in scope\n228 |   }\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n    |                                                       `- error: cannot find type 'HashingAlgorithm' in scope\n231 |   .HashingAlgorithm {\n232 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:228:18: error: cannot find type 'DeploymentEnvironment' in scope\n226 |     secureStorage: SecureStorageProtocol?=nil,\n227 |     logger: LoggingProtocol?=nil,\n228 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:33:14: error: cannot find type 'SecurityProviderOptions' in scope\n31 |     data: [UInt8],\n32 |     keyIdentifier: String?=nil,\n33 |     options: SecurityProviderOptions?=nil\n   |              `- error: cannot find type 'SecurityProviderOptions' in scope\n34 |   ) async -\u003e Result\u003c[UInt8], Error\u003e {\n35 |     // Basic implementation of security operations\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:80:16: error: cannot find type 'SecurityProviderOptions' in scope\n78 | \n79 |   public func generateKey(\n80 |     options _: SecurityProviderOptions\n   |                `- error: cannot find type 'SecurityProviderOptions' in scope\n81 |   ) async -\u003e Result\u003cString, Error\u003e {\n82 |     // In a real implementation, this would generate an actual cryptographic key\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              |- error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n   |              `- note: add stubs for conformance\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:30:8: note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 28 | \n 29 |   /// Access to cryptographic service implementation\n 30 |   func cryptoService() async -\u003e CryptoServiceProtocol\n    |        `- note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 31 | \n 32 |   /// Access to key management service implementation\n 33 |   func keyManager() async -\u003e KeyManagementProtocol\n    |        `- note: protocol requires function 'keyManager()' with type '() async -\u003e any KeyManagementProtocol'\n 34 | \n 35 |   // MARK: - Core Operations\n    :\n 41 |    - Returns: Result containing encrypted data or error\n 42 |    */\n 43 |   func encrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'encrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 44 | \n 45 |   /**\n    :\n 49 |    - Returns: Result containing decrypted data or error\n 50 |    */\n 51 |   func decrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'decrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 52 | \n 53 |   /**\n    :\n 65 |    - Returns: Result containing storage confirmation or error\n 66 |    */\n 67 |   func secureStore(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureStore(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 68 | \n 69 |   /**\n    :\n 73 |    - Returns: Result containing retrieved data or error\n 74 |    */\n 75 |   func secureRetrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureRetrieve(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 76 | \n 77 |   /**\n    :\n 81 |    - Returns: Result containing deletion confirmation or error\n 82 |    */\n 83 |   func secureDelete(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureDelete(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 84 | \n 85 |   /**\n    :\n 89 |    - Returns: Result containing signature data or error\n 90 |    */\n 91 |   func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'sign(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 92 | \n 93 |   /**\n    :\n 97 |    - Returns: Result containing verification status or error\n 98 |    */\n 99 |   func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'verify(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n100 | \n101 |   /**\n    :\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n    :\n121 |    - Returns: A properly configured SecurityConfigDTO\n122 |    */\n123 |   func createSecureConfig(options: SecurityConfigOptions) async -\u003e SecurityConfigDTO\n    |        `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n124 | }\n125 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 | \n 21 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:17:14: error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  as the baseline implementation when more specialised providers aren't selected.\n 16 |  */\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n 97 |   }\n 98 | \n 99 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n100 |     encryptedDataIdentifier: String,\n101 |     keyIdentifier: String,\n    :\n198 |   }\n199 | \n200 |   public func verifyHash(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n201 |     dataIdentifier: String,\n202 |     hashIdentifier: String,\n    :\n259 |   }\n260 | \n261 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n262 |     length: Int,\n263 |     options: CryptoServiceOptions?=nil\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 |   private let logger: LoggingProtocol\n 21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:17:14: error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  CryptoServiceProtocol API.\n 16 |  */\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n102 |   }\n103 | \n104 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n105 |     encryptedDataIdentifier: String,\n106 |     keyIdentifier: String,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:8:15: error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n 6 |  Enhanced log context for crypto operations with privacy controls\n 7 |  */\n 8 | public struct EnhancedLogContext: LogContextDTO {\n   |               |- error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n   |               `- note: add stubs for conformance\n 9 |   /// Domain name for the log context\n10 |   public let domainName: String\n   :\n14 |   \n15 |   /// Additional context metadata as key-value pairs\n16 |   public let metadata: [String: String]\n   |              `- note: candidate has non-matching type '[String : String]'\n17 |   \n18 |   /// Privacy level for each metadata field\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:13:7: note: protocol requires property 'source' with type 'String?'\n11 | \n12 |   /// Optional source information (class, file, etc.)\n13 |   var source: String? { get }\n   |       `- note: protocol requires property 'source' with type 'String?'\n14 | \n15 |   /// Optional correlation ID for tracing related log events\n16 |   var correlationID: String? { get }\n   |       `- note: protocol requires property 'correlationID' with type 'String?'\n17 | \n18 |   /// The metadata collection for this context\n19 |   var metadata: LogMetadataDTOCollection { get }\n   |       `- note: protocol requires property 'metadata' with type 'LogMetadataDTOCollection'\n20 | }\n21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:16:14: error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 14 |  logging with proper privacy tags for sensitive data.\n 15 |  */\n 16 | public actor EnhancedLoggingCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 17 |   /// The wrapped implementation\n 18 |   private let wrapped: CryptoServiceProtocol\n    :\n 81 |   }\n 82 | \n 83 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 84 |     encryptedDataIdentifier: String,\n 85 |     keyIdentifier: String,\n    :\n215 |   }\n216 | \n217 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n218 |     length: Int,\n219 |     options: KeyGenerationOptions?=nil\n    :\n258 |   }\n259 | \n260 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n261 |     data: [UInt8],\n262 |     identifier: String\n    :\n300 |   }\n301 | \n302 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n303 |     identifier: String\n304 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n    :\n421 |   }\n422 | \n423 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n424 |     identifier: String\n425 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:47:30: error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n 47 |     rateLimiter: RateLimiter=RateLimiter()\n    |                              `- error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 48 |   ) {\n 49 |     self.wrapped = wrapped\n    :\n443 |  Simple rate limiter for security operations.\n444 |  */\n445 | public class RateLimiter {\n    |              `- note: initializer 'init()' is not '@usableFromInline' or public\n446 |   public enum Operation: String {\n447 |     case encrypt, decrypt, hash, verify, export, generateKey\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:384:15: error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n382 |    - Returns: The exported data or error\n383 |    */\n384 |   public func exportData(\n    |               `- error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n385 |     withIdentifier identifier: String\n386 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:81:8: note: requirement 'exportData(identifier:)' declared here\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: requirement 'exportData(identifier:)' declared here\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:20:14: error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 18 |  validation of cryptographic operations.\n 19 |  */\n 20 | public actor EnhancedSecureCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 21 | \n 22 |   /// The wrapped implementation that does the actual cryptographic work\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/LoggingCryptoServiceImpl.swift:9:14: error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n  7 |  all operations before delegating to the wrapped implementation.\n  8 |  */\n  9 | public actor LoggingCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 10 |   /// The wrapped implementation\n 11 |   private let wrapped: CryptoServiceProtocol\n    :\n339 |    - Returns: Identifier for the imported data or an error\n340 |    */\n341 |   public func importData(\n    |               `- note: candidate has non-matching type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n342 |     _ data: [UInt8],\n343 |     customIdentifier: String?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:93:8: note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:47:31: error: cannot find type 'CryptoProviderProtocol' in scope\n  45 |   \n  46 |   /// Crypto provider for cryptographic operations\n  47 |   private let cryptoProvider: CryptoProviderProtocol\n     |                               `- error: cannot find type 'CryptoProviderProtocol' in scope\n  48 |   \n  49 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:64:21: error: cannot find type 'CryptoProviderProtocol' in scope\n  62 |     wrapped: CryptoServiceProtocol,\n  63 |     secureStorage: SecureStorageProtocol,\n  64 |     cryptoProvider: CryptoProviderProtocol,\n     |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n  65 |     logger: LoggingProtocol\n  66 |   ) {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n264 |    - Returns: Result containing array of identifiers or error details\n265 |    */\n266 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n267 |     await logger.warning(\n268 |       \"List data identifiers operation not supported\",\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecureStorageProtocol.swift:14:8: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n12 |   ///   - identifier: A string identifier for the stored data.\n13 |   /// - Returns: Success or an error.\n14 |   func storeData(_ data: [UInt8], withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n15 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n16 | \n   :\n18 |   /// - Parameter identifier: A string identifying the data to retrieve.\n19 |   /// - Returns: The retrieved data as a byte array or an error.\n20 |   func retrieveData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n21 |     -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n22 | \n   :\n24 |   /// - Parameter identifier: A string identifying the data to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n27 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n28 | \n29 |   /// Lists all available data identifiers.\n30 |   /// - Returns: An array of data identifiers or an error.\n31 |   func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityStorageError\u003e\n   |        `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n32 | }\n33 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/OptionTypes.swift:109:14: warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n107 | public struct SendableOptionsDictionary: Sendable {\n108 |   /// The underlying dictionary\n109 |   public let dictionary: [String: Any]\n    |              `- warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n110 |   \n111 |   /**\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:55:8: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 53 |   private static func convert(\n 54 |     _ algorithm: SecurityCoreInterfaces\n 55 |       .EncryptionAlgorithm\n    |        `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 56 |   ) -\u003e EncryptionAlgorithm {\n 57 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:69:4: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 67 | \n 68 |   private static func convertToInterface(_ algorithm: EncryptionAlgorithm) -\u003e SecurityCoreInterfaces\n 69 |   .EncryptionAlgorithm {\n    |    `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 70 |     switch algorithm {\n 71 |       case .aes:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:81:62: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 79 | \n 80 |   // Helper methods for mode conversion\n 81 |   private static func convert(_ mode: SecurityCoreInterfaces.EncryptionMode) -\u003e EncryptionMode {\n    |                                                              `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 82 |     switch mode {\n 83 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:94:4: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 92 | \n 93 |   private static func convertToInterface(_ mode: EncryptionMode) -\u003e SecurityCoreInterfaces\n 94 |   .EncryptionMode {\n    |    `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 95 |     switch mode {\n 96 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:109:8: error: cannot find type 'EncryptionPadding' in scope\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n109 |   ) -\u003e EncryptionPadding {\n    |        `- error: cannot find type 'EncryptionPadding' in scope\n110 |     switch padding {\n111 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:108:8: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n106 |   private static func convert(\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n    |        `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n109 |   ) -\u003e EncryptionPadding {\n110 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:122:4: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n122 |   .EncryptionPadding {\n    |    `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n123 |     switch padding {\n124 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:121:53: error: cannot find type 'EncryptionPadding' in scope\n119 |   }\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n    |                                                     `- error: cannot find type 'EncryptionPadding' in scope\n122 |   .EncryptionPadding {\n123 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:147:8: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n145 |     _ options: SecurityCoreInterfaces\n146 |       .DecryptionOptions?\n147 |   ) -\u003e DecryptionOptions? {\n    |        `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n148 |     guard let options else { return nil }\n149 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:164:52: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n162 |    - Returns: The converted options or nil if input was nil\n163 |    */\n164 |   public static func convertToInterface(_ options: DecryptionOptions?) -\u003e SecurityCoreInterfaces\n    |                                                    `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n165 |   .DecryptionOptions? {\n166 |     guard let options else { return nil }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:216:8: error: cannot find type 'HashingAlgorithm' in scope\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n216 |   ) -\u003e HashingAlgorithm {\n    |        `- error: cannot find type 'HashingAlgorithm' in scope\n217 |     switch algorithm {\n218 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:215:8: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n213 |   private static func convert(\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n    |        `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n216 |   ) -\u003e HashingAlgorithm {\n217 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:231:4: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n231 |   .HashingAlgorithm {\n    |    `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n232 |     switch algorithm {\n233 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:230:55: error: cannot find type 'HashingAlgorithm' in scope\n228 |   }\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n    |                                                       `- error: cannot find type 'HashingAlgorithm' in scope\n231 |   .HashingAlgorithm {\n232 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:26:29: error: extra arguments at positions #2, #3, #4 in call\n 24 |     guard let options else { return nil }\n 25 | \n 26 |     return EncryptionOptions(\n    |                             `- error: extra arguments at positions #2, #3, #4 in call\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:154:10: note: 'init(algorithm:authenticatedData:)' declared here\n152 | \n153 |   /// Initialises encryption options with defaults.\n154 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n155 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n156 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:27:18: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 25 | \n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n    |                  `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:27:34: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 25 | \n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n    |                                  `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:28:29: error: value of type 'EncryptionOptions' has no member 'mode'\n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n    |                             `- error: value of type 'EncryptionOptions' has no member 'mode'\n 29 |       padding: convert(options.padding),\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:29:32: error: value of type 'EncryptionOptions' has no member 'padding'\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n    |                                `- error: value of type 'EncryptionOptions' has no member 'padding'\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n 31 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:30:44: error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 31 |     )\n 32 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:44:52: error: extra arguments at positions #2, #3, #4 in call\n 42 |     guard let options else { return nil }\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n    |                                                    `- error: extra arguments at positions #2, #3, #4 in call\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:154:10: note: 'init(algorithm:authenticatedData:)' declared here\n152 | \n153 |   /// Initialises encryption options with defaults.\n154 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n155 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n156 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:45:18: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n    |                  `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:45:45: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n    |                                             `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:46:40: error: value of type 'EncryptionOptions' has no member 'mode'\n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n    |                                        `- error: value of type 'EncryptionOptions' has no member 'mode'\n 47 |       padding: convertToInterface(options.padding),\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:47:43: error: value of type 'EncryptionOptions' has no member 'padding'\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n    |                                           `- error: value of type 'EncryptionOptions' has no member 'padding'\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n 49 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:48:44: error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 49 |     )\n 50 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:59:17: error: type 'EncryptionAlgorithm' has no member 'aes'\n 57 |     switch algorithm {\n 58 |       case .aes:\n 59 |         return .aes\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 60 |       case .chacha20:\n 61 |         return .chacha20\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:61:17: error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 59 |         return .aes\n 60 |       case .chacha20:\n 61 |         return .chacha20\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 62 |       @unknown default:\n 63 |         // Default to a safe algorithm if an unknown one is provided\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:64:17: error: type 'EncryptionAlgorithm' has no member 'aes'\n 62 |       @unknown default:\n 63 |         // Default to a safe algorithm if an unknown one is provided\n 64 |         return .aes\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 65 |     }\n 66 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:71:13: error: type 'EncryptionAlgorithm' has no member 'aes'\n 69 |   .EncryptionAlgorithm {\n 70 |     switch algorithm {\n 71 |       case .aes:\n    |             `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 72 |         return .aes\n 73 |       case .chacha20:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:73:13: error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 71 |       case .aes:\n 72 |         return .aes\n 73 |       case .chacha20:\n    |             `- error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 74 |         return .chacha20\n 75 |       @unknown default:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:150:29: error: extra arguments at positions #2, #4 in call\n148 |     guard let options else { return nil }\n149 | \n150 |     return DecryptionOptions(\n    |                             `- error: extra arguments at positions #2, #4 in call\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:31:10: note: 'init(algorithm:authenticatedData:padding:)' declared here\n29 |      - padding: Optional padding mode to use\n30 |    */\n31 |   public init(\n   |          `- note: 'init(algorithm:authenticatedData:padding:)' declared here\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:151:43: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n149 | \n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n    |                                           `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:41: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'PaddingMode?'\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n    |                                         `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'PaddingMode?'\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n155 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:151:59: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n149 | \n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n    |                                                           `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:152:54: error: value of type 'DecryptionOptions' has no member 'mode'\n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n    |                                                      `- error: value of type 'DecryptionOptions' has no member 'mode'\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:57: error: value of type 'DecryptionOptions' has no member 'padding'\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n    |                                                         `- error: value of type 'DecryptionOptions' has no member 'padding'\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n155 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:154:44: error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n155 |     )\n156 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:168:52: error: extra arguments at positions #2, #3, #4 in call\n166 |     guard let options else { return nil }\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n    |                                                    `- error: extra arguments at positions #2, #3, #4 in call\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:172:10: note: 'init(algorithm:authenticatedData:)' declared here\n170 | \n171 |   /// Initialises decryption options with defaults.\n172 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n173 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n174 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:43: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n    |                                           `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:70: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n    |                                                                      `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:170:65: error: value of type 'DecryptionOptions' has no member 'mode'\n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n    |                                                                 `- error: value of type 'DecryptionOptions' has no member 'mode'\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:171:68: error: cannot convert value of type 'PaddingMode?' to expected argument type 'EncryptionOptions?'\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n    |                                                                    `- error: cannot convert value of type 'PaddingMode?' to expected argument type 'EncryptionOptions?'\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n173 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:172:44: error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n173 |     )\n174 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:192:21: error: extra argument 'salt' in call\n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n192 |       salt: options.salt\n    |                     `- error: extra argument 'salt' in call\n193 |     )\n194 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:191:18: error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n189 | \n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n    |                  `- error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n192 |       salt: options.salt\n193 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:191:34: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n189 | \n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n    |                                  `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n192 |       salt: options.salt\n193 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:192:21: error: value of type 'HashingOptions' has no member 'salt'\n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n192 |       salt: options.salt\n    |                     `- error: value of type 'HashingOptions' has no member 'salt'\n193 |     )\n194 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:208:21: error: extra argument 'salt' in call\n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n208 |       salt: options.salt\n    |                     `- error: extra argument 'salt' in call\n209 |     )\n210 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:207:18: error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n205 | \n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n    |                  `- error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n208 |       salt: options.salt\n209 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:207:45: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n205 | \n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n    |                                             `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n208 |       salt: options.salt\n209 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:208:21: error: value of type 'HashingOptions' has no member 'salt'\n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n208 |       salt: options.salt\n    |                     `- error: value of type 'HashingOptions' has no member 'salt'\n209 |     )\n210 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:264:33: error: extra argument 'customIdentifier' in call\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n264 |       customIdentifier: options.customIdentifier\n    |                                 `- error: extra argument 'customIdentifier' in call\n265 |     )\n266 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:263:33: error: value of type 'KeyGenerationOptions' has no member 'useSecureEnclave'\n261 |     return KeyGenerationOptions(\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'useSecureEnclave'\n264 |       customIdentifier: options.customIdentifier\n265 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:264:33: error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n264 |       customIdentifier: options.customIdentifier\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n265 |     )\n266 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:278:55: error: extra arguments at positions #2, #3 in call\n276 |     guard let options else { return nil }\n277 | \n278 |     return SecurityCoreInterfaces.KeyGenerationOptions(\n    |                                                       `- error: extra arguments at positions #2, #3 in call\n279 |       keyType: convertToInterface(options.keyType),\n280 |       useSecureEnclave: options.useSecureEnclave,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:201:10: note: 'init(persistent:keyType:)' declared here\n199 | \n200 |   /// Initialises key generation options with defaults.\n201 |   public init(persistent: Bool=true, keyType: KeyType = .symmetric) {\n    |          `- note: 'init(persistent:keyType:)' declared here\n202 |     self.persistent=persistent\n203 |     self.keyType=keyType\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:281:33: error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n279 |       keyType: convertToInterface(options.keyType),\n280 |       useSecureEnclave: options.useSecureEnclave,\n281 |       customIdentifier: options.customIdentifier\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n282 |     )\n283 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:289:17: error: type 'KeyType' has no member 'symmetric'\n287 |     switch keyType {\n288 |       case .symmetric:\n289 |         return .symmetric\n    |                 `- error: type 'KeyType' has no member 'symmetric'\n290 |       case .asymmetric:\n291 |         return .asymmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:291:17: error: type 'KeyType' has no member 'asymmetric'\n289 |         return .symmetric\n290 |       case .asymmetric:\n291 |         return .asymmetric\n    |                 `- error: type 'KeyType' has no member 'asymmetric'\n292 |       @unknown default:\n293 |         // Default to symmetric if unknown\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:294:17: error: type 'KeyType' has no member 'symmetric'\n292 |       @unknown default:\n293 |         // Default to symmetric if unknown\n294 |         return .symmetric\n    |                 `- error: type 'KeyType' has no member 'symmetric'\n295 |     }\n296 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:287:5: warning: switch must be exhaustive\n285 |   // Helper methods for key type conversion\n286 |   private static func convert(_ keyType: SecurityCoreInterfaces.KeyType) -\u003e KeyType {\n287 |     switch keyType {\n    |     |- warning: switch must be exhaustive\n    |     `- note: add missing case: '.hybrid'\n288 |       case .symmetric:\n289 |         return .symmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:300:13: error: type 'KeyType' has no member 'symmetric'\n298 |   private static func convertToInterface(_ keyType: KeyType) -\u003e SecurityCoreInterfaces.KeyType {\n299 |     switch keyType {\n300 |       case .symmetric:\n    |             `- error: type 'KeyType' has no member 'symmetric'\n301 |         return .symmetric\n302 |       case .asymmetric:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:302:13: error: type 'KeyType' has no member 'asymmetric'\n300 |       case .symmetric:\n301 |         return .symmetric\n302 |       case .asymmetric:\n    |             `- error: type 'KeyType' has no member 'asymmetric'\n303 |         return .asymmetric\n304 |       @unknown default:\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:97:22: error: extra argument 'secureStorage' in call\n 95 |   ) async -\u003e CryptoServiceProtocol {\n 96 |     await CryptoServiceFactory.createMock(\n 97 |       secureStorage: secureStorage,\n    |                      `- error: extra argument 'secureStorage' in call\n 98 |       configuration: configuration\n 99 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:228:18: error: cannot find type 'DeploymentEnvironment' in scope\n226 |     secureStorage: SecureStorageProtocol?=nil,\n227 |     logger: LoggingProtocol?=nil,\n228 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:98:32: error: cannot find 'DefaultConsoleLogger' in scope\n 96 |     logger: LoggingProtocol?=nil\n 97 |   ) async -\u003e CryptoServiceProtocol {\n 98 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n 99 | \n100 |     return await DefaultCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:119:32: error: cannot find 'DefaultConsoleLogger' in scope\n117 |     logger: LoggingProtocol?=nil\n118 |   ) async -\u003e CryptoServiceProtocol {\n119 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n120 | \n121 |     return await LoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:143:32: error: cannot find 'DefaultConsoleLogger' in scope\n141 |     logger: LoggingProtocol?=nil\n142 |   ) async -\u003e CryptoServiceProtocol {\n143 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n144 | \n145 |     return await EnhancedLoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:167:32: error: cannot find 'DefaultConsoleLogger' in scope\n165 |     logger: LoggingProtocol?=nil\n166 |   ) async -\u003e CryptoServiceProtocol {\n167 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n168 | \n169 |     // Create secure service with enhanced parameters\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:179:16: error: extra argument 'storage' in call\n177 |         )\n178 |       ),\n179 |       storage: createSecureStorage(),\n    |                `- error: extra argument 'storage' in call\n180 |       logger: actualLogger\n181 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:201:32: error: cannot find 'DefaultConsoleLogger' in scope\n199 |     logger: LoggingProtocol?=nil\n200 |   ) async -\u003e CryptoServiceProtocol {\n201 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n202 | \n203 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:204:22: error: cannot find 'MockCryptoConfiguration' in scope\n202 | \n203 |     return await MockCryptoServiceImpl(\n204 |       configuration: MockCryptoConfiguration(\n    |                      `- error: cannot find 'MockCryptoConfiguration' in scope\n205 |         encryptionSucceeds: shouldSucceed,\n206 |         decryptionSucceeds: shouldSucceed,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:213:27: error: missing argument for parameter 'secureStorage' in call\n211 |         retrievalSucceeds: shouldSucceed\n212 |       ),\n213 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureStorage' in call\n214 |     )\n215 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:230:32: error: cannot find 'DefaultConsoleLogger' in scope\n228 |     environment: DeploymentEnvironment = .production\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n231 | \n232 |     switch environment {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:245:26: error: cannot find 'MockCryptoConfiguration' in scope\n243 |       case .testing:\n244 |         return await MockCryptoServiceImpl(\n245 |           configuration: MockCryptoConfiguration(\n    |                          `- error: cannot find 'MockCryptoConfiguration' in scope\n246 |             encryptionSucceeds: true,\n247 |             decryptionSucceeds: true,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:254:31: error: missing argument for parameter 'secureStorage' in call\n252 |             retrievalSucceeds: true\n253 |           ),\n254 |           logger: actualLogger\n    |                               `- error: missing argument for parameter 'secureStorage' in call\n255 |         )\n256 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:299:32: error: cannot find 'DefaultConsoleLogger' in scope\n297 |     logger: LoggingProtocol?=nil\n298 |   ) async -\u003e CryptoServiceProtocol {\n299 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n300 | \n301 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:302:46: error: 'await' cannot appear to the right of a non-assignment operator\n300 | \n301 |     // Use the provided secure storage or create a default one\n302 |     let actualSecureStorage=secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                              `- error: 'await' cannot appear to the right of a non-assignment operator\n303 | \n304 |     // Create provider based on the specified type\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:327:42: error: missing argument label 'providerType:' in call\n325 | \n326 |       // Return a basic implementation as fallback\n327 |       return await createWithProviderType(\n    |                                          `- error: missing argument label 'providerType:' in call\n328 |         .basic,\n329 |         secureStorage: actualSecureStorage,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:358:32: error: cannot find 'DefaultConsoleLogger' in scope\n356 |     logger: LoggingProtocol?=nil\n357 |   ) async -\u003e CryptoServiceProtocol {\n358 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n359 | \n360 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:361:46: error: 'await' cannot appear to the right of a non-assignment operator\n359 | \n360 |     // Use the provided secure storage or create a default one\n361 |     let actualSecureStorage=secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                              `- error: 'await' cannot appear to the right of a non-assignment operator\n362 | \n363 |     // Create a crypto service implementation using DefaultCryptoServiceWithProviderImpl\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:386:32: error: cannot find 'DefaultConsoleLogger' in scope\n384 |     logger: LoggingProtocol?=nil\n385 |   ) async -\u003e SecureStorageProtocol {\n386 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n387 |     let url=storageURL ?? URL(fileURLWithPath: NSTemporaryDirectory())\n388 |       .appendingPathComponent(\"CryptoSecureStorage\")\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:393:16: error: extra argument 'baseURL' in call\n391 |     return InMemorySecureStorage(\n392 |       logger: actualLogger,\n393 |       baseURL: url\n    |                `- error: extra argument 'baseURL' in call\n394 |     )\n395 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:421:32: error: cannot find 'DefaultConsoleLogger' in scope\n419 |     logger: LoggingProtocol?=nil\n420 |   ) async -\u003e CryptoServiceProtocol {\n421 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n422 |     return await MockCryptoServiceImpl(configuration: configuration, logger: actualLogger)\n423 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:422:90: error: missing argument for parameter 'secureStorage' in call\n420 |   ) async -\u003e CryptoServiceProtocol {\n421 |     let actualLogger=logger ?? DefaultConsoleLogger()\n422 |     return await MockCryptoServiceImpl(configuration: configuration, logger: actualLogger)\n    |                                                                                          `- error: missing argument for parameter 'secureStorage' in call\n423 |   }\n424 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:440:7: warning: no 'async' operations occur within 'await' expression\n438 |   ) async -\u003e CryptoServiceProtocol {\n439 |     if let secureLogger {\n440 |       await EnhancedLoggingCryptoServiceImpl(\n    |       `- warning: no 'async' operations occur within 'await' expression\n441 |         wrapped: wrapped,\n442 |         logger: secureLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:445:7: warning: no 'async' operations occur within 'await' expression\n443 |       )\n444 |     } else {\n445 |       await LoggingCryptoServiceImpl(\n    |       `- warning: no 'async' operations occur within 'await' expression\n446 |         wrapped: wrapped,\n447 |         logger: logger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:33:14: error: cannot find type 'SecurityProviderOptions' in scope\n31 |     data: [UInt8],\n32 |     keyIdentifier: String?=nil,\n33 |     options: SecurityProviderOptions?=nil\n   |              `- error: cannot find type 'SecurityProviderOptions' in scope\n34 |   ) async -\u003e Result\u003c[UInt8], Error\u003e {\n35 |     // Basic implementation of security operations\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:80:16: error: cannot find type 'SecurityProviderOptions' in scope\n78 | \n79 |   public func generateKey(\n80 |     options _: SecurityProviderOptions\n   |                `- error: cannot find type 'SecurityProviderOptions' in scope\n81 |   ) async -\u003e Result\u003cString, Error\u003e {\n82 |     // In a real implementation, this would generate an actual cryptographic key\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              |- error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n   |              `- note: add stubs for conformance\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:30:8: note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 28 | \n 29 |   /// Access to cryptographic service implementation\n 30 |   func cryptoService() async -\u003e CryptoServiceProtocol\n    |        `- note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 31 | \n 32 |   /// Access to key management service implementation\n 33 |   func keyManager() async -\u003e KeyManagementProtocol\n    |        `- note: protocol requires function 'keyManager()' with type '() async -\u003e any KeyManagementProtocol'\n 34 | \n 35 |   // MARK: - Core Operations\n    :\n 41 |    - Returns: Result containing encrypted data or error\n 42 |    */\n 43 |   func encrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'encrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 44 | \n 45 |   /**\n    :\n 49 |    - Returns: Result containing decrypted data or error\n 50 |    */\n 51 |   func decrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'decrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 52 | \n 53 |   /**\n    :\n 65 |    - Returns: Result containing storage confirmation or error\n 66 |    */\n 67 |   func secureStore(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureStore(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 68 | \n 69 |   /**\n    :\n 73 |    - Returns: Result containing retrieved data or error\n 74 |    */\n 75 |   func secureRetrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureRetrieve(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 76 | \n 77 |   /**\n    :\n 81 |    - Returns: Result containing deletion confirmation or error\n 82 |    */\n 83 |   func secureDelete(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureDelete(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 84 | \n 85 |   /**\n    :\n 89 |    - Returns: Result containing signature data or error\n 90 |    */\n 91 |   func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'sign(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 92 | \n 93 |   /**\n    :\n 97 |    - Returns: Result containing verification status or error\n 98 |    */\n 99 |   func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'verify(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n100 | \n101 |   /**\n    :\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n    :\n121 |    - Returns: A properly configured SecurityConfigDTO\n122 |    */\n123 |   func createSecureConfig(options: SecurityConfigOptions) async -\u003e SecurityConfigDTO\n    |        `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n124 | }\n125 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:37:13: error: type 'SecurityOperation' has no member 'encryption'\n35 |     // Basic implementation of security operations\n36 |     switch operation {\n37 |       case .encryption:\n   |             `- error: type 'SecurityOperation' has no member 'encryption'\n38 |         guard let keyIdentifier else {\n39 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:50:13: error: type 'SecurityOperation' has no member 'decryption'\n48 |         return .success(encryptedData)\n49 | \n50 |       case .decryption:\n   |             `- error: type 'SecurityOperation' has no member 'decryption'\n51 |         guard let keyIdentifier else {\n52 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:59:13: error: type 'SecurityOperation' has no member 'hashing'\n57 |         return .success(data)\n58 | \n59 |       case .hashing:\n   |             `- error: type 'SecurityOperation' has no member 'hashing'\n60 |         // Determine the hash algorithm to use\n61 |         let algorithm=options?.hashAlgorithm ?? .sha256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:39:27: error: module 'UmbraErrors' has no member named 'Security'\n37 |       case .encryption:\n38 |         guard let keyIdentifier else {\n39 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n   |                           `- error: module 'UmbraErrors' has no member named 'Security'\n40 |         }\n41 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:52:27: error: module 'UmbraErrors' has no member named 'Security'\n50 |       case .decryption:\n51 |         guard let keyIdentifier else {\n52 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n   |                           `- error: module 'UmbraErrors' has no member named 'Security'\n53 |         }\n54 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:75:25: error: module 'UmbraErrors' has no member named 'Security'\n73 | \n74 |       default:\n75 |         return .failure(UmbraErrors.Security.Core.unsupportedOperation)\n   |                         `- error: module 'UmbraErrors' has no member named 'Security'\n76 |     }\n77 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 | \n 21 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:17:14: error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  as the baseline implementation when more specialised providers aren't selected.\n 16 |  */\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n 97 |   }\n 98 | \n 99 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n100 |     encryptedDataIdentifier: String,\n101 |     keyIdentifier: String,\n    :\n198 |   }\n199 | \n200 |   public func verifyHash(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n201 |     dataIdentifier: String,\n202 |     hashIdentifier: String,\n    :\n259 |   }\n260 | \n261 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n262 |     length: Int,\n263 |     options: CryptoServiceOptions?=nil\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:53:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n 51 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n 52 | \n 53 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n 54 |       \"Encrypting data with key: \\(keyIdentifier)\",\n 55 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:81:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n 79 |     // Store the encrypted data\n 80 |     let dataIdentifier=\"encrypted_\\(UUID().uuidString)\"\n 81 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n 82 |       data: encryptedData,\n 83 |       identifier: dataIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:95:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n 93 |           source: \"DefaultCryptoService\"\n 94 |         )\n 95 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n 96 |     }\n 97 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:107:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n105 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n106 | \n107 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n108 |       \"Decrypting data with identifier: \\(encryptedDataIdentifier) using key: \\(keyIdentifier)\",\n109 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:114:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n112 | \n113 |     // Retrieve the encrypted data\n114 |     let dataResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n115 |       identifier: encryptedDataIdentifier\n116 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:136:24: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n134 |           return .success(decryptedData)\n135 |         } else {\n136 |           await logger.error(\n    |                        `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n137 |             \"Invalid encrypted data format\",\n138 |             metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:141:44: error: module 'UmbraErrors' has no member named 'Security'\n139 |             source: \"DefaultCryptoService\"\n140 |           )\n141 |           return .failure(.operationFailed(UmbraErrors.Security.Core.invalidData))\n    |                                            `- error: module 'UmbraErrors' has no member named 'Security'\n142 |         }\n143 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:150:26: error: enum case 'keyNotFound' has no associated values\n148 |           source: \"DefaultCryptoService\"\n149 |         )\n150 |         return .failure(.keyNotFound(encryptedDataIdentifier))\n    |                          `- error: enum case 'keyNotFound' has no associated values\n151 |     }\n152 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:162:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n160 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n161 | \n162 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n163 |       \"Generating hash with algorithm: \\(algorithm ?? .sha256)\",\n164 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:171:27: error: switch must be exhaustive\n169 | \n170 |     // For this implementation, we'll create a simple mock hash\n171 |     var hashData: [UInt8]=switch algorithm ?? .sha256 {\n    |                           |- error: switch must be exhaustive\n    |                           `- note: add missing case: '.blake2b'\n172 |       case .sha256:\n173 |         // Generate a mock SHA-256 hash (32 bytes)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:182:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n180 |     // Store the hash\n181 |     let hashIdentifier=\"hash_\\(UUID().uuidString)\"\n182 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n183 |       data: hashData,\n184 |       identifier: hashIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:196:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n194 |           source: \"DefaultCryptoService\"\n195 |         )\n196 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n197 |     }\n198 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:208:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n206 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n207 | \n208 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n209 |       \"Verifying hash for data with identifier: \\(dataIdentifier)\",\n210 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:215:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n213 | \n214 |     // Retrieve the data\n215 |     let dataResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n216 |       identifier: dataIdentifier\n217 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:227:24: error: enum case 'keyNotFound' has no associated values\n225 |         )\n226 |       }\n227 |       return .failure(.keyNotFound(dataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n228 |     }\n229 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:231:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n229 | \n230 |     // Retrieve the expected hash\n231 |     let hashResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n232 |       identifier: hashIdentifier\n233 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:243:24: error: enum case 'keyNotFound' has no associated values\n241 |         )\n242 |       }\n243 |       return .failure(.keyNotFound(hashIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n244 |     }\n245 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:252:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n250 |     let matchesHash=Bool.random()\n251 | \n252 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n253 |       \"Hash verification result: \\(matchesHash)\",\n254 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:268:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n266 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n267 | \n268 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n269 |       \"Generating key with length: \\(length)\",\n270 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:276:20: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n274 |     // Validate key length\n275 |     guard length \u003e= 16 else { // Minimum 128-bit key\n276 |       await logger.error(\n    |                    `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n277 |         \"Key length too short: \\(length) bytes\",\n278 |         metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:281:40: error: module 'UmbraErrors' has no member named 'Security'\n279 |         source: \"DefaultCryptoService\"\n280 |       )\n281 |       return .failure(.operationFailed(UmbraErrors.Security.Core.invalidKeyLength))\n    |                                        `- error: module 'UmbraErrors' has no member named 'Security'\n282 |     }\n283 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:289:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n287 |     // Store the key\n288 |     let keyIdentifier=\"key_\\(UUID().uuidString)\"\n289 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n290 |       data: keyData,\n291 |       identifier: keyIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:303:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n301 |           source: \"DefaultCryptoService\"\n302 |         )\n303 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n304 |     }\n305 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:315:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n313 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n314 | \n315 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n316 |       \"Storing data with identifier: \\(identifier)\",\n317 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:321:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n319 |     )\n320 | \n321 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n322 |       data: data,\n323 |       identifier: identifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:335:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n333 |           source: \"DefaultCryptoService\"\n334 |         )\n335 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n336 |     }\n337 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:346:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n344 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n345 | \n346 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n347 |       \"Retrieving data with identifier: \\(identifier)\",\n348 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:352:44: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n350 |     )\n351 | \n352 |     let retrieveResult=await secureStorage.retrieveSecurely(\n    |                                            `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n353 |       identifier: identifier\n354 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:365:26: error: enum case 'keyNotFound' has no associated values\n363 |           source: \"DefaultCryptoService\"\n364 |         )\n365 |         return .failure(.keyNotFound(identifier))\n    |                          `- error: enum case 'keyNotFound' has no associated values\n366 |     }\n367 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:376:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n374 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n375 | \n376 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n377 |       \"Exporting data with identifier: \\(identifier)\",\n378 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:374:9: warning: initialization of immutable value 'actualOptions' was never used; consider replacing with assignment to '_' or removing it\n372 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n373 |     // Use provided options or convert our factory options to CryptoServiceOptions\n374 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n    |         `- warning: initialization of immutable value 'actualOptions' was never used; consider replacing with assignment to '_' or removing it\n375 | \n376 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:394:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n392 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n393 | \n394 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n395 |       \"Importing data with identifier: \\(identifier)\",\n396 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:400:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n398 |     )\n399 | \n400 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n401 |       data: data,\n402 |       identifier: identifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:414:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n412 |           source: \"DefaultCryptoService\"\n413 |         )\n414 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n415 |     }\n416 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:425:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n423 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n424 | \n425 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n426 |       \"Deleting data with identifier: \\(identifier)\",\n427 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:431:42: error: value of type 'any SecureStorageProtocol' has no member 'deleteSecurely'\n429 |     )\n430 | \n431 |     let deleteResult=await secureStorage.deleteSecurely(\n    |                                          `- error: value of type 'any SecureStorageProtocol' has no member 'deleteSecurely'\n432 |       identifier: identifier\n433 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:445:28: error: enum case 'keyNotFound' has no associated values\n443 |         )\n444 |         if case .keyNotFound=error {\n445 |           return .failure(.keyNotFound(identifier))\n    |                            `- error: enum case 'keyNotFound' has no associated values\n446 |         } else {\n447 |           return .failure(.storageFailure(error))\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:447:28: error: type 'SecurityStorageError' has no member 'storageFailure'\n445 |           return .failure(.keyNotFound(identifier))\n446 |         } else {\n447 |           return .failure(.storageFailure(error))\n    |                            `- error: type 'SecurityStorageError' has no member 'storageFailure'\n448 |         }\n449 |     }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 |   private let logger: LoggingProtocol\n 21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:17:14: error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  CryptoServiceProtocol API.\n 16 |  */\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n102 |   }\n103 | \n104 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n105 |     encryptedDataIdentifier: String,\n106 |     keyIdentifier: String,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:49:29: error: cannot find 'SecurityProviderOptions' in scope\n 47 | \n 48 |     // Prepare operation options\n 49 |     let encryptionOptions = SecurityProviderOptions(\n    |                             `- error: cannot find 'SecurityProviderOptions' in scope\n 50 |       algorithm: .aes256GCM,\n 51 |       mode: .encrypt,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:50:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n 48 |     // Prepare operation options\n 49 |     let encryptionOptions = SecurityProviderOptions(\n 50 |       algorithm: .aes256GCM,\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n 51 |       mode: .encrypt,\n 52 |       keySize: 256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:51:14: error: cannot infer contextual base in reference to member 'encrypt'\n 49 |     let encryptionOptions = SecurityProviderOptions(\n 50 |       algorithm: .aes256GCM,\n 51 |       mode: .encrypt,\n    |              `- error: cannot infer contextual base in reference to member 'encrypt'\n 52 |       keySize: 256\n 53 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:56:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n 54 | \n 55 |     // Delegate to security provider\n 56 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n 57 |       .encryption,\n 58 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:57:8: error: cannot infer contextual base in reference to member 'encryption'\n 55 |     // Delegate to security provider\n 56 |     let result = await provider.performOperation(\n 57 |       .encryption,\n    |        `- error: cannot infer contextual base in reference to member 'encryption'\n 58 |       data: data,\n 59 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:87:30: error: type 'SecurityStorageError' has no member 'storageFailure'\n 85 |               )\n 86 |             )\n 87 |             return .failure(.storageFailure(error))\n    |                              `- error: type 'SecurityStorageError' has no member 'storageFailure'\n 88 |         }\n 89 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:123:24: error: enum case 'keyNotFound' has no associated values\n121 |         )\n122 |       }\n123 |       return .failure(.keyNotFound(encryptedDataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n124 |     }\n125 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:138:29: error: cannot find 'SecurityProviderOptions' in scope\n136 | \n137 |     // Prepare operation options\n138 |     let decryptionOptions = SecurityProviderOptions(\n    |                             `- error: cannot find 'SecurityProviderOptions' in scope\n139 |       algorithm: .aes256GCM,\n140 |       mode: .decrypt,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:139:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n137 |     // Prepare operation options\n138 |     let decryptionOptions = SecurityProviderOptions(\n139 |       algorithm: .aes256GCM,\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n140 |       mode: .decrypt,\n141 |       keySize: 256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:140:14: error: cannot infer contextual base in reference to member 'decrypt'\n138 |     let decryptionOptions = SecurityProviderOptions(\n139 |       algorithm: .aes256GCM,\n140 |       mode: .decrypt,\n    |              `- error: cannot infer contextual base in reference to member 'decrypt'\n141 |       keySize: 256\n142 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:145:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n143 | \n144 |     // Delegate to security provider\n145 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n146 |       .decryption,\n147 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:146:8: error: cannot infer contextual base in reference to member 'decryption'\n144 |     // Delegate to security provider\n145 |     let result = await provider.performOperation(\n146 |       .decryption,\n    |        `- error: cannot infer contextual base in reference to member 'decryption'\n147 |       data: data,\n148 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:186:28: error: cannot find type 'HashingAlgorithm' in scope\n184 | \n185 |     // Map hash algorithm to security provider algorithm\n186 |     let providerAlgorithm: HashingAlgorithm = switch algorithm {\n    |                            `- error: cannot find type 'HashingAlgorithm' in scope\n187 |       case .sha256:\n188 |         .sha256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:194:23: error: cannot find 'SecurityProviderOptions' in scope\n192 | \n193 |     // Prepare operation options\n194 |     let hashOptions = SecurityProviderOptions(\n    |                       `- error: cannot find 'SecurityProviderOptions' in scope\n195 |       hashAlgorithm: providerAlgorithm\n196 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:199:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n197 | \n198 |     // Delegate to security provider\n199 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n200 |       .hashing,\n201 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:200:8: error: cannot infer contextual base in reference to member 'hashing'\n198 |     // Delegate to security provider\n199 |     let result = await provider.performOperation(\n200 |       .hashing,\n    |        `- error: cannot infer contextual base in reference to member 'hashing'\n201 |       data: data,\n202 |       options: hashOptions\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:229:30: error: type 'SecurityStorageError' has no member 'storageFailure'\n227 |               )\n228 |             )\n229 |             return .failure(.storageFailure(error))\n    |                              `- error: type 'SecurityStorageError' has no member 'storageFailure'\n230 |         }\n231 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:264:24: error: enum case 'keyNotFound' has no associated values\n262 |         )\n263 |       }\n264 |       return .failure(.keyNotFound(dataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n265 |     }\n266 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:281:24: error: enum case 'keyNotFound' has no associated values\n279 |         )\n280 |       }\n281 |       return .failure(.keyNotFound(expectedHashIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n282 |     }\n283 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:296:33: error: value of type 'any SecurityProviderProtocol' has no member 'verifyHash'\n294 | \n295 |     // Delegate to security provider\n296 |     let result = await provider.verifyHash(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'verifyHash'\n297 |       data: data,\n298 |       expectedHash: expectedHash\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:329:22: error: cannot find 'SecurityKeyOptions' in scope\n327 |     \n328 |     // Prepare key generation options\n329 |     let keyOptions = SecurityKeyOptions(\n    |                      `- error: cannot find 'SecurityKeyOptions' in scope\n330 |       keySize: length * 8,\n331 |       algorithm: .aes256GCM\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:331:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n329 |     let keyOptions = SecurityKeyOptions(\n330 |       keySize: length * 8,\n331 |       algorithm: .aes256GCM\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n332 |     )\n333 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:8:15: error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n 6 |  Enhanced log context for crypto operations with privacy controls\n 7 |  */\n 8 | public struct EnhancedLogContext: LogContextDTO {\n   |               |- error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n   |               `- note: add stubs for conformance\n 9 |   /// Domain name for the log context\n10 |   public let domainName: String\n   :\n14 |   \n15 |   /// Additional context metadata as key-value pairs\n16 |   public let metadata: [String: String]\n   |              `- note: candidate has non-matching type '[String : String]'\n17 |   \n18 |   /// Privacy level for each metadata field\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:13:7: note: protocol requires property 'source' with type 'String?'\n11 | \n12 |   /// Optional source information (class, file, etc.)\n13 |   var source: String? { get }\n   |       `- note: protocol requires property 'source' with type 'String?'\n14 | \n15 |   /// Optional correlation ID for tracing related log events\n16 |   var correlationID: String? { get }\n   |       `- note: protocol requires property 'correlationID' with type 'String?'\n17 | \n18 |   /// The metadata collection for this context\n19 |   var metadata: LogMetadataDTOCollection { get }\n   |       `- note: protocol requires property 'metadata' with type 'LogMetadataDTOCollection'\n20 | }\n21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:63:7: error: switch must be exhaustive\n61 |       let privacy = privacyLevel(for: key)\n62 |       \n63 |       switch privacy {\n   |       |- error: switch must be exhaustive\n   |       `- note: add missing case: '.hash'\n64 |       case .private:\n65 |         _ = collection.withPrivate(key: key, value: value)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:16:14: error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 14 |  logging with proper privacy tags for sensitive data.\n 15 |  */\n 16 | public actor EnhancedLoggingCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 17 |   /// The wrapped implementation\n 18 |   private let wrapped: CryptoServiceProtocol\n    :\n 81 |   }\n 82 | \n 83 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 84 |     encryptedDataIdentifier: String,\n 85 |     keyIdentifier: String,\n    :\n215 |   }\n216 | \n217 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n218 |     length: Int,\n219 |     options: KeyGenerationOptions?=nil\n    :\n258 |   }\n259 | \n260 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n261 |     data: [UInt8],\n262 |     identifier: String\n    :\n300 |   }\n301 | \n302 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n303 |     identifier: String\n304 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n    :\n421 |   }\n422 | \n423 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n424 |     identifier: String\n425 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:58:37: error: incorrect argument label in call (have 'data:keyIdentifier:options:', expected 'dataIdentifier:keyIdentifier:options:')\n 56 | \n 57 |     // Perform the operation\n 58 |     let result=await wrapped.encrypt(\n    |                                     `- error: incorrect argument label in call (have 'data:keyIdentifier:options:', expected 'dataIdentifier:keyIdentifier:options:')\n 59 |       data: data,\n 60 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:59:13: error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n 57 |     // Perform the operation\n 58 |     let result=await wrapped.encrypt(\n 59 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n 60 |       keyIdentifier: keyIdentifier,\n 61 |       options: options\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:61:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'EncryptionOptions?'\n 59 |       data: data,\n 60 |       keyIdentifier: keyIdentifier,\n 61 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'EncryptionOptions?'\n 62 |     )\n 63 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:67:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 65 |     switch result {\n 66 |       case let .success(identifier):\n 67 |         context.updateMetadata([\"dataIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 68 |         await logger.debug(\n 69 |           \"Encryption successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:67:52: error: type 'Any' has no member 'private'\n 65 |     switch result {\n 66 |       case let .success(identifier):\n 67 |         context.updateMetadata([\"dataIdentifier\": .private(identifier)])\n    |                                                    `- error: type 'Any' has no member 'private'\n 68 |         await logger.debug(\n 69 |           \"Encryption successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:73:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 71 |         )\n 72 |       case let .failure(error):\n 73 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 74 |         await logger.error(\n 75 |           \"Encryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:73:43: error: type 'Any' has no member 'hash'\n 71 |         )\n 72 |       case let .failure(error):\n 73 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n 74 |         await logger.error(\n 75 |           \"Encryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:107:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'DecryptionOptions?'\n105 |       encryptedDataIdentifier: encryptedDataIdentifier,\n106 |       keyIdentifier: keyIdentifier,\n107 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'DecryptionOptions?'\n108 |     )\n109 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:118:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n116 |         )\n117 |       case let .failure(error):\n118 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n119 |         await logger.error(\n120 |           \"Decryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:118:43: error: type 'Any' has no member 'hash'\n116 |         )\n117 |       case let .failure(error):\n118 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n119 |         await logger.error(\n120 |           \"Decryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:147:42: error: incorrect argument labels in call (have 'data:algorithm:', expected 'dataIdentifier:options:')\n145 | \n146 |     // Perform the operation\n147 |     let result=await wrapped.generateHash(\n    |                                          `- error: incorrect argument labels in call (have 'data:algorithm:', expected 'dataIdentifier:options:')\n148 |       data: data,\n149 |       algorithm: algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:148:13: error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n146 |     // Perform the operation\n147 |     let result=await wrapped.generateHash(\n148 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n149 |       algorithm: algorithm\n150 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:149:18: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n147 |     let result=await wrapped.generateHash(\n148 |       data: data,\n149 |       algorithm: algorithm\n    |                  `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n150 |     )\n151 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:155:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n153 |     switch result {\n154 |       case let .success(identifier):\n155 |         context.updateMetadata([\"hashIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n156 |         await logger.debug(\n157 |           \"Hash generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:155:52: error: type 'Any' has no member 'private'\n153 |     switch result {\n154 |       case let .success(identifier):\n155 |         context.updateMetadata([\"hashIdentifier\": .private(identifier)])\n    |                                                    `- error: type 'Any' has no member 'private'\n156 |         await logger.debug(\n157 |           \"Hash generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:161:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n159 |         )\n160 |       case let .failure(error):\n161 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n162 |         await logger.error(\n163 |           \"Hash generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:161:43: error: type 'Any' has no member 'hash'\n159 |         )\n160 |       case let .failure(error):\n161 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n162 |         await logger.error(\n163 |           \"Hash generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:195:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'HashingOptions?'\n193 |       dataIdentifier: dataIdentifier,\n194 |       hashIdentifier: expectedHashIdentifier,\n195 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'HashingOptions?'\n196 |     )\n197 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:201:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n199 |     switch result {\n200 |       case let .success(matches):\n201 |         context.updateMetadata([\"matches\": .public(String(describing: matches))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n202 |         await logger.debug(\n203 |           \"Hash verification completed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:201:45: error: type 'Any' has no member 'public'\n199 |     switch result {\n200 |       case let .success(matches):\n201 |         context.updateMetadata([\"matches\": .public(String(describing: matches))])\n    |                                             `- error: type 'Any' has no member 'public'\n202 |         await logger.debug(\n203 |           \"Hash verification completed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:207:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n205 |         )\n206 |       case let .failure(error):\n207 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n208 |         await logger.error(\n209 |           \"Hash verification failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:207:43: error: type 'Any' has no member 'hash'\n205 |         )\n206 |       case let .failure(error):\n207 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n208 |         await logger.error(\n209 |           \"Hash verification failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:238:16: error: cannot convert value of type 'CryptoServices.KeyGenerationOptions?' to expected argument type 'SecurityCoreInterfaces.KeyGenerationOptions?'\n236 |     let result=await wrapped.generateKey(\n237 |       length: length,\n238 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServices.KeyGenerationOptions?' to expected argument type 'SecurityCoreInterfaces.KeyGenerationOptions?'\n239 |     )\n240 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:244:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n242 |     switch result {\n243 |       case let .success(identifier):\n244 |         context.updateMetadata([\"keyIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n245 |         await logger.debug(\n246 |           \"Key generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:244:51: error: type 'Any' has no member 'private'\n242 |     switch result {\n243 |       case let .success(identifier):\n244 |         context.updateMetadata([\"keyIdentifier\": .private(identifier)])\n    |                                                   `- error: type 'Any' has no member 'private'\n245 |         await logger.debug(\n246 |           \"Key generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:250:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n248 |         )\n249 |       case let .failure(error):\n250 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n251 |         await logger.error(\n252 |           \"Key generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:250:43: error: type 'Any' has no member 'hash'\n248 |         )\n249 |       case let .failure(error):\n250 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n251 |         await logger.error(\n252 |           \"Key generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:280:13: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n278 |     // Perform the operation\n279 |     let result=await wrapped.storeData(\n280 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n281 |       identifier: identifier\n282 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:292:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n290 |         )\n291 |       case let .failure(error):\n292 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n293 |         await logger.error(\n294 |           \"Data storage failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:292:43: error: type 'Any' has no member 'hash'\n290 |         )\n291 |       case let .failure(error):\n292 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n293 |         await logger.error(\n294 |           \"Data storage failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:332:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n330 |         )\n331 |       case let .failure(error):\n332 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n333 |         await logger.error(\n334 |           \"Data retrieval failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:332:43: error: type 'Any' has no member 'hash'\n330 |         )\n331 |       case let .failure(error):\n332 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n333 |         await logger.error(\n334 |           \"Data retrieval failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:339:12: error: cannot convert return expression of type 'Result\u003cData, SecurityStorageError\u003e' to return type 'Result\u003c[UInt8], SecurityStorageError\u003e'\n337 |     }\n338 | \n339 |     return result\n    |            |- error: cannot convert return expression of type 'Result\u003cData, SecurityStorageError\u003e' to return type 'Result\u003c[UInt8], SecurityStorageError\u003e'\n    |            `- note: arguments to generic parameter 'Success' ('Data' and '[UInt8]') are expected to be equal\n340 |   }\n341 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:372:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n370 |         )\n371 |       case let .failure(error):\n372 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n373 |         await logger.error(\n374 |           \"Data export failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:372:43: error: type 'Any' has no member 'hash'\n370 |         )\n371 |       case let .failure(error):\n372 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n373 |         await logger.error(\n374 |           \"Data export failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:407:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n405 |     switch result {\n406 |       case let .success(resultIdentifier):\n407 |         context.updateMetadata([\"resultIdentifier\": .private(resultIdentifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n408 |         await logger.debug(\n409 |           \"Data import successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:407:54: error: type 'Any' has no member 'private'\n405 |     switch result {\n406 |       case let .success(resultIdentifier):\n407 |         context.updateMetadata([\"resultIdentifier\": .private(resultIdentifier)])\n    |                                                      `- error: type 'Any' has no member 'private'\n408 |         await logger.debug(\n409 |           \"Data import successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:413:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n411 |         )\n412 |       case let .failure(error):\n413 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n414 |         await logger.error(\n415 |           \"Data import failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:413:43: error: type 'Any' has no member 'hash'\n411 |         )\n412 |       case let .failure(error):\n413 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n414 |         await logger.error(\n415 |           \"Data import failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:453:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n451 |         )\n452 |       case let .failure(error):\n453 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n454 |         await logger.error(\n455 |           \"Data deletion failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:453:43: error: type 'Any' has no member 'hash'\n451 |         )\n452 |       case let .failure(error):\n453 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n454 |         await logger.error(\n455 |           \"Data deletion failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:460:12: error: cannot convert return expression of type 'Result\u003cVoid, SecurityStorageError\u003e' to return type 'Result\u003cBool, SecurityStorageError\u003e'\n458 |     }\n459 | \n460 |     return result\n    |            |- error: cannot convert return expression of type 'Result\u003cVoid, SecurityStorageError\u003e' to return type 'Result\u003cBool, SecurityStorageError\u003e'\n    |            `- note: arguments to generic parameter 'Success' ('Void' and 'Bool') are expected to be equal\n461 |   }\n462 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:477:35: error: extra arguments at positions #2, #3 in call\n475 |     identifiers: [String: PrivacyLevel]\n476 |   ) -\u003e EnhancedLogContext {\n477 |     var context=EnhancedLogContext(\n    |                                   `- error: extra arguments at positions #2, #3 in call\n478 |       domainName: \"CryptoServices\",\n479 |       source: \"CryptoServiceFactory\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:30:10: note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n28 |      - privacyLevels: Privacy levels for each metadata field\n29 |    */\n30 |   public init(\n   |          `- note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n31 |     domainName: String,\n32 |     operationName: String,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:478:35: error: missing argument for parameter 'operationName' in call\n476 |   ) -\u003e EnhancedLogContext {\n477 |     var context=EnhancedLogContext(\n478 |       domainName: \"CryptoServices\",\n    |                                   `- error: missing argument for parameter 'operationName' in call\n479 |       source: \"CryptoServiceFactory\",\n480 |       correlationID: nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:30:10: note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n28 |      - privacyLevels: Privacy levels for each metadata field\n29 |    */\n30 |   public init(\n   |          `- note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n31 |     domainName: String,\n32 |     operationName: String,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:480:22: error: 'nil' requires a contextual type\n478 |       domainName: \"CryptoServices\",\n479 |       source: \"CryptoServiceFactory\",\n480 |       correlationID: nil\n    |                      `- error: 'nil' requires a contextual type\n481 |     )\n482 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:47:30: error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n 47 |     rateLimiter: RateLimiter=RateLimiter()\n    |                              `- error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 48 |   ) {\n 49 |     self.wrapped = wrapped\n    :\n443 |  Simple rate limiter for security operations.\n444 |  */\n445 | public class RateLimiter {\n    |              `- note: initializer 'init()' is not '@usableFromInline' or public\n446 |   public enum Operation: String {\n447 |     case encrypt, decrypt, hash, verify, export, generateKey\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:384:15: error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n382 |    - Returns: The exported data or error\n383 |    */\n384 |   public func exportData(\n    |               `- error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n385 |     withIdentifier identifier: String\n386 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:81:8: note: requirement 'exportData(identifier:)' declared here\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: requirement 'exportData(identifier:)' declared here\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:20:14: error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 18 |  validation of cryptographic operations.\n 19 |  */\n 20 | public actor EnhancedSecureCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 21 | \n 22 |   /// The wrapped implementation that does the actual cryptographic work\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:412:36: error: incorrect argument label in call (have 'withIdentifier:', expected 'identifier:')\n410 | \n411 |     // Use the wrapped implementation to perform the export\n412 |     return await wrapped.exportData(withIdentifier: identifier)\n    |                                    `- error: incorrect argument label in call (have 'withIdentifier:', expected 'identifier:')\n413 |   }\n414 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:438:38: error: missing argument for parameter 'length' in call\n436 | \n437 |     // Use the wrapped implementation to generate the key\n438 |     return await wrapped.generateKey(options: options)\n    |                                      `- error: missing argument for parameter 'length' in call\n439 |   }\n440 | }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: 'generateKey(length:options:)' declared here\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: 'generateKey(length:options:)' declared here\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/LoggingCryptoServiceImpl.swift:9:14: error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n  7 |  all operations before delegating to the wrapped implementation.\n  8 |  */\n  9 | public actor LoggingCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 10 |   /// The wrapped implementation\n 11 |   private let wrapped: CryptoServiceProtocol\n    :\n339 |    - Returns: Identifier for the imported data or an error\n340 |    */\n341 |   public func importData(\n    |               `- note: candidate has non-matching type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n342 |     _ data: [UInt8],\n343 |     customIdentifier: String?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:93:8: note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:47:31: error: cannot find type 'CryptoProviderProtocol' in scope\n  45 |   \n  46 |   /// Crypto provider for cryptographic operations\n  47 |   private let cryptoProvider: CryptoProviderProtocol\n     |                               `- error: cannot find type 'CryptoProviderProtocol' in scope\n  48 |   \n  49 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:64:21: error: cannot find type 'CryptoProviderProtocol' in scope\n  62 |     wrapped: CryptoServiceProtocol,\n  63 |     secureStorage: SecureStorageProtocol,\n  64 |     cryptoProvider: CryptoProviderProtocol,\n     |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n  65 |     logger: LoggingProtocol\n  66 |   ) {\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoStorage.swift:417:33: error: cannot find 'getSecureStorage' in scope\n415 |     // Currently we just attempt to retrieve the data and check if it exists\n416 |     // This could be optimized in a real implementation to avoid loading the data\n417 |     let secureStore = try await getSecureStorage()\n    |                                 `- error: cannot find 'getSecureStorage' in scope\n418 |     return secureStore.hasKey(identifier)\n419 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n264 |    - Returns: Result containing array of identifiers or error details\n265 |    */\n266 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n267 |     await logger.warning(\n268 |       \"List data identifiers operation not supported\",\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecureStorageProtocol.swift:14:8: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n12 |   ///   - identifier: A string identifier for the stored data.\n13 |   /// - Returns: Success or an error.\n14 |   func storeData(_ data: [UInt8], withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n15 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n16 | \n   :\n18 |   /// - Parameter identifier: A string identifying the data to retrieve.\n19 |   /// - Returns: The retrieved data as a byte array or an error.\n20 |   func retrieveData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n21 |     -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n22 | \n   :\n24 |   /// - Parameter identifier: A string identifying the data to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n27 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n28 | \n29 |   /// Lists all available data identifiers.\n30 |   /// - Returns: An array of data identifiers or an error.\n31 |   func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityStorageError\u003e\n   |        `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n32 | }\n33 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:158:63: error: type '_ErrorCodeProtocol' has no member 'notFound'\n156 |       )\n157 |       \n158 |       if let storageError = error as? StorageCoreError, case .notFound = storageError {\n    |                                                               `- error: type '_ErrorCodeProtocol' has no member 'notFound'\n159 |         return .failure(.dataNotFound)\n160 |       }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:162:61: error: cannot convert value of type 'SecurityCoreInterfaces.KeyType' to expected argument type 'CryptoServices.KeyType'\n160 |     var configOptions=SecurityConfigOptions()\n161 | \n162 |     let metadataDict=addMetadata(keySize: keySize, keyType: keyType)\n    |                                                             `- error: cannot convert value of type 'SecurityCoreInterfaces.KeyType' to expected argument type 'CryptoServices.KeyType'\n163 | \n164 |     if !metadataDict.isEmpty {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:196:13: error: type 'KeyType' has no member 'symmetric'\n194 |     let localKeyType: KeyType\n195 |     switch keyType {\n196 |       case .symmetric:\n    |             `- error: type 'KeyType' has no member 'symmetric'\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:198:13: error: type 'KeyType' has no member 'asymmetric'\n196 |       case .symmetric:\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n    |             `- error: type 'KeyType' has no member 'asymmetric'\n199 |         localKeyType = .asymmetric\n200 |       default:\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:197:25: error: type 'KeyType' has no member 'symmetric'\n195 |     switch keyType {\n196 |       case .symmetric:\n197 |         localKeyType = .symmetric\n    |                         `- error: type 'KeyType' has no member 'symmetric'\n198 |       case .asymmetric:\n199 |         localKeyType = .asymmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:199:25: error: type 'KeyType' has no member 'asymmetric'\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n199 |         localKeyType = .asymmetric\n    |                         `- error: type 'KeyType' has no member 'asymmetric'\n200 |       default:\n201 |         localKeyType = .symmetric // Default to symmetric as fallback\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:25: error: type 'KeyType' has no member 'symmetric'\n199 |         localKeyType = .asymmetric\n200 |       default:\n201 |         localKeyType = .symmetric // Default to symmetric as fallback\n    |                         `- error: type 'KeyType' has no member 'symmetric'\n202 |     }\n203 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/OptionTypes.swift:109:14: warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n107 | public struct SendableOptionsDictionary: Sendable {\n108 |   /// The underlying dictionary\n109 |   public let dictionary: [String: Any]\n    |              `- warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n110 |   \n111 |   /**\nTarget //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations failed to build\nINFO: Elapsed time: 1.146s, Critical Path: 0.99s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories",
    "success": false,
    "start_time": "2025-04-06T11:27:28.367597+01:00",
    "end_time": "2025-04-06T11:27:30.071776+01:00",
    "duration": "1.704186292s",
    "output": "INFO: Invocation ID: 4fa40d8c-a19a-472e-a84f-589be4e0914d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:14: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.4.1-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:55:8: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 53 |   private static func convert(\n 54 |     _ algorithm: SecurityCoreInterfaces\n 55 |       .EncryptionAlgorithm\n    |        `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 56 |   ) -\u003e EncryptionAlgorithm {\n 57 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:69:4: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 67 | \n 68 |   private static func convertToInterface(_ algorithm: EncryptionAlgorithm) -\u003e SecurityCoreInterfaces\n 69 |   .EncryptionAlgorithm {\n    |    `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 70 |     switch algorithm {\n 71 |       case .aes:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:81:62: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 79 | \n 80 |   // Helper methods for mode conversion\n 81 |   private static func convert(_ mode: SecurityCoreInterfaces.EncryptionMode) -\u003e EncryptionMode {\n    |                                                              `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 82 |     switch mode {\n 83 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:94:4: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 92 | \n 93 |   private static func convertToInterface(_ mode: EncryptionMode) -\u003e SecurityCoreInterfaces\n 94 |   .EncryptionMode {\n    |    `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 95 |     switch mode {\n 96 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:109:8: error: cannot find type 'EncryptionPadding' in scope\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n109 |   ) -\u003e EncryptionPadding {\n    |        `- error: cannot find type 'EncryptionPadding' in scope\n110 |     switch padding {\n111 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:108:8: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n106 |   private static func convert(\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n    |        `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n109 |   ) -\u003e EncryptionPadding {\n110 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:122:4: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n122 |   .EncryptionPadding {\n    |    `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n123 |     switch padding {\n124 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:121:53: error: cannot find type 'EncryptionPadding' in scope\n119 |   }\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n    |                                                     `- error: cannot find type 'EncryptionPadding' in scope\n122 |   .EncryptionPadding {\n123 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:147:8: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n145 |     _ options: SecurityCoreInterfaces\n146 |       .DecryptionOptions?\n147 |   ) -\u003e DecryptionOptions? {\n    |        `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n148 |     guard let options else { return nil }\n149 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:164:52: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n162 |    - Returns: The converted options or nil if input was nil\n163 |    */\n164 |   public static func convertToInterface(_ options: DecryptionOptions?) -\u003e SecurityCoreInterfaces\n    |                                                    `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n165 |   .DecryptionOptions? {\n166 |     guard let options else { return nil }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:216:8: error: cannot find type 'HashingAlgorithm' in scope\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n216 |   ) -\u003e HashingAlgorithm {\n    |        `- error: cannot find type 'HashingAlgorithm' in scope\n217 |     switch algorithm {\n218 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:215:8: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n213 |   private static func convert(\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n    |        `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n216 |   ) -\u003e HashingAlgorithm {\n217 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:231:4: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n231 |   .HashingAlgorithm {\n    |    `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n232 |     switch algorithm {\n233 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:230:55: error: cannot find type 'HashingAlgorithm' in scope\n228 |   }\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n    |                                                       `- error: cannot find type 'HashingAlgorithm' in scope\n231 |   .HashingAlgorithm {\n232 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:228:18: error: cannot find type 'DeploymentEnvironment' in scope\n226 |     secureStorage: SecureStorageProtocol?=nil,\n227 |     logger: LoggingProtocol?=nil,\n228 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:33:14: error: cannot find type 'SecurityProviderOptions' in scope\n31 |     data: [UInt8],\n32 |     keyIdentifier: String?=nil,\n33 |     options: SecurityProviderOptions?=nil\n   |              `- error: cannot find type 'SecurityProviderOptions' in scope\n34 |   ) async -\u003e Result\u003c[UInt8], Error\u003e {\n35 |     // Basic implementation of security operations\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:80:16: error: cannot find type 'SecurityProviderOptions' in scope\n78 | \n79 |   public func generateKey(\n80 |     options _: SecurityProviderOptions\n   |                `- error: cannot find type 'SecurityProviderOptions' in scope\n81 |   ) async -\u003e Result\u003cString, Error\u003e {\n82 |     // In a real implementation, this would generate an actual cryptographic key\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              |- error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n   |              `- note: add stubs for conformance\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:30:8: note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 28 | \n 29 |   /// Access to cryptographic service implementation\n 30 |   func cryptoService() async -\u003e CryptoServiceProtocol\n    |        `- note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 31 | \n 32 |   /// Access to key management service implementation\n 33 |   func keyManager() async -\u003e KeyManagementProtocol\n    |        `- note: protocol requires function 'keyManager()' with type '() async -\u003e any KeyManagementProtocol'\n 34 | \n 35 |   // MARK: - Core Operations\n    :\n 41 |    - Returns: Result containing encrypted data or error\n 42 |    */\n 43 |   func encrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'encrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 44 | \n 45 |   /**\n    :\n 49 |    - Returns: Result containing decrypted data or error\n 50 |    */\n 51 |   func decrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'decrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 52 | \n 53 |   /**\n    :\n 65 |    - Returns: Result containing storage confirmation or error\n 66 |    */\n 67 |   func secureStore(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureStore(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 68 | \n 69 |   /**\n    :\n 73 |    - Returns: Result containing retrieved data or error\n 74 |    */\n 75 |   func secureRetrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureRetrieve(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 76 | \n 77 |   /**\n    :\n 81 |    - Returns: Result containing deletion confirmation or error\n 82 |    */\n 83 |   func secureDelete(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureDelete(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 84 | \n 85 |   /**\n    :\n 89 |    - Returns: Result containing signature data or error\n 90 |    */\n 91 |   func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'sign(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 92 | \n 93 |   /**\n    :\n 97 |    - Returns: Result containing verification status or error\n 98 |    */\n 99 |   func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'verify(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n100 | \n101 |   /**\n    :\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n    :\n121 |    - Returns: A properly configured SecurityConfigDTO\n122 |    */\n123 |   func createSecureConfig(options: SecurityConfigOptions) async -\u003e SecurityConfigDTO\n    |        `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n124 | }\n125 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 | \n 21 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:17:14: error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  as the baseline implementation when more specialised providers aren't selected.\n 16 |  */\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n 97 |   }\n 98 | \n 99 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n100 |     encryptedDataIdentifier: String,\n101 |     keyIdentifier: String,\n    :\n198 |   }\n199 | \n200 |   public func verifyHash(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n201 |     dataIdentifier: String,\n202 |     hashIdentifier: String,\n    :\n259 |   }\n260 | \n261 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n262 |     length: Int,\n263 |     options: CryptoServiceOptions?=nil\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 |   private let logger: LoggingProtocol\n 21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:17:14: error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  CryptoServiceProtocol API.\n 16 |  */\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n102 |   }\n103 | \n104 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n105 |     encryptedDataIdentifier: String,\n106 |     keyIdentifier: String,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:8:15: error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n 6 |  Enhanced log context for crypto operations with privacy controls\n 7 |  */\n 8 | public struct EnhancedLogContext: LogContextDTO {\n   |               |- error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n   |               `- note: add stubs for conformance\n 9 |   /// Domain name for the log context\n10 |   public let domainName: String\n   :\n14 |   \n15 |   /// Additional context metadata as key-value pairs\n16 |   public let metadata: [String: String]\n   |              `- note: candidate has non-matching type '[String : String]'\n17 |   \n18 |   /// Privacy level for each metadata field\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:13:7: note: protocol requires property 'source' with type 'String?'\n11 | \n12 |   /// Optional source information (class, file, etc.)\n13 |   var source: String? { get }\n   |       `- note: protocol requires property 'source' with type 'String?'\n14 | \n15 |   /// Optional correlation ID for tracing related log events\n16 |   var correlationID: String? { get }\n   |       `- note: protocol requires property 'correlationID' with type 'String?'\n17 | \n18 |   /// The metadata collection for this context\n19 |   var metadata: LogMetadataDTOCollection { get }\n   |       `- note: protocol requires property 'metadata' with type 'LogMetadataDTOCollection'\n20 | }\n21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:16:14: error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 14 |  logging with proper privacy tags for sensitive data.\n 15 |  */\n 16 | public actor EnhancedLoggingCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 17 |   /// The wrapped implementation\n 18 |   private let wrapped: CryptoServiceProtocol\n    :\n 81 |   }\n 82 | \n 83 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 84 |     encryptedDataIdentifier: String,\n 85 |     keyIdentifier: String,\n    :\n215 |   }\n216 | \n217 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n218 |     length: Int,\n219 |     options: KeyGenerationOptions?=nil\n    :\n258 |   }\n259 | \n260 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n261 |     data: [UInt8],\n262 |     identifier: String\n    :\n300 |   }\n301 | \n302 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n303 |     identifier: String\n304 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n    :\n421 |   }\n422 | \n423 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n424 |     identifier: String\n425 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:47:30: error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n 47 |     rateLimiter: RateLimiter=RateLimiter()\n    |                              `- error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 48 |   ) {\n 49 |     self.wrapped = wrapped\n    :\n443 |  Simple rate limiter for security operations.\n444 |  */\n445 | public class RateLimiter {\n    |              `- note: initializer 'init()' is not '@usableFromInline' or public\n446 |   public enum Operation: String {\n447 |     case encrypt, decrypt, hash, verify, export, generateKey\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:384:15: error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n382 |    - Returns: The exported data or error\n383 |    */\n384 |   public func exportData(\n    |               `- error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n385 |     withIdentifier identifier: String\n386 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:81:8: note: requirement 'exportData(identifier:)' declared here\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: requirement 'exportData(identifier:)' declared here\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:20:14: error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 18 |  validation of cryptographic operations.\n 19 |  */\n 20 | public actor EnhancedSecureCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 21 | \n 22 |   /// The wrapped implementation that does the actual cryptographic work\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/LoggingCryptoServiceImpl.swift:9:14: error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n  7 |  all operations before delegating to the wrapped implementation.\n  8 |  */\n  9 | public actor LoggingCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 10 |   /// The wrapped implementation\n 11 |   private let wrapped: CryptoServiceProtocol\n    :\n339 |    - Returns: Identifier for the imported data or an error\n340 |    */\n341 |   public func importData(\n    |               `- note: candidate has non-matching type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n342 |     _ data: [UInt8],\n343 |     customIdentifier: String?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:93:8: note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:47:31: error: cannot find type 'CryptoProviderProtocol' in scope\n  45 |   \n  46 |   /// Crypto provider for cryptographic operations\n  47 |   private let cryptoProvider: CryptoProviderProtocol\n     |                               `- error: cannot find type 'CryptoProviderProtocol' in scope\n  48 |   \n  49 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:64:21: error: cannot find type 'CryptoProviderProtocol' in scope\n  62 |     wrapped: CryptoServiceProtocol,\n  63 |     secureStorage: SecureStorageProtocol,\n  64 |     cryptoProvider: CryptoProviderProtocol,\n     |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n  65 |     logger: LoggingProtocol\n  66 |   ) {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n264 |    - Returns: Result containing array of identifiers or error details\n265 |    */\n266 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n267 |     await logger.warning(\n268 |       \"List data identifiers operation not supported\",\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecureStorageProtocol.swift:14:8: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n12 |   ///   - identifier: A string identifier for the stored data.\n13 |   /// - Returns: Success or an error.\n14 |   func storeData(_ data: [UInt8], withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n15 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n16 | \n   :\n18 |   /// - Parameter identifier: A string identifying the data to retrieve.\n19 |   /// - Returns: The retrieved data as a byte array or an error.\n20 |   func retrieveData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n21 |     -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n22 | \n   :\n24 |   /// - Parameter identifier: A string identifying the data to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n27 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n28 | \n29 |   /// Lists all available data identifiers.\n30 |   /// - Returns: An array of data identifiers or an error.\n31 |   func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityStorageError\u003e\n   |        `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n32 | }\n33 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/OptionTypes.swift:109:14: warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n107 | public struct SendableOptionsDictionary: Sendable {\n108 |   /// The underlying dictionary\n109 |   public let dictionary: [String: Any]\n    |              `- warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n110 |   \n111 |   /**\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:55:8: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 53 |   private static func convert(\n 54 |     _ algorithm: SecurityCoreInterfaces\n 55 |       .EncryptionAlgorithm\n    |        `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 56 |   ) -\u003e EncryptionAlgorithm {\n 57 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:69:4: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 67 | \n 68 |   private static func convertToInterface(_ algorithm: EncryptionAlgorithm) -\u003e SecurityCoreInterfaces\n 69 |   .EncryptionAlgorithm {\n    |    `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 70 |     switch algorithm {\n 71 |       case .aes:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:81:62: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 79 | \n 80 |   // Helper methods for mode conversion\n 81 |   private static func convert(_ mode: SecurityCoreInterfaces.EncryptionMode) -\u003e EncryptionMode {\n    |                                                              `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 82 |     switch mode {\n 83 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:94:4: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 92 | \n 93 |   private static func convertToInterface(_ mode: EncryptionMode) -\u003e SecurityCoreInterfaces\n 94 |   .EncryptionMode {\n    |    `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 95 |     switch mode {\n 96 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:109:8: error: cannot find type 'EncryptionPadding' in scope\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n109 |   ) -\u003e EncryptionPadding {\n    |        `- error: cannot find type 'EncryptionPadding' in scope\n110 |     switch padding {\n111 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:108:8: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n106 |   private static func convert(\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n    |        `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n109 |   ) -\u003e EncryptionPadding {\n110 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:122:4: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n122 |   .EncryptionPadding {\n    |    `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n123 |     switch padding {\n124 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:121:53: error: cannot find type 'EncryptionPadding' in scope\n119 |   }\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n    |                                                     `- error: cannot find type 'EncryptionPadding' in scope\n122 |   .EncryptionPadding {\n123 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:147:8: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n145 |     _ options: SecurityCoreInterfaces\n146 |       .DecryptionOptions?\n147 |   ) -\u003e DecryptionOptions? {\n    |        `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n148 |     guard let options else { return nil }\n149 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:164:52: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n162 |    - Returns: The converted options or nil if input was nil\n163 |    */\n164 |   public static func convertToInterface(_ options: DecryptionOptions?) -\u003e SecurityCoreInterfaces\n    |                                                    `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n165 |   .DecryptionOptions? {\n166 |     guard let options else { return nil }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:216:8: error: cannot find type 'HashingAlgorithm' in scope\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n216 |   ) -\u003e HashingAlgorithm {\n    |        `- error: cannot find type 'HashingAlgorithm' in scope\n217 |     switch algorithm {\n218 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:215:8: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n213 |   private static func convert(\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n    |        `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n216 |   ) -\u003e HashingAlgorithm {\n217 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:231:4: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n231 |   .HashingAlgorithm {\n    |    `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n232 |     switch algorithm {\n233 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:230:55: error: cannot find type 'HashingAlgorithm' in scope\n228 |   }\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n    |                                                       `- error: cannot find type 'HashingAlgorithm' in scope\n231 |   .HashingAlgorithm {\n232 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:26:29: error: extra arguments at positions #2, #3, #4 in call\n 24 |     guard let options else { return nil }\n 25 | \n 26 |     return EncryptionOptions(\n    |                             `- error: extra arguments at positions #2, #3, #4 in call\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:154:10: note: 'init(algorithm:authenticatedData:)' declared here\n152 | \n153 |   /// Initialises encryption options with defaults.\n154 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n155 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n156 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:27:18: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 25 | \n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n    |                  `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:27:34: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 25 | \n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n    |                                  `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:28:29: error: value of type 'EncryptionOptions' has no member 'mode'\n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n    |                             `- error: value of type 'EncryptionOptions' has no member 'mode'\n 29 |       padding: convert(options.padding),\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:29:32: error: value of type 'EncryptionOptions' has no member 'padding'\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n    |                                `- error: value of type 'EncryptionOptions' has no member 'padding'\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n 31 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:30:44: error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 31 |     )\n 32 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:44:52: error: extra arguments at positions #2, #3, #4 in call\n 42 |     guard let options else { return nil }\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n    |                                                    `- error: extra arguments at positions #2, #3, #4 in call\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:154:10: note: 'init(algorithm:authenticatedData:)' declared here\n152 | \n153 |   /// Initialises encryption options with defaults.\n154 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n155 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n156 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:45:18: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n    |                  `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:45:45: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n    |                                             `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:46:40: error: value of type 'EncryptionOptions' has no member 'mode'\n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n    |                                        `- error: value of type 'EncryptionOptions' has no member 'mode'\n 47 |       padding: convertToInterface(options.padding),\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:47:43: error: value of type 'EncryptionOptions' has no member 'padding'\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n    |                                           `- error: value of type 'EncryptionOptions' has no member 'padding'\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n 49 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:48:44: error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 49 |     )\n 50 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:59:17: error: type 'EncryptionAlgorithm' has no member 'aes'\n 57 |     switch algorithm {\n 58 |       case .aes:\n 59 |         return .aes\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 60 |       case .chacha20:\n 61 |         return .chacha20\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:61:17: error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 59 |         return .aes\n 60 |       case .chacha20:\n 61 |         return .chacha20\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 62 |       @unknown default:\n 63 |         // Default to a safe algorithm if an unknown one is provided\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:64:17: error: type 'EncryptionAlgorithm' has no member 'aes'\n 62 |       @unknown default:\n 63 |         // Default to a safe algorithm if an unknown one is provided\n 64 |         return .aes\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 65 |     }\n 66 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:71:13: error: type 'EncryptionAlgorithm' has no member 'aes'\n 69 |   .EncryptionAlgorithm {\n 70 |     switch algorithm {\n 71 |       case .aes:\n    |             `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 72 |         return .aes\n 73 |       case .chacha20:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:73:13: error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 71 |       case .aes:\n 72 |         return .aes\n 73 |       case .chacha20:\n    |             `- error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 74 |         return .chacha20\n 75 |       @unknown default:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:150:29: error: extra arguments at positions #2, #4 in call\n148 |     guard let options else { return nil }\n149 | \n150 |     return DecryptionOptions(\n    |                             `- error: extra arguments at positions #2, #4 in call\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:31:10: note: 'init(algorithm:authenticatedData:padding:)' declared here\n29 |      - padding: Optional padding mode to use\n30 |    */\n31 |   public init(\n   |          `- note: 'init(algorithm:authenticatedData:padding:)' declared here\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:151:43: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n149 | \n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n    |                                           `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:41: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'PaddingMode?'\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n    |                                         `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'PaddingMode?'\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n155 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:151:59: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n149 | \n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n    |                                                           `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:152:54: error: value of type 'DecryptionOptions' has no member 'mode'\n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n    |                                                      `- error: value of type 'DecryptionOptions' has no member 'mode'\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:57: error: value of type 'DecryptionOptions' has no member 'padding'\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n    |                                                         `- error: value of type 'DecryptionOptions' has no member 'padding'\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n155 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:154:44: error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n155 |     )\n156 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:168:52: error: extra arguments at positions #2, #3, #4 in call\n166 |     guard let options else { return nil }\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n    |                                                    `- error: extra arguments at positions #2, #3, #4 in call\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:172:10: note: 'init(algorithm:authenticatedData:)' declared here\n170 | \n171 |   /// Initialises decryption options with defaults.\n172 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n173 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n174 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:43: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n    |                                           `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:70: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n    |                                                                      `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:170:65: error: value of type 'DecryptionOptions' has no member 'mode'\n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n    |                                                                 `- error: value of type 'DecryptionOptions' has no member 'mode'\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:171:68: error: cannot convert value of type 'PaddingMode?' to expected argument type 'EncryptionOptions?'\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n    |                                                                    `- error: cannot convert value of type 'PaddingMode?' to expected argument type 'EncryptionOptions?'\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n173 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:172:44: error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n173 |     )\n174 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:192:21: error: extra argument 'salt' in call\n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n192 |       salt: options.salt\n    |                     `- error: extra argument 'salt' in call\n193 |     )\n194 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:191:18: error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n189 | \n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n    |                  `- error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n192 |       salt: options.salt\n193 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:191:34: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n189 | \n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n    |                                  `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n192 |       salt: options.salt\n193 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:192:21: error: value of type 'HashingOptions' has no member 'salt'\n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n192 |       salt: options.salt\n    |                     `- error: value of type 'HashingOptions' has no member 'salt'\n193 |     )\n194 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:208:21: error: extra argument 'salt' in call\n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n208 |       salt: options.salt\n    |                     `- error: extra argument 'salt' in call\n209 |     )\n210 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:207:18: error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n205 | \n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n    |                  `- error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n208 |       salt: options.salt\n209 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:207:45: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n205 | \n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n    |                                             `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n208 |       salt: options.salt\n209 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:208:21: error: value of type 'HashingOptions' has no member 'salt'\n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n208 |       salt: options.salt\n    |                     `- error: value of type 'HashingOptions' has no member 'salt'\n209 |     )\n210 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:264:33: error: extra argument 'customIdentifier' in call\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n264 |       customIdentifier: options.customIdentifier\n    |                                 `- error: extra argument 'customIdentifier' in call\n265 |     )\n266 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:263:33: error: value of type 'KeyGenerationOptions' has no member 'useSecureEnclave'\n261 |     return KeyGenerationOptions(\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'useSecureEnclave'\n264 |       customIdentifier: options.customIdentifier\n265 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:264:33: error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n264 |       customIdentifier: options.customIdentifier\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n265 |     )\n266 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:278:55: error: extra arguments at positions #2, #3 in call\n276 |     guard let options else { return nil }\n277 | \n278 |     return SecurityCoreInterfaces.KeyGenerationOptions(\n    |                                                       `- error: extra arguments at positions #2, #3 in call\n279 |       keyType: convertToInterface(options.keyType),\n280 |       useSecureEnclave: options.useSecureEnclave,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:201:10: note: 'init(persistent:keyType:)' declared here\n199 | \n200 |   /// Initialises key generation options with defaults.\n201 |   public init(persistent: Bool=true, keyType: KeyType = .symmetric) {\n    |          `- note: 'init(persistent:keyType:)' declared here\n202 |     self.persistent=persistent\n203 |     self.keyType=keyType\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:281:33: error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n279 |       keyType: convertToInterface(options.keyType),\n280 |       useSecureEnclave: options.useSecureEnclave,\n281 |       customIdentifier: options.customIdentifier\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n282 |     )\n283 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:289:17: error: type 'KeyType' has no member 'symmetric'\n287 |     switch keyType {\n288 |       case .symmetric:\n289 |         return .symmetric\n    |                 `- error: type 'KeyType' has no member 'symmetric'\n290 |       case .asymmetric:\n291 |         return .asymmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:291:17: error: type 'KeyType' has no member 'asymmetric'\n289 |         return .symmetric\n290 |       case .asymmetric:\n291 |         return .asymmetric\n    |                 `- error: type 'KeyType' has no member 'asymmetric'\n292 |       @unknown default:\n293 |         // Default to symmetric if unknown\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:294:17: error: type 'KeyType' has no member 'symmetric'\n292 |       @unknown default:\n293 |         // Default to symmetric if unknown\n294 |         return .symmetric\n    |                 `- error: type 'KeyType' has no member 'symmetric'\n295 |     }\n296 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:287:5: warning: switch must be exhaustive\n285 |   // Helper methods for key type conversion\n286 |   private static func convert(_ keyType: SecurityCoreInterfaces.KeyType) -\u003e KeyType {\n287 |     switch keyType {\n    |     |- warning: switch must be exhaustive\n    |     `- note: add missing case: '.hybrid'\n288 |       case .symmetric:\n289 |         return .symmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:300:13: error: type 'KeyType' has no member 'symmetric'\n298 |   private static func convertToInterface(_ keyType: KeyType) -\u003e SecurityCoreInterfaces.KeyType {\n299 |     switch keyType {\n300 |       case .symmetric:\n    |             `- error: type 'KeyType' has no member 'symmetric'\n301 |         return .symmetric\n302 |       case .asymmetric:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:302:13: error: type 'KeyType' has no member 'asymmetric'\n300 |       case .symmetric:\n301 |         return .symmetric\n302 |       case .asymmetric:\n    |             `- error: type 'KeyType' has no member 'asymmetric'\n303 |         return .asymmetric\n304 |       @unknown default:\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:97:22: error: extra argument 'secureStorage' in call\n 95 |   ) async -\u003e CryptoServiceProtocol {\n 96 |     await CryptoServiceFactory.createMock(\n 97 |       secureStorage: secureStorage,\n    |                      `- error: extra argument 'secureStorage' in call\n 98 |       configuration: configuration\n 99 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:228:18: error: cannot find type 'DeploymentEnvironment' in scope\n226 |     secureStorage: SecureStorageProtocol?=nil,\n227 |     logger: LoggingProtocol?=nil,\n228 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:98:32: error: cannot find 'DefaultConsoleLogger' in scope\n 96 |     logger: LoggingProtocol?=nil\n 97 |   ) async -\u003e CryptoServiceProtocol {\n 98 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n 99 | \n100 |     return await DefaultCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:119:32: error: cannot find 'DefaultConsoleLogger' in scope\n117 |     logger: LoggingProtocol?=nil\n118 |   ) async -\u003e CryptoServiceProtocol {\n119 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n120 | \n121 |     return await LoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:143:32: error: cannot find 'DefaultConsoleLogger' in scope\n141 |     logger: LoggingProtocol?=nil\n142 |   ) async -\u003e CryptoServiceProtocol {\n143 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n144 | \n145 |     return await EnhancedLoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:167:32: error: cannot find 'DefaultConsoleLogger' in scope\n165 |     logger: LoggingProtocol?=nil\n166 |   ) async -\u003e CryptoServiceProtocol {\n167 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n168 | \n169 |     // Create secure service with enhanced parameters\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:179:16: error: extra argument 'storage' in call\n177 |         )\n178 |       ),\n179 |       storage: createSecureStorage(),\n    |                `- error: extra argument 'storage' in call\n180 |       logger: actualLogger\n181 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:201:32: error: cannot find 'DefaultConsoleLogger' in scope\n199 |     logger: LoggingProtocol?=nil\n200 |   ) async -\u003e CryptoServiceProtocol {\n201 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n202 | \n203 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:204:22: error: cannot find 'MockCryptoConfiguration' in scope\n202 | \n203 |     return await MockCryptoServiceImpl(\n204 |       configuration: MockCryptoConfiguration(\n    |                      `- error: cannot find 'MockCryptoConfiguration' in scope\n205 |         encryptionSucceeds: shouldSucceed,\n206 |         decryptionSucceeds: shouldSucceed,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:213:27: error: missing argument for parameter 'secureStorage' in call\n211 |         retrievalSucceeds: shouldSucceed\n212 |       ),\n213 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureStorage' in call\n214 |     )\n215 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:230:32: error: cannot find 'DefaultConsoleLogger' in scope\n228 |     environment: DeploymentEnvironment = .production\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n231 | \n232 |     switch environment {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:245:26: error: cannot find 'MockCryptoConfiguration' in scope\n243 |       case .testing:\n244 |         return await MockCryptoServiceImpl(\n245 |           configuration: MockCryptoConfiguration(\n    |                          `- error: cannot find 'MockCryptoConfiguration' in scope\n246 |             encryptionSucceeds: true,\n247 |             decryptionSucceeds: true,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:254:31: error: missing argument for parameter 'secureStorage' in call\n252 |             retrievalSucceeds: true\n253 |           ),\n254 |           logger: actualLogger\n    |                               `- error: missing argument for parameter 'secureStorage' in call\n255 |         )\n256 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:299:32: error: cannot find 'DefaultConsoleLogger' in scope\n297 |     logger: LoggingProtocol?=nil\n298 |   ) async -\u003e CryptoServiceProtocol {\n299 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n300 | \n301 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:302:46: error: 'await' cannot appear to the right of a non-assignment operator\n300 | \n301 |     // Use the provided secure storage or create a default one\n302 |     let actualSecureStorage=secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                              `- error: 'await' cannot appear to the right of a non-assignment operator\n303 | \n304 |     // Create provider based on the specified type\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:327:42: error: missing argument label 'providerType:' in call\n325 | \n326 |       // Return a basic implementation as fallback\n327 |       return await createWithProviderType(\n    |                                          `- error: missing argument label 'providerType:' in call\n328 |         .basic,\n329 |         secureStorage: actualSecureStorage,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:358:32: error: cannot find 'DefaultConsoleLogger' in scope\n356 |     logger: LoggingProtocol?=nil\n357 |   ) async -\u003e CryptoServiceProtocol {\n358 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n359 | \n360 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:361:46: error: 'await' cannot appear to the right of a non-assignment operator\n359 | \n360 |     // Use the provided secure storage or create a default one\n361 |     let actualSecureStorage=secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                              `- error: 'await' cannot appear to the right of a non-assignment operator\n362 | \n363 |     // Create a crypto service implementation using DefaultCryptoServiceWithProviderImpl\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:386:32: error: cannot find 'DefaultConsoleLogger' in scope\n384 |     logger: LoggingProtocol?=nil\n385 |   ) async -\u003e SecureStorageProtocol {\n386 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n387 |     let url=storageURL ?? URL(fileURLWithPath: NSTemporaryDirectory())\n388 |       .appendingPathComponent(\"CryptoSecureStorage\")\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:393:16: error: extra argument 'baseURL' in call\n391 |     return InMemorySecureStorage(\n392 |       logger: actualLogger,\n393 |       baseURL: url\n    |                `- error: extra argument 'baseURL' in call\n394 |     )\n395 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:421:32: error: cannot find 'DefaultConsoleLogger' in scope\n419 |     logger: LoggingProtocol?=nil\n420 |   ) async -\u003e CryptoServiceProtocol {\n421 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n422 |     return await MockCryptoServiceImpl(configuration: configuration, logger: actualLogger)\n423 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:422:90: error: missing argument for parameter 'secureStorage' in call\n420 |   ) async -\u003e CryptoServiceProtocol {\n421 |     let actualLogger=logger ?? DefaultConsoleLogger()\n422 |     return await MockCryptoServiceImpl(configuration: configuration, logger: actualLogger)\n    |                                                                                          `- error: missing argument for parameter 'secureStorage' in call\n423 |   }\n424 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:440:7: warning: no 'async' operations occur within 'await' expression\n438 |   ) async -\u003e CryptoServiceProtocol {\n439 |     if let secureLogger {\n440 |       await EnhancedLoggingCryptoServiceImpl(\n    |       `- warning: no 'async' operations occur within 'await' expression\n441 |         wrapped: wrapped,\n442 |         logger: secureLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:445:7: warning: no 'async' operations occur within 'await' expression\n443 |       )\n444 |     } else {\n445 |       await LoggingCryptoServiceImpl(\n    |       `- warning: no 'async' operations occur within 'await' expression\n446 |         wrapped: wrapped,\n447 |         logger: logger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:33:14: error: cannot find type 'SecurityProviderOptions' in scope\n31 |     data: [UInt8],\n32 |     keyIdentifier: String?=nil,\n33 |     options: SecurityProviderOptions?=nil\n   |              `- error: cannot find type 'SecurityProviderOptions' in scope\n34 |   ) async -\u003e Result\u003c[UInt8], Error\u003e {\n35 |     // Basic implementation of security operations\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:80:16: error: cannot find type 'SecurityProviderOptions' in scope\n78 | \n79 |   public func generateKey(\n80 |     options _: SecurityProviderOptions\n   |                `- error: cannot find type 'SecurityProviderOptions' in scope\n81 |   ) async -\u003e Result\u003cString, Error\u003e {\n82 |     // In a real implementation, this would generate an actual cryptographic key\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              |- error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n   |              `- note: add stubs for conformance\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:30:8: note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 28 | \n 29 |   /// Access to cryptographic service implementation\n 30 |   func cryptoService() async -\u003e CryptoServiceProtocol\n    |        `- note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 31 | \n 32 |   /// Access to key management service implementation\n 33 |   func keyManager() async -\u003e KeyManagementProtocol\n    |        `- note: protocol requires function 'keyManager()' with type '() async -\u003e any KeyManagementProtocol'\n 34 | \n 35 |   // MARK: - Core Operations\n    :\n 41 |    - Returns: Result containing encrypted data or error\n 42 |    */\n 43 |   func encrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'encrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 44 | \n 45 |   /**\n    :\n 49 |    - Returns: Result containing decrypted data or error\n 50 |    */\n 51 |   func decrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'decrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 52 | \n 53 |   /**\n    :\n 65 |    - Returns: Result containing storage confirmation or error\n 66 |    */\n 67 |   func secureStore(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureStore(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 68 | \n 69 |   /**\n    :\n 73 |    - Returns: Result containing retrieved data or error\n 74 |    */\n 75 |   func secureRetrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureRetrieve(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 76 | \n 77 |   /**\n    :\n 81 |    - Returns: Result containing deletion confirmation or error\n 82 |    */\n 83 |   func secureDelete(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureDelete(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 84 | \n 85 |   /**\n    :\n 89 |    - Returns: Result containing signature data or error\n 90 |    */\n 91 |   func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'sign(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 92 | \n 93 |   /**\n    :\n 97 |    - Returns: Result containing verification status or error\n 98 |    */\n 99 |   func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'verify(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n100 | \n101 |   /**\n    :\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n    :\n121 |    - Returns: A properly configured SecurityConfigDTO\n122 |    */\n123 |   func createSecureConfig(options: SecurityConfigOptions) async -\u003e SecurityConfigDTO\n    |        `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n124 | }\n125 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:37:13: error: type 'SecurityOperation' has no member 'encryption'\n35 |     // Basic implementation of security operations\n36 |     switch operation {\n37 |       case .encryption:\n   |             `- error: type 'SecurityOperation' has no member 'encryption'\n38 |         guard let keyIdentifier else {\n39 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:50:13: error: type 'SecurityOperation' has no member 'decryption'\n48 |         return .success(encryptedData)\n49 | \n50 |       case .decryption:\n   |             `- error: type 'SecurityOperation' has no member 'decryption'\n51 |         guard let keyIdentifier else {\n52 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:59:13: error: type 'SecurityOperation' has no member 'hashing'\n57 |         return .success(data)\n58 | \n59 |       case .hashing:\n   |             `- error: type 'SecurityOperation' has no member 'hashing'\n60 |         // Determine the hash algorithm to use\n61 |         let algorithm=options?.hashAlgorithm ?? .sha256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:39:27: error: module 'UmbraErrors' has no member named 'Security'\n37 |       case .encryption:\n38 |         guard let keyIdentifier else {\n39 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n   |                           `- error: module 'UmbraErrors' has no member named 'Security'\n40 |         }\n41 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:52:27: error: module 'UmbraErrors' has no member named 'Security'\n50 |       case .decryption:\n51 |         guard let keyIdentifier else {\n52 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n   |                           `- error: module 'UmbraErrors' has no member named 'Security'\n53 |         }\n54 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:75:25: error: module 'UmbraErrors' has no member named 'Security'\n73 | \n74 |       default:\n75 |         return .failure(UmbraErrors.Security.Core.unsupportedOperation)\n   |                         `- error: module 'UmbraErrors' has no member named 'Security'\n76 |     }\n77 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 | \n 21 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:17:14: error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  as the baseline implementation when more specialised providers aren't selected.\n 16 |  */\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n 97 |   }\n 98 | \n 99 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n100 |     encryptedDataIdentifier: String,\n101 |     keyIdentifier: String,\n    :\n198 |   }\n199 | \n200 |   public func verifyHash(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n201 |     dataIdentifier: String,\n202 |     hashIdentifier: String,\n    :\n259 |   }\n260 | \n261 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n262 |     length: Int,\n263 |     options: CryptoServiceOptions?=nil\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:53:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n 51 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n 52 | \n 53 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n 54 |       \"Encrypting data with key: \\(keyIdentifier)\",\n 55 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:81:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n 79 |     // Store the encrypted data\n 80 |     let dataIdentifier=\"encrypted_\\(UUID().uuidString)\"\n 81 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n 82 |       data: encryptedData,\n 83 |       identifier: dataIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:95:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n 93 |           source: \"DefaultCryptoService\"\n 94 |         )\n 95 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n 96 |     }\n 97 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:107:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n105 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n106 | \n107 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n108 |       \"Decrypting data with identifier: \\(encryptedDataIdentifier) using key: \\(keyIdentifier)\",\n109 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:114:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n112 | \n113 |     // Retrieve the encrypted data\n114 |     let dataResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n115 |       identifier: encryptedDataIdentifier\n116 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:136:24: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n134 |           return .success(decryptedData)\n135 |         } else {\n136 |           await logger.error(\n    |                        `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n137 |             \"Invalid encrypted data format\",\n138 |             metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:141:44: error: module 'UmbraErrors' has no member named 'Security'\n139 |             source: \"DefaultCryptoService\"\n140 |           )\n141 |           return .failure(.operationFailed(UmbraErrors.Security.Core.invalidData))\n    |                                            `- error: module 'UmbraErrors' has no member named 'Security'\n142 |         }\n143 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:150:26: error: enum case 'keyNotFound' has no associated values\n148 |           source: \"DefaultCryptoService\"\n149 |         )\n150 |         return .failure(.keyNotFound(encryptedDataIdentifier))\n    |                          `- error: enum case 'keyNotFound' has no associated values\n151 |     }\n152 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:162:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n160 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n161 | \n162 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n163 |       \"Generating hash with algorithm: \\(algorithm ?? .sha256)\",\n164 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:171:27: error: switch must be exhaustive\n169 | \n170 |     // For this implementation, we'll create a simple mock hash\n171 |     var hashData: [UInt8]=switch algorithm ?? .sha256 {\n    |                           |- error: switch must be exhaustive\n    |                           `- note: add missing case: '.blake2b'\n172 |       case .sha256:\n173 |         // Generate a mock SHA-256 hash (32 bytes)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:182:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n180 |     // Store the hash\n181 |     let hashIdentifier=\"hash_\\(UUID().uuidString)\"\n182 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n183 |       data: hashData,\n184 |       identifier: hashIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:196:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n194 |           source: \"DefaultCryptoService\"\n195 |         )\n196 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n197 |     }\n198 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:208:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n206 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n207 | \n208 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n209 |       \"Verifying hash for data with identifier: \\(dataIdentifier)\",\n210 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:215:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n213 | \n214 |     // Retrieve the data\n215 |     let dataResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n216 |       identifier: dataIdentifier\n217 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:227:24: error: enum case 'keyNotFound' has no associated values\n225 |         )\n226 |       }\n227 |       return .failure(.keyNotFound(dataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n228 |     }\n229 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:231:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n229 | \n230 |     // Retrieve the expected hash\n231 |     let hashResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n232 |       identifier: hashIdentifier\n233 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:243:24: error: enum case 'keyNotFound' has no associated values\n241 |         )\n242 |       }\n243 |       return .failure(.keyNotFound(hashIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n244 |     }\n245 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:252:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n250 |     let matchesHash=Bool.random()\n251 | \n252 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n253 |       \"Hash verification result: \\(matchesHash)\",\n254 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:268:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n266 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n267 | \n268 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n269 |       \"Generating key with length: \\(length)\",\n270 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:276:20: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n274 |     // Validate key length\n275 |     guard length \u003e= 16 else { // Minimum 128-bit key\n276 |       await logger.error(\n    |                    `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n277 |         \"Key length too short: \\(length) bytes\",\n278 |         metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:281:40: error: module 'UmbraErrors' has no member named 'Security'\n279 |         source: \"DefaultCryptoService\"\n280 |       )\n281 |       return .failure(.operationFailed(UmbraErrors.Security.Core.invalidKeyLength))\n    |                                        `- error: module 'UmbraErrors' has no member named 'Security'\n282 |     }\n283 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:289:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n287 |     // Store the key\n288 |     let keyIdentifier=\"key_\\(UUID().uuidString)\"\n289 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n290 |       data: keyData,\n291 |       identifier: keyIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:303:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n301 |           source: \"DefaultCryptoService\"\n302 |         )\n303 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n304 |     }\n305 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:315:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n313 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n314 | \n315 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n316 |       \"Storing data with identifier: \\(identifier)\",\n317 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:321:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n319 |     )\n320 | \n321 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n322 |       data: data,\n323 |       identifier: identifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:335:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n333 |           source: \"DefaultCryptoService\"\n334 |         )\n335 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n336 |     }\n337 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:346:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n344 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n345 | \n346 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n347 |       \"Retrieving data with identifier: \\(identifier)\",\n348 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:352:44: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n350 |     )\n351 | \n352 |     let retrieveResult=await secureStorage.retrieveSecurely(\n    |                                            `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n353 |       identifier: identifier\n354 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:365:26: error: enum case 'keyNotFound' has no associated values\n363 |           source: \"DefaultCryptoService\"\n364 |         )\n365 |         return .failure(.keyNotFound(identifier))\n    |                          `- error: enum case 'keyNotFound' has no associated values\n366 |     }\n367 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:376:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n374 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n375 | \n376 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n377 |       \"Exporting data with identifier: \\(identifier)\",\n378 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:374:9: warning: initialization of immutable value 'actualOptions' was never used; consider replacing with assignment to '_' or removing it\n372 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n373 |     // Use provided options or convert our factory options to CryptoServiceOptions\n374 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n    |         `- warning: initialization of immutable value 'actualOptions' was never used; consider replacing with assignment to '_' or removing it\n375 | \n376 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:394:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n392 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n393 | \n394 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n395 |       \"Importing data with identifier: \\(identifier)\",\n396 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:400:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n398 |     )\n399 | \n400 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n401 |       data: data,\n402 |       identifier: identifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:414:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n412 |           source: \"DefaultCryptoService\"\n413 |         )\n414 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n415 |     }\n416 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:425:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n423 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n424 | \n425 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n426 |       \"Deleting data with identifier: \\(identifier)\",\n427 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:431:42: error: value of type 'any SecureStorageProtocol' has no member 'deleteSecurely'\n429 |     )\n430 | \n431 |     let deleteResult=await secureStorage.deleteSecurely(\n    |                                          `- error: value of type 'any SecureStorageProtocol' has no member 'deleteSecurely'\n432 |       identifier: identifier\n433 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:445:28: error: enum case 'keyNotFound' has no associated values\n443 |         )\n444 |         if case .keyNotFound=error {\n445 |           return .failure(.keyNotFound(identifier))\n    |                            `- error: enum case 'keyNotFound' has no associated values\n446 |         } else {\n447 |           return .failure(.storageFailure(error))\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:447:28: error: type 'SecurityStorageError' has no member 'storageFailure'\n445 |           return .failure(.keyNotFound(identifier))\n446 |         } else {\n447 |           return .failure(.storageFailure(error))\n    |                            `- error: type 'SecurityStorageError' has no member 'storageFailure'\n448 |         }\n449 |     }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 |   private let logger: LoggingProtocol\n 21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:17:14: error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  CryptoServiceProtocol API.\n 16 |  */\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n102 |   }\n103 | \n104 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n105 |     encryptedDataIdentifier: String,\n106 |     keyIdentifier: String,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:49:29: error: cannot find 'SecurityProviderOptions' in scope\n 47 | \n 48 |     // Prepare operation options\n 49 |     let encryptionOptions = SecurityProviderOptions(\n    |                             `- error: cannot find 'SecurityProviderOptions' in scope\n 50 |       algorithm: .aes256GCM,\n 51 |       mode: .encrypt,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:50:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n 48 |     // Prepare operation options\n 49 |     let encryptionOptions = SecurityProviderOptions(\n 50 |       algorithm: .aes256GCM,\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n 51 |       mode: .encrypt,\n 52 |       keySize: 256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:51:14: error: cannot infer contextual base in reference to member 'encrypt'\n 49 |     let encryptionOptions = SecurityProviderOptions(\n 50 |       algorithm: .aes256GCM,\n 51 |       mode: .encrypt,\n    |              `- error: cannot infer contextual base in reference to member 'encrypt'\n 52 |       keySize: 256\n 53 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:56:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n 54 | \n 55 |     // Delegate to security provider\n 56 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n 57 |       .encryption,\n 58 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:57:8: error: cannot infer contextual base in reference to member 'encryption'\n 55 |     // Delegate to security provider\n 56 |     let result = await provider.performOperation(\n 57 |       .encryption,\n    |        `- error: cannot infer contextual base in reference to member 'encryption'\n 58 |       data: data,\n 59 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:87:30: error: type 'SecurityStorageError' has no member 'storageFailure'\n 85 |               )\n 86 |             )\n 87 |             return .failure(.storageFailure(error))\n    |                              `- error: type 'SecurityStorageError' has no member 'storageFailure'\n 88 |         }\n 89 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:123:24: error: enum case 'keyNotFound' has no associated values\n121 |         )\n122 |       }\n123 |       return .failure(.keyNotFound(encryptedDataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n124 |     }\n125 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:138:29: error: cannot find 'SecurityProviderOptions' in scope\n136 | \n137 |     // Prepare operation options\n138 |     let decryptionOptions = SecurityProviderOptions(\n    |                             `- error: cannot find 'SecurityProviderOptions' in scope\n139 |       algorithm: .aes256GCM,\n140 |       mode: .decrypt,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:139:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n137 |     // Prepare operation options\n138 |     let decryptionOptions = SecurityProviderOptions(\n139 |       algorithm: .aes256GCM,\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n140 |       mode: .decrypt,\n141 |       keySize: 256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:140:14: error: cannot infer contextual base in reference to member 'decrypt'\n138 |     let decryptionOptions = SecurityProviderOptions(\n139 |       algorithm: .aes256GCM,\n140 |       mode: .decrypt,\n    |              `- error: cannot infer contextual base in reference to member 'decrypt'\n141 |       keySize: 256\n142 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:145:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n143 | \n144 |     // Delegate to security provider\n145 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n146 |       .decryption,\n147 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:146:8: error: cannot infer contextual base in reference to member 'decryption'\n144 |     // Delegate to security provider\n145 |     let result = await provider.performOperation(\n146 |       .decryption,\n    |        `- error: cannot infer contextual base in reference to member 'decryption'\n147 |       data: data,\n148 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:186:28: error: cannot find type 'HashingAlgorithm' in scope\n184 | \n185 |     // Map hash algorithm to security provider algorithm\n186 |     let providerAlgorithm: HashingAlgorithm = switch algorithm {\n    |                            `- error: cannot find type 'HashingAlgorithm' in scope\n187 |       case .sha256:\n188 |         .sha256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:194:23: error: cannot find 'SecurityProviderOptions' in scope\n192 | \n193 |     // Prepare operation options\n194 |     let hashOptions = SecurityProviderOptions(\n    |                       `- error: cannot find 'SecurityProviderOptions' in scope\n195 |       hashAlgorithm: providerAlgorithm\n196 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:199:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n197 | \n198 |     // Delegate to security provider\n199 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n200 |       .hashing,\n201 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:200:8: error: cannot infer contextual base in reference to member 'hashing'\n198 |     // Delegate to security provider\n199 |     let result = await provider.performOperation(\n200 |       .hashing,\n    |        `- error: cannot infer contextual base in reference to member 'hashing'\n201 |       data: data,\n202 |       options: hashOptions\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:229:30: error: type 'SecurityStorageError' has no member 'storageFailure'\n227 |               )\n228 |             )\n229 |             return .failure(.storageFailure(error))\n    |                              `- error: type 'SecurityStorageError' has no member 'storageFailure'\n230 |         }\n231 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:264:24: error: enum case 'keyNotFound' has no associated values\n262 |         )\n263 |       }\n264 |       return .failure(.keyNotFound(dataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n265 |     }\n266 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:281:24: error: enum case 'keyNotFound' has no associated values\n279 |         )\n280 |       }\n281 |       return .failure(.keyNotFound(expectedHashIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n282 |     }\n283 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:296:33: error: value of type 'any SecurityProviderProtocol' has no member 'verifyHash'\n294 | \n295 |     // Delegate to security provider\n296 |     let result = await provider.verifyHash(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'verifyHash'\n297 |       data: data,\n298 |       expectedHash: expectedHash\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:329:22: error: cannot find 'SecurityKeyOptions' in scope\n327 |     \n328 |     // Prepare key generation options\n329 |     let keyOptions = SecurityKeyOptions(\n    |                      `- error: cannot find 'SecurityKeyOptions' in scope\n330 |       keySize: length * 8,\n331 |       algorithm: .aes256GCM\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:331:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n329 |     let keyOptions = SecurityKeyOptions(\n330 |       keySize: length * 8,\n331 |       algorithm: .aes256GCM\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n332 |     )\n333 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:8:15: error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n 6 |  Enhanced log context for crypto operations with privacy controls\n 7 |  */\n 8 | public struct EnhancedLogContext: LogContextDTO {\n   |               |- error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n   |               `- note: add stubs for conformance\n 9 |   /// Domain name for the log context\n10 |   public let domainName: String\n   :\n14 |   \n15 |   /// Additional context metadata as key-value pairs\n16 |   public let metadata: [String: String]\n   |              `- note: candidate has non-matching type '[String : String]'\n17 |   \n18 |   /// Privacy level for each metadata field\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:13:7: note: protocol requires property 'source' with type 'String?'\n11 | \n12 |   /// Optional source information (class, file, etc.)\n13 |   var source: String? { get }\n   |       `- note: protocol requires property 'source' with type 'String?'\n14 | \n15 |   /// Optional correlation ID for tracing related log events\n16 |   var correlationID: String? { get }\n   |       `- note: protocol requires property 'correlationID' with type 'String?'\n17 | \n18 |   /// The metadata collection for this context\n19 |   var metadata: LogMetadataDTOCollection { get }\n   |       `- note: protocol requires property 'metadata' with type 'LogMetadataDTOCollection'\n20 | }\n21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:63:7: error: switch must be exhaustive\n61 |       let privacy = privacyLevel(for: key)\n62 |       \n63 |       switch privacy {\n   |       |- error: switch must be exhaustive\n   |       `- note: add missing case: '.hash'\n64 |       case .private:\n65 |         _ = collection.withPrivate(key: key, value: value)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:16:14: error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 14 |  logging with proper privacy tags for sensitive data.\n 15 |  */\n 16 | public actor EnhancedLoggingCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 17 |   /// The wrapped implementation\n 18 |   private let wrapped: CryptoServiceProtocol\n    :\n 81 |   }\n 82 | \n 83 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 84 |     encryptedDataIdentifier: String,\n 85 |     keyIdentifier: String,\n    :\n215 |   }\n216 | \n217 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n218 |     length: Int,\n219 |     options: KeyGenerationOptions?=nil\n    :\n258 |   }\n259 | \n260 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n261 |     data: [UInt8],\n262 |     identifier: String\n    :\n300 |   }\n301 | \n302 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n303 |     identifier: String\n304 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n    :\n421 |   }\n422 | \n423 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n424 |     identifier: String\n425 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:58:37: error: incorrect argument label in call (have 'data:keyIdentifier:options:', expected 'dataIdentifier:keyIdentifier:options:')\n 56 | \n 57 |     // Perform the operation\n 58 |     let result=await wrapped.encrypt(\n    |                                     `- error: incorrect argument label in call (have 'data:keyIdentifier:options:', expected 'dataIdentifier:keyIdentifier:options:')\n 59 |       data: data,\n 60 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:59:13: error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n 57 |     // Perform the operation\n 58 |     let result=await wrapped.encrypt(\n 59 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n 60 |       keyIdentifier: keyIdentifier,\n 61 |       options: options\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:61:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'EncryptionOptions?'\n 59 |       data: data,\n 60 |       keyIdentifier: keyIdentifier,\n 61 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'EncryptionOptions?'\n 62 |     )\n 63 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:67:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 65 |     switch result {\n 66 |       case let .success(identifier):\n 67 |         context.updateMetadata([\"dataIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 68 |         await logger.debug(\n 69 |           \"Encryption successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:67:52: error: type 'Any' has no member 'private'\n 65 |     switch result {\n 66 |       case let .success(identifier):\n 67 |         context.updateMetadata([\"dataIdentifier\": .private(identifier)])\n    |                                                    `- error: type 'Any' has no member 'private'\n 68 |         await logger.debug(\n 69 |           \"Encryption successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:73:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 71 |         )\n 72 |       case let .failure(error):\n 73 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 74 |         await logger.error(\n 75 |           \"Encryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:73:43: error: type 'Any' has no member 'hash'\n 71 |         )\n 72 |       case let .failure(error):\n 73 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n 74 |         await logger.error(\n 75 |           \"Encryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:107:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'DecryptionOptions?'\n105 |       encryptedDataIdentifier: encryptedDataIdentifier,\n106 |       keyIdentifier: keyIdentifier,\n107 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'DecryptionOptions?'\n108 |     )\n109 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:118:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n116 |         )\n117 |       case let .failure(error):\n118 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n119 |         await logger.error(\n120 |           \"Decryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:118:43: error: type 'Any' has no member 'hash'\n116 |         )\n117 |       case let .failure(error):\n118 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n119 |         await logger.error(\n120 |           \"Decryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:147:42: error: incorrect argument labels in call (have 'data:algorithm:', expected 'dataIdentifier:options:')\n145 | \n146 |     // Perform the operation\n147 |     let result=await wrapped.generateHash(\n    |                                          `- error: incorrect argument labels in call (have 'data:algorithm:', expected 'dataIdentifier:options:')\n148 |       data: data,\n149 |       algorithm: algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:148:13: error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n146 |     // Perform the operation\n147 |     let result=await wrapped.generateHash(\n148 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n149 |       algorithm: algorithm\n150 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:149:18: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n147 |     let result=await wrapped.generateHash(\n148 |       data: data,\n149 |       algorithm: algorithm\n    |                  `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n150 |     )\n151 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:155:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n153 |     switch result {\n154 |       case let .success(identifier):\n155 |         context.updateMetadata([\"hashIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n156 |         await logger.debug(\n157 |           \"Hash generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:155:52: error: type 'Any' has no member 'private'\n153 |     switch result {\n154 |       case let .success(identifier):\n155 |         context.updateMetadata([\"hashIdentifier\": .private(identifier)])\n    |                                                    `- error: type 'Any' has no member 'private'\n156 |         await logger.debug(\n157 |           \"Hash generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:161:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n159 |         )\n160 |       case let .failure(error):\n161 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n162 |         await logger.error(\n163 |           \"Hash generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:161:43: error: type 'Any' has no member 'hash'\n159 |         )\n160 |       case let .failure(error):\n161 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n162 |         await logger.error(\n163 |           \"Hash generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:195:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'HashingOptions?'\n193 |       dataIdentifier: dataIdentifier,\n194 |       hashIdentifier: expectedHashIdentifier,\n195 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'HashingOptions?'\n196 |     )\n197 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:201:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n199 |     switch result {\n200 |       case let .success(matches):\n201 |         context.updateMetadata([\"matches\": .public(String(describing: matches))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n202 |         await logger.debug(\n203 |           \"Hash verification completed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:201:45: error: type 'Any' has no member 'public'\n199 |     switch result {\n200 |       case let .success(matches):\n201 |         context.updateMetadata([\"matches\": .public(String(describing: matches))])\n    |                                             `- error: type 'Any' has no member 'public'\n202 |         await logger.debug(\n203 |           \"Hash verification completed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:207:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n205 |         )\n206 |       case let .failure(error):\n207 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n208 |         await logger.error(\n209 |           \"Hash verification failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:207:43: error: type 'Any' has no member 'hash'\n205 |         )\n206 |       case let .failure(error):\n207 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n208 |         await logger.error(\n209 |           \"Hash verification failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:238:16: error: cannot convert value of type 'CryptoServices.KeyGenerationOptions?' to expected argument type 'SecurityCoreInterfaces.KeyGenerationOptions?'\n236 |     let result=await wrapped.generateKey(\n237 |       length: length,\n238 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServices.KeyGenerationOptions?' to expected argument type 'SecurityCoreInterfaces.KeyGenerationOptions?'\n239 |     )\n240 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:244:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n242 |     switch result {\n243 |       case let .success(identifier):\n244 |         context.updateMetadata([\"keyIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n245 |         await logger.debug(\n246 |           \"Key generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:244:51: error: type 'Any' has no member 'private'\n242 |     switch result {\n243 |       case let .success(identifier):\n244 |         context.updateMetadata([\"keyIdentifier\": .private(identifier)])\n    |                                                   `- error: type 'Any' has no member 'private'\n245 |         await logger.debug(\n246 |           \"Key generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:250:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n248 |         )\n249 |       case let .failure(error):\n250 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n251 |         await logger.error(\n252 |           \"Key generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:250:43: error: type 'Any' has no member 'hash'\n248 |         )\n249 |       case let .failure(error):\n250 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n251 |         await logger.error(\n252 |           \"Key generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:280:13: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n278 |     // Perform the operation\n279 |     let result=await wrapped.storeData(\n280 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n281 |       identifier: identifier\n282 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:292:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n290 |         )\n291 |       case let .failure(error):\n292 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n293 |         await logger.error(\n294 |           \"Data storage failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:292:43: error: type 'Any' has no member 'hash'\n290 |         )\n291 |       case let .failure(error):\n292 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n293 |         await logger.error(\n294 |           \"Data storage failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:332:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n330 |         )\n331 |       case let .failure(error):\n332 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n333 |         await logger.error(\n334 |           \"Data retrieval failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:332:43: error: type 'Any' has no member 'hash'\n330 |         )\n331 |       case let .failure(error):\n332 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n333 |         await logger.error(\n334 |           \"Data retrieval failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:339:12: error: cannot convert return expression of type 'Result\u003cData, SecurityStorageError\u003e' to return type 'Result\u003c[UInt8], SecurityStorageError\u003e'\n337 |     }\n338 | \n339 |     return result\n    |            |- error: cannot convert return expression of type 'Result\u003cData, SecurityStorageError\u003e' to return type 'Result\u003c[UInt8], SecurityStorageError\u003e'\n    |            `- note: arguments to generic parameter 'Success' ('Data' and '[UInt8]') are expected to be equal\n340 |   }\n341 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:372:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n370 |         )\n371 |       case let .failure(error):\n372 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n373 |         await logger.error(\n374 |           \"Data export failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:372:43: error: type 'Any' has no member 'hash'\n370 |         )\n371 |       case let .failure(error):\n372 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n373 |         await logger.error(\n374 |           \"Data export failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:407:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n405 |     switch result {\n406 |       case let .success(resultIdentifier):\n407 |         context.updateMetadata([\"resultIdentifier\": .private(resultIdentifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n408 |         await logger.debug(\n409 |           \"Data import successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:407:54: error: type 'Any' has no member 'private'\n405 |     switch result {\n406 |       case let .success(resultIdentifier):\n407 |         context.updateMetadata([\"resultIdentifier\": .private(resultIdentifier)])\n    |                                                      `- error: type 'Any' has no member 'private'\n408 |         await logger.debug(\n409 |           \"Data import successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:413:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n411 |         )\n412 |       case let .failure(error):\n413 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n414 |         await logger.error(\n415 |           \"Data import failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:413:43: error: type 'Any' has no member 'hash'\n411 |         )\n412 |       case let .failure(error):\n413 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n414 |         await logger.error(\n415 |           \"Data import failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:453:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n451 |         )\n452 |       case let .failure(error):\n453 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n454 |         await logger.error(\n455 |           \"Data deletion failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:453:43: error: type 'Any' has no member 'hash'\n451 |         )\n452 |       case let .failure(error):\n453 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n454 |         await logger.error(\n455 |           \"Data deletion failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:460:12: error: cannot convert return expression of type 'Result\u003cVoid, SecurityStorageError\u003e' to return type 'Result\u003cBool, SecurityStorageError\u003e'\n458 |     }\n459 | \n460 |     return result\n    |            |- error: cannot convert return expression of type 'Result\u003cVoid, SecurityStorageError\u003e' to return type 'Result\u003cBool, SecurityStorageError\u003e'\n    |            `- note: arguments to generic parameter 'Success' ('Void' and 'Bool') are expected to be equal\n461 |   }\n462 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:477:35: error: extra arguments at positions #2, #3 in call\n475 |     identifiers: [String: PrivacyLevel]\n476 |   ) -\u003e EnhancedLogContext {\n477 |     var context=EnhancedLogContext(\n    |                                   `- error: extra arguments at positions #2, #3 in call\n478 |       domainName: \"CryptoServices\",\n479 |       source: \"CryptoServiceFactory\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:30:10: note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n28 |      - privacyLevels: Privacy levels for each metadata field\n29 |    */\n30 |   public init(\n   |          `- note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n31 |     domainName: String,\n32 |     operationName: String,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:478:35: error: missing argument for parameter 'operationName' in call\n476 |   ) -\u003e EnhancedLogContext {\n477 |     var context=EnhancedLogContext(\n478 |       domainName: \"CryptoServices\",\n    |                                   `- error: missing argument for parameter 'operationName' in call\n479 |       source: \"CryptoServiceFactory\",\n480 |       correlationID: nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:30:10: note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n28 |      - privacyLevels: Privacy levels for each metadata field\n29 |    */\n30 |   public init(\n   |          `- note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n31 |     domainName: String,\n32 |     operationName: String,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:480:22: error: 'nil' requires a contextual type\n478 |       domainName: \"CryptoServices\",\n479 |       source: \"CryptoServiceFactory\",\n480 |       correlationID: nil\n    |                      `- error: 'nil' requires a contextual type\n481 |     )\n482 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:47:30: error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n 47 |     rateLimiter: RateLimiter=RateLimiter()\n    |                              `- error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 48 |   ) {\n 49 |     self.wrapped = wrapped\n    :\n443 |  Simple rate limiter for security operations.\n444 |  */\n445 | public class RateLimiter {\n    |              `- note: initializer 'init()' is not '@usableFromInline' or public\n446 |   public enum Operation: String {\n447 |     case encrypt, decrypt, hash, verify, export, generateKey\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:384:15: error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n382 |    - Returns: The exported data or error\n383 |    */\n384 |   public func exportData(\n    |               `- error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n385 |     withIdentifier identifier: String\n386 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:81:8: note: requirement 'exportData(identifier:)' declared here\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: requirement 'exportData(identifier:)' declared here\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:20:14: error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 18 |  validation of cryptographic operations.\n 19 |  */\n 20 | public actor EnhancedSecureCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 21 | \n 22 |   /// The wrapped implementation that does the actual cryptographic work\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:412:36: error: incorrect argument label in call (have 'withIdentifier:', expected 'identifier:')\n410 | \n411 |     // Use the wrapped implementation to perform the export\n412 |     return await wrapped.exportData(withIdentifier: identifier)\n    |                                    `- error: incorrect argument label in call (have 'withIdentifier:', expected 'identifier:')\n413 |   }\n414 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:438:38: error: missing argument for parameter 'length' in call\n436 | \n437 |     // Use the wrapped implementation to generate the key\n438 |     return await wrapped.generateKey(options: options)\n    |                                      `- error: missing argument for parameter 'length' in call\n439 |   }\n440 | }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: 'generateKey(length:options:)' declared here\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: 'generateKey(length:options:)' declared here\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/LoggingCryptoServiceImpl.swift:9:14: error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n  7 |  all operations before delegating to the wrapped implementation.\n  8 |  */\n  9 | public actor LoggingCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 10 |   /// The wrapped implementation\n 11 |   private let wrapped: CryptoServiceProtocol\n    :\n339 |    - Returns: Identifier for the imported data or an error\n340 |    */\n341 |   public func importData(\n    |               `- note: candidate has non-matching type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n342 |     _ data: [UInt8],\n343 |     customIdentifier: String?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:93:8: note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:47:31: error: cannot find type 'CryptoProviderProtocol' in scope\n  45 |   \n  46 |   /// Crypto provider for cryptographic operations\n  47 |   private let cryptoProvider: CryptoProviderProtocol\n     |                               `- error: cannot find type 'CryptoProviderProtocol' in scope\n  48 |   \n  49 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:64:21: error: cannot find type 'CryptoProviderProtocol' in scope\n  62 |     wrapped: CryptoServiceProtocol,\n  63 |     secureStorage: SecureStorageProtocol,\n  64 |     cryptoProvider: CryptoProviderProtocol,\n     |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n  65 |     logger: LoggingProtocol\n  66 |   ) {\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoStorage.swift:417:33: error: cannot find 'getSecureStorage' in scope\n415 |     // Currently we just attempt to retrieve the data and check if it exists\n416 |     // This could be optimized in a real implementation to avoid loading the data\n417 |     let secureStore = try await getSecureStorage()\n    |                                 `- error: cannot find 'getSecureStorage' in scope\n418 |     return secureStore.hasKey(identifier)\n419 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n264 |    - Returns: Result containing array of identifiers or error details\n265 |    */\n266 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n267 |     await logger.warning(\n268 |       \"List data identifiers operation not supported\",\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecureStorageProtocol.swift:14:8: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n12 |   ///   - identifier: A string identifier for the stored data.\n13 |   /// - Returns: Success or an error.\n14 |   func storeData(_ data: [UInt8], withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n15 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n16 | \n   :\n18 |   /// - Parameter identifier: A string identifying the data to retrieve.\n19 |   /// - Returns: The retrieved data as a byte array or an error.\n20 |   func retrieveData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n21 |     -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n22 | \n   :\n24 |   /// - Parameter identifier: A string identifying the data to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n27 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n28 | \n29 |   /// Lists all available data identifiers.\n30 |   /// - Returns: An array of data identifiers or an error.\n31 |   func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityStorageError\u003e\n   |        `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n32 | }\n33 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:158:63: error: type '_ErrorCodeProtocol' has no member 'notFound'\n156 |       )\n157 |       \n158 |       if let storageError = error as? StorageCoreError, case .notFound = storageError {\n    |                                                               `- error: type '_ErrorCodeProtocol' has no member 'notFound'\n159 |         return .failure(.dataNotFound)\n160 |       }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:162:61: error: cannot convert value of type 'SecurityCoreInterfaces.KeyType' to expected argument type 'CryptoServices.KeyType'\n160 |     var configOptions=SecurityConfigOptions()\n161 | \n162 |     let metadataDict=addMetadata(keySize: keySize, keyType: keyType)\n    |                                                             `- error: cannot convert value of type 'SecurityCoreInterfaces.KeyType' to expected argument type 'CryptoServices.KeyType'\n163 | \n164 |     if !metadataDict.isEmpty {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:196:13: error: type 'KeyType' has no member 'symmetric'\n194 |     let localKeyType: KeyType\n195 |     switch keyType {\n196 |       case .symmetric:\n    |             `- error: type 'KeyType' has no member 'symmetric'\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:198:13: error: type 'KeyType' has no member 'asymmetric'\n196 |       case .symmetric:\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n    |             `- error: type 'KeyType' has no member 'asymmetric'\n199 |         localKeyType = .asymmetric\n200 |       default:\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:197:25: error: type 'KeyType' has no member 'symmetric'\n195 |     switch keyType {\n196 |       case .symmetric:\n197 |         localKeyType = .symmetric\n    |                         `- error: type 'KeyType' has no member 'symmetric'\n198 |       case .asymmetric:\n199 |         localKeyType = .asymmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:199:25: error: type 'KeyType' has no member 'asymmetric'\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n199 |         localKeyType = .asymmetric\n    |                         `- error: type 'KeyType' has no member 'asymmetric'\n200 |       default:\n201 |         localKeyType = .symmetric // Default to symmetric as fallback\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:25: error: type 'KeyType' has no member 'symmetric'\n199 |         localKeyType = .asymmetric\n200 |       default:\n201 |         localKeyType = .symmetric // Default to symmetric as fallback\n    |                         `- error: type 'KeyType' has no member 'symmetric'\n202 |     }\n203 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/OptionTypes.swift:109:14: warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n107 | public struct SendableOptionsDictionary: Sendable {\n108 |   /// The underlying dictionary\n109 |   public let dictionary: [String: Any]\n    |              `- warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n110 |   \n111 |   /**\nTarget //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories failed to build\nINFO: Elapsed time: 1.137s, Critical Path: 0.99s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation",
    "success": false,
    "start_time": "2025-04-06T11:27:30.071847+01:00",
    "end_time": "2025-04-06T11:27:31.788329+01:00",
    "duration": "1.716489208s",
    "output": "INFO: Invocation ID: 28d7ee17-c7fd-4f66-beaa-8ace690e48d1\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:14: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.4.1-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:55:8: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 53 |   private static func convert(\n 54 |     _ algorithm: SecurityCoreInterfaces\n 55 |       .EncryptionAlgorithm\n    |        `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 56 |   ) -\u003e EncryptionAlgorithm {\n 57 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:69:4: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 67 | \n 68 |   private static func convertToInterface(_ algorithm: EncryptionAlgorithm) -\u003e SecurityCoreInterfaces\n 69 |   .EncryptionAlgorithm {\n    |    `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 70 |     switch algorithm {\n 71 |       case .aes:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:81:62: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 79 | \n 80 |   // Helper methods for mode conversion\n 81 |   private static func convert(_ mode: SecurityCoreInterfaces.EncryptionMode) -\u003e EncryptionMode {\n    |                                                              `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 82 |     switch mode {\n 83 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:94:4: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 92 | \n 93 |   private static func convertToInterface(_ mode: EncryptionMode) -\u003e SecurityCoreInterfaces\n 94 |   .EncryptionMode {\n    |    `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 95 |     switch mode {\n 96 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:109:8: error: cannot find type 'EncryptionPadding' in scope\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n109 |   ) -\u003e EncryptionPadding {\n    |        `- error: cannot find type 'EncryptionPadding' in scope\n110 |     switch padding {\n111 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:108:8: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n106 |   private static func convert(\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n    |        `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n109 |   ) -\u003e EncryptionPadding {\n110 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:122:4: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n122 |   .EncryptionPadding {\n    |    `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n123 |     switch padding {\n124 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:121:53: error: cannot find type 'EncryptionPadding' in scope\n119 |   }\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n    |                                                     `- error: cannot find type 'EncryptionPadding' in scope\n122 |   .EncryptionPadding {\n123 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:147:8: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n145 |     _ options: SecurityCoreInterfaces\n146 |       .DecryptionOptions?\n147 |   ) -\u003e DecryptionOptions? {\n    |        `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n148 |     guard let options else { return nil }\n149 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:164:52: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n162 |    - Returns: The converted options or nil if input was nil\n163 |    */\n164 |   public static func convertToInterface(_ options: DecryptionOptions?) -\u003e SecurityCoreInterfaces\n    |                                                    `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n165 |   .DecryptionOptions? {\n166 |     guard let options else { return nil }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:216:8: error: cannot find type 'HashingAlgorithm' in scope\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n216 |   ) -\u003e HashingAlgorithm {\n    |        `- error: cannot find type 'HashingAlgorithm' in scope\n217 |     switch algorithm {\n218 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:215:8: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n213 |   private static func convert(\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n    |        `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n216 |   ) -\u003e HashingAlgorithm {\n217 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:231:4: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n231 |   .HashingAlgorithm {\n    |    `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n232 |     switch algorithm {\n233 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:230:55: error: cannot find type 'HashingAlgorithm' in scope\n228 |   }\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n    |                                                       `- error: cannot find type 'HashingAlgorithm' in scope\n231 |   .HashingAlgorithm {\n232 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:228:18: error: cannot find type 'DeploymentEnvironment' in scope\n226 |     secureStorage: SecureStorageProtocol?=nil,\n227 |     logger: LoggingProtocol?=nil,\n228 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:33:14: error: cannot find type 'SecurityProviderOptions' in scope\n31 |     data: [UInt8],\n32 |     keyIdentifier: String?=nil,\n33 |     options: SecurityProviderOptions?=nil\n   |              `- error: cannot find type 'SecurityProviderOptions' in scope\n34 |   ) async -\u003e Result\u003c[UInt8], Error\u003e {\n35 |     // Basic implementation of security operations\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:80:16: error: cannot find type 'SecurityProviderOptions' in scope\n78 | \n79 |   public func generateKey(\n80 |     options _: SecurityProviderOptions\n   |                `- error: cannot find type 'SecurityProviderOptions' in scope\n81 |   ) async -\u003e Result\u003cString, Error\u003e {\n82 |     // In a real implementation, this would generate an actual cryptographic key\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              |- error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n   |              `- note: add stubs for conformance\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:30:8: note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 28 | \n 29 |   /// Access to cryptographic service implementation\n 30 |   func cryptoService() async -\u003e CryptoServiceProtocol\n    |        `- note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 31 | \n 32 |   /// Access to key management service implementation\n 33 |   func keyManager() async -\u003e KeyManagementProtocol\n    |        `- note: protocol requires function 'keyManager()' with type '() async -\u003e any KeyManagementProtocol'\n 34 | \n 35 |   // MARK: - Core Operations\n    :\n 41 |    - Returns: Result containing encrypted data or error\n 42 |    */\n 43 |   func encrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'encrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 44 | \n 45 |   /**\n    :\n 49 |    - Returns: Result containing decrypted data or error\n 50 |    */\n 51 |   func decrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'decrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 52 | \n 53 |   /**\n    :\n 65 |    - Returns: Result containing storage confirmation or error\n 66 |    */\n 67 |   func secureStore(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureStore(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 68 | \n 69 |   /**\n    :\n 73 |    - Returns: Result containing retrieved data or error\n 74 |    */\n 75 |   func secureRetrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureRetrieve(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 76 | \n 77 |   /**\n    :\n 81 |    - Returns: Result containing deletion confirmation or error\n 82 |    */\n 83 |   func secureDelete(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureDelete(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 84 | \n 85 |   /**\n    :\n 89 |    - Returns: Result containing signature data or error\n 90 |    */\n 91 |   func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'sign(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 92 | \n 93 |   /**\n    :\n 97 |    - Returns: Result containing verification status or error\n 98 |    */\n 99 |   func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'verify(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n100 | \n101 |   /**\n    :\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n    :\n121 |    - Returns: A properly configured SecurityConfigDTO\n122 |    */\n123 |   func createSecureConfig(options: SecurityConfigOptions) async -\u003e SecurityConfigDTO\n    |        `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n124 | }\n125 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 | \n 21 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:17:14: error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  as the baseline implementation when more specialised providers aren't selected.\n 16 |  */\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n 97 |   }\n 98 | \n 99 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n100 |     encryptedDataIdentifier: String,\n101 |     keyIdentifier: String,\n    :\n198 |   }\n199 | \n200 |   public func verifyHash(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n201 |     dataIdentifier: String,\n202 |     hashIdentifier: String,\n    :\n259 |   }\n260 | \n261 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n262 |     length: Int,\n263 |     options: CryptoServiceOptions?=nil\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 |   private let logger: LoggingProtocol\n 21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:17:14: error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  CryptoServiceProtocol API.\n 16 |  */\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n102 |   }\n103 | \n104 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n105 |     encryptedDataIdentifier: String,\n106 |     keyIdentifier: String,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:8:15: error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n 6 |  Enhanced log context for crypto operations with privacy controls\n 7 |  */\n 8 | public struct EnhancedLogContext: LogContextDTO {\n   |               |- error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n   |               `- note: add stubs for conformance\n 9 |   /// Domain name for the log context\n10 |   public let domainName: String\n   :\n14 |   \n15 |   /// Additional context metadata as key-value pairs\n16 |   public let metadata: [String: String]\n   |              `- note: candidate has non-matching type '[String : String]'\n17 |   \n18 |   /// Privacy level for each metadata field\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:13:7: note: protocol requires property 'source' with type 'String?'\n11 | \n12 |   /// Optional source information (class, file, etc.)\n13 |   var source: String? { get }\n   |       `- note: protocol requires property 'source' with type 'String?'\n14 | \n15 |   /// Optional correlation ID for tracing related log events\n16 |   var correlationID: String? { get }\n   |       `- note: protocol requires property 'correlationID' with type 'String?'\n17 | \n18 |   /// The metadata collection for this context\n19 |   var metadata: LogMetadataDTOCollection { get }\n   |       `- note: protocol requires property 'metadata' with type 'LogMetadataDTOCollection'\n20 | }\n21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:16:14: error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 14 |  logging with proper privacy tags for sensitive data.\n 15 |  */\n 16 | public actor EnhancedLoggingCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 17 |   /// The wrapped implementation\n 18 |   private let wrapped: CryptoServiceProtocol\n    :\n 81 |   }\n 82 | \n 83 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 84 |     encryptedDataIdentifier: String,\n 85 |     keyIdentifier: String,\n    :\n215 |   }\n216 | \n217 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n218 |     length: Int,\n219 |     options: KeyGenerationOptions?=nil\n    :\n258 |   }\n259 | \n260 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n261 |     data: [UInt8],\n262 |     identifier: String\n    :\n300 |   }\n301 | \n302 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n303 |     identifier: String\n304 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n    :\n421 |   }\n422 | \n423 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n424 |     identifier: String\n425 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:47:30: error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n 47 |     rateLimiter: RateLimiter=RateLimiter()\n    |                              `- error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 48 |   ) {\n 49 |     self.wrapped = wrapped\n    :\n443 |  Simple rate limiter for security operations.\n444 |  */\n445 | public class RateLimiter {\n    |              `- note: initializer 'init()' is not '@usableFromInline' or public\n446 |   public enum Operation: String {\n447 |     case encrypt, decrypt, hash, verify, export, generateKey\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:384:15: error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n382 |    - Returns: The exported data or error\n383 |    */\n384 |   public func exportData(\n    |               `- error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n385 |     withIdentifier identifier: String\n386 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:81:8: note: requirement 'exportData(identifier:)' declared here\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: requirement 'exportData(identifier:)' declared here\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:20:14: error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 18 |  validation of cryptographic operations.\n 19 |  */\n 20 | public actor EnhancedSecureCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 21 | \n 22 |   /// The wrapped implementation that does the actual cryptographic work\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/LoggingCryptoServiceImpl.swift:9:14: error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n  7 |  all operations before delegating to the wrapped implementation.\n  8 |  */\n  9 | public actor LoggingCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 10 |   /// The wrapped implementation\n 11 |   private let wrapped: CryptoServiceProtocol\n    :\n339 |    - Returns: Identifier for the imported data or an error\n340 |    */\n341 |   public func importData(\n    |               `- note: candidate has non-matching type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n342 |     _ data: [UInt8],\n343 |     customIdentifier: String?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:93:8: note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:47:31: error: cannot find type 'CryptoProviderProtocol' in scope\n  45 |   \n  46 |   /// Crypto provider for cryptographic operations\n  47 |   private let cryptoProvider: CryptoProviderProtocol\n     |                               `- error: cannot find type 'CryptoProviderProtocol' in scope\n  48 |   \n  49 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:64:21: error: cannot find type 'CryptoProviderProtocol' in scope\n  62 |     wrapped: CryptoServiceProtocol,\n  63 |     secureStorage: SecureStorageProtocol,\n  64 |     cryptoProvider: CryptoProviderProtocol,\n     |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n  65 |     logger: LoggingProtocol\n  66 |   ) {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n264 |    - Returns: Result containing array of identifiers or error details\n265 |    */\n266 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n267 |     await logger.warning(\n268 |       \"List data identifiers operation not supported\",\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecureStorageProtocol.swift:14:8: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n12 |   ///   - identifier: A string identifier for the stored data.\n13 |   /// - Returns: Success or an error.\n14 |   func storeData(_ data: [UInt8], withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n15 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n16 | \n   :\n18 |   /// - Parameter identifier: A string identifying the data to retrieve.\n19 |   /// - Returns: The retrieved data as a byte array or an error.\n20 |   func retrieveData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n21 |     -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n22 | \n   :\n24 |   /// - Parameter identifier: A string identifying the data to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n27 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n28 | \n29 |   /// Lists all available data identifiers.\n30 |   /// - Returns: An array of data identifiers or an error.\n31 |   func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityStorageError\u003e\n   |        `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n32 | }\n33 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/OptionTypes.swift:109:14: warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n107 | public struct SendableOptionsDictionary: Sendable {\n108 |   /// The underlying dictionary\n109 |   public let dictionary: [String: Any]\n    |              `- warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n110 |   \n111 |   /**\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:55:8: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 53 |   private static func convert(\n 54 |     _ algorithm: SecurityCoreInterfaces\n 55 |       .EncryptionAlgorithm\n    |        `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 56 |   ) -\u003e EncryptionAlgorithm {\n 57 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:69:4: error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 67 | \n 68 |   private static func convertToInterface(_ algorithm: EncryptionAlgorithm) -\u003e SecurityCoreInterfaces\n 69 |   .EncryptionAlgorithm {\n    |    `- error: no type named 'EncryptionAlgorithm' in module 'SecurityCoreInterfaces'\n 70 |     switch algorithm {\n 71 |       case .aes:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:81:62: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 79 | \n 80 |   // Helper methods for mode conversion\n 81 |   private static func convert(_ mode: SecurityCoreInterfaces.EncryptionMode) -\u003e EncryptionMode {\n    |                                                              `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 82 |     switch mode {\n 83 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:94:4: error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 92 | \n 93 |   private static func convertToInterface(_ mode: EncryptionMode) -\u003e SecurityCoreInterfaces\n 94 |   .EncryptionMode {\n    |    `- error: no type named 'EncryptionMode' in module 'SecurityCoreInterfaces'\n 95 |     switch mode {\n 96 |       case .cbc:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:109:8: error: cannot find type 'EncryptionPadding' in scope\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n109 |   ) -\u003e EncryptionPadding {\n    |        `- error: cannot find type 'EncryptionPadding' in scope\n110 |     switch padding {\n111 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:108:8: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n106 |   private static func convert(\n107 |     _ padding: SecurityCoreInterfaces\n108 |       .EncryptionPadding\n    |        `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n109 |   ) -\u003e EncryptionPadding {\n110 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:122:4: error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n122 |   .EncryptionPadding {\n    |    `- error: no type named 'EncryptionPadding' in module 'SecurityCoreInterfaces'\n123 |     switch padding {\n124 |       case .none:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:121:53: error: cannot find type 'EncryptionPadding' in scope\n119 |   }\n120 | \n121 |   private static func convertToInterface(_ padding: EncryptionPadding) -\u003e SecurityCoreInterfaces\n    |                                                     `- error: cannot find type 'EncryptionPadding' in scope\n122 |   .EncryptionPadding {\n123 |     switch padding {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:147:8: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n145 |     _ options: SecurityCoreInterfaces\n146 |       .DecryptionOptions?\n147 |   ) -\u003e DecryptionOptions? {\n    |        `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n148 |     guard let options else { return nil }\n149 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:164:52: warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n162 |    - Returns: The converted options or nil if input was nil\n163 |    */\n164 |   public static func convertToInterface(_ options: DecryptionOptions?) -\u003e SecurityCoreInterfaces\n    |                                                    `- warning: 'DecryptionOptions' is deprecated: Use CoreSecurityTypes.EncryptionConfig instead\n165 |   .DecryptionOptions? {\n166 |     guard let options else { return nil }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:216:8: error: cannot find type 'HashingAlgorithm' in scope\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n216 |   ) -\u003e HashingAlgorithm {\n    |        `- error: cannot find type 'HashingAlgorithm' in scope\n217 |     switch algorithm {\n218 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:215:8: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n213 |   private static func convert(\n214 |     _ algorithm: SecurityCoreInterfaces\n215 |       .HashingAlgorithm\n    |        `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n216 |   ) -\u003e HashingAlgorithm {\n217 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:231:4: error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n231 |   .HashingAlgorithm {\n    |    `- error: no type named 'HashingAlgorithm' in module 'SecurityCoreInterfaces'\n232 |     switch algorithm {\n233 |       case .sha256:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:230:55: error: cannot find type 'HashingAlgorithm' in scope\n228 |   }\n229 | \n230 |   private static func convertToInterface(_ algorithm: HashingAlgorithm) -\u003e SecurityCoreInterfaces\n    |                                                       `- error: cannot find type 'HashingAlgorithm' in scope\n231 |   .HashingAlgorithm {\n232 |     switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:26:29: error: extra arguments at positions #2, #3, #4 in call\n 24 |     guard let options else { return nil }\n 25 | \n 26 |     return EncryptionOptions(\n    |                             `- error: extra arguments at positions #2, #3, #4 in call\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:154:10: note: 'init(algorithm:authenticatedData:)' declared here\n152 | \n153 |   /// Initialises encryption options with defaults.\n154 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n155 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n156 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:27:18: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 25 | \n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n    |                  `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:27:34: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 25 | \n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n    |                                  `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:28:29: error: value of type 'EncryptionOptions' has no member 'mode'\n 26 |     return EncryptionOptions(\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n    |                             `- error: value of type 'EncryptionOptions' has no member 'mode'\n 29 |       padding: convert(options.padding),\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:29:32: error: value of type 'EncryptionOptions' has no member 'padding'\n 27 |       algorithm: convert(options.algorithm),\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n    |                                `- error: value of type 'EncryptionOptions' has no member 'padding'\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n 31 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:30:44: error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 28 |       mode: convert(options.mode),\n 29 |       padding: convert(options.padding),\n 30 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 31 |     )\n 32 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:44:52: error: extra arguments at positions #2, #3, #4 in call\n 42 |     guard let options else { return nil }\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n    |                                                    `- error: extra arguments at positions #2, #3, #4 in call\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:154:10: note: 'init(algorithm:authenticatedData:)' declared here\n152 | \n153 |   /// Initialises encryption options with defaults.\n154 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n155 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n156 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:45:18: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n    |                  `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:45:45: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 43 | \n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n    |                                             `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:46:40: error: value of type 'EncryptionOptions' has no member 'mode'\n 44 |     return SecurityCoreInterfaces.EncryptionOptions(\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n    |                                        `- error: value of type 'EncryptionOptions' has no member 'mode'\n 47 |       padding: convertToInterface(options.padding),\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:47:43: error: value of type 'EncryptionOptions' has no member 'padding'\n 45 |       algorithm: convertToInterface(options.algorithm),\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n    |                                           `- error: value of type 'EncryptionOptions' has no member 'padding'\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n 49 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:48:44: error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 46 |       mode: convertToInterface(options.mode),\n 47 |       padding: convertToInterface(options.padding),\n 48 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'EncryptionOptions' has no member 'additionalAuthenticatedData'\n 49 |     )\n 50 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:59:17: error: type 'EncryptionAlgorithm' has no member 'aes'\n 57 |     switch algorithm {\n 58 |       case .aes:\n 59 |         return .aes\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 60 |       case .chacha20:\n 61 |         return .chacha20\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:61:17: error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 59 |         return .aes\n 60 |       case .chacha20:\n 61 |         return .chacha20\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 62 |       @unknown default:\n 63 |         // Default to a safe algorithm if an unknown one is provided\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:64:17: error: type 'EncryptionAlgorithm' has no member 'aes'\n 62 |       @unknown default:\n 63 |         // Default to a safe algorithm if an unknown one is provided\n 64 |         return .aes\n    |                 `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 65 |     }\n 66 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:71:13: error: type 'EncryptionAlgorithm' has no member 'aes'\n 69 |   .EncryptionAlgorithm {\n 70 |     switch algorithm {\n 71 |       case .aes:\n    |             `- error: type 'EncryptionAlgorithm' has no member 'aes'\n 72 |         return .aes\n 73 |       case .chacha20:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:73:13: error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 71 |       case .aes:\n 72 |         return .aes\n 73 |       case .chacha20:\n    |             `- error: type 'EncryptionAlgorithm' has no member 'chacha20'\n 74 |         return .chacha20\n 75 |       @unknown default:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:150:29: error: extra arguments at positions #2, #4 in call\n148 |     guard let options else { return nil }\n149 | \n150 |     return DecryptionOptions(\n    |                             `- error: extra arguments at positions #2, #4 in call\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:31:10: note: 'init(algorithm:authenticatedData:padding:)' declared here\n29 |      - padding: Optional padding mode to use\n30 |    */\n31 |   public init(\n   |          `- note: 'init(algorithm:authenticatedData:padding:)' declared here\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:151:43: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n149 | \n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n    |                                           `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:41: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'PaddingMode?'\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n    |                                         `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'PaddingMode?'\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n155 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:151:59: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n149 | \n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n    |                                                           `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:152:54: error: value of type 'DecryptionOptions' has no member 'mode'\n150 |     return DecryptionOptions(\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n    |                                                      `- error: value of type 'DecryptionOptions' has no member 'mode'\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:57: error: value of type 'DecryptionOptions' has no member 'padding'\n151 |       algorithm: EncryptionOptionsAdapter.convert(options.algorithm),\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n    |                                                         `- error: value of type 'DecryptionOptions' has no member 'padding'\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n155 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:154:44: error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n152 |       mode: EncryptionOptionsAdapter.convert(options.mode),\n153 |       padding: EncryptionOptionsAdapter.convert(options.padding),\n154 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n155 |     )\n156 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:168:52: error: extra arguments at positions #2, #3, #4 in call\n166 |     guard let options else { return nil }\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n    |                                                    `- error: extra arguments at positions #2, #3, #4 in call\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:172:10: note: 'init(algorithm:authenticatedData:)' declared here\n170 | \n171 |   /// Initialises decryption options with defaults.\n172 |   public init(\n    |          `- note: 'init(algorithm:authenticatedData:)' declared here\n173 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n174 |     authenticatedData: [UInt8]?=nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:43: error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n    |                                           `- error: cannot convert value of type 'EncryptionOptions?' to expected argument type 'EncryptionAlgorithm'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:70: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n167 | \n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n    |                                                                      `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'EncryptionOptions'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:170:65: error: value of type 'DecryptionOptions' has no member 'mode'\n168 |     return SecurityCoreInterfaces.DecryptionOptions(\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n    |                                                                 `- error: value of type 'DecryptionOptions' has no member 'mode'\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:171:68: error: cannot convert value of type 'PaddingMode?' to expected argument type 'EncryptionOptions?'\n169 |       algorithm: EncryptionOptionsAdapter.convertToInterface(options.algorithm),\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n    |                                                                    `- error: cannot convert value of type 'PaddingMode?' to expected argument type 'EncryptionOptions?'\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n173 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:172:44: error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n170 |       mode: EncryptionOptionsAdapter.convertToInterface(options.mode),\n171 |       padding: EncryptionOptionsAdapter.convertToInterface(options.padding),\n172 |       additionalAuthenticatedData: options.additionalAuthenticatedData\n    |                                            `- error: value of type 'DecryptionOptions' has no member 'additionalAuthenticatedData'\n173 |     )\n174 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:192:21: error: extra argument 'salt' in call\n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n192 |       salt: options.salt\n    |                     `- error: extra argument 'salt' in call\n193 |     )\n194 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:191:18: error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n189 | \n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n    |                  `- error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n192 |       salt: options.salt\n193 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:191:34: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n189 | \n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n    |                                  `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n192 |       salt: options.salt\n193 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:192:21: error: value of type 'HashingOptions' has no member 'salt'\n190 |     return HashingOptions(\n191 |       algorithm: convert(options.algorithm),\n192 |       salt: options.salt\n    |                     `- error: value of type 'HashingOptions' has no member 'salt'\n193 |     )\n194 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:208:21: error: extra argument 'salt' in call\n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n208 |       salt: options.salt\n    |                     `- error: extra argument 'salt' in call\n209 |     )\n210 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:207:18: error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n205 | \n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n    |                  `- error: cannot convert value of type 'HashingOptions?' to expected argument type 'HashAlgorithm'\n208 |       salt: options.salt\n209 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:207:45: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n205 | \n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n    |                                             `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n208 |       salt: options.salt\n209 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:208:21: error: value of type 'HashingOptions' has no member 'salt'\n206 |     return SecurityCoreInterfaces.HashingOptions(\n207 |       algorithm: convertToInterface(options.algorithm),\n208 |       salt: options.salt\n    |                     `- error: value of type 'HashingOptions' has no member 'salt'\n209 |     )\n210 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:264:33: error: extra argument 'customIdentifier' in call\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n264 |       customIdentifier: options.customIdentifier\n    |                                 `- error: extra argument 'customIdentifier' in call\n265 |     )\n266 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:263:33: error: value of type 'KeyGenerationOptions' has no member 'useSecureEnclave'\n261 |     return KeyGenerationOptions(\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'useSecureEnclave'\n264 |       customIdentifier: options.customIdentifier\n265 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:264:33: error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n262 |       keyType: convert(options.keyType),\n263 |       useSecureEnclave: options.useSecureEnclave,\n264 |       customIdentifier: options.customIdentifier\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n265 |     )\n266 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:278:55: error: extra arguments at positions #2, #3 in call\n276 |     guard let options else { return nil }\n277 | \n278 |     return SecurityCoreInterfaces.KeyGenerationOptions(\n    |                                                       `- error: extra arguments at positions #2, #3 in call\n279 |       keyType: convertToInterface(options.keyType),\n280 |       useSecureEnclave: options.useSecureEnclave,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:201:10: note: 'init(persistent:keyType:)' declared here\n199 | \n200 |   /// Initialises key generation options with defaults.\n201 |   public init(persistent: Bool=true, keyType: KeyType = .symmetric) {\n    |          `- note: 'init(persistent:keyType:)' declared here\n202 |     self.persistent=persistent\n203 |     self.keyType=keyType\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:281:33: error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n279 |       keyType: convertToInterface(options.keyType),\n280 |       useSecureEnclave: options.useSecureEnclave,\n281 |       customIdentifier: options.customIdentifier\n    |                                 `- error: value of type 'KeyGenerationOptions' has no member 'customIdentifier'\n282 |     )\n283 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:289:17: error: type 'KeyType' has no member 'symmetric'\n287 |     switch keyType {\n288 |       case .symmetric:\n289 |         return .symmetric\n    |                 `- error: type 'KeyType' has no member 'symmetric'\n290 |       case .asymmetric:\n291 |         return .asymmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:291:17: error: type 'KeyType' has no member 'asymmetric'\n289 |         return .symmetric\n290 |       case .asymmetric:\n291 |         return .asymmetric\n    |                 `- error: type 'KeyType' has no member 'asymmetric'\n292 |       @unknown default:\n293 |         // Default to symmetric if unknown\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:294:17: error: type 'KeyType' has no member 'symmetric'\n292 |       @unknown default:\n293 |         // Default to symmetric if unknown\n294 |         return .symmetric\n    |                 `- error: type 'KeyType' has no member 'symmetric'\n295 |     }\n296 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:287:5: warning: switch must be exhaustive\n285 |   // Helper methods for key type conversion\n286 |   private static func convert(_ keyType: SecurityCoreInterfaces.KeyType) -\u003e KeyType {\n287 |     switch keyType {\n    |     |- warning: switch must be exhaustive\n    |     `- note: add missing case: '.hybrid'\n288 |       case .symmetric:\n289 |         return .symmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:300:13: error: type 'KeyType' has no member 'symmetric'\n298 |   private static func convertToInterface(_ keyType: KeyType) -\u003e SecurityCoreInterfaces.KeyType {\n299 |     switch keyType {\n300 |       case .symmetric:\n    |             `- error: type 'KeyType' has no member 'symmetric'\n301 |         return .symmetric\n302 |       case .asymmetric:\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:302:13: error: type 'KeyType' has no member 'asymmetric'\n300 |       case .symmetric:\n301 |         return .symmetric\n302 |       case .asymmetric:\n    |             `- error: type 'KeyType' has no member 'asymmetric'\n303 |         return .asymmetric\n304 |       @unknown default:\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'LoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'CoreLoggingProtocol'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:106:16: error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n104 |  Basic logger implementation for when no logger is provided.\n105 |  */\n106 | private struct DefaultLogger: LoggingProtocol {\n    |                `- error: non-class type 'DefaultLogger' cannot conform to class protocol 'Actor'\n107 |   // Add loggingActor property required by LoggingProtocol\n108 |   var loggingActor: LoggingInterfaces.LoggingActor = .init(destinations: [])\n\npackages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swift:97:22: error: extra argument 'secureStorage' in call\n 95 |   ) async -\u003e CryptoServiceProtocol {\n 96 |     await CryptoServiceFactory.createMock(\n 97 |       secureStorage: secureStorage,\n    |                      `- error: extra argument 'secureStorage' in call\n 98 |       configuration: configuration\n 99 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:228:18: error: cannot find type 'DeploymentEnvironment' in scope\n226 |     secureStorage: SecureStorageProtocol?=nil,\n227 |     logger: LoggingProtocol?=nil,\n228 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:98:32: error: cannot find 'DefaultConsoleLogger' in scope\n 96 |     logger: LoggingProtocol?=nil\n 97 |   ) async -\u003e CryptoServiceProtocol {\n 98 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n 99 | \n100 |     return await DefaultCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:119:32: error: cannot find 'DefaultConsoleLogger' in scope\n117 |     logger: LoggingProtocol?=nil\n118 |   ) async -\u003e CryptoServiceProtocol {\n119 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n120 | \n121 |     return await LoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:143:32: error: cannot find 'DefaultConsoleLogger' in scope\n141 |     logger: LoggingProtocol?=nil\n142 |   ) async -\u003e CryptoServiceProtocol {\n143 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n144 | \n145 |     return await EnhancedLoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:167:32: error: cannot find 'DefaultConsoleLogger' in scope\n165 |     logger: LoggingProtocol?=nil\n166 |   ) async -\u003e CryptoServiceProtocol {\n167 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n168 | \n169 |     // Create secure service with enhanced parameters\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:179:16: error: extra argument 'storage' in call\n177 |         )\n178 |       ),\n179 |       storage: createSecureStorage(),\n    |                `- error: extra argument 'storage' in call\n180 |       logger: actualLogger\n181 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:201:32: error: cannot find 'DefaultConsoleLogger' in scope\n199 |     logger: LoggingProtocol?=nil\n200 |   ) async -\u003e CryptoServiceProtocol {\n201 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n202 | \n203 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:204:22: error: cannot find 'MockCryptoConfiguration' in scope\n202 | \n203 |     return await MockCryptoServiceImpl(\n204 |       configuration: MockCryptoConfiguration(\n    |                      `- error: cannot find 'MockCryptoConfiguration' in scope\n205 |         encryptionSucceeds: shouldSucceed,\n206 |         decryptionSucceeds: shouldSucceed,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:213:27: error: missing argument for parameter 'secureStorage' in call\n211 |         retrievalSucceeds: shouldSucceed\n212 |       ),\n213 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureStorage' in call\n214 |     )\n215 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:230:32: error: cannot find 'DefaultConsoleLogger' in scope\n228 |     environment: DeploymentEnvironment = .production\n229 |   ) async -\u003e CryptoServiceProtocol {\n230 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n231 | \n232 |     switch environment {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:245:26: error: cannot find 'MockCryptoConfiguration' in scope\n243 |       case .testing:\n244 |         return await MockCryptoServiceImpl(\n245 |           configuration: MockCryptoConfiguration(\n    |                          `- error: cannot find 'MockCryptoConfiguration' in scope\n246 |             encryptionSucceeds: true,\n247 |             decryptionSucceeds: true,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:254:31: error: missing argument for parameter 'secureStorage' in call\n252 |             retrievalSucceeds: true\n253 |           ),\n254 |           logger: actualLogger\n    |                               `- error: missing argument for parameter 'secureStorage' in call\n255 |         )\n256 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:299:32: error: cannot find 'DefaultConsoleLogger' in scope\n297 |     logger: LoggingProtocol?=nil\n298 |   ) async -\u003e CryptoServiceProtocol {\n299 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n300 | \n301 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:302:46: error: 'await' cannot appear to the right of a non-assignment operator\n300 | \n301 |     // Use the provided secure storage or create a default one\n302 |     let actualSecureStorage=secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                              `- error: 'await' cannot appear to the right of a non-assignment operator\n303 | \n304 |     // Create provider based on the specified type\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:327:42: error: missing argument label 'providerType:' in call\n325 | \n326 |       // Return a basic implementation as fallback\n327 |       return await createWithProviderType(\n    |                                          `- error: missing argument label 'providerType:' in call\n328 |         .basic,\n329 |         secureStorage: actualSecureStorage,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:358:32: error: cannot find 'DefaultConsoleLogger' in scope\n356 |     logger: LoggingProtocol?=nil\n357 |   ) async -\u003e CryptoServiceProtocol {\n358 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n359 | \n360 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:361:46: error: 'await' cannot appear to the right of a non-assignment operator\n359 | \n360 |     // Use the provided secure storage or create a default one\n361 |     let actualSecureStorage=secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                              `- error: 'await' cannot appear to the right of a non-assignment operator\n362 | \n363 |     // Create a crypto service implementation using DefaultCryptoServiceWithProviderImpl\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:386:32: error: cannot find 'DefaultConsoleLogger' in scope\n384 |     logger: LoggingProtocol?=nil\n385 |   ) async -\u003e SecureStorageProtocol {\n386 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n387 |     let url=storageURL ?? URL(fileURLWithPath: NSTemporaryDirectory())\n388 |       .appendingPathComponent(\"CryptoSecureStorage\")\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:393:16: error: extra argument 'baseURL' in call\n391 |     return InMemorySecureStorage(\n392 |       logger: actualLogger,\n393 |       baseURL: url\n    |                `- error: extra argument 'baseURL' in call\n394 |     )\n395 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:421:32: error: cannot find 'DefaultConsoleLogger' in scope\n419 |     logger: LoggingProtocol?=nil\n420 |   ) async -\u003e CryptoServiceProtocol {\n421 |     let actualLogger=logger ?? DefaultConsoleLogger()\n    |                                `- error: cannot find 'DefaultConsoleLogger' in scope\n422 |     return await MockCryptoServiceImpl(configuration: configuration, logger: actualLogger)\n423 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:422:90: error: missing argument for parameter 'secureStorage' in call\n420 |   ) async -\u003e CryptoServiceProtocol {\n421 |     let actualLogger=logger ?? DefaultConsoleLogger()\n422 |     return await MockCryptoServiceImpl(configuration: configuration, logger: actualLogger)\n    |                                                                                          `- error: missing argument for parameter 'secureStorage' in call\n423 |   }\n424 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:76:10: note: 'init(configuration:logger:secureStorage:)' declared here\n 74 |    - Parameter secureStorage: The secure storage to use\n 75 |    */\n 76 |   public init(\n    |          `- note: 'init(configuration:logger:secureStorage:)' declared here\n 77 |     configuration: Configuration = Configuration(),\n 78 |     logger: LoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:440:7: warning: no 'async' operations occur within 'await' expression\n438 |   ) async -\u003e CryptoServiceProtocol {\n439 |     if let secureLogger {\n440 |       await EnhancedLoggingCryptoServiceImpl(\n    |       `- warning: no 'async' operations occur within 'await' expression\n441 |         wrapped: wrapped,\n442 |         logger: secureLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:445:7: warning: no 'async' operations occur within 'await' expression\n443 |       )\n444 |     } else {\n445 |       await LoggingCryptoServiceImpl(\n    |       `- warning: no 'async' operations occur within 'await' expression\n446 |         wrapped: wrapped,\n447 |         logger: logger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:33:14: error: cannot find type 'SecurityProviderOptions' in scope\n31 |     data: [UInt8],\n32 |     keyIdentifier: String?=nil,\n33 |     options: SecurityProviderOptions?=nil\n   |              `- error: cannot find type 'SecurityProviderOptions' in scope\n34 |   ) async -\u003e Result\u003c[UInt8], Error\u003e {\n35 |     // Basic implementation of security operations\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:80:16: error: cannot find type 'SecurityProviderOptions' in scope\n78 | \n79 |   public func generateKey(\n80 |     options _: SecurityProviderOptions\n   |                `- error: cannot find type 'SecurityProviderOptions' in scope\n81 |   ) async -\u003e Result\u003cString, Error\u003e {\n82 |     // In a real implementation, this would generate an actual cryptographic key\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- warning: non-final class 'BasicSecurityProvider' cannot conform to 'Sendable'; use '@unchecked Sendable'; this is an error in the Swift 6 language mode\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              `- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:16:14: error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n14 |  as a fallback implementation for various security operations.\n15 |  */\n16 | public class BasicSecurityProvider: SecurityProviderProtocol {\n   |              |- error: type 'BasicSecurityProvider' does not conform to protocol 'AsyncServiceInitializable'\n   |              `- note: add stubs for conformance\n17 |   /// The provider type\n18 |   private let type: SecurityProviderType\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:30:8: note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 28 | \n 29 |   /// Access to cryptographic service implementation\n 30 |   func cryptoService() async -\u003e CryptoServiceProtocol\n    |        `- note: protocol requires function 'cryptoService()' with type '() async -\u003e any CryptoServiceProtocol'\n 31 | \n 32 |   /// Access to key management service implementation\n 33 |   func keyManager() async -\u003e KeyManagementProtocol\n    |        `- note: protocol requires function 'keyManager()' with type '() async -\u003e any KeyManagementProtocol'\n 34 | \n 35 |   // MARK: - Core Operations\n    :\n 41 |    - Returns: Result containing encrypted data or error\n 42 |    */\n 43 |   func encrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'encrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 44 | \n 45 |   /**\n    :\n 49 |    - Returns: Result containing decrypted data or error\n 50 |    */\n 51 |   func decrypt(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'decrypt(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 52 | \n 53 |   /**\n    :\n 65 |    - Returns: Result containing storage confirmation or error\n 66 |    */\n 67 |   func secureStore(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureStore(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 68 | \n 69 |   /**\n    :\n 73 |    - Returns: Result containing retrieved data or error\n 74 |    */\n 75 |   func secureRetrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureRetrieve(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 76 | \n 77 |   /**\n    :\n 81 |    - Returns: Result containing deletion confirmation or error\n 82 |    */\n 83 |   func secureDelete(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'secureDelete(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 84 | \n 85 |   /**\n    :\n 89 |    - Returns: Result containing signature data or error\n 90 |    */\n 91 |   func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'sign(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n 92 | \n 93 |   /**\n    :\n 97 |    - Returns: Result containing verification status or error\n 98 |    */\n 99 |   func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO\n    |        `- note: protocol requires function 'verify(config:)' with type '(SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n100 | \n101 |   /**\n    :\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n    :\n121 |    - Returns: A properly configured SecurityConfigDTO\n122 |    */\n123 |   func createSecureConfig(options: SecurityConfigOptions) async -\u003e SecurityConfigDTO\n    |        `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n124 | }\n125 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:37:13: error: type 'SecurityOperation' has no member 'encryption'\n35 |     // Basic implementation of security operations\n36 |     switch operation {\n37 |       case .encryption:\n   |             `- error: type 'SecurityOperation' has no member 'encryption'\n38 |         guard let keyIdentifier else {\n39 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:50:13: error: type 'SecurityOperation' has no member 'decryption'\n48 |         return .success(encryptedData)\n49 | \n50 |       case .decryption:\n   |             `- error: type 'SecurityOperation' has no member 'decryption'\n51 |         guard let keyIdentifier else {\n52 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:59:13: error: type 'SecurityOperation' has no member 'hashing'\n57 |         return .success(data)\n58 | \n59 |       case .hashing:\n   |             `- error: type 'SecurityOperation' has no member 'hashing'\n60 |         // Determine the hash algorithm to use\n61 |         let algorithm=options?.hashAlgorithm ?? .sha256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:39:27: error: module 'UmbraErrors' has no member named 'Security'\n37 |       case .encryption:\n38 |         guard let keyIdentifier else {\n39 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n   |                           `- error: module 'UmbraErrors' has no member named 'Security'\n40 |         }\n41 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:52:27: error: module 'UmbraErrors' has no member named 'Security'\n50 |       case .decryption:\n51 |         guard let keyIdentifier else {\n52 |           return .failure(UmbraErrors.Security.Core.missingKeyIdentifier)\n   |                           `- error: module 'UmbraErrors' has no member named 'Security'\n53 |         }\n54 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:75:25: error: module 'UmbraErrors' has no member named 'Security'\n73 | \n74 |       default:\n75 |         return .failure(UmbraErrors.Security.Core.unsupportedOperation)\n   |                         `- error: module 'UmbraErrors' has no member named 'Security'\n76 |     }\n77 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 | \n 21 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:17:14: error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  as the baseline implementation when more specialised providers aren't selected.\n 16 |  */\n 17 | public actor DefaultCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   /// The secure storage to use\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n 97 |   }\n 98 | \n 99 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n100 |     encryptedDataIdentifier: String,\n101 |     keyIdentifier: String,\n    :\n198 |   }\n199 | \n200 |   public func verifyHash(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n201 |     dataIdentifier: String,\n202 |     hashIdentifier: String,\n    :\n259 |   }\n260 | \n261 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n262 |     length: Int,\n263 |     options: CryptoServiceOptions?=nil\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:53:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n 51 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n 52 | \n 53 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n 54 |       \"Encrypting data with key: \\(keyIdentifier)\",\n 55 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:81:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n 79 |     // Store the encrypted data\n 80 |     let dataIdentifier=\"encrypted_\\(UUID().uuidString)\"\n 81 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n 82 |       data: encryptedData,\n 83 |       identifier: dataIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:95:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n 93 |           source: \"DefaultCryptoService\"\n 94 |         )\n 95 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n 96 |     }\n 97 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:107:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n105 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n106 | \n107 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n108 |       \"Decrypting data with identifier: \\(encryptedDataIdentifier) using key: \\(keyIdentifier)\",\n109 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:114:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n112 | \n113 |     // Retrieve the encrypted data\n114 |     let dataResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n115 |       identifier: encryptedDataIdentifier\n116 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:136:24: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n134 |           return .success(decryptedData)\n135 |         } else {\n136 |           await logger.error(\n    |                        `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n137 |             \"Invalid encrypted data format\",\n138 |             metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:141:44: error: module 'UmbraErrors' has no member named 'Security'\n139 |             source: \"DefaultCryptoService\"\n140 |           )\n141 |           return .failure(.operationFailed(UmbraErrors.Security.Core.invalidData))\n    |                                            `- error: module 'UmbraErrors' has no member named 'Security'\n142 |         }\n143 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:150:26: error: enum case 'keyNotFound' has no associated values\n148 |           source: \"DefaultCryptoService\"\n149 |         )\n150 |         return .failure(.keyNotFound(encryptedDataIdentifier))\n    |                          `- error: enum case 'keyNotFound' has no associated values\n151 |     }\n152 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:162:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n160 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n161 | \n162 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n163 |       \"Generating hash with algorithm: \\(algorithm ?? .sha256)\",\n164 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:171:27: error: switch must be exhaustive\n169 | \n170 |     // For this implementation, we'll create a simple mock hash\n171 |     var hashData: [UInt8]=switch algorithm ?? .sha256 {\n    |                           |- error: switch must be exhaustive\n    |                           `- note: add missing case: '.blake2b'\n172 |       case .sha256:\n173 |         // Generate a mock SHA-256 hash (32 bytes)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:182:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n180 |     // Store the hash\n181 |     let hashIdentifier=\"hash_\\(UUID().uuidString)\"\n182 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n183 |       data: hashData,\n184 |       identifier: hashIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:196:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n194 |           source: \"DefaultCryptoService\"\n195 |         )\n196 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n197 |     }\n198 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:208:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n206 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n207 | \n208 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n209 |       \"Verifying hash for data with identifier: \\(dataIdentifier)\",\n210 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:215:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n213 | \n214 |     // Retrieve the data\n215 |     let dataResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n216 |       identifier: dataIdentifier\n217 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:227:24: error: enum case 'keyNotFound' has no associated values\n225 |         )\n226 |       }\n227 |       return .failure(.keyNotFound(dataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n228 |     }\n229 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:231:40: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n229 | \n230 |     // Retrieve the expected hash\n231 |     let hashResult=await secureStorage.retrieveSecurely(\n    |                                        `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n232 |       identifier: hashIdentifier\n233 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:243:24: error: enum case 'keyNotFound' has no associated values\n241 |         )\n242 |       }\n243 |       return .failure(.keyNotFound(hashIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n244 |     }\n245 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:252:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n250 |     let matchesHash=Bool.random()\n251 | \n252 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n253 |       \"Hash verification result: \\(matchesHash)\",\n254 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:268:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n266 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n267 | \n268 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n269 |       \"Generating key with length: \\(length)\",\n270 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:276:20: warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n274 |     // Validate key length\n275 |     guard length \u003e= 16 else { // Minimum 128-bit key\n276 |       await logger.error(\n    |                    `- warning: 'error(_:metadata:source:)' is deprecated: Use error(_:context:) instead\n277 |         \"Key length too short: \\(length) bytes\",\n278 |         metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:281:40: error: module 'UmbraErrors' has no member named 'Security'\n279 |         source: \"DefaultCryptoService\"\n280 |       )\n281 |       return .failure(.operationFailed(UmbraErrors.Security.Core.invalidKeyLength))\n    |                                        `- error: module 'UmbraErrors' has no member named 'Security'\n282 |     }\n283 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:289:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n287 |     // Store the key\n288 |     let keyIdentifier=\"key_\\(UUID().uuidString)\"\n289 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n290 |       data: keyData,\n291 |       identifier: keyIdentifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:303:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n301 |           source: \"DefaultCryptoService\"\n302 |         )\n303 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n304 |     }\n305 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:315:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n313 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n314 | \n315 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n316 |       \"Storing data with identifier: \\(identifier)\",\n317 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:321:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n319 |     )\n320 | \n321 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n322 |       data: data,\n323 |       identifier: identifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:335:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n333 |           source: \"DefaultCryptoService\"\n334 |         )\n335 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n336 |     }\n337 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:346:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n344 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n345 | \n346 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n347 |       \"Retrieving data with identifier: \\(identifier)\",\n348 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:352:44: error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n350 |     )\n351 | \n352 |     let retrieveResult=await secureStorage.retrieveSecurely(\n    |                                            `- error: value of type 'any SecureStorageProtocol' has no member 'retrieveSecurely'\n353 |       identifier: identifier\n354 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:365:26: error: enum case 'keyNotFound' has no associated values\n363 |           source: \"DefaultCryptoService\"\n364 |         )\n365 |         return .failure(.keyNotFound(identifier))\n    |                          `- error: enum case 'keyNotFound' has no associated values\n366 |     }\n367 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:376:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n374 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n375 | \n376 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n377 |       \"Exporting data with identifier: \\(identifier)\",\n378 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:374:9: warning: initialization of immutable value 'actualOptions' was never used; consider replacing with assignment to '_' or removing it\n372 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n373 |     // Use provided options or convert our factory options to CryptoServiceOptions\n374 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n    |         `- warning: initialization of immutable value 'actualOptions' was never used; consider replacing with assignment to '_' or removing it\n375 | \n376 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:394:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n392 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n393 | \n394 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n395 |       \"Importing data with identifier: \\(identifier)\",\n396 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:400:41: error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n398 |     )\n399 | \n400 |     let storeResult=await secureStorage.storeSecurely(\n    |                                         `- error: value of type 'any SecureStorageProtocol' has no member 'storeSecurely'\n401 |       data: data,\n402 |       identifier: identifier\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:414:26: error: type 'SecurityStorageError' has no member 'storageFailure'\n412 |           source: \"DefaultCryptoService\"\n413 |         )\n414 |         return .failure(.storageFailure(error))\n    |                          `- error: type 'SecurityStorageError' has no member 'storageFailure'\n415 |     }\n416 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:425:18: warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n423 |     let actualOptions=options ?? factoryOptions.toCryptoServiceOptions()\n424 | \n425 |     await logger.debug(\n    |                  `- warning: 'debug(_:metadata:source:)' is deprecated: Use debug(_:context:) instead\n426 |       \"Deleting data with identifier: \\(identifier)\",\n427 |       metadata: LogMetadataDTOCollection().toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:431:42: error: value of type 'any SecureStorageProtocol' has no member 'deleteSecurely'\n429 |     )\n430 | \n431 |     let deleteResult=await secureStorage.deleteSecurely(\n    |                                          `- error: value of type 'any SecureStorageProtocol' has no member 'deleteSecurely'\n432 |       identifier: identifier\n433 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:445:28: error: enum case 'keyNotFound' has no associated values\n443 |         )\n444 |         if case .keyNotFound=error {\n445 |           return .failure(.keyNotFound(identifier))\n    |                            `- error: enum case 'keyNotFound' has no associated values\n446 |         } else {\n447 |           return .failure(.storageFailure(error))\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:447:28: error: type 'SecurityStorageError' has no member 'storageFailure'\n445 |           return .failure(.keyNotFound(identifier))\n446 |         } else {\n447 |           return .failure(.storageFailure(error))\n    |                            `- error: type 'SecurityStorageError' has no member 'storageFailure'\n448 |         }\n449 |     }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:19:15: error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    |               |- error: property 'secureStorage' must be declared public because it matches a requirement in public protocol 'CryptoServiceProtocol'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 20 |   private let logger: LoggingProtocol\n 21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:17:14: error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n 15 |  CryptoServiceProtocol API.\n 16 |  */\n 17 | public actor DefaultCryptoServiceWithProviderImpl: CryptoServiceProtocol {\n    |              |- error: type 'DefaultCryptoServiceWithProviderImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 18 |   private let provider: SecurityProviderProtocol\n 19 |   private let secureStorage: SecureStorageProtocol\n    :\n102 |   }\n103 | \n104 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n105 |     encryptedDataIdentifier: String,\n106 |     keyIdentifier: String,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:49:29: error: cannot find 'SecurityProviderOptions' in scope\n 47 | \n 48 |     // Prepare operation options\n 49 |     let encryptionOptions = SecurityProviderOptions(\n    |                             `- error: cannot find 'SecurityProviderOptions' in scope\n 50 |       algorithm: .aes256GCM,\n 51 |       mode: .encrypt,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:50:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n 48 |     // Prepare operation options\n 49 |     let encryptionOptions = SecurityProviderOptions(\n 50 |       algorithm: .aes256GCM,\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n 51 |       mode: .encrypt,\n 52 |       keySize: 256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:51:14: error: cannot infer contextual base in reference to member 'encrypt'\n 49 |     let encryptionOptions = SecurityProviderOptions(\n 50 |       algorithm: .aes256GCM,\n 51 |       mode: .encrypt,\n    |              `- error: cannot infer contextual base in reference to member 'encrypt'\n 52 |       keySize: 256\n 53 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:56:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n 54 | \n 55 |     // Delegate to security provider\n 56 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n 57 |       .encryption,\n 58 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:57:8: error: cannot infer contextual base in reference to member 'encryption'\n 55 |     // Delegate to security provider\n 56 |     let result = await provider.performOperation(\n 57 |       .encryption,\n    |        `- error: cannot infer contextual base in reference to member 'encryption'\n 58 |       data: data,\n 59 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:87:30: error: type 'SecurityStorageError' has no member 'storageFailure'\n 85 |               )\n 86 |             )\n 87 |             return .failure(.storageFailure(error))\n    |                              `- error: type 'SecurityStorageError' has no member 'storageFailure'\n 88 |         }\n 89 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:123:24: error: enum case 'keyNotFound' has no associated values\n121 |         )\n122 |       }\n123 |       return .failure(.keyNotFound(encryptedDataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n124 |     }\n125 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:138:29: error: cannot find 'SecurityProviderOptions' in scope\n136 | \n137 |     // Prepare operation options\n138 |     let decryptionOptions = SecurityProviderOptions(\n    |                             `- error: cannot find 'SecurityProviderOptions' in scope\n139 |       algorithm: .aes256GCM,\n140 |       mode: .decrypt,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:139:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n137 |     // Prepare operation options\n138 |     let decryptionOptions = SecurityProviderOptions(\n139 |       algorithm: .aes256GCM,\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n140 |       mode: .decrypt,\n141 |       keySize: 256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:140:14: error: cannot infer contextual base in reference to member 'decrypt'\n138 |     let decryptionOptions = SecurityProviderOptions(\n139 |       algorithm: .aes256GCM,\n140 |       mode: .decrypt,\n    |              `- error: cannot infer contextual base in reference to member 'decrypt'\n141 |       keySize: 256\n142 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:145:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n143 | \n144 |     // Delegate to security provider\n145 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n146 |       .decryption,\n147 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:146:8: error: cannot infer contextual base in reference to member 'decryption'\n144 |     // Delegate to security provider\n145 |     let result = await provider.performOperation(\n146 |       .decryption,\n    |        `- error: cannot infer contextual base in reference to member 'decryption'\n147 |       data: data,\n148 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:186:28: error: cannot find type 'HashingAlgorithm' in scope\n184 | \n185 |     // Map hash algorithm to security provider algorithm\n186 |     let providerAlgorithm: HashingAlgorithm = switch algorithm {\n    |                            `- error: cannot find type 'HashingAlgorithm' in scope\n187 |       case .sha256:\n188 |         .sha256\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:194:23: error: cannot find 'SecurityProviderOptions' in scope\n192 | \n193 |     // Prepare operation options\n194 |     let hashOptions = SecurityProviderOptions(\n    |                       `- error: cannot find 'SecurityProviderOptions' in scope\n195 |       hashAlgorithm: providerAlgorithm\n196 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:199:33: error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n197 | \n198 |     // Delegate to security provider\n199 |     let result = await provider.performOperation(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'performOperation'\n200 |       .hashing,\n201 |       data: data,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:200:8: error: cannot infer contextual base in reference to member 'hashing'\n198 |     // Delegate to security provider\n199 |     let result = await provider.performOperation(\n200 |       .hashing,\n    |        `- error: cannot infer contextual base in reference to member 'hashing'\n201 |       data: data,\n202 |       options: hashOptions\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:229:30: error: type 'SecurityStorageError' has no member 'storageFailure'\n227 |               )\n228 |             )\n229 |             return .failure(.storageFailure(error))\n    |                              `- error: type 'SecurityStorageError' has no member 'storageFailure'\n230 |         }\n231 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:264:24: error: enum case 'keyNotFound' has no associated values\n262 |         )\n263 |       }\n264 |       return .failure(.keyNotFound(dataIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n265 |     }\n266 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:281:24: error: enum case 'keyNotFound' has no associated values\n279 |         )\n280 |       }\n281 |       return .failure(.keyNotFound(expectedHashIdentifier))\n    |                        `- error: enum case 'keyNotFound' has no associated values\n282 |     }\n283 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:296:33: error: value of type 'any SecurityProviderProtocol' has no member 'verifyHash'\n294 | \n295 |     // Delegate to security provider\n296 |     let result = await provider.verifyHash(\n    |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'verifyHash'\n297 |       data: data,\n298 |       expectedHash: expectedHash\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:329:22: error: cannot find 'SecurityKeyOptions' in scope\n327 |     \n328 |     // Prepare key generation options\n329 |     let keyOptions = SecurityKeyOptions(\n    |                      `- error: cannot find 'SecurityKeyOptions' in scope\n330 |       keySize: length * 8,\n331 |       algorithm: .aes256GCM\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceWithProviderImpl.swift:331:19: error: cannot infer contextual base in reference to member 'aes256GCM'\n329 |     let keyOptions = SecurityKeyOptions(\n330 |       keySize: length * 8,\n331 |       algorithm: .aes256GCM\n    |                   `- error: cannot infer contextual base in reference to member 'aes256GCM'\n332 |     )\n333 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:8:15: error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n 6 |  Enhanced log context for crypto operations with privacy controls\n 7 |  */\n 8 | public struct EnhancedLogContext: LogContextDTO {\n   |               |- error: type 'EnhancedLogContext' does not conform to protocol 'LogContextDTO'\n   |               `- note: add stubs for conformance\n 9 |   /// Domain name for the log context\n10 |   public let domainName: String\n   :\n14 |   \n15 |   /// Additional context metadata as key-value pairs\n16 |   public let metadata: [String: String]\n   |              `- note: candidate has non-matching type '[String : String]'\n17 |   \n18 |   /// Privacy level for each metadata field\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:13:7: note: protocol requires property 'source' with type 'String?'\n11 | \n12 |   /// Optional source information (class, file, etc.)\n13 |   var source: String? { get }\n   |       `- note: protocol requires property 'source' with type 'String?'\n14 | \n15 |   /// Optional correlation ID for tracing related log events\n16 |   var correlationID: String? { get }\n   |       `- note: protocol requires property 'correlationID' with type 'String?'\n17 | \n18 |   /// The metadata collection for this context\n19 |   var metadata: LogMetadataDTOCollection { get }\n   |       `- note: protocol requires property 'metadata' with type 'LogMetadataDTOCollection'\n20 | }\n21 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:63:7: error: switch must be exhaustive\n61 |       let privacy = privacyLevel(for: key)\n62 |       \n63 |       switch privacy {\n   |       |- error: switch must be exhaustive\n   |       `- note: add missing case: '.hash'\n64 |       case .private:\n65 |         _ = collection.withPrivate(key: key, value: value)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:16:14: error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 14 |  logging with proper privacy tags for sensitive data.\n 15 |  */\n 16 | public actor EnhancedLoggingCryptoServiceImpl: CryptoServiceProtocol {\n    |              |- error: type 'EnhancedLoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 17 |   /// The wrapped implementation\n 18 |   private let wrapped: CryptoServiceProtocol\n    :\n 81 |   }\n 82 | \n 83 |   public func decrypt(\n    |               `- note: candidate has non-matching type '(String, String, CryptoServiceOptions?) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n 84 |     encryptedDataIdentifier: String,\n 85 |     keyIdentifier: String,\n    :\n215 |   }\n216 | \n217 |   public func generateKey(\n    |               `- note: candidate has non-matching type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n218 |     length: Int,\n219 |     options: KeyGenerationOptions?=nil\n    :\n258 |   }\n259 | \n260 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n261 |     data: [UInt8],\n262 |     identifier: String\n    :\n300 |   }\n301 | \n302 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n303 |     identifier: String\n304 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n    :\n421 |   }\n422 | \n423 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n424 |     identifier: String\n425 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -\u003e Result\u003cBool, SecurityStorageError\u003e'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:58:37: error: incorrect argument label in call (have 'data:keyIdentifier:options:', expected 'dataIdentifier:keyIdentifier:options:')\n 56 | \n 57 |     // Perform the operation\n 58 |     let result=await wrapped.encrypt(\n    |                                     `- error: incorrect argument label in call (have 'data:keyIdentifier:options:', expected 'dataIdentifier:keyIdentifier:options:')\n 59 |       data: data,\n 60 |       keyIdentifier: keyIdentifier,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:59:13: error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n 57 |     // Perform the operation\n 58 |     let result=await wrapped.encrypt(\n 59 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n 60 |       keyIdentifier: keyIdentifier,\n 61 |       options: options\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:61:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'EncryptionOptions?'\n 59 |       data: data,\n 60 |       keyIdentifier: keyIdentifier,\n 61 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'EncryptionOptions?'\n 62 |     )\n 63 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:67:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 65 |     switch result {\n 66 |       case let .success(identifier):\n 67 |         context.updateMetadata([\"dataIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 68 |         await logger.debug(\n 69 |           \"Encryption successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:67:52: error: type 'Any' has no member 'private'\n 65 |     switch result {\n 66 |       case let .success(identifier):\n 67 |         context.updateMetadata([\"dataIdentifier\": .private(identifier)])\n    |                                                    `- error: type 'Any' has no member 'private'\n 68 |         await logger.debug(\n 69 |           \"Encryption successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:73:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 71 |         )\n 72 |       case let .failure(error):\n 73 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n 74 |         await logger.error(\n 75 |           \"Encryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:73:43: error: type 'Any' has no member 'hash'\n 71 |         )\n 72 |       case let .failure(error):\n 73 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n 74 |         await logger.error(\n 75 |           \"Encryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:107:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'DecryptionOptions?'\n105 |       encryptedDataIdentifier: encryptedDataIdentifier,\n106 |       keyIdentifier: keyIdentifier,\n107 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'DecryptionOptions?'\n108 |     )\n109 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:118:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n116 |         )\n117 |       case let .failure(error):\n118 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n119 |         await logger.error(\n120 |           \"Decryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:118:43: error: type 'Any' has no member 'hash'\n116 |         )\n117 |       case let .failure(error):\n118 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n119 |         await logger.error(\n120 |           \"Decryption failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:147:42: error: incorrect argument labels in call (have 'data:algorithm:', expected 'dataIdentifier:options:')\n145 | \n146 |     // Perform the operation\n147 |     let result=await wrapped.generateHash(\n    |                                          `- error: incorrect argument labels in call (have 'data:algorithm:', expected 'dataIdentifier:options:')\n148 |       data: data,\n149 |       algorithm: algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:148:13: error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n146 |     // Perform the operation\n147 |     let result=await wrapped.generateHash(\n148 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'String'\n149 |       algorithm: algorithm\n150 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:149:18: error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n147 |     let result=await wrapped.generateHash(\n148 |       data: data,\n149 |       algorithm: algorithm\n    |                  `- error: cannot convert value of type 'HashAlgorithm' to expected argument type 'HashingOptions'\n150 |     )\n151 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:155:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n153 |     switch result {\n154 |       case let .success(identifier):\n155 |         context.updateMetadata([\"hashIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n156 |         await logger.debug(\n157 |           \"Hash generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:155:52: error: type 'Any' has no member 'private'\n153 |     switch result {\n154 |       case let .success(identifier):\n155 |         context.updateMetadata([\"hashIdentifier\": .private(identifier)])\n    |                                                    `- error: type 'Any' has no member 'private'\n156 |         await logger.debug(\n157 |           \"Hash generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:161:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n159 |         )\n160 |       case let .failure(error):\n161 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n162 |         await logger.error(\n163 |           \"Hash generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:161:43: error: type 'Any' has no member 'hash'\n159 |         )\n160 |       case let .failure(error):\n161 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n162 |         await logger.error(\n163 |           \"Hash generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:195:16: error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'HashingOptions?'\n193 |       dataIdentifier: dataIdentifier,\n194 |       hashIdentifier: expectedHashIdentifier,\n195 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServiceOptions?' to expected argument type 'HashingOptions?'\n196 |     )\n197 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:201:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n199 |     switch result {\n200 |       case let .success(matches):\n201 |         context.updateMetadata([\"matches\": .public(String(describing: matches))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n202 |         await logger.debug(\n203 |           \"Hash verification completed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:201:45: error: type 'Any' has no member 'public'\n199 |     switch result {\n200 |       case let .success(matches):\n201 |         context.updateMetadata([\"matches\": .public(String(describing: matches))])\n    |                                             `- error: type 'Any' has no member 'public'\n202 |         await logger.debug(\n203 |           \"Hash verification completed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:207:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n205 |         )\n206 |       case let .failure(error):\n207 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n208 |         await logger.error(\n209 |           \"Hash verification failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:207:43: error: type 'Any' has no member 'hash'\n205 |         )\n206 |       case let .failure(error):\n207 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n208 |         await logger.error(\n209 |           \"Hash verification failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:238:16: error: cannot convert value of type 'CryptoServices.KeyGenerationOptions?' to expected argument type 'SecurityCoreInterfaces.KeyGenerationOptions?'\n236 |     let result=await wrapped.generateKey(\n237 |       length: length,\n238 |       options: options\n    |                `- error: cannot convert value of type 'CryptoServices.KeyGenerationOptions?' to expected argument type 'SecurityCoreInterfaces.KeyGenerationOptions?'\n239 |     )\n240 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:244:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n242 |     switch result {\n243 |       case let .success(identifier):\n244 |         context.updateMetadata([\"keyIdentifier\": .private(identifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n245 |         await logger.debug(\n246 |           \"Key generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:244:51: error: type 'Any' has no member 'private'\n242 |     switch result {\n243 |       case let .success(identifier):\n244 |         context.updateMetadata([\"keyIdentifier\": .private(identifier)])\n    |                                                   `- error: type 'Any' has no member 'private'\n245 |         await logger.debug(\n246 |           \"Key generation successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:250:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n248 |         )\n249 |       case let .failure(error):\n250 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n251 |         await logger.error(\n252 |           \"Key generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:250:43: error: type 'Any' has no member 'hash'\n248 |         )\n249 |       case let .failure(error):\n250 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n251 |         await logger.error(\n252 |           \"Key generation failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:280:13: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n278 |     // Perform the operation\n279 |     let result=await wrapped.storeData(\n280 |       data: data,\n    |             `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n281 |       identifier: identifier\n282 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:292:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n290 |         )\n291 |       case let .failure(error):\n292 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n293 |         await logger.error(\n294 |           \"Data storage failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:292:43: error: type 'Any' has no member 'hash'\n290 |         )\n291 |       case let .failure(error):\n292 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n293 |         await logger.error(\n294 |           \"Data storage failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:332:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n330 |         )\n331 |       case let .failure(error):\n332 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n333 |         await logger.error(\n334 |           \"Data retrieval failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:332:43: error: type 'Any' has no member 'hash'\n330 |         )\n331 |       case let .failure(error):\n332 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n333 |         await logger.error(\n334 |           \"Data retrieval failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:339:12: error: cannot convert return expression of type 'Result\u003cData, SecurityStorageError\u003e' to return type 'Result\u003c[UInt8], SecurityStorageError\u003e'\n337 |     }\n338 | \n339 |     return result\n    |            |- error: cannot convert return expression of type 'Result\u003cData, SecurityStorageError\u003e' to return type 'Result\u003c[UInt8], SecurityStorageError\u003e'\n    |            `- note: arguments to generic parameter 'Success' ('Data' and '[UInt8]') are expected to be equal\n340 |   }\n341 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:372:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n370 |         )\n371 |       case let .failure(error):\n372 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n373 |         await logger.error(\n374 |           \"Data export failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:372:43: error: type 'Any' has no member 'hash'\n370 |         )\n371 |       case let .failure(error):\n372 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n373 |         await logger.error(\n374 |           \"Data export failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:407:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n405 |     switch result {\n406 |       case let .success(resultIdentifier):\n407 |         context.updateMetadata([\"resultIdentifier\": .private(resultIdentifier)])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n408 |         await logger.debug(\n409 |           \"Data import successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:407:54: error: type 'Any' has no member 'private'\n405 |     switch result {\n406 |       case let .success(resultIdentifier):\n407 |         context.updateMetadata([\"resultIdentifier\": .private(resultIdentifier)])\n    |                                                      `- error: type 'Any' has no member 'private'\n408 |         await logger.debug(\n409 |           \"Data import successful\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:413:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n411 |         )\n412 |       case let .failure(error):\n413 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n414 |         await logger.error(\n415 |           \"Data import failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:413:43: error: type 'Any' has no member 'hash'\n411 |         )\n412 |       case let .failure(error):\n413 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n414 |         await logger.error(\n415 |           \"Data import failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:453:17: error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n451 |         )\n452 |       case let .failure(error):\n453 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                 `- error: value of type 'EnhancedLogContext' has no member 'updateMetadata'\n454 |         await logger.error(\n455 |           \"Data deletion failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:453:43: error: type 'Any' has no member 'hash'\n451 |         )\n452 |       case let .failure(error):\n453 |         context.updateMetadata([\"error\": .hash(String(describing: error))])\n    |                                           `- error: type 'Any' has no member 'hash'\n454 |         await logger.error(\n455 |           \"Data deletion failed\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:460:12: error: cannot convert return expression of type 'Result\u003cVoid, SecurityStorageError\u003e' to return type 'Result\u003cBool, SecurityStorageError\u003e'\n458 |     }\n459 | \n460 |     return result\n    |            |- error: cannot convert return expression of type 'Result\u003cVoid, SecurityStorageError\u003e' to return type 'Result\u003cBool, SecurityStorageError\u003e'\n    |            `- note: arguments to generic parameter 'Success' ('Void' and 'Bool') are expected to be equal\n461 |   }\n462 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:477:35: error: extra arguments at positions #2, #3 in call\n475 |     identifiers: [String: PrivacyLevel]\n476 |   ) -\u003e EnhancedLogContext {\n477 |     var context=EnhancedLogContext(\n    |                                   `- error: extra arguments at positions #2, #3 in call\n478 |       domainName: \"CryptoServices\",\n479 |       source: \"CryptoServiceFactory\",\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:30:10: note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n28 |      - privacyLevels: Privacy levels for each metadata field\n29 |    */\n30 |   public init(\n   |          `- note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n31 |     domainName: String,\n32 |     operationName: String,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:478:35: error: missing argument for parameter 'operationName' in call\n476 |   ) -\u003e EnhancedLogContext {\n477 |     var context=EnhancedLogContext(\n478 |       domainName: \"CryptoServices\",\n    |                                   `- error: missing argument for parameter 'operationName' in call\n479 |       source: \"CryptoServiceFactory\",\n480 |       correlationID: nil\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLogContext.swift:30:10: note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n28 |      - privacyLevels: Privacy levels for each metadata field\n29 |    */\n30 |   public init(\n   |          `- note: 'init(domainName:operationName:metadata:privacyLevels:)' declared here\n31 |     domainName: String,\n32 |     operationName: String,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:480:22: error: 'nil' requires a contextual type\n478 |       domainName: \"CryptoServices\",\n479 |       source: \"CryptoServiceFactory\",\n480 |       correlationID: nil\n    |                      `- error: 'nil' requires a contextual type\n481 |     )\n482 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:47:30: error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n 47 |     rateLimiter: RateLimiter=RateLimiter()\n    |                              `- error: initializer 'init()' is internal and cannot be referenced from a default argument value\n 48 |   ) {\n 49 |     self.wrapped = wrapped\n    :\n443 |  Simple rate limiter for security operations.\n444 |  */\n445 | public class RateLimiter {\n    |              `- note: initializer 'init()' is not '@usableFromInline' or public\n446 |   public enum Operation: String {\n447 |     case encrypt, decrypt, hash, verify, export, generateKey\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:384:15: error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n382 |    - Returns: The exported data or error\n383 |    */\n384 |   public func exportData(\n    |               `- error: instance method 'exportData(withIdentifier:)' has different argument labels from those required by protocol 'CryptoServiceProtocol' ('exportData(identifier:)')\n385 |     withIdentifier identifier: String\n386 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:81:8: note: requirement 'exportData(identifier:)' declared here\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: requirement 'exportData(identifier:)' declared here\n 82 |     identifier: String\n 83 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:20:14: error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n 18 |  validation of cryptographic operations.\n 19 |  */\n 20 | public actor EnhancedSecureCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'EnhancedSecureCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 21 | \n 22 |   /// The wrapped implementation that does the actual cryptographic work\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:412:36: error: incorrect argument label in call (have 'withIdentifier:', expected 'identifier:')\n410 | \n411 |     // Use the wrapped implementation to perform the export\n412 |     return await wrapped.exportData(withIdentifier: identifier)\n    |                                    `- error: incorrect argument label in call (have 'withIdentifier:', expected 'identifier:')\n413 |   }\n414 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:438:38: error: missing argument for parameter 'length' in call\n436 | \n437 |     // Use the wrapped implementation to generate the key\n438 |     return await wrapped.generateKey(options: options)\n    |                                      `- error: missing argument for parameter 'length' in call\n439 |   }\n440 | }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:61:8: note: 'generateKey(length:options:)' declared here\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: 'generateKey(length:options:)' declared here\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/LoggingCryptoServiceImpl.swift:9:14: error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n  7 |  all operations before delegating to the wrapped implementation.\n  8 |  */\n  9 | public actor LoggingCryptoServiceImpl: @preconcurrency CryptoServiceProtocol {\n    |              |- error: type 'LoggingCryptoServiceImpl' does not conform to protocol 'CryptoServiceProtocol'\n    |              `- note: add stubs for conformance\n 10 |   /// The wrapped implementation\n 11 |   private let wrapped: CryptoServiceProtocol\n    :\n339 |    - Returns: Identifier for the imported data or an error\n340 |    */\n341 |   public func importData(\n    |               `- note: candidate has non-matching type '([UInt8], String?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n342 |     _ data: [UInt8],\n343 |     customIdentifier: String?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:93:8: note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 91 |    - Returns: Identifier for the generated hash in secure storage, or an error.\n 92 |    */\n 93 |   func generateHash(\n    |        `- note: protocol requires function 'generateHash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n 94 |     dataIdentifier: String,\n 95 |     options: HashingOptions?\n    :\n104 |    - Returns: Success or an error.\n105 |    */\n106 |   func storeData(\n    |        `- note: protocol requires function 'storeData(data:identifier:)' with type '(Data, String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n107 |     data: Data,\n108 |     identifier: String\n    :\n115 |    - Returns: The retrieved data or an error.\n116 |    */\n117 |   func retrieveData(\n    |        `- note: protocol requires function 'retrieveData(identifier:)' with type '(String) async -\u003e Result\u003cData, SecurityStorageError\u003e'\n118 |     identifier: String\n119 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e\n    :\n125 |    - Returns: Success or an error.\n126 |    */\n127 |   func deleteData(\n    |        `- note: protocol requires function 'deleteData(identifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n128 |     identifier: String\n129 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e\n    :\n137 |    - Returns: The identifier used for storage (which might be the custom one or a derived one), or an error.\n138 |    */\n139 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '(Data, String) async -\u003e Result\u003cString, SecurityStorageError\u003e'\n140 |     _ data: Data,\n141 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:47:31: error: cannot find type 'CryptoProviderProtocol' in scope\n  45 |   \n  46 |   /// Crypto provider for cryptographic operations\n  47 |   private let cryptoProvider: CryptoProviderProtocol\n     |                               `- error: cannot find type 'CryptoProviderProtocol' in scope\n  48 |   \n  49 |   /// The logger to use\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:64:21: error: cannot find type 'CryptoProviderProtocol' in scope\n  62 |     wrapped: CryptoServiceProtocol,\n  63 |     secureStorage: SecureStorageProtocol,\n  64 |     cryptoProvider: CryptoProviderProtocol,\n     |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n  65 |     logger: LoggingProtocol\n  66 |   ) {\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoStorage.swift:417:33: error: cannot find 'getSecureStorage' in scope\n415 |     // Currently we just attempt to retrieve the data and check if it exists\n416 |     // This could be optimized in a real implementation to avoid loading the data\n417 |     let secureStore = try await getSecureStorage()\n    |                                 `- error: cannot find 'getSecureStorage' in scope\n418 |     return secureStore.hasKey(identifier)\n419 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n264 |    - Returns: Result containing array of identifiers or error details\n265 |    */\n266 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n267 |     await logger.warning(\n268 |       \"List data identifiers operation not supported\",\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecureStorageProtocol.swift:14:8: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n12 |   ///   - identifier: A string identifier for the stored data.\n13 |   /// - Returns: Success or an error.\n14 |   func storeData(_ data: [UInt8], withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n15 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n16 | \n   :\n18 |   /// - Parameter identifier: A string identifying the data to retrieve.\n19 |   /// - Returns: The retrieved data as a byte array or an error.\n20 |   func retrieveData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n21 |     -\u003e Result\u003c[UInt8], SecurityStorageError\u003e\n22 | \n   :\n24 |   /// - Parameter identifier: A string identifying the data to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteData(withIdentifier identifier: String) async\n   |        `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n27 |     -\u003e Result\u003cVoid, SecurityStorageError\u003e\n28 | \n29 |   /// Lists all available data identifiers.\n30 |   /// - Returns: An array of data identifiers or an error.\n31 |   func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityStorageError\u003e\n   |        `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n32 | }\n33 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:158:63: error: type '_ErrorCodeProtocol' has no member 'notFound'\n156 |       )\n157 |       \n158 |       if let storageError = error as? StorageCoreError, case .notFound = storageError {\n    |                                                               `- error: type '_ErrorCodeProtocol' has no member 'notFound'\n159 |         return .failure(.dataNotFound)\n160 |       }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:162:61: error: cannot convert value of type 'SecurityCoreInterfaces.KeyType' to expected argument type 'CryptoServices.KeyType'\n160 |     var configOptions=SecurityConfigOptions()\n161 | \n162 |     let metadataDict=addMetadata(keySize: keySize, keyType: keyType)\n    |                                                             `- error: cannot convert value of type 'SecurityCoreInterfaces.KeyType' to expected argument type 'CryptoServices.KeyType'\n163 | \n164 |     if !metadataDict.isEmpty {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:196:13: error: type 'KeyType' has no member 'symmetric'\n194 |     let localKeyType: KeyType\n195 |     switch keyType {\n196 |       case .symmetric:\n    |             `- error: type 'KeyType' has no member 'symmetric'\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:198:13: error: type 'KeyType' has no member 'asymmetric'\n196 |       case .symmetric:\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n    |             `- error: type 'KeyType' has no member 'asymmetric'\n199 |         localKeyType = .asymmetric\n200 |       default:\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:197:25: error: type 'KeyType' has no member 'symmetric'\n195 |     switch keyType {\n196 |       case .symmetric:\n197 |         localKeyType = .symmetric\n    |                         `- error: type 'KeyType' has no member 'symmetric'\n198 |       case .asymmetric:\n199 |         localKeyType = .asymmetric\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:199:25: error: type 'KeyType' has no member 'asymmetric'\n197 |         localKeyType = .symmetric\n198 |       case .asymmetric:\n199 |         localKeyType = .asymmetric\n    |                         `- error: type 'KeyType' has no member 'asymmetric'\n200 |       default:\n201 |         localKeyType = .symmetric // Default to symmetric as fallback\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:25: error: type 'KeyType' has no member 'symmetric'\n199 |         localKeyType = .asymmetric\n200 |       default:\n201 |         localKeyType = .symmetric // Default to symmetric as fallback\n    |                         `- error: type 'KeyType' has no member 'symmetric'\n202 |     }\n203 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/OptionTypes.swift:109:14: warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n107 | public struct SendableOptionsDictionary: Sendable {\n108 |   /// The underlying dictionary\n109 |   public let dictionary: [String: Any]\n    |              `- warning: stored property 'dictionary' of 'Sendable'-conforming struct 'SendableOptionsDictionary' has non-sendable type '[String : Any]'; this is an error in the Swift 6 language mode\n110 |   \n111 |   /**\nTarget //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation failed to build\nINFO: Elapsed time: 1.128s, Critical Path: 0.98s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement",
    "success": true,
    "start_time": "2025-04-06T11:27:31.788365+01:00",
    "end_time": "2025-04-06T11:27:32.510651+01:00",
    "duration": "722.288167ms",
    "output": "INFO: Invocation ID: 4d5c58cc-43db-4236-815e-b795d3abb02d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/SecurityKeyManagement.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/SecurityKeyManagement.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/SecurityKeyManagement.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/libSecurityKeyManagement.a\nINFO: Elapsed time: 0.150s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor",
    "success": true,
    "start_time": "2025-04-06T11:27:32.51066+01:00",
    "end_time": "2025-04-06T11:27:33.209672+01:00",
    "duration": "699.014792ms",
    "output": "INFO: Invocation ID: 8e4df0c9-06cf-41cb-ba8e-e9f6dbfcd984\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor (2 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/KeyManagementActor.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/KeyManagementActor.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/KeyManagementActor.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/libKeyManagementActor.a\nINFO: Elapsed time: 0.157s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes",
    "success": true,
    "start_time": "2025-04-06T11:27:33.209687+01:00",
    "end_time": "2025-04-06T11:27:33.896962+01:00",
    "duration": "687.2775ms",
    "output": "INFO: Invocation ID: a8b6a26e-163e-43ac-b32f-0b6a87d68f48\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/KeyManagementActorTypes.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/KeyManagementActorTypes.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/KeyManagementActorTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/libKeyManagementActorTypes.a\nINFO: Elapsed time: 0.148s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage",
    "success": true,
    "start_time": "2025-04-06T11:27:33.896983+01:00",
    "end_time": "2025-04-06T11:27:34.600895+01:00",
    "duration": "703.91575ms",
    "output": "INFO: Invocation ID: 24641d4c-8106-4660-a096-f261c07d23f0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/KeyStorage.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/KeyStorage.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/KeyStorage.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/libKeyStorage.a\nINFO: Elapsed time: 0.141s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes",
    "success": true,
    "start_time": "2025-04-06T11:27:34.600916+01:00",
    "end_time": "2025-04-06T11:27:35.282094+01:00",
    "duration": "681.18125ms",
    "output": "INFO: Invocation ID: 5c85e007-e49d-461d-a5b2-425c3e9015ed\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/SecurityKeyTypes.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/SecurityKeyTypes.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/SecurityKeyTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/libSecurityKeyTypes.a\nINFO: Elapsed time: 0.146s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders",
    "success": true,
    "start_time": "2025-04-06T11:27:35.282105+01:00",
    "end_time": "2025-04-06T11:27:35.96169+01:00",
    "duration": "679.587834ms",
    "output": "INFO: Invocation ID: 0f8a845e-990c-4f81-a30b-6d1be044254c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/SecurityProviders.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/SecurityProviders.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/SecurityProviders.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/libSecurityProviders.a\nINFO: Elapsed time: 0.143s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils",
    "success": true,
    "start_time": "2025-04-06T11:27:35.961702+01:00",
    "end_time": "2025-04-06T11:27:36.654664+01:00",
    "duration": "692.965208ms",
    "output": "INFO: Invocation ID: 00ef3dc2-7aac-4001-972c-e4b6cb52608a\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/libSecurityUtils.a\nINFO: Elapsed time: 0.146s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/XPCServices:XPCServices",
    "success": true,
    "start_time": "2025-04-06T11:27:36.654691+01:00",
    "end_time": "2025-04-06T11:27:37.376223+01:00",
    "duration": "721.534958ms",
    "output": "INFO: Invocation ID: 0e78562f-14f3-4b33-b522-0169c04dbe9b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/XPCServices:XPCServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/XPCServices:XPCServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/XPCServices:XPCServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/XPCServices:XPCServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/XPCServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/XPCServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/XPCServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/libXPCServices.a\nINFO: Elapsed time: 0.153s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:37.376235+01:00",
    "end_time": "2025-04-06T11:27:38.062221+01:00",
    "duration": "685.988458ms",
    "output": "INFO: Invocation ID: 06801bee-e771-44a9-a776-e0a3f123b2cb\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/APIInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/APIInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/APIInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/libAPIInterfaces.a\nINFO: Elapsed time: 0.146s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:38.062243+01:00",
    "end_time": "2025-04-06T11:27:38.775377+01:00",
    "duration": "713.137208ms",
    "output": "INFO: Invocation ID: 2d5e4c53-d749-4820-b496-311d8efe245d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/BackupInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/BackupInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/BackupInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/libBackupInterfaces.a\nINFO: Elapsed time: 0.147s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:38.775388+01:00",
    "end_time": "2025-04-06T11:27:39.463418+01:00",
    "duration": "688.032125ms",
    "output": "INFO: Invocation ID: 6bf5e0e2-76d2-4fcd-9203-1093c733f3dd\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/CoreInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/CoreInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/CoreInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/libCoreInterfaces.a\nINFO: Elapsed time: 0.100s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:39.463447+01:00",
    "end_time": "2025-04-06T11:27:40.196648+01:00",
    "duration": "733.20375ms",
    "output": "INFO: Invocation ID: f3df7edb-5415-4a23-8271-a7a0a0bcebd0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/CryptoInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/CryptoInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/CryptoInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/libCryptoInterfaces.a\nINFO: Elapsed time: 0.138s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:40.196666+01:00",
    "end_time": "2025-04-06T11:27:40.908847+01:00",
    "duration": "712.184417ms",
    "output": "INFO: Invocation ID: b3981186-97b8-4ef5-87f6-bf129d886cb7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/DateTimeInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/DateTimeInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/DateTimeInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/libDateTimeInterfaces.a\nINFO: Elapsed time: 0.154s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:40.908881+01:00",
    "end_time": "2025-04-06T11:27:41.608913+01:00",
    "duration": "700.035292ms",
    "output": "INFO: Invocation ID: 875408b5-27c1-4869-b1fa-0eef6725f780\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/ErrorHandlingInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/ErrorHandlingInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/ErrorHandlingInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/libErrorHandlingInterfaces.a\nINFO: Elapsed time: 0.138s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:41.608931+01:00",
    "end_time": "2025-04-06T11:27:42.324334+01:00",
    "duration": "715.406417ms",
    "output": "INFO: Invocation ID: 0f6bacd4-1573-4cc3-8cce-b857989d7b80\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/ErrorLoggingInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/ErrorLoggingInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/ErrorLoggingInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/libErrorLoggingInterfaces.a\nINFO: Elapsed time: 0.140s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:42.324345+01:00",
    "end_time": "2025-04-06T11:27:43.010148+01:00",
    "duration": "685.805708ms",
    "output": "INFO: Invocation ID: 4363fb77-eba9-490a-b0d9-bb14e27ce661\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/libFileSystemInterfaces.a\nINFO: Elapsed time: 0.137s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:43.010155+01:00",
    "end_time": "2025-04-06T11:27:43.709211+01:00",
    "duration": "699.059333ms",
    "output": "INFO: Invocation ID: f4c767cc-9fe4-4cba-a4af-0352b5272e2c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/KeychainInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/KeychainInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/KeychainInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/libKeychainInterfaces.a\nINFO: Elapsed time: 0.145s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:43.709223+01:00",
    "end_time": "2025-04-06T11:27:44.406174+01:00",
    "duration": "696.953959ms",
    "output": "INFO: Invocation ID: 27c568bd-c938-477d-8fcb-2ab397c0e251\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/libLoggingInterfaces.a\nINFO: Elapsed time: 0.138s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:44.406191+01:00",
    "end_time": "2025-04-06T11:27:45.121448+01:00",
    "duration": "715.260125ms",
    "output": "INFO: Invocation ID: 6eb2b263-5f0b-4698-94e7-ce492d7166d4\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/LoggingWrapperInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/LoggingWrapperInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/LoggingWrapperInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/libLoggingWrapperInterfaces.a\nINFO: Elapsed time: 0.141s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:45.121459+01:00",
    "end_time": "2025-04-06T11:27:45.828046+01:00",
    "duration": "706.590083ms",
    "output": "INFO: Invocation ID: fc3b72b5-4d70-477d-85f4-7764476679b2\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/NetworkInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/NetworkInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/NetworkInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/libNetworkInterfaces.a\nINFO: Elapsed time: 0.140s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:45.828057+01:00",
    "end_time": "2025-04-06T11:27:46.512747+01:00",
    "duration": "684.692792ms",
    "output": "INFO: Invocation ID: aec0124b-2aa4-4790-8275-acc10198f886\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/RepositoryInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/RepositoryInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/RepositoryInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/libRepositoryInterfaces.a\nINFO: Elapsed time: 0.146s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:46.512778+01:00",
    "end_time": "2025-04-06T11:27:47.219847+01:00",
    "duration": "707.0725ms",
    "output": "INFO: Invocation ID: 6591c72d-07c5-4133-84bd-2c67dc87a438\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/libResticInterfaces.a\nINFO: Elapsed time: 0.141s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:47.219856+01:00",
    "end_time": "2025-04-06T11:27:47.947838+01:00",
    "duration": "727.985417ms",
    "output": "INFO: Invocation ID: 65fa83ee-6e91-4ca3-abb8-cb2faff53cad\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityCoreInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityCoreInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityCoreInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/libSecurityCoreInterfaces.a\nINFO: Elapsed time: 0.147s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces",
    "success": true,
    "start_time": "2025-04-06T11:27:47.94785+01:00",
    "end_time": "2025-04-06T11:27:48.648603+01:00",
    "duration": "700.756ms",
    "output": "INFO: Invocation ID: 1146aa30-4848-49b9-b0ae-318485a0a652\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/SecurityInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/SecurityInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/SecurityInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/libSecurityInterfaces.a\nINFO: Elapsed time: 0.136s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore",
    "success": true,
    "start_time": "2025-04-06T11:27:48.648615+01:00",
    "end_time": "2025-04-06T11:27:49.369288+01:00",
    "duration": "720.675958ms",
    "output": "INFO: Invocation ID: e8b7c5ac-833f-429b-8efc-5de254c152d5\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/XPCProtocolsCore.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/XPCProtocolsCore.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/XPCProtocolsCore.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/libXPCProtocolsCore.a\nINFO: Elapsed time: 0.145s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraServices/Sources/LoggingServices:LoggingServices",
    "success": true,
    "start_time": "2025-04-06T11:27:49.369318+01:00",
    "end_time": "2025-04-06T11:27:50.08427+01:00",
    "duration": "714.954625ms",
    "output": "INFO: Invocation ID: 42fda975-883e-4a89-a2e8-dedc572f7acd\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraServices/Sources/LoggingServices:LoggingServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraServices/Sources/LoggingServices:LoggingServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraServices/Sources/LoggingServices:LoggingServices (1 packages loaded, 6 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraServices/Sources/LoggingServices:LoggingServices up-to-date:\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/LoggingServices.swiftdoc\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/LoggingServices.swiftmodule\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/LoggingServices.swiftsourceinfo\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/libLoggingServices.a\nINFO: Elapsed time: 0.154s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  }
]