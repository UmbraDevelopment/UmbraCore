[
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:53:48.856493+01:00",
    "end_time": "2025-04-09T00:53:51.216711+01:00",
    "duration": "2.360206875s",
    "output": "INFO: Invocation ID: 41f8dd41-087a-456b-ae6c-08566726ddbd\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (4 packages loaded, 7 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (4 packages loaded, 7 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (106 packages loaded, 2812 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/APIInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/APIInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/APIInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/libAPIInterfaces.a\nINFO: Elapsed time: 1.382s, Critical Path: 0.01s\nINFO: 1 process: 63 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:53:51.216731+01:00",
    "end_time": "2025-04-09T00:53:52.537714+01:00",
    "duration": "1.320976208s",
    "output": "INFO: Invocation ID: d0160a0a-4222-4393-9df5-17e160c05918\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces (1 packages loaded, 6 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/ConfigInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/ConfigInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/ConfigInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/libConfigInterfaces.a\nINFO: Elapsed time: 0.098s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs",
    "success": true,
    "start_time": "2025-04-09T00:53:52.537726+01:00",
    "end_time": "2025-04-09T00:53:53.389434+01:00",
    "duration": "851.704708ms",
    "output": "INFO: Invocation ID: 247f00e1-5cb2-47d1-8a05-47f9519089b8\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/libCoreDTOs.a\nINFO: Elapsed time: 0.095s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests",
    "success": true,
    "start_time": "2025-04-09T00:53:53.389446+01:00",
    "end_time": "2025-04-09T00:53:54.482339+01:00",
    "duration": "1.092888708s",
    "output": "INFO: Invocation ID: 9e8c342c-fcb7-40d8-98d6-0a726767e136\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests (0 packages loaded, 1 target configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOsTests.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOsTests.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOsTests.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/libCoreDTOsTests.a\nINFO: Elapsed time: 0.092s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:53:54.482344+01:00",
    "end_time": "2025-04-09T00:53:55.613814+01:00",
    "duration": "1.131465s",
    "output": "INFO: Invocation ID: e1df7c5a-e653-4d00-addf-4139851ac8f6\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces (1 packages loaded, 8 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/CoreInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/CoreInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/CoreInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/libCoreInterfaces.a\nINFO: Elapsed time: 0.096s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes",
    "success": true,
    "start_time": "2025-04-09T00:53:55.613826+01:00",
    "end_time": "2025-04-09T00:53:56.654902+01:00",
    "duration": "1.041071375s",
    "output": "INFO: Invocation ID: da6ad906-a111-41a3-9f02-a967d4b7b767\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/libCoreSecurityTypes.a\nINFO: Elapsed time: 0.082s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:53:56.654908+01:00",
    "end_time": "2025-04-09T00:53:57.479339+01:00",
    "duration": "824.426833ms",
    "output": "INFO: Invocation ID: 4eee4f0f-1c87-473e-a8a2-404412241204\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces (2 packages loaded, 16 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/CryptoInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/CryptoInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/CryptoInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/libCryptoInterfaces.a\nINFO: Elapsed time: 0.097s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes",
    "success": true,
    "start_time": "2025-04-09T00:53:57.47935+01:00",
    "end_time": "2025-04-09T00:53:58.254627+01:00",
    "duration": "775.273542ms",
    "output": "INFO: Invocation ID: 49644b18-2847-41e3-9e01-f884f2c6f716\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/CryptoTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/CryptoTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/CryptoTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/libCryptoTypes.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes",
    "success": true,
    "start_time": "2025-04-09T00:53:58.254629+01:00",
    "end_time": "2025-04-09T00:53:58.990208+01:00",
    "duration": "735.575917ms",
    "output": "INFO: Invocation ID: 9cdc6d05-40eb-472b-a2d0-24e616e0dd4e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/DateTimeTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/DateTimeTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/DateTimeTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/libDateTimeTypes.a\nINFO: Elapsed time: 0.087s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes",
    "success": true,
    "start_time": "2025-04-09T00:53:58.990214+01:00",
    "end_time": "2025-04-09T00:54:00.30799+01:00",
    "duration": "1.317769458s",
    "output": "INFO: Invocation ID: 83d92eb8-782b-45a7-8462-52679dbe87af\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/DomainSecurityTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/DomainSecurityTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/DomainSecurityTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/libDomainSecurityTypes.a\nINFO: Elapsed time: 0.082s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes",
    "success": true,
    "start_time": "2025-04-09T00:54:00.308024+01:00",
    "end_time": "2025-04-09T00:54:01.087765+01:00",
    "duration": "779.737417ms",
    "output": "INFO: Invocation ID: 3de99672-a697-4701-a748-9f57fbdb7a02\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/ErrorCoreTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/ErrorCoreTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/ErrorCoreTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/libErrorCoreTypes.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes",
    "success": true,
    "start_time": "2025-04-09T00:54:01.087771+01:00",
    "end_time": "2025-04-09T00:54:01.909573+01:00",
    "duration": "821.798458ms",
    "output": "INFO: Invocation ID: 3de1489a-11e4-4b66-b8b4-70e61f770ade\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/FileSystemTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/FileSystemTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/FileSystemTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/libFileSystemTypes.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes",
    "success": true,
    "start_time": "2025-04-09T00:54:01.909577+01:00",
    "end_time": "2025-04-09T00:54:02.773226+01:00",
    "duration": "863.644583ms",
    "output": "INFO: Invocation ID: 5d9e3e2c-0c03-45d2-aab8-614de9063ea9\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes (3 packages loaded, 24 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/libKeyManagementTypes.a\nINFO: Elapsed time: 0.091s, Critical Path: 0.00s\nINFO: 1 process: 7 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests",
    "success": true,
    "start_time": "2025-04-09T00:54:02.773232+01:00",
    "end_time": "2025-04-09T00:54:03.606992+01:00",
    "duration": "833.755708ms",
    "output": "INFO: Invocation ID: 1aacac55-6de8-407c-bb84-e6d44b97fd23\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests (0 packages loaded, 1 target configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypesTests.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypesTests.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypesTests.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/libKeyManagementTypesTests.a\nINFO: Elapsed time: 0.089s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes",
    "success": true,
    "start_time": "2025-04-09T00:54:03.606998+01:00",
    "end_time": "2025-04-09T00:54:04.512796+01:00",
    "duration": "905.793417ms",
    "output": "INFO: Invocation ID: 6f8ac81c-5233-4d8f-b807-08d97d0a8253\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes (2 packages loaded, 9 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/KeychainTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/KeychainTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/KeychainTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/libKeychainTypes.a\nINFO: Elapsed time: 0.087s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes",
    "success": true,
    "start_time": "2025-04-09T00:54:04.512808+01:00",
    "end_time": "2025-04-09T00:54:05.825705+01:00",
    "duration": "1.312890916s",
    "output": "INFO: Invocation ID: ad7876db-baed-4a4a-a462-c97cbbbff78e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/libLoggingTypes.a\nINFO: Elapsed time: 0.085s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/Notification:Notification",
    "success": true,
    "start_time": "2025-04-09T00:54:05.825712+01:00",
    "end_time": "2025-04-09T00:54:07.047932+01:00",
    "duration": "1.222214708s",
    "output": "INFO: Invocation ID: 9496839d-7a19-48c5-aa5f-a753f263ebe9\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Notification:Notification (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Notification:Notification (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/Notification:Notification (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/Notification:Notification up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/Notification.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/Notification.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/Notification.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/libNotification.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling",
    "success": true,
    "start_time": "2025-04-09T00:54:07.047938+01:00",
    "end_time": "2025-04-09T00:54:07.964199+01:00",
    "duration": "916.2575ms",
    "output": "INFO: Invocation ID: a5fee121-a0a2-4029-8494-a27aac39fa9d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/Scheduling.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/Scheduling.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/Scheduling.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/libScheduling.a\nINFO: Elapsed time: 0.082s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:54:07.964204+01:00",
    "end_time": "2025-04-09T00:54:08.747878+01:00",
    "duration": "783.670209ms",
    "output": "INFO: Invocation ID: c48cc309-67f8-495d-94a5-ce3aac553ae4\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/SecurityInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/SecurityInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/SecurityInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/libSecurityInterfaces.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters",
    "success": true,
    "start_time": "2025-04-09T00:54:08.747901+01:00",
    "end_time": "2025-04-09T00:54:09.548409+01:00",
    "duration": "800.504458ms",
    "output": "INFO: Invocation ID: 25ea91b1-5206-4fe7-a4f6-554c872ddcec\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters (3 packages loaded, 17 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/SecurityInterfacesAdapters.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/SecurityInterfacesAdapters.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/SecurityInterfacesAdapters.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/libSecurityInterfacesAdapters.a\nINFO: Elapsed time: 0.095s, Critical Path: 0.00s\nINFO: 1 process: 7 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs",
    "success": true,
    "start_time": "2025-04-09T00:54:09.548426+01:00",
    "end_time": "2025-04-09T00:54:10.347697+01:00",
    "duration": "799.267083ms",
    "output": "INFO: Invocation ID: 1b2660d9-e407-4852-88b9-4dba8689ce78\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/SecurityInterfacesDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/SecurityInterfacesDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/SecurityInterfacesDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/libSecurityInterfacesDTOs.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels",
    "success": true,
    "start_time": "2025-04-09T00:54:10.347701+01:00",
    "end_time": "2025-04-09T00:54:11.211229+01:00",
    "duration": "863.523875ms",
    "output": "INFO: Invocation ID: 500a82ef-9d4c-4acc-ac92-c18902b67afb\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/SecurityInterfacesModels.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/SecurityInterfacesModels.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/SecurityInterfacesModels.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/libSecurityInterfacesModels.a\nINFO: Elapsed time: 0.075s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols",
    "success": true,
    "start_time": "2025-04-09T00:54:11.211234+01:00",
    "end_time": "2025-04-09T00:54:12.006714+01:00",
    "duration": "795.476875ms",
    "output": "INFO: Invocation ID: facbec37-febf-4e38-9e30-c4b8edc79fab\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/libSecurityInterfacesProtocols.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes",
    "success": true,
    "start_time": "2025-04-09T00:54:12.006719+01:00",
    "end_time": "2025-04-09T00:54:13.306759+01:00",
    "duration": "1.300034083s",
    "output": "INFO: Invocation ID: c09a32ca-d637-402b-a7fb-d6f659c35778\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/SecurityInterfacesTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/SecurityInterfacesTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/SecurityInterfacesTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/libSecurityInterfacesTypes.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC",
    "success": true,
    "start_time": "2025-04-09T00:54:13.306763+01:00",
    "end_time": "2025-04-09T00:54:14.197395+01:00",
    "duration": "890.628ms",
    "output": "INFO: Invocation ID: 92f2f194-55c9-4b39-9d31-726e36e97cab\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/SecurityInterfacesXPC.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/SecurityInterfacesXPC.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/SecurityInterfacesXPC.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/libSecurityInterfacesXPC.a\nINFO: Elapsed time: 0.089s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes",
    "success": true,
    "start_time": "2025-04-09T00:54:14.197399+01:00",
    "end_time": "2025-04-09T00:54:14.980668+01:00",
    "duration": "783.265666ms",
    "output": "INFO: Invocation ID: e3e36183-fd2f-49f7-b512-d50ff00d8840\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes (1 packages loaded, 3 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/SecurityKeyTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/SecurityKeyTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/SecurityKeyTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/libSecurityKeyTypes.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors",
    "success": true,
    "start_time": "2025-04-09T00:54:14.980673+01:00",
    "end_time": "2025-04-09T00:54:16.006298+01:00",
    "duration": "1.02562025s",
    "output": "INFO: Invocation ID: b82d1689-46cc-4597-b182-c0569d7af6a2\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/UmbraErrors.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/UmbraErrors.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/UmbraErrors.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/libUmbraErrors.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore",
    "success": true,
    "start_time": "2025-04-09T00:54:16.006303+01:00",
    "end_time": "2025-04-09T00:54:17.286868+01:00",
    "duration": "1.280558917s",
    "output": "INFO: Invocation ID: c4590f00-1598-414c-85b7-e16025dd0bfa\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/UmbraErrorsCore.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/UmbraErrorsCore.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/UmbraErrorsCore.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/libUmbraErrorsCore.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs",
    "success": true,
    "start_time": "2025-04-09T00:54:17.286889+01:00",
    "end_time": "2025-04-09T00:54:18.332698+01:00",
    "duration": "1.045804292s",
    "output": "INFO: Invocation ID: 541cce0f-b4cc-444f-9f45-406813103fa3\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/UmbraErrorsDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/UmbraErrorsDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/UmbraErrorsDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/libUmbraErrorsDTOs.a\nINFO: Elapsed time: 0.076s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains",
    "success": true,
    "start_time": "2025-04-09T00:54:18.332701+01:00",
    "end_time": "2025-04-09T00:54:19.11072+01:00",
    "duration": "778.014667ms",
    "output": "INFO: Invocation ID: b2b7b9b2-5cb5-4061-a9e5-b5c4e8fe8f5c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/UmbraErrorsDomains.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/UmbraErrorsDomains.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/UmbraErrorsDomains.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/libUmbraErrorsDomains.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping",
    "success": true,
    "start_time": "2025-04-09T00:54:19.110724+01:00",
    "end_time": "2025-04-09T00:54:20.377799+01:00",
    "duration": "1.267069792s",
    "output": "INFO: Invocation ID: 7a341fe7-3435-4a65-b4b2-000164a698cb\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/UmbraErrorsMapping.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/UmbraErrorsMapping.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/UmbraErrorsMapping.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/libUmbraErrorsMapping.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults",
    "success": true,
    "start_time": "2025-04-09T00:54:20.377823+01:00",
    "end_time": "2025-04-09T00:54:21.505434+01:00",
    "duration": "1.127606083s",
    "output": "INFO: Invocation ID: c65599f1-1728-4ae9-8e1f-d9015959c3d9\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/UserDefaults.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/UserDefaults.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/UserDefaults.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/libUserDefaults.a\nINFO: Elapsed time: 0.075s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters",
    "success": true,
    "start_time": "2025-04-09T00:54:21.505438+01:00",
    "end_time": "2025-04-09T00:54:22.261358+01:00",
    "duration": "755.916708ms",
    "output": "INFO: Invocation ID: 6cb90c63-02ee-4a29-802f-b19a3ba96781\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/UserDefaultsAdapters.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/UserDefaultsAdapters.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/UserDefaultsAdapters.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/libUserDefaultsAdapters.a\nINFO: Elapsed time: 0.074s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs",
    "success": true,
    "start_time": "2025-04-09T00:54:22.261364+01:00",
    "end_time": "2025-04-09T00:54:23.134027+01:00",
    "duration": "872.659ms",
    "output": "INFO: Invocation ID: 78494881-b777-4ab6-a8a2-0f9d17dc5069\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/UserDefaultsDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/UserDefaultsDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/UserDefaultsDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/libUserDefaultsDTOs.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/APIServices:APIServices",
    "success": false,
    "start_time": "2025-04-09T00:54:23.134033+01:00",
    "end_time": "2025-04-09T00:54:27.975466+01:00",
    "duration": "4.841411458s",
    "output": "INFO: Invocation ID: f866289d-7562-4ddf-8861-b5c24da8d50c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/APIServices:APIServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/APIServices:APIServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/APIServices:APIServices (28 packages loaded, 243 targets configured).\n[55 / 58] Compiling Swift module //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation; 1s disk-cache, worker\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/SecurityImplementation/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:10: error: static methods may only be declared on a type\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:10: error: static methods may only be declared on a type\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:10: error: static methods may only be declared on a type\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:163:1: error: extraneous '}' at top level\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n163 | }\n    | `- error: extraneous '}' at top level\n164 | \n165 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:10: error: static methods may only be declared on a type\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:10: error: static methods may only be declared on a type\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:10: error: static methods may only be declared on a type\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:72:1: error: extraneous '}' at top level\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n72 | }\n   | `- error: extraneous '}' at top level\n73 | \n74 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:10: error: static methods may only be declared on a type\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:10: error: static methods may only be declared on a type\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:10: error: static methods may only be declared on a type\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1155:1: error: extraneous '}' at top level\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n1155 | }\n     | `- error: extraneous '}' at top level\n1156 | \n1157 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:10: error: static methods may only be declared on a type\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:10: error: static methods may only be declared on a type\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:10: error: static methods may only be declared on a type\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:616:1: error: extraneous '}' at top level\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n616 | }\n    | `- error: extraneous '}' at top level\n617 | \n618 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:25: error: cannot find ')' to match opening '(' in string interpolation\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:23: error: unterminated string literal\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:25: error: cannot find ')' to match opening '(' in string interpolation\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:23: error: unterminated string literal\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:166:18: error: unterminated string literal\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n166 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n167 | \n168 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:247:18: error: unterminated string literal\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n247 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n248 | \n249 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:10: error: static methods may only be declared on a type\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:10: error: static methods may only be declared on a type\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:10: error: static methods may only be declared on a type\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:275:1: error: extraneous '}' at top level\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n275 | }\n    | `- error: extraneous '}' at top level\n276 | \n277 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:10: error: static methods may only be declared on a type\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:10: error: static methods may only be declared on a type\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:10: error: static methods may only be declared on a type\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:477:1: error: extraneous '}' at top level\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n477 | }\n    | `- error: extraneous '}' at top level\n478 | \n479 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:10: error: static methods may only be declared on a type\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:10: error: static methods may only be declared on a type\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:10: error: static methods may only be declared on a type\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:101:1: error: extraneous '}' at top level\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n101 | }\n    | `- error: extraneous '}' at top level\n102 | \n103 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:179:20: error: unterminated string literal\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n179 |         , source: \\\"SecurityImplementation\\\")\n    |                    `- error: unterminated string literal\n180 | \n181 |         // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:200:18: error: unterminated string literal\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n200 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n201 | \n202 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:343:18: error: unterminated string literal\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n343 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n344 | \n345 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:10: error: static methods may only be declared on a type\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:10: error: static methods may only be declared on a type\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:10: error: static methods may only be declared on a type\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:428:1: error: extraneous '}' at top level\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n428 | }\n    | `- error: extraneous '}' at top level\n429 | \n430 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:10: error: static methods may only be declared on a type\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:10: error: static methods may only be declared on a type\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:10: error: static methods may only be declared on a type\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:438:1: error: extraneous '}' at top level\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n438 | }\n    | `- error: extraneous '}' at top level\n439 | \n440 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:10: error: static methods may only be declared on a type\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:10: error: static methods may only be declared on a type\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:10: error: static methods may only be declared on a type\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:182:1: error: extraneous '}' at top level\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n182 | }\n    | `- error: extraneous '}' at top level\n183 | \n184 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:10: error: static methods may only be declared on a type\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:10: error: static methods may only be declared on a type\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:10: error: static methods may only be declared on a type\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:102:1: error: extraneous '}' at top level\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n102 | }\n    | `- error: extraneous '}' at top level\n103 | \n104 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:10: error: static methods may only be declared on a type\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:10: error: static methods may only be declared on a type\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:10: error: static methods may only be declared on a type\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:276:1: error: extraneous '}' at top level\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n276 | }\n    | `- error: extraneous '}' at top level\n277 | \n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:82:10: error: static methods may only be declared on a type\n80 | \n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n84 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:86:10: error: static methods may only be declared on a type\n84 |   }\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n88 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:90:10: error: static methods may only be declared on a type\n88 |   }\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:93:1: error: extraneous '}' at top level\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n93 | }\n   | `- error: extraneous '}' at top level\n94 | \n95 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:15: error: invalid redeclaration of 'notImplemented(reason:)'\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:15: error: invalid redeclaration of 'notImplemented(reason:)'\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: expected ',' separator\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: expected ',' separator\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: unnamed parameters must be written with the empty name '_'\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: unnamed parameters must be written with the empty name '_'\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:15: error: cannot find type 'createPrivacyMetadata' in scope\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |               `- error: cannot find type 'createPrivacyMetadata' in scope\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:15: error: invalid redeclaration of 'notImplemented(reason:)'\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:62:27: error: cannot find type 'KeyStorageManager' in scope\n 60 |   init(\n 61 |     cryptoService: CryptoServiceProtocol,\n 62 |     keyManagementService: KeyStorageManager,\n    |                           `- error: cannot find type 'KeyStorageManager' in scope\n 63 |     logger: PrivacyAwareLoggingProtocol\n 64 |   ) {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:137:38: error: extra arguments at positions #1, #2 in call\n 135 |     )\n 136 | \n 137 |     signatureService=SignatureService(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:78:3: note: 'init(logger:)' declared here\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: 'init(logger:)' declared here\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:140:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n 140 |       logger: logger\n     |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 141 |     )\n 142 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:50: error: expected ',' separator\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                                                  `- error: expected ',' separator\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:15: error: invalid redeclaration of 'notImplemented(reason:)'\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:15: error: invalid redeclaration of 'notImplemented(reason:)'\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:29: error: cannot find type 'createPrivacyMetadata' in scope\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                             `- error: cannot find type 'createPrivacyMetadata' in scope\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:15: error: invalid redeclaration of 'notImplemented(reason:)'\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:43:37: error: cannot find type 'KeyStorageManager' in scope\n 41 |    The key manager used for key storage and retrieval\n 42 |    */\n 43 |   private let keyManagementService: KeyStorageManager\n    |                                     `- error: cannot find type 'KeyStorageManager' in scope\n 44 | \n 45 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:32:13: error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n 30 |  - Handle signature-specific errors\n 31 |  */\n 32 | final class SignatureService: SecurityServiceBase {\n    |             |- error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n    |             `- note: add stubs for conformance\n 33 |   // MARK: - Properties\n 34 | \n    :\n 46 |    The logger instance for recording operation details\n 47 |    */\n 48 |   let logger: PrivacyAwareLoggingProtocol\n    |       `- note: candidate has non-matching type 'any PrivacyAwareLoggingProtocol'\n 49 | \n 50 |   // MARK: - Initialisation\n    :\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: candidate has non-matching type '(logger: any PrivacyAwareLoggingProtocol)'\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:42:3: note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 32 |    The logger instance for recording operation details\n 33 |    */\n 34 |   var logger: LoggingInterfaces.LoggingProtocol { get }\n    |       `- note: protocol requires property 'logger' with type 'any LoggingProtocol'\n 35 | \n 36 |   /**\n    :\n 40 |        - logger: The logging service to use for operation logging\n 41 |    */\n 42 |   init(logger: LoggingInterfaces.LoggingProtocol)\n    |   `- note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 43 | \n 44 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:15: error: invalid redeclaration of 'notImplemented(reason:)'\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:16:22: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n14 |   /// - Parameter reason: The reason for the error\n15 |   /// - Returns: A CoreSecurityError with the appropriate error code\n16 |   public static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n17 |     return .invalidInput(\"Invalid verification method: \\(reason)\")\n18 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:23:22: error: invalid redeclaration of 'verificationFailed(reason:)'\n21 |   /// - Parameter reason: The reason for the error\n22 |   /// - Returns: A CoreSecurityError with the appropriate error code\n23 |   public static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'verificationFailed(reason:)'\n24 |     return .authenticationFailed(\"Verification failed: \\(reason)\")\n25 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:30:22: error: invalid redeclaration of 'notImplemented(reason:)'\n28 |   /// - Parameter reason: The reason for the error\n29 |   /// - Returns: A CoreSecurityError with the appropriate error code\n30 |   public static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'notImplemented(reason:)'\n31 |     return .unsupportedOperation(\"Not implemented: \\(reason)\")\n32 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Logging.swift:38:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 36 |  according to the Alpha Dot Five architecture principles.\n 37 |  */\n 38 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 39 |   /**\n 40 |    Logs the start of a security operation with privacy-aware metadata.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  * Batch encryption and decryption for collections of data\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Encrypts data and then stores it securely.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:15: error: invalid redeclaration of 'notImplemented(reason:)'\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  - Common validation logic is centralised\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Validates configuration for encryption operations.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:15: error: invalid redeclaration of 'notImplemented(reason:)'\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               `- warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:30:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 28 |   /// - Returns: The generated random integer\n 29 |   /// - Throws: SecurityError if random generation fails\n 30 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 31 | \n 32 |   /// Generates a cryptographically secure random integer within the specified closed range\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               `- warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:36:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 34 |   /// - Returns: The generated random integer\n 35 |   /// - Throws: SecurityError if random generation fails\n 36 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 37 | \n 38 |   /// Generates a cryptographically secure random double between 0.0 and 1.0\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:15: error: invalid redeclaration of 'notImplemented(reason:)'\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:110:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n108 | \n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n111 |     return .invalidVerificationMethod(reason: reason)\n112 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:114:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n112 |   }\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n115 |     return .verificationFailed(reason: reason)\n116 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:118:15: error: invalid redeclaration of 'notImplemented(reason:)'\n116 |   }\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n119 |     return .notImplemented(reason: reason)\n120 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              `- error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 31 |   // MARK: - Private Properties\n 32 | \n    :\n349 |    - Returns: Result of the operation\n350 |    */\n351 |   public func performSecureOperation(\n    |               `- note: candidate has non-matching type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n352 |     operation: SecurityOperation,\n353 |     config: SecurityConfigDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              |- error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n    |              `- note: add stubs for conformance\n 31 |   // MARK: - Private Properties\n 32 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:109:8: note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:69:50: error: extra arguments at positions #1, #3, #4, #5 in call\n 67 |     self.logger = logger\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n    |                                                  `- error: extra arguments at positions #1, #3, #4, #5 in call\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/DTOs/SecurityDTOs.swift:23:10: note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 21 |   ///   - loggingLevel: The logging level for security operations\n 22 |   ///   - randomizationOptions: Options for secure random number generation\n 23 |   public init(\n    |          `- note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 24 |     securityLevel: CoreSecurityTypes.SecurityLevelDTO = .standard,\n 25 |     loggingLevel: CoreSecurityTypes.SecurityLogLevelDTO = .warning,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:70:22: error: cannot infer contextual base in reference to member 'standard'\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n 70 |       providerType: .standard,\n    |                      `- error: cannot infer contextual base in reference to member 'standard'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:72:29: error: cannot infer contextual base in reference to member 'aes256'\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n    |                             `- error: cannot infer contextual base in reference to member 'aes256'\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:73:23: error: cannot infer contextual base in reference to member 'sha256'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n    |                       `- error: cannot infer contextual base in reference to member 'sha256'\n 74 |       options: nil\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:74:16: error: 'nil' requires a contextual type\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n    |                `- error: 'nil' requires a contextual type\n 75 |     )\n 76 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:83:41: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 81 |         metadata: createPrivacyMetadata([\n 82 |           \"serviceId\": serviceId.uuidString,\n 83 |           \"providerType\": configuration.providerType.rawValue,\n    |                                         `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 84 |           \"securityLevel\": configuration.securityLevel.rawValue\n 85 |         ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: error: invalid redeclaration of 'notImplemented(reason:)'\n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n305 |     return .notImplemented(reason: reason)\n306 |   }\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:10: error: static methods may only be declared on a type\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:10: error: static methods may only be declared on a type\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:10: error: static methods may only be declared on a type\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:163:1: error: extraneous '}' at top level\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n163 | }\n    | `- error: extraneous '}' at top level\n164 | \n165 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:10: error: static methods may only be declared on a type\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:10: error: static methods may only be declared on a type\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:10: error: static methods may only be declared on a type\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:72:1: error: extraneous '}' at top level\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n72 | }\n   | `- error: extraneous '}' at top level\n73 | \n74 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: expected ',' separator\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: expected ',' separator\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: unnamed parameters must be written with the empty name '_'\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: unnamed parameters must be written with the empty name '_'\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:10: error: static methods may only be declared on a type\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:10: error: static methods may only be declared on a type\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:10: error: static methods may only be declared on a type\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1155:1: error: extraneous '}' at top level\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n1155 | }\n     | `- error: extraneous '}' at top level\n1156 | \n1157 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:10: error: static methods may only be declared on a type\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:10: error: static methods may only be declared on a type\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:10: error: static methods may only be declared on a type\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:616:1: error: extraneous '}' at top level\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n616 | }\n    | `- error: extraneous '}' at top level\n617 | \n618 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:25: error: cannot find ')' to match opening '(' in string interpolation\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:23: error: unterminated string literal\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:25: error: cannot find ')' to match opening '(' in string interpolation\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:23: error: unterminated string literal\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:166:18: error: unterminated string literal\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n166 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n167 | \n168 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:247:18: error: unterminated string literal\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n247 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n248 | \n249 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:10: error: static methods may only be declared on a type\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:10: error: static methods may only be declared on a type\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:10: error: static methods may only be declared on a type\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:275:1: error: extraneous '}' at top level\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n275 | }\n    | `- error: extraneous '}' at top level\n276 | \n277 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:260:65: error: expected ',' separator\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n    |                                                                 `- error: expected ',' separator\n261 |             ]\n262 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:260:65: error: expected key expression in dictionary literal\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n    |                                                                 `- error: expected key expression in dictionary literal\n261 |             ]\n262 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:264:9: error: expected ')' in expression list\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- note: to match this opening '('\n256 |             status: .success,\n257 |             data: decryptedData,\n    :\n262 |           )\n263 | \n264 |         case let .failure(error):\n    |         `- error: expected ')' in expression list\n265 |           throw SecureStorageError.decryptionError(\"Failed to decrypt data: \\(error)\")\n266 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:50: error: expected ',' separator\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                                                  `- error: expected ',' separator\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:10: error: static methods may only be declared on a type\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:10: error: static methods may only be declared on a type\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:10: error: static methods may only be declared on a type\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:477:1: error: extraneous '}' at top level\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n477 | }\n    | `- error: extraneous '}' at top level\n478 | \n479 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:10: error: static methods may only be declared on a type\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:10: error: static methods may only be declared on a type\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:10: error: static methods may only be declared on a type\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:101:1: error: extraneous '}' at top level\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n101 | }\n    | `- error: extraneous '}' at top level\n102 | \n103 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:179:20: error: unterminated string literal\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n179 |         , source: \\\"SecurityImplementation\\\")\n    |                    `- error: unterminated string literal\n180 | \n181 |         // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:200:18: error: unterminated string literal\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n200 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n201 | \n202 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:343:18: error: unterminated string literal\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n343 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n344 | \n345 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:10: error: static methods may only be declared on a type\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:10: error: static methods may only be declared on a type\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:10: error: static methods may only be declared on a type\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:428:1: error: extraneous '}' at top level\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n428 | }\n    | `- error: extraneous '}' at top level\n429 | \n430 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:70:96: error: expected ',' separator\n 68 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n 69 |         verifyOperations: config.options?.verifyOperations ?? true,\n 70 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected ',' separator\n 71 |           \"identifier\": config.options?.metadata?[\"storeIdentifier\"] ?? UUID().uuidString,\n 72 |           \"data\": encryptResult.resultData?.base64EncodedString() ?? \"\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:70:96: error: expected key expression in dictionary literal\n 68 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n 69 |         verifyOperations: config.options?.verifyOperations ?? true,\n 70 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected key expression in dictionary literal\n 71 |           \"identifier\": config.options?.metadata?[\"storeIdentifier\"] ?? UUID().uuidString,\n 72 |           \"data\": encryptResult.resultData?.base64EncodedString() ?? \"\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:77:5: error: expected ')' in expression list\n 57 | \n 58 |     // Now store the encrypted data\n 59 |     let storeConfig=SecurityConfigDTO(\n    |                                      `- note: to match this opening '('\n 60 |       encryptionAlgorithm: config.encryptionAlgorithm,\n 61 |       hashAlgorithm: config.hashAlgorithm,\n    :\n 75 |     )\n 76 | \n 77 |     let storeResult=try await performSecureOperation(\n    |     `- error: expected ')' in expression list\n 78 |       operation: .storeKey,\n 79 |       config: storeConfig\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:112:96: error: expected ',' separator\n110 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n111 |         verifyOperations: config.options?.verifyOperations ?? true,\n112 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected ',' separator\n113 |           \"identifier\": identifier\n114 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:112:96: error: expected key expression in dictionary literal\n110 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n111 |         verifyOperations: config.options?.verifyOperations ?? true,\n112 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected key expression in dictionary literal\n113 |           \"identifier\": identifier\n114 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:119:5: error: expected ')' in expression list\n 99 |   ) async throws -\u003e SecurityResultDTO {\n100 |     // First retrieve the encrypted data\n101 |     let retrieveConfig=SecurityConfigDTO(\n    |                                         `- note: to match this opening '('\n102 |       encryptionAlgorithm: config.encryptionAlgorithm,\n103 |       hashAlgorithm: config.hashAlgorithm,\n    :\n117 | \n118 |     // Retrieve the encrypted data\n119 |     let retrieveResult=try await performSecureOperation(\n    |     `- error: expected ')' in expression list\n120 |       operation: .retrieveKey,\n121 |       config: retrieveConfig\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:10: error: static methods may only be declared on a type\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:10: error: static methods may only be declared on a type\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:10: error: static methods may only be declared on a type\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:438:1: error: extraneous '}' at top level\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n438 | }\n    | `- error: extraneous '}' at top level\n439 | \n440 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:62:7: error: expected expression\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n 62 |       )\n    |       `- error: expected expression\n 63 |       actualLogger=developmentLogger\n 64 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:106:7: error: expected expression\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n106 |       )\n    |       `- error: expected expression\n107 |       actualLogger=developmentLogger\n108 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:151:7: error: expected expression\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n151 |       )\n    |       `- error: expected expression\n152 |       actualLogger=developmentLogger\n153 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:10: error: static methods may only be declared on a type\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:10: error: static methods may only be declared on a type\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:10: error: static methods may only be declared on a type\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:182:1: error: extraneous '}' at top level\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n182 | }\n    | `- error: extraneous '}' at top level\n183 | \n184 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:10: error: static methods may only be declared on a type\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:10: error: static methods may only be declared on a type\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:10: error: static methods may only be declared on a type\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:102:1: error: extraneous '}' at top level\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n102 | }\n    | `- error: extraneous '}' at top level\n103 | \n104 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:10: error: static methods may only be declared on a type\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:10: error: static methods may only be declared on a type\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:10: error: static methods may only be declared on a type\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:276:1: error: extraneous '}' at top level\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n276 | }\n    | `- error: extraneous '}' at top level\n277 | \n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:82:10: error: static methods may only be declared on a type\n80 | \n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n84 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:86:10: error: static methods may only be declared on a type\n84 |   }\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n88 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:90:10: error: static methods may only be declared on a type\n88 |   }\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:93:1: error: extraneous '}' at top level\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n93 | }\n   | `- error: extraneous '}' at top level\n94 | \n95 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:173:5: error: expected expression\n171 |         \"durationMs\": String(format: \"%.2f\", duration)\n172 |       ])\n173 |     )\n    |     `- error: expected expression\n174 |   }\n175 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityErrorHandler.swift:73:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 71 |     await logger.error(\n 72 |       \"Security operation failed: \\(securityError.message)\",\n 73 |       metadata: metadata,\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 74 |       source: source\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityErrorHandler.swift:100:8: error: initializer for conditional binding must have Optional type, not 'NSError'\n 98 |     \n 99 |     // If it's an NSError, map it to a SecurityError\n100 |     if let nsError = error as NSError {\n    |        `- error: initializer for conditional binding must have Optional type, not 'NSError'\n101 |       return mapSecurityFrameworkError(nsError)\n102 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:15: error: invalid redeclaration of 'notImplemented(reason:)'\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:153:13: error: type 'CoreSecurityError' has no member 'general'\n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n154 |   }\n155 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:157:13: error: type 'CoreSecurityError' has no member 'general'\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n158 |   }\n159 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:161:13: error: type 'CoreSecurityError' has no member 'general'\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n162 |   }\n163 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:15: error: invalid redeclaration of 'notImplemented(reason:)'\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:62:13: error: type 'CoreSecurityError' has no member 'general'\n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n63 |   }\n64 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:66:13: error: type 'CoreSecurityError' has no member 'general'\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n67 |   }\n68 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:70:13: error: type 'CoreSecurityError' has no member 'general'\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n71 |   }\n72 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:15: error: cannot find type 'createPrivacyMetadata' in scope\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |               `- error: cannot find type 'createPrivacyMetadata' in scope\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:15: error: invalid redeclaration of 'notImplemented(reason:)'\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:62:27: error: cannot find type 'KeyStorageManager' in scope\n 60 |   init(\n 61 |     cryptoService: CryptoServiceProtocol,\n 62 |     keyManagementService: KeyStorageManager,\n    |                           `- error: cannot find type 'KeyStorageManager' in scope\n 63 |     logger: PrivacyAwareLoggingProtocol\n 64 |   ) {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:137:38: error: extra arguments at positions #1, #2 in call\n 135 |     )\n 136 | \n 137 |     signatureService=SignatureService(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:78:3: note: 'init(logger:)' declared here\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: 'init(logger:)' declared here\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:140:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n 140 |       logger: logger\n     |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 141 |     )\n 142 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:159:63: error: missing argument for parameter 'context' in call\n 157 |    */\n 158 |   public func initialize() async throws {\n 159 |     await logger.info(\"Initializing security provider service\")\n     |                                                               `- error: missing argument for parameter 'context' in call\n 160 | \n 161 |     // Log with secure logger for enhanced privacy awareness\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:182:75: error: missing argument for parameter 'context' in call\n 180 |     }\n 181 | \n 182 |     await logger.info(\"Security provider service initialized successfully\")\n     |                                                                           `- error: missing argument for parameter 'context' in call\n 183 | \n 184 |     // Log successful initialisation with secure logger\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:235:33: error: missing arguments for parameters 'mode', 'padding' in call\n 233 |       dataIdentifier: dataIdentifier,\n 234 |       keyIdentifier: keyIdentifier,\n 235 |       options: EncryptionOptions(algorithm: .aes256CBC)\n     |                                 `- error: missing arguments for parameters 'mode', 'padding' in call\n 236 |     )\n 237 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:105:10: note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n103 |   public let additionalAuthenticatedData: [UInt8]? // For AEAD modes like GCM\n104 | \n105 |   public init(\n    |          `- note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n106 |     algorithm: EncryptionAlgorithm,\n107 |     mode: EncryptionMode,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:248:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 246 |           return encryptedData\n 247 |         } else {\n 248 |           throw SecurityProtocolError.inputError(\"Failed to retrieve encrypted data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 249 |         }\n 250 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:271:33: error: missing arguments for parameters 'mode', 'padding' in call\n 269 |       encryptedDataIdentifier: encryptedDataIdentifier,\n 270 |       keyIdentifier: keyIdentifier,\n 271 |       options: DecryptionOptions(algorithm: .aes256CBC)\n     |                                 `- error: missing arguments for parameters 'mode', 'padding' in call\n 272 |     )\n 273 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:105:10: note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n103 |   public let additionalAuthenticatedData: [UInt8]? // For AEAD modes like GCM\n104 | \n105 |   public init(\n    |          `- note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n106 |     algorithm: EncryptionAlgorithm,\n107 |     mode: EncryptionMode,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:284:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 282 |           return decryptedData\n 283 |         } else {\n 284 |           throw SecurityProtocolError.inputError(\"Failed to retrieve decrypted data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 285 |         }\n 286 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:314:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 312 |           return signatureData\n 313 |         } else {\n 314 |           throw SecurityProtocolError.inputError(\"Failed to retrieve signature data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 315 |         }\n 316 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:368:68: error: cannot find 'createPrivacyMetadata' in scope\n 366 |     // Check if a key identifier is provided to load from key manager\n 367 |     if let keyID=config.options?.metadata?[\"keyIdentifier\"] {\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n     |                                                                    `- error: cannot find 'createPrivacyMetadata' in scope\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:370:9: error: missing argument for parameter 'source' in call\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n     |         `- error: missing argument for parameter 'source' in call\n 371 | \n 372 |       let result=await keyManager.retrieveKey(withIdentifier: keyID)\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:368:106: error: extra arguments at positions #2, #3 in call\n 366 |     // Check if a key identifier is provided to load from key manager\n 367 |     if let keyID=config.options?.metadata?[\"keyIdentifier\"] {\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n     |                                                                                                          `- error: extra arguments at positions #2, #3 in call\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:377:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 375 |           return key\n 376 |         case let .failure(error):\n 377 |           throw SecurityProtocolError.inputError(\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 378 |             \"Failed to retrieve key with identifier \\(keyID): \\(error.localizedDescription)\"\n 379 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:408:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 406 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 407 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n     |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:409:82: error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 407 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n     |                                                                                  `- error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n 411 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:410:80: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 411 |       ]\n 412 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:410:94: error: cannot convert value of type 'Bool' to expected argument type 'String'\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                              `- error: cannot convert value of type 'Bool' to expected argument type 'String'\n 411 |       ]\n 412 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:431:86: error: value of type 'SecurityResultDTO' has no member 'data'\n 429 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 430 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 431 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n     |                                                                                      `- error: value of type 'SecurityResultDTO' has no member 'data'\n 432 |         ]\n 433 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:430:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 428 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 429 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 430 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 431 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n 432 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:449:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 447 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 448 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 449 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 450 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 451 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:481:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 479 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 480 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n     |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:482:82: error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 480 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n     |                                                                                  `- error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n 484 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:483:80: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 484 |       ]\n 485 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:483:94: error: cannot convert value of type 'Bool' to expected argument type 'String'\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                              `- error: cannot convert value of type 'Bool' to expected argument type 'String'\n 484 |       ]\n 485 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:504:86: error: value of type 'SecurityResultDTO' has no member 'data'\n 502 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 503 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 504 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n     |                                                                                      `- error: value of type 'SecurityResultDTO' has no member 'data'\n 505 |         ]\n 506 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:503:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 501 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 502 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 503 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 504 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n 505 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:522:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 520 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 521 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 522 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 523 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 524 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:547:49: error: cannot find 'createPrivacyMetadata' in scope\n 545 |     // Log operation with standard logger\n 546 |     await logger.info(\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n     |                                                 `- error: cannot find 'createPrivacyMetadata' in scope\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:549:15: error: extra argument 'source' in call\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n     |               `- error: extra argument 'source' in call\n 550 | \n 551 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:547:90: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 545 |     // Log operation with standard logger\n 546 |     await logger.info(\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n     |                                                                                          `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:560:81: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 558 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 559 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 560 |         \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public),\n     |                                                                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 561 |         \"keySize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keySize), privacyLevel: .public)\n 562 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:561:81: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 559 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 560 |         \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public),\n 561 |         \"keySize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keySize), privacyLevel: .public)\n     |                                                                                 `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 562 |       ]\n 563 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:567:39: error: value of type 'any KeyManagementProtocol' has no member 'generateKey'\n 565 |     do {\n 566 |       // Process the request through the key management service\n 567 |       let result=try await keyManager.generateKey(\n     |                                       `- error: value of type 'any KeyManagementProtocol' has no member 'generateKey'\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:568:22: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 566 |       // Process the request through the key management service\n 567 |       let result=try await keyManager.generateKey(\n 568 |         type: config.keyType,\n     |                      `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 569 |         size: config.keySize,\n 570 |         metadata: config.metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:569:22: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 567 |       let result=try await keyManager.generateKey(\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n     |                      `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 570 |         metadata: config.metadata\n 571 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:570:26: error: value of type 'SecurityConfigDTO' has no member 'metadata'\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n 570 |         metadata: config.metadata\n     |                          `- error: value of type 'SecurityConfigDTO' has no member 'metadata'\n 571 |       )\n 572 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:19: error: cannot find 'createPrivacyMetadata' in scope\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                   `- error: cannot find 'createPrivacyMetadata' in scope\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:60: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                                                            `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:103: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:21: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                     `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:38: error: extra arguments at positions #1, #2 in call\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:38: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                                      `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:578:18: error: cannot infer contextual base in reference to member 'success'\n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n 578 |         status: .success,\n     |                  `- error: cannot infer contextual base in reference to member 'success'\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:592:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 590 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 591 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 592 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 593 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n 594 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:593:83: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 591 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 592 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 593 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n     |                                                                                   `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 594 |         ]\n 595 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:599:60: error: cannot find 'createPrivacyMetadata' in scope\n 597 |       // Log completion\n 598 |       await logger.info(\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n     |                                                            `- error: cannot find 'createPrivacyMetadata' in scope\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:601:17: error: extra argument 'source' in call\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n     |                 `- error: extra argument 'source' in call\n 602 | \n 603 |       return resultDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:599:101: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 597 |       // Log completion\n 598 |       await logger.info(\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n     |                                                                                                     `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:617:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 615 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 616 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 617 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 618 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 619 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:620:83: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 618 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 619 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public),\n 620 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n     |                                                                                   `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 621 |         ]\n 622 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:627:19: error: cannot find 'createPrivacyMetadata' in scope\n 625 |       await logger.error(\n 626 |         \"Key generation failed: \\(error.localizedDescription)\",\n 627 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"error\": error.localizedDescription]),\n     |                   `- error: cannot find 'createPrivacyMetadata' in scope\n 628 |         source: \"CoreSecurityProvider\"\n 629 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:627:60: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 625 |       await logger.error(\n 626 |         \"Key generation failed: \\(error.localizedDescription)\",\n 627 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"error\": error.localizedDescription]),\n     |                                                            `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 628 |         source: \"CoreSecurityProvider\"\n 629 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:644:5: warning: no calls to throwing functions occur within 'try' expression\n 642 |    */\n 643 |   public func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 644 |     try await signatureService.sign(config: config)\n     |     `- warning: no calls to throwing functions occur within 'try' expression\n 645 |   }\n 646 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:656:5: warning: no calls to throwing functions occur within 'try' expression\n 654 |    */\n 655 |   public func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 656 |     try await signatureService.verify(config: config)\n     |     `- warning: no calls to throwing functions occur within 'try' expression\n 657 |   }\n 658 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:668:30: error: value of type 'SecureStorageService' has no member 'store'\n 666 |    */\n 667 |   public func store(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 668 |     try await storageService.store(config: config)\n     |                              `- error: value of type 'SecureStorageService' has no member 'store'\n 669 |   }\n 670 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:680:30: error: value of type 'SecureStorageService' has no member 'retrieve'\n 678 |    */\n 679 |   public func retrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 680 |     try await storageService.retrieve(config: config)\n     |                              `- error: value of type 'SecureStorageService' has no member 'retrieve'\n 681 |   }\n 682 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:693:69: error: cannot find 'createPrivacyMetadata' in scope\n 691 |     let operationID=UUID().uuidString\n 692 | \n 693 |     await logger.debug(\"Starting secure store operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                     `- error: cannot find 'createPrivacyMetadata' in scope\n 694 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 695 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:702:27: error: type 'SecurityError' has no member 'invalidInput'\n 700 |       let inputData=Data(base64Encoded: dataString)\n 701 |     else {\n 702 |       throw SecurityError.invalidInput(\"Missing or invalid input data for secure storage\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 703 |     }\n 704 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:714:27: error: type 'SecurityError' has no member 'internalError'\n 712 |     // Then store the encrypted data using the key manager\n 713 |     guard let encryptedData=encryptionResult.resultData else {\n 714 |       throw SecurityError.internalError(\"Encryption successful but no encrypted data returned\")\n     |                           `- error: type 'SecurityError' has no member 'internalError'\n 715 |     }\n 716 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:718:50: error: extra arguments at positions #2, #3 in call\n 716 | \n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n     |                                                  `- error: extra arguments at positions #2, #3 in call\n 719 |       identifier: keyIdentifier,\n 720 |       keyData: encryptedData,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:20:8: note: 'storeKey(_:withIdentifier:)' declared here\n18 |   ///   - identifier: A string identifier for the key.\n19 |   /// - Returns: Success or an error.\n20 |   func storeKey(_ key: [UInt8], withIdentifier identifier: String) async\n   |        `- note: 'storeKey(_:withIdentifier:)' declared here\n21 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n22 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:719:32: error: missing argument for parameter 'withIdentifier' in call\n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n 719 |       identifier: keyIdentifier,\n     |                                `- error: missing argument for parameter 'withIdentifier' in call\n 720 |       keyData: encryptedData,\n 721 |       metadata: config.options?.metadata ?? [:]\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:20:8: note: 'storeKey(_:withIdentifier:)' declared here\n18 |   ///   - identifier: A string identifier for the key.\n19 |   /// - Returns: Success or an error.\n20 |   func storeKey(_ key: [UInt8], withIdentifier identifier: String) async\n   |        `- note: 'storeKey(_:withIdentifier:)' declared here\n21 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n22 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:719:19: error: cannot convert value of type 'String' to expected argument type '[UInt8]'\n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n 719 |       identifier: keyIdentifier,\n     |                   `- error: cannot convert value of type 'String' to expected argument type '[UInt8]'\n 720 |       keyData: encryptedData,\n 721 |       metadata: config.options?.metadata ?? [:]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:726:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 724 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 725 | \n 726 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 727 |       successful: storeResult.successful,\n 728 |       resultData: keyIdentifier.data(using: .utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:745:72: error: cannot find 'createPrivacyMetadata' in scope\n 743 |     let operationID=UUID().uuidString\n 744 | \n 745 |     await logger.debug(\"Starting secure retrieve operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n 746 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 747 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:751:27: error: type 'SecurityError' has no member 'invalidInput'\n 749 |     // Extract required parameters from configuration\n 750 |     guard let keyIdentifier=config.options?.metadata?[\"key_identifier\"] else {\n 751 |       throw SecurityError.invalidInput(\"Missing key identifier for secure retrieval\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 752 |     }\n 753 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:755:45: error: value of type 'any KeyManagementProtocol' has no member 'getKey'\n 753 | \n 754 |     // Retrieve the encrypted data using the key manager\n 755 |     let retrieveResult=try await keyManager.getKey(\n     |                                             `- error: value of type 'any KeyManagementProtocol' has no member 'getKey'\n 756 |       identifier: keyIdentifier,\n 757 |       metadata: config.options?.metadata ?? [:]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:762:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 760 |     if !retrieveResult.successful || retrieveResult.keyData == nil {\n 761 |       let errorDetails=retrieveResult.errorDetails ?? \"Failed to retrieve data\"\n 762 |       return SecurityResultDTO(\n     |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 763 |         successful: false,\n 764 |         resultData: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:780:27: error: type 'SecurityError' has no member 'internalError'\n 778 | \n 779 |     guard let keyData=retrieveResult.keyData else {\n 780 |       throw SecurityError.internalError(\"Key data missing after successful retrieval\")\n     |                           `- error: type 'SecurityError' has no member 'internalError'\n 781 |     }\n 782 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:808:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 806 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 807 | \n 808 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 809 |       successful: decryptResult.successful,\n 810 |       resultData: decryptResult.resultData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:827:70: error: cannot find 'createPrivacyMetadata' in scope\n 825 |     let operationID=UUID().uuidString\n 826 | \n 827 |     await logger.debug(\"Starting secure delete operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID\n     |                                                                      `- error: cannot find 'createPrivacyMetadata' in scope\n 828 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n 829 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:832:27: error: type 'SecurityError' has no member 'invalidInput'\n 830 |     // Extract required parameters from configuration\n 831 |     guard let keyIdentifier=config.options?.metadata?[\"key_identifier\"] else {\n 832 |       throw SecurityError.invalidInput(\"Missing key identifier for secure deletion\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 833 |     }\n 834 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:836:52: error: extra arguments at positions #1, #2 in call\n 834 | \n 835 |     // Delete the key using the key manager\n 836 |     let deleteResult=try await keyManager.deleteKey(\n     |                                                    `- error: extra arguments at positions #1, #2 in call\n 837 |       identifier: keyIdentifier,\n 838 |       metadata: config.options?.metadata ?? [:]\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:26:8: note: 'deleteKey(withIdentifier:)' declared here\n24 |   /// - Parameter identifier: A string identifying the key to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteKey(withIdentifier identifier: String) async\n   |        `- note: 'deleteKey(withIdentifier:)' declared here\n27 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n28 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:837:7: error: missing argument for parameter 'withIdentifier' in call\n 835 |     // Delete the key using the key manager\n 836 |     let deleteResult=try await keyManager.deleteKey(\n 837 |       identifier: keyIdentifier,\n     |       `- error: missing argument for parameter 'withIdentifier' in call\n 838 |       metadata: config.options?.metadata ?? [:]\n 839 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:26:8: note: 'deleteKey(withIdentifier:)' declared here\n24 |   /// - Parameter identifier: A string identifying the key to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteKey(withIdentifier identifier: String) async\n   |        `- note: 'deleteKey(withIdentifier:)' declared here\n27 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n28 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:843:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 841 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 842 | \n 843 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 844 |       successful: deleteResult.successful,\n 845 |       resultData: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:867:86: error: cannot find 'createPrivacyMetadata' in scope\n 865 |     let operationID=UUID().uuidString\n 866 | \n 867 |     await logger.debug(\"Starting secure operation: \\(operation.rawValue)\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                                      `- error: cannot find 'createPrivacyMetadata' in scope\n 868 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 869 |     ]))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:869:7: error: missing argument for parameter 'source' in call\n 867 |     await logger.debug(\"Starting secure operation: \\(operation.rawValue)\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n 868 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 869 |     ]))\n     |       `- error: missing argument for parameter 'source' in call\n 870 | \n 871 |     let result: CoreSecurityTypes.SecurityResultDTO=switch operation {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:877:19: error: cannot find 'hash' in scope\n 875 |         try await decrypt(config: config)\n 876 |       case .hashing:\n 877 |         try await hash(config: config)\n     |                   `- error: cannot find 'hash' in scope\n 878 |       case .keyGeneration:\n 879 |         try await generateKey(config: config)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:881:19: error: cannot find 'rotateKey' in scope\n 879 |         try await generateKey(config: config)\n 880 |       case .keyRotation:\n 881 |         try await rotateKey(config: config)\n     |                   `- error: cannot find 'rotateKey' in scope\n 882 |       case .keyDeletion:\n 883 |         try await secureDelete(config: config)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:872:13: error: type 'SecurityOperation' has no member 'encryption'\n 870 | \n 871 |     let result: CoreSecurityTypes.SecurityResultDTO=switch operation {\n 872 |       case .encryption:\n     |             `- error: type 'SecurityOperation' has no member 'encryption'\n 873 |         try await encrypt(config: config)\n 874 |       case .decryption:\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:897:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 895 |     updatedMetadata[\"operation_id\"]=operationID\n 896 | \n 897 |     return CoreSecurityTypes.SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 898 |       successful: result.successful,\n 899 |       resultData: result.resultData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:924:8: error: type 'SigningAlgorithm' has no member 'hmacSHA256'\n 922 |       .ed25519 // Hardware accelerated where available\n 923 |     } else {\n 924 |       .hmacSHA256 // Software implementation\n     |        `- error: type 'SigningAlgorithm' has no member 'hmacSHA256'\n 925 |     }\n 926 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:928:36: error: no type named 'HashingAlgorithm' in module 'CoreSecurityTypes'\n 926 | \n 927 |     // Determine the hashing algorithm\n 928 |     let hashing: CoreSecurityTypes.HashingAlgorithm=if options.useStrongerHashing {\n     |                                    `- error: no type named 'HashingAlgorithm' in module 'CoreSecurityTypes'\n 929 |       .sha512 // Stronger but slower\n 930 |     } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:935:25: error: cannot find 'SecurityOptions' in scope\n 933 | \n 934 |     // Create the security options with selected algorithms\n 935 |     let securityOptions=SecurityOptions(\n     |                         `- error: cannot find 'SecurityOptions' in scope\n 936 |       encryption: encryption,\n 937 |       decryption: encryption,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:944:29: error: extra arguments at positions #2, #3 in call\n 942 | \n 943 |     // Create the configuration DTO with the options\n 944 |     return SecurityConfigDTO(\n     |                             `- error: extra arguments at positions #2, #3 in call\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityConfigDTO.swift:31:10: note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n29 |      - options: Optional configuration options\n30 |    */\n31 |   public init(\n   |          `- note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n32 |     encryptionAlgorithm: EncryptionAlgorithm,\n33 |     hashAlgorithm: HashAlgorithm,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:944:29: error: missing arguments for parameters 'encryptionAlgorithm', 'hashAlgorithm', 'providerType' in call\n 942 | \n 943 |     // Create the configuration DTO with the options\n 944 |     return SecurityConfigDTO(\n     |                             `- error: missing arguments for parameters 'encryptionAlgorithm', 'hashAlgorithm', 'providerType' in call\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityConfigDTO.swift:31:10: note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n29 |      - options: Optional configuration options\n30 |    */\n31 |   public init(\n   |          `- note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n32 |     encryptionAlgorithm: EncryptionAlgorithm,\n33 |     hashAlgorithm: HashAlgorithm,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:946:21: error: value of type 'SecurityConfigOptions' has no member 'data'\n 944 |     return SecurityConfigDTO(\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n     |                     `- error: value of type 'SecurityConfigOptions' has no member 'data'\n 947 |       outputFormat: options.outputFormat ?? .binary\n 948 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:947:29: error: value of type 'SecurityConfigOptions' has no member 'outputFormat'\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n 947 |       outputFormat: options.outputFormat ?? .binary\n     |                             `- error: value of type 'SecurityConfigOptions' has no member 'outputFormat'\n 948 |     )\n 949 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:947:46: error: cannot infer contextual base in reference to member 'binary'\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n 947 |       outputFormat: options.outputFormat ?? .binary\n     |                                              `- error: cannot infer contextual base in reference to member 'binary'\n 948 |     )\n 949 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:963:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 961 | \n 962 |     // Map known error types to appropriate security errors\n 963 |     if let nsError=error as? NSError {\n     |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 964 |       switch nsError.domain {\n 965 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:966:19: error: type 'SecurityProtocolError' has no member 'networkError'\n 964 |       switch nsError.domain {\n 965 |         case NSURLErrorDomain:\n 966 |           return .networkError(\n     |                   `- error: type 'SecurityProtocolError' has no member 'networkError'\n 967 |             \"Network error during security operation: \\(nsError.localizedDescription)\"\n 968 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:970:19: error: type 'SecurityProtocolError' has no member 'systemError'\n 968 |           )\n 969 |         case NSOSStatusErrorDomain:\n 970 |           return .systemError(\n     |                   `- error: type 'SecurityProtocolError' has no member 'systemError'\n 971 |             \"System error during security operation: \\(nsError.localizedDescription)\"\n 972 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:979:13: error: type 'SecurityProtocolError' has no member 'generalError'\n 977 | \n 978 |     // Default error mapping\n 979 |     return .generalError(\"Security operation failed: \\(error.localizedDescription)\")\n     |             `- error: type 'SecurityProtocolError' has no member 'generalError'\n 980 |   }\n 981 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:32: error: extra argument 'errorCode' in call\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                `- error: extra argument 'errorCode' in call\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:36: error: missing argument for parameter 'executionTimeMs' in call\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                    `- error: missing argument for parameter 'executionTimeMs' in call\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityResultDTO.swift:55:22: note: 'failure(errorDetails:executionTimeMs:metadata:)' declared here\n53 |      - metadata: Optional additional metadata\n54 |    */\n55 |   public static func failure(\n   |                      `- note: 'failure(errorDetails:executionTimeMs:metadata:)' declared here\n56 |     errorDetails: String,\n57 |     executionTimeMs: Double,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:32: error: value of type 'SecurityProtocolError' has no member 'code'\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                `- error: value of type 'SecurityProtocolError' has no member 'code'\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1031:21: error: pattern with associated values does not match enum case 'encrypt'\n1029 |       let result: SecurityResultDTO=try await {\n1030 |         switch operation {\n1031 |           case let .encrypt(data, key, algorithm):\n     |                     |- error: pattern with associated values does not match enum case 'encrypt'\n     |                     `- note: remove associated values to make the pattern match\n1032 |             let config=SecurityConfigDTO(\n1033 |               operationType: .encrypt,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:49: error: extra arguments at positions #1, #2 in call\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |                                                 `- error: extra arguments at positions #1, #2 in call\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:49: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |                                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1133:18: error: cannot infer contextual base in reference to member 'failure'\n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n1133 |         status: .failure,\n     |                  `- error: cannot infer contextual base in reference to member 'failure'\n1134 |         error: error.localizedDescription,\n1135 |         metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1145:13: error: type 'CoreSecurityError' has no member 'general'\n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1146 |   }\n1147 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1149:13: error: type 'CoreSecurityError' has no member 'general'\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1150 |   }\n1151 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1153:13: error: type 'CoreSecurityError' has no member 'general'\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1154 |   }\n1155 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:15: error: invalid redeclaration of 'notImplemented(reason:)'\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:123:121: error: extra argument 'source' in call\n121 |     )\n122 | \n123 |     await logger.info(\"Starting encryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                         `- error: extra argument 'source' in call\n124 | \n125 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:123:66: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n121 |     )\n122 | \n123 |     await logger.info(\"Starting encryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                  `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n124 | \n125 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:134:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n132 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n133 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n134 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n    |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n135 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n136 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:135:90: error: value of type 'SecurityConfigOptions?' has no subscripts\n133 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n134 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n135 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n    |                                                                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n136 |       ]\n137 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:142:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n140 |       // Extract required parameters from configuration\n141 |       guard\n142 |         let inputDataString=config.options[\"data\"],\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n143 |         let inputData=Data(base64Encoded: inputDataString)\n144 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:171:33: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n169 |       // Choose encryption key\n170 |       let keyIdentifier: String\n171 |       if let configKeyID=config.keyIdentifier {\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n172 |         keyIdentifier=configKeyID\n173 |       } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:210:19: error: cannot find 'createPrivacyMetadata' in scope\n208 |         status: .success,\n209 |         data: encryptedData,\n210 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n211 |           \"operationID\": operationID,\n212 |           \"durationMs\": String(Int(duration * 1000))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:35: error: extra arguments at positions #1, #2 in call\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:208:18: error: cannot infer contextual base in reference to member 'success'\n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n208 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n209 |         data: encryptedData,\n210 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:225:72: error: type 'PrivacyMetadataValue' has no member 'int'\n223 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n224 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n225 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n226 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(encryptedData.count), privacyLevel: .public)\n227 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:226:72: error: type 'PrivacyMetadataValue' has no member 'int'\n224 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n225 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n226 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(encryptedData.count), privacyLevel: .public)\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n227 |         ]\n228 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:232:56: error: cannot find 'createPrivacyMetadata' in scope\n230 |       // Log success\n231 |       await logger.info(\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n234 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:234:11: error: missing argument for parameter 'source' in call\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n234 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n235 |       )\n236 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:233:35: error: extra arguments at positions #2, #3 in call\n231 |       await logger.info(\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n    |                                   `- error: extra arguments at positions #2, #3 in call\n234 |         ])\n235 |       )\n\nSwift.Int.init:2:8: note: 'init(_:)' declared here\n1 | struct Int {\n2 | public init(_ source: Double)}\n  |        `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:255:72: error: type 'PrivacyMetadataValue' has no member 'int'\n253 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n254 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n255 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n256 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n257 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:264:19: error: cannot find 'createPrivacyMetadata' in scope\n262 |       await logger.error(\n263 |         \"Encryption failed: \\(error.localizedDescription)\",\n264 |         metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n265 |           \"durationMs\": String(Int(duration * 1000)),\n266 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:267:11: error: missing argument for parameter 'source' in call\n265 |           \"durationMs\": String(Int(duration * 1000)),\n266 |           \"error\": error.localizedDescription\n267 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n268 |       )\n269 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:274:19: error: cannot find 'createPrivacyMetadata' in scope\n272 |         status: .failure,\n273 |         data: nil,\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n275 |           \"operationID\": operationID,\n276 |           \"durationMs\": String(Int(duration * 1000)),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:35: error: extra arguments at positions #1, #2 in call\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:272:18: error: cannot infer contextual base in reference to member 'failure'\n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n272 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n273 |         data: nil,\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:273:15: error: 'nil' requires a contextual type\n271 |       let result=SecurityResultDTO(\n272 |         status: .failure,\n273 |         data: nil,\n    |               `- error: 'nil' requires a contextual type\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n275 |           \"operationID\": operationID,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:242:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n240 | \n241 |       return result\n242 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n243 |       // Calculate duration for metrics\n244 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:303:121: error: extra argument 'source' in call\n301 |     )\n302 | \n303 |     await logger.info(\"Starting decryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                         `- error: extra argument 'source' in call\n304 | \n305 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:303:66: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n301 |     )\n302 | \n303 |     await logger.info(\"Starting decryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                  `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n304 | \n305 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:314:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n312 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n313 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n314 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n    |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n315 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n316 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:315:90: error: value of type 'SecurityConfigOptions?' has no subscripts\n313 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n314 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n315 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n    |                                                                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n316 |       ]\n317 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:322:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n320 |       // Extract required parameters from configuration\n321 |       guard\n322 |         let inputDataString=config.options[\"data\"],\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n323 |         let inputData=Data(base64Encoded: inputDataString)\n324 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:351:33: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n349 |       // Choose decryption key\n350 |       let keyIdentifier: String\n351 |       if let configKeyID=config.keyIdentifier {\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n352 |         keyIdentifier=configKeyID\n353 |       } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:390:19: error: cannot find 'createPrivacyMetadata' in scope\n388 |         status: .success,\n389 |         data: decryptedData,\n390 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n391 |           \"operationID\": operationID,\n392 |           \"durationMs\": String(Int(duration * 1000))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:35: error: extra arguments at positions #1, #2 in call\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:388:18: error: cannot infer contextual base in reference to member 'success'\n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n388 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n389 |         data: decryptedData,\n390 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:405:72: error: type 'PrivacyMetadataValue' has no member 'int'\n403 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n404 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n405 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n406 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(decryptedData.count), privacyLevel: .public)\n407 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:406:72: error: type 'PrivacyMetadataValue' has no member 'int'\n404 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n405 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n406 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(decryptedData.count), privacyLevel: .public)\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n407 |         ]\n408 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:412:56: error: cannot find 'createPrivacyMetadata' in scope\n410 |       // Log success\n411 |       await logger.info(\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n414 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:414:11: error: missing argument for parameter 'source' in call\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n414 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n415 |       )\n416 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:413:35: error: extra arguments at positions #2, #3 in call\n411 |       await logger.info(\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n    |                                   `- error: extra arguments at positions #2, #3 in call\n414 |         ])\n415 |       )\n\nSwift.Int.init:2:8: note: 'init(_:)' declared here\n1 | struct Int {\n2 | public init(_ source: Double)}\n  |        `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:435:72: error: type 'PrivacyMetadataValue' has no member 'int'\n433 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n434 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n435 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n436 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n437 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:444:19: error: cannot find 'createPrivacyMetadata' in scope\n442 |       await logger.error(\n443 |         \"Decryption failed: \\(error.localizedDescription)\",\n444 |         metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n445 |           \"durationMs\": String(Int(duration * 1000)),\n446 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:447:11: error: missing argument for parameter 'source' in call\n445 |           \"durationMs\": String(Int(duration * 1000)),\n446 |           \"error\": error.localizedDescription\n447 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n448 |       )\n449 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:454:19: error: cannot find 'createPrivacyMetadata' in scope\n452 |         status: .failure,\n453 |         data: nil,\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n455 |           \"operationID\": operationID,\n456 |           \"durationMs\": String(Int(duration * 1000)),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:35: error: extra arguments at positions #1, #2 in call\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:452:18: error: cannot infer contextual base in reference to member 'failure'\n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n452 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n453 |         data: nil,\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:453:15: error: 'nil' requires a contextual type\n451 |       let result=SecurityResultDTO(\n452 |         status: .failure,\n453 |         data: nil,\n    |               `- error: 'nil' requires a contextual type\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n455 |           \"operationID\": operationID,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:422:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n420 | \n421 |       return result\n422 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n423 |       // Calculate duration for metrics\n424 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:494:52: error: extra arguments at positions #1, #2 in call\n492 | \n493 |       // Try the standard protocol method signature which returns a Result type\n494 |       let encryptResult=await cryptoService.encrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n495 | \n496 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:494:52: error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n492 | \n493 |       // Try the standard protocol method signature which returns a Result type\n494 |       let encryptResult=await cryptoService.encrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n495 | \n496 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:541:52: error: extra arguments at positions #1, #2 in call\n539 | \n540 |       // Try the standard protocol method signature which returns a Result type\n541 |       let decryptResult=await cryptoService.decrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n542 | \n543 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:541:52: error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n539 | \n540 |       // Try the standard protocol method signature which returns a Result type\n541 |       let decryptResult=await cryptoService.decrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n542 | \n543 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:592:35: error: type 'SecurityProtocolError' has no member 'keyNotFound'\n590 |   func retrieve(withIdentifier identifier: String) throws -\u003e Data {\n591 |     guard let data=storage[identifier] else {\n592 |       throw SecurityProtocolError.keyNotFound\n    |                                   `- error: type 'SecurityProtocolError' has no member 'keyNotFound'\n593 |     }\n594 |     return data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:606:13: error: type 'CoreSecurityError' has no member 'general'\n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n607 |   }\n608 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:610:13: error: type 'CoreSecurityError' has no member 'general'\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n611 |   }\n612 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:614:13: error: type 'CoreSecurityError' has no member 'general'\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n615 |   }\n616 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:82:118: error: extra argument 'source' in call\n 80 |     )\n 81 | \n 82 |     await logger.info(\"Starting hashing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                      `- error: extra argument 'source' in call\n 83 | \n 84 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:82:63: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 80 |     )\n 81 | \n 82 |     await logger.info(\"Starting hashing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                               `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 83 | \n 84 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:87:38: error: value of type 'SecurityConfigOptions?' has no subscripts\n 85 |       // Extract required parameters from configuration\n 86 |       guard\n 87 |         let dataString=config.options[\"data\"],\n    |                                      `- error: value of type 'SecurityConfigOptions?' has no subscripts\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n 89 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:88:46: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n 86 |       guard\n 87 |         let dataString=config.options[\"data\"],\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n    |                                              `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n 89 |       else {\n 90 |         throw SecurityError.invalidInput(\"Missing or invalid input data for hashing\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:90:29: error: type 'SecurityError' has no member 'invalidInput'\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n 89 |       else {\n 90 |         throw SecurityError.invalidInput(\"Missing or invalid input data for hashing\")\n    |                             `- error: type 'SecurityError' has no member 'invalidInput'\n 91 |       }\n 92 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:94:56: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 92 | \n 93 |       // Determine hash algorithm to use\n 94 |       let hashAlgorithm=HashAlgorithm(rawValue: config.algorithm) ?? HashAlgorithm.sha256\n    |                                                        `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 95 | \n 96 |       // Perform the hashing operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:97:50: error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n 95 | \n 96 |       // Perform the hashing operation\n 97 |       let hashResult=try await cryptoService.hash(inputData, algorithm: hashAlgorithm.rawValue)\n    |                                                  `- error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n 98 | \n 99 |       // Calculate duration for performance metrics\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:107:11: error: missing argument for parameter 'source' in call\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n107 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n108 |       )\n109 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:104:75: error: value of type 'LogMetadata' has no member 'merging'\n102 |       // Log successful operation\n103 |       await logger.info(\n104 |         \"Completed hashing operation successfully\", metadata: logMetadata.merging([\n    |                                                                           `- error: value of type 'LogMetadata' has no member 'merging'\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:105:25: error: extra arguments at positions #2, #3 in call\n103 |       await logger.info(\n104 |         \"Completed hashing operation successfully\", metadata: logMetadata.merging([\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n    |                         `- error: extra arguments at positions #2, #3 in call\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n107 |         ])\n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:31: error: extra arguments at positions #1, #2, #3, #4 in call\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2, #3, #4 in call\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:126:11: error: missing argument for parameter 'source' in call\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n125 |           \"error\": error.localizedDescription\n126 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n127 |       )\n128 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:123:107: error: value of type 'LogMetadata' has no member 'merging'\n121 | \n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n    |                                                                                                           `- error: value of type 'LogMetadata' has no member 'merging'\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n125 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:31: error: extra arguments at positions #1, #2, #3, #4 in call\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2, #3, #4 in call\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:118:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n116 |       )\n117 | \n118 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n119 |       // Calculate duration even for failed operations\n120 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:163:122: error: extra argument 'source' in call\n161 |     ]\n162 | \n163 |     await logger.info(\"Starting direct hash operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                          `- error: extra argument 'source' in call\n164 | \n165 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:163:67: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n161 |     ]\n162 | \n163 |     await logger.info(\"Starting direct hash operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                   `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n164 | \n165 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:50: error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                  `- error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:51: error: cannot convert value of type 'SendableCryptoMaterial' to expected argument type 'String'\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                   `- error: cannot convert value of type 'SendableCryptoMaterial' to expected argument type 'String'\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:78: error: cannot convert value of type 'String' to expected argument type 'HashingOptions'\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                                              `- error: cannot convert value of type 'String' to expected argument type 'HashingOptions'\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:170: error: missing argument for parameter 'source' in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                                                                                                          `- error: missing argument for parameter 'source' in call\n173 |       )\n174 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:66: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                  `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n173 |       )\n174 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:169: error: missing argument for parameter 'uniquingKeysWith' in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                                                                                                         `- error: missing argument for parameter 'uniquingKeysWith' in call\n173 |       )\n174 | \n\nSwift.Dictionary.merging:2:36: note: 'merging(_:uniquingKeysWith:)' declared here\n1 | generic struct Dictionary {\n2 | @inlinable public __consuming func merging(_ other: __owned [Key : Value], uniquingKeysWith combine: (Value, Value) throws -\u003e Value) rethrows -\u003e [Key : Value]}\n  |                                    `- note: 'merging(_:uniquingKeysWith:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:89: error: extra arguments at positions #2, #3 in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                         `- error: extra arguments at positions #2, #3 in call\n173 |       )\n174 | \n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:182:11: error: missing argument for parameter 'source' in call\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n182 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n183 |       )\n184 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:179:111: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n177 |       // Log error\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n    |                                                                                                               `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:182:10: error: missing argument for parameter 'uniquingKeysWith' in call\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n182 |         ])\n    |          `- error: missing argument for parameter 'uniquingKeysWith' in call\n183 |       )\n184 | \n\nSwift.Dictionary.merging:2:36: note: 'merging(_:uniquingKeysWith:)' declared here\n1 | generic struct Dictionary {\n2 | @inlinable public __consuming func merging(_ other: __owned [Key : Value], uniquingKeysWith combine: (Value, Value) throws -\u003e Value) rethrows -\u003e [Key : Value]}\n  |                                    `- note: 'merging(_:uniquingKeysWith:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:205:13: error: type 'CoreSecurityError' has no member 'general'\n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n206 |   }\n207 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:209:13: error: type 'CoreSecurityError' has no member 'general'\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n210 |   }\n211 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:213:13: error: type 'CoreSecurityError' has no member 'general'\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n214 |   }\n215 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:15: error: invalid redeclaration of 'notImplemented(reason:)'\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:100:18: error: cannot convert value of type 'String' to expected argument type 'SecurityOperation'\n 98 |     let logMetadata=createOperationMetadata(\n 99 |       operationID: operationID,\n100 |       operation: operation,\n    |                  `- error: cannot convert value of type 'String' to expected argument type 'SecurityOperation'\n101 |       config: config\n102 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:104:125: error: extra argument 'source' in call\n102 |     )\n103 | \n104 |     await logger.info(\"Starting key generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                             `- error: extra argument 'source' in call\n105 | \n106 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:108:26: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n106 |     do {\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n    |                          `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n110 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:108:47: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n106 |     do {\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n    |                                               `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n110 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:109:28: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n    |                            `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n110 | \n111 |       // Use SendableCryptoMaterial instead of SecureBytes\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:109:63: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n    |                                                               `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n110 | \n111 |       // Use SendableCryptoMaterial instead of SecureBytes\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:114:13: error: cannot find 'secureRandomMaterial' in scope\n112 |       // In a production implementation, this would use a secure random generator\n113 |       let keyMaterial: SendableCryptoMaterial=if keySize \u003e 0 {\n114 |         try secureRandomMaterial(byteCount: keySize / 8)\n    |             `- error: cannot find 'secureRandomMaterial' in scope\n115 |       } else {\n116 |         SendableCryptoMaterial.zeros(count: 32) // Default to 256 bits (32 bytes)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:120:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n118 | \n119 |       // Store the key if an identifier is provided\n120 |       if let keyIdentifier=config.options[\"keyIdentifier\"] {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n121 |         let storageResult=await keyManager.secureStorage.storeMaterial(\n122 |           keyMaterial,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:121:44: error: value of type 'any KeyManagementProtocol' has no member 'secureStorage'\n119 |       // Store the key if an identifier is provided\n120 |       if let keyIdentifier=config.options[\"keyIdentifier\"] {\n121 |         let storageResult=await keyManager.secureStorage.storeMaterial(\n    |                                            `- error: value of type 'any KeyManagementProtocol' has no member 'secureStorage'\n122 |           keyMaterial,\n123 |           withIdentifier: keyIdentifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:126:31: error: type 'SecurityError' has no member 'keyStorage'\n124 |         )\n125 |         if case let .failure(error)=storageResult {\n126 |           throw SecurityError.keyStorage(error.description)\n    |                               `- error: type 'SecurityError' has no member 'keyStorage'\n127 |         }\n128 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:134:58: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n132 | \n133 |       // Create success metadata for logging\n134 |       let successMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                          `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n135 |         \"operationId\": operationID,\n136 |         \"operation\": operation,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:142:51: error: extra argument 'source' in call\n140 |       await logger.info(\n141 |         \"Key generation completed successfully\", metadata: successMetadata\n142 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                   `- error: extra argument 'source' in call\n143 | \n144 |       // Return successful result with the generated key metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:141:60: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n139 | \n140 |       await logger.info(\n141 |         \"Key generation completed successfully\", metadata: successMetadata\n    |                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n142 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n143 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:148:19: error: cannot find 'createPrivacyMetadata' in scope\n146 |         status: .success,\n147 |         data: keyMaterial,\n148 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n149 |           \"keySize\": \"\\(keySize)\",\n150 |           \"algorithm\": algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:31: error: extra arguments at positions #1, #2 in call\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:146:18: error: cannot infer contextual base in reference to member 'success'\n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n146 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n147 |         data: keyMaterial,\n148 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:158:56: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n156 | \n157 |       // Create failure metadata for logging\n158 |       let errorMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                        `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n159 |         \"operationId\": operationID,\n160 |         \"operation\": operation,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:165:105: error: missing argument for parameter 'source' in call\n163 |       ]\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                         `- error: missing argument for parameter 'source' in call\n166 |       , source: \\\"SecurityImplementation\\\")\n167 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:165:92: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n163 |       ]\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n166 |       , source: \\\"SecurityImplementation\\\")\n167 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:192:52: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n190 | \n191 |     // Create metadata for logging\n192 |     let logMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                    `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n193 |       \"operationId\": operationID,\n194 |       \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:199:133: error: extra argument 'source' in call\n197 |     ]\n198 | \n199 |     await logger.info(\"Starting random data generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                                     `- error: extra argument 'source' in call\n200 | \n201 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:199:78: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n197 |     ]\n198 | \n199 |     await logger.info(\"Starting random data generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                              `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n200 | \n201 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:204:29: error: type 'SecurityError' has no member 'invalidInput'\n202 |       // Validate parameters\n203 |       if length \u003c= 0 {\n204 |         throw SecurityError.invalidInput(\"Invalid length for random data generation: \\(length)\")\n    |                             `- error: type 'SecurityError' has no member 'invalidInput'\n205 |       }\n206 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:209:30: error: cannot find 'secureRandomMaterial' in scope\n207 |       // Use SendableCryptoMaterial instead of SecureBytes\n208 |       // In a production implementation, this would use a secure random generator\n209 |       let randomMaterial=try secureRandomMaterial(byteCount: length)\n    |                              `- error: cannot find 'secureRandomMaterial' in scope\n210 | \n211 |       // Calculate duration for performance metrics\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:215:58: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n213 | \n214 |       // Create success metadata for logging\n215 |       let successMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                          `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n216 |         \"operationId\": operationID,\n217 |         \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:224:51: error: extra argument 'source' in call\n222 |       await logger.info(\n223 |         \"Random data generation completed successfully\", metadata: successMetadata\n224 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                   `- error: extra argument 'source' in call\n225 | \n226 |       // Return successful result with the generated random data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:223:68: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n221 | \n222 |       await logger.info(\n223 |         \"Random data generation completed successfully\", metadata: successMetadata\n    |                                                                    `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n224 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n225 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:230:19: error: cannot find 'createPrivacyMetadata' in scope\n228 |         status: .success,\n229 |         data: randomMaterial,\n230 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n231 |           \"length\": \"\\(length)\"\n232 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:31: error: extra arguments at positions #1, #2 in call\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:228:18: error: cannot infer contextual base in reference to member 'success'\n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n228 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n229 |         data: randomMaterial,\n230 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:239:56: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n237 | \n238 |       // Create failure metadata for logging\n239 |       let errorMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                        `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n240 |         \"operationId\": operationID,\n241 |         \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:246:113: error: missing argument for parameter 'source' in call\n244 |       ]\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                                 `- error: missing argument for parameter 'source' in call\n247 |       , source: \\\"SecurityImplementation\\\")\n248 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:246:100: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n244 |       ]\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                    `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n247 |       , source: \\\"SecurityImplementation\\\")\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:265:13: error: type 'CoreSecurityError' has no member 'general'\n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n266 |   }\n267 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:269:13: error: type 'CoreSecurityError' has no member 'general'\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n270 |   }\n271 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:273:13: error: type 'CoreSecurityError' has no member 'general'\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n274 |   }\n275 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:29: error: cannot find type 'createPrivacyMetadata' in scope\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                             `- error: cannot find type 'createPrivacyMetadata' in scope\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:15: error: invalid redeclaration of 'notImplemented(reason:)'\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:95:22: error: extra arguments at positions #4, #5 in call\n 93 |     )\n 94 | \n 95 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n 96 |       \"Starting secure storage operation\", metadata: logMetadata,\n 97 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:96:54: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 94 | \n 95 |     await logger.info(\n 96 |       \"Starting secure storage operation\", metadata: logMetadata,\n    |                                                      `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 97 |       source: \"SecureStorageService\"\n 98 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:102:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n100 |     do {\n101 |       // Extract required parameters from configuration\n102 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n103 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n104 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:106:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n104 |       }\n105 | \n106 |       guard let dataToStore=config.options[\"data\"].flatMap({ Data(base64Encoded: $0) })\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n107 |       else {\n108 |         throw SecureStorageError.invalidInput(\"Missing or invalid data for storage\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:117:52: error: extra arguments at positions #1, #2 in call\n115 | \n116 |       // Encrypt the data before storage\n117 |       let encryptResult=await cryptoService.encrypt(data: dataToStore, using: storageKey)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n118 | \n119 |       switch encryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:117:52: error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n115 | \n116 |       // Encrypt the data before storage\n117 |       let encryptResult=await cryptoService.encrypt(data: dataToStore, using: storageKey)\n    |                                                    `- error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n118 | \n119 |       switch encryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:130:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:130:45: error: type 'String?' has no member 'string'\n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                                             `- error: type 'String?' has no member 'string'\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:131:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:131:43: error: type 'String?' has no member 'string'\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                           `- error: type 'String?' has no member 'string'\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:132:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:132:51: error: type 'String?' has no member 'string'\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                                   `- error: type 'String?' has no member 'string'\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:133:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n134 | \n135 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:133:44: error: type 'String?' has no member 'string'\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                            `- error: type 'String?' has no member 'string'\n134 | \n135 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:135:28: error: extra arguments at positions #4, #5 in call\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n135 |           await logger.info(\n    |                            `- error: extra arguments at positions #4, #5 in call\n136 |             \"Secure storage operation completed successfully\", metadata: successMetadata,\n137 |             source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:136:74: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n134 | \n135 |           await logger.info(\n136 |             \"Secure storage operation completed successfully\", metadata: successMetadata,\n    |                                                                          `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n137 |             source: \"SecureStorageService\"\n138 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:143:23: error: cannot find 'createPrivacyMetadata' in scope\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                       `- error: cannot find 'createPrivacyMetadata' in scope\n144 |               \"storageIdentifier\": identifier,\n145 |               \"storedBytes\": \"\\(storedBytes)\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:141:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n139 | \n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:142:22: error: extra argument 'status' in call\n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n    |                      `- error: extra argument 'status' in call\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n144 |               \"storageIdentifier\": identifier,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:141:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n139 | \n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:142:22: error: cannot infer contextual base in reference to member 'success'\n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n    |                      `- error: cannot infer contextual base in reference to member 'success'\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n144 |               \"storageIdentifier\": identifier,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:158:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:158:39: error: type 'String?' has no member 'string'\n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:159:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:159:37: error: type 'String?' has no member 'string'\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:160:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:160:38: error: type 'String?' has no member 'string'\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:161:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n162 | \n163 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:161:37: error: type 'String?' has no member 'string'\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n162 | \n163 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:165:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n163 |       await logger.error(\n164 |         \"Secure storage operation failed: \\(error.localizedDescription)\",\n165 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n166 |         source: \"SecureStorageService\"\n167 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:173:19: error: cannot find 'createPrivacyMetadata' in scope\n171 |         status: .failure,\n172 |         error: error,\n173 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n174 |           \"errorMessage\": error.localizedDescription\n175 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:31: error: extra arguments at positions #1, #2 in call\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:171:18: error: cannot infer contextual base in reference to member 'failure'\n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n171 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n172 |         error: error,\n173 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:152:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n150 |           throw SecureStorageError.encryptionError(\"Failed to encrypt data: \\(error)\")\n151 |       }\n152 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n153 |       // Calculate duration before failure\n154 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:198:22: error: extra arguments at positions #4, #5 in call\n196 |     )\n197 | \n198 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n199 |       \"Starting secure retrieval operation\", metadata: logMetadata,\n200 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:199:56: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n197 | \n198 |     await logger.info(\n199 |       \"Starting secure retrieval operation\", metadata: logMetadata,\n    |                                                        `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n200 |       source: \"SecureStorageService\"\n201 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:205:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n203 |     do {\n204 |       // Extract required parameters from configuration\n205 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n206 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n207 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:209:35: error: value of type 'SecurityConfigOptions?' has no subscripts\n207 |       }\n208 | \n209 |       guard let key=config.options[\"key\"].flatMap({ Data(base64Encoded: $0) }) else {\n    |                                   `- error: value of type 'SecurityConfigOptions?' has no subscripts\n210 |         throw SecureStorageError.invalidInput(\"Missing decryption key\")\n211 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:235:52: error: extra arguments at positions #1, #2 in call\n233 | \n234 |       // Decrypt the data\n235 |       let decryptResult=await cryptoService.decrypt(data: encryptedData, using: key)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n236 | \n237 |       switch decryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:235:52: error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n233 | \n234 |       // Decrypt the data\n235 |       let decryptResult=await cryptoService.decrypt(data: encryptedData, using: key)\n    |                                                    `- error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n236 | \n237 |       switch decryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:244:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:244:45: error: type 'String?' has no member 'string'\n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                                             `- error: type 'String?' has no member 'string'\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:245:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:245:43: error: type 'String?' has no member 'string'\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                           `- error: type 'String?' has no member 'string'\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:246:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:246:51: error: type 'String?' has no member 'string'\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                                   `- error: type 'String?' has no member 'string'\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:247:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n248 | \n249 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:247:44: error: type 'String?' has no member 'string'\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                            `- error: type 'String?' has no member 'string'\n248 | \n249 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:249:28: error: extra arguments at positions #4, #5 in call\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n249 |           await logger.info(\n    |                            `- error: extra arguments at positions #4, #5 in call\n250 |             \"Secure retrieval operation completed successfully\", metadata: successMetadata,\n251 |             source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:250:76: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n248 | \n249 |           await logger.info(\n250 |             \"Secure retrieval operation completed successfully\", metadata: successMetadata,\n    |                                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n251 |             source: \"SecureStorageService\"\n252 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:258:23: error: cannot find 'createPrivacyMetadata' in scope\n256 |             status: .success,\n257 |             data: decryptedData,\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                       `- error: cannot find 'createPrivacyMetadata' in scope\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:35: error: extra arguments at positions #1, #2 in call\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:256:22: error: cannot infer contextual base in reference to member 'success'\n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n256 |             status: .success,\n    |                      `- error: cannot infer contextual base in reference to member 'success'\n257 |             data: decryptedData,\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:273:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:273:39: error: type 'String?' has no member 'string'\n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:274:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:274:37: error: type 'String?' has no member 'string'\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:275:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:275:38: error: type 'String?' has no member 'string'\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:276:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:276:37: error: type 'String?' has no member 'string'\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:277:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n278 | \n279 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:277:40: error: type 'String?' has no member 'string'\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                                        `- error: type 'String?' has no member 'string'\n278 | \n279 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:281:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n279 |       await logger.error(\n280 |         \"Secure retrieval operation failed: \\(error.localizedDescription)\",\n281 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n282 |         source: \"SecureStorageService\"\n283 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:289:19: error: cannot find 'createPrivacyMetadata' in scope\n287 |         status: .failure,\n288 |         error: error,\n289 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n290 |           \"errorMessage\": error.localizedDescription\n291 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:31: error: extra arguments at positions #1, #2 in call\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:287:18: error: cannot infer contextual base in reference to member 'failure'\n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n287 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n288 |         error: error,\n289 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:267:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n265 |           throw SecureStorageError.decryptionError(\"Failed to decrypt data: \\(error)\")\n266 |       }\n267 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n268 |       // Calculate duration before failure\n269 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:314:22: error: extra arguments at positions #4, #5 in call\n312 |     )\n313 | \n314 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n315 |       \"Starting secure deletion operation\", metadata: logMetadata,\n316 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:315:55: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n313 | \n314 |     await logger.info(\n315 |       \"Starting secure deletion operation\", metadata: logMetadata,\n    |                                                       `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n316 |       source: \"SecureStorageService\"\n317 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:321:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n319 |     do {\n320 |       // Extract required parameters from configuration\n321 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n322 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n323 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:339:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:339:41: error: type 'String?' has no member 'string'\n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n    |                                         `- error: type 'String?' has no member 'string'\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:340:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:340:39: error: type 'String?' has no member 'string'\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                       `- error: type 'String?' has no member 'string'\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:341:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:341:47: error: type 'String?' has no member 'string'\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                               `- error: type 'String?' has no member 'string'\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:342:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n343 | \n344 |       await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:342:40: error: type 'String?' has no member 'string'\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                        `- error: type 'String?' has no member 'string'\n343 | \n344 |       await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:344:24: error: extra arguments at positions #4, #5 in call\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n344 |       await logger.info(\n    |                        `- error: extra arguments at positions #4, #5 in call\n345 |         \"Secure deletion operation completed successfully\", metadata: successMetadata,\n346 |         source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:345:71: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n343 | \n344 |       await logger.info(\n345 |         \"Secure deletion operation completed successfully\", metadata: successMetadata,\n    |                                                                       `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n346 |         source: \"SecureStorageService\"\n347 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:352:19: error: cannot find 'createPrivacyMetadata' in scope\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n353 |           \"storageIdentifier\": identifier\n354 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:350:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n348 | \n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:351:18: error: extra argument 'status' in call\n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n    |                  `- error: extra argument 'status' in call\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n353 |           \"storageIdentifier\": identifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:350:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n348 | \n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:351:18: error: cannot infer contextual base in reference to member 'success'\n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n353 |           \"storageIdentifier\": identifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:362:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:362:39: error: type 'String?' has no member 'string'\n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:363:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:363:37: error: type 'String?' has no member 'string'\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:364:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:364:38: error: type 'String?' has no member 'string'\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:365:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n367 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:365:37: error: type 'String?' has no member 'string'\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n367 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:366:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n367 | \n368 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:366:40: error: type 'String?' has no member 'string'\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                                        `- error: type 'String?' has no member 'string'\n367 | \n368 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:370:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n368 |       await logger.error(\n369 |         \"Secure deletion operation failed: \\(error.localizedDescription)\",\n370 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n371 |         source: \"SecureStorageService\"\n372 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:378:19: error: cannot find 'createPrivacyMetadata' in scope\n376 |         status: .failure,\n377 |         error: error,\n378 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n379 |           \"errorMessage\": error.localizedDescription\n380 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:31: error: extra arguments at positions #1, #2 in call\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:376:18: error: cannot infer contextual base in reference to member 'failure'\n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n376 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n377 |         error: error,\n378 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:356:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n354 |         ])\n355 |       )\n356 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n357 |       // Calculate duration before failure\n358 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:467:13: error: type 'CoreSecurityError' has no member 'general'\n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n468 |   }\n469 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:471:13: error: type 'CoreSecurityError' has no member 'general'\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n472 |   }\n473 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:475:13: error: type 'CoreSecurityError' has no member 'general'\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n476 |   }\n477 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:78:12: error: cannot find 'createPrivacyMetadata' in scope\n 76 |     config: SecurityConfigDTO\n 77 |   ) -\u003e LoggingInterfaces.LogMetadata {\n 78 |     return createPrivacyMetadata([\n    |            `- error: cannot find 'createPrivacyMetadata' in scope\n 79 |       \"operationId\": operationID,\n 80 |       \"operation\": String(describing: operation),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:81:27: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 79 |       \"operationId\": operationID,\n 80 |       \"operation\": String(describing: operation),\n 81 |       \"algorithm\": config.algorithm,\n    |                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 82 |       \"timestamp\": \"\\(Date())\"\n 83 |     ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:91:13: error: type 'CoreSecurityError' has no member 'general'\n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 92 |   }\n 93 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:95:13: error: type 'CoreSecurityError' has no member 'general'\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 96 |   }\n 97 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:99:13: error: type 'CoreSecurityError' has no member 'general'\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n100 |   }\n101 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:43:37: error: cannot find type 'KeyStorageManager' in scope\n 41 |    The key manager used for key storage and retrieval\n 42 |    */\n 43 |   private let keyManagementService: KeyStorageManager\n    |                                     `- error: cannot find type 'KeyStorageManager' in scope\n 44 | \n 45 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:32:13: error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n 30 |  - Handle signature-specific errors\n 31 |  */\n 32 | final class SignatureService: SecurityServiceBase {\n    |             |- error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n    |             `- note: add stubs for conformance\n 33 |   // MARK: - Properties\n 34 | \n    :\n 46 |    The logger instance for recording operation details\n 47 |    */\n 48 |   let logger: PrivacyAwareLoggingProtocol\n    |       `- note: candidate has non-matching type 'any PrivacyAwareLoggingProtocol'\n 49 | \n 50 |   // MARK: - Initialisation\n    :\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: candidate has non-matching type '(logger: any PrivacyAwareLoggingProtocol)'\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:42:3: note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 32 |    The logger instance for recording operation details\n 33 |    */\n 34 |   var logger: LoggingInterfaces.LoggingProtocol { get }\n    |       `- note: protocol requires property 'logger' with type 'any LoggingProtocol'\n 35 | \n 36 |   /**\n    :\n 40 |        - logger: The logging service to use for operation logging\n 41 |    */\n 42 |   init(logger: LoggingInterfaces.LoggingProtocol)\n    |   `- note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 43 | \n 44 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:15: error: invalid redeclaration of 'notImplemented(reason:)'\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:99:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 97 |     // Create metadata for logging\n 98 |     var logMetadata=PrivacyMetadata()\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:100:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 98 |     var logMetadata=PrivacyMetadata()\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n102 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:101:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:101:59: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                                                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:103:118: error: extra argument 'source' in call\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                      `- error: extra argument 'source' in call\n104 | \n105 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:107:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n105 |     do {\n106 |       // Extract required parameters from configuration\n107 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n108 |         throw SignatureError.invalidInput(\"Missing input data for signing\")\n109 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:107:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n105 |     do {\n106 |       // Extract required parameters from configuration\n107 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n108 |         throw SignatureError.invalidInput(\"Missing input data for signing\")\n109 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:116:36: error: value of type 'SecurityConfigOptions?' has no subscripts\n114 | \n115 |         // If keyID is provided, retrieve the key from key management\n116 |         if let keyID=config.options[\"keyId\"] {\n    |                                    `- error: value of type 'SecurityConfigOptions?' has no subscripts\n117 |           // Retrieve the key from the key management service\n118 |           let keyResult=await keyManagementService.secureStorage\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:127:35: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n125 |                 data: inputData,\n126 |                 key: keyMaterial,\n127 |                 algorithm: config.algorithm\n    |                                   `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n128 |               )\n129 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:136:48: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n134 |         }\n135 |         // If direct key is provided, use it\n136 |         else if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n137 |           // Use encrypt as a substitute for signature generation\n138 |           signature=try await performSignature(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:136:73: error: value of type 'SecurityConfigOptions?' has no subscripts\n134 |         }\n135 |         // If direct key is provided, use it\n136 |         else if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                                         `- error: value of type 'SecurityConfigOptions?' has no subscripts\n137 |           // Use encrypt as a substitute for signature generation\n138 |           signature=try await performSignature(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:141:31: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n139 |             data: inputData,\n140 |             key: key,\n141 |             algorithm: config.algorithm\n    |                               `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n142 |           )\n143 |         }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:154:25: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n152 |         // Create success metadata for logging\n153 |         var successMetadata=logMetadata\n154 |         successMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n155 |         successMetadata.setPublic(key: \"signatureSize\", value: String(signature.count))\n156 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:155:25: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n153 |         var successMetadata=logMetadata\n154 |         successMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n155 |         successMetadata.setPublic(key: \"signatureSize\", value: String(signature.count))\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n156 | \n157 |         await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:159:53: error: extra argument 'source' in call\n157 |         await logger.info(\n158 |           \"Signing operation completed successfully\", metadata: successMetadata\n159 |         , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                     `- error: extra argument 'source' in call\n160 | \n161 |         // Return successful result with signature\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:165:21: error: cannot find 'createPrivacyMetadata' in scope\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n    |                     `- error: cannot find 'createPrivacyMetadata' in scope\n166 |             \"algorithm\": config.algorithm\n167 |           ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:16: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:33: error: extra arguments at positions #1, #2 in call\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                                 `- error: extra arguments at positions #1, #2 in call\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:33: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:163:20: error: cannot infer contextual base in reference to member 'success'\n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n163 |           status: .success,\n    |                    `- error: cannot infer contextual base in reference to member 'success'\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:164:27: error: value of type 'SendableCryptoMaterial' has no member 'toBase64'\n162 |         return SecurityResultDTO(\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n    |                           `- error: value of type 'SendableCryptoMaterial' has no member 'toBase64'\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n166 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:166:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n166 |             \"algorithm\": config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n167 |           ])\n168 |         )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:175:23: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n173 |         // Create failure metadata for logging\n174 |         var errorMetadata=logMetadata\n175 |         errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                       `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n177 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:176:23: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n174 |         var errorMetadata=logMetadata\n175 |         errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                       `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:178:110: error: missing argument for parameter 'source' in call\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                              `- error: missing argument for parameter 'source' in call\n179 |         , source: \\\"SecurityImplementation\\\")\n180 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:196:21: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n194 |       // Create failure metadata for logging\n195 |       var errorMetadata=logMetadata\n196 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n198 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:197:21: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n195 |       var errorMetadata=logMetadata\n196 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:199:108: error: missing argument for parameter 'source' in call\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                            `- error: missing argument for parameter 'source' in call\n200 |       , source: \\\"SecurityImplementation\\\")\n201 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:169:9: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n167 |           ])\n168 |         )\n169 |       } catch {\n    |         `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n170 |         // Calculate duration before failure\n171 |         let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:226:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n224 |     // Create metadata for logging\n225 |     var logMetadata=PrivacyMetadata()\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:227:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n225 |     var logMetadata=PrivacyMetadata()\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n229 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:228:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:228:59: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                                                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:230:133: error: extra argument 'source' in call\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                                     `- error: extra argument 'source' in call\n231 | \n232 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:234:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n232 |     do {\n233 |       // Extract required parameters from configuration\n234 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n235 |         throw SignatureError.invalidInput(\"Missing input data for verification\")\n236 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:234:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n232 |     do {\n233 |       // Extract required parameters from configuration\n234 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n235 |         throw SignatureError.invalidInput(\"Missing input data for verification\")\n236 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:238:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n236 |       }\n237 | \n238 |       guard let signature=SendableCryptoMaterial.fromBase64(config.options[\"signature\"] ?? \"\")\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n239 |       else {\n240 |         throw SignatureError.invalidInput(\"Missing signature to verify\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:238:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n236 |       }\n237 | \n238 |       guard let signature=SendableCryptoMaterial.fromBase64(config.options[\"signature\"] ?? \"\")\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n239 |       else {\n240 |         throw SignatureError.invalidInput(\"Missing signature to verify\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:244:41: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n242 | \n243 |       // Check if key is provided directly in the options\n244 |       if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                         `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n245 |         // Try to verify the signature using the provided key\n246 |         let isValid=try await performVerification(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:244:66: error: value of type 'SecurityConfigOptions?' has no subscripts\n242 | \n243 |       // Check if key is provided directly in the options\n244 |       if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                                  `- error: value of type 'SecurityConfigOptions?' has no subscripts\n245 |         // Try to verify the signature using the provided key\n246 |         let isValid=try await performVerification(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:250:29: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n248 |           signature: signature,\n249 |           key: key,\n250 |           algorithm: config.algorithm\n    |                             `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n251 |         )\n252 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:258:30: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n256 |         // Create result metadata\n257 |         var verificationMetadata=logMetadata\n258 |         verificationMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                              `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n259 |         verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n260 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:259:30: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n257 |         var verificationMetadata=logMetadata\n258 |         verificationMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n259 |         verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n    |                              `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n260 | \n261 |         if isValid {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:264:55: error: extra argument 'source' in call\n262 |           await logger.info(\n263 |             \"Signature verification completed: Valid signature\", metadata: verificationMetadata\n264 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                       `- error: extra argument 'source' in call\n265 |         } else {\n266 |           await logger.warning(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:268:55: error: extra argument 'source' in call\n266 |           await logger.warning(\n267 |             \"Signature verification completed: Invalid signature\", metadata: verificationMetadata\n268 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                       `- error: extra argument 'source' in call\n269 |         }\n270 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:274:21: error: cannot find 'createPrivacyMetadata' in scope\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n    |                     `- error: cannot find 'createPrivacyMetadata' in scope\n275 |             \"algorithm\": config.algorithm\n276 |           ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:272:16: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n270 | \n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n    |                `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:273:20: error: extra argument 'status' in call\n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n    |                    `- error: extra argument 'status' in call\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:272:33: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n270 | \n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n    |                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:273:20: error: cannot infer contextual base in reference to member 'success'\n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n    |                    `- error: cannot infer contextual base in reference to member 'success'\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:275:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n276 |           ])\n277 |         )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:282:39: error: value of type 'SecurityConfigOptions?' has no subscripts\n280 | \n281 |         // Attempt to get key ID from config\n282 |         guard let keyID=config.options[\"keyId\"] else {\n    |                                       `- error: value of type 'SecurityConfigOptions?' has no subscripts\n283 |           throw SignatureError.invalidInput(\"Neither key nor keyId provided for verification\")\n284 |         }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:297:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n295 |               signature: signature,\n296 |               key: keyMaterial,\n297 |               algorithm: config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n298 |             )\n299 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:305:34: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n303 |             // Create result metadata\n304 |             var verificationMetadata=logMetadata\n305 |             verificationMetadata.setPublic(\n    |                                  `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n306 |               key: \"duration\",\n307 |               value: String(format: \"%.3f s\", duration)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:309:34: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n307 |               value: String(format: \"%.3f s\", duration)\n308 |             )\n309 |             verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n    |                                  `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n310 | \n311 |             if isValid {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:314:59: error: extra argument 'source' in call\n312 |               await logger.info(\n313 |                 \"Signature verification completed: Valid signature\", metadata: verificationMetadata\n314 |               , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                           `- error: extra argument 'source' in call\n315 |             } else {\n316 |               await logger.warning(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:318:59: error: extra argument 'source' in call\n316 |               await logger.warning(\n317 |                 \"Signature verification completed: Invalid signature\", metadata: verificationMetadata\n318 |               , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                           `- error: extra argument 'source' in call\n319 |             }\n320 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:324:25: error: cannot find 'createPrivacyMetadata' in scope\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n    |                         `- error: cannot find 'createPrivacyMetadata' in scope\n325 |                 \"algorithm\": config.algorithm\n326 |               ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:322:20: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n320 | \n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n    |                    `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:323:24: error: extra argument 'status' in call\n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n    |                        `- error: extra argument 'status' in call\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:322:37: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n320 | \n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n    |                                     `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:323:24: error: cannot infer contextual base in reference to member 'success'\n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n    |                        `- error: cannot infer contextual base in reference to member 'success'\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:325:37: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n    |                                     `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n326 |               ])\n327 |             )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:339:21: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n337 |       // Create failure metadata for logging\n338 |       var errorMetadata=logMetadata\n339 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n341 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:340:21: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n338 |       var errorMetadata=logMetadata\n339 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:342:123: error: missing argument for parameter 'source' in call\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                                           `- error: missing argument for parameter 'source' in call\n343 |       , source: \\\"SecurityImplementation\\\")\n344 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:403:27: error: incorrect argument label in call (have 'base64Encoded:', expected 'hexString:')\n401 |     // Implement secure random material generation\n402 |     // For now, this is a placeholder that would be replaced with actual implementation\n403 |     SendableCryptoMaterial(base64Encoded: \"random-material\")\n    |                           `- error: incorrect argument label in call (have 'base64Encoded:', expected 'hexString:')\n404 |   }\n405 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:418:13: error: type 'CoreSecurityError' has no member 'general'\n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n419 |   }\n420 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:422:13: error: type 'CoreSecurityError' has no member 'general'\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n423 |   }\n424 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:426:13: error: type 'CoreSecurityError' has no member 'general'\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n427 |   }\n428 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:16:22: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n14 |   /// - Parameter reason: The reason for the error\n15 |   /// - Returns: A CoreSecurityError with the appropriate error code\n16 |   public static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n17 |     return .invalidInput(\"Invalid verification method: \\(reason)\")\n18 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:23:22: error: invalid redeclaration of 'verificationFailed(reason:)'\n21 |   /// - Parameter reason: The reason for the error\n22 |   /// - Returns: A CoreSecurityError with the appropriate error code\n23 |   public static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'verificationFailed(reason:)'\n24 |     return .authenticationFailed(\"Verification failed: \\(reason)\")\n25 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:30:22: error: invalid redeclaration of 'notImplemented(reason:)'\n28 |   /// - Parameter reason: The reason for the error\n29 |   /// - Returns: A CoreSecurityError with the appropriate error code\n30 |   public static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'notImplemented(reason:)'\n31 |     return .unsupportedOperation(\"Not implemented: \\(reason)\")\n32 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Logging.swift:38:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 36 |  according to the Alpha Dot Five architecture principles.\n 37 |  */\n 38 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 39 |   /**\n 40 |    Logs the start of a security operation with privacy-aware metadata.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  * Batch encryption and decryption for collections of data\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Encrypts data and then stores it securely.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:15: error: invalid redeclaration of 'notImplemented(reason:)'\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:428:13: error: type 'CoreSecurityError' has no member 'general'\n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n429 |   }\n430 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:432:13: error: type 'CoreSecurityError' has no member 'general'\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n433 |   }\n434 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:436:13: error: type 'CoreSecurityError' has no member 'general'\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n437 |   }\n438 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  - Common validation logic is centralised\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Validates configuration for encryption operations.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:205:13: error: type 'CoreSecurityError' has no member 'general'\n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n206 |   }\n207 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:209:13: error: type 'CoreSecurityError' has no member 'general'\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n210 |   }\n211 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:213:13: error: type 'CoreSecurityError' has no member 'general'\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n214 |   }\n215 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:15: error: invalid redeclaration of 'notImplemented(reason:)'\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:52:8: error: type 'CryptoServiceFactory' has no member 'createStandardCryptoService'\n 50 |     // Create standard crypto service\n 51 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 52 |       .createStandardCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createStandardCryptoService'\n 53 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n 54 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:53:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n 51 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 52 |       .createStandardCryptoService()\n 53 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n 54 | \n 55 |     // Use the provided logger or create a default one\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:61:23: error: extra argument 'environment' in call\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n 62 |       )\n 63 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:60:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n 58 |       actualLogger=logger\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n 61 |         environment: .development)\n 62 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:61:23: error: cannot infer contextual base in reference to member 'development'\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n 62 |       )\n 63 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:69:27: error: missing argument for parameter 'secureLogger' in call\n 67 |     let securityService=SecurityServiceActor(\n 68 |       cryptoService: cryptoService,\n 69 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n 70 |     )\n 71 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:96:8: error: type 'CryptoServiceFactory' has no member 'createHighSecurityCryptoService'\n 94 |     // Create high-security crypto service\n 95 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 96 |       .createHighSecurityCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createHighSecurityCryptoService'\n 97 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n 98 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:97:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n 95 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 96 |       .createHighSecurityCryptoService()\n 97 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n 98 | \n 99 |     // Use the provided logger or create a default one with debug level logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:105:23: error: extra argument 'environment' in call\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n106 |       )\n107 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:104:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n102 |       actualLogger=logger\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n105 |         environment: .development)\n106 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:105:23: error: cannot infer contextual base in reference to member 'development'\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n106 |       )\n107 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:113:27: error: missing argument for parameter 'secureLogger' in call\n111 |     let securityService=SecurityServiceActor(\n112 |       cryptoService: cryptoService,\n113 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n114 |     )\n115 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:141:8: error: type 'CryptoServiceFactory' has no member 'createMaxSecurityCryptoService'\n139 |     // Create max-security crypto service\n140 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n141 |       .createMaxSecurityCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createMaxSecurityCryptoService'\n142 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n143 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:142:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n140 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n141 |       .createMaxSecurityCryptoService()\n142 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n143 | \n144 |     // Use the provided logger or create a default one with debug level logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:150:23: error: extra argument 'environment' in call\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n151 |       )\n152 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:149:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n147 |       actualLogger=logger\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n150 |         environment: .development)\n151 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:150:23: error: cannot infer contextual base in reference to member 'development'\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n151 |       )\n152 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:158:27: error: missing argument for parameter 'secureLogger' in call\n156 |     let securityService=SecurityServiceActor(\n157 |       cryptoService: cryptoService,\n158 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n159 |     )\n160 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:172:13: error: type 'CoreSecurityError' has no member 'general'\n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n173 |   }\n174 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:176:13: error: type 'CoreSecurityError' has no member 'general'\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n177 |   }\n178 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:180:13: error: type 'CoreSecurityError' has no member 'general'\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n181 |   }\n182 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:92:13: error: type 'CoreSecurityError' has no member 'general'\n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 93 |   }\n 94 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:96:13: error: type 'CoreSecurityError' has no member 'general'\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 97 |   }\n 98 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:100:13: error: type 'CoreSecurityError' has no member 'general'\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n101 |   }\n102 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               `- warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:30:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 28 |   /// - Returns: The generated random integer\n 29 |   /// - Throws: SecurityError if random generation fails\n 30 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 31 | \n 32 |   /// Generates a cryptographically secure random integer within the specified closed range\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               `- warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:36:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 34 |   /// - Returns: The generated random integer\n 35 |   /// - Throws: SecurityError if random generation fails\n 36 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 37 | \n 38 |   /// Generates a cryptographically secure random double between 0.0 and 1.0\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:15: error: invalid redeclaration of 'notImplemented(reason:)'\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:53:27: error: type 'SecurityError' has no member 'alreadyInitialized'\n 51 |   public func initialise(entropySource: EntropySource) async throws {\n 52 |     guard !isInitialised else {\n 53 |       throw SecurityError.alreadyInitialized(\"Random data service is already initialised\")\n    |                           `- error: type 'SecurityError' has no member 'alreadyInitialized'\n 54 |     }\n 55 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:42: error: missing argument label 'entries:' in call\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:60:69: error: cannot infer contextual base in reference to member 'public'\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n    |                                                                     `- error: cannot infer contextual base in reference to member 'public'\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n 62 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:61:71: error: cannot infer contextual base in reference to member 'public'\n 59 |       metadata: LogMetadataDTOCollection([\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n    |                                                                       `- error: cannot infer contextual base in reference to member 'public'\n 62 |       ]),\n 63 |       source: \"RandomDataServiceActor.initialise\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:78:31: error: type 'SecurityError' has no member 'initialisationFailed'\n 76 | \n 77 |         guard result == errSecSuccess else {\n 78 |           throw SecurityError.initialisationFailed(\n    |                               `- error: type 'SecurityError' has no member 'initialisationFailed'\n 79 |             reason: \"Hardware entropy source is not available\"\n 80 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:85:31: error: type 'SecurityError' has no member 'initialisationFailed'\n 83 |         // Ensure the bytes are actually random\n 84 |         guard bytes != testBytes else {\n 85 |           throw SecurityError.initialisationFailed(\n    |                               `- error: type 'SecurityError' has no member 'initialisationFailed'\n 86 |             reason: \"Entropy source did not produce random data\"\n 87 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:65: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:90: error: missing argument label 'entries:' in call\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                                          `- error: missing argument label 'entries:' in call\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:90: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:100:69: error: cannot infer contextual base in reference to member 'public'\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                     `- error: cannot infer contextual base in reference to member 'public'\n101 |       ]),\n102 |       source: \"RandomDataServiceActor.initialise\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:42: error: missing argument label 'entries:' in call\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:132:53: error: cannot infer contextual base in reference to member 'public'\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n132 |         \"length\": (value: String(length), privacy: .public)\n    |                                                     `- error: cannot infer contextual base in reference to member 'public'\n133 |       ]),\n134 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:142:27: error: type 'SecurityError' has no member 'operationFailed'\n140 | \n141 |     guard result == errSecSuccess else {\n142 |       throw SecurityError.operationFailed(\"SecRandomCopyBytes failed with error \\(result)\")\n    |                           `- error: type 'SecurityError' has no member 'operationFailed'\n143 |     }\n144 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:56: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                        `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:81: error: missing argument label 'entries:' in call\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                                                 `- error: missing argument label 'entries:' in call\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:81: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                                                 `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:148:33: error: extra arguments at positions #2, #3 in call\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                 `- error: extra arguments at positions #2, #3 in call\n149 |       ]),\n150 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\nSwift.String.init:2:19: note: 'init(_:)' declared here\n1 | struct String {\n2 | @inlinable public init\u003cT\u003e(_ value: T) where T : LosslessStringConvertible}\n  |                   `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:148:126: error: cannot infer contextual base in reference to member 'public'\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                              `- error: cannot infer contextual base in reference to member 'public'\n149 |       ]),\n150 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:42: error: missing argument label 'entries:' in call\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:167:68: error: cannot infer contextual base in reference to member 'public'\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n    |                                                                    `- error: cannot infer contextual base in reference to member 'public'\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:168:68: error: cannot infer contextual base in reference to member 'public'\n166 |       metadata: LogMetadataDTOCollection([\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n    |                                                                    `- error: cannot infer contextual base in reference to member 'public'\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n170 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:169:63: error: cannot infer contextual base in reference to member 'public'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n    |                                                               `- error: cannot infer contextual base in reference to member 'public'\n170 |       ]),\n171 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:177:27: error: type 'SecurityError' has no member 'invalidInput'\n175 |     let width=range.upperBound - range.lowerBound\n176 |     guard width \u003e 0 else {\n177 |       throw SecurityError.invalidInput(\"Range width must be greater than zero\")\n    |                           `- error: type 'SecurityError' has no member 'invalidInput'\n178 |     }\n179 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:58: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                          `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:83: error: missing argument label 'entries:' in call\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                                                   `- error: missing argument label 'entries:' in call\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:83: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                                                   `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:198:32: error: extra arguments at positions #2, #3 in call\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                `- error: extra arguments at positions #2, #3 in call\n199 |       ]),\n200 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\nSwift.String.init:2:19: note: 'init(_:)' declared here\n1 | struct String {\n2 | @inlinable public init\u003cT\u003e(_ value: T) where T : LosslessStringConvertible}\n  |                   `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:198:120: error: cannot infer contextual base in reference to member 'public'\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                        `- error: cannot infer contextual base in reference to member 'public'\n199 |       ]),\n200 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:65: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:89: error: extra arguments at positions #2, #3 in call\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                                         `- error: extra arguments at positions #2, #3 in call\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogMetadataDTOCollection.swift:20:10: note: 'init(entries:)' declared here\n 18 |   ///\n 19 |   /// - Parameter entries: The initial metadata entries\n 20 |   public init(entries: [LogMetadataDTO]) {\n    |          `- note: 'init(entries:)' declared here\n 21 |     self.entries=entries\n 22 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:90: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type '[LogMetadataDTO]'\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                                          `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type '[LogMetadataDTO]'\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:57: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                         `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:82: error: missing argument label 'entries:' in call\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                                                  `- error: missing argument label 'entries:' in call\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:82: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                                                  `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:243:32: error: extra arguments at positions #3, #4 in call\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                `- error: extra arguments at positions #3, #4 in call\n244 |       ]),\n245 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n\nFoundation.String.init:2:8: note: 'init(format:_:)' declared here\n1 | struct String {\n2 | public init(format: __shared String, _ arguments: any CVarArg...)}\n  |        `- note: 'init(format:_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:243:136: error: cannot infer contextual base in reference to member 'public'\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                                        `- error: cannot infer contextual base in reference to member 'public'\n244 |       ]),\n245 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:257:27: error: type 'SecurityError' has no member 'notInitialized'\n255 |   private func validateInitialisation() throws {\n256 |     guard isInitialised else {\n257 |       throw SecurityError.notInitialized(\"Random data service is not initialised\")\n    |                           `- error: type 'SecurityError' has no member 'notInitialized'\n258 |     }\n259 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:266:13: error: type 'CoreSecurityError' has no member 'general'\n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n267 |   }\n268 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:270:13: error: type 'CoreSecurityError' has no member 'general'\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n271 |   }\n272 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:274:13: error: type 'CoreSecurityError' has no member 'general'\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n275 |   }\n276 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:25:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n23 |   /// - Returns: A fully configured random data service\n24 |   public static func createDefault() -\u003e RandomDataServiceProtocol {\n25 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n26 |       subsystem: \"uk.co.umbra.security\",\n27 |       category: \"RandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:45:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n43 |   /// - Returns: A fully configured high-security random data service\n44 |   public static func createHighSecurity() -\u003e RandomDataServiceProtocol {\n45 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n46 |       subsystem: \"uk.co.umbra.security\",\n47 |       category: \"HighSecurityRandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:63:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n61 |   /// - Returns: A minimally configured random data service\n62 |   public static func createMinimal() -\u003e RandomDataServiceProtocol {\n63 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n64 |       subsystem: \"uk.co.umbra.security\",\n65 |       category: \"MinimalRandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:83:13: error: type 'CoreSecurityError' has no member 'general'\n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n84 |   }\n85 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:87:13: error: type 'CoreSecurityError' has no member 'general'\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n88 |   }\n89 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:91:13: error: type 'CoreSecurityError' has no member 'general'\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n92 |   }\n93 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:110:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n108 | \n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n111 |     return .invalidVerificationMethod(reason: reason)\n112 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:114:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n112 |   }\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n115 |     return .verificationFailed(reason: reason)\n116 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:118:15: error: invalid redeclaration of 'notImplemented(reason:)'\n116 |   }\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n119 |     return .notImplemented(reason: reason)\n120 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:9:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  7 |   var metadata = PrivacyMetadata()\n  8 |   for (key, value) in dict {\n  9 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 10 |   }\n 11 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:95:27: error: cannot find 'LoggingServices' in scope\n 93 |       cryptoService: cryptoService,\n 94 |       logger: logger,\n 95 |       secureLogger: await LoggingServices.createSecureLogger(\n    |                           `- error: cannot find 'LoggingServices' in scope\n 96 |         subsystem: \"com.umbra.security\",\n 97 |         category: \"SecurityService\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:111:13: error: ambiguous use of 'invalidVerificationMethod(reason:)'\n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n111 |     return .invalidVerificationMethod(reason: reason)\n    |             `- error: ambiguous use of 'invalidVerificationMethod(reason:)'\n112 |   }\n113 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: note: found this candidate \n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:258:15: note: found this candidate \n256 | \n257 | extension CoreSecurityError {\n258 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n259 |     return .invalidVerificationMethod(reason: reason)\n260 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:115:13: error: ambiguous use of 'verificationFailed(reason:)'\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n115 |     return .verificationFailed(reason: reason)\n    |             `- error: ambiguous use of 'verificationFailed(reason:)'\n116 |   }\n117 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: note: found this candidate \n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:262:15: note: found this candidate \n260 |   }\n261 |   \n262 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n263 |     return .verificationFailed(reason: reason)\n264 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:119:13: error: ambiguous use of 'notImplemented(reason:)'\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n119 |     return .notImplemented(reason: reason)\n    |             `- error: ambiguous use of 'notImplemented(reason:)'\n120 |   }\n121 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              `- error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 31 |   // MARK: - Private Properties\n 32 | \n    :\n349 |    - Returns: Result of the operation\n350 |    */\n351 |   public func performSecureOperation(\n    |               `- note: candidate has non-matching type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n352 |     operation: SecurityOperation,\n353 |     config: SecurityConfigDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              |- error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n    |              `- note: add stubs for conformance\n 31 |   // MARK: - Private Properties\n 32 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:109:8: note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:16:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 14 |   var metadata = PrivacyMetadata()\n 15 |   for (key, value) in dict {\n 16 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 17 |   }\n 18 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:69:50: error: extra arguments at positions #1, #3, #4, #5 in call\n 67 |     self.logger = logger\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n    |                                                  `- error: extra arguments at positions #1, #3, #4, #5 in call\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/DTOs/SecurityDTOs.swift:23:10: note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 21 |   ///   - loggingLevel: The logging level for security operations\n 22 |   ///   - randomizationOptions: Options for secure random number generation\n 23 |   public init(\n    |          `- note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 24 |     securityLevel: CoreSecurityTypes.SecurityLevelDTO = .standard,\n 25 |     loggingLevel: CoreSecurityTypes.SecurityLogLevelDTO = .warning,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:70:22: error: cannot infer contextual base in reference to member 'standard'\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n 70 |       providerType: .standard,\n    |                      `- error: cannot infer contextual base in reference to member 'standard'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:72:29: error: cannot infer contextual base in reference to member 'aes256'\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n    |                             `- error: cannot infer contextual base in reference to member 'aes256'\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:73:23: error: cannot infer contextual base in reference to member 'sha256'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n    |                       `- error: cannot infer contextual base in reference to member 'sha256'\n 74 |       options: nil\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:74:16: error: 'nil' requires a contextual type\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n    |                `- error: 'nil' requires a contextual type\n 75 |     )\n 76 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:83:41: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 81 |         metadata: createPrivacyMetadata([\n 82 |           \"serviceId\": serviceId.uuidString,\n 83 |           \"providerType\": configuration.providerType.rawValue,\n    |                                         `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 84 |           \"securityLevel\": configuration.securityLevel.rawValue\n 85 |         ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:111:44: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n109 |       metadata: createPrivacyMetadata([\n110 |         \"serviceId\": serviceId.uuidString,\n111 |         \"providerType\": self.configuration.providerType.rawValue,\n    |                                            `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n112 |         \"securityLevel\": self.configuration.securityLevel.rawValue\n113 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:126:31: error: type 'CoreSecurityError' has no member 'serviceUnavailable'\n124 |   private func validateInitialisation() throws {\n125 |     if !isInitialised {\n126 |       throw CoreSecurityError.serviceUnavailable(reason: \"Security service not initialised\")\n    |                               `- error: type 'CoreSecurityError' has no member 'serviceUnavailable'\n127 |     }\n128 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:155:16: error: type 'SecurityEventStatus' has no member 'started'\n153 |     await secureLogger.securityEvent(\n154 |       action: \"Encrypt\",\n155 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n156 |       subject: nil,\n157 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:165:29: error: ambiguous use of 'notImplemented(reason:)'\n163 |     \n164 |     // Not implemented yet - would delegate to crypto service\n165 |     throw CoreSecurityError.notImplemented(reason: \"Encrypt operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n166 |   }\n167 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:180:16: error: type 'SecurityEventStatus' has no member 'started'\n178 |     await secureLogger.securityEvent(\n179 |       action: \"Decrypt\",\n180 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n181 |       subject: nil,\n182 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:190:29: error: ambiguous use of 'notImplemented(reason:)'\n188 |     \n189 |     // Not implemented yet - would delegate to crypto service\n190 |     throw CoreSecurityError.notImplemented(reason: \"Decrypt operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n191 |   }\n192 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:205:16: error: type 'SecurityEventStatus' has no member 'started'\n203 |     await secureLogger.securityEvent(\n204 |       action: \"GenerateKey\",\n205 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n206 |       subject: nil,\n207 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:215:29: error: ambiguous use of 'notImplemented(reason:)'\n213 |     \n214 |     // Not implemented yet - would delegate to crypto service\n215 |     throw CoreSecurityError.notImplemented(reason: \"Key generation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n216 |   }\n217 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:230:16: error: type 'SecurityEventStatus' has no member 'started'\n228 |     await secureLogger.securityEvent(\n229 |       action: \"SecureStore\",\n230 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n231 |       subject: nil,\n232 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:240:29: error: ambiguous use of 'notImplemented(reason:)'\n238 |     \n239 |     // Not implemented yet - would delegate to crypto service\n240 |     throw CoreSecurityError.notImplemented(reason: \"Secure store operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n241 |   }\n242 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:255:16: error: type 'SecurityEventStatus' has no member 'started'\n253 |     await secureLogger.securityEvent(\n254 |       action: \"SecureRetrieve\",\n255 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n256 |       subject: nil,\n257 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:265:29: error: ambiguous use of 'notImplemented(reason:)'\n263 |     \n264 |     // Not implemented yet - would delegate to crypto service\n265 |     throw CoreSecurityError.notImplemented(reason: \"Secure retrieve operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n266 |   }\n267 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:280:16: error: type 'SecurityEventStatus' has no member 'started'\n278 |     await secureLogger.securityEvent(\n279 |       action: \"SecureDelete\",\n280 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n281 |       subject: nil,\n282 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:290:29: error: ambiguous use of 'notImplemented(reason:)'\n288 |     \n289 |     // Not implemented yet - would delegate to crypto service\n290 |     throw CoreSecurityError.notImplemented(reason: \"Secure delete operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n291 |   }\n292 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:305:16: error: type 'SecurityEventStatus' has no member 'started'\n303 |     await secureLogger.securityEvent(\n304 |       action: \"Sign\",\n305 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n306 |       subject: nil,\n307 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:315:29: error: ambiguous use of 'notImplemented(reason:)'\n313 |     \n314 |     // Not implemented yet - would delegate to crypto service\n315 |     throw CoreSecurityError.notImplemented(reason: \"Sign operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n316 |   }\n317 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:330:16: error: type 'SecurityEventStatus' has no member 'started'\n328 |     await secureLogger.securityEvent(\n329 |       action: \"Verify\",\n330 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n331 |       subject: nil,\n332 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:340:29: error: ambiguous use of 'notImplemented(reason:)'\n338 |     \n339 |     // Not implemented yet - would delegate to crypto service\n340 |     throw CoreSecurityError.notImplemented(reason: \"Verify operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n341 |   }\n342 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:360:16: error: type 'SecurityEventStatus' has no member 'started'\n358 |     await secureLogger.securityEvent(\n359 |       action: \"SecurityOperation\",\n360 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n361 |       subject: nil,\n362 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:370:29: error: ambiguous use of 'notImplemented(reason:)'\n368 |     \n369 |     // Not implemented yet\n370 |     throw CoreSecurityError.notImplemented(reason: \"Generic secure operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n371 |   }\n372 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:382:29: error: type 'EncryptionAlgorithm' has no member 'aes256'\n380 |     // Create and return a new configuration based on the provided options\n381 |     return SecurityConfigDTO(\n382 |       encryptionAlgorithm: .aes256,\n    |                             `- error: type 'EncryptionAlgorithm' has no member 'aes256'\n383 |       hashAlgorithm: .sha256,\n384 |       providerType: .standard,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:384:22: error: type 'SecurityProviderType' has no member 'standard'\n382 |       encryptionAlgorithm: .aes256,\n383 |       hashAlgorithm: .sha256,\n384 |       providerType: .standard,\n    |                      `- error: type 'SecurityProviderType' has no member 'standard'\n385 |       options: options\n386 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceFactory.swift:15:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 13 |   var metadata = PrivacyMetadata()\n 14 |   for (key, value) in dict {\n 15 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 16 |   }\n 17 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: error: invalid redeclaration of 'notImplemented(reason:)'\n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:8:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  6 |   var metadata = PrivacyMetadata()\n  7 |   for (key, value) in dict {\n  8 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  9 |   }\n 10 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:114:39: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n112 |     // Add any additional metadata\n113 |     for (key, value) in additionalMetadata {\n114 |       metricMetadata = metricMetadata.withPublic(key: key, value: value)\n    |                                       `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n115 |     }\n116 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:119:39: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n117 |     // Add historical performance if available\n118 |     if let avgDuration=averagePerformance(for: operation) {\n119 |       metricMetadata = metricMetadata.withPublic(key: \"avgDurationMs\", value: String(format: \"%.2f\", avgDuration))\n    |                                       `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n120 |     }\n121 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:124:20: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n122 |     // Log the metrics with appropriate level based on success\n123 |     if success {\n124 |       await logger.info(\"Security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n    |                    `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n125 |     } else {\n126 |       await logger.warning(\"Failed security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:126:20: warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n124 |       await logger.info(\"Security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n125 |     } else {\n126 |       await logger.warning(\"Failed security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n    |                    `- warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n127 |     }\n128 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:185:41: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n183 |     // Add context information\n184 |     for (key, value) in context {\n185 |       anomalyMetadata = anomalyMetadata.withPublic(key: key, value: value)\n    |                                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n186 |     }\n187 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:189:18: warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n187 | \n188 |     // Log the anomaly\n189 |     await logger.warning(\"Performance anomaly detected in \\(operation.description)\", metadata: anomalyMetadata, source: \"SecurityImplementation\")\n    |                  `- warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n190 | \n191 |     // Prepare privacy-tagged metadata for secure logger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:286:17: error: type 'LogPrivacyLevel' has no member 'restricted'\n284 |     for pattern in restrictedKeyPatterns {\n285 |       if key.lowercased().contains(pattern) {\n286 |         return .restricted\n    |                 `- error: type 'LogPrivacyLevel' has no member 'restricted'\n287 |       }\n288 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:8:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  6 |   var metadata = PrivacyMetadata()\n  7 |   for (key, value) in dict {\n  8 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  9 |   }\n 10 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:93:43: error: cannot find 'startTime' in scope\n 91 |   ) async {\n 92 |     // Calculate duration before failure\n 93 |     let duration=Date().timeIntervalSince(startTime) * 1000\n    |                                           `- error: cannot find 'startTime' in scope\n 94 | \n 95 |     // Create error metadata for logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:119:70: error: reference to member 'int' cannot be resolved without a contextual type\n117 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n118 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operation.rawValue), privacyLevel: .public),\n119 |         \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration)), privacyLevel: .public),\n    |                                                                      `- error: reference to member 'int' cannot be resolved without a contextual type\n120 |         \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n121 |         \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(sanitizeErrorMessage(error.localizedDescription)), privacyLevel: .sensitive)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:126:12: error: unexpected non-void return value in void function\n124 | \n125 |     // Return a standardised error result\n126 |     return createErrorResult(error: error, duration: duration)\n    |            |- error: unexpected non-void return value in void function\n    |            `- note: did you mean to add a return type?\n127 |   }\n128 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:193:22: error: cannot find 'operationID' in scope\n191 |     // Create standard metadata\n192 |     let standardMetadata = createPrivacyMetadata([\n193 |       \"operationId\": operationID,\n    |                      `- error: cannot find 'operationID' in scope\n194 |       \"operation\": operation.rawValue,\n195 |       \"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:195:44: error: cannot find 'duration' in scope\n193 |       \"operationId\": operationID,\n194 |       \"operation\": operation.rawValue,\n195 |       \"durationMs\": String(format: \"%.2f\", duration),\n    |                                            `- error: cannot find 'duration' in scope\n196 |       \"errorType\": String(describing: type(of: error)),\n197 |       \"errorMessage\": sanitizeErrorMessage(error.localizedDescription)\nTarget //packages/UmbraImplementations/Sources/APIServices:APIServices failed to build\nINFO: Elapsed time: 4.152s, Critical Path: 4.00s\nINFO: 2 processes: 54 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator",
    "success": false,
    "start_time": "2025-04-09T00:54:27.97556+01:00",
    "end_time": "2025-04-09T00:54:32.876339+01:00",
    "duration": "4.900756875s",
    "output": "INFO: Invocation ID: acd6e98e-21a6-4b81-8803-4a37066644cc\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator (5 packages loaded, 124 targets configured).\n[9 / 12] Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices; 1s disk-cache, worker\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/BackupServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/BackupServices:BackupServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/BackupServices/BackupServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:58:60: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n  56 | \n  57 |   /// Active operation cancellation tokens\n  58 |   private var activeOperationsCancellationTokens: [String: BackupOperationCancellationTokenImpl]=[:]\n     |                                                            `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n  59 | \n  60 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:729:45: error: cannot find type 'VerificationResult' in scope\n 727 |     repairMode: BackupInterfaces.RepairMode?=nil,\n 728 |     options: BackupInterfaces.VerifyOptions?=nil\n 729 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n     |                                             `- error: cannot find type 'VerificationResult' in scope\n 730 |     // Create a log context\n 731 |     let logContext=BackupLogContextImpl(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:727:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n 725 |     snapshotID: String?,\n 726 |     verifyData: Bool=true,\n 727 |     repairMode: BackupInterfaces.RepairMode?=nil,\n     |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n 728 |     options: BackupInterfaces.VerifyOptions?=nil\n 729 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:42:14: error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n  40 |  - Progress reporting through AsyncStream\n  41 |  */\n  42 | public actor BackupServicesActor: BackupServiceProtocol {\n     |              |- error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n     |              `- note: add stubs for conformance\n  43 |   // MARK: - Properties\n  44 | \n     :\n 118 |    * - Returns: A Result containing either the operation response or an error\n 119 |    */\n 120 |   public func createBackup(\n     |               `- note: candidate has non-matching type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 121 |     sources: [URL],\n 122 |     excludePaths: [URL]?,\n     :\n 264 |    * - Returns: A Result containing either the operation response or an error\n 265 |    */\n 266 |   public func restoreBackup(\n     |               `- note: candidate has non-matching type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 267 |     snapshotID: String,\n 268 |     targetPath: URL,\n     :\n 404 |    * - Returns: A Result containing either the list of snapshots or an error\n 405 |    */\n 406 |   public func listSnapshots(\n     |               `- note: candidate has non-matching type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n 407 |     tags: [String]?,\n 408 |     before: Date?,\n     :\n 497 |    * - Returns: A Result containing either the operation response or an error\n 498 |    */\n 499 |   public func deleteBackup(\n     |               `- note: candidate has non-matching type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n 500 |     snapshotID: String,\n 501 |     deleteOptions: DeleteOptions?\n     :\n 611 |    * - Returns: A Result containing either the operation response or an error\n 612 |    */\n 613 |   public func performMaintenance(\n     |               `- note: candidate has non-matching type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n 614 |     type: MaintenanceType,\n 615 |     maintenanceOptions: MaintenanceOptions?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Protocols/BackupServiceProtocol.swift:58:8: note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 56 |    * - Returns: A Result containing either the operation response or an error\n 57 |    */\n 58 |   func createBackup(\n    |        `- note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 59 |     sources: [URL],\n 60 |     excludePaths: [URL]?,\n    :\n 77 |    * - Returns: A Result containing either the operation response or an error\n 78 |    */\n 79 |   func restoreBackup(\n    |        `- note: protocol requires function 'restoreBackup(snapshotID:targetPath:includePaths:excludePaths:restoreOptions:)' with type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 80 |     snapshotID: String,\n 81 |     targetPath: URL,\n    :\n 99 |    * - Returns: A Result containing either the list of snapshots or an error\n100 |    */\n101 |   func listSnapshots(\n    |        `- note: protocol requires function 'listSnapshots(tags:before:after:listOptions:)' with type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n102 |     tags: [String]?,\n103 |     before: Date?,\n    :\n117 |    * - Returns: A Result containing either the operation response or an error\n118 |    */\n119 |   func deleteBackup(\n    |        `- note: protocol requires function 'deleteBackup(snapshotID:deleteOptions:)' with type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n120 |     snapshotID: String,\n121 |     deleteOptions: DeleteOptions?\n    :\n134 |    * - Returns: A Result containing either the operation response or an error\n135 |    */\n136 |   func performMaintenance(\n    |        `- note: protocol requires function 'performMaintenance(type:maintenanceOptions:)' with type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n137 |     type: MaintenanceType,\n138 |     maintenanceOptions: MaintenanceOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:32:13: error: cannot find type 'LoggingProtocol' in scope\n 30 |     resticService: ResticServiceProtocol,\n 31 |     resultParser: SnapshotResultParser,\n 32 |     logger: LoggingProtocol\n    |             `- error: cannot find type 'LoggingProtocol' in scope\n 33 |   ) {\n 34 |     self.resticService=resticService\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:40:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 38 |   public init(\n 39 |     logger: any LoggingProtocol,\n 40 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 41 |     metricsCollector: BackupMetricsCollector,\n 42 |     errorLogContextMapper: ErrorLogContextMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:72:26: error: cannot find type 'CancellationToken' in scope\n  70 |     parameters: BackupCreateParameters,\n  71 |     progressReporter: BackupProgressReporter?,\n  72 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n  73 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n  74 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:144:26: error: cannot find type 'CancellationToken' in scope\n 142 |     parameters: BackupRestoreParameters,\n 143 |     progressReporter: BackupProgressReporter?,\n 144 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 145 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n 146 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:270:26: error: cannot find type 'CancellationToken' in scope\n 268 |   public func deleteBackup(\n 269 |     parameters: BackupDeleteParameters,\n 270 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 271 |   ) async throws -\u003e DeleteResult {\n 272 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:964:26: error: cannot find type 'CancellationToken' in scope\n 962 |     parameters: BackupMaintenanceParameters,\n 963 |     progressReporter: BackupProgressReporter?,\n 964 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 965 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupProgressInfo\u003e) {\n 966 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:888:30: error: value of type 'DeleteResponse' has no member 'errors'\n 886 |       return DeleteResult(\n 887 |         snapshotID: snapshotID,\n 888 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                              `- error: value of type 'DeleteResponse' has no member 'errors'\n 889 |         filesDeleted: response.filesDeleted ?? 0,\n 890 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:888:57: error: value of type 'DeleteResponse' has no member 'errors'\n 886 |       return DeleteResult(\n 887 |         snapshotID: snapshotID,\n 888 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                                                         `- error: value of type 'DeleteResponse' has no member 'errors'\n 889 |         filesDeleted: response.filesDeleted ?? 0,\n 890 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:268:13: warning: variable 'args' was never mutated; consider changing to 'let' constant\n266 |       operation: { _, reporter, _ in\n267 |         // Create a command to get snapshot details with statistics\n268 |         var args=[\"snapshots\", snapshotID, \"--json\", \"--stats\"]\n    |             `- warning: variable 'args' was never mutated; consider changing to 'let' constant\n269 | \n270 |         let command=ResticCommandImpl(arguments: args)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:19:23: error: cannot find type 'LoggingProtocol' in scope\n 17 | \n 18 |   /// Logger for snapshot operations\n 19 |   private let logger: LoggingProtocol\n    |                       `- error: cannot find type 'LoggingProtocol' in scope\n 20 | \n 21 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupCancellationHandler.swift:7:58: error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 5 |  * Implementation of the cancellation handler for backup operations.\n 6 |  */\n 7 | public actor BackupCancellationHandler: BackupInterfaces.CancellationHandlerProtocol {\n   |                                                          `- error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 8 |   /// Map of operation IDs to cancellation tokens\n 9 |   private var tokens: [UUID: BackupCancellationToken]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:17:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 15 | \n 16 |   /// Handler for operation cancellation\n 17 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 18 | \n 19 |   /// Collector for metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:16:35: error: cannot find type 'CancellationHandlerProtocol' in scope\n 14 |  * - Support for both task-based and token-based cancellation\n 15 |  */\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n    |                                   `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cany Sendable, Error\u003e]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:174:21: error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n172 |  * Implementation of BackupCancellationToken.\n173 |  */\n174 | private final class BackupCancellationTokenImpl: BackupCancellationToken, @unchecked Sendable {\n    |                     |- error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n    |                     `- note: add stubs for conformance\n175 |   /// The unique identifier for this token\n176 |   public let id: String\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/BackupCancellationToken.swift:25:8: note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n23 |    * - Parameter callback: The callback to register\n24 |    */\n25 |   func registerCancellationCallback(_ callback: @escaping @Sendable () -\u003e Void) async\n   |        `- note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n26 | }\n27 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:27:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 25 | \n 26 |   /// Handler for operation cancellation\n 27 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 28 | \n 29 |   /// Collector for operation metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:52:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 50 |   public init(\n 51 |     resticService: ResticServiceProtocol,\n 52 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 53 |     metricsCollector: BackupMetricsCollector,\n 54 |     logger: any LoggingProtocol,\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:14:28: error: cannot find type 'DomainLoggerProtocol' in scope\n 12 |  * file paths and backup metadata.\n 13 |  */\n 14 | public actor BackupLogger: DomainLoggerProtocol {\n    |                            `- error: cannot find type 'DomainLoggerProtocol' in scope\n 15 |   /// The underlying logger\n 16 |   private let loggingService: any LoggingProtocol\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:376:25: error: cannot find type 'MetadataCollection' in scope\n374 | \n375 | extension BackupLogContext {\n376 |   func getMetadata() -\u003e MetadataCollection {\n    |                         `- error: cannot find type 'MetadataCollection' in scope\n377 |     // Implement the getMetadata method\n378 |     // This is a placeholder, you should implement the actual logic to get the metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:111:32: error: cannot find type 'MetadataCollection' in scope\n109 |    * - Returns: The metadata collection\n110 |    */\n111 |   public func getMetadata() -\u003e MetadataCollection {\n    |                                `- error: cannot find type 'MetadataCollection' in scope\n112 |     metadata\n113 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:12:15: error: inheritance from non-protocol type 'BackupLogContext'\n 10 |  * allowing for structured logging with appropriate privacy classifications.\n 11 |  */\n 12 | public struct BackupLogContextImpl: BackupLogContext, Sendable {\n    |               `- error: inheritance from non-protocol type 'BackupLogContext'\n 13 |   /// The domain name for the log context\n 14 |   public let domainName: String\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:221:25: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n    |                         `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n222 |     BackupInterfaces.SnapshotFileEntry(\n223 |       path: file.path ?? \"\",\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:220:8: error: no type named 'SnapshotFile' in module 'BackupServices'\n218 |   public static func toInterfaceSnapshotFileEntry(\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n    |        `- error: no type named 'SnapshotFile' in module 'BackupServices'\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n222 |     BackupInterfaces.SnapshotFileEntry(\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:241:24: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n    |                        `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n242 |     guard let files else { return nil }\n243 |     return files.map(toInterfaceSnapshotFileEntry)\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:240:78: error: no type named 'SnapshotFile' in module 'BackupServices'\n238 |    * - Returns: An array of converted snapshot file entries compatible with the interfaces module\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n    |                                                                              `- error: no type named 'SnapshotFile' in module 'BackupServices'\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n242 |     guard let files else { return nil }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:18:14: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n16 |   /// - Returns: A ProgressCancellationToken that delegates to the original token\n17 |   public static func asProgressCancellationToken(\n18 |     _ token: BackupOperationCancellationTokenImpl\n   |              `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n19 |   ) -\u003e ProgressCancellationToken {\n20 |     ProgressCancellationTokenAdapter(token: token)\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:28:22: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n26 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken,\n27 | @unchecked Sendable {\n28 |   private let token: BackupOperationCancellationTokenImpl\n   |                      `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:31:15: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n31 |   init(token: BackupOperationCancellationTokenImpl) {\n   |               `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n32 |     self.token=token\n33 |     // Set up task to monitor the cancellation state\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:87:11: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n85 | \n86 | /// Extension to BackupOperationCancellationTokenImpl for tracking with BackupOperation\n87 | extension BackupOperationCancellationTokenImpl {\n   |           `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n88 |   /// Register this token with the given operation\n89 |   ///\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:866:6: error: consecutive statements on a line must be separated by ';'\n 864 |       // Map the error and rethrow\n 865 |       throw errorMapper.mapError(error)\n 866 |     } finally {\n     |      `- error: consecutive statements on a line must be separated by ';'\n 867 |       // Unregister the token\n 868 |       await cancellationHandler.unregisterToken(for: parameters.operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:82:28: error: missing argument for parameter 'source' in call\n 80 |    */\n 81 |   public func toLogContext() -\u003e LogContext {\n 82 |     var context=LogContext()\n    |                            `- error: missing argument for parameter 'source' in call\n 83 | \n 84 |     context.add(\"operation_id\", operationID, privacy: .public)\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swift:408:10: note: 'init(source:metadata:correlationID:timestamp:domainName:)' declared here\n406 |   ///   - correlationId: Unique identifier for correlating related logs\n407 |   ///   - timestamp: Timestamp (defaults to a pre-generated value)\n408 |   public init(\n    |          `- note: 'init(source:metadata:correlationID:timestamp:domainName:)' declared here\n409 |     source: String,\n410 |     metadata: PrivacyMetadata?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:84:56: error: cannot infer contextual base in reference to member 'public'\n 82 |     var context=LogContext()\n 83 | \n 84 |     context.add(\"operation_id\", operationID, privacy: .public)\n    |                                                        `- error: cannot infer contextual base in reference to member 'public'\n 85 |     context.add(\"operation_type\", operationType.rawValue, privacy: .public)\n 86 | \n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:85:69: error: cannot infer contextual base in reference to member 'public'\n 83 | \n 84 |     context.add(\"operation_id\", operationID, privacy: .public)\n 85 |     context.add(\"operation_type\", operationType.rawValue, privacy: .public)\n    |                                                                     `- error: cannot infer contextual base in reference to member 'public'\n 86 | \n 87 |     if let paths=sourcePaths {\n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:88:52: error: cannot infer contextual base in reference to member 'private'\n 86 | \n 87 |     if let paths=sourcePaths {\n 88 |       context.add(\"source_paths\", paths, privacy: .private)\n    |                                                    `- error: cannot infer contextual base in reference to member 'private'\n 89 |     }\n 90 | \n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:92:48: error: cannot infer contextual base in reference to member 'public'\n 90 | \n 91 |     if let id=snapshotID {\n 92 |       context.add(\"snapshot_id\", id, privacy: .public)\n    |                                                `- error: cannot infer contextual base in reference to member 'public'\n 93 |     }\n 94 | \n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:96:50: error: cannot infer contextual base in reference to member 'public'\n 94 | \n 95 |     if let id=repositoryID {\n 96 |       context.add(\"repository_id\", id, privacy: .public)\n    |                                                  `- error: cannot infer contextual base in reference to member 'public'\n 97 |     }\n 98 | \n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:101:43: error: cannot infer contextual base in reference to member 'auto'\n 99 |     if let additional=additionalContext {\n100 |       for (key, value) in additional {\n101 |         context.add(key, value, privacy: .auto)\n    |                                           `- error: cannot infer contextual base in reference to member 'auto'\n102 |       }\n103 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/SnapshotFileDTO.swift:88:17: error: cannot convert value of type 'FileType' to expected argument type 'SnapshotFileType'\n 86 |       uid: 0, // Default value as we don't have this information\n 87 |       gid: 0, // Default value as we don't have this information\n 88 |       fileType: fileType,\n    |                 `- error: cannot convert value of type 'FileType' to expected argument type 'SnapshotFileType'\n 89 |       contentHash: contentHash\n 90 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:55:50: error: missing arguments for parameters 'snapshotService', 'errorMapper' in call\n 53 | \n 54 |     // Create operations service\n 55 |     let operationsService=BackupOperationsService(\n    |                                                  `- error: missing arguments for parameters 'snapshotService', 'errorMapper' in call\n 56 |       resticService: resticService,\n 57 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:43:10: note: 'init(resticService:repositoryInfo:commandFactory:resultParser:snapshotService:errorMapper:)' declared here\n  41 |    *   - errorMapper: Error mapper for translating errors\n  42 |    */\n  43 |   public init(\n     |          `- note: 'init(resticService:repositoryInfo:commandFactory:resultParser:snapshotService:errorMapper:)' declared here\n  44 |     resticService: ResticServiceProtocol,\n  45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:40:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 38 |   public init(\n 39 |     logger: any LoggingProtocol,\n 40 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 41 |     metricsCollector: BackupMetricsCollector,\n 42 |     errorLogContextMapper: ErrorLogContextMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:127:22: error: argument type 'any ResticServiceProtocol' does not conform to expected type 'ResticServiceProtocol'\n125 |     // Create backup service using Alpha Dot Five architecture\n126 |     return await createBackupService(\n127 |       resticService: resticService,\n    |                      `- error: argument type 'any ResticServiceProtocol' does not conform to expected type 'ResticServiceProtocol'\n128 |       logger: logger,\n129 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:43:22: error: extra arguments at positions #2, #3 in call\n 41 |     let defaultMessage=\"Starting backup operation: \\(operation)\"\n 42 | \n 43 |     await logger.info(\n    |                      `- error: extra arguments at positions #2, #3 in call\n 44 |       message ?? defaultMessage,\n 45 |       metadata: logContext.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:44:32: error: missing argument for parameter 'context' in call\n 42 | \n 43 |     await logger.info(\n 44 |       message ?? defaultMessage,\n    |                                `- error: missing argument for parameter 'context' in call\n 45 |       metadata: logContext.toPrivacyMetadata(),\n 46 |       source: \"BackupService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:67:18: error: no exact matches in call to instance method 'info'\n 65 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"success\", privacy: .public)\n 66 | \n 67 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n 68 |       message ?? defaultMessage,\n 69 |       metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:91:18: error: no exact matches in call to instance method 'info'\n 89 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n 90 | \n 91 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n 92 |       message ?? defaultMessage,\n 93 |       metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:119:88: error: value of type 'BackupError' has no member 'code'\n117 |     // Add error details with appropriate privacy levels\n118 |     if let backupError=error as? BackupError {\n119 |       metadata[\"errorCode\"]=PrivacyMetadataValue(value: String(describing: backupError.code),\n    |                                                                                        `- error: value of type 'BackupError' has no member 'code'\n120 |                                                  privacy: .public)\n121 |       metadata[\"errorMessage\"]=PrivacyMetadataValue(value: backupError.localizedDescription,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:125:39: error: value of type 'BackupError' has no member 'context'\n123 | \n124 |       // Add structured error context if available\n125 |       if let errorContext=backupError.context {\n    |                                       `- error: value of type 'BackupError' has no member 'context'\n126 |         for (key, value) in errorContext {\n127 |           metadata[\"error_\\(key)\"]=PrivacyMetadataValue(value: value, privacy: .private)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:137:18: error: no exact matches in call to instance method 'error'\n135 |     }\n136 | \n137 |     await logger.error(\n    |                  `- error: no exact matches in call to instance method 'error'\n138 |       message ?? defaultMessage,\n139 |       metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 50 | \n 51 |   /// Log a critical message\n    :\n 85 |   }\n 86 | \n 87 |   public func error(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 88 |     await log(.error, message, context: context)\n 89 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:166:22: error: no exact matches in call to instance method 'info'\n164 |         metadata[\"description\"]=PrivacyMetadataValue(value: description, privacy: .public)\n165 | \n166 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n167 |           \"Initialising backup operation: \\(operation)\",\n168 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:179:22: error: no exact matches in call to instance method 'info'\n177 |                                                          privacy: .public)\n178 | \n179 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n180 |           \"Processing backup operation: \\(operation) - \\(phase) (\\(String(format: \"%.1f%%\", percentComplete * 100)))\",\n181 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:188:22: error: no exact matches in call to instance method 'info'\n186 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"completed\", privacy: .public)\n187 | \n188 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n189 |           \"Completed backup operation: \\(operation)\",\n190 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:197:22: error: no exact matches in call to instance method 'info'\n195 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n196 | \n197 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n198 |           \"Cancelled backup operation: \\(operation)\",\n199 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:218:22: error: no exact matches in call to instance method 'error'\n216 |         }\n217 | \n218 |         await logger.error(\n    |                      `- error: no exact matches in call to instance method 'error'\n219 |           \"Failed backup operation: \\(operation)\",\n220 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 50 | \n 51 |   /// Log a critical message\n    :\n 85 |   }\n 86 | \n 87 |   public func error(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 88 |     await log(.error, message, context: context)\n 89 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupCommandFactory.swift:178:9: warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n176 |   ) throws -\u003e ResticCommand {\n177 |     // Determine base command from maintenance type\n178 |     var baseCommand=switch type {\n    |         `- warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n179 |       case .check:\n180 |         \"check\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:58:60: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n  56 | \n  57 |   /// Active operation cancellation tokens\n  58 |   private var activeOperationsCancellationTokens: [String: BackupOperationCancellationTokenImpl]=[:]\n     |                                                            `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n  59 | \n  60 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:729:45: error: cannot find type 'VerificationResult' in scope\n 727 |     repairMode: BackupInterfaces.RepairMode?=nil,\n 728 |     options: BackupInterfaces.VerifyOptions?=nil\n 729 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n     |                                             `- error: cannot find type 'VerificationResult' in scope\n 730 |     // Create a log context\n 731 |     let logContext=BackupLogContextImpl(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:727:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n 725 |     snapshotID: String?,\n 726 |     verifyData: Bool=true,\n 727 |     repairMode: BackupInterfaces.RepairMode?=nil,\n     |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n 728 |     options: BackupInterfaces.VerifyOptions?=nil\n 729 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:42:14: error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n  40 |  - Progress reporting through AsyncStream\n  41 |  */\n  42 | public actor BackupServicesActor: BackupServiceProtocol {\n     |              |- error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n     |              `- note: add stubs for conformance\n  43 |   // MARK: - Properties\n  44 | \n     :\n 118 |    * - Returns: A Result containing either the operation response or an error\n 119 |    */\n 120 |   public func createBackup(\n     |               `- note: candidate has non-matching type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 121 |     sources: [URL],\n 122 |     excludePaths: [URL]?,\n     :\n 264 |    * - Returns: A Result containing either the operation response or an error\n 265 |    */\n 266 |   public func restoreBackup(\n     |               `- note: candidate has non-matching type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 267 |     snapshotID: String,\n 268 |     targetPath: URL,\n     :\n 404 |    * - Returns: A Result containing either the list of snapshots or an error\n 405 |    */\n 406 |   public func listSnapshots(\n     |               `- note: candidate has non-matching type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n 407 |     tags: [String]?,\n 408 |     before: Date?,\n     :\n 497 |    * - Returns: A Result containing either the operation response or an error\n 498 |    */\n 499 |   public func deleteBackup(\n     |               `- note: candidate has non-matching type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n 500 |     snapshotID: String,\n 501 |     deleteOptions: DeleteOptions?\n     :\n 611 |    * - Returns: A Result containing either the operation response or an error\n 612 |    */\n 613 |   public func performMaintenance(\n     |               `- note: candidate has non-matching type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n 614 |     type: MaintenanceType,\n 615 |     maintenanceOptions: MaintenanceOptions?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Protocols/BackupServiceProtocol.swift:58:8: note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 56 |    * - Returns: A Result containing either the operation response or an error\n 57 |    */\n 58 |   func createBackup(\n    |        `- note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 59 |     sources: [URL],\n 60 |     excludePaths: [URL]?,\n    :\n 77 |    * - Returns: A Result containing either the operation response or an error\n 78 |    */\n 79 |   func restoreBackup(\n    |        `- note: protocol requires function 'restoreBackup(snapshotID:targetPath:includePaths:excludePaths:restoreOptions:)' with type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 80 |     snapshotID: String,\n 81 |     targetPath: URL,\n    :\n 99 |    * - Returns: A Result containing either the list of snapshots or an error\n100 |    */\n101 |   func listSnapshots(\n    |        `- note: protocol requires function 'listSnapshots(tags:before:after:listOptions:)' with type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n102 |     tags: [String]?,\n103 |     before: Date?,\n    :\n117 |    * - Returns: A Result containing either the operation response or an error\n118 |    */\n119 |   func deleteBackup(\n    |        `- note: protocol requires function 'deleteBackup(snapshotID:deleteOptions:)' with type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n120 |     snapshotID: String,\n121 |     deleteOptions: DeleteOptions?\n    :\n134 |    * - Returns: A Result containing either the operation response or an error\n135 |    */\n136 |   func performMaintenance(\n    |        `- note: protocol requires function 'performMaintenance(type:maintenanceOptions:)' with type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n137 |     type: MaintenanceType,\n138 |     maintenanceOptions: MaintenanceOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:32:13: error: cannot find type 'LoggingProtocol' in scope\n 30 |     resticService: ResticServiceProtocol,\n 31 |     resultParser: SnapshotResultParser,\n 32 |     logger: LoggingProtocol\n    |             `- error: cannot find type 'LoggingProtocol' in scope\n 33 |   ) {\n 34 |     self.resticService=resticService\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:134:5: error: cannot assign to value: 'logContext' is a 'let' constant\n 125 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e {\n 126 |     // Create a log context\n 127 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 128 |       domainName: \"BackupServices\",\n 129 |       source: \"BackupServicesActor\"\n     :\n 132 | \n 133 |     // Add source information with privacy classification\n 134 |     logContext=logContext.withPrivate(\n     |     `- error: cannot assign to value: 'logContext' is a 'let' constant\n 135 |       key: \"sources\",\n 136 |       value: sources.map(\\.path).joined(separator: \", \")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:140:7: error: cannot assign to value: 'logContext' is a 'let' constant\n 125 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e {\n 126 |     // Create a log context\n 127 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 128 |       domainName: \"BackupServices\",\n 129 |       source: \"BackupServicesActor\"\n     :\n 138 | \n 139 |     if let excludePaths, !excludePaths.isEmpty {\n 140 |       logContext=logContext.withPrivate(\n     |       `- error: cannot assign to value: 'logContext' is a 'let' constant\n 141 |         key: \"excludePaths\",\n 142 |         value: excludePaths.map(\\.path).joined(separator: \", \")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:147:7: error: cannot assign to value: 'logContext' is a 'let' constant\n 125 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e {\n 126 |     // Create a log context\n 127 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 128 |       domainName: \"BackupServices\",\n 129 |       source: \"BackupServicesActor\"\n     :\n 145 | \n 146 |     if let tags, !tags.isEmpty {\n 147 |       logContext=logContext.withPublic(\n     |       `- error: cannot assign to value: 'logContext' is a 'let' constant\n 148 |         key: \"tags\",\n 149 |         value: tags.joined(separator: \", \")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:154:51: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 152 | \n 153 |     // Log operation start\n 154 |     await backupLogger.logOperationStart(context: logContext)\n     |                                                   `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 155 | \n 156 |     // Input validation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:159:53: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 157 |     guard !sources.isEmpty else {\n 158 |       let error=BackupOperationError.invalidInput(\"Sources cannot be empty\")\n 159 |       await backupLogger.logOperationError(context: logContext, error: error)\n     |                                                     `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 160 |       return .failure(error)\n 161 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:175:15: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 173 | \n 174 |     // Create a cancellation token for this operation\n 175 |     let token=BackupOperationCancellationTokenImpl(id: UUID().uuidString)\n     |               `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 176 |     let operationID=token.id\n 177 |     activeOperationsCancellationTokens[operationID]=token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:72:26: error: cannot find type 'CancellationToken' in scope\n  70 |     parameters: BackupCreateParameters,\n  71 |     progressReporter: BackupProgressReporter?,\n  72 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n  73 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n  74 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:193:27: error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 191 |           )\n 192 |         },\n 193 |         progressReporter: progressReporter,\n     |                           `- error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 194 |         cancellationToken: token\n 195 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:188:32: warning: forced cast of 'BackupCreateParameters' to same type has no effect\n 186 |         operation: { params, progress, token in\n 187 |           try await operationsService.createBackup(\n 188 |             parameters: params as! BackupCreateParameters,\n     |                                `- warning: forced cast of 'BackupCreateParameters' to same type has no effect\n 189 |             progressReporter: progress,\n 190 |             cancellationToken: token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:215:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n 213 |         value: result,\n 214 |         progressStream: progressReporter.stream,\n 215 |         metadata: metadata\n     |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n 216 |       )\n 217 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:231:26: error: generic parameter 'some Sendable' could not be inferred\n 229 | \n 230 |       // Log success\n 231 |       await backupLogger.logOperationSuccess(\n     |                          `- error: generic parameter 'some Sendable' could not be inferred\n 232 |         context: enhancedContext,\n 233 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:294:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n292 |    *   - message: Optional custom message\n293 |    */\n294 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n295 |     context: BackupLogContext,\n296 |     result _: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:244:45: error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 242 | \n 243 |       // Log error\n 244 |       await backupLogger.logOperationFailure(\n     |                                             `- error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 245 |         context: logContext,\n 246 |         error: backupError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:245:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 243 |       // Log error\n 244 |       await backupLogger.logOperationFailure(\n 245 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 246 |         error: backupError\n 247 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:246:16: error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 244 |       await backupLogger.logOperationFailure(\n 245 |         context: logContext,\n 246 |         error: backupError\n     |                `- error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 247 |       )\n 248 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:283:7: error: cannot assign to value: 'logContext' is a 'let' constant\n 272 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e {\n 273 |     // Create a log context\n 274 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 275 |       domainName: \"BackupServices\",\n 276 |       source: \"BackupServicesActor\"\n     :\n 281 | \n 282 |     if let includePaths, !includePaths.isEmpty {\n 283 |       logContext=logContext.withPrivate(\n     |       `- error: cannot assign to value: 'logContext' is a 'let' constant\n 284 |         key: \"includePaths\",\n 285 |         value: includePaths.map(\\.path).joined(separator: \", \")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:290:7: error: cannot assign to value: 'logContext' is a 'let' constant\n 272 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e {\n 273 |     // Create a log context\n 274 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 275 |       domainName: \"BackupServices\",\n 276 |       source: \"BackupServicesActor\"\n     :\n 288 | \n 289 |     if let excludePaths, !excludePaths.isEmpty {\n 290 |       logContext=logContext.withPrivate(\n     |       `- error: cannot assign to value: 'logContext' is a 'let' constant\n 291 |         key: \"excludePaths\",\n 292 |         value: excludePaths.map(\\.path).joined(separator: \", \")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:297:51: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 295 | \n 296 |     // Log operation start\n 297 |     await backupLogger.logOperationStart(context: logContext)\n     |                                                   `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 298 | \n 299 |     // Input validation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:302:53: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 300 |     guard !snapshotID.isEmpty else {\n 301 |       let error=BackupOperationError.invalidInput(\"Snapshot ID cannot be empty\")\n 302 |       await backupLogger.logOperationError(context: logContext, error: error)\n     |                                                     `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 303 |       return .failure(error)\n 304 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:319:15: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 317 | \n 318 |     // Create a cancellation token for this operation\n 319 |     let token=BackupOperationCancellationTokenImpl(id: UUID().uuidString)\n     |               `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 320 |     let operationID=token.id\n 321 |     activeOperationsCancellationTokens[operationID]=token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:144:26: error: cannot find type 'CancellationToken' in scope\n 142 |     parameters: BackupRestoreParameters,\n 143 |     progressReporter: BackupProgressReporter?,\n 144 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 145 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n 146 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:337:27: error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 335 |           )\n 336 |         },\n 337 |         progressReporter: progressReporter,\n     |                           `- error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 338 |         cancellationToken: token\n 339 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:332:32: warning: forced cast of 'BackupRestoreParameters' to same type has no effect\n 330 |         operation: { params, progress, token in\n 331 |           try await operationsService.restoreBackup(\n 332 |             parameters: params as! BackupRestoreParameters,\n     |                                `- warning: forced cast of 'BackupRestoreParameters' to same type has no effect\n 333 |             progressReporter: progress,\n 334 |             cancellationToken: token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:372:26: error: generic parameter 'some Sendable' could not be inferred\n 370 | \n 371 |       // Log success\n 372 |       await backupLogger.logOperationSuccess(\n     |                          `- error: generic parameter 'some Sendable' could not be inferred\n 373 |         context: enhancedContext,\n 374 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:294:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n292 |    *   - message: Optional custom message\n293 |    */\n294 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n295 |     context: BackupLogContext,\n296 |     result _: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:385:45: error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 383 | \n 384 |       // Log error\n 385 |       await backupLogger.logOperationFailure(\n     |                                             `- error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 386 |         context: logContext,\n 387 |         error: backupError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:386:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 384 |       // Log error\n 385 |       await backupLogger.logOperationFailure(\n 386 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 387 |         error: backupError\n 388 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:387:16: error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 385 |       await backupLogger.logOperationFailure(\n 386 |         context: logContext,\n 387 |         error: backupError\n     |                `- error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 388 |       )\n 389 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:420:7: error: cannot assign to value: 'logContext' is a 'let' constant\n 411 |   ) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e {\n 412 |     // Create a log context\n 413 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 414 |       domainName: \"BackupServices\",\n 415 |       source: \"BackupServicesActor\"\n     :\n 418 | \n 419 |     if let tags, !tags.isEmpty {\n 420 |       logContext=logContext.withPublic(\n     |       `- error: cannot assign to value: 'logContext' is a 'let' constant\n 421 |         key: \"tags\",\n 422 |         value: tags.joined(separator: \", \")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:427:7: error: cannot assign to value: 'logContext' is a 'let' constant\n 411 |   ) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e {\n 412 |     // Create a log context\n 413 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 414 |       domainName: \"BackupServices\",\n 415 |       source: \"BackupServicesActor\"\n     :\n 425 | \n 426 |     if let before {\n 427 |       logContext=logContext.withPublic(\n     |       `- error: cannot assign to value: 'logContext' is a 'let' constant\n 428 |         key: \"before\",\n 429 |         value: before.description\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:434:7: error: cannot assign to value: 'logContext' is a 'let' constant\n 411 |   ) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e {\n 412 |     // Create a log context\n 413 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 414 |       domainName: \"BackupServices\",\n 415 |       source: \"BackupServicesActor\"\n     :\n 432 | \n 433 |     if let after {\n 434 |       logContext=logContext.withPublic(\n     |       `- error: cannot assign to value: 'logContext' is a 'let' constant\n 435 |         key: \"after\",\n 436 |         value: after.description\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:441:51: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 439 | \n 440 |     // Log operation start\n 441 |     await backupLogger.logOperationStart(context: logContext)\n     |                                                   `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 442 | \n 443 |     // Record the start time\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:451:20: error: extra argument 'listOptions' in call\n 449 |       before: before,\n 450 |       after: after,\n 451 |       listOptions: listOptions\n     |                    `- error: extra argument 'listOptions' in call\n 452 |     )\n 453 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:456:49: error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n 454 |     do {\n 455 |       // Execute the operation\n 456 |       let snapshots=try await operationsService.listSnapshots(parameters: parameters)\n     |                                                 `- error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n 457 | \n 458 |       // Record the end time\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:471:26: error: generic parameter 'some Sendable' could not be inferred\n 469 | \n 470 |       // Log success\n 471 |       await backupLogger.logOperationSuccess(\n     |                          `- error: generic parameter 'some Sendable' could not be inferred\n 472 |         context: enhancedContext,\n 473 |         result: snapshots\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:294:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n292 |    *   - message: Optional custom message\n293 |    */\n294 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n295 |     context: BackupLogContext,\n296 |     result _: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:482:45: error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 480 | \n 481 |       // Log error\n 482 |       await backupLogger.logOperationFailure(\n     |                                             `- error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 483 |         context: logContext,\n 484 |         error: backupError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:483:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 481 |       // Log error\n 482 |       await backupLogger.logOperationFailure(\n 483 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 484 |         error: backupError\n 485 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:484:16: error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 482 |       await backupLogger.logOperationFailure(\n 483 |         context: logContext,\n 484 |         error: backupError\n     |                `- error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 485 |       )\n 486 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:512:51: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 510 | \n 511 |     // Log operation start\n 512 |     await backupLogger.logOperationStart(context: logContext)\n     |                                                   `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 513 | \n 514 |     // Input validation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:517:53: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 515 |     guard !snapshotID.isEmpty else {\n 516 |       let error=BackupOperationError.invalidInput(\"Snapshot ID cannot be empty\")\n 517 |       await backupLogger.logOperationError(context: logContext, error: error)\n     |                                                     `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 518 |       return .failure(error)\n 519 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:527:40: error: value of type 'DeleteOptions' has no member 'prune'\n 525 |     let parameters=BackupDeleteParameters(\n 526 |       snapshotID: snapshotID,\n 527 |       pruneAfterDelete: deleteOptions?.prune ?? false\n     |                                        `- error: value of type 'DeleteOptions' has no member 'prune'\n 528 |     )\n 529 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:531:15: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 529 | \n 530 |     // Create a cancellation token for this operation\n 531 |     let token=BackupOperationCancellationTokenImpl(id: UUID().uuidString)\n     |               `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 532 |     let operationID=token.id\n 533 |     activeOperationsCancellationTokens[operationID]=token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:270:26: error: cannot find type 'CancellationToken' in scope\n 268 |   public func deleteBackup(\n 269 |     parameters: BackupDeleteParameters,\n 270 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 271 |   ) async throws -\u003e DeleteResult {\n 272 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:549:27: error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 547 |           )\n 548 |         },\n 549 |         progressReporter: progressReporter,\n     |                           `- error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 550 |         cancellationToken: token\n 551 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:581:26: error: generic parameter 'some Sendable' could not be inferred\n 579 | \n 580 |       // Log success\n 581 |       await backupLogger.logOperationSuccess(\n     |                          `- error: generic parameter 'some Sendable' could not be inferred\n 582 |         context: enhancedContext,\n 583 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:294:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n292 |    *   - message: Optional custom message\n293 |    */\n294 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n295 |     context: BackupLogContext,\n296 |     result _: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:594:45: error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 592 | \n 593 |       // Log error\n 594 |       await backupLogger.logOperationFailure(\n     |                                             `- error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 595 |         context: logContext,\n 596 |         error: backupError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:595:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 593 |       // Log error\n 594 |       await backupLogger.logOperationFailure(\n 595 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 596 |         error: backupError\n 597 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:596:16: error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 594 |       await backupLogger.logOperationFailure(\n 595 |         context: logContext,\n 596 |         error: backupError\n     |                `- error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 597 |       )\n 598 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:626:51: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 624 | \n 625 |     // Log operation start\n 626 |     await backupLogger.logOperationStart(context: logContext)\n     |                                                   `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 627 | \n 628 |     // Record the start time\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:638:15: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 636 | \n 637 |     // Create a cancellation token for this operation\n 638 |     let token=BackupOperationCancellationTokenImpl(id: UUID().uuidString)\n     |               `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 639 |     let operationID=token.id\n 640 |     activeOperationsCancellationTokens[operationID]=token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:964:26: error: cannot find type 'CancellationToken' in scope\n 962 |     parameters: BackupMaintenanceParameters,\n 963 |     progressReporter: BackupProgressReporter?,\n 964 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 965 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupProgressInfo\u003e) {\n 966 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:656:27: error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 654 |           )\n 655 |         },\n 656 |         progressReporter: progressReporter,\n     |                           `- error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 657 |         cancellationToken: token\n 658 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:651:32: warning: forced cast of 'BackupMaintenanceParameters' to same type has no effect\n 649 |         operation: { params, progress, token in\n 650 |           try await operationsService.performMaintenance(\n 651 |             parameters: params as! BackupMaintenanceParameters,\n     |                                `- warning: forced cast of 'BackupMaintenanceParameters' to same type has no effect\n 652 |             progressReporter: progress,\n 653 |             cancellationToken: token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:677:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n 675 |         value: result,\n 676 |         progressStream: progressReporter.stream,\n 677 |         metadata: metadata\n     |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n 678 |       )\n 679 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:687:26: error: generic parameter 'some Sendable' could not be inferred\n 685 | \n 686 |       // Log success\n 687 |       await backupLogger.logOperationSuccess(\n     |                          `- error: generic parameter 'some Sendable' could not be inferred\n 688 |         context: enhancedContext,\n 689 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:294:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n292 |    *   - message: Optional custom message\n293 |    */\n294 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n295 |     context: BackupLogContext,\n296 |     result _: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:688:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 686 |       // Log success\n 687 |       await backupLogger.logOperationSuccess(\n 688 |         context: enhancedContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 689 |         result: result\n 690 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:700:45: error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 698 | \n 699 |       // Log error\n 700 |       await backupLogger.logOperationFailure(\n     |                                             `- error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 701 |         context: logContext,\n 702 |         error: backupError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:701:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 699 |       // Log error\n 700 |       await backupLogger.logOperationFailure(\n 701 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 702 |         error: backupError\n 703 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:702:16: error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 700 |       await backupLogger.logOperationFailure(\n 701 |         context: logContext,\n 702 |         error: backupError\n     |                `- error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 703 |       )\n 704 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:743:51: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 741 | \n 742 |     // Log operation start\n 743 |     await backupLogger.logOperationStart(context: enhancedContext)\n     |                                                   `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 744 | \n 745 |     // Record the start time\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:754:19: error: type 'BackupOperation' has no member 'verifyBackup'\n 752 |     let token=BackupOperationToken(\n 753 |       id: UUID(),\n 754 |       operation: .verifyBackup,\n     |                   `- error: type 'BackupOperation' has no member 'verifyBackup'\n 755 |       cancellable: true\n 756 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:762:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 760 | \n 761 |     // Create a cancellation token for the operation\n 762 |     let cancellationToken=BackupOperationCancellationTokenImpl(id: token.id.uuidString)\n     |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 763 |     activeOperationsCancellationTokens[token.id]=cancellationToken\n 764 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:767:30: error: type 'BackupVerifyParameters' has no member 'RepairMode'\n 765 |     // Create DTO parameters for the operation using adapter pattern\n 766 |     let localRepairMode=repairMode.map {\n 767 |       BackupVerifyParameters.RepairMode(rawValue: $0.rawValue) ?? .reportOnly\n     |                              `- error: type 'BackupVerifyParameters' has no member 'RepairMode'\n 768 |     }\n 769 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:770:50: error: type 'VerifyOptions' has no member 'from'\n 768 |     }\n 769 | \n 770 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n     |                                                  `- error: type 'VerifyOptions' has no member 'from'\n 771 | \n 772 |     let parameters=BackupVerifyParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:772:42: error: extra arguments at positions #2, #3, #4 in call\n 770 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n 771 | \n 772 |     let parameters=BackupVerifyParameters(\n     |                                          `- error: extra arguments at positions #2, #3, #4 in call\n 773 |       snapshotID: snapshotID,\n 774 |       verifyData: verifyData,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:773:29: error: missing argument for parameter 'verifyOptions' in call\n 771 | \n 772 |     let parameters=BackupVerifyParameters(\n 773 |       snapshotID: snapshotID,\n     |                             `- error: missing argument for parameter 'verifyOptions' in call\n 774 |       verifyData: verifyData,\n 775 |       repairMode: localRepairMode,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:781:61: error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n 779 |     do {\n 780 |       // Execute the operation\n 781 |       let verificationResultDTO=try await operationExecutor.executeVerifyOperation(\n     |                                                             `- error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n 782 |         parameters: parameters,\n 783 |         progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:792:26: error: generic parameter 'some Sendable' could not be inferred\n 790 | \n 791 |       // Log operation success\n 792 |       await backupLogger.logOperationSuccess(\n     |                          `- error: generic parameter 'some Sendable' could not be inferred\n 793 |         context: enhancedContext,\n 794 |         duration: duration\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:294:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n292 |    *   - message: Optional custom message\n293 |    */\n294 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n295 |     context: BackupLogContext,\n296 |     result _: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:794:19: error: extra argument 'duration' in call\n 792 |       await backupLogger.logOperationSuccess(\n 793 |         context: enhancedContext,\n 794 |         duration: duration\n     |                   `- error: extra argument 'duration' in call\n 795 |       )\n 796 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:793:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 791 |       // Log operation success\n 792 |       await backupLogger.logOperationSuccess(\n 793 |         context: enhancedContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 794 |         duration: duration\n 795 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:815:45: error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 813 | \n 814 |       // Log error\n 815 |       await backupLogger.logOperationFailure(\n     |                                             `- error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 816 |         context: enhancedContext,\n 817 |         error: backupError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:816:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 814 |       // Log error\n 815 |       await backupLogger.logOperationFailure(\n 816 |         context: enhancedContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 817 |         error: backupError\n 818 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:817:16: error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 815 |       await backupLogger.logOperationFailure(\n 816 |         context: enhancedContext,\n 817 |         error: backupError\n     |                `- error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 818 |       )\n 819 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:844:7: error: cannot find 'BackupProgressReporterImpl' in scope\n 842 |     // Create a progress reporter if a handler was provided\n 843 |     let progressReporter: BackupProgressReporter? = progressHandler.map { handler in\n 844 |       BackupProgressReporterImpl(handler: handler)\n     |       `- error: cannot find 'BackupProgressReporterImpl' in scope\n 845 |     }\n 846 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:851:11: error: cannot find 'cancellationHandler' in scope\n 849 | \n 850 |     // Register the token with the cancellation handler\n 851 |     await cancellationHandler.registerToken(cancellationToken, for: parameters.operationID)\n     |           `- error: cannot find 'cancellationHandler' in scope\n 852 | \n 853 |     do {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:865:13: error: cannot find 'errorMapper' in scope\n 863 |     } catch {\n 864 |       // Map the error and rethrow\n 865 |       throw errorMapper.mapError(error)\n     |             `- error: cannot find 'errorMapper' in scope\n 866 |     } finally {\n 867 |       // Unregister the token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:866:7: error: cannot find 'finally' in scope\n 864 |       // Map the error and rethrow\n 865 |       throw errorMapper.mapError(error)\n 866 |     } finally {\n     |       `- error: cannot find 'finally' in scope\n 867 |       // Unregister the token\n 868 |       await cancellationHandler.unregisterToken(for: parameters.operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:868:13: error: cannot find 'cancellationHandler' in scope\n 866 |     } finally {\n 867 |       // Unregister the token\n 868 |       await cancellationHandler.unregisterToken(for: parameters.operationID)\n     |             `- error: cannot find 'cancellationHandler' in scope\n 869 |     }\n 870 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:893:51: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 891 | \n 892 |     // Log cancellation attempt\n 893 |     await backupLogger.logOperationStart(context: logContext)\n     |                                                   `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 894 | \n 895 |     // Check if the operation exists\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:899:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 897 |       // Log that operation wasn't found\n 898 |       await backupLogger.logOperationFailure(\n 899 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 900 |         message: \"Operation with ID \\(operationID) not found\"\n 901 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:909:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 907 |       // Log that operation can't be cancelled\n 908 |       await backupLogger.logOperationFailure(\n 909 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 910 |         message: \"Operation \\(token.operation) cannot be cancelled\"\n 911 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:921:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 919 |       // Log success\n 920 |       await backupLogger.logOperationSuccess(\n 921 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 922 |         result: true,\n 923 |         message: \"Operation cancelled successfully\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:929:45: error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 927 |     } catch {\n 928 |       // Log failure\n 929 |       await backupLogger.logOperationFailure(\n     |                                             `- error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 930 |         context: logContext,\n 931 |         error: error\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:930:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 928 |       // Log failure\n 929 |       await backupLogger.logOperationFailure(\n 930 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 931 |         error: error\n 932 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:931:16: error: cannot convert value of type 'any Error' to expected argument type 'String'\n 929 |       await backupLogger.logOperationFailure(\n 930 |         context: logContext,\n 931 |         error: error\n     |                `- error: cannot convert value of type 'any Error' to expected argument type 'String'\n 932 |       )\n 933 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:962:16: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 960 |     await backupLogger.log(\n 961 |       level: .info,\n 962 |       context: logContext,\n     |                `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 963 |       message: \"Operation cancellation complete\"\n 964 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:999:47: error: value of type 'String' has no member 'uuidString'\n 997 |     )\n 998 |     .withOperation(\"cancelOperation\")\n 999 |     .withPublic(key: \"operationID\", value: id.uuidString)\n     |                                               `- error: value of type 'String' has no member 'uuidString'\n1000 | \n1001 |     // Log cancellation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:1028:37: error: cannot find type 'TimeoutError' in scope\n1026 |     } else if let repositoryError=error as? BackupOperationError {\n1027 |       repositoryError\n1028 |     } else if let timeout=error as? TimeoutError {\n     |                                     `- error: cannot find type 'TimeoutError' in scope\n1029 |       .timeout(\"Operation timed out after \\(timeout.duration) seconds\")\n1030 |     } else {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:102:28: error: value of type 'BackupCreateParameters' has no member 'sourcePaths'\n 100 | \n 101 |     // Add paths to include\n 102 |     for path in parameters.sourcePaths {\n     |                            `- error: value of type 'BackupCreateParameters' has no member 'sourcePaths'\n 103 |       command.arguments.append(path.path)\n 104 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:124:27: error: value of type 'BackupCreateParameters' has no member 'sourcePaths'\n 122 |     let backupResult=try resultParser.parseBackupResult(\n 123 |       output: output,\n 124 |       sources: parameters.sourcePaths\n     |                           `- error: value of type 'BackupCreateParameters' has no member 'sourcePaths'\n 125 |     )\n 126 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:397:18: error: cannot find 'LoggingServiceFactory' in scope\n 395 | \n 396 |       // Create a logger instance\n 397 |       let logger=LoggingServiceFactory.shared.createLogger(domain: \"BackupServices\")\n     |                  `- error: cannot find 'LoggingServiceFactory' in scope\n 398 | \n 399 |       // Create a log context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:437:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 435 |         percentComplete: 5.0,\n 436 |         itemsProcessed: 0,\n 437 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 438 |         bytesProcessed: 0,\n 439 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:439:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 437 |         totalItems: snapshot.stats.totalFiles,\n 438 |         bytesProcessed: 0,\n 439 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 440 |         estimatedTimeRemaining: nil,\n 441 |         details: \"Analysing snapshot structure\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:448:58: error: cannot convert value of type 'BackupVerificationResult' to specified type '(_, _)'\n 446 |       let verificationLevel: BackupInterfaces.VerificationLevel=verifyOptions?\n 447 |         .fullVerification == true ? .full : .standard\n 448 |       let (verificationResult, verificationProgress)=try await snapshotService.verifySnapshot(\n     |                                                          `- error: cannot convert value of type 'BackupVerificationResult' to specified type '(_, _)'\n 449 |         snapshotID: snapshot.id,\n 450 |         level: verificationLevel\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:448:94: error: incorrect argument label in call (have 'snapshotID:level:', expected 'snapshotID:fullVerification:')\n 446 |       let verificationLevel: BackupInterfaces.VerificationLevel=verifyOptions?\n 447 |         .fullVerification == true ? .full : .standard\n 448 |       let (verificationResult, verificationProgress)=try await snapshotService.verifySnapshot(\n     |                                                                                              `- error: incorrect argument label in call (have 'snapshotID:level:', expected 'snapshotID:fullVerification:')\n 449 |         snapshotID: snapshot.id,\n 450 |         level: verificationLevel\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:450:16: error: cannot convert value of type 'VerificationLevel' to expected argument type 'Bool'\n 448 |       let (verificationResult, verificationProgress)=try await snapshotService.verifySnapshot(\n 449 |         snapshotID: snapshot.id,\n 450 |         level: verificationLevel\n     |                `- error: cannot convert value of type 'VerificationLevel' to expected argument type 'Bool'\n 451 |       )\n 452 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:465:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 463 |         percentComplete: 10.0,\n 464 |         itemsProcessed: 0,\n 465 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 466 |         bytesProcessed: Int64(snapshot.stats.totalSize / 10),\n 467 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:466:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 464 |         itemsProcessed: 0,\n 465 |         totalItems: snapshot.stats.totalFiles,\n 466 |         bytesProcessed: Int64(snapshot.stats.totalSize / 10),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 467 |         totalBytes: Int64(snapshot.stats.totalSize),\n 468 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:467:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 465 |         totalItems: snapshot.stats.totalFiles,\n 466 |         bytesProcessed: Int64(snapshot.stats.totalSize / 10),\n 467 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 468 |         estimatedTimeRemaining: nil,\n 469 |         details: \"Verifying data integrity\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:477:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 475 |         phase: .verifying,\n 476 |         percentComplete: 50.0,\n 477 |         itemsProcessed: snapshot.stats.totalFiles / 2,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 478 |         totalItems: snapshot.stats.totalFiles,\n 479 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:478:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 476 |         percentComplete: 50.0,\n 477 |         itemsProcessed: snapshot.stats.totalFiles / 2,\n 478 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 479 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n 480 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:479:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 477 |         itemsProcessed: snapshot.stats.totalFiles / 2,\n 478 |         totalItems: snapshot.stats.totalFiles,\n 479 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 480 |         totalBytes: Int64(snapshot.stats.totalSize),\n 481 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:480:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 478 |         totalItems: snapshot.stats.totalFiles,\n 479 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n 480 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 481 |         estimatedTimeRemaining: nil,\n 482 |         details: \"Verifying data integrity\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:490:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 488 |         phase: .verifying,\n 489 |         percentComplete: 90.0,\n 490 |         itemsProcessed: snapshot.stats.totalFiles,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 491 |         totalItems: snapshot.stats.totalFiles,\n 492 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:491:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 489 |         percentComplete: 90.0,\n 490 |         itemsProcessed: snapshot.stats.totalFiles,\n 491 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 492 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n 493 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:492:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 490 |         itemsProcessed: snapshot.stats.totalFiles,\n 491 |         totalItems: snapshot.stats.totalFiles,\n 492 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 493 |         totalBytes: Int64(snapshot.stats.totalSize),\n 494 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:493:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 491 |         totalItems: snapshot.stats.totalFiles,\n 492 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n 493 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 494 |         estimatedTimeRemaining: nil,\n 495 |         details: \"Verifying data integrity\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:503:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 501 |         phase: .finalising,\n 502 |         percentComplete: 95.0,\n 503 |         itemsProcessed: snapshot.stats.totalFiles,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 504 |         totalItems: snapshot.stats.totalFiles,\n 505 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:504:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 502 |         percentComplete: 95.0,\n 503 |         itemsProcessed: snapshot.stats.totalFiles,\n 504 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 505 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 506 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:505:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 503 |         itemsProcessed: snapshot.stats.totalFiles,\n 504 |         totalItems: snapshot.stats.totalFiles,\n 505 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 506 |         totalBytes: Int64(snapshot.stats.totalSize),\n 507 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:506:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 504 |         totalItems: snapshot.stats.totalFiles,\n 505 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 506 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 507 |         estimatedTimeRemaining: nil,\n 508 |         details: \"Finalising verification\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:528:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 526 |         phase: .completed,\n 527 |         percentComplete: 100.0,\n 528 |         itemsProcessed: snapshot.stats.totalFiles,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 529 |         totalItems: snapshot.stats.totalFiles,\n 530 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:529:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 527 |         percentComplete: 100.0,\n 528 |         itemsProcessed: snapshot.stats.totalFiles,\n 529 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 530 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 531 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:530:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 528 |         itemsProcessed: snapshot.stats.totalFiles,\n 529 |         totalItems: snapshot.stats.totalFiles,\n 530 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 531 |         totalBytes: Int64(snapshot.stats.totalSize),\n 532 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:531:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 529 |         totalItems: snapshot.stats.totalFiles,\n 530 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 531 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 532 |         estimatedTimeRemaining: nil,\n 533 |         details: \"Verification completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:574:11: error: cannot find 'logger' in scope\n 572 | \n 573 |     // Log operation start\n 574 |     await logger.info(\"Starting snapshot comparison\", context: context)\n     |           `- error: cannot find 'logger' in scope\n 575 | \n 576 |     // Report initial progress\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:578:15: error: type 'BackupProgressInfo.Phase' has no member 'preparing'\n 576 |     // Report initial progress\n 577 |     await reportProgress(BackupProgressInfo(\n 578 |       phase: .preparing,\n     |               `- error: type 'BackupProgressInfo.Phase' has no member 'preparing'\n 579 |       percentComplete: 0.0,\n 580 |       itemsProcessed: 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:592:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 590 |       let firstSnapshot=try await getSnapshotDetails(\n 591 |         snapshotID: parameters.firstSnapshotID,\n 592 |         context: context\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 593 |       )\n 594 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:597:27: error: enum case 'operationCancelled' has no associated values\n 595 |       // Check if the operation was cancelled\n 596 |       if let token=cancellationToken, await token.isCancelled {\n 597 |         throw BackupError.operationCancelled(\n     |                           `- error: enum case 'operationCancelled' has no associated values\n 598 |           details: \"Snapshot comparison cancelled\"\n 599 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:604:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 602 |       let secondSnapshot=try await getSnapshotDetails(\n 603 |         snapshotID: parameters.secondSnapshotID,\n 604 |         context: context\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 605 |       )\n 606 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:609:27: error: enum case 'operationCancelled' has no associated values\n 607 |       // Check if the operation was cancelled\n 608 |       if let token=cancellationToken, await token.isCancelled {\n 609 |         throw BackupError.operationCancelled(\n     |                           `- error: enum case 'operationCancelled' has no associated values\n 610 |           details: \"Snapshot comparison cancelled\"\n 611 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:638:27: error: enum case 'operationCancelled' has no associated values\n 636 |       // Check if the operation was cancelled\n 637 |       if let token=cancellationToken, await token.isCancelled {\n 638 |         throw BackupError.operationCancelled(\n     |                           `- error: enum case 'operationCancelled' has no associated values\n 639 |           details: \"Snapshot comparison cancelled\"\n 640 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:656:57: error: missing argument label 'output:' in call\n 654 | \n 655 |       // Parse the diff result\n 656 |       let comparisonDTO=try resultParser.parseDiffResult(\n     |                                                         `- error: missing argument label 'output:' in call\n 657 |         diffOutput,\n 658 |         firstSnapshotID: parameters.firstSnapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:663:33: error: value of type 'BackupResultParser' has no member 'createSnapshotComparisonResult'\n 661 | \n 662 |       // Convert to interface type\n 663 |       let result = resultParser.createSnapshotComparisonResult(\n     |                                 `- error: value of type 'BackupResultParser' has no member 'createSnapshotComparisonResult'\n 664 |         from: comparisonDTO,\n 665 |         firstSnapshotID: parameters.firstSnapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:679:18: error: extra argument 'result' in call\n 677 |         estimatedTimeRemaining: nil,\n 678 |         details: \"Comparison complete\",\n 679 |         result: .success\n     |                  `- error: extra argument 'result' in call\n 680 |       ), reporter: progressReporter)\n 681 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:679:18: error: cannot infer contextual base in reference to member 'success'\n 677 |         estimatedTimeRemaining: nil,\n 678 |         details: \"Comparison complete\",\n 679 |         result: .success\n     |                  `- error: cannot infer contextual base in reference to member 'success'\n 680 |       ), reporter: progressReporter)\n 681 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:683:13: error: cannot find 'logger' in scope\n 681 | \n 682 |       // Log success\n 683 |       await logger.info(\n     |             `- error: cannot find 'logger' in scope\n 684 |         \"Snapshot comparison completed successfully: \" +\n 685 |         \"\\(comparisonDTO.addedCount) added, \" +\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:695:13: error: cannot find 'logger' in scope\n 693 |       // Map error and log failure\n 694 |       let backupError=errorMapper.mapError(error)\n 695 |       await logger.error(\n     |             `- error: cannot find 'logger' in scope\n 696 |         \"Snapshot comparison failed: \\(backupError.localizedDescription)\",\n 697 |         context: context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:18: error: extra argument 'result' in call\n 708 |         estimatedTimeRemaining: nil,\n 709 |         details: \"Comparison failed: \\(backupError.localizedDescription)\",\n 710 |         result: .failure(backupError)\n     |                  `- error: extra argument 'result' in call\n 711 |       ), reporter: progressReporter)\n 712 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:18: error: cannot infer contextual base in reference to member 'failure'\n 708 |         estimatedTimeRemaining: nil,\n 709 |         details: \"Comparison failed: \\(backupError.localizedDescription)\",\n 710 |         result: .failure(backupError)\n     |                  `- error: cannot infer contextual base in reference to member 'failure'\n 711 |       ), reporter: progressReporter)\n 712 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:772:45: error: missing argument for parameter 'for' in call\n 770 |     // Only report if a reporter was provided\n 771 |     if let reporter = reporter {\n 772 |       await reporter.reportProgress(progress)\n     |                                             `- error: missing argument for parameter 'for' in call\n 773 |     }\n 774 |   }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:12:8: note: 'reportProgress(_:for:)' declared here\n 10 |   ///   - progressInfo: The progress information\n 11 |   ///   - operation: The operation being performed\n 12 |   func reportProgress(_ progressInfo: BackupProgressInfo, for operation: BackupOperation) async\n    |        `- note: 'reportProgress(_:for:)' declared here\n 13 | \n 14 |   /// Reports that an operation has been cancelled\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:888:30: error: value of type 'DeleteResponse' has no member 'errors'\n 886 |       return DeleteResult(\n 887 |         snapshotID: snapshotID,\n 888 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                              `- error: value of type 'DeleteResponse' has no member 'errors'\n 889 |         filesDeleted: response.filesDeleted ?? 0,\n 890 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:888:57: error: value of type 'DeleteResponse' has no member 'errors'\n 886 |       return DeleteResult(\n 887 |         snapshotID: snapshotID,\n 888 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                                                         `- error: value of type 'DeleteResponse' has no member 'errors'\n 889 |         filesDeleted: response.filesDeleted ?? 0,\n 890 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:921:11: error: cannot find 'logger' in scope\n 919 |   ) async throws -\u003e BackupSnapshot {\n 920 |     // Log the request\n 921 |     await logger.debug(\"Retrieving snapshot details\", context: context)\n     |           `- error: cannot find 'logger' in scope\n 922 |     \n 923 |     // Create the command to get snapshot details\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:933:37: error: value of type 'BackupResultParser' has no member 'parseSnapshotInfo'\n 931 |     \n 932 |     // Parse the output\n 933 |     let snapshot = try resultParser.parseSnapshotInfo(output)\n     |                                     `- error: value of type 'BackupResultParser' has no member 'parseSnapshotInfo'\n 934 |     \n 935 |     // Check if the snapshot was found\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:937:41: error: incorrect argument label in call (have 'details:', expected 'id:')\n 935 |     // Check if the snapshot was found\n 936 |     guard let snapshot = snapshot else {\n 937 |       throw BackupError.snapshotNotFound(\n     |                                         `- error: incorrect argument label in call (have 'details:', expected 'id:')\n 938 |         details: \"Snapshot with ID \\(snapshotID) not found\"\n 939 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:943:11: error: cannot find 'logger' in scope\n 941 |     \n 942 |     // Log success\n 943 |     await logger.debug(\n     |           `- error: cannot find 'logger' in scope\n 944 |       \"Retrieved snapshot details successfully\",\n 945 |       context: context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:264:9: error: type of expression is ambiguous without a type annotation\n262 |     cancellationToken: BackupCancellationToken?\n263 |   ) async throws -\u003e BackupSnapshotComparisonResult {\n264 |     try await operationExecutor.execute(\n    |         `- error: type of expression is ambiguous without a type annotation\n265 |       parameters: parameters,\n266 |       progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:555:31: error: extra argument 'dataIntegrityCheck' in call\n553 |         return try self.resultParser.parseVerificationResult(\n554 |           repositoryCheck: repositoryCheckOutput,\n555 |           dataIntegrityCheck: dataIntegrityOutput\n    |                               `- error: extra argument 'dataIntegrityCheck' in call\n556 |         )\n557 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:553:38: error: cannot convert value of type 'VerificationResultDTO' to closure result type 'BackupVerificationResultDTO'\n551 | \n552 |         // Parse results\n553 |         return try self.resultParser.parseVerificationResult(\n    |                                      `- error: cannot convert value of type 'VerificationResultDTO' to closure result type 'BackupVerificationResultDTO'\n554 |           repositoryCheck: repositoryCheckOutput,\n555 |           dataIntegrityCheck: dataIntegrityOutput\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:116:44: error: argument type 'any ResticCommand' does not conform to expected type 'ResticCommand'\n114 |     // Create a task for executing the command\n115 |     let executionTask=Task {\n116 |       try await self.resticService.execute(command)\n    |                                            `- error: argument type 'any ResticCommand' does not conform to expected type 'ResticCommand'\n117 |     }\n118 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:168:22: warning: no 'async' operations occur within 'await' expression\n166 |     do {\n167 |       // Wait for execution to complete\n168 |       let result=try await executionTask.value\n    |                      `- warning: no 'async' operations occur within 'await' expression\n169 | \n170 |       // Cancel progress updates\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:168:18: warning: no calls to throwing functions occur within 'try' expression\n166 |     do {\n167 |       // Wait for execution to complete\n168 |       let result=try await executionTask.value\n    |                  `- warning: no calls to throwing functions occur within 'try' expression\n169 | \n170 |       // Cancel progress updates\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:268:13: warning: variable 'args' was never mutated; consider changing to 'let' constant\n266 |       operation: { _, reporter, _ in\n267 |         // Create a command to get snapshot details with statistics\n268 |         var args=[\"snapshots\", snapshotID, \"--json\", \"--stats\"]\n    |             `- warning: variable 'args' was never mutated; consider changing to 'let' constant\n269 | \n270 |         let command=ResticCommandImpl(arguments: args)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:19:23: error: cannot find type 'LoggingProtocol' in scope\n 17 | \n 18 |   /// Logger for snapshot operations\n 19 |   private let logger: LoggingProtocol\n    |                       `- error: cannot find type 'LoggingProtocol' in scope\n 20 | \n 21 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:53:37: error: missing arguments for parameters 'domainName', 'source' in call\n 51 |   ) async throws -\u003e BackupInterfaces.BackupSnapshot? {\n 52 |     // Create a log context\n 53 |     let context=BackupLogContextImpl()\n    |                                     `- error: missing arguments for parameters 'domainName', 'source' in call\n 54 |       .withOperation(\"getSnapshotDetails\")\n 55 |       .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:30:10: note: 'init(domainName:source:metadata:)' declared here\n 28 |    *   - metadata: The metadata collection\n 29 |    */\n 30 |   public init(\n    |          `- note: 'init(domainName:source:metadata:)' declared here\n 31 |     domainName: String,\n 32 |     source: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:105:37: error: missing arguments for parameters 'domainName', 'source' in call\n103 |   ) async throws -\u003e BackupInterfaces.BackupSnapshot? {\n104 |     // Create a log context\n105 |     let context=BackupLogContextImpl()\n    |                                     `- error: missing arguments for parameters 'domainName', 'source' in call\n106 |       .withOperation(\"getLatestSnapshot\")\n107 |       .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:30:10: note: 'init(domainName:source:metadata:)' declared here\n 28 |    *   - metadata: The metadata collection\n 29 |    */\n 30 |   public init(\n    |          `- note: 'init(domainName:source:metadata:)' declared here\n 31 |     domainName: String,\n 32 |     source: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:156:37: error: missing arguments for parameters 'domainName', 'source' in call\n154 |   ) async throws -\u003e [BackupInterfaces.BackupSnapshot] {\n155 |     // Create a log context\n156 |     let context=BackupLogContextImpl()\n    |                                     `- error: missing arguments for parameters 'domainName', 'source' in call\n157 |       .withOperation(\"listSnapshots\")\n158 |       .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:30:10: note: 'init(domainName:source:metadata:)' declared here\n 28 |    *   - metadata: The metadata collection\n 29 |    */\n 30 |   public init(\n    |          `- note: 'init(domainName:source:metadata:)' declared here\n 31 |     domainName: String,\n 32 |     source: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:175:38: error: value of type 'SnapshotResultParser' has no member 'parseSnapshotList'\n173 | \n174 |       // Parse the result\n175 |       let snapshots=try resultParser.parseSnapshotList(output)\n    |                                      `- error: value of type 'SnapshotResultParser' has no member 'parseSnapshotList'\n176 | \n177 |       await logger.info(\"Retrieved \\(snapshots.count) snapshots\", context: context)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:204:37: error: missing arguments for parameters 'domainName', 'source' in call\n202 |   ) async throws -\u003e BackupInterfaces.BackupSnapshotComparisonResult {\n203 |     // Create a log context\n204 |     let context=BackupLogContextImpl()\n    |                                     `- error: missing arguments for parameters 'domainName', 'source' in call\n205 |       .withOperation(\"compareSnapshots\")\n206 |       .withPublic(key: \"firstSnapshotID\", value: firstSnapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:30:10: note: 'init(domainName:source:metadata:)' declared here\n 28 |    *   - metadata: The metadata collection\n 29 |    */\n 30 |   public init(\n    |          `- note: 'init(domainName:source:metadata:)' declared here\n 31 |     domainName: String,\n 32 |     source: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:257:37: error: missing arguments for parameters 'domainName', 'source' in call\n255 |   ) async throws -\u003e BackupInterfaces.BackupVerificationResult {\n256 |     // Create a log context\n257 |     let context=BackupLogContextImpl()\n    |                                     `- error: missing arguments for parameters 'domainName', 'source' in call\n258 |       .withOperation(\"verifySnapshot\")\n259 |       .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:30:10: note: 'init(domainName:source:metadata:)' declared here\n 28 |    *   - metadata: The metadata collection\n 29 |    */\n 30 |   public init(\n    |          `- note: 'init(domainName:source:metadata:)' declared here\n 31 |     domainName: String,\n 32 |     source: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupCancellationHandler.swift:7:58: error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 5 |  * Implementation of the cancellation handler for backup operations.\n 6 |  */\n 7 | public actor BackupCancellationHandler: BackupInterfaces.CancellationHandlerProtocol {\n   |                                                          `- error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 8 |   /// Map of operation IDs to cancellation tokens\n 9 |   private var tokens: [UUID: BackupCancellationToken]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupErrorMapper.swift:43:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n41 | \n42 |     // Handle NSError types\n43 |     if let nsError=error as? NSError {\n   |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n44 |       switch nsError.domain {\n45 |         case NSURLErrorDomain:\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:17:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 15 | \n 16 |   /// Handler for operation cancellation\n 17 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 18 | \n 19 |   /// Collector for metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:40:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 38 |   public init(\n 39 |     logger: any LoggingProtocol,\n 40 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 41 |     metricsCollector: BackupMetricsCollector,\n 42 |     errorLogContextMapper: ErrorLogContextMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:75:55: error: value of type 'P' has no member 'operationID'\n 73 |     )\n 74 |     .withOperation(parameters.operationType)\n 75 |     .withPublic(key: \"operationID\", value: parameters.operationID.uuidString)\n    |                                                       `- error: value of type 'P' has no member 'operationID'\n 76 | \n 77 |     // Log operation start\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:85:28: warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n 61 |    * - Throws: BackupOperationError if the operation fails\n 62 |    */\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n    |                                                     `- note: consider making generic parameter 'R' conform to the 'Sendable' protocol\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, BackupCancellationToken?) async throws -\u003e R,\n    :\n 83 |     do {\n 84 |       // Execute the operation\n 85 |       let result=try await operation(parameters, progressReporter, cancellationToken)\n    |                            `- warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n 86 | \n 87 |       // Log operation completion\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:16:35: error: cannot find type 'CancellationHandlerProtocol' in scope\n 14 |  * - Support for both task-based and token-based cancellation\n 15 |  */\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n    |                                   `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cany Sendable, Error\u003e]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:174:21: error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n172 |  * Implementation of BackupCancellationToken.\n173 |  */\n174 | private final class BackupCancellationTokenImpl: BackupCancellationToken, @unchecked Sendable {\n    |                     |- error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n    |                     `- note: add stubs for conformance\n175 |   /// The unique identifier for this token\n176 |   public let id: String\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/BackupCancellationToken.swift:25:8: note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n23 |    * - Parameter callback: The callback to register\n24 |    */\n25 |   func registerCancellationCallback(_ callback: @escaping @Sendable () -\u003e Void) async\n   |        `- note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n26 | }\n27 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:216:20: warning: result of call to 'cancelOperation(id:)' is unused\n214 | \n215 |     // Notify the handler\n216 |     await handler?.cancelOperation(id: id)\n    |                    `- warning: result of call to 'cancelOperation(id:)' is unused\n217 |   }\n218 | }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorLogContextMapper.swift:28:32: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n26 |   ) -\u003e BackupLogContextImpl {\n27 |     // Start with the base context or create a new one\n28 |     let context=baseContext ?? BackupLogContextImpl(\n   |                                `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n29 |       domainName: \"BackupServices\",\n30 |       source: \"ErrorMapper\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorLogContextMapper.swift:40:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n38 | \n39 |     // Add error code if available\n40 |     if let nsError=error as? NSError {\n   |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n41 |       return errorContext\n42 |         .withPublic(key: \"errorCode\", value: String(nsError.code))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorMapper.swift:58:17: error: type '_ErrorCodeProtocol' has no member 'other'\n 56 |         )\n 57 | \n 58 |       case let .other(message):\n    |                 `- error: type '_ErrorCodeProtocol' has no member 'other'\n 59 |         BackupError.unknownError(\n 60 |           details: message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:27:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 25 | \n 26 |   /// Handler for operation cancellation\n 27 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 28 | \n 29 |   /// Collector for operation metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:52:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 50 |   public init(\n 51 |     resticService: ResticServiceProtocol,\n 52 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 53 |     metricsCollector: BackupMetricsCollector,\n 54 |     logger: any LoggingProtocol,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:348:16: error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n346 |       secondSnapshotID: secondSnapshotID,\n347 |       addedFiles: interfaceDifference.addedFiles\n348 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n    |                `- error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n349 |       removedFiles: interfaceDifference.removedFiles\n350 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:350:16: error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n348 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n349 |       removedFiles: interfaceDifference.removedFiles\n350 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n    |                `- error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n351 |       modifiedFiles: interfaceDifference.modifiedFiles\n352 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:352:16: error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n350 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n351 |       modifiedFiles: interfaceDifference.modifiedFiles\n352 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n    |                `- error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n353 |       unchangedFiles: [],\n354 |       changeSize: calculateChangeSize(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:532:10: error: type 'VerificationIssue.IssueType' has no member 'permissionDenied'\n530 |         .checksumMismatch\n531 |       case .permissionDenied:\n532 |         .permissionDenied\n    |          `- error: type 'VerificationIssue.IssueType' has no member 'permissionDenied'\n533 |       case .structuralError:\n534 |         .structuralError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:549:10: error: type 'RepairAction.ActionType' has no member 'pruneRepository'\n547 |         .rebuildMetadata\n548 |       case .pruneRepository:\n549 |         .pruneRepository\n    |          `- error: type 'RepairAction.ActionType' has no member 'pruneRepository'\n550 |     }\n551 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:585:19: error: value of type 'SnapshotFileDTO' has no member 'mode'\n583 |       size: entry.size,\n584 |       modificationTime: entry.modificationTime ?? Date(),\n585 |       mode: entry.mode ?? 0,\n    |                   `- error: value of type 'SnapshotFileDTO' has no member 'mode'\n586 |       uid: entry.uid ?? 0,\n587 |       gid: entry.gid ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:586:18: error: value of type 'SnapshotFileDTO' has no member 'uid'\n584 |       modificationTime: entry.modificationTime ?? Date(),\n585 |       mode: entry.mode ?? 0,\n586 |       uid: entry.uid ?? 0,\n    |                  `- error: value of type 'SnapshotFileDTO' has no member 'uid'\n587 |       gid: entry.gid ?? 0,\n588 |       contentHash: entry.hash\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:587:18: error: value of type 'SnapshotFileDTO' has no member 'gid'\n585 |       mode: entry.mode ?? 0,\n586 |       uid: entry.uid ?? 0,\n587 |       gid: entry.gid ?? 0,\n    |                  `- error: value of type 'SnapshotFileDTO' has no member 'gid'\n588 |       contentHash: entry.hash\n589 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:588:26: error: value of type 'SnapshotFileDTO' has no member 'hash'\n586 |       uid: entry.uid ?? 0,\n587 |       gid: entry.gid ?? 0,\n588 |       contentHash: entry.hash\n    |                          `- error: value of type 'SnapshotFileDTO' has no member 'hash'\n589 |     )\n590 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:668:41: error: cannot find 'DiffResultDTO' in scope\n666 |       decoder.dateDecodingStrategy = .iso8601\n667 | \n668 |       let diffResult=try decoder.decode(DiffResultDTO.self, from: jsonData)\n    |                                         `- error: cannot find 'DiffResultDTO' in scope\n669 | \n670 |       // Extract the files from the diff result\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:668:34: error: type of expression is ambiguous without a type annotation\n666 |       decoder.dateDecodingStrategy = .iso8601\n667 | \n668 |       let diffResult=try decoder.decode(DiffResultDTO.self, from: jsonData)\n    |                                  `- error: type of expression is ambiguous without a type annotation\n669 | \n670 |       // Extract the files from the diff result\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:679:11: error: argument 'type' must precede argument 'permissions'\n677 |           owner: entry.user,\n678 |           group: entry.group,\n679 |           type: entry.type ?? \"file\"\n    |           `- error: argument 'type' must precede argument 'permissions'\n680 |         )\n681 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:691:11: error: argument 'type' must precede argument 'permissions'\n689 |           owner: entry.user,\n690 |           group: entry.group,\n691 |           type: entry.type ?? \"file\"\n    |           `- error: argument 'type' must precede argument 'permissions'\n692 |         )\n693 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:703:11: error: argument 'type' must precede argument 'permissions'\n701 |           owner: entry.user,\n702 |           group: entry.group,\n703 |           type: entry.type ?? \"file\"\n    |           `- error: argument 'type' must precede argument 'permissions'\n704 |         )\n705 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:14:28: error: cannot find type 'DomainLoggerProtocol' in scope\n 12 |  * file paths and backup metadata.\n 13 |  */\n 14 | public actor BackupLogger: DomainLoggerProtocol {\n    |                            `- error: cannot find type 'DomainLoggerProtocol' in scope\n 15 |   /// The underlying logger\n 16 |   private let loggingService: any LoggingProtocol\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:376:25: error: cannot find type 'MetadataCollection' in scope\n374 | \n375 | extension BackupLogContext {\n376 |   func getMetadata() -\u003e MetadataCollection {\n    |                         `- error: cannot find type 'MetadataCollection' in scope\n377 |     // Implement the getMetadata method\n378 |     // This is a placeholder, you should implement the actual logic to get the metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:61:40: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 59 |       source: domainName\n 60 |     )\n 61 |     await log(level, message, context: context)\n    |                                        `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 62 |   }\n 63 | \n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:95:36: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n 93 | \n 94 |       // Create a new context with error information\n 95 |       if let backupContext=context as? BackupLogContextImpl {\n    |                                    `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n 96 |         // Update the context with error information\n 97 |         let updatedContext=backupContext.withUpdatedMetadata(\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:97:42: error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n 95 |       if let backupContext=context as? BackupLogContextImpl {\n 96 |         // Update the context with error information\n 97 |         let updatedContext=backupContext.withUpdatedMetadata(\n    |                                          `- error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n 98 |           backupContext.metadata.withPrivate(key: \"error\", value: error.localizedDescription)\n 99 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:109:36: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n107 |       let formattedMessage=\"[\\(domainName)] \\(error.localizedDescription)\"\n108 | \n109 |       if let backupContext=context as? BackupLogContextImpl {\n    |                                    `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n110 |         // Update the context with error information\n111 |         let updatedContext=backupContext.withUpdatedMetadata(\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:111:42: error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n109 |       if let backupContext=context as? BackupLogContextImpl {\n110 |         // Update the context with error information\n111 |         let updatedContext=backupContext.withUpdatedMetadata(\n    |                                          `- error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n112 |           backupContext.metadata.withPrivate(key: \"error\", value: error.localizedDescription)\n113 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:138:36: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n136 | \n137 |       // Create a new context with error information\n138 |       if let backupContext=context as? BackupLogContextImpl {\n    |                                    `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n139 |         // Update the context with error information\n140 |         let updatedContext=backupContext.withUpdatedMetadata(\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:140:42: error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n138 |       if let backupContext=context as? BackupLogContextImpl {\n139 |         // Update the context with error information\n140 |         let updatedContext=backupContext.withUpdatedMetadata(\n    |                                          `- error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n141 |           backupContext.metadata.withPrivate(key: \"error\", value: error.localizedDescription)\n142 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:152:36: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n150 |       let formattedMessage=message ?? \"[\\(domainName)] \\(error.localizedDescription)\"\n151 | \n152 |       if let backupContext=context as? BackupLogContextImpl {\n    |                                    `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n153 |         // Update the context with error information\n154 |         let updatedContext=backupContext.withUpdatedMetadata(\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:154:42: error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n152 |       if let backupContext=context as? BackupLogContextImpl {\n153 |         // Update the context with error information\n154 |         let updatedContext=backupContext.withUpdatedMetadata(\n    |                                          `- error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n155 |           backupContext.metadata.withPrivate(key: \"error\", value: error.localizedDescription)\n156 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:183:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n181 |       level,\n182 |       message,\n183 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n184 |     )\n185 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:194:34: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n192 |    */\n193 |   private func enhanceContext(_ context: BackupLogContext) -\u003e BackupLogContextImpl {\n194 |     if let backupContext=context as? BackupLogContextImpl {\n    |                                  `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n195 |       return backupContext\n196 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:200:37: error: missing argument for parameter 'source' in call\n198 |     // Create a new context with the same information\n199 |     return BackupLogContextImpl(\n200 |       domainName: context.domainName,\n    |                                     `- error: missing argument for parameter 'source' in call\n201 |       metadata: context.getMetadata()\n202 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:30:10: note: 'init(domainName:source:metadata:)' declared here\n 28 |    *   - metadata: The metadata collection\n 29 |    */\n 30 |   public init(\n    |          `- note: 'init(domainName:source:metadata:)' declared here\n 31 |     domainName: String,\n 32 |     source: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:306:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n304 |       .info,\n305 |       message ?? defaultMessage,\n306 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n307 |     )\n308 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:327:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n325 |       .error,\n326 |       message,\n327 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n328 |     )\n329 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:370:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n368 |       .info,\n369 |       message ?? defaultMessage,\n370 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n371 |     )\n372 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:111:32: error: cannot find type 'MetadataCollection' in scope\n109 |    * - Returns: The metadata collection\n110 |    */\n111 |   public func getMetadata() -\u003e MetadataCollection {\n    |                                `- error: cannot find type 'MetadataCollection' in scope\n112 |     metadata\n113 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:12:15: error: inheritance from non-protocol type 'BackupLogContext'\n 10 |  * allowing for structured logging with appropriate privacy classifications.\n 11 |  */\n 12 | public struct BackupLogContextImpl: BackupLogContext, Sendable {\n    |               `- error: inheritance from non-protocol type 'BackupLogContext'\n 13 |   /// The domain name for the log context\n 14 |   public let domainName: String\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:60:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 58 |   public func withPublic(key: String, value: String) -\u003e Self {\n 59 |     var newMetadata=metadata\n 60 |     newMetadata.add(key: key, value: value, privacy: .public)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 61 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 62 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:60:55: error: cannot infer contextual base in reference to member 'public'\n 58 |   public func withPublic(key: String, value: String) -\u003e Self {\n 59 |     var newMetadata=metadata\n 60 |     newMetadata.add(key: key, value: value, privacy: .public)\n    |                                                       `- error: cannot infer contextual base in reference to member 'public'\n 61 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 62 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:74:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 72 |   public func withPrivate(key: String, value: String) -\u003e Self {\n 73 |     var newMetadata=metadata\n 74 |     newMetadata.add(key: key, value: value, privacy: .private)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 75 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:74:55: error: cannot infer contextual base in reference to member 'private'\n 72 |   public func withPrivate(key: String, value: String) -\u003e Self {\n 73 |     var newMetadata=metadata\n 74 |     newMetadata.add(key: key, value: value, privacy: .private)\n    |                                                       `- error: cannot infer contextual base in reference to member 'private'\n 75 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:88:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 86 |   public func withSensitive(key: String, value: String) -\u003e Self {\n 87 |     var newMetadata=metadata\n 88 |     newMetadata.add(key: key, value: value, privacy: .sensitive)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 89 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 90 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:88:55: error: cannot infer contextual base in reference to member 'sensitive'\n 86 |   public func withSensitive(key: String, value: String) -\u003e Self {\n 87 |     var newMetadata=metadata\n 88 |     newMetadata.add(key: key, value: value, privacy: .sensitive)\n    |                                                       `- error: cannot infer contextual base in reference to member 'sensitive'\n 89 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 90 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:102:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n100 |   public func withHashed(key: String, value: String) -\u003e Self {\n101 |     var newMetadata=metadata\n102 |     newMetadata.add(key: key, value: value, privacy: .hash)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n103 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n104 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:102:55: error: cannot infer contextual base in reference to member 'hash'\n100 |   public func withHashed(key: String, value: String) -\u003e Self {\n101 |     var newMetadata=metadata\n102 |     newMetadata.add(key: key, value: value, privacy: .hash)\n    |                                                       `- error: cannot infer contextual base in reference to member 'hash'\n103 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n104 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:221:25: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n    |                         `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n222 |     BackupInterfaces.SnapshotFileEntry(\n223 |       path: file.path ?? \"\",\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:220:8: error: no type named 'SnapshotFile' in module 'BackupServices'\n218 |   public static func toInterfaceSnapshotFileEntry(\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n    |        `- error: no type named 'SnapshotFile' in module 'BackupServices'\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n222 |     BackupInterfaces.SnapshotFileEntry(\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:241:24: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n    |                        `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n242 |     guard let files else { return nil }\n243 |     return files.map(toInterfaceSnapshotFileEntry)\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:240:78: error: no type named 'SnapshotFile' in module 'BackupServices'\n238 |    * - Returns: An array of converted snapshot file entries compatible with the interfaces module\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n    |                                                                              `- error: no type named 'SnapshotFile' in module 'BackupServices'\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n242 |     guard let files else { return nil }\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:33:13: error: type 'VerificationIssueDTO.IssueType' has no member 'integrityViolation'\n 31 |       case .checksumMismatch:\n 32 |         .checksumMismatch\n 33 |       case .integrityViolation:\n    |             `- error: type 'VerificationIssueDTO.IssueType' has no member 'integrityViolation'\n 34 |         .integrityViolation\n 35 |       case .other:\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:117:13: error: type 'RepairActionDTO.ActionType' has no member 'removeCorrupted'\n115 |       case .rebuildMetadata:\n116 |         .rebuildMetadata\n117 |       case .removeCorrupted:\n    |             `- error: type 'RepairActionDTO.ActionType' has no member 'removeCorrupted'\n118 |         .removeCorrupted\n119 |       case .other:\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:493:7: error: argument 'before' must precede argument 'host'\n491 |       host: parameters.host,\n492 |       path: parameters.path.map { URL(fileURLWithPath: $0) },\n493 |       before: nil,\n    |       `- error: argument 'before' must precede argument 'host'\n494 |       after: nil\n495 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:18:14: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n16 |   /// - Returns: A ProgressCancellationToken that delegates to the original token\n17 |   public static func asProgressCancellationToken(\n18 |     _ token: BackupOperationCancellationTokenImpl\n   |              `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n19 |   ) -\u003e ProgressCancellationToken {\n20 |     ProgressCancellationTokenAdapter(token: token)\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:28:22: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n26 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken,\n27 | @unchecked Sendable {\n28 |   private let token: BackupOperationCancellationTokenImpl\n   |                      `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:31:15: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n31 |   init(token: BackupOperationCancellationTokenImpl) {\n   |               `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n32 |     self.token=token\n33 |     // Set up task to monitor the cancellation state\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:87:11: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n85 | \n86 | /// Extension to BackupOperationCancellationTokenImpl for tracking with BackupOperation\n87 | extension BackupOperationCancellationTokenImpl {\n   |           `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n88 |   /// Register this token with the given operation\n89 |   ///\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:76:9: warning: no 'async' operations occur within 'await' expression\n74 |       while !_isCancelled {\n75 |         try? await Task.sleep(nanoseconds: 100_000_000) // 100ms\n76 |         await self.updateCancellationState()\n   |         `- warning: no 'async' operations occur within 'await' expression\n77 |         if self._isCancelled {\n78 |           callback()\nTarget //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator failed to build\nINFO: Elapsed time: 4.201s, Critical Path: 4.10s\nINFO: 2 processes: 8 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BackupServices:BackupServices",
    "success": false,
    "start_time": "2025-04-09T00:54:32.876366+01:00",
    "end_time": "2025-04-09T00:54:37.698112+01:00",
    "duration": "4.821724667s",
    "output": "INFO: Invocation ID: 8fdf0cb8-f1ec-446e-a58a-64d56bc81c5b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupServices:BackupServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupServices:BackupServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BackupServices:BackupServices (0 packages loaded, 0 targets configured).\n[1 / 3] Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices; 1s disk-cache, worker\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/BackupServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/BackupServices:BackupServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/BackupServices/BackupServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:58:60: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n  56 | \n  57 |   /// Active operation cancellation tokens\n  58 |   private var activeOperationsCancellationTokens: [String: BackupOperationCancellationTokenImpl]=[:]\n     |                                                            `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n  59 | \n  60 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:729:45: error: cannot find type 'VerificationResult' in scope\n 727 |     repairMode: BackupInterfaces.RepairMode?=nil,\n 728 |     options: BackupInterfaces.VerifyOptions?=nil\n 729 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n     |                                             `- error: cannot find type 'VerificationResult' in scope\n 730 |     // Create a log context\n 731 |     let logContext=BackupLogContextImpl(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:727:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n 725 |     snapshotID: String?,\n 726 |     verifyData: Bool=true,\n 727 |     repairMode: BackupInterfaces.RepairMode?=nil,\n     |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n 728 |     options: BackupInterfaces.VerifyOptions?=nil\n 729 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:42:14: error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n  40 |  - Progress reporting through AsyncStream\n  41 |  */\n  42 | public actor BackupServicesActor: BackupServiceProtocol {\n     |              |- error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n     |              `- note: add stubs for conformance\n  43 |   // MARK: - Properties\n  44 | \n     :\n 118 |    * - Returns: A Result containing either the operation response or an error\n 119 |    */\n 120 |   public func createBackup(\n     |               `- note: candidate has non-matching type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 121 |     sources: [URL],\n 122 |     excludePaths: [URL]?,\n     :\n 264 |    * - Returns: A Result containing either the operation response or an error\n 265 |    */\n 266 |   public func restoreBackup(\n     |               `- note: candidate has non-matching type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 267 |     snapshotID: String,\n 268 |     targetPath: URL,\n     :\n 404 |    * - Returns: A Result containing either the list of snapshots or an error\n 405 |    */\n 406 |   public func listSnapshots(\n     |               `- note: candidate has non-matching type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n 407 |     tags: [String]?,\n 408 |     before: Date?,\n     :\n 497 |    * - Returns: A Result containing either the operation response or an error\n 498 |    */\n 499 |   public func deleteBackup(\n     |               `- note: candidate has non-matching type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n 500 |     snapshotID: String,\n 501 |     deleteOptions: DeleteOptions?\n     :\n 611 |    * - Returns: A Result containing either the operation response or an error\n 612 |    */\n 613 |   public func performMaintenance(\n     |               `- note: candidate has non-matching type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n 614 |     type: MaintenanceType,\n 615 |     maintenanceOptions: MaintenanceOptions?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Protocols/BackupServiceProtocol.swift:58:8: note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 56 |    * - Returns: A Result containing either the operation response or an error\n 57 |    */\n 58 |   func createBackup(\n    |        `- note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 59 |     sources: [URL],\n 60 |     excludePaths: [URL]?,\n    :\n 77 |    * - Returns: A Result containing either the operation response or an error\n 78 |    */\n 79 |   func restoreBackup(\n    |        `- note: protocol requires function 'restoreBackup(snapshotID:targetPath:includePaths:excludePaths:restoreOptions:)' with type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 80 |     snapshotID: String,\n 81 |     targetPath: URL,\n    :\n 99 |    * - Returns: A Result containing either the list of snapshots or an error\n100 |    */\n101 |   func listSnapshots(\n    |        `- note: protocol requires function 'listSnapshots(tags:before:after:listOptions:)' with type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n102 |     tags: [String]?,\n103 |     before: Date?,\n    :\n117 |    * - Returns: A Result containing either the operation response or an error\n118 |    */\n119 |   func deleteBackup(\n    |        `- note: protocol requires function 'deleteBackup(snapshotID:deleteOptions:)' with type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n120 |     snapshotID: String,\n121 |     deleteOptions: DeleteOptions?\n    :\n134 |    * - Returns: A Result containing either the operation response or an error\n135 |    */\n136 |   func performMaintenance(\n    |        `- note: protocol requires function 'performMaintenance(type:maintenanceOptions:)' with type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n137 |     type: MaintenanceType,\n138 |     maintenanceOptions: MaintenanceOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:32:13: error: cannot find type 'LoggingProtocol' in scope\n 30 |     resticService: ResticServiceProtocol,\n 31 |     resultParser: SnapshotResultParser,\n 32 |     logger: LoggingProtocol\n    |             `- error: cannot find type 'LoggingProtocol' in scope\n 33 |   ) {\n 34 |     self.resticService=resticService\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:40:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 38 |   public init(\n 39 |     logger: any LoggingProtocol,\n 40 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 41 |     metricsCollector: BackupMetricsCollector,\n 42 |     errorLogContextMapper: ErrorLogContextMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:72:26: error: cannot find type 'CancellationToken' in scope\n  70 |     parameters: BackupCreateParameters,\n  71 |     progressReporter: BackupProgressReporter?,\n  72 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n  73 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n  74 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:144:26: error: cannot find type 'CancellationToken' in scope\n 142 |     parameters: BackupRestoreParameters,\n 143 |     progressReporter: BackupProgressReporter?,\n 144 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 145 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n 146 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:270:26: error: cannot find type 'CancellationToken' in scope\n 268 |   public func deleteBackup(\n 269 |     parameters: BackupDeleteParameters,\n 270 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 271 |   ) async throws -\u003e DeleteResult {\n 272 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:964:26: error: cannot find type 'CancellationToken' in scope\n 962 |     parameters: BackupMaintenanceParameters,\n 963 |     progressReporter: BackupProgressReporter?,\n 964 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 965 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupProgressInfo\u003e) {\n 966 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:888:30: error: value of type 'DeleteResponse' has no member 'errors'\n 886 |       return DeleteResult(\n 887 |         snapshotID: snapshotID,\n 888 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                              `- error: value of type 'DeleteResponse' has no member 'errors'\n 889 |         filesDeleted: response.filesDeleted ?? 0,\n 890 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:888:57: error: value of type 'DeleteResponse' has no member 'errors'\n 886 |       return DeleteResult(\n 887 |         snapshotID: snapshotID,\n 888 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                                                         `- error: value of type 'DeleteResponse' has no member 'errors'\n 889 |         filesDeleted: response.filesDeleted ?? 0,\n 890 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:268:13: warning: variable 'args' was never mutated; consider changing to 'let' constant\n266 |       operation: { _, reporter, _ in\n267 |         // Create a command to get snapshot details with statistics\n268 |         var args=[\"snapshots\", snapshotID, \"--json\", \"--stats\"]\n    |             `- warning: variable 'args' was never mutated; consider changing to 'let' constant\n269 | \n270 |         let command=ResticCommandImpl(arguments: args)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:19:23: error: cannot find type 'LoggingProtocol' in scope\n 17 | \n 18 |   /// Logger for snapshot operations\n 19 |   private let logger: LoggingProtocol\n    |                       `- error: cannot find type 'LoggingProtocol' in scope\n 20 | \n 21 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupCancellationHandler.swift:7:58: error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 5 |  * Implementation of the cancellation handler for backup operations.\n 6 |  */\n 7 | public actor BackupCancellationHandler: BackupInterfaces.CancellationHandlerProtocol {\n   |                                                          `- error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 8 |   /// Map of operation IDs to cancellation tokens\n 9 |   private var tokens: [UUID: BackupCancellationToken]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:17:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 15 | \n 16 |   /// Handler for operation cancellation\n 17 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 18 | \n 19 |   /// Collector for metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:16:35: error: cannot find type 'CancellationHandlerProtocol' in scope\n 14 |  * - Support for both task-based and token-based cancellation\n 15 |  */\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n    |                                   `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cany Sendable, Error\u003e]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:174:21: error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n172 |  * Implementation of BackupCancellationToken.\n173 |  */\n174 | private final class BackupCancellationTokenImpl: BackupCancellationToken, @unchecked Sendable {\n    |                     |- error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n    |                     `- note: add stubs for conformance\n175 |   /// The unique identifier for this token\n176 |   public let id: String\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/BackupCancellationToken.swift:25:8: note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n23 |    * - Parameter callback: The callback to register\n24 |    */\n25 |   func registerCancellationCallback(_ callback: @escaping @Sendable () -\u003e Void) async\n   |        `- note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n26 | }\n27 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:27:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 25 | \n 26 |   /// Handler for operation cancellation\n 27 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 28 | \n 29 |   /// Collector for operation metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:52:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 50 |   public init(\n 51 |     resticService: ResticServiceProtocol,\n 52 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 53 |     metricsCollector: BackupMetricsCollector,\n 54 |     logger: any LoggingProtocol,\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:14:28: error: cannot find type 'DomainLoggerProtocol' in scope\n 12 |  * file paths and backup metadata.\n 13 |  */\n 14 | public actor BackupLogger: DomainLoggerProtocol {\n    |                            `- error: cannot find type 'DomainLoggerProtocol' in scope\n 15 |   /// The underlying logger\n 16 |   private let loggingService: any LoggingProtocol\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:376:25: error: cannot find type 'MetadataCollection' in scope\n374 | \n375 | extension BackupLogContext {\n376 |   func getMetadata() -\u003e MetadataCollection {\n    |                         `- error: cannot find type 'MetadataCollection' in scope\n377 |     // Implement the getMetadata method\n378 |     // This is a placeholder, you should implement the actual logic to get the metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:111:32: error: cannot find type 'MetadataCollection' in scope\n109 |    * - Returns: The metadata collection\n110 |    */\n111 |   public func getMetadata() -\u003e MetadataCollection {\n    |                                `- error: cannot find type 'MetadataCollection' in scope\n112 |     metadata\n113 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:12:15: error: inheritance from non-protocol type 'BackupLogContext'\n 10 |  * allowing for structured logging with appropriate privacy classifications.\n 11 |  */\n 12 | public struct BackupLogContextImpl: BackupLogContext, Sendable {\n    |               `- error: inheritance from non-protocol type 'BackupLogContext'\n 13 |   /// The domain name for the log context\n 14 |   public let domainName: String\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:221:25: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n    |                         `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n222 |     BackupInterfaces.SnapshotFileEntry(\n223 |       path: file.path ?? \"\",\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:220:8: error: no type named 'SnapshotFile' in module 'BackupServices'\n218 |   public static func toInterfaceSnapshotFileEntry(\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n    |        `- error: no type named 'SnapshotFile' in module 'BackupServices'\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n222 |     BackupInterfaces.SnapshotFileEntry(\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:241:24: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n    |                        `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n242 |     guard let files else { return nil }\n243 |     return files.map(toInterfaceSnapshotFileEntry)\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:240:78: error: no type named 'SnapshotFile' in module 'BackupServices'\n238 |    * - Returns: An array of converted snapshot file entries compatible with the interfaces module\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n    |                                                                              `- error: no type named 'SnapshotFile' in module 'BackupServices'\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n242 |     guard let files else { return nil }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:18:14: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n16 |   /// - Returns: A ProgressCancellationToken that delegates to the original token\n17 |   public static func asProgressCancellationToken(\n18 |     _ token: BackupOperationCancellationTokenImpl\n   |              `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n19 |   ) -\u003e ProgressCancellationToken {\n20 |     ProgressCancellationTokenAdapter(token: token)\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:28:22: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n26 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken,\n27 | @unchecked Sendable {\n28 |   private let token: BackupOperationCancellationTokenImpl\n   |                      `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:31:15: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n31 |   init(token: BackupOperationCancellationTokenImpl) {\n   |               `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n32 |     self.token=token\n33 |     // Set up task to monitor the cancellation state\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:87:11: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n85 | \n86 | /// Extension to BackupOperationCancellationTokenImpl for tracking with BackupOperation\n87 | extension BackupOperationCancellationTokenImpl {\n   |           `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n88 |   /// Register this token with the given operation\n89 |   ///\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:866:6: error: consecutive statements on a line must be separated by ';'\n 864 |       // Map the error and rethrow\n 865 |       throw errorMapper.mapError(error)\n 866 |     } finally {\n     |      `- error: consecutive statements on a line must be separated by ';'\n 867 |       // Unregister the token\n 868 |       await cancellationHandler.unregisterToken(for: parameters.operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:82:28: error: missing argument for parameter 'source' in call\n 80 |    */\n 81 |   public func toLogContext() -\u003e LogContext {\n 82 |     var context=LogContext()\n    |                            `- error: missing argument for parameter 'source' in call\n 83 | \n 84 |     context.add(\"operation_id\", operationID, privacy: .public)\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swift:408:10: note: 'init(source:metadata:correlationID:timestamp:domainName:)' declared here\n406 |   ///   - correlationId: Unique identifier for correlating related logs\n407 |   ///   - timestamp: Timestamp (defaults to a pre-generated value)\n408 |   public init(\n    |          `- note: 'init(source:metadata:correlationID:timestamp:domainName:)' declared here\n409 |     source: String,\n410 |     metadata: PrivacyMetadata?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:84:56: error: cannot infer contextual base in reference to member 'public'\n 82 |     var context=LogContext()\n 83 | \n 84 |     context.add(\"operation_id\", operationID, privacy: .public)\n    |                                                        `- error: cannot infer contextual base in reference to member 'public'\n 85 |     context.add(\"operation_type\", operationType.rawValue, privacy: .public)\n 86 | \n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:85:69: error: cannot infer contextual base in reference to member 'public'\n 83 | \n 84 |     context.add(\"operation_id\", operationID, privacy: .public)\n 85 |     context.add(\"operation_type\", operationType.rawValue, privacy: .public)\n    |                                                                     `- error: cannot infer contextual base in reference to member 'public'\n 86 | \n 87 |     if let paths=sourcePaths {\n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:88:52: error: cannot infer contextual base in reference to member 'private'\n 86 | \n 87 |     if let paths=sourcePaths {\n 88 |       context.add(\"source_paths\", paths, privacy: .private)\n    |                                                    `- error: cannot infer contextual base in reference to member 'private'\n 89 |     }\n 90 | \n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:92:48: error: cannot infer contextual base in reference to member 'public'\n 90 | \n 91 |     if let id=snapshotID {\n 92 |       context.add(\"snapshot_id\", id, privacy: .public)\n    |                                                `- error: cannot infer contextual base in reference to member 'public'\n 93 |     }\n 94 | \n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:96:50: error: cannot infer contextual base in reference to member 'public'\n 94 | \n 95 |     if let id=repositoryID {\n 96 |       context.add(\"repository_id\", id, privacy: .public)\n    |                                                  `- error: cannot infer contextual base in reference to member 'public'\n 97 |     }\n 98 | \n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:101:43: error: cannot infer contextual base in reference to member 'auto'\n 99 |     if let additional=additionalContext {\n100 |       for (key, value) in additional {\n101 |         context.add(key, value, privacy: .auto)\n    |                                           `- error: cannot infer contextual base in reference to member 'auto'\n102 |       }\n103 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/SnapshotFileDTO.swift:88:17: error: cannot convert value of type 'FileType' to expected argument type 'SnapshotFileType'\n 86 |       uid: 0, // Default value as we don't have this information\n 87 |       gid: 0, // Default value as we don't have this information\n 88 |       fileType: fileType,\n    |                 `- error: cannot convert value of type 'FileType' to expected argument type 'SnapshotFileType'\n 89 |       contentHash: contentHash\n 90 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:55:50: error: missing arguments for parameters 'snapshotService', 'errorMapper' in call\n 53 | \n 54 |     // Create operations service\n 55 |     let operationsService=BackupOperationsService(\n    |                                                  `- error: missing arguments for parameters 'snapshotService', 'errorMapper' in call\n 56 |       resticService: resticService,\n 57 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:43:10: note: 'init(resticService:repositoryInfo:commandFactory:resultParser:snapshotService:errorMapper:)' declared here\n  41 |    *   - errorMapper: Error mapper for translating errors\n  42 |    */\n  43 |   public init(\n     |          `- note: 'init(resticService:repositoryInfo:commandFactory:resultParser:snapshotService:errorMapper:)' declared here\n  44 |     resticService: ResticServiceProtocol,\n  45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:40:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 38 |   public init(\n 39 |     logger: any LoggingProtocol,\n 40 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 41 |     metricsCollector: BackupMetricsCollector,\n 42 |     errorLogContextMapper: ErrorLogContextMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:127:22: error: argument type 'any ResticServiceProtocol' does not conform to expected type 'ResticServiceProtocol'\n125 |     // Create backup service using Alpha Dot Five architecture\n126 |     return await createBackupService(\n127 |       resticService: resticService,\n    |                      `- error: argument type 'any ResticServiceProtocol' does not conform to expected type 'ResticServiceProtocol'\n128 |       logger: logger,\n129 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:43:22: error: extra arguments at positions #2, #3 in call\n 41 |     let defaultMessage=\"Starting backup operation: \\(operation)\"\n 42 | \n 43 |     await logger.info(\n    |                      `- error: extra arguments at positions #2, #3 in call\n 44 |       message ?? defaultMessage,\n 45 |       metadata: logContext.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:44:32: error: missing argument for parameter 'context' in call\n 42 | \n 43 |     await logger.info(\n 44 |       message ?? defaultMessage,\n    |                                `- error: missing argument for parameter 'context' in call\n 45 |       metadata: logContext.toPrivacyMetadata(),\n 46 |       source: \"BackupService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:67:18: error: no exact matches in call to instance method 'info'\n 65 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"success\", privacy: .public)\n 66 | \n 67 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n 68 |       message ?? defaultMessage,\n 69 |       metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:91:18: error: no exact matches in call to instance method 'info'\n 89 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n 90 | \n 91 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n 92 |       message ?? defaultMessage,\n 93 |       metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:119:88: error: value of type 'BackupError' has no member 'code'\n117 |     // Add error details with appropriate privacy levels\n118 |     if let backupError=error as? BackupError {\n119 |       metadata[\"errorCode\"]=PrivacyMetadataValue(value: String(describing: backupError.code),\n    |                                                                                        `- error: value of type 'BackupError' has no member 'code'\n120 |                                                  privacy: .public)\n121 |       metadata[\"errorMessage\"]=PrivacyMetadataValue(value: backupError.localizedDescription,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:125:39: error: value of type 'BackupError' has no member 'context'\n123 | \n124 |       // Add structured error context if available\n125 |       if let errorContext=backupError.context {\n    |                                       `- error: value of type 'BackupError' has no member 'context'\n126 |         for (key, value) in errorContext {\n127 |           metadata[\"error_\\(key)\"]=PrivacyMetadataValue(value: value, privacy: .private)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:137:18: error: no exact matches in call to instance method 'error'\n135 |     }\n136 | \n137 |     await logger.error(\n    |                  `- error: no exact matches in call to instance method 'error'\n138 |       message ?? defaultMessage,\n139 |       metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 50 | \n 51 |   /// Log a critical message\n    :\n 85 |   }\n 86 | \n 87 |   public func error(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 88 |     await log(.error, message, context: context)\n 89 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:166:22: error: no exact matches in call to instance method 'info'\n164 |         metadata[\"description\"]=PrivacyMetadataValue(value: description, privacy: .public)\n165 | \n166 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n167 |           \"Initialising backup operation: \\(operation)\",\n168 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:179:22: error: no exact matches in call to instance method 'info'\n177 |                                                          privacy: .public)\n178 | \n179 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n180 |           \"Processing backup operation: \\(operation) - \\(phase) (\\(String(format: \"%.1f%%\", percentComplete * 100)))\",\n181 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:188:22: error: no exact matches in call to instance method 'info'\n186 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"completed\", privacy: .public)\n187 | \n188 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n189 |           \"Completed backup operation: \\(operation)\",\n190 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:197:22: error: no exact matches in call to instance method 'info'\n195 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n196 | \n197 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n198 |           \"Cancelled backup operation: \\(operation)\",\n199 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:218:22: error: no exact matches in call to instance method 'error'\n216 |         }\n217 | \n218 |         await logger.error(\n    |                      `- error: no exact matches in call to instance method 'error'\n219 |           \"Failed backup operation: \\(operation)\",\n220 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 50 | \n 51 |   /// Log a critical message\n    :\n 85 |   }\n 86 | \n 87 |   public func error(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 88 |     await log(.error, message, context: context)\n 89 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupCommandFactory.swift:178:9: warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n176 |   ) throws -\u003e ResticCommand {\n177 |     // Determine base command from maintenance type\n178 |     var baseCommand=switch type {\n    |         `- warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n179 |       case .check:\n180 |         \"check\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:58:60: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n  56 | \n  57 |   /// Active operation cancellation tokens\n  58 |   private var activeOperationsCancellationTokens: [String: BackupOperationCancellationTokenImpl]=[:]\n     |                                                            `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n  59 | \n  60 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:729:45: error: cannot find type 'VerificationResult' in scope\n 727 |     repairMode: BackupInterfaces.RepairMode?=nil,\n 728 |     options: BackupInterfaces.VerifyOptions?=nil\n 729 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n     |                                             `- error: cannot find type 'VerificationResult' in scope\n 730 |     // Create a log context\n 731 |     let logContext=BackupLogContextImpl(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:727:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n 725 |     snapshotID: String?,\n 726 |     verifyData: Bool=true,\n 727 |     repairMode: BackupInterfaces.RepairMode?=nil,\n     |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n 728 |     options: BackupInterfaces.VerifyOptions?=nil\n 729 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:42:14: error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n  40 |  - Progress reporting through AsyncStream\n  41 |  */\n  42 | public actor BackupServicesActor: BackupServiceProtocol {\n     |              |- error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n     |              `- note: add stubs for conformance\n  43 |   // MARK: - Properties\n  44 | \n     :\n 118 |    * - Returns: A Result containing either the operation response or an error\n 119 |    */\n 120 |   public func createBackup(\n     |               `- note: candidate has non-matching type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 121 |     sources: [URL],\n 122 |     excludePaths: [URL]?,\n     :\n 264 |    * - Returns: A Result containing either the operation response or an error\n 265 |    */\n 266 |   public func restoreBackup(\n     |               `- note: candidate has non-matching type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 267 |     snapshotID: String,\n 268 |     targetPath: URL,\n     :\n 404 |    * - Returns: A Result containing either the list of snapshots or an error\n 405 |    */\n 406 |   public func listSnapshots(\n     |               `- note: candidate has non-matching type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n 407 |     tags: [String]?,\n 408 |     before: Date?,\n     :\n 497 |    * - Returns: A Result containing either the operation response or an error\n 498 |    */\n 499 |   public func deleteBackup(\n     |               `- note: candidate has non-matching type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n 500 |     snapshotID: String,\n 501 |     deleteOptions: DeleteOptions?\n     :\n 611 |    * - Returns: A Result containing either the operation response or an error\n 612 |    */\n 613 |   public func performMaintenance(\n     |               `- note: candidate has non-matching type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n 614 |     type: MaintenanceType,\n 615 |     maintenanceOptions: MaintenanceOptions?\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Protocols/BackupServiceProtocol.swift:58:8: note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 56 |    * - Returns: A Result containing either the operation response or an error\n 57 |    */\n 58 |   func createBackup(\n    |        `- note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 59 |     sources: [URL],\n 60 |     excludePaths: [URL]?,\n    :\n 77 |    * - Returns: A Result containing either the operation response or an error\n 78 |    */\n 79 |   func restoreBackup(\n    |        `- note: protocol requires function 'restoreBackup(snapshotID:targetPath:includePaths:excludePaths:restoreOptions:)' with type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 80 |     snapshotID: String,\n 81 |     targetPath: URL,\n    :\n 99 |    * - Returns: A Result containing either the list of snapshots or an error\n100 |    */\n101 |   func listSnapshots(\n    |        `- note: protocol requires function 'listSnapshots(tags:before:after:listOptions:)' with type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n102 |     tags: [String]?,\n103 |     before: Date?,\n    :\n117 |    * - Returns: A Result containing either the operation response or an error\n118 |    */\n119 |   func deleteBackup(\n    |        `- note: protocol requires function 'deleteBackup(snapshotID:deleteOptions:)' with type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n120 |     snapshotID: String,\n121 |     deleteOptions: DeleteOptions?\n    :\n134 |    * - Returns: A Result containing either the operation response or an error\n135 |    */\n136 |   func performMaintenance(\n    |        `- note: protocol requires function 'performMaintenance(type:maintenanceOptions:)' with type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n137 |     type: MaintenanceType,\n138 |     maintenanceOptions: MaintenanceOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:32:13: error: cannot find type 'LoggingProtocol' in scope\n 30 |     resticService: ResticServiceProtocol,\n 31 |     resultParser: SnapshotResultParser,\n 32 |     logger: LoggingProtocol\n    |             `- error: cannot find type 'LoggingProtocol' in scope\n 33 |   ) {\n 34 |     self.resticService=resticService\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:134:5: error: cannot assign to value: 'logContext' is a 'let' constant\n 125 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e {\n 126 |     // Create a log context\n 127 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 128 |       domainName: \"BackupServices\",\n 129 |       source: \"BackupServicesActor\"\n     :\n 132 | \n 133 |     // Add source information with privacy classification\n 134 |     logContext=logContext.withPrivate(\n     |     `- error: cannot assign to value: 'logContext' is a 'let' constant\n 135 |       key: \"sources\",\n 136 |       value: sources.map(\\.path).joined(separator: \", \")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:140:7: error: cannot assign to value: 'logContext' is a 'let' constant\n 125 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e {\n 126 |     // Create a log context\n 127 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 128 |       domainName: \"BackupServices\",\n 129 |       source: \"BackupServicesActor\"\n     :\n 138 | \n 139 |     if let excludePaths, !excludePaths.isEmpty {\n 140 |       logContext=logContext.withPrivate(\n     |       `- error: cannot assign to value: 'logContext' is a 'let' constant\n 141 |         key: \"excludePaths\",\n 142 |         value: excludePaths.map(\\.path).joined(separator: \", \")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:147:7: error: cannot assign to value: 'logContext' is a 'let' constant\n 125 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e {\n 126 |     // Create a log context\n 127 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 128 |       domainName: \"BackupServices\",\n 129 |       source: \"BackupServicesActor\"\n     :\n 145 | \n 146 |     if let tags, !tags.isEmpty {\n 147 |       logContext=logContext.withPublic(\n     |       `- error: cannot assign to value: 'logContext' is a 'let' constant\n 148 |         key: \"tags\",\n 149 |         value: tags.joined(separator: \", \")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:154:51: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 152 | \n 153 |     // Log operation start\n 154 |     await backupLogger.logOperationStart(context: logContext)\n     |                                                   `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 155 | \n 156 |     // Input validation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:159:53: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 157 |     guard !sources.isEmpty else {\n 158 |       let error=BackupOperationError.invalidInput(\"Sources cannot be empty\")\n 159 |       await backupLogger.logOperationError(context: logContext, error: error)\n     |                                                     `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 160 |       return .failure(error)\n 161 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:175:15: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 173 | \n 174 |     // Create a cancellation token for this operation\n 175 |     let token=BackupOperationCancellationTokenImpl(id: UUID().uuidString)\n     |               `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 176 |     let operationID=token.id\n 177 |     activeOperationsCancellationTokens[operationID]=token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:72:26: error: cannot find type 'CancellationToken' in scope\n  70 |     parameters: BackupCreateParameters,\n  71 |     progressReporter: BackupProgressReporter?,\n  72 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n  73 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n  74 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:193:27: error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 191 |           )\n 192 |         },\n 193 |         progressReporter: progressReporter,\n     |                           `- error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 194 |         cancellationToken: token\n 195 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:188:32: warning: forced cast of 'BackupCreateParameters' to same type has no effect\n 186 |         operation: { params, progress, token in\n 187 |           try await operationsService.createBackup(\n 188 |             parameters: params as! BackupCreateParameters,\n     |                                `- warning: forced cast of 'BackupCreateParameters' to same type has no effect\n 189 |             progressReporter: progress,\n 190 |             cancellationToken: token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:215:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n 213 |         value: result,\n 214 |         progressStream: progressReporter.stream,\n 215 |         metadata: metadata\n     |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n 216 |       )\n 217 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:231:26: error: generic parameter 'some Sendable' could not be inferred\n 229 | \n 230 |       // Log success\n 231 |       await backupLogger.logOperationSuccess(\n     |                          `- error: generic parameter 'some Sendable' could not be inferred\n 232 |         context: enhancedContext,\n 233 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:294:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n292 |    *   - message: Optional custom message\n293 |    */\n294 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n295 |     context: BackupLogContext,\n296 |     result _: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:244:45: error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 242 | \n 243 |       // Log error\n 244 |       await backupLogger.logOperationFailure(\n     |                                             `- error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 245 |         context: logContext,\n 246 |         error: backupError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:245:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 243 |       // Log error\n 244 |       await backupLogger.logOperationFailure(\n 245 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 246 |         error: backupError\n 247 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:246:16: error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 244 |       await backupLogger.logOperationFailure(\n 245 |         context: logContext,\n 246 |         error: backupError\n     |                `- error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 247 |       )\n 248 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:283:7: error: cannot assign to value: 'logContext' is a 'let' constant\n 272 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e {\n 273 |     // Create a log context\n 274 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 275 |       domainName: \"BackupServices\",\n 276 |       source: \"BackupServicesActor\"\n     :\n 281 | \n 282 |     if let includePaths, !includePaths.isEmpty {\n 283 |       logContext=logContext.withPrivate(\n     |       `- error: cannot assign to value: 'logContext' is a 'let' constant\n 284 |         key: \"includePaths\",\n 285 |         value: includePaths.map(\\.path).joined(separator: \", \")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:290:7: error: cannot assign to value: 'logContext' is a 'let' constant\n 272 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e {\n 273 |     // Create a log context\n 274 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 275 |       domainName: \"BackupServices\",\n 276 |       source: \"BackupServicesActor\"\n     :\n 288 | \n 289 |     if let excludePaths, !excludePaths.isEmpty {\n 290 |       logContext=logContext.withPrivate(\n     |       `- error: cannot assign to value: 'logContext' is a 'let' constant\n 291 |         key: \"excludePaths\",\n 292 |         value: excludePaths.map(\\.path).joined(separator: \", \")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:297:51: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 295 | \n 296 |     // Log operation start\n 297 |     await backupLogger.logOperationStart(context: logContext)\n     |                                                   `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 298 | \n 299 |     // Input validation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:302:53: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 300 |     guard !snapshotID.isEmpty else {\n 301 |       let error=BackupOperationError.invalidInput(\"Snapshot ID cannot be empty\")\n 302 |       await backupLogger.logOperationError(context: logContext, error: error)\n     |                                                     `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 303 |       return .failure(error)\n 304 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:319:15: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 317 | \n 318 |     // Create a cancellation token for this operation\n 319 |     let token=BackupOperationCancellationTokenImpl(id: UUID().uuidString)\n     |               `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 320 |     let operationID=token.id\n 321 |     activeOperationsCancellationTokens[operationID]=token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:144:26: error: cannot find type 'CancellationToken' in scope\n 142 |     parameters: BackupRestoreParameters,\n 143 |     progressReporter: BackupProgressReporter?,\n 144 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 145 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n 146 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:337:27: error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 335 |           )\n 336 |         },\n 337 |         progressReporter: progressReporter,\n     |                           `- error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 338 |         cancellationToken: token\n 339 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:332:32: warning: forced cast of 'BackupRestoreParameters' to same type has no effect\n 330 |         operation: { params, progress, token in\n 331 |           try await operationsService.restoreBackup(\n 332 |             parameters: params as! BackupRestoreParameters,\n     |                                `- warning: forced cast of 'BackupRestoreParameters' to same type has no effect\n 333 |             progressReporter: progress,\n 334 |             cancellationToken: token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:372:26: error: generic parameter 'some Sendable' could not be inferred\n 370 | \n 371 |       // Log success\n 372 |       await backupLogger.logOperationSuccess(\n     |                          `- error: generic parameter 'some Sendable' could not be inferred\n 373 |         context: enhancedContext,\n 374 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:294:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n292 |    *   - message: Optional custom message\n293 |    */\n294 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n295 |     context: BackupLogContext,\n296 |     result _: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:385:45: error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 383 | \n 384 |       // Log error\n 385 |       await backupLogger.logOperationFailure(\n     |                                             `- error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 386 |         context: logContext,\n 387 |         error: backupError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:386:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 384 |       // Log error\n 385 |       await backupLogger.logOperationFailure(\n 386 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 387 |         error: backupError\n 388 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:387:16: error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 385 |       await backupLogger.logOperationFailure(\n 386 |         context: logContext,\n 387 |         error: backupError\n     |                `- error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 388 |       )\n 389 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:420:7: error: cannot assign to value: 'logContext' is a 'let' constant\n 411 |   ) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e {\n 412 |     // Create a log context\n 413 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 414 |       domainName: \"BackupServices\",\n 415 |       source: \"BackupServicesActor\"\n     :\n 418 | \n 419 |     if let tags, !tags.isEmpty {\n 420 |       logContext=logContext.withPublic(\n     |       `- error: cannot assign to value: 'logContext' is a 'let' constant\n 421 |         key: \"tags\",\n 422 |         value: tags.joined(separator: \", \")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:427:7: error: cannot assign to value: 'logContext' is a 'let' constant\n 411 |   ) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e {\n 412 |     // Create a log context\n 413 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 414 |       domainName: \"BackupServices\",\n 415 |       source: \"BackupServicesActor\"\n     :\n 425 | \n 426 |     if let before {\n 427 |       logContext=logContext.withPublic(\n     |       `- error: cannot assign to value: 'logContext' is a 'let' constant\n 428 |         key: \"before\",\n 429 |         value: before.description\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:434:7: error: cannot assign to value: 'logContext' is a 'let' constant\n 411 |   ) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e {\n 412 |     // Create a log context\n 413 |     let logContext=BackupLogContextImpl(\n     |     `- note: change 'let' to 'var' to make it mutable\n 414 |       domainName: \"BackupServices\",\n 415 |       source: \"BackupServicesActor\"\n     :\n 432 | \n 433 |     if let after {\n 434 |       logContext=logContext.withPublic(\n     |       `- error: cannot assign to value: 'logContext' is a 'let' constant\n 435 |         key: \"after\",\n 436 |         value: after.description\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:441:51: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 439 | \n 440 |     // Log operation start\n 441 |     await backupLogger.logOperationStart(context: logContext)\n     |                                                   `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 442 | \n 443 |     // Record the start time\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:451:20: error: extra argument 'listOptions' in call\n 449 |       before: before,\n 450 |       after: after,\n 451 |       listOptions: listOptions\n     |                    `- error: extra argument 'listOptions' in call\n 452 |     )\n 453 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:456:49: error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n 454 |     do {\n 455 |       // Execute the operation\n 456 |       let snapshots=try await operationsService.listSnapshots(parameters: parameters)\n     |                                                 `- error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n 457 | \n 458 |       // Record the end time\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:471:26: error: generic parameter 'some Sendable' could not be inferred\n 469 | \n 470 |       // Log success\n 471 |       await backupLogger.logOperationSuccess(\n     |                          `- error: generic parameter 'some Sendable' could not be inferred\n 472 |         context: enhancedContext,\n 473 |         result: snapshots\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:294:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n292 |    *   - message: Optional custom message\n293 |    */\n294 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n295 |     context: BackupLogContext,\n296 |     result _: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:482:45: error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 480 | \n 481 |       // Log error\n 482 |       await backupLogger.logOperationFailure(\n     |                                             `- error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 483 |         context: logContext,\n 484 |         error: backupError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:483:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 481 |       // Log error\n 482 |       await backupLogger.logOperationFailure(\n 483 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 484 |         error: backupError\n 485 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:484:16: error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 482 |       await backupLogger.logOperationFailure(\n 483 |         context: logContext,\n 484 |         error: backupError\n     |                `- error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 485 |       )\n 486 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:512:51: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 510 | \n 511 |     // Log operation start\n 512 |     await backupLogger.logOperationStart(context: logContext)\n     |                                                   `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 513 | \n 514 |     // Input validation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:517:53: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 515 |     guard !snapshotID.isEmpty else {\n 516 |       let error=BackupOperationError.invalidInput(\"Snapshot ID cannot be empty\")\n 517 |       await backupLogger.logOperationError(context: logContext, error: error)\n     |                                                     `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 518 |       return .failure(error)\n 519 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:527:40: error: value of type 'DeleteOptions' has no member 'prune'\n 525 |     let parameters=BackupDeleteParameters(\n 526 |       snapshotID: snapshotID,\n 527 |       pruneAfterDelete: deleteOptions?.prune ?? false\n     |                                        `- error: value of type 'DeleteOptions' has no member 'prune'\n 528 |     )\n 529 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:531:15: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 529 | \n 530 |     // Create a cancellation token for this operation\n 531 |     let token=BackupOperationCancellationTokenImpl(id: UUID().uuidString)\n     |               `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 532 |     let operationID=token.id\n 533 |     activeOperationsCancellationTokens[operationID]=token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:270:26: error: cannot find type 'CancellationToken' in scope\n 268 |   public func deleteBackup(\n 269 |     parameters: BackupDeleteParameters,\n 270 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 271 |   ) async throws -\u003e DeleteResult {\n 272 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:549:27: error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 547 |           )\n 548 |         },\n 549 |         progressReporter: progressReporter,\n     |                           `- error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 550 |         cancellationToken: token\n 551 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:581:26: error: generic parameter 'some Sendable' could not be inferred\n 579 | \n 580 |       // Log success\n 581 |       await backupLogger.logOperationSuccess(\n     |                          `- error: generic parameter 'some Sendable' could not be inferred\n 582 |         context: enhancedContext,\n 583 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:294:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n292 |    *   - message: Optional custom message\n293 |    */\n294 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n295 |     context: BackupLogContext,\n296 |     result _: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:594:45: error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 592 | \n 593 |       // Log error\n 594 |       await backupLogger.logOperationFailure(\n     |                                             `- error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 595 |         context: logContext,\n 596 |         error: backupError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:595:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 593 |       // Log error\n 594 |       await backupLogger.logOperationFailure(\n 595 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 596 |         error: backupError\n 597 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:596:16: error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 594 |       await backupLogger.logOperationFailure(\n 595 |         context: logContext,\n 596 |         error: backupError\n     |                `- error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 597 |       )\n 598 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:626:51: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 624 | \n 625 |     // Log operation start\n 626 |     await backupLogger.logOperationStart(context: logContext)\n     |                                                   `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 627 | \n 628 |     // Record the start time\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:638:15: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 636 | \n 637 |     // Create a cancellation token for this operation\n 638 |     let token=BackupOperationCancellationTokenImpl(id: UUID().uuidString)\n     |               `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 639 |     let operationID=token.id\n 640 |     activeOperationsCancellationTokens[operationID]=token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:964:26: error: cannot find type 'CancellationToken' in scope\n 962 |     parameters: BackupMaintenanceParameters,\n 963 |     progressReporter: BackupProgressReporter?,\n 964 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 965 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupProgressInfo\u003e) {\n 966 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:656:27: error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 654 |           )\n 655 |         },\n 656 |         progressReporter: progressReporter,\n     |                           `- error: argument type 'AsyncProgressReporter\u003cBackupProgressInfo\u003e' does not conform to expected type 'BackupProgressReporter'\n 657 |         cancellationToken: token\n 658 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:651:32: warning: forced cast of 'BackupMaintenanceParameters' to same type has no effect\n 649 |         operation: { params, progress, token in\n 650 |           try await operationsService.performMaintenance(\n 651 |             parameters: params as! BackupMaintenanceParameters,\n     |                                `- warning: forced cast of 'BackupMaintenanceParameters' to same type has no effect\n 652 |             progressReporter: progress,\n 653 |             cancellationToken: token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:677:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n 675 |         value: result,\n 676 |         progressStream: progressReporter.stream,\n 677 |         metadata: metadata\n     |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n 678 |       )\n 679 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:688:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 686 |       // Log success\n 687 |       await backupLogger.logOperationSuccess(\n 688 |         context: enhancedContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 689 |         result: result\n 690 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:687:26: error: generic parameter 'some Sendable' could not be inferred\n 685 | \n 686 |       // Log success\n 687 |       await backupLogger.logOperationSuccess(\n     |                          `- error: generic parameter 'some Sendable' could not be inferred\n 688 |         context: enhancedContext,\n 689 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:294:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n292 |    *   - message: Optional custom message\n293 |    */\n294 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n295 |     context: BackupLogContext,\n296 |     result _: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:700:45: error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 698 | \n 699 |       // Log error\n 700 |       await backupLogger.logOperationFailure(\n     |                                             `- error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 701 |         context: logContext,\n 702 |         error: backupError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:701:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 699 |       // Log error\n 700 |       await backupLogger.logOperationFailure(\n 701 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 702 |         error: backupError\n 703 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:702:16: error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 700 |       await backupLogger.logOperationFailure(\n 701 |         context: logContext,\n 702 |         error: backupError\n     |                `- error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 703 |       )\n 704 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:743:51: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 741 | \n 742 |     // Log operation start\n 743 |     await backupLogger.logOperationStart(context: enhancedContext)\n     |                                                   `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 744 | \n 745 |     // Record the start time\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:754:19: error: type 'BackupOperation' has no member 'verifyBackup'\n 752 |     let token=BackupOperationToken(\n 753 |       id: UUID(),\n 754 |       operation: .verifyBackup,\n     |                   `- error: type 'BackupOperation' has no member 'verifyBackup'\n 755 |       cancellable: true\n 756 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:762:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 760 | \n 761 |     // Create a cancellation token for the operation\n 762 |     let cancellationToken=BackupOperationCancellationTokenImpl(id: token.id.uuidString)\n     |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n 763 |     activeOperationsCancellationTokens[token.id]=cancellationToken\n 764 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:767:30: error: type 'BackupVerifyParameters' has no member 'RepairMode'\n 765 |     // Create DTO parameters for the operation using adapter pattern\n 766 |     let localRepairMode=repairMode.map {\n 767 |       BackupVerifyParameters.RepairMode(rawValue: $0.rawValue) ?? .reportOnly\n     |                              `- error: type 'BackupVerifyParameters' has no member 'RepairMode'\n 768 |     }\n 769 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:770:50: error: type 'VerifyOptions' has no member 'from'\n 768 |     }\n 769 | \n 770 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n     |                                                  `- error: type 'VerifyOptions' has no member 'from'\n 771 | \n 772 |     let parameters=BackupVerifyParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:772:42: error: extra arguments at positions #2, #3, #4 in call\n 770 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n 771 | \n 772 |     let parameters=BackupVerifyParameters(\n     |                                          `- error: extra arguments at positions #2, #3, #4 in call\n 773 |       snapshotID: snapshotID,\n 774 |       verifyData: verifyData,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:773:29: error: missing argument for parameter 'verifyOptions' in call\n 771 | \n 772 |     let parameters=BackupVerifyParameters(\n 773 |       snapshotID: snapshotID,\n     |                             `- error: missing argument for parameter 'verifyOptions' in call\n 774 |       verifyData: verifyData,\n 775 |       repairMode: localRepairMode,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:781:61: error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n 779 |     do {\n 780 |       // Execute the operation\n 781 |       let verificationResultDTO=try await operationExecutor.executeVerifyOperation(\n     |                                                             `- error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n 782 |         parameters: parameters,\n 783 |         progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:792:26: error: generic parameter 'some Sendable' could not be inferred\n 790 | \n 791 |       // Log operation success\n 792 |       await backupLogger.logOperationSuccess(\n     |                          `- error: generic parameter 'some Sendable' could not be inferred\n 793 |         context: enhancedContext,\n 794 |         duration: duration\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:294:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n292 |    *   - message: Optional custom message\n293 |    */\n294 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n295 |     context: BackupLogContext,\n296 |     result _: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:794:19: error: extra argument 'duration' in call\n 792 |       await backupLogger.logOperationSuccess(\n 793 |         context: enhancedContext,\n 794 |         duration: duration\n     |                   `- error: extra argument 'duration' in call\n 795 |       )\n 796 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:793:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 791 |       // Log operation success\n 792 |       await backupLogger.logOperationSuccess(\n 793 |         context: enhancedContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 794 |         duration: duration\n 795 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:815:45: error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 813 | \n 814 |       // Log error\n 815 |       await backupLogger.logOperationFailure(\n     |                                             `- error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 816 |         context: enhancedContext,\n 817 |         error: backupError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:816:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 814 |       // Log error\n 815 |       await backupLogger.logOperationFailure(\n 816 |         context: enhancedContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 817 |         error: backupError\n 818 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:817:16: error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 815 |       await backupLogger.logOperationFailure(\n 816 |         context: enhancedContext,\n 817 |         error: backupError\n     |                `- error: cannot convert value of type 'BackupOperationError' to expected argument type 'String'\n 818 |       )\n 819 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:844:7: error: cannot find 'BackupProgressReporterImpl' in scope\n 842 |     // Create a progress reporter if a handler was provided\n 843 |     let progressReporter: BackupProgressReporter? = progressHandler.map { handler in\n 844 |       BackupProgressReporterImpl(handler: handler)\n     |       `- error: cannot find 'BackupProgressReporterImpl' in scope\n 845 |     }\n 846 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:851:11: error: cannot find 'cancellationHandler' in scope\n 849 | \n 850 |     // Register the token with the cancellation handler\n 851 |     await cancellationHandler.registerToken(cancellationToken, for: parameters.operationID)\n     |           `- error: cannot find 'cancellationHandler' in scope\n 852 | \n 853 |     do {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:865:13: error: cannot find 'errorMapper' in scope\n 863 |     } catch {\n 864 |       // Map the error and rethrow\n 865 |       throw errorMapper.mapError(error)\n     |             `- error: cannot find 'errorMapper' in scope\n 866 |     } finally {\n 867 |       // Unregister the token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:866:7: error: cannot find 'finally' in scope\n 864 |       // Map the error and rethrow\n 865 |       throw errorMapper.mapError(error)\n 866 |     } finally {\n     |       `- error: cannot find 'finally' in scope\n 867 |       // Unregister the token\n 868 |       await cancellationHandler.unregisterToken(for: parameters.operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:868:13: error: cannot find 'cancellationHandler' in scope\n 866 |     } finally {\n 867 |       // Unregister the token\n 868 |       await cancellationHandler.unregisterToken(for: parameters.operationID)\n     |             `- error: cannot find 'cancellationHandler' in scope\n 869 |     }\n 870 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:893:51: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 891 | \n 892 |     // Log cancellation attempt\n 893 |     await backupLogger.logOperationStart(context: logContext)\n     |                                                   `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 894 | \n 895 |     // Check if the operation exists\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:899:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 897 |       // Log that operation wasn't found\n 898 |       await backupLogger.logOperationFailure(\n 899 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 900 |         message: \"Operation with ID \\(operationID) not found\"\n 901 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:909:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 907 |       // Log that operation can't be cancelled\n 908 |       await backupLogger.logOperationFailure(\n 909 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 910 |         message: \"Operation \\(token.operation) cannot be cancelled\"\n 911 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:921:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 919 |       // Log success\n 920 |       await backupLogger.logOperationSuccess(\n 921 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 922 |         result: true,\n 923 |         message: \"Operation cancelled successfully\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:929:45: error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 927 |     } catch {\n 928 |       // Log failure\n 929 |       await backupLogger.logOperationFailure(\n     |                                             `- error: incorrect argument label in call (have 'context:error:', expected 'context:message:')\n 930 |         context: logContext,\n 931 |         error: error\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:930:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 928 |       // Log failure\n 929 |       await backupLogger.logOperationFailure(\n 930 |         context: logContext,\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 931 |         error: error\n 932 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:931:16: error: cannot convert value of type 'any Error' to expected argument type 'String'\n 929 |       await backupLogger.logOperationFailure(\n 930 |         context: logContext,\n 931 |         error: error\n     |                `- error: cannot convert value of type 'any Error' to expected argument type 'String'\n 932 |       )\n 933 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:962:16: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 960 |     await backupLogger.log(\n 961 |       level: .info,\n 962 |       context: logContext,\n     |                `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 963 |       message: \"Operation cancellation complete\"\n 964 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:999:47: error: value of type 'String' has no member 'uuidString'\n 997 |     )\n 998 |     .withOperation(\"cancelOperation\")\n 999 |     .withPublic(key: \"operationID\", value: id.uuidString)\n     |                                               `- error: value of type 'String' has no member 'uuidString'\n1000 | \n1001 |     // Log cancellation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:1028:37: error: cannot find type 'TimeoutError' in scope\n1026 |     } else if let repositoryError=error as? BackupOperationError {\n1027 |       repositoryError\n1028 |     } else if let timeout=error as? TimeoutError {\n     |                                     `- error: cannot find type 'TimeoutError' in scope\n1029 |       .timeout(\"Operation timed out after \\(timeout.duration) seconds\")\n1030 |     } else {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:102:28: error: value of type 'BackupCreateParameters' has no member 'sourcePaths'\n 100 | \n 101 |     // Add paths to include\n 102 |     for path in parameters.sourcePaths {\n     |                            `- error: value of type 'BackupCreateParameters' has no member 'sourcePaths'\n 103 |       command.arguments.append(path.path)\n 104 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:124:27: error: value of type 'BackupCreateParameters' has no member 'sourcePaths'\n 122 |     let backupResult=try resultParser.parseBackupResult(\n 123 |       output: output,\n 124 |       sources: parameters.sourcePaths\n     |                           `- error: value of type 'BackupCreateParameters' has no member 'sourcePaths'\n 125 |     )\n 126 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:397:18: error: cannot find 'LoggingServiceFactory' in scope\n 395 | \n 396 |       // Create a logger instance\n 397 |       let logger=LoggingServiceFactory.shared.createLogger(domain: \"BackupServices\")\n     |                  `- error: cannot find 'LoggingServiceFactory' in scope\n 398 | \n 399 |       // Create a log context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:437:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 435 |         percentComplete: 5.0,\n 436 |         itemsProcessed: 0,\n 437 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 438 |         bytesProcessed: 0,\n 439 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:439:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 437 |         totalItems: snapshot.stats.totalFiles,\n 438 |         bytesProcessed: 0,\n 439 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 440 |         estimatedTimeRemaining: nil,\n 441 |         details: \"Analysing snapshot structure\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:448:58: error: cannot convert value of type 'BackupVerificationResult' to specified type '(_, _)'\n 446 |       let verificationLevel: BackupInterfaces.VerificationLevel=verifyOptions?\n 447 |         .fullVerification == true ? .full : .standard\n 448 |       let (verificationResult, verificationProgress)=try await snapshotService.verifySnapshot(\n     |                                                          `- error: cannot convert value of type 'BackupVerificationResult' to specified type '(_, _)'\n 449 |         snapshotID: snapshot.id,\n 450 |         level: verificationLevel\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:448:94: error: incorrect argument label in call (have 'snapshotID:level:', expected 'snapshotID:fullVerification:')\n 446 |       let verificationLevel: BackupInterfaces.VerificationLevel=verifyOptions?\n 447 |         .fullVerification == true ? .full : .standard\n 448 |       let (verificationResult, verificationProgress)=try await snapshotService.verifySnapshot(\n     |                                                                                              `- error: incorrect argument label in call (have 'snapshotID:level:', expected 'snapshotID:fullVerification:')\n 449 |         snapshotID: snapshot.id,\n 450 |         level: verificationLevel\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:450:16: error: cannot convert value of type 'VerificationLevel' to expected argument type 'Bool'\n 448 |       let (verificationResult, verificationProgress)=try await snapshotService.verifySnapshot(\n 449 |         snapshotID: snapshot.id,\n 450 |         level: verificationLevel\n     |                `- error: cannot convert value of type 'VerificationLevel' to expected argument type 'Bool'\n 451 |       )\n 452 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:465:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 463 |         percentComplete: 10.0,\n 464 |         itemsProcessed: 0,\n 465 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 466 |         bytesProcessed: Int64(snapshot.stats.totalSize / 10),\n 467 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:466:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 464 |         itemsProcessed: 0,\n 465 |         totalItems: snapshot.stats.totalFiles,\n 466 |         bytesProcessed: Int64(snapshot.stats.totalSize / 10),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 467 |         totalBytes: Int64(snapshot.stats.totalSize),\n 468 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:467:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 465 |         totalItems: snapshot.stats.totalFiles,\n 466 |         bytesProcessed: Int64(snapshot.stats.totalSize / 10),\n 467 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 468 |         estimatedTimeRemaining: nil,\n 469 |         details: \"Verifying data integrity\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:477:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 475 |         phase: .verifying,\n 476 |         percentComplete: 50.0,\n 477 |         itemsProcessed: snapshot.stats.totalFiles / 2,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 478 |         totalItems: snapshot.stats.totalFiles,\n 479 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:478:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 476 |         percentComplete: 50.0,\n 477 |         itemsProcessed: snapshot.stats.totalFiles / 2,\n 478 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 479 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n 480 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:479:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 477 |         itemsProcessed: snapshot.stats.totalFiles / 2,\n 478 |         totalItems: snapshot.stats.totalFiles,\n 479 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 480 |         totalBytes: Int64(snapshot.stats.totalSize),\n 481 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:480:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 478 |         totalItems: snapshot.stats.totalFiles,\n 479 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n 480 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 481 |         estimatedTimeRemaining: nil,\n 482 |         details: \"Verifying data integrity\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:490:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 488 |         phase: .verifying,\n 489 |         percentComplete: 90.0,\n 490 |         itemsProcessed: snapshot.stats.totalFiles,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 491 |         totalItems: snapshot.stats.totalFiles,\n 492 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:491:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 489 |         percentComplete: 90.0,\n 490 |         itemsProcessed: snapshot.stats.totalFiles,\n 491 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 492 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n 493 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:492:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 490 |         itemsProcessed: snapshot.stats.totalFiles,\n 491 |         totalItems: snapshot.stats.totalFiles,\n 492 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 493 |         totalBytes: Int64(snapshot.stats.totalSize),\n 494 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:493:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 491 |         totalItems: snapshot.stats.totalFiles,\n 492 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n 493 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 494 |         estimatedTimeRemaining: nil,\n 495 |         details: \"Verifying data integrity\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:503:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 501 |         phase: .finalising,\n 502 |         percentComplete: 95.0,\n 503 |         itemsProcessed: snapshot.stats.totalFiles,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 504 |         totalItems: snapshot.stats.totalFiles,\n 505 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:504:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 502 |         percentComplete: 95.0,\n 503 |         itemsProcessed: snapshot.stats.totalFiles,\n 504 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 505 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 506 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:505:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 503 |         itemsProcessed: snapshot.stats.totalFiles,\n 504 |         totalItems: snapshot.stats.totalFiles,\n 505 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 506 |         totalBytes: Int64(snapshot.stats.totalSize),\n 507 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:506:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 504 |         totalItems: snapshot.stats.totalFiles,\n 505 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 506 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 507 |         estimatedTimeRemaining: nil,\n 508 |         details: \"Finalising verification\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:528:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 526 |         phase: .completed,\n 527 |         percentComplete: 100.0,\n 528 |         itemsProcessed: snapshot.stats.totalFiles,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 529 |         totalItems: snapshot.stats.totalFiles,\n 530 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:529:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 527 |         percentComplete: 100.0,\n 528 |         itemsProcessed: snapshot.stats.totalFiles,\n 529 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 530 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 531 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:530:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 528 |         itemsProcessed: snapshot.stats.totalFiles,\n 529 |         totalItems: snapshot.stats.totalFiles,\n 530 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 531 |         totalBytes: Int64(snapshot.stats.totalSize),\n 532 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:531:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 529 |         totalItems: snapshot.stats.totalFiles,\n 530 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 531 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 532 |         estimatedTimeRemaining: nil,\n 533 |         details: \"Verification completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:574:11: error: cannot find 'logger' in scope\n 572 | \n 573 |     // Log operation start\n 574 |     await logger.info(\"Starting snapshot comparison\", context: context)\n     |           `- error: cannot find 'logger' in scope\n 575 | \n 576 |     // Report initial progress\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:578:15: error: type 'BackupProgressInfo.Phase' has no member 'preparing'\n 576 |     // Report initial progress\n 577 |     await reportProgress(BackupProgressInfo(\n 578 |       phase: .preparing,\n     |               `- error: type 'BackupProgressInfo.Phase' has no member 'preparing'\n 579 |       percentComplete: 0.0,\n 580 |       itemsProcessed: 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:592:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 590 |       let firstSnapshot=try await getSnapshotDetails(\n 591 |         snapshotID: parameters.firstSnapshotID,\n 592 |         context: context\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 593 |       )\n 594 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:597:27: error: enum case 'operationCancelled' has no associated values\n 595 |       // Check if the operation was cancelled\n 596 |       if let token=cancellationToken, await token.isCancelled {\n 597 |         throw BackupError.operationCancelled(\n     |                           `- error: enum case 'operationCancelled' has no associated values\n 598 |           details: \"Snapshot comparison cancelled\"\n 599 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:604:18: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 602 |       let secondSnapshot=try await getSnapshotDetails(\n 603 |         snapshotID: parameters.secondSnapshotID,\n 604 |         context: context\n     |                  `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 605 |       )\n 606 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:609:27: error: enum case 'operationCancelled' has no associated values\n 607 |       // Check if the operation was cancelled\n 608 |       if let token=cancellationToken, await token.isCancelled {\n 609 |         throw BackupError.operationCancelled(\n     |                           `- error: enum case 'operationCancelled' has no associated values\n 610 |           details: \"Snapshot comparison cancelled\"\n 611 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:638:27: error: enum case 'operationCancelled' has no associated values\n 636 |       // Check if the operation was cancelled\n 637 |       if let token=cancellationToken, await token.isCancelled {\n 638 |         throw BackupError.operationCancelled(\n     |                           `- error: enum case 'operationCancelled' has no associated values\n 639 |           details: \"Snapshot comparison cancelled\"\n 640 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:656:57: error: missing argument label 'output:' in call\n 654 | \n 655 |       // Parse the diff result\n 656 |       let comparisonDTO=try resultParser.parseDiffResult(\n     |                                                         `- error: missing argument label 'output:' in call\n 657 |         diffOutput,\n 658 |         firstSnapshotID: parameters.firstSnapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:663:33: error: value of type 'BackupResultParser' has no member 'createSnapshotComparisonResult'\n 661 | \n 662 |       // Convert to interface type\n 663 |       let result = resultParser.createSnapshotComparisonResult(\n     |                                 `- error: value of type 'BackupResultParser' has no member 'createSnapshotComparisonResult'\n 664 |         from: comparisonDTO,\n 665 |         firstSnapshotID: parameters.firstSnapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:679:18: error: extra argument 'result' in call\n 677 |         estimatedTimeRemaining: nil,\n 678 |         details: \"Comparison complete\",\n 679 |         result: .success\n     |                  `- error: extra argument 'result' in call\n 680 |       ), reporter: progressReporter)\n 681 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:679:18: error: cannot infer contextual base in reference to member 'success'\n 677 |         estimatedTimeRemaining: nil,\n 678 |         details: \"Comparison complete\",\n 679 |         result: .success\n     |                  `- error: cannot infer contextual base in reference to member 'success'\n 680 |       ), reporter: progressReporter)\n 681 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:683:13: error: cannot find 'logger' in scope\n 681 | \n 682 |       // Log success\n 683 |       await logger.info(\n     |             `- error: cannot find 'logger' in scope\n 684 |         \"Snapshot comparison completed successfully: \" +\n 685 |         \"\\(comparisonDTO.addedCount) added, \" +\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:695:13: error: cannot find 'logger' in scope\n 693 |       // Map error and log failure\n 694 |       let backupError=errorMapper.mapError(error)\n 695 |       await logger.error(\n     |             `- error: cannot find 'logger' in scope\n 696 |         \"Snapshot comparison failed: \\(backupError.localizedDescription)\",\n 697 |         context: context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:18: error: extra argument 'result' in call\n 708 |         estimatedTimeRemaining: nil,\n 709 |         details: \"Comparison failed: \\(backupError.localizedDescription)\",\n 710 |         result: .failure(backupError)\n     |                  `- error: extra argument 'result' in call\n 711 |       ), reporter: progressReporter)\n 712 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:18: error: cannot infer contextual base in reference to member 'failure'\n 708 |         estimatedTimeRemaining: nil,\n 709 |         details: \"Comparison failed: \\(backupError.localizedDescription)\",\n 710 |         result: .failure(backupError)\n     |                  `- error: cannot infer contextual base in reference to member 'failure'\n 711 |       ), reporter: progressReporter)\n 712 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:772:45: error: missing argument for parameter 'for' in call\n 770 |     // Only report if a reporter was provided\n 771 |     if let reporter = reporter {\n 772 |       await reporter.reportProgress(progress)\n     |                                             `- error: missing argument for parameter 'for' in call\n 773 |     }\n 774 |   }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:12:8: note: 'reportProgress(_:for:)' declared here\n 10 |   ///   - progressInfo: The progress information\n 11 |   ///   - operation: The operation being performed\n 12 |   func reportProgress(_ progressInfo: BackupProgressInfo, for operation: BackupOperation) async\n    |        `- note: 'reportProgress(_:for:)' declared here\n 13 | \n 14 |   /// Reports that an operation has been cancelled\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:888:30: error: value of type 'DeleteResponse' has no member 'errors'\n 886 |       return DeleteResult(\n 887 |         snapshotID: snapshotID,\n 888 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                              `- error: value of type 'DeleteResponse' has no member 'errors'\n 889 |         filesDeleted: response.filesDeleted ?? 0,\n 890 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:888:57: error: value of type 'DeleteResponse' has no member 'errors'\n 886 |       return DeleteResult(\n 887 |         snapshotID: snapshotID,\n 888 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                                                         `- error: value of type 'DeleteResponse' has no member 'errors'\n 889 |         filesDeleted: response.filesDeleted ?? 0,\n 890 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:921:11: error: cannot find 'logger' in scope\n 919 |   ) async throws -\u003e BackupSnapshot {\n 920 |     // Log the request\n 921 |     await logger.debug(\"Retrieving snapshot details\", context: context)\n     |           `- error: cannot find 'logger' in scope\n 922 |     \n 923 |     // Create the command to get snapshot details\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:933:37: error: value of type 'BackupResultParser' has no member 'parseSnapshotInfo'\n 931 |     \n 932 |     // Parse the output\n 933 |     let snapshot = try resultParser.parseSnapshotInfo(output)\n     |                                     `- error: value of type 'BackupResultParser' has no member 'parseSnapshotInfo'\n 934 |     \n 935 |     // Check if the snapshot was found\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:937:41: error: incorrect argument label in call (have 'details:', expected 'id:')\n 935 |     // Check if the snapshot was found\n 936 |     guard let snapshot = snapshot else {\n 937 |       throw BackupError.snapshotNotFound(\n     |                                         `- error: incorrect argument label in call (have 'details:', expected 'id:')\n 938 |         details: \"Snapshot with ID \\(snapshotID) not found\"\n 939 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:943:11: error: cannot find 'logger' in scope\n 941 |     \n 942 |     // Log success\n 943 |     await logger.debug(\n     |           `- error: cannot find 'logger' in scope\n 944 |       \"Retrieved snapshot details successfully\",\n 945 |       context: context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:264:9: error: type of expression is ambiguous without a type annotation\n262 |     cancellationToken: BackupCancellationToken?\n263 |   ) async throws -\u003e BackupSnapshotComparisonResult {\n264 |     try await operationExecutor.execute(\n    |         `- error: type of expression is ambiguous without a type annotation\n265 |       parameters: parameters,\n266 |       progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:555:31: error: extra argument 'dataIntegrityCheck' in call\n553 |         return try self.resultParser.parseVerificationResult(\n554 |           repositoryCheck: repositoryCheckOutput,\n555 |           dataIntegrityCheck: dataIntegrityOutput\n    |                               `- error: extra argument 'dataIntegrityCheck' in call\n556 |         )\n557 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:553:38: error: cannot convert value of type 'VerificationResultDTO' to closure result type 'BackupVerificationResultDTO'\n551 | \n552 |         // Parse results\n553 |         return try self.resultParser.parseVerificationResult(\n    |                                      `- error: cannot convert value of type 'VerificationResultDTO' to closure result type 'BackupVerificationResultDTO'\n554 |           repositoryCheck: repositoryCheckOutput,\n555 |           dataIntegrityCheck: dataIntegrityOutput\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:116:44: error: argument type 'any ResticCommand' does not conform to expected type 'ResticCommand'\n114 |     // Create a task for executing the command\n115 |     let executionTask=Task {\n116 |       try await self.resticService.execute(command)\n    |                                            `- error: argument type 'any ResticCommand' does not conform to expected type 'ResticCommand'\n117 |     }\n118 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:168:22: warning: no 'async' operations occur within 'await' expression\n166 |     do {\n167 |       // Wait for execution to complete\n168 |       let result=try await executionTask.value\n    |                      `- warning: no 'async' operations occur within 'await' expression\n169 | \n170 |       // Cancel progress updates\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:168:18: warning: no calls to throwing functions occur within 'try' expression\n166 |     do {\n167 |       // Wait for execution to complete\n168 |       let result=try await executionTask.value\n    |                  `- warning: no calls to throwing functions occur within 'try' expression\n169 | \n170 |       // Cancel progress updates\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:268:13: warning: variable 'args' was never mutated; consider changing to 'let' constant\n266 |       operation: { _, reporter, _ in\n267 |         // Create a command to get snapshot details with statistics\n268 |         var args=[\"snapshots\", snapshotID, \"--json\", \"--stats\"]\n    |             `- warning: variable 'args' was never mutated; consider changing to 'let' constant\n269 | \n270 |         let command=ResticCommandImpl(arguments: args)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:19:23: error: cannot find type 'LoggingProtocol' in scope\n 17 | \n 18 |   /// Logger for snapshot operations\n 19 |   private let logger: LoggingProtocol\n    |                       `- error: cannot find type 'LoggingProtocol' in scope\n 20 | \n 21 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:53:37: error: missing arguments for parameters 'domainName', 'source' in call\n 51 |   ) async throws -\u003e BackupInterfaces.BackupSnapshot? {\n 52 |     // Create a log context\n 53 |     let context=BackupLogContextImpl()\n    |                                     `- error: missing arguments for parameters 'domainName', 'source' in call\n 54 |       .withOperation(\"getSnapshotDetails\")\n 55 |       .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:30:10: note: 'init(domainName:source:metadata:)' declared here\n 28 |    *   - metadata: The metadata collection\n 29 |    */\n 30 |   public init(\n    |          `- note: 'init(domainName:source:metadata:)' declared here\n 31 |     domainName: String,\n 32 |     source: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:105:37: error: missing arguments for parameters 'domainName', 'source' in call\n103 |   ) async throws -\u003e BackupInterfaces.BackupSnapshot? {\n104 |     // Create a log context\n105 |     let context=BackupLogContextImpl()\n    |                                     `- error: missing arguments for parameters 'domainName', 'source' in call\n106 |       .withOperation(\"getLatestSnapshot\")\n107 |       .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:30:10: note: 'init(domainName:source:metadata:)' declared here\n 28 |    *   - metadata: The metadata collection\n 29 |    */\n 30 |   public init(\n    |          `- note: 'init(domainName:source:metadata:)' declared here\n 31 |     domainName: String,\n 32 |     source: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:156:37: error: missing arguments for parameters 'domainName', 'source' in call\n154 |   ) async throws -\u003e [BackupInterfaces.BackupSnapshot] {\n155 |     // Create a log context\n156 |     let context=BackupLogContextImpl()\n    |                                     `- error: missing arguments for parameters 'domainName', 'source' in call\n157 |       .withOperation(\"listSnapshots\")\n158 |       .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:30:10: note: 'init(domainName:source:metadata:)' declared here\n 28 |    *   - metadata: The metadata collection\n 29 |    */\n 30 |   public init(\n    |          `- note: 'init(domainName:source:metadata:)' declared here\n 31 |     domainName: String,\n 32 |     source: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:175:38: error: value of type 'SnapshotResultParser' has no member 'parseSnapshotList'\n173 | \n174 |       // Parse the result\n175 |       let snapshots=try resultParser.parseSnapshotList(output)\n    |                                      `- error: value of type 'SnapshotResultParser' has no member 'parseSnapshotList'\n176 | \n177 |       await logger.info(\"Retrieved \\(snapshots.count) snapshots\", context: context)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:204:37: error: missing arguments for parameters 'domainName', 'source' in call\n202 |   ) async throws -\u003e BackupInterfaces.BackupSnapshotComparisonResult {\n203 |     // Create a log context\n204 |     let context=BackupLogContextImpl()\n    |                                     `- error: missing arguments for parameters 'domainName', 'source' in call\n205 |       .withOperation(\"compareSnapshots\")\n206 |       .withPublic(key: \"firstSnapshotID\", value: firstSnapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:30:10: note: 'init(domainName:source:metadata:)' declared here\n 28 |    *   - metadata: The metadata collection\n 29 |    */\n 30 |   public init(\n    |          `- note: 'init(domainName:source:metadata:)' declared here\n 31 |     domainName: String,\n 32 |     source: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:257:37: error: missing arguments for parameters 'domainName', 'source' in call\n255 |   ) async throws -\u003e BackupInterfaces.BackupVerificationResult {\n256 |     // Create a log context\n257 |     let context=BackupLogContextImpl()\n    |                                     `- error: missing arguments for parameters 'domainName', 'source' in call\n258 |       .withOperation(\"verifySnapshot\")\n259 |       .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:30:10: note: 'init(domainName:source:metadata:)' declared here\n 28 |    *   - metadata: The metadata collection\n 29 |    */\n 30 |   public init(\n    |          `- note: 'init(domainName:source:metadata:)' declared here\n 31 |     domainName: String,\n 32 |     source: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupCancellationHandler.swift:7:58: error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 5 |  * Implementation of the cancellation handler for backup operations.\n 6 |  */\n 7 | public actor BackupCancellationHandler: BackupInterfaces.CancellationHandlerProtocol {\n   |                                                          `- error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 8 |   /// Map of operation IDs to cancellation tokens\n 9 |   private var tokens: [UUID: BackupCancellationToken]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupErrorMapper.swift:43:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n41 | \n42 |     // Handle NSError types\n43 |     if let nsError=error as? NSError {\n   |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n44 |       switch nsError.domain {\n45 |         case NSURLErrorDomain:\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:17:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 15 | \n 16 |   /// Handler for operation cancellation\n 17 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 18 | \n 19 |   /// Collector for metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:40:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 38 |   public init(\n 39 |     logger: any LoggingProtocol,\n 40 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 41 |     metricsCollector: BackupMetricsCollector,\n 42 |     errorLogContextMapper: ErrorLogContextMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:75:55: error: value of type 'P' has no member 'operationID'\n 73 |     )\n 74 |     .withOperation(parameters.operationType)\n 75 |     .withPublic(key: \"operationID\", value: parameters.operationID.uuidString)\n    |                                                       `- error: value of type 'P' has no member 'operationID'\n 76 | \n 77 |     // Log operation start\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:85:28: warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n 61 |    * - Throws: BackupOperationError if the operation fails\n 62 |    */\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n    |                                                     `- note: consider making generic parameter 'R' conform to the 'Sendable' protocol\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, BackupCancellationToken?) async throws -\u003e R,\n    :\n 83 |     do {\n 84 |       // Execute the operation\n 85 |       let result=try await operation(parameters, progressReporter, cancellationToken)\n    |                            `- warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n 86 | \n 87 |       // Log operation completion\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:16:35: error: cannot find type 'CancellationHandlerProtocol' in scope\n 14 |  * - Support for both task-based and token-based cancellation\n 15 |  */\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n    |                                   `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cany Sendable, Error\u003e]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:174:21: error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n172 |  * Implementation of BackupCancellationToken.\n173 |  */\n174 | private final class BackupCancellationTokenImpl: BackupCancellationToken, @unchecked Sendable {\n    |                     |- error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n    |                     `- note: add stubs for conformance\n175 |   /// The unique identifier for this token\n176 |   public let id: String\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/BackupCancellationToken.swift:25:8: note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n23 |    * - Parameter callback: The callback to register\n24 |    */\n25 |   func registerCancellationCallback(_ callback: @escaping @Sendable () -\u003e Void) async\n   |        `- note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n26 | }\n27 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:216:20: warning: result of call to 'cancelOperation(id:)' is unused\n214 | \n215 |     // Notify the handler\n216 |     await handler?.cancelOperation(id: id)\n    |                    `- warning: result of call to 'cancelOperation(id:)' is unused\n217 |   }\n218 | }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorLogContextMapper.swift:28:32: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n26 |   ) -\u003e BackupLogContextImpl {\n27 |     // Start with the base context or create a new one\n28 |     let context=baseContext ?? BackupLogContextImpl(\n   |                                `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n29 |       domainName: \"BackupServices\",\n30 |       source: \"ErrorMapper\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorLogContextMapper.swift:40:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n38 | \n39 |     // Add error code if available\n40 |     if let nsError=error as? NSError {\n   |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n41 |       return errorContext\n42 |         .withPublic(key: \"errorCode\", value: String(nsError.code))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorMapper.swift:58:17: error: type '_ErrorCodeProtocol' has no member 'other'\n 56 |         )\n 57 | \n 58 |       case let .other(message):\n    |                 `- error: type '_ErrorCodeProtocol' has no member 'other'\n 59 |         BackupError.unknownError(\n 60 |           details: message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:27:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 25 | \n 26 |   /// Handler for operation cancellation\n 27 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 28 | \n 29 |   /// Collector for operation metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:52:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 50 |   public init(\n 51 |     resticService: ResticServiceProtocol,\n 52 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 53 |     metricsCollector: BackupMetricsCollector,\n 54 |     logger: any LoggingProtocol,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:348:16: error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n346 |       secondSnapshotID: secondSnapshotID,\n347 |       addedFiles: interfaceDifference.addedFiles\n348 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n    |                `- error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n349 |       removedFiles: interfaceDifference.removedFiles\n350 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:350:16: error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n348 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n349 |       removedFiles: interfaceDifference.removedFiles\n350 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n    |                `- error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n351 |       modifiedFiles: interfaceDifference.modifiedFiles\n352 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:352:16: error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n350 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n351 |       modifiedFiles: interfaceDifference.modifiedFiles\n352 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n    |                `- error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n353 |       unchangedFiles: [],\n354 |       changeSize: calculateChangeSize(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:532:10: error: type 'VerificationIssue.IssueType' has no member 'permissionDenied'\n530 |         .checksumMismatch\n531 |       case .permissionDenied:\n532 |         .permissionDenied\n    |          `- error: type 'VerificationIssue.IssueType' has no member 'permissionDenied'\n533 |       case .structuralError:\n534 |         .structuralError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:549:10: error: type 'RepairAction.ActionType' has no member 'pruneRepository'\n547 |         .rebuildMetadata\n548 |       case .pruneRepository:\n549 |         .pruneRepository\n    |          `- error: type 'RepairAction.ActionType' has no member 'pruneRepository'\n550 |     }\n551 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:585:19: error: value of type 'SnapshotFileDTO' has no member 'mode'\n583 |       size: entry.size,\n584 |       modificationTime: entry.modificationTime ?? Date(),\n585 |       mode: entry.mode ?? 0,\n    |                   `- error: value of type 'SnapshotFileDTO' has no member 'mode'\n586 |       uid: entry.uid ?? 0,\n587 |       gid: entry.gid ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:586:18: error: value of type 'SnapshotFileDTO' has no member 'uid'\n584 |       modificationTime: entry.modificationTime ?? Date(),\n585 |       mode: entry.mode ?? 0,\n586 |       uid: entry.uid ?? 0,\n    |                  `- error: value of type 'SnapshotFileDTO' has no member 'uid'\n587 |       gid: entry.gid ?? 0,\n588 |       contentHash: entry.hash\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:587:18: error: value of type 'SnapshotFileDTO' has no member 'gid'\n585 |       mode: entry.mode ?? 0,\n586 |       uid: entry.uid ?? 0,\n587 |       gid: entry.gid ?? 0,\n    |                  `- error: value of type 'SnapshotFileDTO' has no member 'gid'\n588 |       contentHash: entry.hash\n589 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:588:26: error: value of type 'SnapshotFileDTO' has no member 'hash'\n586 |       uid: entry.uid ?? 0,\n587 |       gid: entry.gid ?? 0,\n588 |       contentHash: entry.hash\n    |                          `- error: value of type 'SnapshotFileDTO' has no member 'hash'\n589 |     )\n590 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:668:41: error: cannot find 'DiffResultDTO' in scope\n666 |       decoder.dateDecodingStrategy = .iso8601\n667 | \n668 |       let diffResult=try decoder.decode(DiffResultDTO.self, from: jsonData)\n    |                                         `- error: cannot find 'DiffResultDTO' in scope\n669 | \n670 |       // Extract the files from the diff result\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:668:34: error: type of expression is ambiguous without a type annotation\n666 |       decoder.dateDecodingStrategy = .iso8601\n667 | \n668 |       let diffResult=try decoder.decode(DiffResultDTO.self, from: jsonData)\n    |                                  `- error: type of expression is ambiguous without a type annotation\n669 | \n670 |       // Extract the files from the diff result\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:679:11: error: argument 'type' must precede argument 'permissions'\n677 |           owner: entry.user,\n678 |           group: entry.group,\n679 |           type: entry.type ?? \"file\"\n    |           `- error: argument 'type' must precede argument 'permissions'\n680 |         )\n681 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:691:11: error: argument 'type' must precede argument 'permissions'\n689 |           owner: entry.user,\n690 |           group: entry.group,\n691 |           type: entry.type ?? \"file\"\n    |           `- error: argument 'type' must precede argument 'permissions'\n692 |         )\n693 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:703:11: error: argument 'type' must precede argument 'permissions'\n701 |           owner: entry.user,\n702 |           group: entry.group,\n703 |           type: entry.type ?? \"file\"\n    |           `- error: argument 'type' must precede argument 'permissions'\n704 |         )\n705 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:14:28: error: cannot find type 'DomainLoggerProtocol' in scope\n 12 |  * file paths and backup metadata.\n 13 |  */\n 14 | public actor BackupLogger: DomainLoggerProtocol {\n    |                            `- error: cannot find type 'DomainLoggerProtocol' in scope\n 15 |   /// The underlying logger\n 16 |   private let loggingService: any LoggingProtocol\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:376:25: error: cannot find type 'MetadataCollection' in scope\n374 | \n375 | extension BackupLogContext {\n376 |   func getMetadata() -\u003e MetadataCollection {\n    |                         `- error: cannot find type 'MetadataCollection' in scope\n377 |     // Implement the getMetadata method\n378 |     // This is a placeholder, you should implement the actual logic to get the metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:61:40: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 59 |       source: domainName\n 60 |     )\n 61 |     await log(level, message, context: context)\n    |                                        `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 62 |   }\n 63 | \n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:95:36: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n 93 | \n 94 |       // Create a new context with error information\n 95 |       if let backupContext=context as? BackupLogContextImpl {\n    |                                    `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n 96 |         // Update the context with error information\n 97 |         let updatedContext=backupContext.withUpdatedMetadata(\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:97:42: error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n 95 |       if let backupContext=context as? BackupLogContextImpl {\n 96 |         // Update the context with error information\n 97 |         let updatedContext=backupContext.withUpdatedMetadata(\n    |                                          `- error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n 98 |           backupContext.metadata.withPrivate(key: \"error\", value: error.localizedDescription)\n 99 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:109:36: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n107 |       let formattedMessage=\"[\\(domainName)] \\(error.localizedDescription)\"\n108 | \n109 |       if let backupContext=context as? BackupLogContextImpl {\n    |                                    `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n110 |         // Update the context with error information\n111 |         let updatedContext=backupContext.withUpdatedMetadata(\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:111:42: error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n109 |       if let backupContext=context as? BackupLogContextImpl {\n110 |         // Update the context with error information\n111 |         let updatedContext=backupContext.withUpdatedMetadata(\n    |                                          `- error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n112 |           backupContext.metadata.withPrivate(key: \"error\", value: error.localizedDescription)\n113 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:138:36: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n136 | \n137 |       // Create a new context with error information\n138 |       if let backupContext=context as? BackupLogContextImpl {\n    |                                    `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n139 |         // Update the context with error information\n140 |         let updatedContext=backupContext.withUpdatedMetadata(\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:140:42: error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n138 |       if let backupContext=context as? BackupLogContextImpl {\n139 |         // Update the context with error information\n140 |         let updatedContext=backupContext.withUpdatedMetadata(\n    |                                          `- error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n141 |           backupContext.metadata.withPrivate(key: \"error\", value: error.localizedDescription)\n142 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:152:36: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n150 |       let formattedMessage=message ?? \"[\\(domainName)] \\(error.localizedDescription)\"\n151 | \n152 |       if let backupContext=context as? BackupLogContextImpl {\n    |                                    `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n153 |         // Update the context with error information\n154 |         let updatedContext=backupContext.withUpdatedMetadata(\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:154:42: error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n152 |       if let backupContext=context as? BackupLogContextImpl {\n153 |         // Update the context with error information\n154 |         let updatedContext=backupContext.withUpdatedMetadata(\n    |                                          `- error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n155 |           backupContext.metadata.withPrivate(key: \"error\", value: error.localizedDescription)\n156 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:183:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n181 |       level,\n182 |       message,\n183 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n184 |     )\n185 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:194:34: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n192 |    */\n193 |   private func enhanceContext(_ context: BackupLogContext) -\u003e BackupLogContextImpl {\n194 |     if let backupContext=context as? BackupLogContextImpl {\n    |                                  `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n195 |       return backupContext\n196 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:200:37: error: missing argument for parameter 'source' in call\n198 |     // Create a new context with the same information\n199 |     return BackupLogContextImpl(\n200 |       domainName: context.domainName,\n    |                                     `- error: missing argument for parameter 'source' in call\n201 |       metadata: context.getMetadata()\n202 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:30:10: note: 'init(domainName:source:metadata:)' declared here\n 28 |    *   - metadata: The metadata collection\n 29 |    */\n 30 |   public init(\n    |          `- note: 'init(domainName:source:metadata:)' declared here\n 31 |     domainName: String,\n 32 |     source: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:306:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n304 |       .info,\n305 |       message ?? defaultMessage,\n306 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n307 |     )\n308 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:327:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n325 |       .error,\n326 |       message,\n327 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n328 |     )\n329 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:370:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n368 |       .info,\n369 |       message ?? defaultMessage,\n370 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n371 |     )\n372 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:111:32: error: cannot find type 'MetadataCollection' in scope\n109 |    * - Returns: The metadata collection\n110 |    */\n111 |   public func getMetadata() -\u003e MetadataCollection {\n    |                                `- error: cannot find type 'MetadataCollection' in scope\n112 |     metadata\n113 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:12:15: error: inheritance from non-protocol type 'BackupLogContext'\n 10 |  * allowing for structured logging with appropriate privacy classifications.\n 11 |  */\n 12 | public struct BackupLogContextImpl: BackupLogContext, Sendable {\n    |               `- error: inheritance from non-protocol type 'BackupLogContext'\n 13 |   /// The domain name for the log context\n 14 |   public let domainName: String\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:60:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 58 |   public func withPublic(key: String, value: String) -\u003e Self {\n 59 |     var newMetadata=metadata\n 60 |     newMetadata.add(key: key, value: value, privacy: .public)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 61 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 62 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:60:55: error: cannot infer contextual base in reference to member 'public'\n 58 |   public func withPublic(key: String, value: String) -\u003e Self {\n 59 |     var newMetadata=metadata\n 60 |     newMetadata.add(key: key, value: value, privacy: .public)\n    |                                                       `- error: cannot infer contextual base in reference to member 'public'\n 61 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 62 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:74:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 72 |   public func withPrivate(key: String, value: String) -\u003e Self {\n 73 |     var newMetadata=metadata\n 74 |     newMetadata.add(key: key, value: value, privacy: .private)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 75 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:74:55: error: cannot infer contextual base in reference to member 'private'\n 72 |   public func withPrivate(key: String, value: String) -\u003e Self {\n 73 |     var newMetadata=metadata\n 74 |     newMetadata.add(key: key, value: value, privacy: .private)\n    |                                                       `- error: cannot infer contextual base in reference to member 'private'\n 75 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:88:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 86 |   public func withSensitive(key: String, value: String) -\u003e Self {\n 87 |     var newMetadata=metadata\n 88 |     newMetadata.add(key: key, value: value, privacy: .sensitive)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 89 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 90 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:88:55: error: cannot infer contextual base in reference to member 'sensitive'\n 86 |   public func withSensitive(key: String, value: String) -\u003e Self {\n 87 |     var newMetadata=metadata\n 88 |     newMetadata.add(key: key, value: value, privacy: .sensitive)\n    |                                                       `- error: cannot infer contextual base in reference to member 'sensitive'\n 89 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 90 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:102:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n100 |   public func withHashed(key: String, value: String) -\u003e Self {\n101 |     var newMetadata=metadata\n102 |     newMetadata.add(key: key, value: value, privacy: .hash)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n103 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n104 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:102:55: error: cannot infer contextual base in reference to member 'hash'\n100 |   public func withHashed(key: String, value: String) -\u003e Self {\n101 |     var newMetadata=metadata\n102 |     newMetadata.add(key: key, value: value, privacy: .hash)\n    |                                                       `- error: cannot infer contextual base in reference to member 'hash'\n103 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n104 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:221:25: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n    |                         `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n222 |     BackupInterfaces.SnapshotFileEntry(\n223 |       path: file.path ?? \"\",\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:220:8: error: no type named 'SnapshotFile' in module 'BackupServices'\n218 |   public static func toInterfaceSnapshotFileEntry(\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n    |        `- error: no type named 'SnapshotFile' in module 'BackupServices'\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n222 |     BackupInterfaces.SnapshotFileEntry(\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:241:24: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n    |                        `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n242 |     guard let files else { return nil }\n243 |     return files.map(toInterfaceSnapshotFileEntry)\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:240:78: error: no type named 'SnapshotFile' in module 'BackupServices'\n238 |    * - Returns: An array of converted snapshot file entries compatible with the interfaces module\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n    |                                                                              `- error: no type named 'SnapshotFile' in module 'BackupServices'\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n242 |     guard let files else { return nil }\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:33:13: error: type 'VerificationIssueDTO.IssueType' has no member 'integrityViolation'\n 31 |       case .checksumMismatch:\n 32 |         .checksumMismatch\n 33 |       case .integrityViolation:\n    |             `- error: type 'VerificationIssueDTO.IssueType' has no member 'integrityViolation'\n 34 |         .integrityViolation\n 35 |       case .other:\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:117:13: error: type 'RepairActionDTO.ActionType' has no member 'removeCorrupted'\n115 |       case .rebuildMetadata:\n116 |         .rebuildMetadata\n117 |       case .removeCorrupted:\n    |             `- error: type 'RepairActionDTO.ActionType' has no member 'removeCorrupted'\n118 |         .removeCorrupted\n119 |       case .other:\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:493:7: error: argument 'before' must precede argument 'host'\n491 |       host: parameters.host,\n492 |       path: parameters.path.map { URL(fileURLWithPath: $0) },\n493 |       before: nil,\n    |       `- error: argument 'before' must precede argument 'host'\n494 |       after: nil\n495 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:18:14: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n16 |   /// - Returns: A ProgressCancellationToken that delegates to the original token\n17 |   public static func asProgressCancellationToken(\n18 |     _ token: BackupOperationCancellationTokenImpl\n   |              `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n19 |   ) -\u003e ProgressCancellationToken {\n20 |     ProgressCancellationTokenAdapter(token: token)\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:28:22: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n26 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken,\n27 | @unchecked Sendable {\n28 |   private let token: BackupOperationCancellationTokenImpl\n   |                      `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:31:15: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n31 |   init(token: BackupOperationCancellationTokenImpl) {\n   |               `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n32 |     self.token=token\n33 |     // Set up task to monitor the cancellation state\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:87:11: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n85 | \n86 | /// Extension to BackupOperationCancellationTokenImpl for tracking with BackupOperation\n87 | extension BackupOperationCancellationTokenImpl {\n   |           `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n88 |   /// Register this token with the given operation\n89 |   ///\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:76:9: warning: no 'async' operations occur within 'await' expression\n74 |       while !_isCancelled {\n75 |         try? await Task.sleep(nanoseconds: 100_000_000) // 100ms\n76 |         await self.updateCancellationState()\n   |         `- warning: no 'async' operations occur within 'await' expression\n77 |         if self._isCancelled {\n78 |           callback()\nTarget //packages/UmbraImplementations/Sources/BackupServices:BackupServices failed to build\nINFO: Elapsed time: 4.090s, Critical Path: 4.00s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices",
    "success": true,
    "start_time": "2025-04-09T00:54:37.698138+01:00",
    "end_time": "2025-04-09T00:54:38.522222+01:00",
    "duration": "824.079667ms",
    "output": "INFO: Invocation ID: 1c5c6229-d0d7-4c95-a457-899bb478a7e6\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices (4 packages loaded, 20 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/BookmarkServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/BookmarkServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/BookmarkServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/libBookmarkServices.a\nINFO: Elapsed time: 0.098s, Critical Path: 0.00s\nINFO: 1 process: 9 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger",
    "success": true,
    "start_time": "2025-04-09T00:54:38.522232+01:00",
    "end_time": "2025-04-09T00:54:39.523075+01:00",
    "duration": "1.00083825s",
    "output": "INFO: Invocation ID: 46c7a41d-b20e-43e7-86ff-66cebc2b4a81\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/BookmarkLogger.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/BookmarkLogger.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/BookmarkLogger.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/libBookmarkLogger.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel",
    "success": true,
    "start_time": "2025-04-09T00:54:39.523079+01:00",
    "end_time": "2025-04-09T00:54:40.315054+01:00",
    "duration": "791.970958ms",
    "output": "INFO: Invocation ID: 2578a428-ca86-414d-8666-7b5a2fbead16\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/BookmarkModel.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/BookmarkModel.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/BookmarkModel.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/libBookmarkModel.a\nINFO: Elapsed time: 0.072s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices",
    "success": true,
    "start_time": "2025-04-09T00:54:40.31506+01:00",
    "end_time": "2025-04-09T00:54:41.265132+01:00",
    "duration": "950.068125ms",
    "output": "INFO: Invocation ID: 43e4086c-ff10-4f6b-b75e-79586c0f609c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices (1 packages loaded, 3 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/libConfigServices.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CoreServices:CoreServices",
    "success": false,
    "start_time": "2025-04-09T00:54:41.265137+01:00",
    "end_time": "2025-04-09T00:54:46.081952+01:00",
    "duration": "4.816793834s",
    "output": "INFO: Invocation ID: ea7237fb-9e23-404b-8be3-a7feb4f0fbe0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CoreServices:CoreServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CoreServices:CoreServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CoreServices:CoreServices (1 packages loaded, 8 targets configured).\n[2 / 5] Compiling Swift module //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation; 1s disk-cache, worker\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/SecurityImplementation/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:10: error: static methods may only be declared on a type\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:10: error: static methods may only be declared on a type\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:10: error: static methods may only be declared on a type\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:163:1: error: extraneous '}' at top level\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n163 | }\n    | `- error: extraneous '}' at top level\n164 | \n165 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:10: error: static methods may only be declared on a type\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:10: error: static methods may only be declared on a type\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:10: error: static methods may only be declared on a type\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:72:1: error: extraneous '}' at top level\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n72 | }\n   | `- error: extraneous '}' at top level\n73 | \n74 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:10: error: static methods may only be declared on a type\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:10: error: static methods may only be declared on a type\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:10: error: static methods may only be declared on a type\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1155:1: error: extraneous '}' at top level\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n1155 | }\n     | `- error: extraneous '}' at top level\n1156 | \n1157 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:10: error: static methods may only be declared on a type\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:10: error: static methods may only be declared on a type\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:10: error: static methods may only be declared on a type\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:616:1: error: extraneous '}' at top level\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n616 | }\n    | `- error: extraneous '}' at top level\n617 | \n618 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:25: error: cannot find ')' to match opening '(' in string interpolation\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:23: error: unterminated string literal\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:25: error: cannot find ')' to match opening '(' in string interpolation\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:23: error: unterminated string literal\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:166:18: error: unterminated string literal\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n166 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n167 | \n168 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:247:18: error: unterminated string literal\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n247 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n248 | \n249 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:10: error: static methods may only be declared on a type\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:10: error: static methods may only be declared on a type\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:10: error: static methods may only be declared on a type\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:275:1: error: extraneous '}' at top level\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n275 | }\n    | `- error: extraneous '}' at top level\n276 | \n277 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:10: error: static methods may only be declared on a type\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:10: error: static methods may only be declared on a type\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:10: error: static methods may only be declared on a type\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:477:1: error: extraneous '}' at top level\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n477 | }\n    | `- error: extraneous '}' at top level\n478 | \n479 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:10: error: static methods may only be declared on a type\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:10: error: static methods may only be declared on a type\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:10: error: static methods may only be declared on a type\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:101:1: error: extraneous '}' at top level\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n101 | }\n    | `- error: extraneous '}' at top level\n102 | \n103 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:179:20: error: unterminated string literal\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n179 |         , source: \\\"SecurityImplementation\\\")\n    |                    `- error: unterminated string literal\n180 | \n181 |         // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:200:18: error: unterminated string literal\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n200 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n201 | \n202 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:343:18: error: unterminated string literal\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n343 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n344 | \n345 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:10: error: static methods may only be declared on a type\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:10: error: static methods may only be declared on a type\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:10: error: static methods may only be declared on a type\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:428:1: error: extraneous '}' at top level\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n428 | }\n    | `- error: extraneous '}' at top level\n429 | \n430 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:10: error: static methods may only be declared on a type\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:10: error: static methods may only be declared on a type\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:10: error: static methods may only be declared on a type\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:438:1: error: extraneous '}' at top level\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n438 | }\n    | `- error: extraneous '}' at top level\n439 | \n440 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:10: error: static methods may only be declared on a type\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:10: error: static methods may only be declared on a type\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:10: error: static methods may only be declared on a type\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:182:1: error: extraneous '}' at top level\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n182 | }\n    | `- error: extraneous '}' at top level\n183 | \n184 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:10: error: static methods may only be declared on a type\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:10: error: static methods may only be declared on a type\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:10: error: static methods may only be declared on a type\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:102:1: error: extraneous '}' at top level\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n102 | }\n    | `- error: extraneous '}' at top level\n103 | \n104 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:10: error: static methods may only be declared on a type\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:10: error: static methods may only be declared on a type\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:10: error: static methods may only be declared on a type\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:276:1: error: extraneous '}' at top level\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n276 | }\n    | `- error: extraneous '}' at top level\n277 | \n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:82:10: error: static methods may only be declared on a type\n80 | \n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n84 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:86:10: error: static methods may only be declared on a type\n84 |   }\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n88 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:90:10: error: static methods may only be declared on a type\n88 |   }\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:93:1: error: extraneous '}' at top level\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n93 | }\n   | `- error: extraneous '}' at top level\n94 | \n95 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:15: error: invalid redeclaration of 'notImplemented(reason:)'\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:15: error: invalid redeclaration of 'notImplemented(reason:)'\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: expected ',' separator\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: expected ',' separator\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: unnamed parameters must be written with the empty name '_'\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: unnamed parameters must be written with the empty name '_'\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:15: error: cannot find type 'createPrivacyMetadata' in scope\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |               `- error: cannot find type 'createPrivacyMetadata' in scope\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:15: error: invalid redeclaration of 'notImplemented(reason:)'\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:62:27: error: cannot find type 'KeyStorageManager' in scope\n 60 |   init(\n 61 |     cryptoService: CryptoServiceProtocol,\n 62 |     keyManagementService: KeyStorageManager,\n    |                           `- error: cannot find type 'KeyStorageManager' in scope\n 63 |     logger: PrivacyAwareLoggingProtocol\n 64 |   ) {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:137:38: error: extra arguments at positions #1, #2 in call\n 135 |     )\n 136 | \n 137 |     signatureService=SignatureService(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:78:3: note: 'init(logger:)' declared here\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: 'init(logger:)' declared here\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:140:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n 140 |       logger: logger\n     |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 141 |     )\n 142 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:50: error: expected ',' separator\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                                                  `- error: expected ',' separator\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:15: error: invalid redeclaration of 'notImplemented(reason:)'\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:15: error: invalid redeclaration of 'notImplemented(reason:)'\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:29: error: cannot find type 'createPrivacyMetadata' in scope\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                             `- error: cannot find type 'createPrivacyMetadata' in scope\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:15: error: invalid redeclaration of 'notImplemented(reason:)'\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:43:37: error: cannot find type 'KeyStorageManager' in scope\n 41 |    The key manager used for key storage and retrieval\n 42 |    */\n 43 |   private let keyManagementService: KeyStorageManager\n    |                                     `- error: cannot find type 'KeyStorageManager' in scope\n 44 | \n 45 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:32:13: error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n 30 |  - Handle signature-specific errors\n 31 |  */\n 32 | final class SignatureService: SecurityServiceBase {\n    |             |- error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n    |             `- note: add stubs for conformance\n 33 |   // MARK: - Properties\n 34 | \n    :\n 46 |    The logger instance for recording operation details\n 47 |    */\n 48 |   let logger: PrivacyAwareLoggingProtocol\n    |       `- note: candidate has non-matching type 'any PrivacyAwareLoggingProtocol'\n 49 | \n 50 |   // MARK: - Initialisation\n    :\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: candidate has non-matching type '(logger: any PrivacyAwareLoggingProtocol)'\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:42:3: note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 32 |    The logger instance for recording operation details\n 33 |    */\n 34 |   var logger: LoggingInterfaces.LoggingProtocol { get }\n    |       `- note: protocol requires property 'logger' with type 'any LoggingProtocol'\n 35 | \n 36 |   /**\n    :\n 40 |        - logger: The logging service to use for operation logging\n 41 |    */\n 42 |   init(logger: LoggingInterfaces.LoggingProtocol)\n    |   `- note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 43 | \n 44 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:15: error: invalid redeclaration of 'notImplemented(reason:)'\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:16:22: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n14 |   /// - Parameter reason: The reason for the error\n15 |   /// - Returns: A CoreSecurityError with the appropriate error code\n16 |   public static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n17 |     return .invalidInput(\"Invalid verification method: \\(reason)\")\n18 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:23:22: error: invalid redeclaration of 'verificationFailed(reason:)'\n21 |   /// - Parameter reason: The reason for the error\n22 |   /// - Returns: A CoreSecurityError with the appropriate error code\n23 |   public static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'verificationFailed(reason:)'\n24 |     return .authenticationFailed(\"Verification failed: \\(reason)\")\n25 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:30:22: error: invalid redeclaration of 'notImplemented(reason:)'\n28 |   /// - Parameter reason: The reason for the error\n29 |   /// - Returns: A CoreSecurityError with the appropriate error code\n30 |   public static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'notImplemented(reason:)'\n31 |     return .unsupportedOperation(\"Not implemented: \\(reason)\")\n32 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Logging.swift:38:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 36 |  according to the Alpha Dot Five architecture principles.\n 37 |  */\n 38 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 39 |   /**\n 40 |    Logs the start of a security operation with privacy-aware metadata.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  * Batch encryption and decryption for collections of data\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Encrypts data and then stores it securely.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:15: error: invalid redeclaration of 'notImplemented(reason:)'\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  - Common validation logic is centralised\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Validates configuration for encryption operations.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:15: error: invalid redeclaration of 'notImplemented(reason:)'\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               `- warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:30:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 28 |   /// - Returns: The generated random integer\n 29 |   /// - Throws: SecurityError if random generation fails\n 30 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 31 | \n 32 |   /// Generates a cryptographically secure random integer within the specified closed range\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               `- warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:36:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 34 |   /// - Returns: The generated random integer\n 35 |   /// - Throws: SecurityError if random generation fails\n 36 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 37 | \n 38 |   /// Generates a cryptographically secure random double between 0.0 and 1.0\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:15: error: invalid redeclaration of 'notImplemented(reason:)'\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:110:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n108 | \n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n111 |     return .invalidVerificationMethod(reason: reason)\n112 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:114:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n112 |   }\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n115 |     return .verificationFailed(reason: reason)\n116 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:118:15: error: invalid redeclaration of 'notImplemented(reason:)'\n116 |   }\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n119 |     return .notImplemented(reason: reason)\n120 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              `- error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 31 |   // MARK: - Private Properties\n 32 | \n    :\n349 |    - Returns: Result of the operation\n350 |    */\n351 |   public func performSecureOperation(\n    |               `- note: candidate has non-matching type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n352 |     operation: SecurityOperation,\n353 |     config: SecurityConfigDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              |- error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n    |              `- note: add stubs for conformance\n 31 |   // MARK: - Private Properties\n 32 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:109:8: note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:69:50: error: extra arguments at positions #1, #3, #4, #5 in call\n 67 |     self.logger = logger\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n    |                                                  `- error: extra arguments at positions #1, #3, #4, #5 in call\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/DTOs/SecurityDTOs.swift:23:10: note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 21 |   ///   - loggingLevel: The logging level for security operations\n 22 |   ///   - randomizationOptions: Options for secure random number generation\n 23 |   public init(\n    |          `- note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 24 |     securityLevel: CoreSecurityTypes.SecurityLevelDTO = .standard,\n 25 |     loggingLevel: CoreSecurityTypes.SecurityLogLevelDTO = .warning,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:70:22: error: cannot infer contextual base in reference to member 'standard'\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n 70 |       providerType: .standard,\n    |                      `- error: cannot infer contextual base in reference to member 'standard'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:72:29: error: cannot infer contextual base in reference to member 'aes256'\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n    |                             `- error: cannot infer contextual base in reference to member 'aes256'\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:73:23: error: cannot infer contextual base in reference to member 'sha256'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n    |                       `- error: cannot infer contextual base in reference to member 'sha256'\n 74 |       options: nil\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:74:16: error: 'nil' requires a contextual type\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n    |                `- error: 'nil' requires a contextual type\n 75 |     )\n 76 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:83:41: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 81 |         metadata: createPrivacyMetadata([\n 82 |           \"serviceId\": serviceId.uuidString,\n 83 |           \"providerType\": configuration.providerType.rawValue,\n    |                                         `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 84 |           \"securityLevel\": configuration.securityLevel.rawValue\n 85 |         ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: error: invalid redeclaration of 'notImplemented(reason:)'\n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n305 |     return .notImplemented(reason: reason)\n306 |   }\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:10: error: static methods may only be declared on a type\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:10: error: static methods may only be declared on a type\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:10: error: static methods may only be declared on a type\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:163:1: error: extraneous '}' at top level\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n163 | }\n    | `- error: extraneous '}' at top level\n164 | \n165 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:10: error: static methods may only be declared on a type\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:10: error: static methods may only be declared on a type\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:10: error: static methods may only be declared on a type\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:72:1: error: extraneous '}' at top level\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n72 | }\n   | `- error: extraneous '}' at top level\n73 | \n74 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: expected ',' separator\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: expected ',' separator\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: unnamed parameters must be written with the empty name '_'\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: unnamed parameters must be written with the empty name '_'\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:10: error: static methods may only be declared on a type\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:10: error: static methods may only be declared on a type\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:10: error: static methods may only be declared on a type\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1155:1: error: extraneous '}' at top level\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n1155 | }\n     | `- error: extraneous '}' at top level\n1156 | \n1157 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:10: error: static methods may only be declared on a type\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:10: error: static methods may only be declared on a type\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:10: error: static methods may only be declared on a type\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:616:1: error: extraneous '}' at top level\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n616 | }\n    | `- error: extraneous '}' at top level\n617 | \n618 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:25: error: cannot find ')' to match opening '(' in string interpolation\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:23: error: unterminated string literal\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:25: error: cannot find ')' to match opening '(' in string interpolation\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:23: error: unterminated string literal\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:166:18: error: unterminated string literal\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n166 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n167 | \n168 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:247:18: error: unterminated string literal\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n247 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n248 | \n249 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:10: error: static methods may only be declared on a type\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:10: error: static methods may only be declared on a type\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:10: error: static methods may only be declared on a type\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:275:1: error: extraneous '}' at top level\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n275 | }\n    | `- error: extraneous '}' at top level\n276 | \n277 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:260:65: error: expected ',' separator\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n    |                                                                 `- error: expected ',' separator\n261 |             ]\n262 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:260:65: error: expected key expression in dictionary literal\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n    |                                                                 `- error: expected key expression in dictionary literal\n261 |             ]\n262 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:264:9: error: expected ')' in expression list\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- note: to match this opening '('\n256 |             status: .success,\n257 |             data: decryptedData,\n    :\n262 |           )\n263 | \n264 |         case let .failure(error):\n    |         `- error: expected ')' in expression list\n265 |           throw SecureStorageError.decryptionError(\"Failed to decrypt data: \\(error)\")\n266 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:50: error: expected ',' separator\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                                                  `- error: expected ',' separator\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:10: error: static methods may only be declared on a type\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:10: error: static methods may only be declared on a type\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:10: error: static methods may only be declared on a type\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:477:1: error: extraneous '}' at top level\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n477 | }\n    | `- error: extraneous '}' at top level\n478 | \n479 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:10: error: static methods may only be declared on a type\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:10: error: static methods may only be declared on a type\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:10: error: static methods may only be declared on a type\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:101:1: error: extraneous '}' at top level\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n101 | }\n    | `- error: extraneous '}' at top level\n102 | \n103 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:179:20: error: unterminated string literal\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n179 |         , source: \\\"SecurityImplementation\\\")\n    |                    `- error: unterminated string literal\n180 | \n181 |         // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:200:18: error: unterminated string literal\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n200 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n201 | \n202 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:343:18: error: unterminated string literal\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n343 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n344 | \n345 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:10: error: static methods may only be declared on a type\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:10: error: static methods may only be declared on a type\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:10: error: static methods may only be declared on a type\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:428:1: error: extraneous '}' at top level\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n428 | }\n    | `- error: extraneous '}' at top level\n429 | \n430 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:70:96: error: expected ',' separator\n 68 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n 69 |         verifyOperations: config.options?.verifyOperations ?? true,\n 70 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected ',' separator\n 71 |           \"identifier\": config.options?.metadata?[\"storeIdentifier\"] ?? UUID().uuidString,\n 72 |           \"data\": encryptResult.resultData?.base64EncodedString() ?? \"\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:70:96: error: expected key expression in dictionary literal\n 68 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n 69 |         verifyOperations: config.options?.verifyOperations ?? true,\n 70 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected key expression in dictionary literal\n 71 |           \"identifier\": config.options?.metadata?[\"storeIdentifier\"] ?? UUID().uuidString,\n 72 |           \"data\": encryptResult.resultData?.base64EncodedString() ?? \"\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:77:5: error: expected ')' in expression list\n 57 | \n 58 |     // Now store the encrypted data\n 59 |     let storeConfig=SecurityConfigDTO(\n    |                                      `- note: to match this opening '('\n 60 |       encryptionAlgorithm: config.encryptionAlgorithm,\n 61 |       hashAlgorithm: config.hashAlgorithm,\n    :\n 75 |     )\n 76 | \n 77 |     let storeResult=try await performSecureOperation(\n    |     `- error: expected ')' in expression list\n 78 |       operation: .storeKey,\n 79 |       config: storeConfig\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:112:96: error: expected ',' separator\n110 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n111 |         verifyOperations: config.options?.verifyOperations ?? true,\n112 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected ',' separator\n113 |           \"identifier\": identifier\n114 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:112:96: error: expected key expression in dictionary literal\n110 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n111 |         verifyOperations: config.options?.verifyOperations ?? true,\n112 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected key expression in dictionary literal\n113 |           \"identifier\": identifier\n114 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:119:5: error: expected ')' in expression list\n 99 |   ) async throws -\u003e SecurityResultDTO {\n100 |     // First retrieve the encrypted data\n101 |     let retrieveConfig=SecurityConfigDTO(\n    |                                         `- note: to match this opening '('\n102 |       encryptionAlgorithm: config.encryptionAlgorithm,\n103 |       hashAlgorithm: config.hashAlgorithm,\n    :\n117 | \n118 |     // Retrieve the encrypted data\n119 |     let retrieveResult=try await performSecureOperation(\n    |     `- error: expected ')' in expression list\n120 |       operation: .retrieveKey,\n121 |       config: retrieveConfig\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:10: error: static methods may only be declared on a type\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:10: error: static methods may only be declared on a type\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:10: error: static methods may only be declared on a type\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:438:1: error: extraneous '}' at top level\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n438 | }\n    | `- error: extraneous '}' at top level\n439 | \n440 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:62:7: error: expected expression\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n 62 |       )\n    |       `- error: expected expression\n 63 |       actualLogger=developmentLogger\n 64 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:106:7: error: expected expression\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n106 |       )\n    |       `- error: expected expression\n107 |       actualLogger=developmentLogger\n108 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:151:7: error: expected expression\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n151 |       )\n    |       `- error: expected expression\n152 |       actualLogger=developmentLogger\n153 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:10: error: static methods may only be declared on a type\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:10: error: static methods may only be declared on a type\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:10: error: static methods may only be declared on a type\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:182:1: error: extraneous '}' at top level\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n182 | }\n    | `- error: extraneous '}' at top level\n183 | \n184 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:10: error: static methods may only be declared on a type\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:10: error: static methods may only be declared on a type\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:10: error: static methods may only be declared on a type\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:102:1: error: extraneous '}' at top level\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n102 | }\n    | `- error: extraneous '}' at top level\n103 | \n104 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:10: error: static methods may only be declared on a type\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:10: error: static methods may only be declared on a type\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:10: error: static methods may only be declared on a type\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:276:1: error: extraneous '}' at top level\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n276 | }\n    | `- error: extraneous '}' at top level\n277 | \n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:82:10: error: static methods may only be declared on a type\n80 | \n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n84 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:86:10: error: static methods may only be declared on a type\n84 |   }\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n88 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:90:10: error: static methods may only be declared on a type\n88 |   }\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:93:1: error: extraneous '}' at top level\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n93 | }\n   | `- error: extraneous '}' at top level\n94 | \n95 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:173:5: error: expected expression\n171 |         \"durationMs\": String(format: \"%.2f\", duration)\n172 |       ])\n173 |     )\n    |     `- error: expected expression\n174 |   }\n175 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityErrorHandler.swift:73:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 71 |     await logger.error(\n 72 |       \"Security operation failed: \\(securityError.message)\",\n 73 |       metadata: metadata,\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 74 |       source: source\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityErrorHandler.swift:100:8: error: initializer for conditional binding must have Optional type, not 'NSError'\n 98 |     \n 99 |     // If it's an NSError, map it to a SecurityError\n100 |     if let nsError = error as NSError {\n    |        `- error: initializer for conditional binding must have Optional type, not 'NSError'\n101 |       return mapSecurityFrameworkError(nsError)\n102 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:15: error: invalid redeclaration of 'notImplemented(reason:)'\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:153:13: error: type 'CoreSecurityError' has no member 'general'\n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n154 |   }\n155 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:157:13: error: type 'CoreSecurityError' has no member 'general'\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n158 |   }\n159 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:161:13: error: type 'CoreSecurityError' has no member 'general'\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n162 |   }\n163 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:15: error: invalid redeclaration of 'notImplemented(reason:)'\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:62:13: error: type 'CoreSecurityError' has no member 'general'\n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n63 |   }\n64 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:66:13: error: type 'CoreSecurityError' has no member 'general'\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n67 |   }\n68 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:70:13: error: type 'CoreSecurityError' has no member 'general'\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n71 |   }\n72 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:15: error: cannot find type 'createPrivacyMetadata' in scope\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |               `- error: cannot find type 'createPrivacyMetadata' in scope\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:15: error: invalid redeclaration of 'notImplemented(reason:)'\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:62:27: error: cannot find type 'KeyStorageManager' in scope\n 60 |   init(\n 61 |     cryptoService: CryptoServiceProtocol,\n 62 |     keyManagementService: KeyStorageManager,\n    |                           `- error: cannot find type 'KeyStorageManager' in scope\n 63 |     logger: PrivacyAwareLoggingProtocol\n 64 |   ) {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:137:38: error: extra arguments at positions #1, #2 in call\n 135 |     )\n 136 | \n 137 |     signatureService=SignatureService(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:78:3: note: 'init(logger:)' declared here\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: 'init(logger:)' declared here\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:140:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n 140 |       logger: logger\n     |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 141 |     )\n 142 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:159:63: error: missing argument for parameter 'context' in call\n 157 |    */\n 158 |   public func initialize() async throws {\n 159 |     await logger.info(\"Initializing security provider service\")\n     |                                                               `- error: missing argument for parameter 'context' in call\n 160 | \n 161 |     // Log with secure logger for enhanced privacy awareness\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:182:75: error: missing argument for parameter 'context' in call\n 180 |     }\n 181 | \n 182 |     await logger.info(\"Security provider service initialized successfully\")\n     |                                                                           `- error: missing argument for parameter 'context' in call\n 183 | \n 184 |     // Log successful initialisation with secure logger\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:235:33: error: missing arguments for parameters 'mode', 'padding' in call\n 233 |       dataIdentifier: dataIdentifier,\n 234 |       keyIdentifier: keyIdentifier,\n 235 |       options: EncryptionOptions(algorithm: .aes256CBC)\n     |                                 `- error: missing arguments for parameters 'mode', 'padding' in call\n 236 |     )\n 237 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:105:10: note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n103 |   public let additionalAuthenticatedData: [UInt8]? // For AEAD modes like GCM\n104 | \n105 |   public init(\n    |          `- note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n106 |     algorithm: EncryptionAlgorithm,\n107 |     mode: EncryptionMode,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:248:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 246 |           return encryptedData\n 247 |         } else {\n 248 |           throw SecurityProtocolError.inputError(\"Failed to retrieve encrypted data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 249 |         }\n 250 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:271:33: error: missing arguments for parameters 'mode', 'padding' in call\n 269 |       encryptedDataIdentifier: encryptedDataIdentifier,\n 270 |       keyIdentifier: keyIdentifier,\n 271 |       options: DecryptionOptions(algorithm: .aes256CBC)\n     |                                 `- error: missing arguments for parameters 'mode', 'padding' in call\n 272 |     )\n 273 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:105:10: note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n103 |   public let additionalAuthenticatedData: [UInt8]? // For AEAD modes like GCM\n104 | \n105 |   public init(\n    |          `- note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n106 |     algorithm: EncryptionAlgorithm,\n107 |     mode: EncryptionMode,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:284:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 282 |           return decryptedData\n 283 |         } else {\n 284 |           throw SecurityProtocolError.inputError(\"Failed to retrieve decrypted data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 285 |         }\n 286 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:314:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 312 |           return signatureData\n 313 |         } else {\n 314 |           throw SecurityProtocolError.inputError(\"Failed to retrieve signature data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 315 |         }\n 316 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:368:68: error: cannot find 'createPrivacyMetadata' in scope\n 366 |     // Check if a key identifier is provided to load from key manager\n 367 |     if let keyID=config.options?.metadata?[\"keyIdentifier\"] {\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n     |                                                                    `- error: cannot find 'createPrivacyMetadata' in scope\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:370:9: error: missing argument for parameter 'source' in call\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n     |         `- error: missing argument for parameter 'source' in call\n 371 | \n 372 |       let result=await keyManager.retrieveKey(withIdentifier: keyID)\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:368:106: error: extra arguments at positions #2, #3 in call\n 366 |     // Check if a key identifier is provided to load from key manager\n 367 |     if let keyID=config.options?.metadata?[\"keyIdentifier\"] {\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n     |                                                                                                          `- error: extra arguments at positions #2, #3 in call\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:377:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 375 |           return key\n 376 |         case let .failure(error):\n 377 |           throw SecurityProtocolError.inputError(\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 378 |             \"Failed to retrieve key with identifier \\(keyID): \\(error.localizedDescription)\"\n 379 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:408:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 406 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 407 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n     |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:409:82: error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 407 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n     |                                                                                  `- error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n 411 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:410:80: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 411 |       ]\n 412 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:410:94: error: cannot convert value of type 'Bool' to expected argument type 'String'\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                              `- error: cannot convert value of type 'Bool' to expected argument type 'String'\n 411 |       ]\n 412 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:431:86: error: value of type 'SecurityResultDTO' has no member 'data'\n 429 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 430 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 431 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n     |                                                                                      `- error: value of type 'SecurityResultDTO' has no member 'data'\n 432 |         ]\n 433 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:430:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 428 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 429 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 430 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 431 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n 432 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:449:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 447 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 448 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 449 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 450 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 451 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:481:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 479 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 480 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n     |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:482:82: error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 480 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n     |                                                                                  `- error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n 484 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:483:80: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 484 |       ]\n 485 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:483:94: error: cannot convert value of type 'Bool' to expected argument type 'String'\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                              `- error: cannot convert value of type 'Bool' to expected argument type 'String'\n 484 |       ]\n 485 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:504:86: error: value of type 'SecurityResultDTO' has no member 'data'\n 502 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 503 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 504 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n     |                                                                                      `- error: value of type 'SecurityResultDTO' has no member 'data'\n 505 |         ]\n 506 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:503:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 501 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 502 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 503 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 504 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n 505 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:522:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 520 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 521 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 522 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 523 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 524 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:547:49: error: cannot find 'createPrivacyMetadata' in scope\n 545 |     // Log operation with standard logger\n 546 |     await logger.info(\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n     |                                                 `- error: cannot find 'createPrivacyMetadata' in scope\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:549:15: error: extra argument 'source' in call\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n     |               `- error: extra argument 'source' in call\n 550 | \n 551 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:547:90: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 545 |     // Log operation with standard logger\n 546 |     await logger.info(\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n     |                                                                                          `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:560:81: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 558 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 559 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 560 |         \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public),\n     |                                                                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 561 |         \"keySize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keySize), privacyLevel: .public)\n 562 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:561:81: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 559 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 560 |         \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public),\n 561 |         \"keySize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keySize), privacyLevel: .public)\n     |                                                                                 `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 562 |       ]\n 563 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:567:39: error: value of type 'any KeyManagementProtocol' has no member 'generateKey'\n 565 |     do {\n 566 |       // Process the request through the key management service\n 567 |       let result=try await keyManager.generateKey(\n     |                                       `- error: value of type 'any KeyManagementProtocol' has no member 'generateKey'\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:568:22: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 566 |       // Process the request through the key management service\n 567 |       let result=try await keyManager.generateKey(\n 568 |         type: config.keyType,\n     |                      `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 569 |         size: config.keySize,\n 570 |         metadata: config.metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:569:22: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 567 |       let result=try await keyManager.generateKey(\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n     |                      `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 570 |         metadata: config.metadata\n 571 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:570:26: error: value of type 'SecurityConfigDTO' has no member 'metadata'\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n 570 |         metadata: config.metadata\n     |                          `- error: value of type 'SecurityConfigDTO' has no member 'metadata'\n 571 |       )\n 572 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:19: error: cannot find 'createPrivacyMetadata' in scope\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                   `- error: cannot find 'createPrivacyMetadata' in scope\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:60: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                                                            `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:103: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:21: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                     `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:38: error: extra arguments at positions #1, #2 in call\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:38: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                                      `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:578:18: error: cannot infer contextual base in reference to member 'success'\n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n 578 |         status: .success,\n     |                  `- error: cannot infer contextual base in reference to member 'success'\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:592:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 590 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 591 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 592 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 593 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n 594 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:593:83: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 591 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 592 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 593 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n     |                                                                                   `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 594 |         ]\n 595 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:599:60: error: cannot find 'createPrivacyMetadata' in scope\n 597 |       // Log completion\n 598 |       await logger.info(\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n     |                                                            `- error: cannot find 'createPrivacyMetadata' in scope\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:601:17: error: extra argument 'source' in call\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n     |                 `- error: extra argument 'source' in call\n 602 | \n 603 |       return resultDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:599:101: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 597 |       // Log completion\n 598 |       await logger.info(\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n     |                                                                                                     `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:617:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 615 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 616 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 617 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 618 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 619 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:620:83: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 618 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 619 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public),\n 620 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n     |                                                                                   `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 621 |         ]\n 622 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:627:19: error: cannot find 'createPrivacyMetadata' in scope\n 625 |       await logger.error(\n 626 |         \"Key generation failed: \\(error.localizedDescription)\",\n 627 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"error\": error.localizedDescription]),\n     |                   `- error: cannot find 'createPrivacyMetadata' in scope\n 628 |         source: \"CoreSecurityProvider\"\n 629 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:627:60: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 625 |       await logger.error(\n 626 |         \"Key generation failed: \\(error.localizedDescription)\",\n 627 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"error\": error.localizedDescription]),\n     |                                                            `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 628 |         source: \"CoreSecurityProvider\"\n 629 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:644:5: warning: no calls to throwing functions occur within 'try' expression\n 642 |    */\n 643 |   public func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 644 |     try await signatureService.sign(config: config)\n     |     `- warning: no calls to throwing functions occur within 'try' expression\n 645 |   }\n 646 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:656:5: warning: no calls to throwing functions occur within 'try' expression\n 654 |    */\n 655 |   public func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 656 |     try await signatureService.verify(config: config)\n     |     `- warning: no calls to throwing functions occur within 'try' expression\n 657 |   }\n 658 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:668:30: error: value of type 'SecureStorageService' has no member 'store'\n 666 |    */\n 667 |   public func store(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 668 |     try await storageService.store(config: config)\n     |                              `- error: value of type 'SecureStorageService' has no member 'store'\n 669 |   }\n 670 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:680:30: error: value of type 'SecureStorageService' has no member 'retrieve'\n 678 |    */\n 679 |   public func retrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 680 |     try await storageService.retrieve(config: config)\n     |                              `- error: value of type 'SecureStorageService' has no member 'retrieve'\n 681 |   }\n 682 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:693:69: error: cannot find 'createPrivacyMetadata' in scope\n 691 |     let operationID=UUID().uuidString\n 692 | \n 693 |     await logger.debug(\"Starting secure store operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                     `- error: cannot find 'createPrivacyMetadata' in scope\n 694 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 695 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:702:27: error: type 'SecurityError' has no member 'invalidInput'\n 700 |       let inputData=Data(base64Encoded: dataString)\n 701 |     else {\n 702 |       throw SecurityError.invalidInput(\"Missing or invalid input data for secure storage\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 703 |     }\n 704 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:714:27: error: type 'SecurityError' has no member 'internalError'\n 712 |     // Then store the encrypted data using the key manager\n 713 |     guard let encryptedData=encryptionResult.resultData else {\n 714 |       throw SecurityError.internalError(\"Encryption successful but no encrypted data returned\")\n     |                           `- error: type 'SecurityError' has no member 'internalError'\n 715 |     }\n 716 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:718:50: error: extra arguments at positions #2, #3 in call\n 716 | \n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n     |                                                  `- error: extra arguments at positions #2, #3 in call\n 719 |       identifier: keyIdentifier,\n 720 |       keyData: encryptedData,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:20:8: note: 'storeKey(_:withIdentifier:)' declared here\n18 |   ///   - identifier: A string identifier for the key.\n19 |   /// - Returns: Success or an error.\n20 |   func storeKey(_ key: [UInt8], withIdentifier identifier: String) async\n   |        `- note: 'storeKey(_:withIdentifier:)' declared here\n21 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n22 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:719:32: error: missing argument for parameter 'withIdentifier' in call\n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n 719 |       identifier: keyIdentifier,\n     |                                `- error: missing argument for parameter 'withIdentifier' in call\n 720 |       keyData: encryptedData,\n 721 |       metadata: config.options?.metadata ?? [:]\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:20:8: note: 'storeKey(_:withIdentifier:)' declared here\n18 |   ///   - identifier: A string identifier for the key.\n19 |   /// - Returns: Success or an error.\n20 |   func storeKey(_ key: [UInt8], withIdentifier identifier: String) async\n   |        `- note: 'storeKey(_:withIdentifier:)' declared here\n21 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n22 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:719:19: error: cannot convert value of type 'String' to expected argument type '[UInt8]'\n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n 719 |       identifier: keyIdentifier,\n     |                   `- error: cannot convert value of type 'String' to expected argument type '[UInt8]'\n 720 |       keyData: encryptedData,\n 721 |       metadata: config.options?.metadata ?? [:]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:726:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 724 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 725 | \n 726 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 727 |       successful: storeResult.successful,\n 728 |       resultData: keyIdentifier.data(using: .utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:745:72: error: cannot find 'createPrivacyMetadata' in scope\n 743 |     let operationID=UUID().uuidString\n 744 | \n 745 |     await logger.debug(\"Starting secure retrieve operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n 746 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 747 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:751:27: error: type 'SecurityError' has no member 'invalidInput'\n 749 |     // Extract required parameters from configuration\n 750 |     guard let keyIdentifier=config.options?.metadata?[\"key_identifier\"] else {\n 751 |       throw SecurityError.invalidInput(\"Missing key identifier for secure retrieval\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 752 |     }\n 753 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:755:45: error: value of type 'any KeyManagementProtocol' has no member 'getKey'\n 753 | \n 754 |     // Retrieve the encrypted data using the key manager\n 755 |     let retrieveResult=try await keyManager.getKey(\n     |                                             `- error: value of type 'any KeyManagementProtocol' has no member 'getKey'\n 756 |       identifier: keyIdentifier,\n 757 |       metadata: config.options?.metadata ?? [:]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:762:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 760 |     if !retrieveResult.successful || retrieveResult.keyData == nil {\n 761 |       let errorDetails=retrieveResult.errorDetails ?? \"Failed to retrieve data\"\n 762 |       return SecurityResultDTO(\n     |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 763 |         successful: false,\n 764 |         resultData: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:780:27: error: type 'SecurityError' has no member 'internalError'\n 778 | \n 779 |     guard let keyData=retrieveResult.keyData else {\n 780 |       throw SecurityError.internalError(\"Key data missing after successful retrieval\")\n     |                           `- error: type 'SecurityError' has no member 'internalError'\n 781 |     }\n 782 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:808:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 806 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 807 | \n 808 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 809 |       successful: decryptResult.successful,\n 810 |       resultData: decryptResult.resultData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:827:70: error: cannot find 'createPrivacyMetadata' in scope\n 825 |     let operationID=UUID().uuidString\n 826 | \n 827 |     await logger.debug(\"Starting secure delete operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID\n     |                                                                      `- error: cannot find 'createPrivacyMetadata' in scope\n 828 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n 829 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:832:27: error: type 'SecurityError' has no member 'invalidInput'\n 830 |     // Extract required parameters from configuration\n 831 |     guard let keyIdentifier=config.options?.metadata?[\"key_identifier\"] else {\n 832 |       throw SecurityError.invalidInput(\"Missing key identifier for secure deletion\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 833 |     }\n 834 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:836:52: error: extra arguments at positions #1, #2 in call\n 834 | \n 835 |     // Delete the key using the key manager\n 836 |     let deleteResult=try await keyManager.deleteKey(\n     |                                                    `- error: extra arguments at positions #1, #2 in call\n 837 |       identifier: keyIdentifier,\n 838 |       metadata: config.options?.metadata ?? [:]\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:26:8: note: 'deleteKey(withIdentifier:)' declared here\n24 |   /// - Parameter identifier: A string identifying the key to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteKey(withIdentifier identifier: String) async\n   |        `- note: 'deleteKey(withIdentifier:)' declared here\n27 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n28 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:837:7: error: missing argument for parameter 'withIdentifier' in call\n 835 |     // Delete the key using the key manager\n 836 |     let deleteResult=try await keyManager.deleteKey(\n 837 |       identifier: keyIdentifier,\n     |       `- error: missing argument for parameter 'withIdentifier' in call\n 838 |       metadata: config.options?.metadata ?? [:]\n 839 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:26:8: note: 'deleteKey(withIdentifier:)' declared here\n24 |   /// - Parameter identifier: A string identifying the key to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteKey(withIdentifier identifier: String) async\n   |        `- note: 'deleteKey(withIdentifier:)' declared here\n27 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n28 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:843:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 841 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 842 | \n 843 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 844 |       successful: deleteResult.successful,\n 845 |       resultData: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:867:86: error: cannot find 'createPrivacyMetadata' in scope\n 865 |     let operationID=UUID().uuidString\n 866 | \n 867 |     await logger.debug(\"Starting secure operation: \\(operation.rawValue)\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                                      `- error: cannot find 'createPrivacyMetadata' in scope\n 868 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 869 |     ]))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:869:7: error: missing argument for parameter 'source' in call\n 867 |     await logger.debug(\"Starting secure operation: \\(operation.rawValue)\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n 868 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 869 |     ]))\n     |       `- error: missing argument for parameter 'source' in call\n 870 | \n 871 |     let result: CoreSecurityTypes.SecurityResultDTO=switch operation {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:877:19: error: cannot find 'hash' in scope\n 875 |         try await decrypt(config: config)\n 876 |       case .hashing:\n 877 |         try await hash(config: config)\n     |                   `- error: cannot find 'hash' in scope\n 878 |       case .keyGeneration:\n 879 |         try await generateKey(config: config)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:881:19: error: cannot find 'rotateKey' in scope\n 879 |         try await generateKey(config: config)\n 880 |       case .keyRotation:\n 881 |         try await rotateKey(config: config)\n     |                   `- error: cannot find 'rotateKey' in scope\n 882 |       case .keyDeletion:\n 883 |         try await secureDelete(config: config)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:872:13: error: type 'SecurityOperation' has no member 'encryption'\n 870 | \n 871 |     let result: CoreSecurityTypes.SecurityResultDTO=switch operation {\n 872 |       case .encryption:\n     |             `- error: type 'SecurityOperation' has no member 'encryption'\n 873 |         try await encrypt(config: config)\n 874 |       case .decryption:\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:897:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 895 |     updatedMetadata[\"operation_id\"]=operationID\n 896 | \n 897 |     return CoreSecurityTypes.SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 898 |       successful: result.successful,\n 899 |       resultData: result.resultData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:924:8: error: type 'SigningAlgorithm' has no member 'hmacSHA256'\n 922 |       .ed25519 // Hardware accelerated where available\n 923 |     } else {\n 924 |       .hmacSHA256 // Software implementation\n     |        `- error: type 'SigningAlgorithm' has no member 'hmacSHA256'\n 925 |     }\n 926 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:928:36: error: no type named 'HashingAlgorithm' in module 'CoreSecurityTypes'\n 926 | \n 927 |     // Determine the hashing algorithm\n 928 |     let hashing: CoreSecurityTypes.HashingAlgorithm=if options.useStrongerHashing {\n     |                                    `- error: no type named 'HashingAlgorithm' in module 'CoreSecurityTypes'\n 929 |       .sha512 // Stronger but slower\n 930 |     } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:935:25: error: cannot find 'SecurityOptions' in scope\n 933 | \n 934 |     // Create the security options with selected algorithms\n 935 |     let securityOptions=SecurityOptions(\n     |                         `- error: cannot find 'SecurityOptions' in scope\n 936 |       encryption: encryption,\n 937 |       decryption: encryption,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:944:29: error: extra arguments at positions #2, #3 in call\n 942 | \n 943 |     // Create the configuration DTO with the options\n 944 |     return SecurityConfigDTO(\n     |                             `- error: extra arguments at positions #2, #3 in call\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityConfigDTO.swift:31:10: note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n29 |      - options: Optional configuration options\n30 |    */\n31 |   public init(\n   |          `- note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n32 |     encryptionAlgorithm: EncryptionAlgorithm,\n33 |     hashAlgorithm: HashAlgorithm,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:944:29: error: missing arguments for parameters 'encryptionAlgorithm', 'hashAlgorithm', 'providerType' in call\n 942 | \n 943 |     // Create the configuration DTO with the options\n 944 |     return SecurityConfigDTO(\n     |                             `- error: missing arguments for parameters 'encryptionAlgorithm', 'hashAlgorithm', 'providerType' in call\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityConfigDTO.swift:31:10: note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n29 |      - options: Optional configuration options\n30 |    */\n31 |   public init(\n   |          `- note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n32 |     encryptionAlgorithm: EncryptionAlgorithm,\n33 |     hashAlgorithm: HashAlgorithm,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:946:21: error: value of type 'SecurityConfigOptions' has no member 'data'\n 944 |     return SecurityConfigDTO(\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n     |                     `- error: value of type 'SecurityConfigOptions' has no member 'data'\n 947 |       outputFormat: options.outputFormat ?? .binary\n 948 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:947:29: error: value of type 'SecurityConfigOptions' has no member 'outputFormat'\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n 947 |       outputFormat: options.outputFormat ?? .binary\n     |                             `- error: value of type 'SecurityConfigOptions' has no member 'outputFormat'\n 948 |     )\n 949 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:947:46: error: cannot infer contextual base in reference to member 'binary'\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n 947 |       outputFormat: options.outputFormat ?? .binary\n     |                                              `- error: cannot infer contextual base in reference to member 'binary'\n 948 |     )\n 949 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:963:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 961 | \n 962 |     // Map known error types to appropriate security errors\n 963 |     if let nsError=error as? NSError {\n     |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 964 |       switch nsError.domain {\n 965 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:966:19: error: type 'SecurityProtocolError' has no member 'networkError'\n 964 |       switch nsError.domain {\n 965 |         case NSURLErrorDomain:\n 966 |           return .networkError(\n     |                   `- error: type 'SecurityProtocolError' has no member 'networkError'\n 967 |             \"Network error during security operation: \\(nsError.localizedDescription)\"\n 968 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:970:19: error: type 'SecurityProtocolError' has no member 'systemError'\n 968 |           )\n 969 |         case NSOSStatusErrorDomain:\n 970 |           return .systemError(\n     |                   `- error: type 'SecurityProtocolError' has no member 'systemError'\n 971 |             \"System error during security operation: \\(nsError.localizedDescription)\"\n 972 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:979:13: error: type 'SecurityProtocolError' has no member 'generalError'\n 977 | \n 978 |     // Default error mapping\n 979 |     return .generalError(\"Security operation failed: \\(error.localizedDescription)\")\n     |             `- error: type 'SecurityProtocolError' has no member 'generalError'\n 980 |   }\n 981 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:32: error: extra argument 'errorCode' in call\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                `- error: extra argument 'errorCode' in call\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:36: error: missing argument for parameter 'executionTimeMs' in call\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                    `- error: missing argument for parameter 'executionTimeMs' in call\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityResultDTO.swift:55:22: note: 'failure(errorDetails:executionTimeMs:metadata:)' declared here\n53 |      - metadata: Optional additional metadata\n54 |    */\n55 |   public static func failure(\n   |                      `- note: 'failure(errorDetails:executionTimeMs:metadata:)' declared here\n56 |     errorDetails: String,\n57 |     executionTimeMs: Double,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:32: error: value of type 'SecurityProtocolError' has no member 'code'\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                `- error: value of type 'SecurityProtocolError' has no member 'code'\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1031:21: error: pattern with associated values does not match enum case 'encrypt'\n1029 |       let result: SecurityResultDTO=try await {\n1030 |         switch operation {\n1031 |           case let .encrypt(data, key, algorithm):\n     |                     |- error: pattern with associated values does not match enum case 'encrypt'\n     |                     `- note: remove associated values to make the pattern match\n1032 |             let config=SecurityConfigDTO(\n1033 |               operationType: .encrypt,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:49: error: extra arguments at positions #1, #2 in call\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |                                                 `- error: extra arguments at positions #1, #2 in call\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:49: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |                                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1133:18: error: cannot infer contextual base in reference to member 'failure'\n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n1133 |         status: .failure,\n     |                  `- error: cannot infer contextual base in reference to member 'failure'\n1134 |         error: error.localizedDescription,\n1135 |         metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1145:13: error: type 'CoreSecurityError' has no member 'general'\n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1146 |   }\n1147 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1149:13: error: type 'CoreSecurityError' has no member 'general'\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1150 |   }\n1151 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1153:13: error: type 'CoreSecurityError' has no member 'general'\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1154 |   }\n1155 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:15: error: invalid redeclaration of 'notImplemented(reason:)'\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:123:121: error: extra argument 'source' in call\n121 |     )\n122 | \n123 |     await logger.info(\"Starting encryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                         `- error: extra argument 'source' in call\n124 | \n125 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:123:66: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n121 |     )\n122 | \n123 |     await logger.info(\"Starting encryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                  `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n124 | \n125 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:134:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n132 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n133 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n134 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n    |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n135 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n136 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:135:90: error: value of type 'SecurityConfigOptions?' has no subscripts\n133 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n134 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n135 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n    |                                                                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n136 |       ]\n137 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:142:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n140 |       // Extract required parameters from configuration\n141 |       guard\n142 |         let inputDataString=config.options[\"data\"],\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n143 |         let inputData=Data(base64Encoded: inputDataString)\n144 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:171:33: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n169 |       // Choose encryption key\n170 |       let keyIdentifier: String\n171 |       if let configKeyID=config.keyIdentifier {\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n172 |         keyIdentifier=configKeyID\n173 |       } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:210:19: error: cannot find 'createPrivacyMetadata' in scope\n208 |         status: .success,\n209 |         data: encryptedData,\n210 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n211 |           \"operationID\": operationID,\n212 |           \"durationMs\": String(Int(duration * 1000))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:35: error: extra arguments at positions #1, #2 in call\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:208:18: error: cannot infer contextual base in reference to member 'success'\n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n208 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n209 |         data: encryptedData,\n210 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:225:72: error: type 'PrivacyMetadataValue' has no member 'int'\n223 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n224 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n225 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n226 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(encryptedData.count), privacyLevel: .public)\n227 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:226:72: error: type 'PrivacyMetadataValue' has no member 'int'\n224 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n225 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n226 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(encryptedData.count), privacyLevel: .public)\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n227 |         ]\n228 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:232:56: error: cannot find 'createPrivacyMetadata' in scope\n230 |       // Log success\n231 |       await logger.info(\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n234 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:234:11: error: missing argument for parameter 'source' in call\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n234 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n235 |       )\n236 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:233:35: error: extra arguments at positions #2, #3 in call\n231 |       await logger.info(\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n    |                                   `- error: extra arguments at positions #2, #3 in call\n234 |         ])\n235 |       )\n\nSwift.Int.init:2:8: note: 'init(_:)' declared here\n1 | struct Int {\n2 | public init(_ source: Double)}\n  |        `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:255:72: error: type 'PrivacyMetadataValue' has no member 'int'\n253 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n254 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n255 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n256 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n257 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:264:19: error: cannot find 'createPrivacyMetadata' in scope\n262 |       await logger.error(\n263 |         \"Encryption failed: \\(error.localizedDescription)\",\n264 |         metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n265 |           \"durationMs\": String(Int(duration * 1000)),\n266 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:267:11: error: missing argument for parameter 'source' in call\n265 |           \"durationMs\": String(Int(duration * 1000)),\n266 |           \"error\": error.localizedDescription\n267 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n268 |       )\n269 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:274:19: error: cannot find 'createPrivacyMetadata' in scope\n272 |         status: .failure,\n273 |         data: nil,\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n275 |           \"operationID\": operationID,\n276 |           \"durationMs\": String(Int(duration * 1000)),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:35: error: extra arguments at positions #1, #2 in call\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:272:18: error: cannot infer contextual base in reference to member 'failure'\n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n272 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n273 |         data: nil,\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:273:15: error: 'nil' requires a contextual type\n271 |       let result=SecurityResultDTO(\n272 |         status: .failure,\n273 |         data: nil,\n    |               `- error: 'nil' requires a contextual type\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n275 |           \"operationID\": operationID,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:242:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n240 | \n241 |       return result\n242 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n243 |       // Calculate duration for metrics\n244 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:303:121: error: extra argument 'source' in call\n301 |     )\n302 | \n303 |     await logger.info(\"Starting decryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                         `- error: extra argument 'source' in call\n304 | \n305 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:303:66: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n301 |     )\n302 | \n303 |     await logger.info(\"Starting decryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                  `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n304 | \n305 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:314:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n312 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n313 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n314 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n    |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n315 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n316 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:315:90: error: value of type 'SecurityConfigOptions?' has no subscripts\n313 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n314 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n315 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n    |                                                                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n316 |       ]\n317 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:322:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n320 |       // Extract required parameters from configuration\n321 |       guard\n322 |         let inputDataString=config.options[\"data\"],\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n323 |         let inputData=Data(base64Encoded: inputDataString)\n324 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:351:33: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n349 |       // Choose decryption key\n350 |       let keyIdentifier: String\n351 |       if let configKeyID=config.keyIdentifier {\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n352 |         keyIdentifier=configKeyID\n353 |       } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:390:19: error: cannot find 'createPrivacyMetadata' in scope\n388 |         status: .success,\n389 |         data: decryptedData,\n390 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n391 |           \"operationID\": operationID,\n392 |           \"durationMs\": String(Int(duration * 1000))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:35: error: extra arguments at positions #1, #2 in call\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:388:18: error: cannot infer contextual base in reference to member 'success'\n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n388 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n389 |         data: decryptedData,\n390 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:405:72: error: type 'PrivacyMetadataValue' has no member 'int'\n403 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n404 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n405 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n406 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(decryptedData.count), privacyLevel: .public)\n407 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:406:72: error: type 'PrivacyMetadataValue' has no member 'int'\n404 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n405 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n406 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(decryptedData.count), privacyLevel: .public)\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n407 |         ]\n408 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:412:56: error: cannot find 'createPrivacyMetadata' in scope\n410 |       // Log success\n411 |       await logger.info(\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n414 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:414:11: error: missing argument for parameter 'source' in call\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n414 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n415 |       )\n416 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:413:35: error: extra arguments at positions #2, #3 in call\n411 |       await logger.info(\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n    |                                   `- error: extra arguments at positions #2, #3 in call\n414 |         ])\n415 |       )\n\nSwift.Int.init:2:8: note: 'init(_:)' declared here\n1 | struct Int {\n2 | public init(_ source: Double)}\n  |        `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:435:72: error: type 'PrivacyMetadataValue' has no member 'int'\n433 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n434 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n435 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n436 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n437 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:444:19: error: cannot find 'createPrivacyMetadata' in scope\n442 |       await logger.error(\n443 |         \"Decryption failed: \\(error.localizedDescription)\",\n444 |         metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n445 |           \"durationMs\": String(Int(duration * 1000)),\n446 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:447:11: error: missing argument for parameter 'source' in call\n445 |           \"durationMs\": String(Int(duration * 1000)),\n446 |           \"error\": error.localizedDescription\n447 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n448 |       )\n449 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:454:19: error: cannot find 'createPrivacyMetadata' in scope\n452 |         status: .failure,\n453 |         data: nil,\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n455 |           \"operationID\": operationID,\n456 |           \"durationMs\": String(Int(duration * 1000)),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:35: error: extra arguments at positions #1, #2 in call\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:452:18: error: cannot infer contextual base in reference to member 'failure'\n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n452 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n453 |         data: nil,\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:453:15: error: 'nil' requires a contextual type\n451 |       let result=SecurityResultDTO(\n452 |         status: .failure,\n453 |         data: nil,\n    |               `- error: 'nil' requires a contextual type\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n455 |           \"operationID\": operationID,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:422:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n420 | \n421 |       return result\n422 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n423 |       // Calculate duration for metrics\n424 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:494:52: error: extra arguments at positions #1, #2 in call\n492 | \n493 |       // Try the standard protocol method signature which returns a Result type\n494 |       let encryptResult=await cryptoService.encrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n495 | \n496 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:494:52: error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n492 | \n493 |       // Try the standard protocol method signature which returns a Result type\n494 |       let encryptResult=await cryptoService.encrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n495 | \n496 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:541:52: error: extra arguments at positions #1, #2 in call\n539 | \n540 |       // Try the standard protocol method signature which returns a Result type\n541 |       let decryptResult=await cryptoService.decrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n542 | \n543 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:541:52: error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n539 | \n540 |       // Try the standard protocol method signature which returns a Result type\n541 |       let decryptResult=await cryptoService.decrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n542 | \n543 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:592:35: error: type 'SecurityProtocolError' has no member 'keyNotFound'\n590 |   func retrieve(withIdentifier identifier: String) throws -\u003e Data {\n591 |     guard let data=storage[identifier] else {\n592 |       throw SecurityProtocolError.keyNotFound\n    |                                   `- error: type 'SecurityProtocolError' has no member 'keyNotFound'\n593 |     }\n594 |     return data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:606:13: error: type 'CoreSecurityError' has no member 'general'\n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n607 |   }\n608 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:610:13: error: type 'CoreSecurityError' has no member 'general'\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n611 |   }\n612 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:614:13: error: type 'CoreSecurityError' has no member 'general'\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n615 |   }\n616 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:82:118: error: extra argument 'source' in call\n 80 |     )\n 81 | \n 82 |     await logger.info(\"Starting hashing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                      `- error: extra argument 'source' in call\n 83 | \n 84 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:82:63: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 80 |     )\n 81 | \n 82 |     await logger.info(\"Starting hashing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                               `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 83 | \n 84 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:87:38: error: value of type 'SecurityConfigOptions?' has no subscripts\n 85 |       // Extract required parameters from configuration\n 86 |       guard\n 87 |         let dataString=config.options[\"data\"],\n    |                                      `- error: value of type 'SecurityConfigOptions?' has no subscripts\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n 89 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:88:46: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n 86 |       guard\n 87 |         let dataString=config.options[\"data\"],\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n    |                                              `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n 89 |       else {\n 90 |         throw SecurityError.invalidInput(\"Missing or invalid input data for hashing\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:90:29: error: type 'SecurityError' has no member 'invalidInput'\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n 89 |       else {\n 90 |         throw SecurityError.invalidInput(\"Missing or invalid input data for hashing\")\n    |                             `- error: type 'SecurityError' has no member 'invalidInput'\n 91 |       }\n 92 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:94:56: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 92 | \n 93 |       // Determine hash algorithm to use\n 94 |       let hashAlgorithm=HashAlgorithm(rawValue: config.algorithm) ?? HashAlgorithm.sha256\n    |                                                        `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 95 | \n 96 |       // Perform the hashing operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:97:50: error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n 95 | \n 96 |       // Perform the hashing operation\n 97 |       let hashResult=try await cryptoService.hash(inputData, algorithm: hashAlgorithm.rawValue)\n    |                                                  `- error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n 98 | \n 99 |       // Calculate duration for performance metrics\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:107:11: error: missing argument for parameter 'source' in call\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n107 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n108 |       )\n109 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:104:75: error: value of type 'LogMetadata' has no member 'merging'\n102 |       // Log successful operation\n103 |       await logger.info(\n104 |         \"Completed hashing operation successfully\", metadata: logMetadata.merging([\n    |                                                                           `- error: value of type 'LogMetadata' has no member 'merging'\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:105:25: error: extra arguments at positions #2, #3 in call\n103 |       await logger.info(\n104 |         \"Completed hashing operation successfully\", metadata: logMetadata.merging([\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n    |                         `- error: extra arguments at positions #2, #3 in call\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n107 |         ])\n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:31: error: extra arguments at positions #1, #2, #3, #4 in call\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2, #3, #4 in call\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:126:11: error: missing argument for parameter 'source' in call\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n125 |           \"error\": error.localizedDescription\n126 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n127 |       )\n128 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:123:107: error: value of type 'LogMetadata' has no member 'merging'\n121 | \n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n    |                                                                                                           `- error: value of type 'LogMetadata' has no member 'merging'\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n125 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:31: error: extra arguments at positions #1, #2, #3, #4 in call\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2, #3, #4 in call\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:118:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n116 |       )\n117 | \n118 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n119 |       // Calculate duration even for failed operations\n120 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:163:122: error: extra argument 'source' in call\n161 |     ]\n162 | \n163 |     await logger.info(\"Starting direct hash operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                          `- error: extra argument 'source' in call\n164 | \n165 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:163:67: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n161 |     ]\n162 | \n163 |     await logger.info(\"Starting direct hash operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                   `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n164 | \n165 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:50: error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                  `- error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:51: error: cannot convert value of type 'SendableCryptoMaterial' to expected argument type 'String'\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                   `- error: cannot convert value of type 'SendableCryptoMaterial' to expected argument type 'String'\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:78: error: cannot convert value of type 'String' to expected argument type 'HashingOptions'\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                                              `- error: cannot convert value of type 'String' to expected argument type 'HashingOptions'\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:170: error: missing argument for parameter 'source' in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                                                                                                          `- error: missing argument for parameter 'source' in call\n173 |       )\n174 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:66: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                  `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n173 |       )\n174 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:169: error: missing argument for parameter 'uniquingKeysWith' in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                                                                                                         `- error: missing argument for parameter 'uniquingKeysWith' in call\n173 |       )\n174 | \n\nSwift.Dictionary.merging:2:36: note: 'merging(_:uniquingKeysWith:)' declared here\n1 | generic struct Dictionary {\n2 | @inlinable public __consuming func merging(_ other: __owned [Key : Value], uniquingKeysWith combine: (Value, Value) throws -\u003e Value) rethrows -\u003e [Key : Value]}\n  |                                    `- note: 'merging(_:uniquingKeysWith:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:89: error: extra arguments at positions #2, #3 in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                         `- error: extra arguments at positions #2, #3 in call\n173 |       )\n174 | \n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:182:11: error: missing argument for parameter 'source' in call\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n182 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n183 |       )\n184 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:179:111: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n177 |       // Log error\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n    |                                                                                                               `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:182:10: error: missing argument for parameter 'uniquingKeysWith' in call\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n182 |         ])\n    |          `- error: missing argument for parameter 'uniquingKeysWith' in call\n183 |       )\n184 | \n\nSwift.Dictionary.merging:2:36: note: 'merging(_:uniquingKeysWith:)' declared here\n1 | generic struct Dictionary {\n2 | @inlinable public __consuming func merging(_ other: __owned [Key : Value], uniquingKeysWith combine: (Value, Value) throws -\u003e Value) rethrows -\u003e [Key : Value]}\n  |                                    `- note: 'merging(_:uniquingKeysWith:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:205:13: error: type 'CoreSecurityError' has no member 'general'\n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n206 |   }\n207 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:209:13: error: type 'CoreSecurityError' has no member 'general'\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n210 |   }\n211 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:213:13: error: type 'CoreSecurityError' has no member 'general'\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n214 |   }\n215 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:15: error: invalid redeclaration of 'notImplemented(reason:)'\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:100:18: error: cannot convert value of type 'String' to expected argument type 'SecurityOperation'\n 98 |     let logMetadata=createOperationMetadata(\n 99 |       operationID: operationID,\n100 |       operation: operation,\n    |                  `- error: cannot convert value of type 'String' to expected argument type 'SecurityOperation'\n101 |       config: config\n102 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:104:125: error: extra argument 'source' in call\n102 |     )\n103 | \n104 |     await logger.info(\"Starting key generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                             `- error: extra argument 'source' in call\n105 | \n106 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:108:26: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n106 |     do {\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n    |                          `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n110 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:108:47: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n106 |     do {\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n    |                                               `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n110 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:109:28: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n    |                            `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n110 | \n111 |       // Use SendableCryptoMaterial instead of SecureBytes\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:109:63: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n    |                                                               `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n110 | \n111 |       // Use SendableCryptoMaterial instead of SecureBytes\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:114:13: error: cannot find 'secureRandomMaterial' in scope\n112 |       // In a production implementation, this would use a secure random generator\n113 |       let keyMaterial: SendableCryptoMaterial=if keySize \u003e 0 {\n114 |         try secureRandomMaterial(byteCount: keySize / 8)\n    |             `- error: cannot find 'secureRandomMaterial' in scope\n115 |       } else {\n116 |         SendableCryptoMaterial.zeros(count: 32) // Default to 256 bits (32 bytes)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:120:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n118 | \n119 |       // Store the key if an identifier is provided\n120 |       if let keyIdentifier=config.options[\"keyIdentifier\"] {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n121 |         let storageResult=await keyManager.secureStorage.storeMaterial(\n122 |           keyMaterial,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:121:44: error: value of type 'any KeyManagementProtocol' has no member 'secureStorage'\n119 |       // Store the key if an identifier is provided\n120 |       if let keyIdentifier=config.options[\"keyIdentifier\"] {\n121 |         let storageResult=await keyManager.secureStorage.storeMaterial(\n    |                                            `- error: value of type 'any KeyManagementProtocol' has no member 'secureStorage'\n122 |           keyMaterial,\n123 |           withIdentifier: keyIdentifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:126:31: error: type 'SecurityError' has no member 'keyStorage'\n124 |         )\n125 |         if case let .failure(error)=storageResult {\n126 |           throw SecurityError.keyStorage(error.description)\n    |                               `- error: type 'SecurityError' has no member 'keyStorage'\n127 |         }\n128 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:134:58: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n132 | \n133 |       // Create success metadata for logging\n134 |       let successMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                          `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n135 |         \"operationId\": operationID,\n136 |         \"operation\": operation,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:142:51: error: extra argument 'source' in call\n140 |       await logger.info(\n141 |         \"Key generation completed successfully\", metadata: successMetadata\n142 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                   `- error: extra argument 'source' in call\n143 | \n144 |       // Return successful result with the generated key metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:141:60: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n139 | \n140 |       await logger.info(\n141 |         \"Key generation completed successfully\", metadata: successMetadata\n    |                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n142 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n143 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:148:19: error: cannot find 'createPrivacyMetadata' in scope\n146 |         status: .success,\n147 |         data: keyMaterial,\n148 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n149 |           \"keySize\": \"\\(keySize)\",\n150 |           \"algorithm\": algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:31: error: extra arguments at positions #1, #2 in call\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:146:18: error: cannot infer contextual base in reference to member 'success'\n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n146 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n147 |         data: keyMaterial,\n148 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:158:56: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n156 | \n157 |       // Create failure metadata for logging\n158 |       let errorMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                        `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n159 |         \"operationId\": operationID,\n160 |         \"operation\": operation,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:165:105: error: missing argument for parameter 'source' in call\n163 |       ]\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                         `- error: missing argument for parameter 'source' in call\n166 |       , source: \\\"SecurityImplementation\\\")\n167 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:165:92: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n163 |       ]\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n166 |       , source: \\\"SecurityImplementation\\\")\n167 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:192:52: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n190 | \n191 |     // Create metadata for logging\n192 |     let logMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                    `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n193 |       \"operationId\": operationID,\n194 |       \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:199:133: error: extra argument 'source' in call\n197 |     ]\n198 | \n199 |     await logger.info(\"Starting random data generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                                     `- error: extra argument 'source' in call\n200 | \n201 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:199:78: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n197 |     ]\n198 | \n199 |     await logger.info(\"Starting random data generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                              `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n200 | \n201 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:204:29: error: type 'SecurityError' has no member 'invalidInput'\n202 |       // Validate parameters\n203 |       if length \u003c= 0 {\n204 |         throw SecurityError.invalidInput(\"Invalid length for random data generation: \\(length)\")\n    |                             `- error: type 'SecurityError' has no member 'invalidInput'\n205 |       }\n206 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:209:30: error: cannot find 'secureRandomMaterial' in scope\n207 |       // Use SendableCryptoMaterial instead of SecureBytes\n208 |       // In a production implementation, this would use a secure random generator\n209 |       let randomMaterial=try secureRandomMaterial(byteCount: length)\n    |                              `- error: cannot find 'secureRandomMaterial' in scope\n210 | \n211 |       // Calculate duration for performance metrics\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:215:58: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n213 | \n214 |       // Create success metadata for logging\n215 |       let successMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                          `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n216 |         \"operationId\": operationID,\n217 |         \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:224:51: error: extra argument 'source' in call\n222 |       await logger.info(\n223 |         \"Random data generation completed successfully\", metadata: successMetadata\n224 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                   `- error: extra argument 'source' in call\n225 | \n226 |       // Return successful result with the generated random data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:223:68: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n221 | \n222 |       await logger.info(\n223 |         \"Random data generation completed successfully\", metadata: successMetadata\n    |                                                                    `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n224 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n225 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:230:19: error: cannot find 'createPrivacyMetadata' in scope\n228 |         status: .success,\n229 |         data: randomMaterial,\n230 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n231 |           \"length\": \"\\(length)\"\n232 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:31: error: extra arguments at positions #1, #2 in call\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:228:18: error: cannot infer contextual base in reference to member 'success'\n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n228 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n229 |         data: randomMaterial,\n230 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:239:56: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n237 | \n238 |       // Create failure metadata for logging\n239 |       let errorMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                        `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n240 |         \"operationId\": operationID,\n241 |         \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:246:113: error: missing argument for parameter 'source' in call\n244 |       ]\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                                 `- error: missing argument for parameter 'source' in call\n247 |       , source: \\\"SecurityImplementation\\\")\n248 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:246:100: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n244 |       ]\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                    `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n247 |       , source: \\\"SecurityImplementation\\\")\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:265:13: error: type 'CoreSecurityError' has no member 'general'\n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n266 |   }\n267 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:269:13: error: type 'CoreSecurityError' has no member 'general'\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n270 |   }\n271 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:273:13: error: type 'CoreSecurityError' has no member 'general'\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n274 |   }\n275 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:29: error: cannot find type 'createPrivacyMetadata' in scope\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                             `- error: cannot find type 'createPrivacyMetadata' in scope\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:15: error: invalid redeclaration of 'notImplemented(reason:)'\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:95:22: error: extra arguments at positions #4, #5 in call\n 93 |     )\n 94 | \n 95 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n 96 |       \"Starting secure storage operation\", metadata: logMetadata,\n 97 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:96:54: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 94 | \n 95 |     await logger.info(\n 96 |       \"Starting secure storage operation\", metadata: logMetadata,\n    |                                                      `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 97 |       source: \"SecureStorageService\"\n 98 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:102:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n100 |     do {\n101 |       // Extract required parameters from configuration\n102 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n103 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n104 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:106:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n104 |       }\n105 | \n106 |       guard let dataToStore=config.options[\"data\"].flatMap({ Data(base64Encoded: $0) })\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n107 |       else {\n108 |         throw SecureStorageError.invalidInput(\"Missing or invalid data for storage\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:117:52: error: extra arguments at positions #1, #2 in call\n115 | \n116 |       // Encrypt the data before storage\n117 |       let encryptResult=await cryptoService.encrypt(data: dataToStore, using: storageKey)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n118 | \n119 |       switch encryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:117:52: error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n115 | \n116 |       // Encrypt the data before storage\n117 |       let encryptResult=await cryptoService.encrypt(data: dataToStore, using: storageKey)\n    |                                                    `- error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n118 | \n119 |       switch encryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:130:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:130:45: error: type 'String?' has no member 'string'\n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                                             `- error: type 'String?' has no member 'string'\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:131:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:131:43: error: type 'String?' has no member 'string'\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                           `- error: type 'String?' has no member 'string'\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:132:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:132:51: error: type 'String?' has no member 'string'\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                                   `- error: type 'String?' has no member 'string'\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:133:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n134 | \n135 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:133:44: error: type 'String?' has no member 'string'\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                            `- error: type 'String?' has no member 'string'\n134 | \n135 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:135:28: error: extra arguments at positions #4, #5 in call\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n135 |           await logger.info(\n    |                            `- error: extra arguments at positions #4, #5 in call\n136 |             \"Secure storage operation completed successfully\", metadata: successMetadata,\n137 |             source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:136:74: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n134 | \n135 |           await logger.info(\n136 |             \"Secure storage operation completed successfully\", metadata: successMetadata,\n    |                                                                          `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n137 |             source: \"SecureStorageService\"\n138 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:143:23: error: cannot find 'createPrivacyMetadata' in scope\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                       `- error: cannot find 'createPrivacyMetadata' in scope\n144 |               \"storageIdentifier\": identifier,\n145 |               \"storedBytes\": \"\\(storedBytes)\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:141:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n139 | \n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:142:22: error: extra argument 'status' in call\n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n    |                      `- error: extra argument 'status' in call\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n144 |               \"storageIdentifier\": identifier,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:141:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n139 | \n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:142:22: error: cannot infer contextual base in reference to member 'success'\n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n    |                      `- error: cannot infer contextual base in reference to member 'success'\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n144 |               \"storageIdentifier\": identifier,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:158:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:158:39: error: type 'String?' has no member 'string'\n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:159:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:159:37: error: type 'String?' has no member 'string'\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:160:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:160:38: error: type 'String?' has no member 'string'\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:161:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n162 | \n163 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:161:37: error: type 'String?' has no member 'string'\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n162 | \n163 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:165:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n163 |       await logger.error(\n164 |         \"Secure storage operation failed: \\(error.localizedDescription)\",\n165 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n166 |         source: \"SecureStorageService\"\n167 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:173:19: error: cannot find 'createPrivacyMetadata' in scope\n171 |         status: .failure,\n172 |         error: error,\n173 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n174 |           \"errorMessage\": error.localizedDescription\n175 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:31: error: extra arguments at positions #1, #2 in call\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:171:18: error: cannot infer contextual base in reference to member 'failure'\n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n171 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n172 |         error: error,\n173 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:152:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n150 |           throw SecureStorageError.encryptionError(\"Failed to encrypt data: \\(error)\")\n151 |       }\n152 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n153 |       // Calculate duration before failure\n154 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:198:22: error: extra arguments at positions #4, #5 in call\n196 |     )\n197 | \n198 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n199 |       \"Starting secure retrieval operation\", metadata: logMetadata,\n200 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:199:56: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n197 | \n198 |     await logger.info(\n199 |       \"Starting secure retrieval operation\", metadata: logMetadata,\n    |                                                        `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n200 |       source: \"SecureStorageService\"\n201 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:205:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n203 |     do {\n204 |       // Extract required parameters from configuration\n205 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n206 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n207 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:209:35: error: value of type 'SecurityConfigOptions?' has no subscripts\n207 |       }\n208 | \n209 |       guard let key=config.options[\"key\"].flatMap({ Data(base64Encoded: $0) }) else {\n    |                                   `- error: value of type 'SecurityConfigOptions?' has no subscripts\n210 |         throw SecureStorageError.invalidInput(\"Missing decryption key\")\n211 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:235:52: error: extra arguments at positions #1, #2 in call\n233 | \n234 |       // Decrypt the data\n235 |       let decryptResult=await cryptoService.decrypt(data: encryptedData, using: key)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n236 | \n237 |       switch decryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:235:52: error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n233 | \n234 |       // Decrypt the data\n235 |       let decryptResult=await cryptoService.decrypt(data: encryptedData, using: key)\n    |                                                    `- error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n236 | \n237 |       switch decryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:244:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:244:45: error: type 'String?' has no member 'string'\n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                                             `- error: type 'String?' has no member 'string'\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:245:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:245:43: error: type 'String?' has no member 'string'\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                           `- error: type 'String?' has no member 'string'\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:246:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:246:51: error: type 'String?' has no member 'string'\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                                   `- error: type 'String?' has no member 'string'\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:247:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n248 | \n249 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:247:44: error: type 'String?' has no member 'string'\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                            `- error: type 'String?' has no member 'string'\n248 | \n249 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:249:28: error: extra arguments at positions #4, #5 in call\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n249 |           await logger.info(\n    |                            `- error: extra arguments at positions #4, #5 in call\n250 |             \"Secure retrieval operation completed successfully\", metadata: successMetadata,\n251 |             source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:250:76: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n248 | \n249 |           await logger.info(\n250 |             \"Secure retrieval operation completed successfully\", metadata: successMetadata,\n    |                                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n251 |             source: \"SecureStorageService\"\n252 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:258:23: error: cannot find 'createPrivacyMetadata' in scope\n256 |             status: .success,\n257 |             data: decryptedData,\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                       `- error: cannot find 'createPrivacyMetadata' in scope\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:35: error: extra arguments at positions #1, #2 in call\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:256:22: error: cannot infer contextual base in reference to member 'success'\n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n256 |             status: .success,\n    |                      `- error: cannot infer contextual base in reference to member 'success'\n257 |             data: decryptedData,\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:273:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:273:39: error: type 'String?' has no member 'string'\n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:274:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:274:37: error: type 'String?' has no member 'string'\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:275:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:275:38: error: type 'String?' has no member 'string'\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:276:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:276:37: error: type 'String?' has no member 'string'\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:277:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n278 | \n279 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:277:40: error: type 'String?' has no member 'string'\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                                        `- error: type 'String?' has no member 'string'\n278 | \n279 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:281:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n279 |       await logger.error(\n280 |         \"Secure retrieval operation failed: \\(error.localizedDescription)\",\n281 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n282 |         source: \"SecureStorageService\"\n283 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:289:19: error: cannot find 'createPrivacyMetadata' in scope\n287 |         status: .failure,\n288 |         error: error,\n289 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n290 |           \"errorMessage\": error.localizedDescription\n291 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:31: error: extra arguments at positions #1, #2 in call\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:287:18: error: cannot infer contextual base in reference to member 'failure'\n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n287 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n288 |         error: error,\n289 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:267:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n265 |           throw SecureStorageError.decryptionError(\"Failed to decrypt data: \\(error)\")\n266 |       }\n267 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n268 |       // Calculate duration before failure\n269 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:314:22: error: extra arguments at positions #4, #5 in call\n312 |     )\n313 | \n314 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n315 |       \"Starting secure deletion operation\", metadata: logMetadata,\n316 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:315:55: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n313 | \n314 |     await logger.info(\n315 |       \"Starting secure deletion operation\", metadata: logMetadata,\n    |                                                       `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n316 |       source: \"SecureStorageService\"\n317 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:321:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n319 |     do {\n320 |       // Extract required parameters from configuration\n321 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n322 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n323 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:339:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:339:41: error: type 'String?' has no member 'string'\n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n    |                                         `- error: type 'String?' has no member 'string'\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:340:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:340:39: error: type 'String?' has no member 'string'\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                       `- error: type 'String?' has no member 'string'\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:341:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:341:47: error: type 'String?' has no member 'string'\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                               `- error: type 'String?' has no member 'string'\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:342:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n343 | \n344 |       await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:342:40: error: type 'String?' has no member 'string'\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                        `- error: type 'String?' has no member 'string'\n343 | \n344 |       await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:344:24: error: extra arguments at positions #4, #5 in call\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n344 |       await logger.info(\n    |                        `- error: extra arguments at positions #4, #5 in call\n345 |         \"Secure deletion operation completed successfully\", metadata: successMetadata,\n346 |         source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:345:71: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n343 | \n344 |       await logger.info(\n345 |         \"Secure deletion operation completed successfully\", metadata: successMetadata,\n    |                                                                       `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n346 |         source: \"SecureStorageService\"\n347 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:352:19: error: cannot find 'createPrivacyMetadata' in scope\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n353 |           \"storageIdentifier\": identifier\n354 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:350:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n348 | \n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:351:18: error: extra argument 'status' in call\n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n    |                  `- error: extra argument 'status' in call\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n353 |           \"storageIdentifier\": identifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:350:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n348 | \n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:351:18: error: cannot infer contextual base in reference to member 'success'\n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n353 |           \"storageIdentifier\": identifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:362:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:362:39: error: type 'String?' has no member 'string'\n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:363:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:363:37: error: type 'String?' has no member 'string'\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:364:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:364:38: error: type 'String?' has no member 'string'\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:365:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n367 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:365:37: error: type 'String?' has no member 'string'\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n367 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:366:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n367 | \n368 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:366:40: error: type 'String?' has no member 'string'\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                                        `- error: type 'String?' has no member 'string'\n367 | \n368 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:370:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n368 |       await logger.error(\n369 |         \"Secure deletion operation failed: \\(error.localizedDescription)\",\n370 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n371 |         source: \"SecureStorageService\"\n372 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:378:19: error: cannot find 'createPrivacyMetadata' in scope\n376 |         status: .failure,\n377 |         error: error,\n378 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n379 |           \"errorMessage\": error.localizedDescription\n380 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:31: error: extra arguments at positions #1, #2 in call\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:376:18: error: cannot infer contextual base in reference to member 'failure'\n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n376 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n377 |         error: error,\n378 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:356:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n354 |         ])\n355 |       )\n356 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n357 |       // Calculate duration before failure\n358 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:467:13: error: type 'CoreSecurityError' has no member 'general'\n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n468 |   }\n469 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:471:13: error: type 'CoreSecurityError' has no member 'general'\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n472 |   }\n473 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:475:13: error: type 'CoreSecurityError' has no member 'general'\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n476 |   }\n477 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:78:12: error: cannot find 'createPrivacyMetadata' in scope\n 76 |     config: SecurityConfigDTO\n 77 |   ) -\u003e LoggingInterfaces.LogMetadata {\n 78 |     return createPrivacyMetadata([\n    |            `- error: cannot find 'createPrivacyMetadata' in scope\n 79 |       \"operationId\": operationID,\n 80 |       \"operation\": String(describing: operation),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:81:27: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 79 |       \"operationId\": operationID,\n 80 |       \"operation\": String(describing: operation),\n 81 |       \"algorithm\": config.algorithm,\n    |                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 82 |       \"timestamp\": \"\\(Date())\"\n 83 |     ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:91:13: error: type 'CoreSecurityError' has no member 'general'\n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 92 |   }\n 93 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:95:13: error: type 'CoreSecurityError' has no member 'general'\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 96 |   }\n 97 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:99:13: error: type 'CoreSecurityError' has no member 'general'\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n100 |   }\n101 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:43:37: error: cannot find type 'KeyStorageManager' in scope\n 41 |    The key manager used for key storage and retrieval\n 42 |    */\n 43 |   private let keyManagementService: KeyStorageManager\n    |                                     `- error: cannot find type 'KeyStorageManager' in scope\n 44 | \n 45 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:32:13: error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n 30 |  - Handle signature-specific errors\n 31 |  */\n 32 | final class SignatureService: SecurityServiceBase {\n    |             |- error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n    |             `- note: add stubs for conformance\n 33 |   // MARK: - Properties\n 34 | \n    :\n 46 |    The logger instance for recording operation details\n 47 |    */\n 48 |   let logger: PrivacyAwareLoggingProtocol\n    |       `- note: candidate has non-matching type 'any PrivacyAwareLoggingProtocol'\n 49 | \n 50 |   // MARK: - Initialisation\n    :\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: candidate has non-matching type '(logger: any PrivacyAwareLoggingProtocol)'\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:42:3: note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 32 |    The logger instance for recording operation details\n 33 |    */\n 34 |   var logger: LoggingInterfaces.LoggingProtocol { get }\n    |       `- note: protocol requires property 'logger' with type 'any LoggingProtocol'\n 35 | \n 36 |   /**\n    :\n 40 |        - logger: The logging service to use for operation logging\n 41 |    */\n 42 |   init(logger: LoggingInterfaces.LoggingProtocol)\n    |   `- note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 43 | \n 44 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:15: error: invalid redeclaration of 'notImplemented(reason:)'\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:99:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 97 |     // Create metadata for logging\n 98 |     var logMetadata=PrivacyMetadata()\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:100:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 98 |     var logMetadata=PrivacyMetadata()\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n102 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:101:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:101:59: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                                                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:103:118: error: extra argument 'source' in call\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                      `- error: extra argument 'source' in call\n104 | \n105 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:107:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n105 |     do {\n106 |       // Extract required parameters from configuration\n107 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n108 |         throw SignatureError.invalidInput(\"Missing input data for signing\")\n109 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:107:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n105 |     do {\n106 |       // Extract required parameters from configuration\n107 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n108 |         throw SignatureError.invalidInput(\"Missing input data for signing\")\n109 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:116:36: error: value of type 'SecurityConfigOptions?' has no subscripts\n114 | \n115 |         // If keyID is provided, retrieve the key from key management\n116 |         if let keyID=config.options[\"keyId\"] {\n    |                                    `- error: value of type 'SecurityConfigOptions?' has no subscripts\n117 |           // Retrieve the key from the key management service\n118 |           let keyResult=await keyManagementService.secureStorage\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:127:35: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n125 |                 data: inputData,\n126 |                 key: keyMaterial,\n127 |                 algorithm: config.algorithm\n    |                                   `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n128 |               )\n129 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:136:48: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n134 |         }\n135 |         // If direct key is provided, use it\n136 |         else if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n137 |           // Use encrypt as a substitute for signature generation\n138 |           signature=try await performSignature(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:136:73: error: value of type 'SecurityConfigOptions?' has no subscripts\n134 |         }\n135 |         // If direct key is provided, use it\n136 |         else if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                                         `- error: value of type 'SecurityConfigOptions?' has no subscripts\n137 |           // Use encrypt as a substitute for signature generation\n138 |           signature=try await performSignature(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:141:31: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n139 |             data: inputData,\n140 |             key: key,\n141 |             algorithm: config.algorithm\n    |                               `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n142 |           )\n143 |         }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:154:25: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n152 |         // Create success metadata for logging\n153 |         var successMetadata=logMetadata\n154 |         successMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n155 |         successMetadata.setPublic(key: \"signatureSize\", value: String(signature.count))\n156 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:155:25: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n153 |         var successMetadata=logMetadata\n154 |         successMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n155 |         successMetadata.setPublic(key: \"signatureSize\", value: String(signature.count))\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n156 | \n157 |         await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:159:53: error: extra argument 'source' in call\n157 |         await logger.info(\n158 |           \"Signing operation completed successfully\", metadata: successMetadata\n159 |         , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                     `- error: extra argument 'source' in call\n160 | \n161 |         // Return successful result with signature\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:165:21: error: cannot find 'createPrivacyMetadata' in scope\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n    |                     `- error: cannot find 'createPrivacyMetadata' in scope\n166 |             \"algorithm\": config.algorithm\n167 |           ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:16: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:33: error: extra arguments at positions #1, #2 in call\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                                 `- error: extra arguments at positions #1, #2 in call\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:33: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:163:20: error: cannot infer contextual base in reference to member 'success'\n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n163 |           status: .success,\n    |                    `- error: cannot infer contextual base in reference to member 'success'\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:164:27: error: value of type 'SendableCryptoMaterial' has no member 'toBase64'\n162 |         return SecurityResultDTO(\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n    |                           `- error: value of type 'SendableCryptoMaterial' has no member 'toBase64'\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n166 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:166:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n166 |             \"algorithm\": config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n167 |           ])\n168 |         )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:175:23: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n173 |         // Create failure metadata for logging\n174 |         var errorMetadata=logMetadata\n175 |         errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                       `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n177 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:176:23: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n174 |         var errorMetadata=logMetadata\n175 |         errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                       `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:178:110: error: missing argument for parameter 'source' in call\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                              `- error: missing argument for parameter 'source' in call\n179 |         , source: \\\"SecurityImplementation\\\")\n180 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:196:21: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n194 |       // Create failure metadata for logging\n195 |       var errorMetadata=logMetadata\n196 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n198 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:197:21: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n195 |       var errorMetadata=logMetadata\n196 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:199:108: error: missing argument for parameter 'source' in call\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                            `- error: missing argument for parameter 'source' in call\n200 |       , source: \\\"SecurityImplementation\\\")\n201 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:169:9: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n167 |           ])\n168 |         )\n169 |       } catch {\n    |         `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n170 |         // Calculate duration before failure\n171 |         let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:226:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n224 |     // Create metadata for logging\n225 |     var logMetadata=PrivacyMetadata()\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:227:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n225 |     var logMetadata=PrivacyMetadata()\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n229 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:228:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:228:59: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                                                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:230:133: error: extra argument 'source' in call\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                                     `- error: extra argument 'source' in call\n231 | \n232 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:234:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n232 |     do {\n233 |       // Extract required parameters from configuration\n234 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n235 |         throw SignatureError.invalidInput(\"Missing input data for verification\")\n236 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:234:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n232 |     do {\n233 |       // Extract required parameters from configuration\n234 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n235 |         throw SignatureError.invalidInput(\"Missing input data for verification\")\n236 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:238:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n236 |       }\n237 | \n238 |       guard let signature=SendableCryptoMaterial.fromBase64(config.options[\"signature\"] ?? \"\")\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n239 |       else {\n240 |         throw SignatureError.invalidInput(\"Missing signature to verify\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:238:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n236 |       }\n237 | \n238 |       guard let signature=SendableCryptoMaterial.fromBase64(config.options[\"signature\"] ?? \"\")\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n239 |       else {\n240 |         throw SignatureError.invalidInput(\"Missing signature to verify\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:244:41: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n242 | \n243 |       // Check if key is provided directly in the options\n244 |       if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                         `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n245 |         // Try to verify the signature using the provided key\n246 |         let isValid=try await performVerification(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:244:66: error: value of type 'SecurityConfigOptions?' has no subscripts\n242 | \n243 |       // Check if key is provided directly in the options\n244 |       if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                                  `- error: value of type 'SecurityConfigOptions?' has no subscripts\n245 |         // Try to verify the signature using the provided key\n246 |         let isValid=try await performVerification(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:250:29: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n248 |           signature: signature,\n249 |           key: key,\n250 |           algorithm: config.algorithm\n    |                             `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n251 |         )\n252 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:258:30: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n256 |         // Create result metadata\n257 |         var verificationMetadata=logMetadata\n258 |         verificationMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                              `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n259 |         verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n260 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:259:30: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n257 |         var verificationMetadata=logMetadata\n258 |         verificationMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n259 |         verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n    |                              `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n260 | \n261 |         if isValid {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:264:55: error: extra argument 'source' in call\n262 |           await logger.info(\n263 |             \"Signature verification completed: Valid signature\", metadata: verificationMetadata\n264 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                       `- error: extra argument 'source' in call\n265 |         } else {\n266 |           await logger.warning(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:268:55: error: extra argument 'source' in call\n266 |           await logger.warning(\n267 |             \"Signature verification completed: Invalid signature\", metadata: verificationMetadata\n268 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                       `- error: extra argument 'source' in call\n269 |         }\n270 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:274:21: error: cannot find 'createPrivacyMetadata' in scope\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n    |                     `- error: cannot find 'createPrivacyMetadata' in scope\n275 |             \"algorithm\": config.algorithm\n276 |           ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:272:16: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n270 | \n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n    |                `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:273:20: error: extra argument 'status' in call\n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n    |                    `- error: extra argument 'status' in call\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:272:33: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n270 | \n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n    |                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:273:20: error: cannot infer contextual base in reference to member 'success'\n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n    |                    `- error: cannot infer contextual base in reference to member 'success'\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:275:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n276 |           ])\n277 |         )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:282:39: error: value of type 'SecurityConfigOptions?' has no subscripts\n280 | \n281 |         // Attempt to get key ID from config\n282 |         guard let keyID=config.options[\"keyId\"] else {\n    |                                       `- error: value of type 'SecurityConfigOptions?' has no subscripts\n283 |           throw SignatureError.invalidInput(\"Neither key nor keyId provided for verification\")\n284 |         }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:297:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n295 |               signature: signature,\n296 |               key: keyMaterial,\n297 |               algorithm: config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n298 |             )\n299 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:305:34: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n303 |             // Create result metadata\n304 |             var verificationMetadata=logMetadata\n305 |             verificationMetadata.setPublic(\n    |                                  `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n306 |               key: \"duration\",\n307 |               value: String(format: \"%.3f s\", duration)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:309:34: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n307 |               value: String(format: \"%.3f s\", duration)\n308 |             )\n309 |             verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n    |                                  `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n310 | \n311 |             if isValid {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:314:59: error: extra argument 'source' in call\n312 |               await logger.info(\n313 |                 \"Signature verification completed: Valid signature\", metadata: verificationMetadata\n314 |               , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                           `- error: extra argument 'source' in call\n315 |             } else {\n316 |               await logger.warning(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:318:59: error: extra argument 'source' in call\n316 |               await logger.warning(\n317 |                 \"Signature verification completed: Invalid signature\", metadata: verificationMetadata\n318 |               , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                           `- error: extra argument 'source' in call\n319 |             }\n320 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:324:25: error: cannot find 'createPrivacyMetadata' in scope\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n    |                         `- error: cannot find 'createPrivacyMetadata' in scope\n325 |                 \"algorithm\": config.algorithm\n326 |               ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:322:20: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n320 | \n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n    |                    `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:323:24: error: extra argument 'status' in call\n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n    |                        `- error: extra argument 'status' in call\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:322:37: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n320 | \n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n    |                                     `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:323:24: error: cannot infer contextual base in reference to member 'success'\n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n    |                        `- error: cannot infer contextual base in reference to member 'success'\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:325:37: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n    |                                     `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n326 |               ])\n327 |             )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:339:21: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n337 |       // Create failure metadata for logging\n338 |       var errorMetadata=logMetadata\n339 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n341 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:340:21: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n338 |       var errorMetadata=logMetadata\n339 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:342:123: error: missing argument for parameter 'source' in call\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                                           `- error: missing argument for parameter 'source' in call\n343 |       , source: \\\"SecurityImplementation\\\")\n344 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:403:27: error: incorrect argument label in call (have 'base64Encoded:', expected 'hexString:')\n401 |     // Implement secure random material generation\n402 |     // For now, this is a placeholder that would be replaced with actual implementation\n403 |     SendableCryptoMaterial(base64Encoded: \"random-material\")\n    |                           `- error: incorrect argument label in call (have 'base64Encoded:', expected 'hexString:')\n404 |   }\n405 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:418:13: error: type 'CoreSecurityError' has no member 'general'\n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n419 |   }\n420 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:422:13: error: type 'CoreSecurityError' has no member 'general'\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n423 |   }\n424 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:426:13: error: type 'CoreSecurityError' has no member 'general'\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n427 |   }\n428 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:16:22: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n14 |   /// - Parameter reason: The reason for the error\n15 |   /// - Returns: A CoreSecurityError with the appropriate error code\n16 |   public static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n17 |     return .invalidInput(\"Invalid verification method: \\(reason)\")\n18 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:23:22: error: invalid redeclaration of 'verificationFailed(reason:)'\n21 |   /// - Parameter reason: The reason for the error\n22 |   /// - Returns: A CoreSecurityError with the appropriate error code\n23 |   public static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'verificationFailed(reason:)'\n24 |     return .authenticationFailed(\"Verification failed: \\(reason)\")\n25 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:30:22: error: invalid redeclaration of 'notImplemented(reason:)'\n28 |   /// - Parameter reason: The reason for the error\n29 |   /// - Returns: A CoreSecurityError with the appropriate error code\n30 |   public static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'notImplemented(reason:)'\n31 |     return .unsupportedOperation(\"Not implemented: \\(reason)\")\n32 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Logging.swift:38:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 36 |  according to the Alpha Dot Five architecture principles.\n 37 |  */\n 38 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 39 |   /**\n 40 |    Logs the start of a security operation with privacy-aware metadata.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  * Batch encryption and decryption for collections of data\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Encrypts data and then stores it securely.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:15: error: invalid redeclaration of 'notImplemented(reason:)'\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:428:13: error: type 'CoreSecurityError' has no member 'general'\n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n429 |   }\n430 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:432:13: error: type 'CoreSecurityError' has no member 'general'\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n433 |   }\n434 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:436:13: error: type 'CoreSecurityError' has no member 'general'\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n437 |   }\n438 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  - Common validation logic is centralised\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Validates configuration for encryption operations.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:205:13: error: type 'CoreSecurityError' has no member 'general'\n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n206 |   }\n207 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:209:13: error: type 'CoreSecurityError' has no member 'general'\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n210 |   }\n211 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:213:13: error: type 'CoreSecurityError' has no member 'general'\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n214 |   }\n215 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:15: error: invalid redeclaration of 'notImplemented(reason:)'\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:52:8: error: type 'CryptoServiceFactory' has no member 'createStandardCryptoService'\n 50 |     // Create standard crypto service\n 51 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 52 |       .createStandardCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createStandardCryptoService'\n 53 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n 54 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:53:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n 51 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 52 |       .createStandardCryptoService()\n 53 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n 54 | \n 55 |     // Use the provided logger or create a default one\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:61:23: error: extra argument 'environment' in call\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n 62 |       )\n 63 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:60:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n 58 |       actualLogger=logger\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n 61 |         environment: .development)\n 62 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:61:23: error: cannot infer contextual base in reference to member 'development'\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n 62 |       )\n 63 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:69:27: error: missing argument for parameter 'secureLogger' in call\n 67 |     let securityService=SecurityServiceActor(\n 68 |       cryptoService: cryptoService,\n 69 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n 70 |     )\n 71 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:96:8: error: type 'CryptoServiceFactory' has no member 'createHighSecurityCryptoService'\n 94 |     // Create high-security crypto service\n 95 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 96 |       .createHighSecurityCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createHighSecurityCryptoService'\n 97 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n 98 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:97:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n 95 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 96 |       .createHighSecurityCryptoService()\n 97 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n 98 | \n 99 |     // Use the provided logger or create a default one with debug level logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:105:23: error: extra argument 'environment' in call\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n106 |       )\n107 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:104:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n102 |       actualLogger=logger\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n105 |         environment: .development)\n106 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:105:23: error: cannot infer contextual base in reference to member 'development'\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n106 |       )\n107 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:113:27: error: missing argument for parameter 'secureLogger' in call\n111 |     let securityService=SecurityServiceActor(\n112 |       cryptoService: cryptoService,\n113 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n114 |     )\n115 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:141:8: error: type 'CryptoServiceFactory' has no member 'createMaxSecurityCryptoService'\n139 |     // Create max-security crypto service\n140 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n141 |       .createMaxSecurityCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createMaxSecurityCryptoService'\n142 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n143 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:142:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n140 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n141 |       .createMaxSecurityCryptoService()\n142 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n143 | \n144 |     // Use the provided logger or create a default one with debug level logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:150:23: error: extra argument 'environment' in call\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n151 |       )\n152 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:149:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n147 |       actualLogger=logger\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n150 |         environment: .development)\n151 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:150:23: error: cannot infer contextual base in reference to member 'development'\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n151 |       )\n152 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:158:27: error: missing argument for parameter 'secureLogger' in call\n156 |     let securityService=SecurityServiceActor(\n157 |       cryptoService: cryptoService,\n158 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n159 |     )\n160 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:172:13: error: type 'CoreSecurityError' has no member 'general'\n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n173 |   }\n174 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:176:13: error: type 'CoreSecurityError' has no member 'general'\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n177 |   }\n178 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:180:13: error: type 'CoreSecurityError' has no member 'general'\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n181 |   }\n182 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:92:13: error: type 'CoreSecurityError' has no member 'general'\n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 93 |   }\n 94 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:96:13: error: type 'CoreSecurityError' has no member 'general'\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 97 |   }\n 98 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:100:13: error: type 'CoreSecurityError' has no member 'general'\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n101 |   }\n102 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               `- warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:30:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 28 |   /// - Returns: The generated random integer\n 29 |   /// - Throws: SecurityError if random generation fails\n 30 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 31 | \n 32 |   /// Generates a cryptographically secure random integer within the specified closed range\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               `- warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:36:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 34 |   /// - Returns: The generated random integer\n 35 |   /// - Throws: SecurityError if random generation fails\n 36 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 37 | \n 38 |   /// Generates a cryptographically secure random double between 0.0 and 1.0\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:15: error: invalid redeclaration of 'notImplemented(reason:)'\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:53:27: error: type 'SecurityError' has no member 'alreadyInitialized'\n 51 |   public func initialise(entropySource: EntropySource) async throws {\n 52 |     guard !isInitialised else {\n 53 |       throw SecurityError.alreadyInitialized(\"Random data service is already initialised\")\n    |                           `- error: type 'SecurityError' has no member 'alreadyInitialized'\n 54 |     }\n 55 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:42: error: missing argument label 'entries:' in call\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:60:69: error: cannot infer contextual base in reference to member 'public'\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n    |                                                                     `- error: cannot infer contextual base in reference to member 'public'\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n 62 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:61:71: error: cannot infer contextual base in reference to member 'public'\n 59 |       metadata: LogMetadataDTOCollection([\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n    |                                                                       `- error: cannot infer contextual base in reference to member 'public'\n 62 |       ]),\n 63 |       source: \"RandomDataServiceActor.initialise\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:78:31: error: type 'SecurityError' has no member 'initialisationFailed'\n 76 | \n 77 |         guard result == errSecSuccess else {\n 78 |           throw SecurityError.initialisationFailed(\n    |                               `- error: type 'SecurityError' has no member 'initialisationFailed'\n 79 |             reason: \"Hardware entropy source is not available\"\n 80 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:85:31: error: type 'SecurityError' has no member 'initialisationFailed'\n 83 |         // Ensure the bytes are actually random\n 84 |         guard bytes != testBytes else {\n 85 |           throw SecurityError.initialisationFailed(\n    |                               `- error: type 'SecurityError' has no member 'initialisationFailed'\n 86 |             reason: \"Entropy source did not produce random data\"\n 87 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:65: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:90: error: missing argument label 'entries:' in call\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                                          `- error: missing argument label 'entries:' in call\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:90: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:100:69: error: cannot infer contextual base in reference to member 'public'\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                     `- error: cannot infer contextual base in reference to member 'public'\n101 |       ]),\n102 |       source: \"RandomDataServiceActor.initialise\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:42: error: missing argument label 'entries:' in call\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:132:53: error: cannot infer contextual base in reference to member 'public'\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n132 |         \"length\": (value: String(length), privacy: .public)\n    |                                                     `- error: cannot infer contextual base in reference to member 'public'\n133 |       ]),\n134 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:142:27: error: type 'SecurityError' has no member 'operationFailed'\n140 | \n141 |     guard result == errSecSuccess else {\n142 |       throw SecurityError.operationFailed(\"SecRandomCopyBytes failed with error \\(result)\")\n    |                           `- error: type 'SecurityError' has no member 'operationFailed'\n143 |     }\n144 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:56: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                        `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:81: error: missing argument label 'entries:' in call\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                                                 `- error: missing argument label 'entries:' in call\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:81: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                                                 `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:148:33: error: extra arguments at positions #2, #3 in call\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                 `- error: extra arguments at positions #2, #3 in call\n149 |       ]),\n150 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\nSwift.String.init:2:19: note: 'init(_:)' declared here\n1 | struct String {\n2 | @inlinable public init\u003cT\u003e(_ value: T) where T : LosslessStringConvertible}\n  |                   `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:148:126: error: cannot infer contextual base in reference to member 'public'\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                              `- error: cannot infer contextual base in reference to member 'public'\n149 |       ]),\n150 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:42: error: missing argument label 'entries:' in call\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:167:68: error: cannot infer contextual base in reference to member 'public'\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n    |                                                                    `- error: cannot infer contextual base in reference to member 'public'\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:168:68: error: cannot infer contextual base in reference to member 'public'\n166 |       metadata: LogMetadataDTOCollection([\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n    |                                                                    `- error: cannot infer contextual base in reference to member 'public'\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n170 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:169:63: error: cannot infer contextual base in reference to member 'public'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n    |                                                               `- error: cannot infer contextual base in reference to member 'public'\n170 |       ]),\n171 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:177:27: error: type 'SecurityError' has no member 'invalidInput'\n175 |     let width=range.upperBound - range.lowerBound\n176 |     guard width \u003e 0 else {\n177 |       throw SecurityError.invalidInput(\"Range width must be greater than zero\")\n    |                           `- error: type 'SecurityError' has no member 'invalidInput'\n178 |     }\n179 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:58: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                          `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:83: error: missing argument label 'entries:' in call\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                                                   `- error: missing argument label 'entries:' in call\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:83: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                                                   `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:198:32: error: extra arguments at positions #2, #3 in call\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                `- error: extra arguments at positions #2, #3 in call\n199 |       ]),\n200 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\nSwift.String.init:2:19: note: 'init(_:)' declared here\n1 | struct String {\n2 | @inlinable public init\u003cT\u003e(_ value: T) where T : LosslessStringConvertible}\n  |                   `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:198:120: error: cannot infer contextual base in reference to member 'public'\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                        `- error: cannot infer contextual base in reference to member 'public'\n199 |       ]),\n200 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:65: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:89: error: extra arguments at positions #2, #3 in call\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                                         `- error: extra arguments at positions #2, #3 in call\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogMetadataDTOCollection.swift:20:10: note: 'init(entries:)' declared here\n 18 |   ///\n 19 |   /// - Parameter entries: The initial metadata entries\n 20 |   public init(entries: [LogMetadataDTO]) {\n    |          `- note: 'init(entries:)' declared here\n 21 |     self.entries=entries\n 22 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:90: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type '[LogMetadataDTO]'\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                                          `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type '[LogMetadataDTO]'\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:57: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                         `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:82: error: missing argument label 'entries:' in call\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                                                  `- error: missing argument label 'entries:' in call\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:82: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                                                  `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:243:32: error: extra arguments at positions #3, #4 in call\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                `- error: extra arguments at positions #3, #4 in call\n244 |       ]),\n245 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n\nFoundation.String.init:2:8: note: 'init(format:_:)' declared here\n1 | struct String {\n2 | public init(format: __shared String, _ arguments: any CVarArg...)}\n  |        `- note: 'init(format:_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:243:136: error: cannot infer contextual base in reference to member 'public'\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                                        `- error: cannot infer contextual base in reference to member 'public'\n244 |       ]),\n245 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:257:27: error: type 'SecurityError' has no member 'notInitialized'\n255 |   private func validateInitialisation() throws {\n256 |     guard isInitialised else {\n257 |       throw SecurityError.notInitialized(\"Random data service is not initialised\")\n    |                           `- error: type 'SecurityError' has no member 'notInitialized'\n258 |     }\n259 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:266:13: error: type 'CoreSecurityError' has no member 'general'\n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n267 |   }\n268 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:270:13: error: type 'CoreSecurityError' has no member 'general'\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n271 |   }\n272 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:274:13: error: type 'CoreSecurityError' has no member 'general'\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n275 |   }\n276 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:25:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n23 |   /// - Returns: A fully configured random data service\n24 |   public static func createDefault() -\u003e RandomDataServiceProtocol {\n25 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n26 |       subsystem: \"uk.co.umbra.security\",\n27 |       category: \"RandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:45:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n43 |   /// - Returns: A fully configured high-security random data service\n44 |   public static func createHighSecurity() -\u003e RandomDataServiceProtocol {\n45 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n46 |       subsystem: \"uk.co.umbra.security\",\n47 |       category: \"HighSecurityRandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:63:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n61 |   /// - Returns: A minimally configured random data service\n62 |   public static func createMinimal() -\u003e RandomDataServiceProtocol {\n63 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n64 |       subsystem: \"uk.co.umbra.security\",\n65 |       category: \"MinimalRandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:83:13: error: type 'CoreSecurityError' has no member 'general'\n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n84 |   }\n85 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:87:13: error: type 'CoreSecurityError' has no member 'general'\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n88 |   }\n89 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:91:13: error: type 'CoreSecurityError' has no member 'general'\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n92 |   }\n93 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:110:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n108 | \n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n111 |     return .invalidVerificationMethod(reason: reason)\n112 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:114:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n112 |   }\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n115 |     return .verificationFailed(reason: reason)\n116 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:118:15: error: invalid redeclaration of 'notImplemented(reason:)'\n116 |   }\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n119 |     return .notImplemented(reason: reason)\n120 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:9:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  7 |   var metadata = PrivacyMetadata()\n  8 |   for (key, value) in dict {\n  9 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 10 |   }\n 11 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:95:27: error: cannot find 'LoggingServices' in scope\n 93 |       cryptoService: cryptoService,\n 94 |       logger: logger,\n 95 |       secureLogger: await LoggingServices.createSecureLogger(\n    |                           `- error: cannot find 'LoggingServices' in scope\n 96 |         subsystem: \"com.umbra.security\",\n 97 |         category: \"SecurityService\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:111:13: error: ambiguous use of 'invalidVerificationMethod(reason:)'\n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n111 |     return .invalidVerificationMethod(reason: reason)\n    |             `- error: ambiguous use of 'invalidVerificationMethod(reason:)'\n112 |   }\n113 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: note: found this candidate \n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:258:15: note: found this candidate \n256 | \n257 | extension CoreSecurityError {\n258 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n259 |     return .invalidVerificationMethod(reason: reason)\n260 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:115:13: error: ambiguous use of 'verificationFailed(reason:)'\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n115 |     return .verificationFailed(reason: reason)\n    |             `- error: ambiguous use of 'verificationFailed(reason:)'\n116 |   }\n117 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: note: found this candidate \n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:262:15: note: found this candidate \n260 |   }\n261 |   \n262 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n263 |     return .verificationFailed(reason: reason)\n264 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:119:13: error: ambiguous use of 'notImplemented(reason:)'\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n119 |     return .notImplemented(reason: reason)\n    |             `- error: ambiguous use of 'notImplemented(reason:)'\n120 |   }\n121 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              `- error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 31 |   // MARK: - Private Properties\n 32 | \n    :\n349 |    - Returns: Result of the operation\n350 |    */\n351 |   public func performSecureOperation(\n    |               `- note: candidate has non-matching type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n352 |     operation: SecurityOperation,\n353 |     config: SecurityConfigDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              |- error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n    |              `- note: add stubs for conformance\n 31 |   // MARK: - Private Properties\n 32 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:109:8: note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:16:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 14 |   var metadata = PrivacyMetadata()\n 15 |   for (key, value) in dict {\n 16 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 17 |   }\n 18 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:69:50: error: extra arguments at positions #1, #3, #4, #5 in call\n 67 |     self.logger = logger\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n    |                                                  `- error: extra arguments at positions #1, #3, #4, #5 in call\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/DTOs/SecurityDTOs.swift:23:10: note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 21 |   ///   - loggingLevel: The logging level for security operations\n 22 |   ///   - randomizationOptions: Options for secure random number generation\n 23 |   public init(\n    |          `- note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 24 |     securityLevel: CoreSecurityTypes.SecurityLevelDTO = .standard,\n 25 |     loggingLevel: CoreSecurityTypes.SecurityLogLevelDTO = .warning,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:70:22: error: cannot infer contextual base in reference to member 'standard'\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n 70 |       providerType: .standard,\n    |                      `- error: cannot infer contextual base in reference to member 'standard'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:72:29: error: cannot infer contextual base in reference to member 'aes256'\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n    |                             `- error: cannot infer contextual base in reference to member 'aes256'\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:73:23: error: cannot infer contextual base in reference to member 'sha256'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n    |                       `- error: cannot infer contextual base in reference to member 'sha256'\n 74 |       options: nil\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:74:16: error: 'nil' requires a contextual type\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n    |                `- error: 'nil' requires a contextual type\n 75 |     )\n 76 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:83:41: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 81 |         metadata: createPrivacyMetadata([\n 82 |           \"serviceId\": serviceId.uuidString,\n 83 |           \"providerType\": configuration.providerType.rawValue,\n    |                                         `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 84 |           \"securityLevel\": configuration.securityLevel.rawValue\n 85 |         ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:111:44: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n109 |       metadata: createPrivacyMetadata([\n110 |         \"serviceId\": serviceId.uuidString,\n111 |         \"providerType\": self.configuration.providerType.rawValue,\n    |                                            `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n112 |         \"securityLevel\": self.configuration.securityLevel.rawValue\n113 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:126:31: error: type 'CoreSecurityError' has no member 'serviceUnavailable'\n124 |   private func validateInitialisation() throws {\n125 |     if !isInitialised {\n126 |       throw CoreSecurityError.serviceUnavailable(reason: \"Security service not initialised\")\n    |                               `- error: type 'CoreSecurityError' has no member 'serviceUnavailable'\n127 |     }\n128 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:155:16: error: type 'SecurityEventStatus' has no member 'started'\n153 |     await secureLogger.securityEvent(\n154 |       action: \"Encrypt\",\n155 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n156 |       subject: nil,\n157 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:165:29: error: ambiguous use of 'notImplemented(reason:)'\n163 |     \n164 |     // Not implemented yet - would delegate to crypto service\n165 |     throw CoreSecurityError.notImplemented(reason: \"Encrypt operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n166 |   }\n167 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:180:16: error: type 'SecurityEventStatus' has no member 'started'\n178 |     await secureLogger.securityEvent(\n179 |       action: \"Decrypt\",\n180 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n181 |       subject: nil,\n182 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:190:29: error: ambiguous use of 'notImplemented(reason:)'\n188 |     \n189 |     // Not implemented yet - would delegate to crypto service\n190 |     throw CoreSecurityError.notImplemented(reason: \"Decrypt operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n191 |   }\n192 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:205:16: error: type 'SecurityEventStatus' has no member 'started'\n203 |     await secureLogger.securityEvent(\n204 |       action: \"GenerateKey\",\n205 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n206 |       subject: nil,\n207 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:215:29: error: ambiguous use of 'notImplemented(reason:)'\n213 |     \n214 |     // Not implemented yet - would delegate to crypto service\n215 |     throw CoreSecurityError.notImplemented(reason: \"Key generation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n216 |   }\n217 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:230:16: error: type 'SecurityEventStatus' has no member 'started'\n228 |     await secureLogger.securityEvent(\n229 |       action: \"SecureStore\",\n230 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n231 |       subject: nil,\n232 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:240:29: error: ambiguous use of 'notImplemented(reason:)'\n238 |     \n239 |     // Not implemented yet - would delegate to crypto service\n240 |     throw CoreSecurityError.notImplemented(reason: \"Secure store operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n241 |   }\n242 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:255:16: error: type 'SecurityEventStatus' has no member 'started'\n253 |     await secureLogger.securityEvent(\n254 |       action: \"SecureRetrieve\",\n255 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n256 |       subject: nil,\n257 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:265:29: error: ambiguous use of 'notImplemented(reason:)'\n263 |     \n264 |     // Not implemented yet - would delegate to crypto service\n265 |     throw CoreSecurityError.notImplemented(reason: \"Secure retrieve operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n266 |   }\n267 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:280:16: error: type 'SecurityEventStatus' has no member 'started'\n278 |     await secureLogger.securityEvent(\n279 |       action: \"SecureDelete\",\n280 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n281 |       subject: nil,\n282 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:290:29: error: ambiguous use of 'notImplemented(reason:)'\n288 |     \n289 |     // Not implemented yet - would delegate to crypto service\n290 |     throw CoreSecurityError.notImplemented(reason: \"Secure delete operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n291 |   }\n292 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:305:16: error: type 'SecurityEventStatus' has no member 'started'\n303 |     await secureLogger.securityEvent(\n304 |       action: \"Sign\",\n305 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n306 |       subject: nil,\n307 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:315:29: error: ambiguous use of 'notImplemented(reason:)'\n313 |     \n314 |     // Not implemented yet - would delegate to crypto service\n315 |     throw CoreSecurityError.notImplemented(reason: \"Sign operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n316 |   }\n317 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:330:16: error: type 'SecurityEventStatus' has no member 'started'\n328 |     await secureLogger.securityEvent(\n329 |       action: \"Verify\",\n330 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n331 |       subject: nil,\n332 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:340:29: error: ambiguous use of 'notImplemented(reason:)'\n338 |     \n339 |     // Not implemented yet - would delegate to crypto service\n340 |     throw CoreSecurityError.notImplemented(reason: \"Verify operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n341 |   }\n342 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:360:16: error: type 'SecurityEventStatus' has no member 'started'\n358 |     await secureLogger.securityEvent(\n359 |       action: \"SecurityOperation\",\n360 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n361 |       subject: nil,\n362 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:370:29: error: ambiguous use of 'notImplemented(reason:)'\n368 |     \n369 |     // Not implemented yet\n370 |     throw CoreSecurityError.notImplemented(reason: \"Generic secure operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n371 |   }\n372 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:382:29: error: type 'EncryptionAlgorithm' has no member 'aes256'\n380 |     // Create and return a new configuration based on the provided options\n381 |     return SecurityConfigDTO(\n382 |       encryptionAlgorithm: .aes256,\n    |                             `- error: type 'EncryptionAlgorithm' has no member 'aes256'\n383 |       hashAlgorithm: .sha256,\n384 |       providerType: .standard,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:384:22: error: type 'SecurityProviderType' has no member 'standard'\n382 |       encryptionAlgorithm: .aes256,\n383 |       hashAlgorithm: .sha256,\n384 |       providerType: .standard,\n    |                      `- error: type 'SecurityProviderType' has no member 'standard'\n385 |       options: options\n386 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceFactory.swift:15:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 13 |   var metadata = PrivacyMetadata()\n 14 |   for (key, value) in dict {\n 15 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 16 |   }\n 17 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: error: invalid redeclaration of 'notImplemented(reason:)'\n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:8:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  6 |   var metadata = PrivacyMetadata()\n  7 |   for (key, value) in dict {\n  8 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  9 |   }\n 10 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:114:39: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n112 |     // Add any additional metadata\n113 |     for (key, value) in additionalMetadata {\n114 |       metricMetadata = metricMetadata.withPublic(key: key, value: value)\n    |                                       `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n115 |     }\n116 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:119:39: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n117 |     // Add historical performance if available\n118 |     if let avgDuration=averagePerformance(for: operation) {\n119 |       metricMetadata = metricMetadata.withPublic(key: \"avgDurationMs\", value: String(format: \"%.2f\", avgDuration))\n    |                                       `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n120 |     }\n121 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:124:20: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n122 |     // Log the metrics with appropriate level based on success\n123 |     if success {\n124 |       await logger.info(\"Security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n    |                    `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n125 |     } else {\n126 |       await logger.warning(\"Failed security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:126:20: warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n124 |       await logger.info(\"Security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n125 |     } else {\n126 |       await logger.warning(\"Failed security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n    |                    `- warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n127 |     }\n128 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:185:41: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n183 |     // Add context information\n184 |     for (key, value) in context {\n185 |       anomalyMetadata = anomalyMetadata.withPublic(key: key, value: value)\n    |                                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n186 |     }\n187 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:189:18: warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n187 | \n188 |     // Log the anomaly\n189 |     await logger.warning(\"Performance anomaly detected in \\(operation.description)\", metadata: anomalyMetadata, source: \"SecurityImplementation\")\n    |                  `- warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n190 | \n191 |     // Prepare privacy-tagged metadata for secure logger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:286:17: error: type 'LogPrivacyLevel' has no member 'restricted'\n284 |     for pattern in restrictedKeyPatterns {\n285 |       if key.lowercased().contains(pattern) {\n286 |         return .restricted\n    |                 `- error: type 'LogPrivacyLevel' has no member 'restricted'\n287 |       }\n288 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:8:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  6 |   var metadata = PrivacyMetadata()\n  7 |   for (key, value) in dict {\n  8 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  9 |   }\n 10 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:93:43: error: cannot find 'startTime' in scope\n 91 |   ) async {\n 92 |     // Calculate duration before failure\n 93 |     let duration=Date().timeIntervalSince(startTime) * 1000\n    |                                           `- error: cannot find 'startTime' in scope\n 94 | \n 95 |     // Create error metadata for logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:119:70: error: reference to member 'int' cannot be resolved without a contextual type\n117 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n118 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operation.rawValue), privacyLevel: .public),\n119 |         \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration)), privacyLevel: .public),\n    |                                                                      `- error: reference to member 'int' cannot be resolved without a contextual type\n120 |         \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n121 |         \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(sanitizeErrorMessage(error.localizedDescription)), privacyLevel: .sensitive)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:126:12: error: unexpected non-void return value in void function\n124 | \n125 |     // Return a standardised error result\n126 |     return createErrorResult(error: error, duration: duration)\n    |            |- error: unexpected non-void return value in void function\n    |            `- note: did you mean to add a return type?\n127 |   }\n128 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:193:22: error: cannot find 'operationID' in scope\n191 |     // Create standard metadata\n192 |     let standardMetadata = createPrivacyMetadata([\n193 |       \"operationId\": operationID,\n    |                      `- error: cannot find 'operationID' in scope\n194 |       \"operation\": operation.rawValue,\n195 |       \"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:195:44: error: cannot find 'duration' in scope\n193 |       \"operationId\": operationID,\n194 |       \"operation\": operation.rawValue,\n195 |       \"durationMs\": String(format: \"%.2f\", duration),\n    |                                            `- error: cannot find 'duration' in scope\n196 |       \"errorType\": String(describing: type(of: error)),\n197 |       \"errorMessage\": sanitizeErrorMessage(error.localizedDescription)\nTarget //packages/UmbraImplementations/Sources/CoreServices:CoreServices failed to build\nINFO: Elapsed time: 4.076s, Critical Path: 3.98s\nINFO: 2 processes: 1 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices",
    "success": true,
    "start_time": "2025-04-09T00:54:46.082114+01:00",
    "end_time": "2025-04-09T00:54:47.121142+01:00",
    "duration": "1.039023333s",
    "output": "INFO: Invocation ID: e08f308e-a34e-410e-9942-a13a0857efd7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/libCryptoServices.a\nINFO: Elapsed time: 0.085s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger",
    "success": true,
    "start_time": "2025-04-09T00:54:47.121154+01:00",
    "end_time": "2025-04-09T00:54:47.902442+01:00",
    "duration": "781.284542ms",
    "output": "INFO: Invocation ID: d31ced8b-e41c-44dd-8334-3c8852d3edc9\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/CryptoLogger.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/CryptoLogger.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/CryptoLogger.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/libCryptoLogger.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices",
    "success": true,
    "start_time": "2025-04-09T00:54:47.902457+01:00",
    "end_time": "2025-04-09T00:54:48.698693+01:00",
    "duration": "796.232666ms",
    "output": "INFO: Invocation ID: 9ed81a26-d272-490d-b881-2a205684a49e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/libCryptoXPCServices.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices",
    "success": true,
    "start_time": "2025-04-09T00:54:48.698709+01:00",
    "end_time": "2025-04-09T00:54:49.563091+01:00",
    "duration": "864.378208ms",
    "output": "INFO: Invocation ID: 98d67b6d-ca3b-4ec0-8e02-74e47fadb8ee\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices (2 packages loaded, 8 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/DateTimeServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/DateTimeServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/DateTimeServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/libDateTimeServices.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl",
    "success": true,
    "start_time": "2025-04-09T00:54:49.563097+01:00",
    "end_time": "2025-04-09T00:54:50.796393+01:00",
    "duration": "1.233290667s",
    "output": "INFO: Invocation ID: 55d94098-94e1-43b2-8d26-fa185dd36c07\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/ErrorDomainsImpl.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/ErrorDomainsImpl.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/ErrorDomainsImpl.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/libErrorDomainsImpl.a\nINFO: Elapsed time: 0.088s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl",
    "success": true,
    "start_time": "2025-04-09T00:54:50.796422+01:00",
    "end_time": "2025-04-09T00:54:51.616893+01:00",
    "duration": "820.467542ms",
    "output": "INFO: Invocation ID: df2c54f4-d580-4b77-a93d-529f301e6543\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/ErrorHandlingImpl.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/ErrorHandlingImpl.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/ErrorHandlingImpl.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/libErrorHandlingImpl.a\nINFO: Elapsed time: 0.092s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices",
    "success": true,
    "start_time": "2025-04-09T00:54:51.616903+01:00",
    "end_time": "2025-04-09T00:54:52.40455+01:00",
    "duration": "787.644334ms",
    "output": "INFO: Invocation ID: fffa1eac-0adb-4cd9-ae17-2f60edba27f0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices (2 packages loaded, 8 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/ErrorLoggingServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/ErrorLoggingServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/ErrorLoggingServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/libErrorLoggingServices.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices",
    "success": true,
    "start_time": "2025-04-09T00:54:52.404561+01:00",
    "end_time": "2025-04-09T00:54:53.19748+01:00",
    "duration": "792.915542ms",
    "output": "INFO: Invocation ID: 1dd35eea-a616-4d52-ac13-92f40ee301d6\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices (2 packages loaded, 35 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/FileSystemServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/FileSystemServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/FileSystemServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/libFileSystemServices.a\nINFO: Elapsed time: 0.091s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices",
    "success": true,
    "start_time": "2025-04-09T00:54:53.197487+01:00",
    "end_time": "2025-04-09T00:54:54.468006+01:00",
    "duration": "1.270513875s",
    "output": "INFO: Invocation ID: 3d77f330-4f27-437d-905a-b25a23db6b95\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/KeychainServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/KeychainServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/KeychainServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/libKeychainServices.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor",
    "success": true,
    "start_time": "2025-04-09T00:54:54.468015+01:00",
    "end_time": "2025-04-09T00:54:55.689228+01:00",
    "duration": "1.221207458s",
    "output": "INFO: Invocation ID: 4486e2b3-bea0-4343-8810-bf3376172125\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/KeychainSecurityActor.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/KeychainSecurityActor.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/KeychainSecurityActor.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/libKeychainSecurityActor.a\nINFO: Elapsed time: 0.075s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor",
    "success": true,
    "start_time": "2025-04-09T00:54:55.689236+01:00",
    "end_time": "2025-04-09T00:54:56.498909+01:00",
    "duration": "809.669542ms",
    "output": "INFO: Invocation ID: 36c3de48-70f7-46eb-b8c7-073093b8e3e7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/KeychainSecurityActor.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/KeychainSecurityActor.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/KeychainSecurityActor.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/libKeychainSecurityActor.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks",
    "success": true,
    "start_time": "2025-04-09T00:54:56.498931+01:00",
    "end_time": "2025-04-09T00:54:57.28174+01:00",
    "duration": "782.8055ms",
    "output": "INFO: Invocation ID: dee6458d-1851-4938-9089-da04606de713\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/Fallbacks.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/Fallbacks.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/Fallbacks.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/libFallbacks.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger",
    "success": true,
    "start_time": "2025-04-09T00:54:57.281747+01:00",
    "end_time": "2025-04-09T00:54:58.400548+01:00",
    "duration": "1.1187955s",
    "output": "INFO: Invocation ID: 4a6ba142-a12d-4278-a354-71ab990a2885\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/KeychainLogger.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/KeychainLogger.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/KeychainLogger.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/libKeychainLogger.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters",
    "success": true,
    "start_time": "2025-04-09T00:54:58.400562+01:00",
    "end_time": "2025-04-09T00:54:59.474035+01:00",
    "duration": "1.073468292s",
    "output": "INFO: Invocation ID: 3ccba71f-2546-4b3a-8dc4-c4329869dfd7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/libLoggingAdapters.a\nINFO: Elapsed time: 0.093s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices",
    "success": true,
    "start_time": "2025-04-09T00:54:59.474042+01:00",
    "end_time": "2025-04-09T00:55:00.309147+01:00",
    "duration": "835.101666ms",
    "output": "INFO: Invocation ID: 783fc7b5-ed14-4a06-aced-52c7dbedb81b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/LoggingServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/LoggingServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/LoggingServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/libLoggingServices.a\nINFO: Elapsed time: 0.075s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices",
    "success": true,
    "start_time": "2025-04-09T00:55:00.309153+01:00",
    "end_time": "2025-04-09T00:55:01.071452+01:00",
    "duration": "762.295542ms",
    "output": "INFO: Invocation ID: 4829f68c-d9e8-4327-911b-a7adeac78075\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/LoggingWrapperServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/LoggingWrapperServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/LoggingWrapperServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/libLoggingWrapperServices.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices",
    "success": true,
    "start_time": "2025-04-09T00:55:01.071466+01:00",
    "end_time": "2025-04-09T00:55:02.092574+01:00",
    "duration": "1.021102833s",
    "output": "INFO: Invocation ID: 80af2d0c-de39-403a-905f-235ccaf6b16c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices (2 packages loaded, 11 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/NetworkServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/NetworkServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/NetworkServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/libNetworkServices.a\nINFO: Elapsed time: 0.089s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices",
    "success": true,
    "start_time": "2025-04-09T00:55:02.092582+01:00",
    "end_time": "2025-04-09T00:55:02.89056+01:00",
    "duration": "797.974583ms",
    "output": "INFO: Invocation ID: b53eda7e-00f6-4047-b14f-cf3e85f406ba\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices (1 packages loaded, 7 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/RepositoryServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/RepositoryServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/RepositoryServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/libRepositoryServices.a\nINFO: Elapsed time: 0.089s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ResticServices:ResticServices",
    "success": true,
    "start_time": "2025-04-09T00:55:02.890567+01:00",
    "end_time": "2025-04-09T00:55:03.92679+01:00",
    "duration": "1.036218166s",
    "output": "INFO: Invocation ID: 26d21db0-d0f5-4eff-81c1-6c3a8cabda35\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ResticServices:ResticServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ResticServices:ResticServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ResticServices:ResticServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ResticServices:ResticServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/libResticServices.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore",
    "success": true,
    "start_time": "2025-04-09T00:55:03.926813+01:00",
    "end_time": "2025-04-09T00:55:05.135879+01:00",
    "duration": "1.209061083s",
    "output": "INFO: Invocation ID: 5367ee05-e7f8-4193-b047-c6eea0790bf8\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/SecurityCore.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/SecurityCore.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/SecurityCore.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/libSecurityCore.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices",
    "success": false,
    "start_time": "2025-04-09T00:55:05.135891+01:00",
    "end_time": "2025-04-09T00:55:09.960606+01:00",
    "duration": "4.824693375s",
    "output": "INFO: Invocation ID: 96d8acb0-440d-4a6c-ad38-89c81ab16119\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices (3 packages loaded, 15 targets configured).\n[4 / 9] Compiling Swift module //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation; 1s disk-cache, worker\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/SecurityImplementation/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:10: error: static methods may only be declared on a type\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:10: error: static methods may only be declared on a type\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:10: error: static methods may only be declared on a type\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:163:1: error: extraneous '}' at top level\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n163 | }\n    | `- error: extraneous '}' at top level\n164 | \n165 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:10: error: static methods may only be declared on a type\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:10: error: static methods may only be declared on a type\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:10: error: static methods may only be declared on a type\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:72:1: error: extraneous '}' at top level\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n72 | }\n   | `- error: extraneous '}' at top level\n73 | \n74 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:10: error: static methods may only be declared on a type\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:10: error: static methods may only be declared on a type\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:10: error: static methods may only be declared on a type\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1155:1: error: extraneous '}' at top level\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n1155 | }\n     | `- error: extraneous '}' at top level\n1156 | \n1157 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:10: error: static methods may only be declared on a type\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:10: error: static methods may only be declared on a type\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:10: error: static methods may only be declared on a type\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:616:1: error: extraneous '}' at top level\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n616 | }\n    | `- error: extraneous '}' at top level\n617 | \n618 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:25: error: cannot find ')' to match opening '(' in string interpolation\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:23: error: unterminated string literal\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:25: error: cannot find ')' to match opening '(' in string interpolation\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:23: error: unterminated string literal\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:166:18: error: unterminated string literal\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n166 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n167 | \n168 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:247:18: error: unterminated string literal\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n247 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n248 | \n249 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:10: error: static methods may only be declared on a type\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:10: error: static methods may only be declared on a type\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:10: error: static methods may only be declared on a type\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:275:1: error: extraneous '}' at top level\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n275 | }\n    | `- error: extraneous '}' at top level\n276 | \n277 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:10: error: static methods may only be declared on a type\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:10: error: static methods may only be declared on a type\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:10: error: static methods may only be declared on a type\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:477:1: error: extraneous '}' at top level\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n477 | }\n    | `- error: extraneous '}' at top level\n478 | \n479 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:10: error: static methods may only be declared on a type\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:10: error: static methods may only be declared on a type\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:10: error: static methods may only be declared on a type\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:101:1: error: extraneous '}' at top level\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n101 | }\n    | `- error: extraneous '}' at top level\n102 | \n103 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:179:20: error: unterminated string literal\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n179 |         , source: \\\"SecurityImplementation\\\")\n    |                    `- error: unterminated string literal\n180 | \n181 |         // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:200:18: error: unterminated string literal\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n200 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n201 | \n202 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:343:18: error: unterminated string literal\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n343 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n344 | \n345 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:10: error: static methods may only be declared on a type\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:10: error: static methods may only be declared on a type\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:10: error: static methods may only be declared on a type\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:428:1: error: extraneous '}' at top level\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n428 | }\n    | `- error: extraneous '}' at top level\n429 | \n430 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:10: error: static methods may only be declared on a type\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:10: error: static methods may only be declared on a type\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:10: error: static methods may only be declared on a type\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:438:1: error: extraneous '}' at top level\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n438 | }\n    | `- error: extraneous '}' at top level\n439 | \n440 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:10: error: static methods may only be declared on a type\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:10: error: static methods may only be declared on a type\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:10: error: static methods may only be declared on a type\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:182:1: error: extraneous '}' at top level\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n182 | }\n    | `- error: extraneous '}' at top level\n183 | \n184 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:10: error: static methods may only be declared on a type\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:10: error: static methods may only be declared on a type\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:10: error: static methods may only be declared on a type\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:102:1: error: extraneous '}' at top level\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n102 | }\n    | `- error: extraneous '}' at top level\n103 | \n104 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:10: error: static methods may only be declared on a type\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:10: error: static methods may only be declared on a type\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:10: error: static methods may only be declared on a type\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:276:1: error: extraneous '}' at top level\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n276 | }\n    | `- error: extraneous '}' at top level\n277 | \n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:82:10: error: static methods may only be declared on a type\n80 | \n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n84 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:86:10: error: static methods may only be declared on a type\n84 |   }\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n88 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:90:10: error: static methods may only be declared on a type\n88 |   }\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:93:1: error: extraneous '}' at top level\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n93 | }\n   | `- error: extraneous '}' at top level\n94 | \n95 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:15: error: invalid redeclaration of 'notImplemented(reason:)'\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:15: error: invalid redeclaration of 'notImplemented(reason:)'\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: expected ',' separator\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: expected ',' separator\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: unnamed parameters must be written with the empty name '_'\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: unnamed parameters must be written with the empty name '_'\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:15: error: cannot find type 'createPrivacyMetadata' in scope\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |               `- error: cannot find type 'createPrivacyMetadata' in scope\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:15: error: invalid redeclaration of 'notImplemented(reason:)'\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:62:27: error: cannot find type 'KeyStorageManager' in scope\n 60 |   init(\n 61 |     cryptoService: CryptoServiceProtocol,\n 62 |     keyManagementService: KeyStorageManager,\n    |                           `- error: cannot find type 'KeyStorageManager' in scope\n 63 |     logger: PrivacyAwareLoggingProtocol\n 64 |   ) {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:137:38: error: extra arguments at positions #1, #2 in call\n 135 |     )\n 136 | \n 137 |     signatureService=SignatureService(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:78:3: note: 'init(logger:)' declared here\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: 'init(logger:)' declared here\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:140:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n 140 |       logger: logger\n     |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 141 |     )\n 142 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:50: error: expected ',' separator\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                                                  `- error: expected ',' separator\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:15: error: invalid redeclaration of 'notImplemented(reason:)'\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:15: error: invalid redeclaration of 'notImplemented(reason:)'\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:29: error: cannot find type 'createPrivacyMetadata' in scope\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                             `- error: cannot find type 'createPrivacyMetadata' in scope\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:15: error: invalid redeclaration of 'notImplemented(reason:)'\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:43:37: error: cannot find type 'KeyStorageManager' in scope\n 41 |    The key manager used for key storage and retrieval\n 42 |    */\n 43 |   private let keyManagementService: KeyStorageManager\n    |                                     `- error: cannot find type 'KeyStorageManager' in scope\n 44 | \n 45 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:32:13: error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n 30 |  - Handle signature-specific errors\n 31 |  */\n 32 | final class SignatureService: SecurityServiceBase {\n    |             |- error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n    |             `- note: add stubs for conformance\n 33 |   // MARK: - Properties\n 34 | \n    :\n 46 |    The logger instance for recording operation details\n 47 |    */\n 48 |   let logger: PrivacyAwareLoggingProtocol\n    |       `- note: candidate has non-matching type 'any PrivacyAwareLoggingProtocol'\n 49 | \n 50 |   // MARK: - Initialisation\n    :\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: candidate has non-matching type '(logger: any PrivacyAwareLoggingProtocol)'\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:42:3: note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 32 |    The logger instance for recording operation details\n 33 |    */\n 34 |   var logger: LoggingInterfaces.LoggingProtocol { get }\n    |       `- note: protocol requires property 'logger' with type 'any LoggingProtocol'\n 35 | \n 36 |   /**\n    :\n 40 |        - logger: The logging service to use for operation logging\n 41 |    */\n 42 |   init(logger: LoggingInterfaces.LoggingProtocol)\n    |   `- note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 43 | \n 44 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:15: error: invalid redeclaration of 'notImplemented(reason:)'\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:16:22: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n14 |   /// - Parameter reason: The reason for the error\n15 |   /// - Returns: A CoreSecurityError with the appropriate error code\n16 |   public static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n17 |     return .invalidInput(\"Invalid verification method: \\(reason)\")\n18 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:23:22: error: invalid redeclaration of 'verificationFailed(reason:)'\n21 |   /// - Parameter reason: The reason for the error\n22 |   /// - Returns: A CoreSecurityError with the appropriate error code\n23 |   public static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'verificationFailed(reason:)'\n24 |     return .authenticationFailed(\"Verification failed: \\(reason)\")\n25 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:30:22: error: invalid redeclaration of 'notImplemented(reason:)'\n28 |   /// - Parameter reason: The reason for the error\n29 |   /// - Returns: A CoreSecurityError with the appropriate error code\n30 |   public static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'notImplemented(reason:)'\n31 |     return .unsupportedOperation(\"Not implemented: \\(reason)\")\n32 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Logging.swift:38:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 36 |  according to the Alpha Dot Five architecture principles.\n 37 |  */\n 38 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 39 |   /**\n 40 |    Logs the start of a security operation with privacy-aware metadata.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  * Batch encryption and decryption for collections of data\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Encrypts data and then stores it securely.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:15: error: invalid redeclaration of 'notImplemented(reason:)'\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  - Common validation logic is centralised\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Validates configuration for encryption operations.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:15: error: invalid redeclaration of 'notImplemented(reason:)'\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               `- warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:30:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 28 |   /// - Returns: The generated random integer\n 29 |   /// - Throws: SecurityError if random generation fails\n 30 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 31 | \n 32 |   /// Generates a cryptographically secure random integer within the specified closed range\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               `- warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:36:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 34 |   /// - Returns: The generated random integer\n 35 |   /// - Throws: SecurityError if random generation fails\n 36 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 37 | \n 38 |   /// Generates a cryptographically secure random double between 0.0 and 1.0\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:15: error: invalid redeclaration of 'notImplemented(reason:)'\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:110:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n108 | \n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n111 |     return .invalidVerificationMethod(reason: reason)\n112 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:114:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n112 |   }\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n115 |     return .verificationFailed(reason: reason)\n116 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:118:15: error: invalid redeclaration of 'notImplemented(reason:)'\n116 |   }\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n119 |     return .notImplemented(reason: reason)\n120 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              `- error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 31 |   // MARK: - Private Properties\n 32 | \n    :\n349 |    - Returns: Result of the operation\n350 |    */\n351 |   public func performSecureOperation(\n    |               `- note: candidate has non-matching type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n352 |     operation: SecurityOperation,\n353 |     config: SecurityConfigDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              |- error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n    |              `- note: add stubs for conformance\n 31 |   // MARK: - Private Properties\n 32 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:109:8: note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:69:50: error: extra arguments at positions #1, #3, #4, #5 in call\n 67 |     self.logger = logger\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n    |                                                  `- error: extra arguments at positions #1, #3, #4, #5 in call\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/DTOs/SecurityDTOs.swift:23:10: note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 21 |   ///   - loggingLevel: The logging level for security operations\n 22 |   ///   - randomizationOptions: Options for secure random number generation\n 23 |   public init(\n    |          `- note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 24 |     securityLevel: CoreSecurityTypes.SecurityLevelDTO = .standard,\n 25 |     loggingLevel: CoreSecurityTypes.SecurityLogLevelDTO = .warning,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:70:22: error: cannot infer contextual base in reference to member 'standard'\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n 70 |       providerType: .standard,\n    |                      `- error: cannot infer contextual base in reference to member 'standard'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:72:29: error: cannot infer contextual base in reference to member 'aes256'\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n    |                             `- error: cannot infer contextual base in reference to member 'aes256'\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:73:23: error: cannot infer contextual base in reference to member 'sha256'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n    |                       `- error: cannot infer contextual base in reference to member 'sha256'\n 74 |       options: nil\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:74:16: error: 'nil' requires a contextual type\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n    |                `- error: 'nil' requires a contextual type\n 75 |     )\n 76 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:83:41: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 81 |         metadata: createPrivacyMetadata([\n 82 |           \"serviceId\": serviceId.uuidString,\n 83 |           \"providerType\": configuration.providerType.rawValue,\n    |                                         `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 84 |           \"securityLevel\": configuration.securityLevel.rawValue\n 85 |         ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: error: invalid redeclaration of 'notImplemented(reason:)'\n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n305 |     return .notImplemented(reason: reason)\n306 |   }\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:10: error: static methods may only be declared on a type\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:10: error: static methods may only be declared on a type\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:10: error: static methods may only be declared on a type\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:163:1: error: extraneous '}' at top level\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n163 | }\n    | `- error: extraneous '}' at top level\n164 | \n165 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:10: error: static methods may only be declared on a type\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:10: error: static methods may only be declared on a type\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:10: error: static methods may only be declared on a type\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:72:1: error: extraneous '}' at top level\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n72 | }\n   | `- error: extraneous '}' at top level\n73 | \n74 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: expected ',' separator\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: expected ',' separator\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: unnamed parameters must be written with the empty name '_'\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: unnamed parameters must be written with the empty name '_'\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:10: error: static methods may only be declared on a type\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:10: error: static methods may only be declared on a type\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:10: error: static methods may only be declared on a type\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1155:1: error: extraneous '}' at top level\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n1155 | }\n     | `- error: extraneous '}' at top level\n1156 | \n1157 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:10: error: static methods may only be declared on a type\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:10: error: static methods may only be declared on a type\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:10: error: static methods may only be declared on a type\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:616:1: error: extraneous '}' at top level\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n616 | }\n    | `- error: extraneous '}' at top level\n617 | \n618 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:25: error: cannot find ')' to match opening '(' in string interpolation\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:23: error: unterminated string literal\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:25: error: cannot find ')' to match opening '(' in string interpolation\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:23: error: unterminated string literal\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:166:18: error: unterminated string literal\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n166 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n167 | \n168 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:247:18: error: unterminated string literal\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n247 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n248 | \n249 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:10: error: static methods may only be declared on a type\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:10: error: static methods may only be declared on a type\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:10: error: static methods may only be declared on a type\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:275:1: error: extraneous '}' at top level\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n275 | }\n    | `- error: extraneous '}' at top level\n276 | \n277 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:260:65: error: expected ',' separator\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n    |                                                                 `- error: expected ',' separator\n261 |             ]\n262 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:260:65: error: expected key expression in dictionary literal\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n    |                                                                 `- error: expected key expression in dictionary literal\n261 |             ]\n262 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:264:9: error: expected ')' in expression list\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- note: to match this opening '('\n256 |             status: .success,\n257 |             data: decryptedData,\n    :\n262 |           )\n263 | \n264 |         case let .failure(error):\n    |         `- error: expected ')' in expression list\n265 |           throw SecureStorageError.decryptionError(\"Failed to decrypt data: \\(error)\")\n266 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:50: error: expected ',' separator\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                                                  `- error: expected ',' separator\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:10: error: static methods may only be declared on a type\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:10: error: static methods may only be declared on a type\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:10: error: static methods may only be declared on a type\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:477:1: error: extraneous '}' at top level\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n477 | }\n    | `- error: extraneous '}' at top level\n478 | \n479 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:10: error: static methods may only be declared on a type\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:10: error: static methods may only be declared on a type\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:10: error: static methods may only be declared on a type\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:101:1: error: extraneous '}' at top level\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n101 | }\n    | `- error: extraneous '}' at top level\n102 | \n103 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:179:20: error: unterminated string literal\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n179 |         , source: \\\"SecurityImplementation\\\")\n    |                    `- error: unterminated string literal\n180 | \n181 |         // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:200:18: error: unterminated string literal\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n200 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n201 | \n202 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:343:18: error: unterminated string literal\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n343 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n344 | \n345 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:10: error: static methods may only be declared on a type\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:10: error: static methods may only be declared on a type\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:10: error: static methods may only be declared on a type\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:428:1: error: extraneous '}' at top level\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n428 | }\n    | `- error: extraneous '}' at top level\n429 | \n430 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:70:96: error: expected ',' separator\n 68 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n 69 |         verifyOperations: config.options?.verifyOperations ?? true,\n 70 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected ',' separator\n 71 |           \"identifier\": config.options?.metadata?[\"storeIdentifier\"] ?? UUID().uuidString,\n 72 |           \"data\": encryptResult.resultData?.base64EncodedString() ?? \"\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:70:96: error: expected key expression in dictionary literal\n 68 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n 69 |         verifyOperations: config.options?.verifyOperations ?? true,\n 70 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected key expression in dictionary literal\n 71 |           \"identifier\": config.options?.metadata?[\"storeIdentifier\"] ?? UUID().uuidString,\n 72 |           \"data\": encryptResult.resultData?.base64EncodedString() ?? \"\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:77:5: error: expected ')' in expression list\n 57 | \n 58 |     // Now store the encrypted data\n 59 |     let storeConfig=SecurityConfigDTO(\n    |                                      `- note: to match this opening '('\n 60 |       encryptionAlgorithm: config.encryptionAlgorithm,\n 61 |       hashAlgorithm: config.hashAlgorithm,\n    :\n 75 |     )\n 76 | \n 77 |     let storeResult=try await performSecureOperation(\n    |     `- error: expected ')' in expression list\n 78 |       operation: .storeKey,\n 79 |       config: storeConfig\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:112:96: error: expected ',' separator\n110 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n111 |         verifyOperations: config.options?.verifyOperations ?? true,\n112 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected ',' separator\n113 |           \"identifier\": identifier\n114 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:112:96: error: expected key expression in dictionary literal\n110 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n111 |         verifyOperations: config.options?.verifyOperations ?? true,\n112 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected key expression in dictionary literal\n113 |           \"identifier\": identifier\n114 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:119:5: error: expected ')' in expression list\n 99 |   ) async throws -\u003e SecurityResultDTO {\n100 |     // First retrieve the encrypted data\n101 |     let retrieveConfig=SecurityConfigDTO(\n    |                                         `- note: to match this opening '('\n102 |       encryptionAlgorithm: config.encryptionAlgorithm,\n103 |       hashAlgorithm: config.hashAlgorithm,\n    :\n117 | \n118 |     // Retrieve the encrypted data\n119 |     let retrieveResult=try await performSecureOperation(\n    |     `- error: expected ')' in expression list\n120 |       operation: .retrieveKey,\n121 |       config: retrieveConfig\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:10: error: static methods may only be declared on a type\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:10: error: static methods may only be declared on a type\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:10: error: static methods may only be declared on a type\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:438:1: error: extraneous '}' at top level\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n438 | }\n    | `- error: extraneous '}' at top level\n439 | \n440 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:62:7: error: expected expression\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n 62 |       )\n    |       `- error: expected expression\n 63 |       actualLogger=developmentLogger\n 64 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:106:7: error: expected expression\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n106 |       )\n    |       `- error: expected expression\n107 |       actualLogger=developmentLogger\n108 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:151:7: error: expected expression\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n151 |       )\n    |       `- error: expected expression\n152 |       actualLogger=developmentLogger\n153 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:10: error: static methods may only be declared on a type\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:10: error: static methods may only be declared on a type\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:10: error: static methods may only be declared on a type\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:182:1: error: extraneous '}' at top level\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n182 | }\n    | `- error: extraneous '}' at top level\n183 | \n184 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:10: error: static methods may only be declared on a type\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:10: error: static methods may only be declared on a type\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:10: error: static methods may only be declared on a type\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:102:1: error: extraneous '}' at top level\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n102 | }\n    | `- error: extraneous '}' at top level\n103 | \n104 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:10: error: static methods may only be declared on a type\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:10: error: static methods may only be declared on a type\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:10: error: static methods may only be declared on a type\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:276:1: error: extraneous '}' at top level\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n276 | }\n    | `- error: extraneous '}' at top level\n277 | \n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:82:10: error: static methods may only be declared on a type\n80 | \n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n84 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:86:10: error: static methods may only be declared on a type\n84 |   }\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n88 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:90:10: error: static methods may only be declared on a type\n88 |   }\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:93:1: error: extraneous '}' at top level\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n93 | }\n   | `- error: extraneous '}' at top level\n94 | \n95 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:173:5: error: expected expression\n171 |         \"durationMs\": String(format: \"%.2f\", duration)\n172 |       ])\n173 |     )\n    |     `- error: expected expression\n174 |   }\n175 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityErrorHandler.swift:73:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 71 |     await logger.error(\n 72 |       \"Security operation failed: \\(securityError.message)\",\n 73 |       metadata: metadata,\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 74 |       source: source\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityErrorHandler.swift:100:8: error: initializer for conditional binding must have Optional type, not 'NSError'\n 98 |     \n 99 |     // If it's an NSError, map it to a SecurityError\n100 |     if let nsError = error as NSError {\n    |        `- error: initializer for conditional binding must have Optional type, not 'NSError'\n101 |       return mapSecurityFrameworkError(nsError)\n102 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:15: error: invalid redeclaration of 'notImplemented(reason:)'\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:153:13: error: type 'CoreSecurityError' has no member 'general'\n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n154 |   }\n155 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:157:13: error: type 'CoreSecurityError' has no member 'general'\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n158 |   }\n159 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:161:13: error: type 'CoreSecurityError' has no member 'general'\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n162 |   }\n163 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:15: error: invalid redeclaration of 'notImplemented(reason:)'\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:62:13: error: type 'CoreSecurityError' has no member 'general'\n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n63 |   }\n64 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:66:13: error: type 'CoreSecurityError' has no member 'general'\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n67 |   }\n68 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:70:13: error: type 'CoreSecurityError' has no member 'general'\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n71 |   }\n72 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:15: error: cannot find type 'createPrivacyMetadata' in scope\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |               `- error: cannot find type 'createPrivacyMetadata' in scope\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:15: error: invalid redeclaration of 'notImplemented(reason:)'\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:62:27: error: cannot find type 'KeyStorageManager' in scope\n 60 |   init(\n 61 |     cryptoService: CryptoServiceProtocol,\n 62 |     keyManagementService: KeyStorageManager,\n    |                           `- error: cannot find type 'KeyStorageManager' in scope\n 63 |     logger: PrivacyAwareLoggingProtocol\n 64 |   ) {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:137:38: error: extra arguments at positions #1, #2 in call\n 135 |     )\n 136 | \n 137 |     signatureService=SignatureService(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:78:3: note: 'init(logger:)' declared here\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: 'init(logger:)' declared here\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:140:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n 140 |       logger: logger\n     |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 141 |     )\n 142 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:159:63: error: missing argument for parameter 'context' in call\n 157 |    */\n 158 |   public func initialize() async throws {\n 159 |     await logger.info(\"Initializing security provider service\")\n     |                                                               `- error: missing argument for parameter 'context' in call\n 160 | \n 161 |     // Log with secure logger for enhanced privacy awareness\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:182:75: error: missing argument for parameter 'context' in call\n 180 |     }\n 181 | \n 182 |     await logger.info(\"Security provider service initialized successfully\")\n     |                                                                           `- error: missing argument for parameter 'context' in call\n 183 | \n 184 |     // Log successful initialisation with secure logger\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:235:33: error: missing arguments for parameters 'mode', 'padding' in call\n 233 |       dataIdentifier: dataIdentifier,\n 234 |       keyIdentifier: keyIdentifier,\n 235 |       options: EncryptionOptions(algorithm: .aes256CBC)\n     |                                 `- error: missing arguments for parameters 'mode', 'padding' in call\n 236 |     )\n 237 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:105:10: note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n103 |   public let additionalAuthenticatedData: [UInt8]? // For AEAD modes like GCM\n104 | \n105 |   public init(\n    |          `- note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n106 |     algorithm: EncryptionAlgorithm,\n107 |     mode: EncryptionMode,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:248:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 246 |           return encryptedData\n 247 |         } else {\n 248 |           throw SecurityProtocolError.inputError(\"Failed to retrieve encrypted data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 249 |         }\n 250 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:271:33: error: missing arguments for parameters 'mode', 'padding' in call\n 269 |       encryptedDataIdentifier: encryptedDataIdentifier,\n 270 |       keyIdentifier: keyIdentifier,\n 271 |       options: DecryptionOptions(algorithm: .aes256CBC)\n     |                                 `- error: missing arguments for parameters 'mode', 'padding' in call\n 272 |     )\n 273 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:105:10: note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n103 |   public let additionalAuthenticatedData: [UInt8]? // For AEAD modes like GCM\n104 | \n105 |   public init(\n    |          `- note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n106 |     algorithm: EncryptionAlgorithm,\n107 |     mode: EncryptionMode,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:284:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 282 |           return decryptedData\n 283 |         } else {\n 284 |           throw SecurityProtocolError.inputError(\"Failed to retrieve decrypted data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 285 |         }\n 286 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:314:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 312 |           return signatureData\n 313 |         } else {\n 314 |           throw SecurityProtocolError.inputError(\"Failed to retrieve signature data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 315 |         }\n 316 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:368:68: error: cannot find 'createPrivacyMetadata' in scope\n 366 |     // Check if a key identifier is provided to load from key manager\n 367 |     if let keyID=config.options?.metadata?[\"keyIdentifier\"] {\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n     |                                                                    `- error: cannot find 'createPrivacyMetadata' in scope\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:370:9: error: missing argument for parameter 'source' in call\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n     |         `- error: missing argument for parameter 'source' in call\n 371 | \n 372 |       let result=await keyManager.retrieveKey(withIdentifier: keyID)\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:368:106: error: extra arguments at positions #2, #3 in call\n 366 |     // Check if a key identifier is provided to load from key manager\n 367 |     if let keyID=config.options?.metadata?[\"keyIdentifier\"] {\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n     |                                                                                                          `- error: extra arguments at positions #2, #3 in call\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:377:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 375 |           return key\n 376 |         case let .failure(error):\n 377 |           throw SecurityProtocolError.inputError(\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 378 |             \"Failed to retrieve key with identifier \\(keyID): \\(error.localizedDescription)\"\n 379 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:408:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 406 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 407 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n     |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:409:82: error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 407 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n     |                                                                                  `- error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n 411 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:410:80: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 411 |       ]\n 412 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:410:94: error: cannot convert value of type 'Bool' to expected argument type 'String'\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                              `- error: cannot convert value of type 'Bool' to expected argument type 'String'\n 411 |       ]\n 412 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:431:86: error: value of type 'SecurityResultDTO' has no member 'data'\n 429 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 430 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 431 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n     |                                                                                      `- error: value of type 'SecurityResultDTO' has no member 'data'\n 432 |         ]\n 433 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:430:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 428 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 429 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 430 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 431 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n 432 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:449:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 447 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 448 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 449 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 450 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 451 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:481:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 479 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 480 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n     |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:482:82: error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 480 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n     |                                                                                  `- error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n 484 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:483:80: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 484 |       ]\n 485 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:483:94: error: cannot convert value of type 'Bool' to expected argument type 'String'\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                              `- error: cannot convert value of type 'Bool' to expected argument type 'String'\n 484 |       ]\n 485 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:504:86: error: value of type 'SecurityResultDTO' has no member 'data'\n 502 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 503 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 504 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n     |                                                                                      `- error: value of type 'SecurityResultDTO' has no member 'data'\n 505 |         ]\n 506 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:503:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 501 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 502 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 503 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 504 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n 505 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:522:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 520 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 521 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 522 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 523 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 524 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:547:49: error: cannot find 'createPrivacyMetadata' in scope\n 545 |     // Log operation with standard logger\n 546 |     await logger.info(\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n     |                                                 `- error: cannot find 'createPrivacyMetadata' in scope\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:549:15: error: extra argument 'source' in call\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n     |               `- error: extra argument 'source' in call\n 550 | \n 551 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:547:90: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 545 |     // Log operation with standard logger\n 546 |     await logger.info(\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n     |                                                                                          `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:560:81: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 558 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 559 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 560 |         \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public),\n     |                                                                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 561 |         \"keySize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keySize), privacyLevel: .public)\n 562 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:561:81: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 559 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 560 |         \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public),\n 561 |         \"keySize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keySize), privacyLevel: .public)\n     |                                                                                 `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 562 |       ]\n 563 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:567:39: error: value of type 'any KeyManagementProtocol' has no member 'generateKey'\n 565 |     do {\n 566 |       // Process the request through the key management service\n 567 |       let result=try await keyManager.generateKey(\n     |                                       `- error: value of type 'any KeyManagementProtocol' has no member 'generateKey'\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:568:22: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 566 |       // Process the request through the key management service\n 567 |       let result=try await keyManager.generateKey(\n 568 |         type: config.keyType,\n     |                      `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 569 |         size: config.keySize,\n 570 |         metadata: config.metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:569:22: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 567 |       let result=try await keyManager.generateKey(\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n     |                      `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 570 |         metadata: config.metadata\n 571 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:570:26: error: value of type 'SecurityConfigDTO' has no member 'metadata'\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n 570 |         metadata: config.metadata\n     |                          `- error: value of type 'SecurityConfigDTO' has no member 'metadata'\n 571 |       )\n 572 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:19: error: cannot find 'createPrivacyMetadata' in scope\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                   `- error: cannot find 'createPrivacyMetadata' in scope\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:60: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                                                            `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:103: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:21: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                     `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:38: error: extra arguments at positions #1, #2 in call\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:38: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                                      `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:578:18: error: cannot infer contextual base in reference to member 'success'\n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n 578 |         status: .success,\n     |                  `- error: cannot infer contextual base in reference to member 'success'\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:592:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 590 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 591 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 592 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 593 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n 594 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:593:83: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 591 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 592 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 593 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n     |                                                                                   `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 594 |         ]\n 595 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:599:60: error: cannot find 'createPrivacyMetadata' in scope\n 597 |       // Log completion\n 598 |       await logger.info(\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n     |                                                            `- error: cannot find 'createPrivacyMetadata' in scope\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:601:17: error: extra argument 'source' in call\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n     |                 `- error: extra argument 'source' in call\n 602 | \n 603 |       return resultDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:599:101: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 597 |       // Log completion\n 598 |       await logger.info(\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n     |                                                                                                     `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:617:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 615 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 616 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 617 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 618 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 619 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:620:83: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 618 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 619 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public),\n 620 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n     |                                                                                   `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 621 |         ]\n 622 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:627:19: error: cannot find 'createPrivacyMetadata' in scope\n 625 |       await logger.error(\n 626 |         \"Key generation failed: \\(error.localizedDescription)\",\n 627 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"error\": error.localizedDescription]),\n     |                   `- error: cannot find 'createPrivacyMetadata' in scope\n 628 |         source: \"CoreSecurityProvider\"\n 629 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:627:60: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 625 |       await logger.error(\n 626 |         \"Key generation failed: \\(error.localizedDescription)\",\n 627 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"error\": error.localizedDescription]),\n     |                                                            `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 628 |         source: \"CoreSecurityProvider\"\n 629 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:644:5: warning: no calls to throwing functions occur within 'try' expression\n 642 |    */\n 643 |   public func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 644 |     try await signatureService.sign(config: config)\n     |     `- warning: no calls to throwing functions occur within 'try' expression\n 645 |   }\n 646 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:656:5: warning: no calls to throwing functions occur within 'try' expression\n 654 |    */\n 655 |   public func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 656 |     try await signatureService.verify(config: config)\n     |     `- warning: no calls to throwing functions occur within 'try' expression\n 657 |   }\n 658 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:668:30: error: value of type 'SecureStorageService' has no member 'store'\n 666 |    */\n 667 |   public func store(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 668 |     try await storageService.store(config: config)\n     |                              `- error: value of type 'SecureStorageService' has no member 'store'\n 669 |   }\n 670 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:680:30: error: value of type 'SecureStorageService' has no member 'retrieve'\n 678 |    */\n 679 |   public func retrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 680 |     try await storageService.retrieve(config: config)\n     |                              `- error: value of type 'SecureStorageService' has no member 'retrieve'\n 681 |   }\n 682 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:693:69: error: cannot find 'createPrivacyMetadata' in scope\n 691 |     let operationID=UUID().uuidString\n 692 | \n 693 |     await logger.debug(\"Starting secure store operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                     `- error: cannot find 'createPrivacyMetadata' in scope\n 694 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 695 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:702:27: error: type 'SecurityError' has no member 'invalidInput'\n 700 |       let inputData=Data(base64Encoded: dataString)\n 701 |     else {\n 702 |       throw SecurityError.invalidInput(\"Missing or invalid input data for secure storage\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 703 |     }\n 704 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:714:27: error: type 'SecurityError' has no member 'internalError'\n 712 |     // Then store the encrypted data using the key manager\n 713 |     guard let encryptedData=encryptionResult.resultData else {\n 714 |       throw SecurityError.internalError(\"Encryption successful but no encrypted data returned\")\n     |                           `- error: type 'SecurityError' has no member 'internalError'\n 715 |     }\n 716 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:718:50: error: extra arguments at positions #2, #3 in call\n 716 | \n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n     |                                                  `- error: extra arguments at positions #2, #3 in call\n 719 |       identifier: keyIdentifier,\n 720 |       keyData: encryptedData,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:20:8: note: 'storeKey(_:withIdentifier:)' declared here\n18 |   ///   - identifier: A string identifier for the key.\n19 |   /// - Returns: Success or an error.\n20 |   func storeKey(_ key: [UInt8], withIdentifier identifier: String) async\n   |        `- note: 'storeKey(_:withIdentifier:)' declared here\n21 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n22 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:719:32: error: missing argument for parameter 'withIdentifier' in call\n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n 719 |       identifier: keyIdentifier,\n     |                                `- error: missing argument for parameter 'withIdentifier' in call\n 720 |       keyData: encryptedData,\n 721 |       metadata: config.options?.metadata ?? [:]\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:20:8: note: 'storeKey(_:withIdentifier:)' declared here\n18 |   ///   - identifier: A string identifier for the key.\n19 |   /// - Returns: Success or an error.\n20 |   func storeKey(_ key: [UInt8], withIdentifier identifier: String) async\n   |        `- note: 'storeKey(_:withIdentifier:)' declared here\n21 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n22 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:719:19: error: cannot convert value of type 'String' to expected argument type '[UInt8]'\n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n 719 |       identifier: keyIdentifier,\n     |                   `- error: cannot convert value of type 'String' to expected argument type '[UInt8]'\n 720 |       keyData: encryptedData,\n 721 |       metadata: config.options?.metadata ?? [:]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:726:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 724 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 725 | \n 726 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 727 |       successful: storeResult.successful,\n 728 |       resultData: keyIdentifier.data(using: .utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:745:72: error: cannot find 'createPrivacyMetadata' in scope\n 743 |     let operationID=UUID().uuidString\n 744 | \n 745 |     await logger.debug(\"Starting secure retrieve operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n 746 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 747 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:751:27: error: type 'SecurityError' has no member 'invalidInput'\n 749 |     // Extract required parameters from configuration\n 750 |     guard let keyIdentifier=config.options?.metadata?[\"key_identifier\"] else {\n 751 |       throw SecurityError.invalidInput(\"Missing key identifier for secure retrieval\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 752 |     }\n 753 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:755:45: error: value of type 'any KeyManagementProtocol' has no member 'getKey'\n 753 | \n 754 |     // Retrieve the encrypted data using the key manager\n 755 |     let retrieveResult=try await keyManager.getKey(\n     |                                             `- error: value of type 'any KeyManagementProtocol' has no member 'getKey'\n 756 |       identifier: keyIdentifier,\n 757 |       metadata: config.options?.metadata ?? [:]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:762:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 760 |     if !retrieveResult.successful || retrieveResult.keyData == nil {\n 761 |       let errorDetails=retrieveResult.errorDetails ?? \"Failed to retrieve data\"\n 762 |       return SecurityResultDTO(\n     |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 763 |         successful: false,\n 764 |         resultData: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:780:27: error: type 'SecurityError' has no member 'internalError'\n 778 | \n 779 |     guard let keyData=retrieveResult.keyData else {\n 780 |       throw SecurityError.internalError(\"Key data missing after successful retrieval\")\n     |                           `- error: type 'SecurityError' has no member 'internalError'\n 781 |     }\n 782 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:808:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 806 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 807 | \n 808 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 809 |       successful: decryptResult.successful,\n 810 |       resultData: decryptResult.resultData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:827:70: error: cannot find 'createPrivacyMetadata' in scope\n 825 |     let operationID=UUID().uuidString\n 826 | \n 827 |     await logger.debug(\"Starting secure delete operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID\n     |                                                                      `- error: cannot find 'createPrivacyMetadata' in scope\n 828 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n 829 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:832:27: error: type 'SecurityError' has no member 'invalidInput'\n 830 |     // Extract required parameters from configuration\n 831 |     guard let keyIdentifier=config.options?.metadata?[\"key_identifier\"] else {\n 832 |       throw SecurityError.invalidInput(\"Missing key identifier for secure deletion\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 833 |     }\n 834 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:836:52: error: extra arguments at positions #1, #2 in call\n 834 | \n 835 |     // Delete the key using the key manager\n 836 |     let deleteResult=try await keyManager.deleteKey(\n     |                                                    `- error: extra arguments at positions #1, #2 in call\n 837 |       identifier: keyIdentifier,\n 838 |       metadata: config.options?.metadata ?? [:]\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:26:8: note: 'deleteKey(withIdentifier:)' declared here\n24 |   /// - Parameter identifier: A string identifying the key to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteKey(withIdentifier identifier: String) async\n   |        `- note: 'deleteKey(withIdentifier:)' declared here\n27 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n28 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:837:7: error: missing argument for parameter 'withIdentifier' in call\n 835 |     // Delete the key using the key manager\n 836 |     let deleteResult=try await keyManager.deleteKey(\n 837 |       identifier: keyIdentifier,\n     |       `- error: missing argument for parameter 'withIdentifier' in call\n 838 |       metadata: config.options?.metadata ?? [:]\n 839 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:26:8: note: 'deleteKey(withIdentifier:)' declared here\n24 |   /// - Parameter identifier: A string identifying the key to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteKey(withIdentifier identifier: String) async\n   |        `- note: 'deleteKey(withIdentifier:)' declared here\n27 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n28 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:843:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 841 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 842 | \n 843 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 844 |       successful: deleteResult.successful,\n 845 |       resultData: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:867:86: error: cannot find 'createPrivacyMetadata' in scope\n 865 |     let operationID=UUID().uuidString\n 866 | \n 867 |     await logger.debug(\"Starting secure operation: \\(operation.rawValue)\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                                      `- error: cannot find 'createPrivacyMetadata' in scope\n 868 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 869 |     ]))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:869:7: error: missing argument for parameter 'source' in call\n 867 |     await logger.debug(\"Starting secure operation: \\(operation.rawValue)\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n 868 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 869 |     ]))\n     |       `- error: missing argument for parameter 'source' in call\n 870 | \n 871 |     let result: CoreSecurityTypes.SecurityResultDTO=switch operation {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:877:19: error: cannot find 'hash' in scope\n 875 |         try await decrypt(config: config)\n 876 |       case .hashing:\n 877 |         try await hash(config: config)\n     |                   `- error: cannot find 'hash' in scope\n 878 |       case .keyGeneration:\n 879 |         try await generateKey(config: config)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:881:19: error: cannot find 'rotateKey' in scope\n 879 |         try await generateKey(config: config)\n 880 |       case .keyRotation:\n 881 |         try await rotateKey(config: config)\n     |                   `- error: cannot find 'rotateKey' in scope\n 882 |       case .keyDeletion:\n 883 |         try await secureDelete(config: config)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:872:13: error: type 'SecurityOperation' has no member 'encryption'\n 870 | \n 871 |     let result: CoreSecurityTypes.SecurityResultDTO=switch operation {\n 872 |       case .encryption:\n     |             `- error: type 'SecurityOperation' has no member 'encryption'\n 873 |         try await encrypt(config: config)\n 874 |       case .decryption:\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:897:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 895 |     updatedMetadata[\"operation_id\"]=operationID\n 896 | \n 897 |     return CoreSecurityTypes.SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 898 |       successful: result.successful,\n 899 |       resultData: result.resultData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:924:8: error: type 'SigningAlgorithm' has no member 'hmacSHA256'\n 922 |       .ed25519 // Hardware accelerated where available\n 923 |     } else {\n 924 |       .hmacSHA256 // Software implementation\n     |        `- error: type 'SigningAlgorithm' has no member 'hmacSHA256'\n 925 |     }\n 926 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:928:36: error: no type named 'HashingAlgorithm' in module 'CoreSecurityTypes'\n 926 | \n 927 |     // Determine the hashing algorithm\n 928 |     let hashing: CoreSecurityTypes.HashingAlgorithm=if options.useStrongerHashing {\n     |                                    `- error: no type named 'HashingAlgorithm' in module 'CoreSecurityTypes'\n 929 |       .sha512 // Stronger but slower\n 930 |     } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:935:25: error: cannot find 'SecurityOptions' in scope\n 933 | \n 934 |     // Create the security options with selected algorithms\n 935 |     let securityOptions=SecurityOptions(\n     |                         `- error: cannot find 'SecurityOptions' in scope\n 936 |       encryption: encryption,\n 937 |       decryption: encryption,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:944:29: error: extra arguments at positions #2, #3 in call\n 942 | \n 943 |     // Create the configuration DTO with the options\n 944 |     return SecurityConfigDTO(\n     |                             `- error: extra arguments at positions #2, #3 in call\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityConfigDTO.swift:31:10: note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n29 |      - options: Optional configuration options\n30 |    */\n31 |   public init(\n   |          `- note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n32 |     encryptionAlgorithm: EncryptionAlgorithm,\n33 |     hashAlgorithm: HashAlgorithm,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:944:29: error: missing arguments for parameters 'encryptionAlgorithm', 'hashAlgorithm', 'providerType' in call\n 942 | \n 943 |     // Create the configuration DTO with the options\n 944 |     return SecurityConfigDTO(\n     |                             `- error: missing arguments for parameters 'encryptionAlgorithm', 'hashAlgorithm', 'providerType' in call\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityConfigDTO.swift:31:10: note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n29 |      - options: Optional configuration options\n30 |    */\n31 |   public init(\n   |          `- note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n32 |     encryptionAlgorithm: EncryptionAlgorithm,\n33 |     hashAlgorithm: HashAlgorithm,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:946:21: error: value of type 'SecurityConfigOptions' has no member 'data'\n 944 |     return SecurityConfigDTO(\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n     |                     `- error: value of type 'SecurityConfigOptions' has no member 'data'\n 947 |       outputFormat: options.outputFormat ?? .binary\n 948 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:947:29: error: value of type 'SecurityConfigOptions' has no member 'outputFormat'\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n 947 |       outputFormat: options.outputFormat ?? .binary\n     |                             `- error: value of type 'SecurityConfigOptions' has no member 'outputFormat'\n 948 |     )\n 949 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:947:46: error: cannot infer contextual base in reference to member 'binary'\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n 947 |       outputFormat: options.outputFormat ?? .binary\n     |                                              `- error: cannot infer contextual base in reference to member 'binary'\n 948 |     )\n 949 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:963:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 961 | \n 962 |     // Map known error types to appropriate security errors\n 963 |     if let nsError=error as? NSError {\n     |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 964 |       switch nsError.domain {\n 965 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:966:19: error: type 'SecurityProtocolError' has no member 'networkError'\n 964 |       switch nsError.domain {\n 965 |         case NSURLErrorDomain:\n 966 |           return .networkError(\n     |                   `- error: type 'SecurityProtocolError' has no member 'networkError'\n 967 |             \"Network error during security operation: \\(nsError.localizedDescription)\"\n 968 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:970:19: error: type 'SecurityProtocolError' has no member 'systemError'\n 968 |           )\n 969 |         case NSOSStatusErrorDomain:\n 970 |           return .systemError(\n     |                   `- error: type 'SecurityProtocolError' has no member 'systemError'\n 971 |             \"System error during security operation: \\(nsError.localizedDescription)\"\n 972 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:979:13: error: type 'SecurityProtocolError' has no member 'generalError'\n 977 | \n 978 |     // Default error mapping\n 979 |     return .generalError(\"Security operation failed: \\(error.localizedDescription)\")\n     |             `- error: type 'SecurityProtocolError' has no member 'generalError'\n 980 |   }\n 981 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:32: error: extra argument 'errorCode' in call\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                `- error: extra argument 'errorCode' in call\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:36: error: missing argument for parameter 'executionTimeMs' in call\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                    `- error: missing argument for parameter 'executionTimeMs' in call\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityResultDTO.swift:55:22: note: 'failure(errorDetails:executionTimeMs:metadata:)' declared here\n53 |      - metadata: Optional additional metadata\n54 |    */\n55 |   public static func failure(\n   |                      `- note: 'failure(errorDetails:executionTimeMs:metadata:)' declared here\n56 |     errorDetails: String,\n57 |     executionTimeMs: Double,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:32: error: value of type 'SecurityProtocolError' has no member 'code'\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                `- error: value of type 'SecurityProtocolError' has no member 'code'\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1031:21: error: pattern with associated values does not match enum case 'encrypt'\n1029 |       let result: SecurityResultDTO=try await {\n1030 |         switch operation {\n1031 |           case let .encrypt(data, key, algorithm):\n     |                     |- error: pattern with associated values does not match enum case 'encrypt'\n     |                     `- note: remove associated values to make the pattern match\n1032 |             let config=SecurityConfigDTO(\n1033 |               operationType: .encrypt,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:49: error: extra arguments at positions #1, #2 in call\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |                                                 `- error: extra arguments at positions #1, #2 in call\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:49: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |                                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1133:18: error: cannot infer contextual base in reference to member 'failure'\n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n1133 |         status: .failure,\n     |                  `- error: cannot infer contextual base in reference to member 'failure'\n1134 |         error: error.localizedDescription,\n1135 |         metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1145:13: error: type 'CoreSecurityError' has no member 'general'\n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1146 |   }\n1147 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1149:13: error: type 'CoreSecurityError' has no member 'general'\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1150 |   }\n1151 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1153:13: error: type 'CoreSecurityError' has no member 'general'\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1154 |   }\n1155 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:15: error: invalid redeclaration of 'notImplemented(reason:)'\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:123:121: error: extra argument 'source' in call\n121 |     )\n122 | \n123 |     await logger.info(\"Starting encryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                         `- error: extra argument 'source' in call\n124 | \n125 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:123:66: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n121 |     )\n122 | \n123 |     await logger.info(\"Starting encryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                  `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n124 | \n125 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:134:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n132 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n133 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n134 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n    |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n135 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n136 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:135:90: error: value of type 'SecurityConfigOptions?' has no subscripts\n133 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n134 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n135 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n    |                                                                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n136 |       ]\n137 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:142:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n140 |       // Extract required parameters from configuration\n141 |       guard\n142 |         let inputDataString=config.options[\"data\"],\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n143 |         let inputData=Data(base64Encoded: inputDataString)\n144 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:171:33: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n169 |       // Choose encryption key\n170 |       let keyIdentifier: String\n171 |       if let configKeyID=config.keyIdentifier {\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n172 |         keyIdentifier=configKeyID\n173 |       } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:210:19: error: cannot find 'createPrivacyMetadata' in scope\n208 |         status: .success,\n209 |         data: encryptedData,\n210 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n211 |           \"operationID\": operationID,\n212 |           \"durationMs\": String(Int(duration * 1000))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:35: error: extra arguments at positions #1, #2 in call\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:208:18: error: cannot infer contextual base in reference to member 'success'\n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n208 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n209 |         data: encryptedData,\n210 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:225:72: error: type 'PrivacyMetadataValue' has no member 'int'\n223 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n224 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n225 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n226 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(encryptedData.count), privacyLevel: .public)\n227 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:226:72: error: type 'PrivacyMetadataValue' has no member 'int'\n224 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n225 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n226 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(encryptedData.count), privacyLevel: .public)\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n227 |         ]\n228 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:232:56: error: cannot find 'createPrivacyMetadata' in scope\n230 |       // Log success\n231 |       await logger.info(\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n234 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:234:11: error: missing argument for parameter 'source' in call\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n234 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n235 |       )\n236 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:233:35: error: extra arguments at positions #2, #3 in call\n231 |       await logger.info(\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n    |                                   `- error: extra arguments at positions #2, #3 in call\n234 |         ])\n235 |       )\n\nSwift.Int.init:2:8: note: 'init(_:)' declared here\n1 | struct Int {\n2 | public init(_ source: Double)}\n  |        `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:255:72: error: type 'PrivacyMetadataValue' has no member 'int'\n253 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n254 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n255 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n256 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n257 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:264:19: error: cannot find 'createPrivacyMetadata' in scope\n262 |       await logger.error(\n263 |         \"Encryption failed: \\(error.localizedDescription)\",\n264 |         metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n265 |           \"durationMs\": String(Int(duration * 1000)),\n266 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:267:11: error: missing argument for parameter 'source' in call\n265 |           \"durationMs\": String(Int(duration * 1000)),\n266 |           \"error\": error.localizedDescription\n267 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n268 |       )\n269 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:274:19: error: cannot find 'createPrivacyMetadata' in scope\n272 |         status: .failure,\n273 |         data: nil,\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n275 |           \"operationID\": operationID,\n276 |           \"durationMs\": String(Int(duration * 1000)),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:35: error: extra arguments at positions #1, #2 in call\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:272:18: error: cannot infer contextual base in reference to member 'failure'\n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n272 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n273 |         data: nil,\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:273:15: error: 'nil' requires a contextual type\n271 |       let result=SecurityResultDTO(\n272 |         status: .failure,\n273 |         data: nil,\n    |               `- error: 'nil' requires a contextual type\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n275 |           \"operationID\": operationID,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:242:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n240 | \n241 |       return result\n242 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n243 |       // Calculate duration for metrics\n244 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:303:121: error: extra argument 'source' in call\n301 |     )\n302 | \n303 |     await logger.info(\"Starting decryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                         `- error: extra argument 'source' in call\n304 | \n305 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:303:66: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n301 |     )\n302 | \n303 |     await logger.info(\"Starting decryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                  `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n304 | \n305 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:314:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n312 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n313 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n314 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n    |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n315 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n316 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:315:90: error: value of type 'SecurityConfigOptions?' has no subscripts\n313 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n314 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n315 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n    |                                                                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n316 |       ]\n317 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:322:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n320 |       // Extract required parameters from configuration\n321 |       guard\n322 |         let inputDataString=config.options[\"data\"],\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n323 |         let inputData=Data(base64Encoded: inputDataString)\n324 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:351:33: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n349 |       // Choose decryption key\n350 |       let keyIdentifier: String\n351 |       if let configKeyID=config.keyIdentifier {\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n352 |         keyIdentifier=configKeyID\n353 |       } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:390:19: error: cannot find 'createPrivacyMetadata' in scope\n388 |         status: .success,\n389 |         data: decryptedData,\n390 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n391 |           \"operationID\": operationID,\n392 |           \"durationMs\": String(Int(duration * 1000))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:35: error: extra arguments at positions #1, #2 in call\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:388:18: error: cannot infer contextual base in reference to member 'success'\n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n388 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n389 |         data: decryptedData,\n390 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:405:72: error: type 'PrivacyMetadataValue' has no member 'int'\n403 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n404 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n405 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n406 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(decryptedData.count), privacyLevel: .public)\n407 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:406:72: error: type 'PrivacyMetadataValue' has no member 'int'\n404 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n405 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n406 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(decryptedData.count), privacyLevel: .public)\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n407 |         ]\n408 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:412:56: error: cannot find 'createPrivacyMetadata' in scope\n410 |       // Log success\n411 |       await logger.info(\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n414 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:414:11: error: missing argument for parameter 'source' in call\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n414 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n415 |       )\n416 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:413:35: error: extra arguments at positions #2, #3 in call\n411 |       await logger.info(\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n    |                                   `- error: extra arguments at positions #2, #3 in call\n414 |         ])\n415 |       )\n\nSwift.Int.init:2:8: note: 'init(_:)' declared here\n1 | struct Int {\n2 | public init(_ source: Double)}\n  |        `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:435:72: error: type 'PrivacyMetadataValue' has no member 'int'\n433 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n434 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n435 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n436 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n437 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:444:19: error: cannot find 'createPrivacyMetadata' in scope\n442 |       await logger.error(\n443 |         \"Decryption failed: \\(error.localizedDescription)\",\n444 |         metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n445 |           \"durationMs\": String(Int(duration * 1000)),\n446 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:447:11: error: missing argument for parameter 'source' in call\n445 |           \"durationMs\": String(Int(duration * 1000)),\n446 |           \"error\": error.localizedDescription\n447 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n448 |       )\n449 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:454:19: error: cannot find 'createPrivacyMetadata' in scope\n452 |         status: .failure,\n453 |         data: nil,\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n455 |           \"operationID\": operationID,\n456 |           \"durationMs\": String(Int(duration * 1000)),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:35: error: extra arguments at positions #1, #2 in call\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:452:18: error: cannot infer contextual base in reference to member 'failure'\n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n452 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n453 |         data: nil,\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:453:15: error: 'nil' requires a contextual type\n451 |       let result=SecurityResultDTO(\n452 |         status: .failure,\n453 |         data: nil,\n    |               `- error: 'nil' requires a contextual type\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n455 |           \"operationID\": operationID,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:422:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n420 | \n421 |       return result\n422 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n423 |       // Calculate duration for metrics\n424 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:494:52: error: extra arguments at positions #1, #2 in call\n492 | \n493 |       // Try the standard protocol method signature which returns a Result type\n494 |       let encryptResult=await cryptoService.encrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n495 | \n496 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:494:52: error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n492 | \n493 |       // Try the standard protocol method signature which returns a Result type\n494 |       let encryptResult=await cryptoService.encrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n495 | \n496 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:541:52: error: extra arguments at positions #1, #2 in call\n539 | \n540 |       // Try the standard protocol method signature which returns a Result type\n541 |       let decryptResult=await cryptoService.decrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n542 | \n543 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:541:52: error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n539 | \n540 |       // Try the standard protocol method signature which returns a Result type\n541 |       let decryptResult=await cryptoService.decrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n542 | \n543 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:592:35: error: type 'SecurityProtocolError' has no member 'keyNotFound'\n590 |   func retrieve(withIdentifier identifier: String) throws -\u003e Data {\n591 |     guard let data=storage[identifier] else {\n592 |       throw SecurityProtocolError.keyNotFound\n    |                                   `- error: type 'SecurityProtocolError' has no member 'keyNotFound'\n593 |     }\n594 |     return data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:606:13: error: type 'CoreSecurityError' has no member 'general'\n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n607 |   }\n608 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:610:13: error: type 'CoreSecurityError' has no member 'general'\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n611 |   }\n612 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:614:13: error: type 'CoreSecurityError' has no member 'general'\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n615 |   }\n616 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:82:118: error: extra argument 'source' in call\n 80 |     )\n 81 | \n 82 |     await logger.info(\"Starting hashing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                      `- error: extra argument 'source' in call\n 83 | \n 84 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:82:63: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 80 |     )\n 81 | \n 82 |     await logger.info(\"Starting hashing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                               `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 83 | \n 84 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:87:38: error: value of type 'SecurityConfigOptions?' has no subscripts\n 85 |       // Extract required parameters from configuration\n 86 |       guard\n 87 |         let dataString=config.options[\"data\"],\n    |                                      `- error: value of type 'SecurityConfigOptions?' has no subscripts\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n 89 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:88:46: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n 86 |       guard\n 87 |         let dataString=config.options[\"data\"],\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n    |                                              `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n 89 |       else {\n 90 |         throw SecurityError.invalidInput(\"Missing or invalid input data for hashing\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:90:29: error: type 'SecurityError' has no member 'invalidInput'\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n 89 |       else {\n 90 |         throw SecurityError.invalidInput(\"Missing or invalid input data for hashing\")\n    |                             `- error: type 'SecurityError' has no member 'invalidInput'\n 91 |       }\n 92 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:94:56: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 92 | \n 93 |       // Determine hash algorithm to use\n 94 |       let hashAlgorithm=HashAlgorithm(rawValue: config.algorithm) ?? HashAlgorithm.sha256\n    |                                                        `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 95 | \n 96 |       // Perform the hashing operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:97:50: error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n 95 | \n 96 |       // Perform the hashing operation\n 97 |       let hashResult=try await cryptoService.hash(inputData, algorithm: hashAlgorithm.rawValue)\n    |                                                  `- error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n 98 | \n 99 |       // Calculate duration for performance metrics\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:107:11: error: missing argument for parameter 'source' in call\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n107 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n108 |       )\n109 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:104:75: error: value of type 'LogMetadata' has no member 'merging'\n102 |       // Log successful operation\n103 |       await logger.info(\n104 |         \"Completed hashing operation successfully\", metadata: logMetadata.merging([\n    |                                                                           `- error: value of type 'LogMetadata' has no member 'merging'\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:105:25: error: extra arguments at positions #2, #3 in call\n103 |       await logger.info(\n104 |         \"Completed hashing operation successfully\", metadata: logMetadata.merging([\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n    |                         `- error: extra arguments at positions #2, #3 in call\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n107 |         ])\n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:31: error: extra arguments at positions #1, #2, #3, #4 in call\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2, #3, #4 in call\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:126:11: error: missing argument for parameter 'source' in call\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n125 |           \"error\": error.localizedDescription\n126 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n127 |       )\n128 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:123:107: error: value of type 'LogMetadata' has no member 'merging'\n121 | \n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n    |                                                                                                           `- error: value of type 'LogMetadata' has no member 'merging'\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n125 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:31: error: extra arguments at positions #1, #2, #3, #4 in call\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2, #3, #4 in call\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:118:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n116 |       )\n117 | \n118 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n119 |       // Calculate duration even for failed operations\n120 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:163:122: error: extra argument 'source' in call\n161 |     ]\n162 | \n163 |     await logger.info(\"Starting direct hash operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                          `- error: extra argument 'source' in call\n164 | \n165 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:163:67: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n161 |     ]\n162 | \n163 |     await logger.info(\"Starting direct hash operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                   `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n164 | \n165 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:50: error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                  `- error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:51: error: cannot convert value of type 'SendableCryptoMaterial' to expected argument type 'String'\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                   `- error: cannot convert value of type 'SendableCryptoMaterial' to expected argument type 'String'\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:78: error: cannot convert value of type 'String' to expected argument type 'HashingOptions'\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                                              `- error: cannot convert value of type 'String' to expected argument type 'HashingOptions'\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:170: error: missing argument for parameter 'source' in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                                                                                                          `- error: missing argument for parameter 'source' in call\n173 |       )\n174 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:66: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                  `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n173 |       )\n174 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:169: error: missing argument for parameter 'uniquingKeysWith' in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                                                                                                         `- error: missing argument for parameter 'uniquingKeysWith' in call\n173 |       )\n174 | \n\nSwift.Dictionary.merging:2:36: note: 'merging(_:uniquingKeysWith:)' declared here\n1 | generic struct Dictionary {\n2 | @inlinable public __consuming func merging(_ other: __owned [Key : Value], uniquingKeysWith combine: (Value, Value) throws -\u003e Value) rethrows -\u003e [Key : Value]}\n  |                                    `- note: 'merging(_:uniquingKeysWith:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:89: error: extra arguments at positions #2, #3 in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                         `- error: extra arguments at positions #2, #3 in call\n173 |       )\n174 | \n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:182:11: error: missing argument for parameter 'source' in call\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n182 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n183 |       )\n184 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:179:111: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n177 |       // Log error\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n    |                                                                                                               `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:182:10: error: missing argument for parameter 'uniquingKeysWith' in call\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n182 |         ])\n    |          `- error: missing argument for parameter 'uniquingKeysWith' in call\n183 |       )\n184 | \n\nSwift.Dictionary.merging:2:36: note: 'merging(_:uniquingKeysWith:)' declared here\n1 | generic struct Dictionary {\n2 | @inlinable public __consuming func merging(_ other: __owned [Key : Value], uniquingKeysWith combine: (Value, Value) throws -\u003e Value) rethrows -\u003e [Key : Value]}\n  |                                    `- note: 'merging(_:uniquingKeysWith:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:205:13: error: type 'CoreSecurityError' has no member 'general'\n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n206 |   }\n207 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:209:13: error: type 'CoreSecurityError' has no member 'general'\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n210 |   }\n211 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:213:13: error: type 'CoreSecurityError' has no member 'general'\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n214 |   }\n215 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:15: error: invalid redeclaration of 'notImplemented(reason:)'\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:100:18: error: cannot convert value of type 'String' to expected argument type 'SecurityOperation'\n 98 |     let logMetadata=createOperationMetadata(\n 99 |       operationID: operationID,\n100 |       operation: operation,\n    |                  `- error: cannot convert value of type 'String' to expected argument type 'SecurityOperation'\n101 |       config: config\n102 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:104:125: error: extra argument 'source' in call\n102 |     )\n103 | \n104 |     await logger.info(\"Starting key generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                             `- error: extra argument 'source' in call\n105 | \n106 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:108:26: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n106 |     do {\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n    |                          `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n110 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:108:47: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n106 |     do {\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n    |                                               `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n110 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:109:28: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n    |                            `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n110 | \n111 |       // Use SendableCryptoMaterial instead of SecureBytes\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:109:63: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n    |                                                               `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n110 | \n111 |       // Use SendableCryptoMaterial instead of SecureBytes\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:114:13: error: cannot find 'secureRandomMaterial' in scope\n112 |       // In a production implementation, this would use a secure random generator\n113 |       let keyMaterial: SendableCryptoMaterial=if keySize \u003e 0 {\n114 |         try secureRandomMaterial(byteCount: keySize / 8)\n    |             `- error: cannot find 'secureRandomMaterial' in scope\n115 |       } else {\n116 |         SendableCryptoMaterial.zeros(count: 32) // Default to 256 bits (32 bytes)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:120:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n118 | \n119 |       // Store the key if an identifier is provided\n120 |       if let keyIdentifier=config.options[\"keyIdentifier\"] {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n121 |         let storageResult=await keyManager.secureStorage.storeMaterial(\n122 |           keyMaterial,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:121:44: error: value of type 'any KeyManagementProtocol' has no member 'secureStorage'\n119 |       // Store the key if an identifier is provided\n120 |       if let keyIdentifier=config.options[\"keyIdentifier\"] {\n121 |         let storageResult=await keyManager.secureStorage.storeMaterial(\n    |                                            `- error: value of type 'any KeyManagementProtocol' has no member 'secureStorage'\n122 |           keyMaterial,\n123 |           withIdentifier: keyIdentifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:126:31: error: type 'SecurityError' has no member 'keyStorage'\n124 |         )\n125 |         if case let .failure(error)=storageResult {\n126 |           throw SecurityError.keyStorage(error.description)\n    |                               `- error: type 'SecurityError' has no member 'keyStorage'\n127 |         }\n128 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:134:58: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n132 | \n133 |       // Create success metadata for logging\n134 |       let successMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                          `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n135 |         \"operationId\": operationID,\n136 |         \"operation\": operation,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:142:51: error: extra argument 'source' in call\n140 |       await logger.info(\n141 |         \"Key generation completed successfully\", metadata: successMetadata\n142 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                   `- error: extra argument 'source' in call\n143 | \n144 |       // Return successful result with the generated key metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:141:60: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n139 | \n140 |       await logger.info(\n141 |         \"Key generation completed successfully\", metadata: successMetadata\n    |                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n142 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n143 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:148:19: error: cannot find 'createPrivacyMetadata' in scope\n146 |         status: .success,\n147 |         data: keyMaterial,\n148 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n149 |           \"keySize\": \"\\(keySize)\",\n150 |           \"algorithm\": algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:31: error: extra arguments at positions #1, #2 in call\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:146:18: error: cannot infer contextual base in reference to member 'success'\n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n146 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n147 |         data: keyMaterial,\n148 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:158:56: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n156 | \n157 |       // Create failure metadata for logging\n158 |       let errorMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                        `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n159 |         \"operationId\": operationID,\n160 |         \"operation\": operation,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:165:105: error: missing argument for parameter 'source' in call\n163 |       ]\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                         `- error: missing argument for parameter 'source' in call\n166 |       , source: \\\"SecurityImplementation\\\")\n167 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:165:92: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n163 |       ]\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n166 |       , source: \\\"SecurityImplementation\\\")\n167 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:192:52: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n190 | \n191 |     // Create metadata for logging\n192 |     let logMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                    `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n193 |       \"operationId\": operationID,\n194 |       \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:199:133: error: extra argument 'source' in call\n197 |     ]\n198 | \n199 |     await logger.info(\"Starting random data generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                                     `- error: extra argument 'source' in call\n200 | \n201 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:199:78: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n197 |     ]\n198 | \n199 |     await logger.info(\"Starting random data generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                              `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n200 | \n201 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:204:29: error: type 'SecurityError' has no member 'invalidInput'\n202 |       // Validate parameters\n203 |       if length \u003c= 0 {\n204 |         throw SecurityError.invalidInput(\"Invalid length for random data generation: \\(length)\")\n    |                             `- error: type 'SecurityError' has no member 'invalidInput'\n205 |       }\n206 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:209:30: error: cannot find 'secureRandomMaterial' in scope\n207 |       // Use SendableCryptoMaterial instead of SecureBytes\n208 |       // In a production implementation, this would use a secure random generator\n209 |       let randomMaterial=try secureRandomMaterial(byteCount: length)\n    |                              `- error: cannot find 'secureRandomMaterial' in scope\n210 | \n211 |       // Calculate duration for performance metrics\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:215:58: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n213 | \n214 |       // Create success metadata for logging\n215 |       let successMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                          `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n216 |         \"operationId\": operationID,\n217 |         \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:224:51: error: extra argument 'source' in call\n222 |       await logger.info(\n223 |         \"Random data generation completed successfully\", metadata: successMetadata\n224 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                   `- error: extra argument 'source' in call\n225 | \n226 |       // Return successful result with the generated random data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:223:68: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n221 | \n222 |       await logger.info(\n223 |         \"Random data generation completed successfully\", metadata: successMetadata\n    |                                                                    `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n224 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n225 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:230:19: error: cannot find 'createPrivacyMetadata' in scope\n228 |         status: .success,\n229 |         data: randomMaterial,\n230 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n231 |           \"length\": \"\\(length)\"\n232 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:31: error: extra arguments at positions #1, #2 in call\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:228:18: error: cannot infer contextual base in reference to member 'success'\n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n228 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n229 |         data: randomMaterial,\n230 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:239:56: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n237 | \n238 |       // Create failure metadata for logging\n239 |       let errorMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                        `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n240 |         \"operationId\": operationID,\n241 |         \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:246:113: error: missing argument for parameter 'source' in call\n244 |       ]\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                                 `- error: missing argument for parameter 'source' in call\n247 |       , source: \\\"SecurityImplementation\\\")\n248 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:246:100: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n244 |       ]\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                    `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n247 |       , source: \\\"SecurityImplementation\\\")\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:265:13: error: type 'CoreSecurityError' has no member 'general'\n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n266 |   }\n267 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:269:13: error: type 'CoreSecurityError' has no member 'general'\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n270 |   }\n271 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:273:13: error: type 'CoreSecurityError' has no member 'general'\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n274 |   }\n275 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:29: error: cannot find type 'createPrivacyMetadata' in scope\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                             `- error: cannot find type 'createPrivacyMetadata' in scope\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:15: error: invalid redeclaration of 'notImplemented(reason:)'\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:95:22: error: extra arguments at positions #4, #5 in call\n 93 |     )\n 94 | \n 95 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n 96 |       \"Starting secure storage operation\", metadata: logMetadata,\n 97 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:96:54: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 94 | \n 95 |     await logger.info(\n 96 |       \"Starting secure storage operation\", metadata: logMetadata,\n    |                                                      `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 97 |       source: \"SecureStorageService\"\n 98 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:102:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n100 |     do {\n101 |       // Extract required parameters from configuration\n102 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n103 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n104 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:106:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n104 |       }\n105 | \n106 |       guard let dataToStore=config.options[\"data\"].flatMap({ Data(base64Encoded: $0) })\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n107 |       else {\n108 |         throw SecureStorageError.invalidInput(\"Missing or invalid data for storage\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:117:52: error: extra arguments at positions #1, #2 in call\n115 | \n116 |       // Encrypt the data before storage\n117 |       let encryptResult=await cryptoService.encrypt(data: dataToStore, using: storageKey)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n118 | \n119 |       switch encryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:117:52: error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n115 | \n116 |       // Encrypt the data before storage\n117 |       let encryptResult=await cryptoService.encrypt(data: dataToStore, using: storageKey)\n    |                                                    `- error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n118 | \n119 |       switch encryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:130:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:130:45: error: type 'String?' has no member 'string'\n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                                             `- error: type 'String?' has no member 'string'\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:131:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:131:43: error: type 'String?' has no member 'string'\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                           `- error: type 'String?' has no member 'string'\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:132:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:132:51: error: type 'String?' has no member 'string'\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                                   `- error: type 'String?' has no member 'string'\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:133:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n134 | \n135 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:133:44: error: type 'String?' has no member 'string'\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                            `- error: type 'String?' has no member 'string'\n134 | \n135 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:135:28: error: extra arguments at positions #4, #5 in call\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n135 |           await logger.info(\n    |                            `- error: extra arguments at positions #4, #5 in call\n136 |             \"Secure storage operation completed successfully\", metadata: successMetadata,\n137 |             source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:136:74: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n134 | \n135 |           await logger.info(\n136 |             \"Secure storage operation completed successfully\", metadata: successMetadata,\n    |                                                                          `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n137 |             source: \"SecureStorageService\"\n138 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:143:23: error: cannot find 'createPrivacyMetadata' in scope\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                       `- error: cannot find 'createPrivacyMetadata' in scope\n144 |               \"storageIdentifier\": identifier,\n145 |               \"storedBytes\": \"\\(storedBytes)\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:141:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n139 | \n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:142:22: error: extra argument 'status' in call\n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n    |                      `- error: extra argument 'status' in call\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n144 |               \"storageIdentifier\": identifier,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:141:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n139 | \n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:142:22: error: cannot infer contextual base in reference to member 'success'\n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n    |                      `- error: cannot infer contextual base in reference to member 'success'\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n144 |               \"storageIdentifier\": identifier,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:158:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:158:39: error: type 'String?' has no member 'string'\n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:159:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:159:37: error: type 'String?' has no member 'string'\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:160:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:160:38: error: type 'String?' has no member 'string'\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:161:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n162 | \n163 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:161:37: error: type 'String?' has no member 'string'\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n162 | \n163 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:165:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n163 |       await logger.error(\n164 |         \"Secure storage operation failed: \\(error.localizedDescription)\",\n165 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n166 |         source: \"SecureStorageService\"\n167 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:173:19: error: cannot find 'createPrivacyMetadata' in scope\n171 |         status: .failure,\n172 |         error: error,\n173 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n174 |           \"errorMessage\": error.localizedDescription\n175 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:31: error: extra arguments at positions #1, #2 in call\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:171:18: error: cannot infer contextual base in reference to member 'failure'\n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n171 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n172 |         error: error,\n173 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:152:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n150 |           throw SecureStorageError.encryptionError(\"Failed to encrypt data: \\(error)\")\n151 |       }\n152 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n153 |       // Calculate duration before failure\n154 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:198:22: error: extra arguments at positions #4, #5 in call\n196 |     )\n197 | \n198 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n199 |       \"Starting secure retrieval operation\", metadata: logMetadata,\n200 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:199:56: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n197 | \n198 |     await logger.info(\n199 |       \"Starting secure retrieval operation\", metadata: logMetadata,\n    |                                                        `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n200 |       source: \"SecureStorageService\"\n201 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:205:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n203 |     do {\n204 |       // Extract required parameters from configuration\n205 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n206 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n207 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:209:35: error: value of type 'SecurityConfigOptions?' has no subscripts\n207 |       }\n208 | \n209 |       guard let key=config.options[\"key\"].flatMap({ Data(base64Encoded: $0) }) else {\n    |                                   `- error: value of type 'SecurityConfigOptions?' has no subscripts\n210 |         throw SecureStorageError.invalidInput(\"Missing decryption key\")\n211 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:235:52: error: extra arguments at positions #1, #2 in call\n233 | \n234 |       // Decrypt the data\n235 |       let decryptResult=await cryptoService.decrypt(data: encryptedData, using: key)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n236 | \n237 |       switch decryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:235:52: error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n233 | \n234 |       // Decrypt the data\n235 |       let decryptResult=await cryptoService.decrypt(data: encryptedData, using: key)\n    |                                                    `- error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n236 | \n237 |       switch decryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:244:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:244:45: error: type 'String?' has no member 'string'\n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                                             `- error: type 'String?' has no member 'string'\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:245:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:245:43: error: type 'String?' has no member 'string'\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                           `- error: type 'String?' has no member 'string'\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:246:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:246:51: error: type 'String?' has no member 'string'\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                                   `- error: type 'String?' has no member 'string'\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:247:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n248 | \n249 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:247:44: error: type 'String?' has no member 'string'\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                            `- error: type 'String?' has no member 'string'\n248 | \n249 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:249:28: error: extra arguments at positions #4, #5 in call\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n249 |           await logger.info(\n    |                            `- error: extra arguments at positions #4, #5 in call\n250 |             \"Secure retrieval operation completed successfully\", metadata: successMetadata,\n251 |             source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:250:76: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n248 | \n249 |           await logger.info(\n250 |             \"Secure retrieval operation completed successfully\", metadata: successMetadata,\n    |                                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n251 |             source: \"SecureStorageService\"\n252 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:258:23: error: cannot find 'createPrivacyMetadata' in scope\n256 |             status: .success,\n257 |             data: decryptedData,\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                       `- error: cannot find 'createPrivacyMetadata' in scope\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:35: error: extra arguments at positions #1, #2 in call\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:256:22: error: cannot infer contextual base in reference to member 'success'\n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n256 |             status: .success,\n    |                      `- error: cannot infer contextual base in reference to member 'success'\n257 |             data: decryptedData,\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:273:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:273:39: error: type 'String?' has no member 'string'\n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:274:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:274:37: error: type 'String?' has no member 'string'\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:275:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:275:38: error: type 'String?' has no member 'string'\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:276:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:276:37: error: type 'String?' has no member 'string'\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:277:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n278 | \n279 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:277:40: error: type 'String?' has no member 'string'\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                                        `- error: type 'String?' has no member 'string'\n278 | \n279 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:281:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n279 |       await logger.error(\n280 |         \"Secure retrieval operation failed: \\(error.localizedDescription)\",\n281 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n282 |         source: \"SecureStorageService\"\n283 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:289:19: error: cannot find 'createPrivacyMetadata' in scope\n287 |         status: .failure,\n288 |         error: error,\n289 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n290 |           \"errorMessage\": error.localizedDescription\n291 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:31: error: extra arguments at positions #1, #2 in call\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:287:18: error: cannot infer contextual base in reference to member 'failure'\n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n287 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n288 |         error: error,\n289 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:267:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n265 |           throw SecureStorageError.decryptionError(\"Failed to decrypt data: \\(error)\")\n266 |       }\n267 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n268 |       // Calculate duration before failure\n269 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:314:22: error: extra arguments at positions #4, #5 in call\n312 |     )\n313 | \n314 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n315 |       \"Starting secure deletion operation\", metadata: logMetadata,\n316 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:315:55: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n313 | \n314 |     await logger.info(\n315 |       \"Starting secure deletion operation\", metadata: logMetadata,\n    |                                                       `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n316 |       source: \"SecureStorageService\"\n317 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:321:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n319 |     do {\n320 |       // Extract required parameters from configuration\n321 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n322 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n323 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:339:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:339:41: error: type 'String?' has no member 'string'\n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n    |                                         `- error: type 'String?' has no member 'string'\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:340:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:340:39: error: type 'String?' has no member 'string'\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                       `- error: type 'String?' has no member 'string'\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:341:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:341:47: error: type 'String?' has no member 'string'\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                               `- error: type 'String?' has no member 'string'\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:342:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n343 | \n344 |       await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:342:40: error: type 'String?' has no member 'string'\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                        `- error: type 'String?' has no member 'string'\n343 | \n344 |       await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:344:24: error: extra arguments at positions #4, #5 in call\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n344 |       await logger.info(\n    |                        `- error: extra arguments at positions #4, #5 in call\n345 |         \"Secure deletion operation completed successfully\", metadata: successMetadata,\n346 |         source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:345:71: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n343 | \n344 |       await logger.info(\n345 |         \"Secure deletion operation completed successfully\", metadata: successMetadata,\n    |                                                                       `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n346 |         source: \"SecureStorageService\"\n347 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:352:19: error: cannot find 'createPrivacyMetadata' in scope\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n353 |           \"storageIdentifier\": identifier\n354 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:350:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n348 | \n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:351:18: error: extra argument 'status' in call\n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n    |                  `- error: extra argument 'status' in call\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n353 |           \"storageIdentifier\": identifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:350:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n348 | \n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:351:18: error: cannot infer contextual base in reference to member 'success'\n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n353 |           \"storageIdentifier\": identifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:362:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:362:39: error: type 'String?' has no member 'string'\n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:363:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:363:37: error: type 'String?' has no member 'string'\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:364:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:364:38: error: type 'String?' has no member 'string'\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:365:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n367 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:365:37: error: type 'String?' has no member 'string'\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n367 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:366:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n367 | \n368 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:366:40: error: type 'String?' has no member 'string'\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                                        `- error: type 'String?' has no member 'string'\n367 | \n368 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:370:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n368 |       await logger.error(\n369 |         \"Secure deletion operation failed: \\(error.localizedDescription)\",\n370 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n371 |         source: \"SecureStorageService\"\n372 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:378:19: error: cannot find 'createPrivacyMetadata' in scope\n376 |         status: .failure,\n377 |         error: error,\n378 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n379 |           \"errorMessage\": error.localizedDescription\n380 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:31: error: extra arguments at positions #1, #2 in call\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:376:18: error: cannot infer contextual base in reference to member 'failure'\n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n376 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n377 |         error: error,\n378 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:356:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n354 |         ])\n355 |       )\n356 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n357 |       // Calculate duration before failure\n358 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:467:13: error: type 'CoreSecurityError' has no member 'general'\n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n468 |   }\n469 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:471:13: error: type 'CoreSecurityError' has no member 'general'\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n472 |   }\n473 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:475:13: error: type 'CoreSecurityError' has no member 'general'\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n476 |   }\n477 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:78:12: error: cannot find 'createPrivacyMetadata' in scope\n 76 |     config: SecurityConfigDTO\n 77 |   ) -\u003e LoggingInterfaces.LogMetadata {\n 78 |     return createPrivacyMetadata([\n    |            `- error: cannot find 'createPrivacyMetadata' in scope\n 79 |       \"operationId\": operationID,\n 80 |       \"operation\": String(describing: operation),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:81:27: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 79 |       \"operationId\": operationID,\n 80 |       \"operation\": String(describing: operation),\n 81 |       \"algorithm\": config.algorithm,\n    |                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 82 |       \"timestamp\": \"\\(Date())\"\n 83 |     ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:91:13: error: type 'CoreSecurityError' has no member 'general'\n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 92 |   }\n 93 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:95:13: error: type 'CoreSecurityError' has no member 'general'\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 96 |   }\n 97 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:99:13: error: type 'CoreSecurityError' has no member 'general'\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n100 |   }\n101 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:43:37: error: cannot find type 'KeyStorageManager' in scope\n 41 |    The key manager used for key storage and retrieval\n 42 |    */\n 43 |   private let keyManagementService: KeyStorageManager\n    |                                     `- error: cannot find type 'KeyStorageManager' in scope\n 44 | \n 45 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:32:13: error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n 30 |  - Handle signature-specific errors\n 31 |  */\n 32 | final class SignatureService: SecurityServiceBase {\n    |             |- error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n    |             `- note: add stubs for conformance\n 33 |   // MARK: - Properties\n 34 | \n    :\n 46 |    The logger instance for recording operation details\n 47 |    */\n 48 |   let logger: PrivacyAwareLoggingProtocol\n    |       `- note: candidate has non-matching type 'any PrivacyAwareLoggingProtocol'\n 49 | \n 50 |   // MARK: - Initialisation\n    :\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: candidate has non-matching type '(logger: any PrivacyAwareLoggingProtocol)'\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:42:3: note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 32 |    The logger instance for recording operation details\n 33 |    */\n 34 |   var logger: LoggingInterfaces.LoggingProtocol { get }\n    |       `- note: protocol requires property 'logger' with type 'any LoggingProtocol'\n 35 | \n 36 |   /**\n    :\n 40 |        - logger: The logging service to use for operation logging\n 41 |    */\n 42 |   init(logger: LoggingInterfaces.LoggingProtocol)\n    |   `- note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 43 | \n 44 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:15: error: invalid redeclaration of 'notImplemented(reason:)'\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:99:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 97 |     // Create metadata for logging\n 98 |     var logMetadata=PrivacyMetadata()\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:100:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 98 |     var logMetadata=PrivacyMetadata()\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n102 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:101:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:101:59: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                                                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:103:118: error: extra argument 'source' in call\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                      `- error: extra argument 'source' in call\n104 | \n105 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:107:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n105 |     do {\n106 |       // Extract required parameters from configuration\n107 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n108 |         throw SignatureError.invalidInput(\"Missing input data for signing\")\n109 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:107:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n105 |     do {\n106 |       // Extract required parameters from configuration\n107 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n108 |         throw SignatureError.invalidInput(\"Missing input data for signing\")\n109 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:116:36: error: value of type 'SecurityConfigOptions?' has no subscripts\n114 | \n115 |         // If keyID is provided, retrieve the key from key management\n116 |         if let keyID=config.options[\"keyId\"] {\n    |                                    `- error: value of type 'SecurityConfigOptions?' has no subscripts\n117 |           // Retrieve the key from the key management service\n118 |           let keyResult=await keyManagementService.secureStorage\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:127:35: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n125 |                 data: inputData,\n126 |                 key: keyMaterial,\n127 |                 algorithm: config.algorithm\n    |                                   `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n128 |               )\n129 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:136:48: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n134 |         }\n135 |         // If direct key is provided, use it\n136 |         else if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n137 |           // Use encrypt as a substitute for signature generation\n138 |           signature=try await performSignature(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:136:73: error: value of type 'SecurityConfigOptions?' has no subscripts\n134 |         }\n135 |         // If direct key is provided, use it\n136 |         else if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                                         `- error: value of type 'SecurityConfigOptions?' has no subscripts\n137 |           // Use encrypt as a substitute for signature generation\n138 |           signature=try await performSignature(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:141:31: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n139 |             data: inputData,\n140 |             key: key,\n141 |             algorithm: config.algorithm\n    |                               `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n142 |           )\n143 |         }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:154:25: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n152 |         // Create success metadata for logging\n153 |         var successMetadata=logMetadata\n154 |         successMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n155 |         successMetadata.setPublic(key: \"signatureSize\", value: String(signature.count))\n156 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:155:25: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n153 |         var successMetadata=logMetadata\n154 |         successMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n155 |         successMetadata.setPublic(key: \"signatureSize\", value: String(signature.count))\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n156 | \n157 |         await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:159:53: error: extra argument 'source' in call\n157 |         await logger.info(\n158 |           \"Signing operation completed successfully\", metadata: successMetadata\n159 |         , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                     `- error: extra argument 'source' in call\n160 | \n161 |         // Return successful result with signature\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:165:21: error: cannot find 'createPrivacyMetadata' in scope\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n    |                     `- error: cannot find 'createPrivacyMetadata' in scope\n166 |             \"algorithm\": config.algorithm\n167 |           ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:16: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:33: error: extra arguments at positions #1, #2 in call\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                                 `- error: extra arguments at positions #1, #2 in call\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:33: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:163:20: error: cannot infer contextual base in reference to member 'success'\n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n163 |           status: .success,\n    |                    `- error: cannot infer contextual base in reference to member 'success'\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:164:27: error: value of type 'SendableCryptoMaterial' has no member 'toBase64'\n162 |         return SecurityResultDTO(\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n    |                           `- error: value of type 'SendableCryptoMaterial' has no member 'toBase64'\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n166 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:166:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n166 |             \"algorithm\": config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n167 |           ])\n168 |         )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:175:23: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n173 |         // Create failure metadata for logging\n174 |         var errorMetadata=logMetadata\n175 |         errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                       `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n177 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:176:23: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n174 |         var errorMetadata=logMetadata\n175 |         errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                       `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:178:110: error: missing argument for parameter 'source' in call\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                              `- error: missing argument for parameter 'source' in call\n179 |         , source: \\\"SecurityImplementation\\\")\n180 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:196:21: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n194 |       // Create failure metadata for logging\n195 |       var errorMetadata=logMetadata\n196 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n198 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:197:21: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n195 |       var errorMetadata=logMetadata\n196 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:199:108: error: missing argument for parameter 'source' in call\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                            `- error: missing argument for parameter 'source' in call\n200 |       , source: \\\"SecurityImplementation\\\")\n201 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:169:9: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n167 |           ])\n168 |         )\n169 |       } catch {\n    |         `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n170 |         // Calculate duration before failure\n171 |         let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:226:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n224 |     // Create metadata for logging\n225 |     var logMetadata=PrivacyMetadata()\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:227:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n225 |     var logMetadata=PrivacyMetadata()\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n229 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:228:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:228:59: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                                                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:230:133: error: extra argument 'source' in call\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                                     `- error: extra argument 'source' in call\n231 | \n232 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:234:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n232 |     do {\n233 |       // Extract required parameters from configuration\n234 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n235 |         throw SignatureError.invalidInput(\"Missing input data for verification\")\n236 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:234:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n232 |     do {\n233 |       // Extract required parameters from configuration\n234 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n235 |         throw SignatureError.invalidInput(\"Missing input data for verification\")\n236 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:238:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n236 |       }\n237 | \n238 |       guard let signature=SendableCryptoMaterial.fromBase64(config.options[\"signature\"] ?? \"\")\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n239 |       else {\n240 |         throw SignatureError.invalidInput(\"Missing signature to verify\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:238:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n236 |       }\n237 | \n238 |       guard let signature=SendableCryptoMaterial.fromBase64(config.options[\"signature\"] ?? \"\")\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n239 |       else {\n240 |         throw SignatureError.invalidInput(\"Missing signature to verify\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:244:41: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n242 | \n243 |       // Check if key is provided directly in the options\n244 |       if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                         `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n245 |         // Try to verify the signature using the provided key\n246 |         let isValid=try await performVerification(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:244:66: error: value of type 'SecurityConfigOptions?' has no subscripts\n242 | \n243 |       // Check if key is provided directly in the options\n244 |       if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                                  `- error: value of type 'SecurityConfigOptions?' has no subscripts\n245 |         // Try to verify the signature using the provided key\n246 |         let isValid=try await performVerification(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:250:29: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n248 |           signature: signature,\n249 |           key: key,\n250 |           algorithm: config.algorithm\n    |                             `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n251 |         )\n252 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:258:30: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n256 |         // Create result metadata\n257 |         var verificationMetadata=logMetadata\n258 |         verificationMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                              `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n259 |         verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n260 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:259:30: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n257 |         var verificationMetadata=logMetadata\n258 |         verificationMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n259 |         verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n    |                              `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n260 | \n261 |         if isValid {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:264:55: error: extra argument 'source' in call\n262 |           await logger.info(\n263 |             \"Signature verification completed: Valid signature\", metadata: verificationMetadata\n264 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                       `- error: extra argument 'source' in call\n265 |         } else {\n266 |           await logger.warning(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:268:55: error: extra argument 'source' in call\n266 |           await logger.warning(\n267 |             \"Signature verification completed: Invalid signature\", metadata: verificationMetadata\n268 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                       `- error: extra argument 'source' in call\n269 |         }\n270 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:274:21: error: cannot find 'createPrivacyMetadata' in scope\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n    |                     `- error: cannot find 'createPrivacyMetadata' in scope\n275 |             \"algorithm\": config.algorithm\n276 |           ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:272:16: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n270 | \n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n    |                `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:273:20: error: extra argument 'status' in call\n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n    |                    `- error: extra argument 'status' in call\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:272:33: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n270 | \n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n    |                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:273:20: error: cannot infer contextual base in reference to member 'success'\n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n    |                    `- error: cannot infer contextual base in reference to member 'success'\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:275:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n276 |           ])\n277 |         )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:282:39: error: value of type 'SecurityConfigOptions?' has no subscripts\n280 | \n281 |         // Attempt to get key ID from config\n282 |         guard let keyID=config.options[\"keyId\"] else {\n    |                                       `- error: value of type 'SecurityConfigOptions?' has no subscripts\n283 |           throw SignatureError.invalidInput(\"Neither key nor keyId provided for verification\")\n284 |         }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:297:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n295 |               signature: signature,\n296 |               key: keyMaterial,\n297 |               algorithm: config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n298 |             )\n299 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:305:34: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n303 |             // Create result metadata\n304 |             var verificationMetadata=logMetadata\n305 |             verificationMetadata.setPublic(\n    |                                  `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n306 |               key: \"duration\",\n307 |               value: String(format: \"%.3f s\", duration)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:309:34: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n307 |               value: String(format: \"%.3f s\", duration)\n308 |             )\n309 |             verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n    |                                  `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n310 | \n311 |             if isValid {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:314:59: error: extra argument 'source' in call\n312 |               await logger.info(\n313 |                 \"Signature verification completed: Valid signature\", metadata: verificationMetadata\n314 |               , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                           `- error: extra argument 'source' in call\n315 |             } else {\n316 |               await logger.warning(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:318:59: error: extra argument 'source' in call\n316 |               await logger.warning(\n317 |                 \"Signature verification completed: Invalid signature\", metadata: verificationMetadata\n318 |               , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                           `- error: extra argument 'source' in call\n319 |             }\n320 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:324:25: error: cannot find 'createPrivacyMetadata' in scope\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n    |                         `- error: cannot find 'createPrivacyMetadata' in scope\n325 |                 \"algorithm\": config.algorithm\n326 |               ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:322:20: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n320 | \n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n    |                    `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:323:24: error: extra argument 'status' in call\n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n    |                        `- error: extra argument 'status' in call\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:322:37: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n320 | \n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n    |                                     `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:323:24: error: cannot infer contextual base in reference to member 'success'\n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n    |                        `- error: cannot infer contextual base in reference to member 'success'\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:325:37: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n    |                                     `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n326 |               ])\n327 |             )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:339:21: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n337 |       // Create failure metadata for logging\n338 |       var errorMetadata=logMetadata\n339 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n341 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:340:21: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n338 |       var errorMetadata=logMetadata\n339 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:342:123: error: missing argument for parameter 'source' in call\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                                           `- error: missing argument for parameter 'source' in call\n343 |       , source: \\\"SecurityImplementation\\\")\n344 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:403:27: error: incorrect argument label in call (have 'base64Encoded:', expected 'hexString:')\n401 |     // Implement secure random material generation\n402 |     // For now, this is a placeholder that would be replaced with actual implementation\n403 |     SendableCryptoMaterial(base64Encoded: \"random-material\")\n    |                           `- error: incorrect argument label in call (have 'base64Encoded:', expected 'hexString:')\n404 |   }\n405 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:418:13: error: type 'CoreSecurityError' has no member 'general'\n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n419 |   }\n420 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:422:13: error: type 'CoreSecurityError' has no member 'general'\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n423 |   }\n424 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:426:13: error: type 'CoreSecurityError' has no member 'general'\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n427 |   }\n428 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:16:22: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n14 |   /// - Parameter reason: The reason for the error\n15 |   /// - Returns: A CoreSecurityError with the appropriate error code\n16 |   public static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n17 |     return .invalidInput(\"Invalid verification method: \\(reason)\")\n18 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:23:22: error: invalid redeclaration of 'verificationFailed(reason:)'\n21 |   /// - Parameter reason: The reason for the error\n22 |   /// - Returns: A CoreSecurityError with the appropriate error code\n23 |   public static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'verificationFailed(reason:)'\n24 |     return .authenticationFailed(\"Verification failed: \\(reason)\")\n25 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:30:22: error: invalid redeclaration of 'notImplemented(reason:)'\n28 |   /// - Parameter reason: The reason for the error\n29 |   /// - Returns: A CoreSecurityError with the appropriate error code\n30 |   public static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'notImplemented(reason:)'\n31 |     return .unsupportedOperation(\"Not implemented: \\(reason)\")\n32 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Logging.swift:38:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 36 |  according to the Alpha Dot Five architecture principles.\n 37 |  */\n 38 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 39 |   /**\n 40 |    Logs the start of a security operation with privacy-aware metadata.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  * Batch encryption and decryption for collections of data\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Encrypts data and then stores it securely.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:15: error: invalid redeclaration of 'notImplemented(reason:)'\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:428:13: error: type 'CoreSecurityError' has no member 'general'\n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n429 |   }\n430 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:432:13: error: type 'CoreSecurityError' has no member 'general'\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n433 |   }\n434 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:436:13: error: type 'CoreSecurityError' has no member 'general'\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n437 |   }\n438 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  - Common validation logic is centralised\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Validates configuration for encryption operations.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:205:13: error: type 'CoreSecurityError' has no member 'general'\n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n206 |   }\n207 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:209:13: error: type 'CoreSecurityError' has no member 'general'\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n210 |   }\n211 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:213:13: error: type 'CoreSecurityError' has no member 'general'\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n214 |   }\n215 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:15: error: invalid redeclaration of 'notImplemented(reason:)'\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:52:8: error: type 'CryptoServiceFactory' has no member 'createStandardCryptoService'\n 50 |     // Create standard crypto service\n 51 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 52 |       .createStandardCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createStandardCryptoService'\n 53 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n 54 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:53:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n 51 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 52 |       .createStandardCryptoService()\n 53 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n 54 | \n 55 |     // Use the provided logger or create a default one\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:61:23: error: extra argument 'environment' in call\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n 62 |       )\n 63 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:60:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n 58 |       actualLogger=logger\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n 61 |         environment: .development)\n 62 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:61:23: error: cannot infer contextual base in reference to member 'development'\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n 62 |       )\n 63 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:69:27: error: missing argument for parameter 'secureLogger' in call\n 67 |     let securityService=SecurityServiceActor(\n 68 |       cryptoService: cryptoService,\n 69 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n 70 |     )\n 71 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:96:8: error: type 'CryptoServiceFactory' has no member 'createHighSecurityCryptoService'\n 94 |     // Create high-security crypto service\n 95 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 96 |       .createHighSecurityCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createHighSecurityCryptoService'\n 97 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n 98 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:97:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n 95 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 96 |       .createHighSecurityCryptoService()\n 97 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n 98 | \n 99 |     // Use the provided logger or create a default one with debug level logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:105:23: error: extra argument 'environment' in call\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n106 |       )\n107 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:104:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n102 |       actualLogger=logger\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n105 |         environment: .development)\n106 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:105:23: error: cannot infer contextual base in reference to member 'development'\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n106 |       )\n107 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:113:27: error: missing argument for parameter 'secureLogger' in call\n111 |     let securityService=SecurityServiceActor(\n112 |       cryptoService: cryptoService,\n113 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n114 |     )\n115 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:141:8: error: type 'CryptoServiceFactory' has no member 'createMaxSecurityCryptoService'\n139 |     // Create max-security crypto service\n140 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n141 |       .createMaxSecurityCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createMaxSecurityCryptoService'\n142 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n143 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:142:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n140 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n141 |       .createMaxSecurityCryptoService()\n142 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n143 | \n144 |     // Use the provided logger or create a default one with debug level logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:150:23: error: extra argument 'environment' in call\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n151 |       )\n152 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:149:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n147 |       actualLogger=logger\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n150 |         environment: .development)\n151 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:150:23: error: cannot infer contextual base in reference to member 'development'\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n151 |       )\n152 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:158:27: error: missing argument for parameter 'secureLogger' in call\n156 |     let securityService=SecurityServiceActor(\n157 |       cryptoService: cryptoService,\n158 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n159 |     )\n160 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:172:13: error: type 'CoreSecurityError' has no member 'general'\n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n173 |   }\n174 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:176:13: error: type 'CoreSecurityError' has no member 'general'\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n177 |   }\n178 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:180:13: error: type 'CoreSecurityError' has no member 'general'\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n181 |   }\n182 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:92:13: error: type 'CoreSecurityError' has no member 'general'\n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 93 |   }\n 94 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:96:13: error: type 'CoreSecurityError' has no member 'general'\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 97 |   }\n 98 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:100:13: error: type 'CoreSecurityError' has no member 'general'\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n101 |   }\n102 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               `- warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:30:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 28 |   /// - Returns: The generated random integer\n 29 |   /// - Throws: SecurityError if random generation fails\n 30 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 31 | \n 32 |   /// Generates a cryptographically secure random integer within the specified closed range\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               `- warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:36:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 34 |   /// - Returns: The generated random integer\n 35 |   /// - Throws: SecurityError if random generation fails\n 36 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 37 | \n 38 |   /// Generates a cryptographically secure random double between 0.0 and 1.0\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:15: error: invalid redeclaration of 'notImplemented(reason:)'\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:53:27: error: type 'SecurityError' has no member 'alreadyInitialized'\n 51 |   public func initialise(entropySource: EntropySource) async throws {\n 52 |     guard !isInitialised else {\n 53 |       throw SecurityError.alreadyInitialized(\"Random data service is already initialised\")\n    |                           `- error: type 'SecurityError' has no member 'alreadyInitialized'\n 54 |     }\n 55 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:42: error: missing argument label 'entries:' in call\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:60:69: error: cannot infer contextual base in reference to member 'public'\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n    |                                                                     `- error: cannot infer contextual base in reference to member 'public'\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n 62 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:61:71: error: cannot infer contextual base in reference to member 'public'\n 59 |       metadata: LogMetadataDTOCollection([\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n    |                                                                       `- error: cannot infer contextual base in reference to member 'public'\n 62 |       ]),\n 63 |       source: \"RandomDataServiceActor.initialise\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:78:31: error: type 'SecurityError' has no member 'initialisationFailed'\n 76 | \n 77 |         guard result == errSecSuccess else {\n 78 |           throw SecurityError.initialisationFailed(\n    |                               `- error: type 'SecurityError' has no member 'initialisationFailed'\n 79 |             reason: \"Hardware entropy source is not available\"\n 80 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:85:31: error: type 'SecurityError' has no member 'initialisationFailed'\n 83 |         // Ensure the bytes are actually random\n 84 |         guard bytes != testBytes else {\n 85 |           throw SecurityError.initialisationFailed(\n    |                               `- error: type 'SecurityError' has no member 'initialisationFailed'\n 86 |             reason: \"Entropy source did not produce random data\"\n 87 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:65: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:90: error: missing argument label 'entries:' in call\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                                          `- error: missing argument label 'entries:' in call\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:90: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:100:69: error: cannot infer contextual base in reference to member 'public'\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                     `- error: cannot infer contextual base in reference to member 'public'\n101 |       ]),\n102 |       source: \"RandomDataServiceActor.initialise\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:42: error: missing argument label 'entries:' in call\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:132:53: error: cannot infer contextual base in reference to member 'public'\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n132 |         \"length\": (value: String(length), privacy: .public)\n    |                                                     `- error: cannot infer contextual base in reference to member 'public'\n133 |       ]),\n134 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:142:27: error: type 'SecurityError' has no member 'operationFailed'\n140 | \n141 |     guard result == errSecSuccess else {\n142 |       throw SecurityError.operationFailed(\"SecRandomCopyBytes failed with error \\(result)\")\n    |                           `- error: type 'SecurityError' has no member 'operationFailed'\n143 |     }\n144 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:56: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                        `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:81: error: missing argument label 'entries:' in call\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                                                 `- error: missing argument label 'entries:' in call\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:81: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                                                 `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:148:33: error: extra arguments at positions #2, #3 in call\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                 `- error: extra arguments at positions #2, #3 in call\n149 |       ]),\n150 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\nSwift.String.init:2:19: note: 'init(_:)' declared here\n1 | struct String {\n2 | @inlinable public init\u003cT\u003e(_ value: T) where T : LosslessStringConvertible}\n  |                   `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:148:126: error: cannot infer contextual base in reference to member 'public'\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                              `- error: cannot infer contextual base in reference to member 'public'\n149 |       ]),\n150 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:42: error: missing argument label 'entries:' in call\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:167:68: error: cannot infer contextual base in reference to member 'public'\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n    |                                                                    `- error: cannot infer contextual base in reference to member 'public'\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:168:68: error: cannot infer contextual base in reference to member 'public'\n166 |       metadata: LogMetadataDTOCollection([\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n    |                                                                    `- error: cannot infer contextual base in reference to member 'public'\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n170 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:169:63: error: cannot infer contextual base in reference to member 'public'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n    |                                                               `- error: cannot infer contextual base in reference to member 'public'\n170 |       ]),\n171 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:177:27: error: type 'SecurityError' has no member 'invalidInput'\n175 |     let width=range.upperBound - range.lowerBound\n176 |     guard width \u003e 0 else {\n177 |       throw SecurityError.invalidInput(\"Range width must be greater than zero\")\n    |                           `- error: type 'SecurityError' has no member 'invalidInput'\n178 |     }\n179 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:58: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                          `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:83: error: missing argument label 'entries:' in call\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                                                   `- error: missing argument label 'entries:' in call\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:83: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                                                   `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:198:32: error: extra arguments at positions #2, #3 in call\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                `- error: extra arguments at positions #2, #3 in call\n199 |       ]),\n200 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\nSwift.String.init:2:19: note: 'init(_:)' declared here\n1 | struct String {\n2 | @inlinable public init\u003cT\u003e(_ value: T) where T : LosslessStringConvertible}\n  |                   `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:198:120: error: cannot infer contextual base in reference to member 'public'\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                        `- error: cannot infer contextual base in reference to member 'public'\n199 |       ]),\n200 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:65: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:89: error: extra arguments at positions #2, #3 in call\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                                         `- error: extra arguments at positions #2, #3 in call\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogMetadataDTOCollection.swift:20:10: note: 'init(entries:)' declared here\n 18 |   ///\n 19 |   /// - Parameter entries: The initial metadata entries\n 20 |   public init(entries: [LogMetadataDTO]) {\n    |          `- note: 'init(entries:)' declared here\n 21 |     self.entries=entries\n 22 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:90: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type '[LogMetadataDTO]'\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                                          `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type '[LogMetadataDTO]'\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:57: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                         `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:82: error: missing argument label 'entries:' in call\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                                                  `- error: missing argument label 'entries:' in call\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:82: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                                                  `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:243:32: error: extra arguments at positions #3, #4 in call\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                `- error: extra arguments at positions #3, #4 in call\n244 |       ]),\n245 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n\nFoundation.String.init:2:8: note: 'init(format:_:)' declared here\n1 | struct String {\n2 | public init(format: __shared String, _ arguments: any CVarArg...)}\n  |        `- note: 'init(format:_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:243:136: error: cannot infer contextual base in reference to member 'public'\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                                        `- error: cannot infer contextual base in reference to member 'public'\n244 |       ]),\n245 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:257:27: error: type 'SecurityError' has no member 'notInitialized'\n255 |   private func validateInitialisation() throws {\n256 |     guard isInitialised else {\n257 |       throw SecurityError.notInitialized(\"Random data service is not initialised\")\n    |                           `- error: type 'SecurityError' has no member 'notInitialized'\n258 |     }\n259 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:266:13: error: type 'CoreSecurityError' has no member 'general'\n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n267 |   }\n268 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:270:13: error: type 'CoreSecurityError' has no member 'general'\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n271 |   }\n272 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:274:13: error: type 'CoreSecurityError' has no member 'general'\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n275 |   }\n276 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:25:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n23 |   /// - Returns: A fully configured random data service\n24 |   public static func createDefault() -\u003e RandomDataServiceProtocol {\n25 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n26 |       subsystem: \"uk.co.umbra.security\",\n27 |       category: \"RandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:45:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n43 |   /// - Returns: A fully configured high-security random data service\n44 |   public static func createHighSecurity() -\u003e RandomDataServiceProtocol {\n45 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n46 |       subsystem: \"uk.co.umbra.security\",\n47 |       category: \"HighSecurityRandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:63:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n61 |   /// - Returns: A minimally configured random data service\n62 |   public static func createMinimal() -\u003e RandomDataServiceProtocol {\n63 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n64 |       subsystem: \"uk.co.umbra.security\",\n65 |       category: \"MinimalRandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:83:13: error: type 'CoreSecurityError' has no member 'general'\n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n84 |   }\n85 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:87:13: error: type 'CoreSecurityError' has no member 'general'\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n88 |   }\n89 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:91:13: error: type 'CoreSecurityError' has no member 'general'\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n92 |   }\n93 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:110:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n108 | \n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n111 |     return .invalidVerificationMethod(reason: reason)\n112 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:114:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n112 |   }\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n115 |     return .verificationFailed(reason: reason)\n116 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:118:15: error: invalid redeclaration of 'notImplemented(reason:)'\n116 |   }\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n119 |     return .notImplemented(reason: reason)\n120 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:9:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  7 |   var metadata = PrivacyMetadata()\n  8 |   for (key, value) in dict {\n  9 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 10 |   }\n 11 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:95:27: error: cannot find 'LoggingServices' in scope\n 93 |       cryptoService: cryptoService,\n 94 |       logger: logger,\n 95 |       secureLogger: await LoggingServices.createSecureLogger(\n    |                           `- error: cannot find 'LoggingServices' in scope\n 96 |         subsystem: \"com.umbra.security\",\n 97 |         category: \"SecurityService\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:111:13: error: ambiguous use of 'invalidVerificationMethod(reason:)'\n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n111 |     return .invalidVerificationMethod(reason: reason)\n    |             `- error: ambiguous use of 'invalidVerificationMethod(reason:)'\n112 |   }\n113 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: note: found this candidate \n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:258:15: note: found this candidate \n256 | \n257 | extension CoreSecurityError {\n258 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n259 |     return .invalidVerificationMethod(reason: reason)\n260 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:115:13: error: ambiguous use of 'verificationFailed(reason:)'\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n115 |     return .verificationFailed(reason: reason)\n    |             `- error: ambiguous use of 'verificationFailed(reason:)'\n116 |   }\n117 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: note: found this candidate \n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:262:15: note: found this candidate \n260 |   }\n261 |   \n262 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n263 |     return .verificationFailed(reason: reason)\n264 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:119:13: error: ambiguous use of 'notImplemented(reason:)'\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n119 |     return .notImplemented(reason: reason)\n    |             `- error: ambiguous use of 'notImplemented(reason:)'\n120 |   }\n121 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              `- error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 31 |   // MARK: - Private Properties\n 32 | \n    :\n349 |    - Returns: Result of the operation\n350 |    */\n351 |   public func performSecureOperation(\n    |               `- note: candidate has non-matching type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n352 |     operation: SecurityOperation,\n353 |     config: SecurityConfigDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              |- error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n    |              `- note: add stubs for conformance\n 31 |   // MARK: - Private Properties\n 32 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:109:8: note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:16:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 14 |   var metadata = PrivacyMetadata()\n 15 |   for (key, value) in dict {\n 16 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 17 |   }\n 18 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:69:50: error: extra arguments at positions #1, #3, #4, #5 in call\n 67 |     self.logger = logger\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n    |                                                  `- error: extra arguments at positions #1, #3, #4, #5 in call\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/DTOs/SecurityDTOs.swift:23:10: note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 21 |   ///   - loggingLevel: The logging level for security operations\n 22 |   ///   - randomizationOptions: Options for secure random number generation\n 23 |   public init(\n    |          `- note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 24 |     securityLevel: CoreSecurityTypes.SecurityLevelDTO = .standard,\n 25 |     loggingLevel: CoreSecurityTypes.SecurityLogLevelDTO = .warning,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:70:22: error: cannot infer contextual base in reference to member 'standard'\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n 70 |       providerType: .standard,\n    |                      `- error: cannot infer contextual base in reference to member 'standard'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:72:29: error: cannot infer contextual base in reference to member 'aes256'\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n    |                             `- error: cannot infer contextual base in reference to member 'aes256'\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:73:23: error: cannot infer contextual base in reference to member 'sha256'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n    |                       `- error: cannot infer contextual base in reference to member 'sha256'\n 74 |       options: nil\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:74:16: error: 'nil' requires a contextual type\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n    |                `- error: 'nil' requires a contextual type\n 75 |     )\n 76 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:83:41: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 81 |         metadata: createPrivacyMetadata([\n 82 |           \"serviceId\": serviceId.uuidString,\n 83 |           \"providerType\": configuration.providerType.rawValue,\n    |                                         `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 84 |           \"securityLevel\": configuration.securityLevel.rawValue\n 85 |         ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:111:44: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n109 |       metadata: createPrivacyMetadata([\n110 |         \"serviceId\": serviceId.uuidString,\n111 |         \"providerType\": self.configuration.providerType.rawValue,\n    |                                            `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n112 |         \"securityLevel\": self.configuration.securityLevel.rawValue\n113 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:126:31: error: type 'CoreSecurityError' has no member 'serviceUnavailable'\n124 |   private func validateInitialisation() throws {\n125 |     if !isInitialised {\n126 |       throw CoreSecurityError.serviceUnavailable(reason: \"Security service not initialised\")\n    |                               `- error: type 'CoreSecurityError' has no member 'serviceUnavailable'\n127 |     }\n128 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:155:16: error: type 'SecurityEventStatus' has no member 'started'\n153 |     await secureLogger.securityEvent(\n154 |       action: \"Encrypt\",\n155 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n156 |       subject: nil,\n157 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:165:29: error: ambiguous use of 'notImplemented(reason:)'\n163 |     \n164 |     // Not implemented yet - would delegate to crypto service\n165 |     throw CoreSecurityError.notImplemented(reason: \"Encrypt operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n166 |   }\n167 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:180:16: error: type 'SecurityEventStatus' has no member 'started'\n178 |     await secureLogger.securityEvent(\n179 |       action: \"Decrypt\",\n180 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n181 |       subject: nil,\n182 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:190:29: error: ambiguous use of 'notImplemented(reason:)'\n188 |     \n189 |     // Not implemented yet - would delegate to crypto service\n190 |     throw CoreSecurityError.notImplemented(reason: \"Decrypt operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n191 |   }\n192 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:205:16: error: type 'SecurityEventStatus' has no member 'started'\n203 |     await secureLogger.securityEvent(\n204 |       action: \"GenerateKey\",\n205 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n206 |       subject: nil,\n207 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:215:29: error: ambiguous use of 'notImplemented(reason:)'\n213 |     \n214 |     // Not implemented yet - would delegate to crypto service\n215 |     throw CoreSecurityError.notImplemented(reason: \"Key generation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n216 |   }\n217 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:230:16: error: type 'SecurityEventStatus' has no member 'started'\n228 |     await secureLogger.securityEvent(\n229 |       action: \"SecureStore\",\n230 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n231 |       subject: nil,\n232 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:240:29: error: ambiguous use of 'notImplemented(reason:)'\n238 |     \n239 |     // Not implemented yet - would delegate to crypto service\n240 |     throw CoreSecurityError.notImplemented(reason: \"Secure store operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n241 |   }\n242 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:255:16: error: type 'SecurityEventStatus' has no member 'started'\n253 |     await secureLogger.securityEvent(\n254 |       action: \"SecureRetrieve\",\n255 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n256 |       subject: nil,\n257 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:265:29: error: ambiguous use of 'notImplemented(reason:)'\n263 |     \n264 |     // Not implemented yet - would delegate to crypto service\n265 |     throw CoreSecurityError.notImplemented(reason: \"Secure retrieve operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n266 |   }\n267 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:280:16: error: type 'SecurityEventStatus' has no member 'started'\n278 |     await secureLogger.securityEvent(\n279 |       action: \"SecureDelete\",\n280 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n281 |       subject: nil,\n282 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:290:29: error: ambiguous use of 'notImplemented(reason:)'\n288 |     \n289 |     // Not implemented yet - would delegate to crypto service\n290 |     throw CoreSecurityError.notImplemented(reason: \"Secure delete operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n291 |   }\n292 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:305:16: error: type 'SecurityEventStatus' has no member 'started'\n303 |     await secureLogger.securityEvent(\n304 |       action: \"Sign\",\n305 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n306 |       subject: nil,\n307 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:315:29: error: ambiguous use of 'notImplemented(reason:)'\n313 |     \n314 |     // Not implemented yet - would delegate to crypto service\n315 |     throw CoreSecurityError.notImplemented(reason: \"Sign operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n316 |   }\n317 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:330:16: error: type 'SecurityEventStatus' has no member 'started'\n328 |     await secureLogger.securityEvent(\n329 |       action: \"Verify\",\n330 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n331 |       subject: nil,\n332 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:340:29: error: ambiguous use of 'notImplemented(reason:)'\n338 |     \n339 |     // Not implemented yet - would delegate to crypto service\n340 |     throw CoreSecurityError.notImplemented(reason: \"Verify operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n341 |   }\n342 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:360:16: error: type 'SecurityEventStatus' has no member 'started'\n358 |     await secureLogger.securityEvent(\n359 |       action: \"SecurityOperation\",\n360 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n361 |       subject: nil,\n362 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:370:29: error: ambiguous use of 'notImplemented(reason:)'\n368 |     \n369 |     // Not implemented yet\n370 |     throw CoreSecurityError.notImplemented(reason: \"Generic secure operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n371 |   }\n372 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:382:29: error: type 'EncryptionAlgorithm' has no member 'aes256'\n380 |     // Create and return a new configuration based on the provided options\n381 |     return SecurityConfigDTO(\n382 |       encryptionAlgorithm: .aes256,\n    |                             `- error: type 'EncryptionAlgorithm' has no member 'aes256'\n383 |       hashAlgorithm: .sha256,\n384 |       providerType: .standard,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:384:22: error: type 'SecurityProviderType' has no member 'standard'\n382 |       encryptionAlgorithm: .aes256,\n383 |       hashAlgorithm: .sha256,\n384 |       providerType: .standard,\n    |                      `- error: type 'SecurityProviderType' has no member 'standard'\n385 |       options: options\n386 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceFactory.swift:15:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 13 |   var metadata = PrivacyMetadata()\n 14 |   for (key, value) in dict {\n 15 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 16 |   }\n 17 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: error: invalid redeclaration of 'notImplemented(reason:)'\n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:8:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  6 |   var metadata = PrivacyMetadata()\n  7 |   for (key, value) in dict {\n  8 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  9 |   }\n 10 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:114:39: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n112 |     // Add any additional metadata\n113 |     for (key, value) in additionalMetadata {\n114 |       metricMetadata = metricMetadata.withPublic(key: key, value: value)\n    |                                       `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n115 |     }\n116 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:119:39: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n117 |     // Add historical performance if available\n118 |     if let avgDuration=averagePerformance(for: operation) {\n119 |       metricMetadata = metricMetadata.withPublic(key: \"avgDurationMs\", value: String(format: \"%.2f\", avgDuration))\n    |                                       `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n120 |     }\n121 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:124:20: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n122 |     // Log the metrics with appropriate level based on success\n123 |     if success {\n124 |       await logger.info(\"Security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n    |                    `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n125 |     } else {\n126 |       await logger.warning(\"Failed security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:126:20: warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n124 |       await logger.info(\"Security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n125 |     } else {\n126 |       await logger.warning(\"Failed security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n    |                    `- warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n127 |     }\n128 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:185:41: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n183 |     // Add context information\n184 |     for (key, value) in context {\n185 |       anomalyMetadata = anomalyMetadata.withPublic(key: key, value: value)\n    |                                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n186 |     }\n187 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:189:18: warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n187 | \n188 |     // Log the anomaly\n189 |     await logger.warning(\"Performance anomaly detected in \\(operation.description)\", metadata: anomalyMetadata, source: \"SecurityImplementation\")\n    |                  `- warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n190 | \n191 |     // Prepare privacy-tagged metadata for secure logger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:286:17: error: type 'LogPrivacyLevel' has no member 'restricted'\n284 |     for pattern in restrictedKeyPatterns {\n285 |       if key.lowercased().contains(pattern) {\n286 |         return .restricted\n    |                 `- error: type 'LogPrivacyLevel' has no member 'restricted'\n287 |       }\n288 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:8:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  6 |   var metadata = PrivacyMetadata()\n  7 |   for (key, value) in dict {\n  8 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  9 |   }\n 10 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:93:43: error: cannot find 'startTime' in scope\n 91 |   ) async {\n 92 |     // Calculate duration before failure\n 93 |     let duration=Date().timeIntervalSince(startTime) * 1000\n    |                                           `- error: cannot find 'startTime' in scope\n 94 | \n 95 |     // Create error metadata for logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:119:70: error: reference to member 'int' cannot be resolved without a contextual type\n117 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n118 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operation.rawValue), privacyLevel: .public),\n119 |         \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration)), privacyLevel: .public),\n    |                                                                      `- error: reference to member 'int' cannot be resolved without a contextual type\n120 |         \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n121 |         \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(sanitizeErrorMessage(error.localizedDescription)), privacyLevel: .sensitive)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:126:12: error: unexpected non-void return value in void function\n124 | \n125 |     // Return a standardised error result\n126 |     return createErrorResult(error: error, duration: duration)\n    |            |- error: unexpected non-void return value in void function\n    |            `- note: did you mean to add a return type?\n127 |   }\n128 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:193:22: error: cannot find 'operationID' in scope\n191 |     // Create standard metadata\n192 |     let standardMetadata = createPrivacyMetadata([\n193 |       \"operationId\": operationID,\n    |                      `- error: cannot find 'operationID' in scope\n194 |       \"operation\": operation.rawValue,\n195 |       \"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:195:44: error: cannot find 'duration' in scope\n193 |       \"operationId\": operationID,\n194 |       \"operation\": operation.rawValue,\n195 |       \"durationMs\": String(format: \"%.2f\", duration),\n    |                                            `- error: cannot find 'duration' in scope\n196 |       \"errorType\": String(describing: type(of: error)),\n197 |       \"errorMessage\": sanitizeErrorMessage(error.localizedDescription)\nTarget //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices failed to build\nINFO: Elapsed time: 4.098s, Critical Path: 3.99s\nINFO: 2 processes: 3 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations",
    "success": false,
    "start_time": "2025-04-09T00:55:09.960681+01:00",
    "end_time": "2025-04-09T00:55:14.974984+01:00",
    "duration": "5.014280916s",
    "output": "INFO: Invocation ID: 5524f506-833c-4250-9568-e2952f4095fd\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations (0 packages loaded, 0 targets configured).\n[1 / 5] Compiling Swift module //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation; 1s disk-cache, worker\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/SecurityImplementation/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:10: error: static methods may only be declared on a type\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:10: error: static methods may only be declared on a type\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:10: error: static methods may only be declared on a type\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:163:1: error: extraneous '}' at top level\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n163 | }\n    | `- error: extraneous '}' at top level\n164 | \n165 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:10: error: static methods may only be declared on a type\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:10: error: static methods may only be declared on a type\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:10: error: static methods may only be declared on a type\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:72:1: error: extraneous '}' at top level\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n72 | }\n   | `- error: extraneous '}' at top level\n73 | \n74 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:10: error: static methods may only be declared on a type\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:10: error: static methods may only be declared on a type\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:10: error: static methods may only be declared on a type\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1155:1: error: extraneous '}' at top level\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n1155 | }\n     | `- error: extraneous '}' at top level\n1156 | \n1157 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:10: error: static methods may only be declared on a type\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:10: error: static methods may only be declared on a type\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:10: error: static methods may only be declared on a type\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:616:1: error: extraneous '}' at top level\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n616 | }\n    | `- error: extraneous '}' at top level\n617 | \n618 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:25: error: cannot find ')' to match opening '(' in string interpolation\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:23: error: unterminated string literal\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:25: error: cannot find ')' to match opening '(' in string interpolation\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:23: error: unterminated string literal\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:166:18: error: unterminated string literal\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n166 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n167 | \n168 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:247:18: error: unterminated string literal\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n247 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n248 | \n249 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:10: error: static methods may only be declared on a type\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:10: error: static methods may only be declared on a type\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:10: error: static methods may only be declared on a type\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:275:1: error: extraneous '}' at top level\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n275 | }\n    | `- error: extraneous '}' at top level\n276 | \n277 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:10: error: static methods may only be declared on a type\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:10: error: static methods may only be declared on a type\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:10: error: static methods may only be declared on a type\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:477:1: error: extraneous '}' at top level\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n477 | }\n    | `- error: extraneous '}' at top level\n478 | \n479 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:10: error: static methods may only be declared on a type\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:10: error: static methods may only be declared on a type\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:10: error: static methods may only be declared on a type\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:101:1: error: extraneous '}' at top level\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n101 | }\n    | `- error: extraneous '}' at top level\n102 | \n103 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:179:20: error: unterminated string literal\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n179 |         , source: \\\"SecurityImplementation\\\")\n    |                    `- error: unterminated string literal\n180 | \n181 |         // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:200:18: error: unterminated string literal\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n200 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n201 | \n202 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:343:18: error: unterminated string literal\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n343 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n344 | \n345 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:10: error: static methods may only be declared on a type\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:10: error: static methods may only be declared on a type\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:10: error: static methods may only be declared on a type\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:428:1: error: extraneous '}' at top level\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n428 | }\n    | `- error: extraneous '}' at top level\n429 | \n430 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:10: error: static methods may only be declared on a type\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:10: error: static methods may only be declared on a type\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:10: error: static methods may only be declared on a type\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:438:1: error: extraneous '}' at top level\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n438 | }\n    | `- error: extraneous '}' at top level\n439 | \n440 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:10: error: static methods may only be declared on a type\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:10: error: static methods may only be declared on a type\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:10: error: static methods may only be declared on a type\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:182:1: error: extraneous '}' at top level\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n182 | }\n    | `- error: extraneous '}' at top level\n183 | \n184 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:10: error: static methods may only be declared on a type\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:10: error: static methods may only be declared on a type\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:10: error: static methods may only be declared on a type\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:102:1: error: extraneous '}' at top level\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n102 | }\n    | `- error: extraneous '}' at top level\n103 | \n104 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:10: error: static methods may only be declared on a type\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:10: error: static methods may only be declared on a type\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:10: error: static methods may only be declared on a type\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:276:1: error: extraneous '}' at top level\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n276 | }\n    | `- error: extraneous '}' at top level\n277 | \n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:82:10: error: static methods may only be declared on a type\n80 | \n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n84 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:86:10: error: static methods may only be declared on a type\n84 |   }\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n88 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:90:10: error: static methods may only be declared on a type\n88 |   }\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:93:1: error: extraneous '}' at top level\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n93 | }\n   | `- error: extraneous '}' at top level\n94 | \n95 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:15: error: invalid redeclaration of 'notImplemented(reason:)'\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:15: error: invalid redeclaration of 'notImplemented(reason:)'\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: expected ',' separator\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: expected ',' separator\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: unnamed parameters must be written with the empty name '_'\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: unnamed parameters must be written with the empty name '_'\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:15: error: cannot find type 'createPrivacyMetadata' in scope\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |               `- error: cannot find type 'createPrivacyMetadata' in scope\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:15: error: invalid redeclaration of 'notImplemented(reason:)'\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:62:27: error: cannot find type 'KeyStorageManager' in scope\n 60 |   init(\n 61 |     cryptoService: CryptoServiceProtocol,\n 62 |     keyManagementService: KeyStorageManager,\n    |                           `- error: cannot find type 'KeyStorageManager' in scope\n 63 |     logger: PrivacyAwareLoggingProtocol\n 64 |   ) {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:137:38: error: extra arguments at positions #1, #2 in call\n 135 |     )\n 136 | \n 137 |     signatureService=SignatureService(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:78:3: note: 'init(logger:)' declared here\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: 'init(logger:)' declared here\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:140:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n 140 |       logger: logger\n     |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 141 |     )\n 142 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:50: error: expected ',' separator\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                                                  `- error: expected ',' separator\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:15: error: invalid redeclaration of 'notImplemented(reason:)'\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:15: error: invalid redeclaration of 'notImplemented(reason:)'\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:29: error: cannot find type 'createPrivacyMetadata' in scope\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                             `- error: cannot find type 'createPrivacyMetadata' in scope\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:15: error: invalid redeclaration of 'notImplemented(reason:)'\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:43:37: error: cannot find type 'KeyStorageManager' in scope\n 41 |    The key manager used for key storage and retrieval\n 42 |    */\n 43 |   private let keyManagementService: KeyStorageManager\n    |                                     `- error: cannot find type 'KeyStorageManager' in scope\n 44 | \n 45 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:32:13: error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n 30 |  - Handle signature-specific errors\n 31 |  */\n 32 | final class SignatureService: SecurityServiceBase {\n    |             |- error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n    |             `- note: add stubs for conformance\n 33 |   // MARK: - Properties\n 34 | \n    :\n 46 |    The logger instance for recording operation details\n 47 |    */\n 48 |   let logger: PrivacyAwareLoggingProtocol\n    |       `- note: candidate has non-matching type 'any PrivacyAwareLoggingProtocol'\n 49 | \n 50 |   // MARK: - Initialisation\n    :\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: candidate has non-matching type '(logger: any PrivacyAwareLoggingProtocol)'\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:42:3: note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 32 |    The logger instance for recording operation details\n 33 |    */\n 34 |   var logger: LoggingInterfaces.LoggingProtocol { get }\n    |       `- note: protocol requires property 'logger' with type 'any LoggingProtocol'\n 35 | \n 36 |   /**\n    :\n 40 |        - logger: The logging service to use for operation logging\n 41 |    */\n 42 |   init(logger: LoggingInterfaces.LoggingProtocol)\n    |   `- note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 43 | \n 44 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:15: error: invalid redeclaration of 'notImplemented(reason:)'\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:16:22: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n14 |   /// - Parameter reason: The reason for the error\n15 |   /// - Returns: A CoreSecurityError with the appropriate error code\n16 |   public static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n17 |     return .invalidInput(\"Invalid verification method: \\(reason)\")\n18 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:23:22: error: invalid redeclaration of 'verificationFailed(reason:)'\n21 |   /// - Parameter reason: The reason for the error\n22 |   /// - Returns: A CoreSecurityError with the appropriate error code\n23 |   public static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'verificationFailed(reason:)'\n24 |     return .authenticationFailed(\"Verification failed: \\(reason)\")\n25 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:30:22: error: invalid redeclaration of 'notImplemented(reason:)'\n28 |   /// - Parameter reason: The reason for the error\n29 |   /// - Returns: A CoreSecurityError with the appropriate error code\n30 |   public static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'notImplemented(reason:)'\n31 |     return .unsupportedOperation(\"Not implemented: \\(reason)\")\n32 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Logging.swift:38:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 36 |  according to the Alpha Dot Five architecture principles.\n 37 |  */\n 38 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 39 |   /**\n 40 |    Logs the start of a security operation with privacy-aware metadata.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  * Batch encryption and decryption for collections of data\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Encrypts data and then stores it securely.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:15: error: invalid redeclaration of 'notImplemented(reason:)'\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  - Common validation logic is centralised\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Validates configuration for encryption operations.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:15: error: invalid redeclaration of 'notImplemented(reason:)'\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               `- warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:30:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 28 |   /// - Returns: The generated random integer\n 29 |   /// - Throws: SecurityError if random generation fails\n 30 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 31 | \n 32 |   /// Generates a cryptographically secure random integer within the specified closed range\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               `- warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:36:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 34 |   /// - Returns: The generated random integer\n 35 |   /// - Throws: SecurityError if random generation fails\n 36 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 37 | \n 38 |   /// Generates a cryptographically secure random double between 0.0 and 1.0\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:15: error: invalid redeclaration of 'notImplemented(reason:)'\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:110:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n108 | \n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n111 |     return .invalidVerificationMethod(reason: reason)\n112 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:114:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n112 |   }\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n115 |     return .verificationFailed(reason: reason)\n116 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:118:15: error: invalid redeclaration of 'notImplemented(reason:)'\n116 |   }\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n119 |     return .notImplemented(reason: reason)\n120 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              `- error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 31 |   // MARK: - Private Properties\n 32 | \n    :\n349 |    - Returns: Result of the operation\n350 |    */\n351 |   public func performSecureOperation(\n    |               `- note: candidate has non-matching type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n352 |     operation: SecurityOperation,\n353 |     config: SecurityConfigDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              |- error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n    |              `- note: add stubs for conformance\n 31 |   // MARK: - Private Properties\n 32 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:109:8: note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:69:50: error: extra arguments at positions #1, #3, #4, #5 in call\n 67 |     self.logger = logger\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n    |                                                  `- error: extra arguments at positions #1, #3, #4, #5 in call\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/DTOs/SecurityDTOs.swift:23:10: note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 21 |   ///   - loggingLevel: The logging level for security operations\n 22 |   ///   - randomizationOptions: Options for secure random number generation\n 23 |   public init(\n    |          `- note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 24 |     securityLevel: CoreSecurityTypes.SecurityLevelDTO = .standard,\n 25 |     loggingLevel: CoreSecurityTypes.SecurityLogLevelDTO = .warning,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:70:22: error: cannot infer contextual base in reference to member 'standard'\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n 70 |       providerType: .standard,\n    |                      `- error: cannot infer contextual base in reference to member 'standard'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:72:29: error: cannot infer contextual base in reference to member 'aes256'\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n    |                             `- error: cannot infer contextual base in reference to member 'aes256'\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:73:23: error: cannot infer contextual base in reference to member 'sha256'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n    |                       `- error: cannot infer contextual base in reference to member 'sha256'\n 74 |       options: nil\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:74:16: error: 'nil' requires a contextual type\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n    |                `- error: 'nil' requires a contextual type\n 75 |     )\n 76 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:83:41: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 81 |         metadata: createPrivacyMetadata([\n 82 |           \"serviceId\": serviceId.uuidString,\n 83 |           \"providerType\": configuration.providerType.rawValue,\n    |                                         `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 84 |           \"securityLevel\": configuration.securityLevel.rawValue\n 85 |         ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: error: invalid redeclaration of 'notImplemented(reason:)'\n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n305 |     return .notImplemented(reason: reason)\n306 |   }\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:10: error: static methods may only be declared on a type\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:10: error: static methods may only be declared on a type\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:10: error: static methods may only be declared on a type\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:163:1: error: extraneous '}' at top level\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n163 | }\n    | `- error: extraneous '}' at top level\n164 | \n165 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:10: error: static methods may only be declared on a type\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:10: error: static methods may only be declared on a type\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:10: error: static methods may only be declared on a type\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:72:1: error: extraneous '}' at top level\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n72 | }\n   | `- error: extraneous '}' at top level\n73 | \n74 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: expected ',' separator\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: expected ',' separator\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: unnamed parameters must be written with the empty name '_'\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: unnamed parameters must be written with the empty name '_'\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:10: error: static methods may only be declared on a type\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:10: error: static methods may only be declared on a type\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:10: error: static methods may only be declared on a type\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1155:1: error: extraneous '}' at top level\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n1155 | }\n     | `- error: extraneous '}' at top level\n1156 | \n1157 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:10: error: static methods may only be declared on a type\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:10: error: static methods may only be declared on a type\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:10: error: static methods may only be declared on a type\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:616:1: error: extraneous '}' at top level\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n616 | }\n    | `- error: extraneous '}' at top level\n617 | \n618 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:25: error: cannot find ')' to match opening '(' in string interpolation\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:23: error: unterminated string literal\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:25: error: cannot find ')' to match opening '(' in string interpolation\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:23: error: unterminated string literal\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:166:18: error: unterminated string literal\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n166 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n167 | \n168 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:247:18: error: unterminated string literal\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n247 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n248 | \n249 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:10: error: static methods may only be declared on a type\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:10: error: static methods may only be declared on a type\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:10: error: static methods may only be declared on a type\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:275:1: error: extraneous '}' at top level\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n275 | }\n    | `- error: extraneous '}' at top level\n276 | \n277 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:260:65: error: expected ',' separator\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n    |                                                                 `- error: expected ',' separator\n261 |             ]\n262 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:260:65: error: expected key expression in dictionary literal\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n    |                                                                 `- error: expected key expression in dictionary literal\n261 |             ]\n262 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:264:9: error: expected ')' in expression list\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- note: to match this opening '('\n256 |             status: .success,\n257 |             data: decryptedData,\n    :\n262 |           )\n263 | \n264 |         case let .failure(error):\n    |         `- error: expected ')' in expression list\n265 |           throw SecureStorageError.decryptionError(\"Failed to decrypt data: \\(error)\")\n266 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:50: error: expected ',' separator\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                                                  `- error: expected ',' separator\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:10: error: static methods may only be declared on a type\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:10: error: static methods may only be declared on a type\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:10: error: static methods may only be declared on a type\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:477:1: error: extraneous '}' at top level\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n477 | }\n    | `- error: extraneous '}' at top level\n478 | \n479 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:10: error: static methods may only be declared on a type\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:10: error: static methods may only be declared on a type\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:10: error: static methods may only be declared on a type\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:101:1: error: extraneous '}' at top level\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n101 | }\n    | `- error: extraneous '}' at top level\n102 | \n103 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:179:20: error: unterminated string literal\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n179 |         , source: \\\"SecurityImplementation\\\")\n    |                    `- error: unterminated string literal\n180 | \n181 |         // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:200:18: error: unterminated string literal\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n200 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n201 | \n202 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:343:18: error: unterminated string literal\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n343 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n344 | \n345 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:10: error: static methods may only be declared on a type\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:10: error: static methods may only be declared on a type\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:10: error: static methods may only be declared on a type\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:428:1: error: extraneous '}' at top level\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n428 | }\n    | `- error: extraneous '}' at top level\n429 | \n430 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:70:96: error: expected ',' separator\n 68 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n 69 |         verifyOperations: config.options?.verifyOperations ?? true,\n 70 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected ',' separator\n 71 |           \"identifier\": config.options?.metadata?[\"storeIdentifier\"] ?? UUID().uuidString,\n 72 |           \"data\": encryptResult.resultData?.base64EncodedString() ?? \"\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:70:96: error: expected key expression in dictionary literal\n 68 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n 69 |         verifyOperations: config.options?.verifyOperations ?? true,\n 70 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected key expression in dictionary literal\n 71 |           \"identifier\": config.options?.metadata?[\"storeIdentifier\"] ?? UUID().uuidString,\n 72 |           \"data\": encryptResult.resultData?.base64EncodedString() ?? \"\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:77:5: error: expected ')' in expression list\n 57 | \n 58 |     // Now store the encrypted data\n 59 |     let storeConfig=SecurityConfigDTO(\n    |                                      `- note: to match this opening '('\n 60 |       encryptionAlgorithm: config.encryptionAlgorithm,\n 61 |       hashAlgorithm: config.hashAlgorithm,\n    :\n 75 |     )\n 76 | \n 77 |     let storeResult=try await performSecureOperation(\n    |     `- error: expected ')' in expression list\n 78 |       operation: .storeKey,\n 79 |       config: storeConfig\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:112:96: error: expected ',' separator\n110 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n111 |         verifyOperations: config.options?.verifyOperations ?? true,\n112 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected ',' separator\n113 |           \"identifier\": identifier\n114 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:112:96: error: expected key expression in dictionary literal\n110 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n111 |         verifyOperations: config.options?.verifyOperations ?? true,\n112 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected key expression in dictionary literal\n113 |           \"identifier\": identifier\n114 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:119:5: error: expected ')' in expression list\n 99 |   ) async throws -\u003e SecurityResultDTO {\n100 |     // First retrieve the encrypted data\n101 |     let retrieveConfig=SecurityConfigDTO(\n    |                                         `- note: to match this opening '('\n102 |       encryptionAlgorithm: config.encryptionAlgorithm,\n103 |       hashAlgorithm: config.hashAlgorithm,\n    :\n117 | \n118 |     // Retrieve the encrypted data\n119 |     let retrieveResult=try await performSecureOperation(\n    |     `- error: expected ')' in expression list\n120 |       operation: .retrieveKey,\n121 |       config: retrieveConfig\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:10: error: static methods may only be declared on a type\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:10: error: static methods may only be declared on a type\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:10: error: static methods may only be declared on a type\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:438:1: error: extraneous '}' at top level\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n438 | }\n    | `- error: extraneous '}' at top level\n439 | \n440 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:62:7: error: expected expression\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n 62 |       )\n    |       `- error: expected expression\n 63 |       actualLogger=developmentLogger\n 64 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:106:7: error: expected expression\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n106 |       )\n    |       `- error: expected expression\n107 |       actualLogger=developmentLogger\n108 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:151:7: error: expected expression\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n151 |       )\n    |       `- error: expected expression\n152 |       actualLogger=developmentLogger\n153 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:10: error: static methods may only be declared on a type\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:10: error: static methods may only be declared on a type\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:10: error: static methods may only be declared on a type\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:182:1: error: extraneous '}' at top level\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n182 | }\n    | `- error: extraneous '}' at top level\n183 | \n184 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:10: error: static methods may only be declared on a type\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:10: error: static methods may only be declared on a type\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:10: error: static methods may only be declared on a type\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:102:1: error: extraneous '}' at top level\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n102 | }\n    | `- error: extraneous '}' at top level\n103 | \n104 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:10: error: static methods may only be declared on a type\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:10: error: static methods may only be declared on a type\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:10: error: static methods may only be declared on a type\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:276:1: error: extraneous '}' at top level\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n276 | }\n    | `- error: extraneous '}' at top level\n277 | \n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:82:10: error: static methods may only be declared on a type\n80 | \n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n84 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:86:10: error: static methods may only be declared on a type\n84 |   }\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n88 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:90:10: error: static methods may only be declared on a type\n88 |   }\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:93:1: error: extraneous '}' at top level\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n93 | }\n   | `- error: extraneous '}' at top level\n94 | \n95 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:173:5: error: expected expression\n171 |         \"durationMs\": String(format: \"%.2f\", duration)\n172 |       ])\n173 |     )\n    |     `- error: expected expression\n174 |   }\n175 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityErrorHandler.swift:73:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 71 |     await logger.error(\n 72 |       \"Security operation failed: \\(securityError.message)\",\n 73 |       metadata: metadata,\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 74 |       source: source\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityErrorHandler.swift:100:8: error: initializer for conditional binding must have Optional type, not 'NSError'\n 98 |     \n 99 |     // If it's an NSError, map it to a SecurityError\n100 |     if let nsError = error as NSError {\n    |        `- error: initializer for conditional binding must have Optional type, not 'NSError'\n101 |       return mapSecurityFrameworkError(nsError)\n102 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:15: error: invalid redeclaration of 'notImplemented(reason:)'\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:153:13: error: type 'CoreSecurityError' has no member 'general'\n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n154 |   }\n155 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:157:13: error: type 'CoreSecurityError' has no member 'general'\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n158 |   }\n159 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:161:13: error: type 'CoreSecurityError' has no member 'general'\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n162 |   }\n163 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:15: error: invalid redeclaration of 'notImplemented(reason:)'\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:62:13: error: type 'CoreSecurityError' has no member 'general'\n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n63 |   }\n64 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:66:13: error: type 'CoreSecurityError' has no member 'general'\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n67 |   }\n68 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:70:13: error: type 'CoreSecurityError' has no member 'general'\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n71 |   }\n72 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:15: error: cannot find type 'createPrivacyMetadata' in scope\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |               `- error: cannot find type 'createPrivacyMetadata' in scope\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:15: error: invalid redeclaration of 'notImplemented(reason:)'\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:62:27: error: cannot find type 'KeyStorageManager' in scope\n 60 |   init(\n 61 |     cryptoService: CryptoServiceProtocol,\n 62 |     keyManagementService: KeyStorageManager,\n    |                           `- error: cannot find type 'KeyStorageManager' in scope\n 63 |     logger: PrivacyAwareLoggingProtocol\n 64 |   ) {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:137:38: error: extra arguments at positions #1, #2 in call\n 135 |     )\n 136 | \n 137 |     signatureService=SignatureService(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:78:3: note: 'init(logger:)' declared here\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: 'init(logger:)' declared here\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:140:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n 140 |       logger: logger\n     |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 141 |     )\n 142 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:159:63: error: missing argument for parameter 'context' in call\n 157 |    */\n 158 |   public func initialize() async throws {\n 159 |     await logger.info(\"Initializing security provider service\")\n     |                                                               `- error: missing argument for parameter 'context' in call\n 160 | \n 161 |     // Log with secure logger for enhanced privacy awareness\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:182:75: error: missing argument for parameter 'context' in call\n 180 |     }\n 181 | \n 182 |     await logger.info(\"Security provider service initialized successfully\")\n     |                                                                           `- error: missing argument for parameter 'context' in call\n 183 | \n 184 |     // Log successful initialisation with secure logger\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:235:33: error: missing arguments for parameters 'mode', 'padding' in call\n 233 |       dataIdentifier: dataIdentifier,\n 234 |       keyIdentifier: keyIdentifier,\n 235 |       options: EncryptionOptions(algorithm: .aes256CBC)\n     |                                 `- error: missing arguments for parameters 'mode', 'padding' in call\n 236 |     )\n 237 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:105:10: note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n103 |   public let additionalAuthenticatedData: [UInt8]? // For AEAD modes like GCM\n104 | \n105 |   public init(\n    |          `- note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n106 |     algorithm: EncryptionAlgorithm,\n107 |     mode: EncryptionMode,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:248:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 246 |           return encryptedData\n 247 |         } else {\n 248 |           throw SecurityProtocolError.inputError(\"Failed to retrieve encrypted data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 249 |         }\n 250 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:271:33: error: missing arguments for parameters 'mode', 'padding' in call\n 269 |       encryptedDataIdentifier: encryptedDataIdentifier,\n 270 |       keyIdentifier: keyIdentifier,\n 271 |       options: DecryptionOptions(algorithm: .aes256CBC)\n     |                                 `- error: missing arguments for parameters 'mode', 'padding' in call\n 272 |     )\n 273 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:105:10: note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n103 |   public let additionalAuthenticatedData: [UInt8]? // For AEAD modes like GCM\n104 | \n105 |   public init(\n    |          `- note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n106 |     algorithm: EncryptionAlgorithm,\n107 |     mode: EncryptionMode,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:284:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 282 |           return decryptedData\n 283 |         } else {\n 284 |           throw SecurityProtocolError.inputError(\"Failed to retrieve decrypted data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 285 |         }\n 286 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:314:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 312 |           return signatureData\n 313 |         } else {\n 314 |           throw SecurityProtocolError.inputError(\"Failed to retrieve signature data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 315 |         }\n 316 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:368:68: error: cannot find 'createPrivacyMetadata' in scope\n 366 |     // Check if a key identifier is provided to load from key manager\n 367 |     if let keyID=config.options?.metadata?[\"keyIdentifier\"] {\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n     |                                                                    `- error: cannot find 'createPrivacyMetadata' in scope\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:370:9: error: missing argument for parameter 'source' in call\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n     |         `- error: missing argument for parameter 'source' in call\n 371 | \n 372 |       let result=await keyManager.retrieveKey(withIdentifier: keyID)\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:368:106: error: extra arguments at positions #2, #3 in call\n 366 |     // Check if a key identifier is provided to load from key manager\n 367 |     if let keyID=config.options?.metadata?[\"keyIdentifier\"] {\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n     |                                                                                                          `- error: extra arguments at positions #2, #3 in call\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:377:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 375 |           return key\n 376 |         case let .failure(error):\n 377 |           throw SecurityProtocolError.inputError(\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 378 |             \"Failed to retrieve key with identifier \\(keyID): \\(error.localizedDescription)\"\n 379 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:408:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 406 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 407 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n     |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:409:82: error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 407 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n     |                                                                                  `- error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n 411 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:410:80: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 411 |       ]\n 412 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:410:94: error: cannot convert value of type 'Bool' to expected argument type 'String'\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                              `- error: cannot convert value of type 'Bool' to expected argument type 'String'\n 411 |       ]\n 412 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:431:86: error: value of type 'SecurityResultDTO' has no member 'data'\n 429 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 430 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 431 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n     |                                                                                      `- error: value of type 'SecurityResultDTO' has no member 'data'\n 432 |         ]\n 433 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:430:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 428 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 429 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 430 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 431 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n 432 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:449:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 447 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 448 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 449 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 450 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 451 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:481:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 479 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 480 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n     |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:482:82: error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 480 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n     |                                                                                  `- error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n 484 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:483:80: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 484 |       ]\n 485 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:483:94: error: cannot convert value of type 'Bool' to expected argument type 'String'\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                              `- error: cannot convert value of type 'Bool' to expected argument type 'String'\n 484 |       ]\n 485 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:504:86: error: value of type 'SecurityResultDTO' has no member 'data'\n 502 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 503 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 504 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n     |                                                                                      `- error: value of type 'SecurityResultDTO' has no member 'data'\n 505 |         ]\n 506 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:503:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 501 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 502 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 503 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 504 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n 505 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:522:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 520 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 521 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 522 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 523 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 524 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:547:49: error: cannot find 'createPrivacyMetadata' in scope\n 545 |     // Log operation with standard logger\n 546 |     await logger.info(\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n     |                                                 `- error: cannot find 'createPrivacyMetadata' in scope\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:549:15: error: extra argument 'source' in call\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n     |               `- error: extra argument 'source' in call\n 550 | \n 551 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:547:90: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 545 |     // Log operation with standard logger\n 546 |     await logger.info(\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n     |                                                                                          `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:560:81: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 558 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 559 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 560 |         \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public),\n     |                                                                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 561 |         \"keySize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keySize), privacyLevel: .public)\n 562 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:561:81: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 559 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 560 |         \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public),\n 561 |         \"keySize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keySize), privacyLevel: .public)\n     |                                                                                 `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 562 |       ]\n 563 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:567:39: error: value of type 'any KeyManagementProtocol' has no member 'generateKey'\n 565 |     do {\n 566 |       // Process the request through the key management service\n 567 |       let result=try await keyManager.generateKey(\n     |                                       `- error: value of type 'any KeyManagementProtocol' has no member 'generateKey'\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:568:22: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 566 |       // Process the request through the key management service\n 567 |       let result=try await keyManager.generateKey(\n 568 |         type: config.keyType,\n     |                      `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 569 |         size: config.keySize,\n 570 |         metadata: config.metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:569:22: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 567 |       let result=try await keyManager.generateKey(\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n     |                      `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 570 |         metadata: config.metadata\n 571 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:570:26: error: value of type 'SecurityConfigDTO' has no member 'metadata'\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n 570 |         metadata: config.metadata\n     |                          `- error: value of type 'SecurityConfigDTO' has no member 'metadata'\n 571 |       )\n 572 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:19: error: cannot find 'createPrivacyMetadata' in scope\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                   `- error: cannot find 'createPrivacyMetadata' in scope\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:60: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                                                            `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:103: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:21: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                     `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:38: error: extra arguments at positions #1, #2 in call\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:38: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                                      `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:578:18: error: cannot infer contextual base in reference to member 'success'\n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n 578 |         status: .success,\n     |                  `- error: cannot infer contextual base in reference to member 'success'\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:592:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 590 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 591 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 592 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 593 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n 594 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:593:83: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 591 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 592 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 593 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n     |                                                                                   `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 594 |         ]\n 595 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:599:60: error: cannot find 'createPrivacyMetadata' in scope\n 597 |       // Log completion\n 598 |       await logger.info(\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n     |                                                            `- error: cannot find 'createPrivacyMetadata' in scope\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:601:17: error: extra argument 'source' in call\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n     |                 `- error: extra argument 'source' in call\n 602 | \n 603 |       return resultDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:599:101: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 597 |       // Log completion\n 598 |       await logger.info(\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n     |                                                                                                     `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:617:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 615 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 616 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 617 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 618 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 619 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:620:83: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 618 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 619 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public),\n 620 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n     |                                                                                   `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 621 |         ]\n 622 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:627:19: error: cannot find 'createPrivacyMetadata' in scope\n 625 |       await logger.error(\n 626 |         \"Key generation failed: \\(error.localizedDescription)\",\n 627 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"error\": error.localizedDescription]),\n     |                   `- error: cannot find 'createPrivacyMetadata' in scope\n 628 |         source: \"CoreSecurityProvider\"\n 629 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:627:60: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 625 |       await logger.error(\n 626 |         \"Key generation failed: \\(error.localizedDescription)\",\n 627 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"error\": error.localizedDescription]),\n     |                                                            `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 628 |         source: \"CoreSecurityProvider\"\n 629 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:644:5: warning: no calls to throwing functions occur within 'try' expression\n 642 |    */\n 643 |   public func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 644 |     try await signatureService.sign(config: config)\n     |     `- warning: no calls to throwing functions occur within 'try' expression\n 645 |   }\n 646 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:656:5: warning: no calls to throwing functions occur within 'try' expression\n 654 |    */\n 655 |   public func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 656 |     try await signatureService.verify(config: config)\n     |     `- warning: no calls to throwing functions occur within 'try' expression\n 657 |   }\n 658 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:668:30: error: value of type 'SecureStorageService' has no member 'store'\n 666 |    */\n 667 |   public func store(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 668 |     try await storageService.store(config: config)\n     |                              `- error: value of type 'SecureStorageService' has no member 'store'\n 669 |   }\n 670 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:680:30: error: value of type 'SecureStorageService' has no member 'retrieve'\n 678 |    */\n 679 |   public func retrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 680 |     try await storageService.retrieve(config: config)\n     |                              `- error: value of type 'SecureStorageService' has no member 'retrieve'\n 681 |   }\n 682 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:693:69: error: cannot find 'createPrivacyMetadata' in scope\n 691 |     let operationID=UUID().uuidString\n 692 | \n 693 |     await logger.debug(\"Starting secure store operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                     `- error: cannot find 'createPrivacyMetadata' in scope\n 694 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 695 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:702:27: error: type 'SecurityError' has no member 'invalidInput'\n 700 |       let inputData=Data(base64Encoded: dataString)\n 701 |     else {\n 702 |       throw SecurityError.invalidInput(\"Missing or invalid input data for secure storage\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 703 |     }\n 704 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:714:27: error: type 'SecurityError' has no member 'internalError'\n 712 |     // Then store the encrypted data using the key manager\n 713 |     guard let encryptedData=encryptionResult.resultData else {\n 714 |       throw SecurityError.internalError(\"Encryption successful but no encrypted data returned\")\n     |                           `- error: type 'SecurityError' has no member 'internalError'\n 715 |     }\n 716 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:718:50: error: extra arguments at positions #2, #3 in call\n 716 | \n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n     |                                                  `- error: extra arguments at positions #2, #3 in call\n 719 |       identifier: keyIdentifier,\n 720 |       keyData: encryptedData,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:20:8: note: 'storeKey(_:withIdentifier:)' declared here\n18 |   ///   - identifier: A string identifier for the key.\n19 |   /// - Returns: Success or an error.\n20 |   func storeKey(_ key: [UInt8], withIdentifier identifier: String) async\n   |        `- note: 'storeKey(_:withIdentifier:)' declared here\n21 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n22 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:719:32: error: missing argument for parameter 'withIdentifier' in call\n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n 719 |       identifier: keyIdentifier,\n     |                                `- error: missing argument for parameter 'withIdentifier' in call\n 720 |       keyData: encryptedData,\n 721 |       metadata: config.options?.metadata ?? [:]\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:20:8: note: 'storeKey(_:withIdentifier:)' declared here\n18 |   ///   - identifier: A string identifier for the key.\n19 |   /// - Returns: Success or an error.\n20 |   func storeKey(_ key: [UInt8], withIdentifier identifier: String) async\n   |        `- note: 'storeKey(_:withIdentifier:)' declared here\n21 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n22 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:719:19: error: cannot convert value of type 'String' to expected argument type '[UInt8]'\n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n 719 |       identifier: keyIdentifier,\n     |                   `- error: cannot convert value of type 'String' to expected argument type '[UInt8]'\n 720 |       keyData: encryptedData,\n 721 |       metadata: config.options?.metadata ?? [:]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:726:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 724 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 725 | \n 726 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 727 |       successful: storeResult.successful,\n 728 |       resultData: keyIdentifier.data(using: .utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:745:72: error: cannot find 'createPrivacyMetadata' in scope\n 743 |     let operationID=UUID().uuidString\n 744 | \n 745 |     await logger.debug(\"Starting secure retrieve operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n 746 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 747 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:751:27: error: type 'SecurityError' has no member 'invalidInput'\n 749 |     // Extract required parameters from configuration\n 750 |     guard let keyIdentifier=config.options?.metadata?[\"key_identifier\"] else {\n 751 |       throw SecurityError.invalidInput(\"Missing key identifier for secure retrieval\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 752 |     }\n 753 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:755:45: error: value of type 'any KeyManagementProtocol' has no member 'getKey'\n 753 | \n 754 |     // Retrieve the encrypted data using the key manager\n 755 |     let retrieveResult=try await keyManager.getKey(\n     |                                             `- error: value of type 'any KeyManagementProtocol' has no member 'getKey'\n 756 |       identifier: keyIdentifier,\n 757 |       metadata: config.options?.metadata ?? [:]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:762:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 760 |     if !retrieveResult.successful || retrieveResult.keyData == nil {\n 761 |       let errorDetails=retrieveResult.errorDetails ?? \"Failed to retrieve data\"\n 762 |       return SecurityResultDTO(\n     |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 763 |         successful: false,\n 764 |         resultData: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:780:27: error: type 'SecurityError' has no member 'internalError'\n 778 | \n 779 |     guard let keyData=retrieveResult.keyData else {\n 780 |       throw SecurityError.internalError(\"Key data missing after successful retrieval\")\n     |                           `- error: type 'SecurityError' has no member 'internalError'\n 781 |     }\n 782 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:808:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 806 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 807 | \n 808 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 809 |       successful: decryptResult.successful,\n 810 |       resultData: decryptResult.resultData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:827:70: error: cannot find 'createPrivacyMetadata' in scope\n 825 |     let operationID=UUID().uuidString\n 826 | \n 827 |     await logger.debug(\"Starting secure delete operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID\n     |                                                                      `- error: cannot find 'createPrivacyMetadata' in scope\n 828 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n 829 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:832:27: error: type 'SecurityError' has no member 'invalidInput'\n 830 |     // Extract required parameters from configuration\n 831 |     guard let keyIdentifier=config.options?.metadata?[\"key_identifier\"] else {\n 832 |       throw SecurityError.invalidInput(\"Missing key identifier for secure deletion\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 833 |     }\n 834 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:836:52: error: extra arguments at positions #1, #2 in call\n 834 | \n 835 |     // Delete the key using the key manager\n 836 |     let deleteResult=try await keyManager.deleteKey(\n     |                                                    `- error: extra arguments at positions #1, #2 in call\n 837 |       identifier: keyIdentifier,\n 838 |       metadata: config.options?.metadata ?? [:]\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:26:8: note: 'deleteKey(withIdentifier:)' declared here\n24 |   /// - Parameter identifier: A string identifying the key to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteKey(withIdentifier identifier: String) async\n   |        `- note: 'deleteKey(withIdentifier:)' declared here\n27 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n28 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:837:7: error: missing argument for parameter 'withIdentifier' in call\n 835 |     // Delete the key using the key manager\n 836 |     let deleteResult=try await keyManager.deleteKey(\n 837 |       identifier: keyIdentifier,\n     |       `- error: missing argument for parameter 'withIdentifier' in call\n 838 |       metadata: config.options?.metadata ?? [:]\n 839 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:26:8: note: 'deleteKey(withIdentifier:)' declared here\n24 |   /// - Parameter identifier: A string identifying the key to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteKey(withIdentifier identifier: String) async\n   |        `- note: 'deleteKey(withIdentifier:)' declared here\n27 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n28 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:843:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 841 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 842 | \n 843 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 844 |       successful: deleteResult.successful,\n 845 |       resultData: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:867:86: error: cannot find 'createPrivacyMetadata' in scope\n 865 |     let operationID=UUID().uuidString\n 866 | \n 867 |     await logger.debug(\"Starting secure operation: \\(operation.rawValue)\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                                      `- error: cannot find 'createPrivacyMetadata' in scope\n 868 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 869 |     ]))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:869:7: error: missing argument for parameter 'source' in call\n 867 |     await logger.debug(\"Starting secure operation: \\(operation.rawValue)\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n 868 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 869 |     ]))\n     |       `- error: missing argument for parameter 'source' in call\n 870 | \n 871 |     let result: CoreSecurityTypes.SecurityResultDTO=switch operation {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:877:19: error: cannot find 'hash' in scope\n 875 |         try await decrypt(config: config)\n 876 |       case .hashing:\n 877 |         try await hash(config: config)\n     |                   `- error: cannot find 'hash' in scope\n 878 |       case .keyGeneration:\n 879 |         try await generateKey(config: config)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:881:19: error: cannot find 'rotateKey' in scope\n 879 |         try await generateKey(config: config)\n 880 |       case .keyRotation:\n 881 |         try await rotateKey(config: config)\n     |                   `- error: cannot find 'rotateKey' in scope\n 882 |       case .keyDeletion:\n 883 |         try await secureDelete(config: config)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:872:13: error: type 'SecurityOperation' has no member 'encryption'\n 870 | \n 871 |     let result: CoreSecurityTypes.SecurityResultDTO=switch operation {\n 872 |       case .encryption:\n     |             `- error: type 'SecurityOperation' has no member 'encryption'\n 873 |         try await encrypt(config: config)\n 874 |       case .decryption:\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:897:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 895 |     updatedMetadata[\"operation_id\"]=operationID\n 896 | \n 897 |     return CoreSecurityTypes.SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 898 |       successful: result.successful,\n 899 |       resultData: result.resultData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:924:8: error: type 'SigningAlgorithm' has no member 'hmacSHA256'\n 922 |       .ed25519 // Hardware accelerated where available\n 923 |     } else {\n 924 |       .hmacSHA256 // Software implementation\n     |        `- error: type 'SigningAlgorithm' has no member 'hmacSHA256'\n 925 |     }\n 926 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:928:36: error: no type named 'HashingAlgorithm' in module 'CoreSecurityTypes'\n 926 | \n 927 |     // Determine the hashing algorithm\n 928 |     let hashing: CoreSecurityTypes.HashingAlgorithm=if options.useStrongerHashing {\n     |                                    `- error: no type named 'HashingAlgorithm' in module 'CoreSecurityTypes'\n 929 |       .sha512 // Stronger but slower\n 930 |     } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:935:25: error: cannot find 'SecurityOptions' in scope\n 933 | \n 934 |     // Create the security options with selected algorithms\n 935 |     let securityOptions=SecurityOptions(\n     |                         `- error: cannot find 'SecurityOptions' in scope\n 936 |       encryption: encryption,\n 937 |       decryption: encryption,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:944:29: error: extra arguments at positions #2, #3 in call\n 942 | \n 943 |     // Create the configuration DTO with the options\n 944 |     return SecurityConfigDTO(\n     |                             `- error: extra arguments at positions #2, #3 in call\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityConfigDTO.swift:31:10: note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n29 |      - options: Optional configuration options\n30 |    */\n31 |   public init(\n   |          `- note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n32 |     encryptionAlgorithm: EncryptionAlgorithm,\n33 |     hashAlgorithm: HashAlgorithm,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:944:29: error: missing arguments for parameters 'encryptionAlgorithm', 'hashAlgorithm', 'providerType' in call\n 942 | \n 943 |     // Create the configuration DTO with the options\n 944 |     return SecurityConfigDTO(\n     |                             `- error: missing arguments for parameters 'encryptionAlgorithm', 'hashAlgorithm', 'providerType' in call\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityConfigDTO.swift:31:10: note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n29 |      - options: Optional configuration options\n30 |    */\n31 |   public init(\n   |          `- note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n32 |     encryptionAlgorithm: EncryptionAlgorithm,\n33 |     hashAlgorithm: HashAlgorithm,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:946:21: error: value of type 'SecurityConfigOptions' has no member 'data'\n 944 |     return SecurityConfigDTO(\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n     |                     `- error: value of type 'SecurityConfigOptions' has no member 'data'\n 947 |       outputFormat: options.outputFormat ?? .binary\n 948 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:947:29: error: value of type 'SecurityConfigOptions' has no member 'outputFormat'\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n 947 |       outputFormat: options.outputFormat ?? .binary\n     |                             `- error: value of type 'SecurityConfigOptions' has no member 'outputFormat'\n 948 |     )\n 949 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:947:46: error: cannot infer contextual base in reference to member 'binary'\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n 947 |       outputFormat: options.outputFormat ?? .binary\n     |                                              `- error: cannot infer contextual base in reference to member 'binary'\n 948 |     )\n 949 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:963:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 961 | \n 962 |     // Map known error types to appropriate security errors\n 963 |     if let nsError=error as? NSError {\n     |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 964 |       switch nsError.domain {\n 965 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:966:19: error: type 'SecurityProtocolError' has no member 'networkError'\n 964 |       switch nsError.domain {\n 965 |         case NSURLErrorDomain:\n 966 |           return .networkError(\n     |                   `- error: type 'SecurityProtocolError' has no member 'networkError'\n 967 |             \"Network error during security operation: \\(nsError.localizedDescription)\"\n 968 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:970:19: error: type 'SecurityProtocolError' has no member 'systemError'\n 968 |           )\n 969 |         case NSOSStatusErrorDomain:\n 970 |           return .systemError(\n     |                   `- error: type 'SecurityProtocolError' has no member 'systemError'\n 971 |             \"System error during security operation: \\(nsError.localizedDescription)\"\n 972 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:979:13: error: type 'SecurityProtocolError' has no member 'generalError'\n 977 | \n 978 |     // Default error mapping\n 979 |     return .generalError(\"Security operation failed: \\(error.localizedDescription)\")\n     |             `- error: type 'SecurityProtocolError' has no member 'generalError'\n 980 |   }\n 981 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:32: error: extra argument 'errorCode' in call\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                `- error: extra argument 'errorCode' in call\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:36: error: missing argument for parameter 'executionTimeMs' in call\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                    `- error: missing argument for parameter 'executionTimeMs' in call\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityResultDTO.swift:55:22: note: 'failure(errorDetails:executionTimeMs:metadata:)' declared here\n53 |      - metadata: Optional additional metadata\n54 |    */\n55 |   public static func failure(\n   |                      `- note: 'failure(errorDetails:executionTimeMs:metadata:)' declared here\n56 |     errorDetails: String,\n57 |     executionTimeMs: Double,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:32: error: value of type 'SecurityProtocolError' has no member 'code'\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                `- error: value of type 'SecurityProtocolError' has no member 'code'\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1031:21: error: pattern with associated values does not match enum case 'encrypt'\n1029 |       let result: SecurityResultDTO=try await {\n1030 |         switch operation {\n1031 |           case let .encrypt(data, key, algorithm):\n     |                     |- error: pattern with associated values does not match enum case 'encrypt'\n     |                     `- note: remove associated values to make the pattern match\n1032 |             let config=SecurityConfigDTO(\n1033 |               operationType: .encrypt,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:49: error: extra arguments at positions #1, #2 in call\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |                                                 `- error: extra arguments at positions #1, #2 in call\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:49: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |                                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1133:18: error: cannot infer contextual base in reference to member 'failure'\n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n1133 |         status: .failure,\n     |                  `- error: cannot infer contextual base in reference to member 'failure'\n1134 |         error: error.localizedDescription,\n1135 |         metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1145:13: error: type 'CoreSecurityError' has no member 'general'\n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1146 |   }\n1147 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1149:13: error: type 'CoreSecurityError' has no member 'general'\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1150 |   }\n1151 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1153:13: error: type 'CoreSecurityError' has no member 'general'\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1154 |   }\n1155 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:15: error: invalid redeclaration of 'notImplemented(reason:)'\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:123:121: error: extra argument 'source' in call\n121 |     )\n122 | \n123 |     await logger.info(\"Starting encryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                         `- error: extra argument 'source' in call\n124 | \n125 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:123:66: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n121 |     )\n122 | \n123 |     await logger.info(\"Starting encryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                  `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n124 | \n125 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:134:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n132 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n133 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n134 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n    |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n135 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n136 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:135:90: error: value of type 'SecurityConfigOptions?' has no subscripts\n133 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n134 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n135 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n    |                                                                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n136 |       ]\n137 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:142:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n140 |       // Extract required parameters from configuration\n141 |       guard\n142 |         let inputDataString=config.options[\"data\"],\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n143 |         let inputData=Data(base64Encoded: inputDataString)\n144 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:171:33: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n169 |       // Choose encryption key\n170 |       let keyIdentifier: String\n171 |       if let configKeyID=config.keyIdentifier {\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n172 |         keyIdentifier=configKeyID\n173 |       } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:210:19: error: cannot find 'createPrivacyMetadata' in scope\n208 |         status: .success,\n209 |         data: encryptedData,\n210 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n211 |           \"operationID\": operationID,\n212 |           \"durationMs\": String(Int(duration * 1000))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:35: error: extra arguments at positions #1, #2 in call\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:208:18: error: cannot infer contextual base in reference to member 'success'\n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n208 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n209 |         data: encryptedData,\n210 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:225:72: error: type 'PrivacyMetadataValue' has no member 'int'\n223 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n224 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n225 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n226 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(encryptedData.count), privacyLevel: .public)\n227 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:226:72: error: type 'PrivacyMetadataValue' has no member 'int'\n224 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n225 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n226 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(encryptedData.count), privacyLevel: .public)\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n227 |         ]\n228 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:232:56: error: cannot find 'createPrivacyMetadata' in scope\n230 |       // Log success\n231 |       await logger.info(\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n234 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:234:11: error: missing argument for parameter 'source' in call\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n234 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n235 |       )\n236 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:233:35: error: extra arguments at positions #2, #3 in call\n231 |       await logger.info(\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n    |                                   `- error: extra arguments at positions #2, #3 in call\n234 |         ])\n235 |       )\n\nSwift.Int.init:2:8: note: 'init(_:)' declared here\n1 | struct Int {\n2 | public init(_ source: Double)}\n  |        `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:255:72: error: type 'PrivacyMetadataValue' has no member 'int'\n253 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n254 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n255 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n256 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n257 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:264:19: error: cannot find 'createPrivacyMetadata' in scope\n262 |       await logger.error(\n263 |         \"Encryption failed: \\(error.localizedDescription)\",\n264 |         metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n265 |           \"durationMs\": String(Int(duration * 1000)),\n266 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:267:11: error: missing argument for parameter 'source' in call\n265 |           \"durationMs\": String(Int(duration * 1000)),\n266 |           \"error\": error.localizedDescription\n267 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n268 |       )\n269 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:274:19: error: cannot find 'createPrivacyMetadata' in scope\n272 |         status: .failure,\n273 |         data: nil,\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n275 |           \"operationID\": operationID,\n276 |           \"durationMs\": String(Int(duration * 1000)),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:35: error: extra arguments at positions #1, #2 in call\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:272:18: error: cannot infer contextual base in reference to member 'failure'\n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n272 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n273 |         data: nil,\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:273:15: error: 'nil' requires a contextual type\n271 |       let result=SecurityResultDTO(\n272 |         status: .failure,\n273 |         data: nil,\n    |               `- error: 'nil' requires a contextual type\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n275 |           \"operationID\": operationID,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:242:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n240 | \n241 |       return result\n242 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n243 |       // Calculate duration for metrics\n244 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:303:121: error: extra argument 'source' in call\n301 |     )\n302 | \n303 |     await logger.info(\"Starting decryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                         `- error: extra argument 'source' in call\n304 | \n305 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:303:66: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n301 |     )\n302 | \n303 |     await logger.info(\"Starting decryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                  `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n304 | \n305 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:314:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n312 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n313 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n314 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n    |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n315 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n316 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:315:90: error: value of type 'SecurityConfigOptions?' has no subscripts\n313 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n314 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n315 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n    |                                                                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n316 |       ]\n317 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:322:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n320 |       // Extract required parameters from configuration\n321 |       guard\n322 |         let inputDataString=config.options[\"data\"],\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n323 |         let inputData=Data(base64Encoded: inputDataString)\n324 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:351:33: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n349 |       // Choose decryption key\n350 |       let keyIdentifier: String\n351 |       if let configKeyID=config.keyIdentifier {\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n352 |         keyIdentifier=configKeyID\n353 |       } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:390:19: error: cannot find 'createPrivacyMetadata' in scope\n388 |         status: .success,\n389 |         data: decryptedData,\n390 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n391 |           \"operationID\": operationID,\n392 |           \"durationMs\": String(Int(duration * 1000))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:35: error: extra arguments at positions #1, #2 in call\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:388:18: error: cannot infer contextual base in reference to member 'success'\n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n388 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n389 |         data: decryptedData,\n390 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:405:72: error: type 'PrivacyMetadataValue' has no member 'int'\n403 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n404 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n405 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n406 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(decryptedData.count), privacyLevel: .public)\n407 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:406:72: error: type 'PrivacyMetadataValue' has no member 'int'\n404 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n405 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n406 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(decryptedData.count), privacyLevel: .public)\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n407 |         ]\n408 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:412:56: error: cannot find 'createPrivacyMetadata' in scope\n410 |       // Log success\n411 |       await logger.info(\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n414 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:414:11: error: missing argument for parameter 'source' in call\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n414 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n415 |       )\n416 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:413:35: error: extra arguments at positions #2, #3 in call\n411 |       await logger.info(\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n    |                                   `- error: extra arguments at positions #2, #3 in call\n414 |         ])\n415 |       )\n\nSwift.Int.init:2:8: note: 'init(_:)' declared here\n1 | struct Int {\n2 | public init(_ source: Double)}\n  |        `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:435:72: error: type 'PrivacyMetadataValue' has no member 'int'\n433 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n434 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n435 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n436 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n437 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:444:19: error: cannot find 'createPrivacyMetadata' in scope\n442 |       await logger.error(\n443 |         \"Decryption failed: \\(error.localizedDescription)\",\n444 |         metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n445 |           \"durationMs\": String(Int(duration * 1000)),\n446 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:447:11: error: missing argument for parameter 'source' in call\n445 |           \"durationMs\": String(Int(duration * 1000)),\n446 |           \"error\": error.localizedDescription\n447 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n448 |       )\n449 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:454:19: error: cannot find 'createPrivacyMetadata' in scope\n452 |         status: .failure,\n453 |         data: nil,\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n455 |           \"operationID\": operationID,\n456 |           \"durationMs\": String(Int(duration * 1000)),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:35: error: extra arguments at positions #1, #2 in call\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:452:18: error: cannot infer contextual base in reference to member 'failure'\n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n452 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n453 |         data: nil,\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:453:15: error: 'nil' requires a contextual type\n451 |       let result=SecurityResultDTO(\n452 |         status: .failure,\n453 |         data: nil,\n    |               `- error: 'nil' requires a contextual type\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n455 |           \"operationID\": operationID,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:422:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n420 | \n421 |       return result\n422 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n423 |       // Calculate duration for metrics\n424 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:494:52: error: extra arguments at positions #1, #2 in call\n492 | \n493 |       // Try the standard protocol method signature which returns a Result type\n494 |       let encryptResult=await cryptoService.encrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n495 | \n496 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:494:52: error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n492 | \n493 |       // Try the standard protocol method signature which returns a Result type\n494 |       let encryptResult=await cryptoService.encrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n495 | \n496 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:541:52: error: extra arguments at positions #1, #2 in call\n539 | \n540 |       // Try the standard protocol method signature which returns a Result type\n541 |       let decryptResult=await cryptoService.decrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n542 | \n543 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:541:52: error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n539 | \n540 |       // Try the standard protocol method signature which returns a Result type\n541 |       let decryptResult=await cryptoService.decrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n542 | \n543 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:592:35: error: type 'SecurityProtocolError' has no member 'keyNotFound'\n590 |   func retrieve(withIdentifier identifier: String) throws -\u003e Data {\n591 |     guard let data=storage[identifier] else {\n592 |       throw SecurityProtocolError.keyNotFound\n    |                                   `- error: type 'SecurityProtocolError' has no member 'keyNotFound'\n593 |     }\n594 |     return data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:606:13: error: type 'CoreSecurityError' has no member 'general'\n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n607 |   }\n608 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:610:13: error: type 'CoreSecurityError' has no member 'general'\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n611 |   }\n612 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:614:13: error: type 'CoreSecurityError' has no member 'general'\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n615 |   }\n616 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:82:118: error: extra argument 'source' in call\n 80 |     )\n 81 | \n 82 |     await logger.info(\"Starting hashing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                      `- error: extra argument 'source' in call\n 83 | \n 84 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:82:63: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 80 |     )\n 81 | \n 82 |     await logger.info(\"Starting hashing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                               `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 83 | \n 84 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:87:38: error: value of type 'SecurityConfigOptions?' has no subscripts\n 85 |       // Extract required parameters from configuration\n 86 |       guard\n 87 |         let dataString=config.options[\"data\"],\n    |                                      `- error: value of type 'SecurityConfigOptions?' has no subscripts\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n 89 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:88:46: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n 86 |       guard\n 87 |         let dataString=config.options[\"data\"],\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n    |                                              `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n 89 |       else {\n 90 |         throw SecurityError.invalidInput(\"Missing or invalid input data for hashing\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:90:29: error: type 'SecurityError' has no member 'invalidInput'\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n 89 |       else {\n 90 |         throw SecurityError.invalidInput(\"Missing or invalid input data for hashing\")\n    |                             `- error: type 'SecurityError' has no member 'invalidInput'\n 91 |       }\n 92 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:94:56: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 92 | \n 93 |       // Determine hash algorithm to use\n 94 |       let hashAlgorithm=HashAlgorithm(rawValue: config.algorithm) ?? HashAlgorithm.sha256\n    |                                                        `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 95 | \n 96 |       // Perform the hashing operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:97:50: error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n 95 | \n 96 |       // Perform the hashing operation\n 97 |       let hashResult=try await cryptoService.hash(inputData, algorithm: hashAlgorithm.rawValue)\n    |                                                  `- error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n 98 | \n 99 |       // Calculate duration for performance metrics\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:107:11: error: missing argument for parameter 'source' in call\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n107 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n108 |       )\n109 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:104:75: error: value of type 'LogMetadata' has no member 'merging'\n102 |       // Log successful operation\n103 |       await logger.info(\n104 |         \"Completed hashing operation successfully\", metadata: logMetadata.merging([\n    |                                                                           `- error: value of type 'LogMetadata' has no member 'merging'\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:105:25: error: extra arguments at positions #2, #3 in call\n103 |       await logger.info(\n104 |         \"Completed hashing operation successfully\", metadata: logMetadata.merging([\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n    |                         `- error: extra arguments at positions #2, #3 in call\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n107 |         ])\n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:31: error: extra arguments at positions #1, #2, #3, #4 in call\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2, #3, #4 in call\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:126:11: error: missing argument for parameter 'source' in call\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n125 |           \"error\": error.localizedDescription\n126 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n127 |       )\n128 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:123:107: error: value of type 'LogMetadata' has no member 'merging'\n121 | \n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n    |                                                                                                           `- error: value of type 'LogMetadata' has no member 'merging'\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n125 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:31: error: extra arguments at positions #1, #2, #3, #4 in call\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2, #3, #4 in call\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:118:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n116 |       )\n117 | \n118 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n119 |       // Calculate duration even for failed operations\n120 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:163:122: error: extra argument 'source' in call\n161 |     ]\n162 | \n163 |     await logger.info(\"Starting direct hash operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                          `- error: extra argument 'source' in call\n164 | \n165 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:163:67: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n161 |     ]\n162 | \n163 |     await logger.info(\"Starting direct hash operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                   `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n164 | \n165 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:50: error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                  `- error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:51: error: cannot convert value of type 'SendableCryptoMaterial' to expected argument type 'String'\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                   `- error: cannot convert value of type 'SendableCryptoMaterial' to expected argument type 'String'\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:78: error: cannot convert value of type 'String' to expected argument type 'HashingOptions'\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                                              `- error: cannot convert value of type 'String' to expected argument type 'HashingOptions'\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:170: error: missing argument for parameter 'source' in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                                                                                                          `- error: missing argument for parameter 'source' in call\n173 |       )\n174 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:66: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                  `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n173 |       )\n174 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:169: error: missing argument for parameter 'uniquingKeysWith' in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                                                                                                         `- error: missing argument for parameter 'uniquingKeysWith' in call\n173 |       )\n174 | \n\nSwift.Dictionary.merging:2:36: note: 'merging(_:uniquingKeysWith:)' declared here\n1 | generic struct Dictionary {\n2 | @inlinable public __consuming func merging(_ other: __owned [Key : Value], uniquingKeysWith combine: (Value, Value) throws -\u003e Value) rethrows -\u003e [Key : Value]}\n  |                                    `- note: 'merging(_:uniquingKeysWith:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:89: error: extra arguments at positions #2, #3 in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                         `- error: extra arguments at positions #2, #3 in call\n173 |       )\n174 | \n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:182:11: error: missing argument for parameter 'source' in call\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n182 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n183 |       )\n184 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:179:111: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n177 |       // Log error\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n    |                                                                                                               `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:182:10: error: missing argument for parameter 'uniquingKeysWith' in call\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n182 |         ])\n    |          `- error: missing argument for parameter 'uniquingKeysWith' in call\n183 |       )\n184 | \n\nSwift.Dictionary.merging:2:36: note: 'merging(_:uniquingKeysWith:)' declared here\n1 | generic struct Dictionary {\n2 | @inlinable public __consuming func merging(_ other: __owned [Key : Value], uniquingKeysWith combine: (Value, Value) throws -\u003e Value) rethrows -\u003e [Key : Value]}\n  |                                    `- note: 'merging(_:uniquingKeysWith:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:205:13: error: type 'CoreSecurityError' has no member 'general'\n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n206 |   }\n207 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:209:13: error: type 'CoreSecurityError' has no member 'general'\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n210 |   }\n211 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:213:13: error: type 'CoreSecurityError' has no member 'general'\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n214 |   }\n215 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:15: error: invalid redeclaration of 'notImplemented(reason:)'\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:100:18: error: cannot convert value of type 'String' to expected argument type 'SecurityOperation'\n 98 |     let logMetadata=createOperationMetadata(\n 99 |       operationID: operationID,\n100 |       operation: operation,\n    |                  `- error: cannot convert value of type 'String' to expected argument type 'SecurityOperation'\n101 |       config: config\n102 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:104:125: error: extra argument 'source' in call\n102 |     )\n103 | \n104 |     await logger.info(\"Starting key generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                             `- error: extra argument 'source' in call\n105 | \n106 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:108:26: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n106 |     do {\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n    |                          `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n110 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:108:47: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n106 |     do {\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n    |                                               `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n110 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:109:28: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n    |                            `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n110 | \n111 |       // Use SendableCryptoMaterial instead of SecureBytes\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:109:63: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n    |                                                               `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n110 | \n111 |       // Use SendableCryptoMaterial instead of SecureBytes\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:114:13: error: cannot find 'secureRandomMaterial' in scope\n112 |       // In a production implementation, this would use a secure random generator\n113 |       let keyMaterial: SendableCryptoMaterial=if keySize \u003e 0 {\n114 |         try secureRandomMaterial(byteCount: keySize / 8)\n    |             `- error: cannot find 'secureRandomMaterial' in scope\n115 |       } else {\n116 |         SendableCryptoMaterial.zeros(count: 32) // Default to 256 bits (32 bytes)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:120:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n118 | \n119 |       // Store the key if an identifier is provided\n120 |       if let keyIdentifier=config.options[\"keyIdentifier\"] {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n121 |         let storageResult=await keyManager.secureStorage.storeMaterial(\n122 |           keyMaterial,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:121:44: error: value of type 'any KeyManagementProtocol' has no member 'secureStorage'\n119 |       // Store the key if an identifier is provided\n120 |       if let keyIdentifier=config.options[\"keyIdentifier\"] {\n121 |         let storageResult=await keyManager.secureStorage.storeMaterial(\n    |                                            `- error: value of type 'any KeyManagementProtocol' has no member 'secureStorage'\n122 |           keyMaterial,\n123 |           withIdentifier: keyIdentifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:126:31: error: type 'SecurityError' has no member 'keyStorage'\n124 |         )\n125 |         if case let .failure(error)=storageResult {\n126 |           throw SecurityError.keyStorage(error.description)\n    |                               `- error: type 'SecurityError' has no member 'keyStorage'\n127 |         }\n128 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:134:58: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n132 | \n133 |       // Create success metadata for logging\n134 |       let successMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                          `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n135 |         \"operationId\": operationID,\n136 |         \"operation\": operation,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:142:51: error: extra argument 'source' in call\n140 |       await logger.info(\n141 |         \"Key generation completed successfully\", metadata: successMetadata\n142 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                   `- error: extra argument 'source' in call\n143 | \n144 |       // Return successful result with the generated key metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:141:60: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n139 | \n140 |       await logger.info(\n141 |         \"Key generation completed successfully\", metadata: successMetadata\n    |                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n142 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n143 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:148:19: error: cannot find 'createPrivacyMetadata' in scope\n146 |         status: .success,\n147 |         data: keyMaterial,\n148 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n149 |           \"keySize\": \"\\(keySize)\",\n150 |           \"algorithm\": algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:31: error: extra arguments at positions #1, #2 in call\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:146:18: error: cannot infer contextual base in reference to member 'success'\n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n146 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n147 |         data: keyMaterial,\n148 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:158:56: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n156 | \n157 |       // Create failure metadata for logging\n158 |       let errorMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                        `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n159 |         \"operationId\": operationID,\n160 |         \"operation\": operation,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:165:105: error: missing argument for parameter 'source' in call\n163 |       ]\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                         `- error: missing argument for parameter 'source' in call\n166 |       , source: \\\"SecurityImplementation\\\")\n167 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:165:92: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n163 |       ]\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n166 |       , source: \\\"SecurityImplementation\\\")\n167 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:192:52: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n190 | \n191 |     // Create metadata for logging\n192 |     let logMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                    `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n193 |       \"operationId\": operationID,\n194 |       \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:199:133: error: extra argument 'source' in call\n197 |     ]\n198 | \n199 |     await logger.info(\"Starting random data generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                                     `- error: extra argument 'source' in call\n200 | \n201 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:199:78: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n197 |     ]\n198 | \n199 |     await logger.info(\"Starting random data generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                              `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n200 | \n201 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:204:29: error: type 'SecurityError' has no member 'invalidInput'\n202 |       // Validate parameters\n203 |       if length \u003c= 0 {\n204 |         throw SecurityError.invalidInput(\"Invalid length for random data generation: \\(length)\")\n    |                             `- error: type 'SecurityError' has no member 'invalidInput'\n205 |       }\n206 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:209:30: error: cannot find 'secureRandomMaterial' in scope\n207 |       // Use SendableCryptoMaterial instead of SecureBytes\n208 |       // In a production implementation, this would use a secure random generator\n209 |       let randomMaterial=try secureRandomMaterial(byteCount: length)\n    |                              `- error: cannot find 'secureRandomMaterial' in scope\n210 | \n211 |       // Calculate duration for performance metrics\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:215:58: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n213 | \n214 |       // Create success metadata for logging\n215 |       let successMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                          `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n216 |         \"operationId\": operationID,\n217 |         \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:224:51: error: extra argument 'source' in call\n222 |       await logger.info(\n223 |         \"Random data generation completed successfully\", metadata: successMetadata\n224 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                   `- error: extra argument 'source' in call\n225 | \n226 |       // Return successful result with the generated random data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:223:68: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n221 | \n222 |       await logger.info(\n223 |         \"Random data generation completed successfully\", metadata: successMetadata\n    |                                                                    `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n224 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n225 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:230:19: error: cannot find 'createPrivacyMetadata' in scope\n228 |         status: .success,\n229 |         data: randomMaterial,\n230 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n231 |           \"length\": \"\\(length)\"\n232 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:31: error: extra arguments at positions #1, #2 in call\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:228:18: error: cannot infer contextual base in reference to member 'success'\n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n228 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n229 |         data: randomMaterial,\n230 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:239:56: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n237 | \n238 |       // Create failure metadata for logging\n239 |       let errorMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                        `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n240 |         \"operationId\": operationID,\n241 |         \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:246:113: error: missing argument for parameter 'source' in call\n244 |       ]\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                                 `- error: missing argument for parameter 'source' in call\n247 |       , source: \\\"SecurityImplementation\\\")\n248 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:246:100: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n244 |       ]\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                    `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n247 |       , source: \\\"SecurityImplementation\\\")\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:265:13: error: type 'CoreSecurityError' has no member 'general'\n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n266 |   }\n267 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:269:13: error: type 'CoreSecurityError' has no member 'general'\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n270 |   }\n271 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:273:13: error: type 'CoreSecurityError' has no member 'general'\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n274 |   }\n275 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:29: error: cannot find type 'createPrivacyMetadata' in scope\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                             `- error: cannot find type 'createPrivacyMetadata' in scope\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:15: error: invalid redeclaration of 'notImplemented(reason:)'\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:95:22: error: extra arguments at positions #4, #5 in call\n 93 |     )\n 94 | \n 95 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n 96 |       \"Starting secure storage operation\", metadata: logMetadata,\n 97 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:96:54: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 94 | \n 95 |     await logger.info(\n 96 |       \"Starting secure storage operation\", metadata: logMetadata,\n    |                                                      `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 97 |       source: \"SecureStorageService\"\n 98 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:102:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n100 |     do {\n101 |       // Extract required parameters from configuration\n102 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n103 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n104 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:106:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n104 |       }\n105 | \n106 |       guard let dataToStore=config.options[\"data\"].flatMap({ Data(base64Encoded: $0) })\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n107 |       else {\n108 |         throw SecureStorageError.invalidInput(\"Missing or invalid data for storage\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:117:52: error: extra arguments at positions #1, #2 in call\n115 | \n116 |       // Encrypt the data before storage\n117 |       let encryptResult=await cryptoService.encrypt(data: dataToStore, using: storageKey)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n118 | \n119 |       switch encryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:117:52: error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n115 | \n116 |       // Encrypt the data before storage\n117 |       let encryptResult=await cryptoService.encrypt(data: dataToStore, using: storageKey)\n    |                                                    `- error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n118 | \n119 |       switch encryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:130:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:130:45: error: type 'String?' has no member 'string'\n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                                             `- error: type 'String?' has no member 'string'\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:131:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:131:43: error: type 'String?' has no member 'string'\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                           `- error: type 'String?' has no member 'string'\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:132:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:132:51: error: type 'String?' has no member 'string'\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                                   `- error: type 'String?' has no member 'string'\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:133:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n134 | \n135 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:133:44: error: type 'String?' has no member 'string'\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                            `- error: type 'String?' has no member 'string'\n134 | \n135 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:135:28: error: extra arguments at positions #4, #5 in call\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n135 |           await logger.info(\n    |                            `- error: extra arguments at positions #4, #5 in call\n136 |             \"Secure storage operation completed successfully\", metadata: successMetadata,\n137 |             source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:136:74: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n134 | \n135 |           await logger.info(\n136 |             \"Secure storage operation completed successfully\", metadata: successMetadata,\n    |                                                                          `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n137 |             source: \"SecureStorageService\"\n138 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:143:23: error: cannot find 'createPrivacyMetadata' in scope\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                       `- error: cannot find 'createPrivacyMetadata' in scope\n144 |               \"storageIdentifier\": identifier,\n145 |               \"storedBytes\": \"\\(storedBytes)\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:141:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n139 | \n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:142:22: error: extra argument 'status' in call\n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n    |                      `- error: extra argument 'status' in call\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n144 |               \"storageIdentifier\": identifier,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:141:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n139 | \n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:142:22: error: cannot infer contextual base in reference to member 'success'\n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n    |                      `- error: cannot infer contextual base in reference to member 'success'\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n144 |               \"storageIdentifier\": identifier,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:158:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:158:39: error: type 'String?' has no member 'string'\n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:159:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:159:37: error: type 'String?' has no member 'string'\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:160:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:160:38: error: type 'String?' has no member 'string'\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:161:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n162 | \n163 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:161:37: error: type 'String?' has no member 'string'\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n162 | \n163 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:165:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n163 |       await logger.error(\n164 |         \"Secure storage operation failed: \\(error.localizedDescription)\",\n165 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n166 |         source: \"SecureStorageService\"\n167 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:173:19: error: cannot find 'createPrivacyMetadata' in scope\n171 |         status: .failure,\n172 |         error: error,\n173 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n174 |           \"errorMessage\": error.localizedDescription\n175 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:31: error: extra arguments at positions #1, #2 in call\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:171:18: error: cannot infer contextual base in reference to member 'failure'\n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n171 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n172 |         error: error,\n173 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:152:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n150 |           throw SecureStorageError.encryptionError(\"Failed to encrypt data: \\(error)\")\n151 |       }\n152 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n153 |       // Calculate duration before failure\n154 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:198:22: error: extra arguments at positions #4, #5 in call\n196 |     )\n197 | \n198 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n199 |       \"Starting secure retrieval operation\", metadata: logMetadata,\n200 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:199:56: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n197 | \n198 |     await logger.info(\n199 |       \"Starting secure retrieval operation\", metadata: logMetadata,\n    |                                                        `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n200 |       source: \"SecureStorageService\"\n201 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:205:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n203 |     do {\n204 |       // Extract required parameters from configuration\n205 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n206 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n207 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:209:35: error: value of type 'SecurityConfigOptions?' has no subscripts\n207 |       }\n208 | \n209 |       guard let key=config.options[\"key\"].flatMap({ Data(base64Encoded: $0) }) else {\n    |                                   `- error: value of type 'SecurityConfigOptions?' has no subscripts\n210 |         throw SecureStorageError.invalidInput(\"Missing decryption key\")\n211 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:235:52: error: extra arguments at positions #1, #2 in call\n233 | \n234 |       // Decrypt the data\n235 |       let decryptResult=await cryptoService.decrypt(data: encryptedData, using: key)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n236 | \n237 |       switch decryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:235:52: error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n233 | \n234 |       // Decrypt the data\n235 |       let decryptResult=await cryptoService.decrypt(data: encryptedData, using: key)\n    |                                                    `- error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n236 | \n237 |       switch decryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:244:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:244:45: error: type 'String?' has no member 'string'\n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                                             `- error: type 'String?' has no member 'string'\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:245:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:245:43: error: type 'String?' has no member 'string'\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                           `- error: type 'String?' has no member 'string'\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:246:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:246:51: error: type 'String?' has no member 'string'\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                                   `- error: type 'String?' has no member 'string'\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:247:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n248 | \n249 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:247:44: error: type 'String?' has no member 'string'\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                            `- error: type 'String?' has no member 'string'\n248 | \n249 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:249:28: error: extra arguments at positions #4, #5 in call\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n249 |           await logger.info(\n    |                            `- error: extra arguments at positions #4, #5 in call\n250 |             \"Secure retrieval operation completed successfully\", metadata: successMetadata,\n251 |             source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:250:76: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n248 | \n249 |           await logger.info(\n250 |             \"Secure retrieval operation completed successfully\", metadata: successMetadata,\n    |                                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n251 |             source: \"SecureStorageService\"\n252 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:258:23: error: cannot find 'createPrivacyMetadata' in scope\n256 |             status: .success,\n257 |             data: decryptedData,\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                       `- error: cannot find 'createPrivacyMetadata' in scope\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:35: error: extra arguments at positions #1, #2 in call\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:256:22: error: cannot infer contextual base in reference to member 'success'\n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n256 |             status: .success,\n    |                      `- error: cannot infer contextual base in reference to member 'success'\n257 |             data: decryptedData,\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:273:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:273:39: error: type 'String?' has no member 'string'\n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:274:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:274:37: error: type 'String?' has no member 'string'\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:275:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:275:38: error: type 'String?' has no member 'string'\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:276:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:276:37: error: type 'String?' has no member 'string'\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:277:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n278 | \n279 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:277:40: error: type 'String?' has no member 'string'\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                                        `- error: type 'String?' has no member 'string'\n278 | \n279 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:281:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n279 |       await logger.error(\n280 |         \"Secure retrieval operation failed: \\(error.localizedDescription)\",\n281 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n282 |         source: \"SecureStorageService\"\n283 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:289:19: error: cannot find 'createPrivacyMetadata' in scope\n287 |         status: .failure,\n288 |         error: error,\n289 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n290 |           \"errorMessage\": error.localizedDescription\n291 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:31: error: extra arguments at positions #1, #2 in call\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:287:18: error: cannot infer contextual base in reference to member 'failure'\n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n287 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n288 |         error: error,\n289 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:267:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n265 |           throw SecureStorageError.decryptionError(\"Failed to decrypt data: \\(error)\")\n266 |       }\n267 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n268 |       // Calculate duration before failure\n269 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:314:22: error: extra arguments at positions #4, #5 in call\n312 |     )\n313 | \n314 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n315 |       \"Starting secure deletion operation\", metadata: logMetadata,\n316 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:315:55: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n313 | \n314 |     await logger.info(\n315 |       \"Starting secure deletion operation\", metadata: logMetadata,\n    |                                                       `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n316 |       source: \"SecureStorageService\"\n317 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:321:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n319 |     do {\n320 |       // Extract required parameters from configuration\n321 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n322 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n323 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:339:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:339:41: error: type 'String?' has no member 'string'\n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n    |                                         `- error: type 'String?' has no member 'string'\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:340:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:340:39: error: type 'String?' has no member 'string'\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                       `- error: type 'String?' has no member 'string'\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:341:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:341:47: error: type 'String?' has no member 'string'\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                               `- error: type 'String?' has no member 'string'\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:342:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n343 | \n344 |       await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:342:40: error: type 'String?' has no member 'string'\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                        `- error: type 'String?' has no member 'string'\n343 | \n344 |       await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:344:24: error: extra arguments at positions #4, #5 in call\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n344 |       await logger.info(\n    |                        `- error: extra arguments at positions #4, #5 in call\n345 |         \"Secure deletion operation completed successfully\", metadata: successMetadata,\n346 |         source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:345:71: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n343 | \n344 |       await logger.info(\n345 |         \"Secure deletion operation completed successfully\", metadata: successMetadata,\n    |                                                                       `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n346 |         source: \"SecureStorageService\"\n347 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:352:19: error: cannot find 'createPrivacyMetadata' in scope\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n353 |           \"storageIdentifier\": identifier\n354 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:350:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n348 | \n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:351:18: error: extra argument 'status' in call\n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n    |                  `- error: extra argument 'status' in call\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n353 |           \"storageIdentifier\": identifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:350:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n348 | \n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:351:18: error: cannot infer contextual base in reference to member 'success'\n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n353 |           \"storageIdentifier\": identifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:362:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:362:39: error: type 'String?' has no member 'string'\n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:363:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:363:37: error: type 'String?' has no member 'string'\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:364:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:364:38: error: type 'String?' has no member 'string'\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:365:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n367 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:365:37: error: type 'String?' has no member 'string'\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n367 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:366:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n367 | \n368 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:366:40: error: type 'String?' has no member 'string'\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                                        `- error: type 'String?' has no member 'string'\n367 | \n368 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:370:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n368 |       await logger.error(\n369 |         \"Secure deletion operation failed: \\(error.localizedDescription)\",\n370 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n371 |         source: \"SecureStorageService\"\n372 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:378:19: error: cannot find 'createPrivacyMetadata' in scope\n376 |         status: .failure,\n377 |         error: error,\n378 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n379 |           \"errorMessage\": error.localizedDescription\n380 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:31: error: extra arguments at positions #1, #2 in call\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:376:18: error: cannot infer contextual base in reference to member 'failure'\n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n376 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n377 |         error: error,\n378 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:356:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n354 |         ])\n355 |       )\n356 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n357 |       // Calculate duration before failure\n358 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:467:13: error: type 'CoreSecurityError' has no member 'general'\n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n468 |   }\n469 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:471:13: error: type 'CoreSecurityError' has no member 'general'\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n472 |   }\n473 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:475:13: error: type 'CoreSecurityError' has no member 'general'\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n476 |   }\n477 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:78:12: error: cannot find 'createPrivacyMetadata' in scope\n 76 |     config: SecurityConfigDTO\n 77 |   ) -\u003e LoggingInterfaces.LogMetadata {\n 78 |     return createPrivacyMetadata([\n    |            `- error: cannot find 'createPrivacyMetadata' in scope\n 79 |       \"operationId\": operationID,\n 80 |       \"operation\": String(describing: operation),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:81:27: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 79 |       \"operationId\": operationID,\n 80 |       \"operation\": String(describing: operation),\n 81 |       \"algorithm\": config.algorithm,\n    |                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 82 |       \"timestamp\": \"\\(Date())\"\n 83 |     ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:91:13: error: type 'CoreSecurityError' has no member 'general'\n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 92 |   }\n 93 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:95:13: error: type 'CoreSecurityError' has no member 'general'\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 96 |   }\n 97 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:99:13: error: type 'CoreSecurityError' has no member 'general'\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n100 |   }\n101 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:43:37: error: cannot find type 'KeyStorageManager' in scope\n 41 |    The key manager used for key storage and retrieval\n 42 |    */\n 43 |   private let keyManagementService: KeyStorageManager\n    |                                     `- error: cannot find type 'KeyStorageManager' in scope\n 44 | \n 45 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:32:13: error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n 30 |  - Handle signature-specific errors\n 31 |  */\n 32 | final class SignatureService: SecurityServiceBase {\n    |             |- error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n    |             `- note: add stubs for conformance\n 33 |   // MARK: - Properties\n 34 | \n    :\n 46 |    The logger instance for recording operation details\n 47 |    */\n 48 |   let logger: PrivacyAwareLoggingProtocol\n    |       `- note: candidate has non-matching type 'any PrivacyAwareLoggingProtocol'\n 49 | \n 50 |   // MARK: - Initialisation\n    :\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: candidate has non-matching type '(logger: any PrivacyAwareLoggingProtocol)'\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:42:3: note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 32 |    The logger instance for recording operation details\n 33 |    */\n 34 |   var logger: LoggingInterfaces.LoggingProtocol { get }\n    |       `- note: protocol requires property 'logger' with type 'any LoggingProtocol'\n 35 | \n 36 |   /**\n    :\n 40 |        - logger: The logging service to use for operation logging\n 41 |    */\n 42 |   init(logger: LoggingInterfaces.LoggingProtocol)\n    |   `- note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 43 | \n 44 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:15: error: invalid redeclaration of 'notImplemented(reason:)'\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:99:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 97 |     // Create metadata for logging\n 98 |     var logMetadata=PrivacyMetadata()\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:100:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 98 |     var logMetadata=PrivacyMetadata()\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n102 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:101:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:101:59: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                                                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:103:118: error: extra argument 'source' in call\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                      `- error: extra argument 'source' in call\n104 | \n105 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:107:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n105 |     do {\n106 |       // Extract required parameters from configuration\n107 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n108 |         throw SignatureError.invalidInput(\"Missing input data for signing\")\n109 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:107:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n105 |     do {\n106 |       // Extract required parameters from configuration\n107 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n108 |         throw SignatureError.invalidInput(\"Missing input data for signing\")\n109 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:116:36: error: value of type 'SecurityConfigOptions?' has no subscripts\n114 | \n115 |         // If keyID is provided, retrieve the key from key management\n116 |         if let keyID=config.options[\"keyId\"] {\n    |                                    `- error: value of type 'SecurityConfigOptions?' has no subscripts\n117 |           // Retrieve the key from the key management service\n118 |           let keyResult=await keyManagementService.secureStorage\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:127:35: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n125 |                 data: inputData,\n126 |                 key: keyMaterial,\n127 |                 algorithm: config.algorithm\n    |                                   `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n128 |               )\n129 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:136:48: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n134 |         }\n135 |         // If direct key is provided, use it\n136 |         else if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n137 |           // Use encrypt as a substitute for signature generation\n138 |           signature=try await performSignature(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:136:73: error: value of type 'SecurityConfigOptions?' has no subscripts\n134 |         }\n135 |         // If direct key is provided, use it\n136 |         else if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                                         `- error: value of type 'SecurityConfigOptions?' has no subscripts\n137 |           // Use encrypt as a substitute for signature generation\n138 |           signature=try await performSignature(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:141:31: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n139 |             data: inputData,\n140 |             key: key,\n141 |             algorithm: config.algorithm\n    |                               `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n142 |           )\n143 |         }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:154:25: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n152 |         // Create success metadata for logging\n153 |         var successMetadata=logMetadata\n154 |         successMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n155 |         successMetadata.setPublic(key: \"signatureSize\", value: String(signature.count))\n156 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:155:25: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n153 |         var successMetadata=logMetadata\n154 |         successMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n155 |         successMetadata.setPublic(key: \"signatureSize\", value: String(signature.count))\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n156 | \n157 |         await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:159:53: error: extra argument 'source' in call\n157 |         await logger.info(\n158 |           \"Signing operation completed successfully\", metadata: successMetadata\n159 |         , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                     `- error: extra argument 'source' in call\n160 | \n161 |         // Return successful result with signature\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:165:21: error: cannot find 'createPrivacyMetadata' in scope\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n    |                     `- error: cannot find 'createPrivacyMetadata' in scope\n166 |             \"algorithm\": config.algorithm\n167 |           ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:16: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:33: error: extra arguments at positions #1, #2 in call\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                                 `- error: extra arguments at positions #1, #2 in call\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:33: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:163:20: error: cannot infer contextual base in reference to member 'success'\n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n163 |           status: .success,\n    |                    `- error: cannot infer contextual base in reference to member 'success'\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:164:27: error: value of type 'SendableCryptoMaterial' has no member 'toBase64'\n162 |         return SecurityResultDTO(\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n    |                           `- error: value of type 'SendableCryptoMaterial' has no member 'toBase64'\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n166 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:166:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n166 |             \"algorithm\": config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n167 |           ])\n168 |         )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:175:23: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n173 |         // Create failure metadata for logging\n174 |         var errorMetadata=logMetadata\n175 |         errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                       `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n177 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:176:23: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n174 |         var errorMetadata=logMetadata\n175 |         errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                       `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:178:110: error: missing argument for parameter 'source' in call\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                              `- error: missing argument for parameter 'source' in call\n179 |         , source: \\\"SecurityImplementation\\\")\n180 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:196:21: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n194 |       // Create failure metadata for logging\n195 |       var errorMetadata=logMetadata\n196 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n198 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:197:21: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n195 |       var errorMetadata=logMetadata\n196 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:199:108: error: missing argument for parameter 'source' in call\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                            `- error: missing argument for parameter 'source' in call\n200 |       , source: \\\"SecurityImplementation\\\")\n201 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:169:9: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n167 |           ])\n168 |         )\n169 |       } catch {\n    |         `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n170 |         // Calculate duration before failure\n171 |         let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:226:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n224 |     // Create metadata for logging\n225 |     var logMetadata=PrivacyMetadata()\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:227:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n225 |     var logMetadata=PrivacyMetadata()\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n229 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:228:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:228:59: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                                                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:230:133: error: extra argument 'source' in call\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                                     `- error: extra argument 'source' in call\n231 | \n232 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:234:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n232 |     do {\n233 |       // Extract required parameters from configuration\n234 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n235 |         throw SignatureError.invalidInput(\"Missing input data for verification\")\n236 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:234:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n232 |     do {\n233 |       // Extract required parameters from configuration\n234 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n235 |         throw SignatureError.invalidInput(\"Missing input data for verification\")\n236 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:238:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n236 |       }\n237 | \n238 |       guard let signature=SendableCryptoMaterial.fromBase64(config.options[\"signature\"] ?? \"\")\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n239 |       else {\n240 |         throw SignatureError.invalidInput(\"Missing signature to verify\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:238:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n236 |       }\n237 | \n238 |       guard let signature=SendableCryptoMaterial.fromBase64(config.options[\"signature\"] ?? \"\")\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n239 |       else {\n240 |         throw SignatureError.invalidInput(\"Missing signature to verify\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:244:41: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n242 | \n243 |       // Check if key is provided directly in the options\n244 |       if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                         `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n245 |         // Try to verify the signature using the provided key\n246 |         let isValid=try await performVerification(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:244:66: error: value of type 'SecurityConfigOptions?' has no subscripts\n242 | \n243 |       // Check if key is provided directly in the options\n244 |       if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                                  `- error: value of type 'SecurityConfigOptions?' has no subscripts\n245 |         // Try to verify the signature using the provided key\n246 |         let isValid=try await performVerification(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:250:29: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n248 |           signature: signature,\n249 |           key: key,\n250 |           algorithm: config.algorithm\n    |                             `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n251 |         )\n252 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:258:30: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n256 |         // Create result metadata\n257 |         var verificationMetadata=logMetadata\n258 |         verificationMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                              `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n259 |         verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n260 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:259:30: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n257 |         var verificationMetadata=logMetadata\n258 |         verificationMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n259 |         verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n    |                              `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n260 | \n261 |         if isValid {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:264:55: error: extra argument 'source' in call\n262 |           await logger.info(\n263 |             \"Signature verification completed: Valid signature\", metadata: verificationMetadata\n264 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                       `- error: extra argument 'source' in call\n265 |         } else {\n266 |           await logger.warning(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:268:55: error: extra argument 'source' in call\n266 |           await logger.warning(\n267 |             \"Signature verification completed: Invalid signature\", metadata: verificationMetadata\n268 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                       `- error: extra argument 'source' in call\n269 |         }\n270 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:274:21: error: cannot find 'createPrivacyMetadata' in scope\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n    |                     `- error: cannot find 'createPrivacyMetadata' in scope\n275 |             \"algorithm\": config.algorithm\n276 |           ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:272:16: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n270 | \n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n    |                `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:273:20: error: extra argument 'status' in call\n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n    |                    `- error: extra argument 'status' in call\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:272:33: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n270 | \n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n    |                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:273:20: error: cannot infer contextual base in reference to member 'success'\n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n    |                    `- error: cannot infer contextual base in reference to member 'success'\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:275:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n276 |           ])\n277 |         )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:282:39: error: value of type 'SecurityConfigOptions?' has no subscripts\n280 | \n281 |         // Attempt to get key ID from config\n282 |         guard let keyID=config.options[\"keyId\"] else {\n    |                                       `- error: value of type 'SecurityConfigOptions?' has no subscripts\n283 |           throw SignatureError.invalidInput(\"Neither key nor keyId provided for verification\")\n284 |         }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:297:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n295 |               signature: signature,\n296 |               key: keyMaterial,\n297 |               algorithm: config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n298 |             )\n299 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:305:34: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n303 |             // Create result metadata\n304 |             var verificationMetadata=logMetadata\n305 |             verificationMetadata.setPublic(\n    |                                  `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n306 |               key: \"duration\",\n307 |               value: String(format: \"%.3f s\", duration)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:309:34: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n307 |               value: String(format: \"%.3f s\", duration)\n308 |             )\n309 |             verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n    |                                  `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n310 | \n311 |             if isValid {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:314:59: error: extra argument 'source' in call\n312 |               await logger.info(\n313 |                 \"Signature verification completed: Valid signature\", metadata: verificationMetadata\n314 |               , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                           `- error: extra argument 'source' in call\n315 |             } else {\n316 |               await logger.warning(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:318:59: error: extra argument 'source' in call\n316 |               await logger.warning(\n317 |                 \"Signature verification completed: Invalid signature\", metadata: verificationMetadata\n318 |               , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                           `- error: extra argument 'source' in call\n319 |             }\n320 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:324:25: error: cannot find 'createPrivacyMetadata' in scope\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n    |                         `- error: cannot find 'createPrivacyMetadata' in scope\n325 |                 \"algorithm\": config.algorithm\n326 |               ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:322:20: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n320 | \n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n    |                    `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:323:24: error: extra argument 'status' in call\n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n    |                        `- error: extra argument 'status' in call\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:322:37: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n320 | \n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n    |                                     `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:323:24: error: cannot infer contextual base in reference to member 'success'\n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n    |                        `- error: cannot infer contextual base in reference to member 'success'\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:325:37: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n    |                                     `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n326 |               ])\n327 |             )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:339:21: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n337 |       // Create failure metadata for logging\n338 |       var errorMetadata=logMetadata\n339 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n341 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:340:21: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n338 |       var errorMetadata=logMetadata\n339 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:342:123: error: missing argument for parameter 'source' in call\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                                           `- error: missing argument for parameter 'source' in call\n343 |       , source: \\\"SecurityImplementation\\\")\n344 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:403:27: error: incorrect argument label in call (have 'base64Encoded:', expected 'hexString:')\n401 |     // Implement secure random material generation\n402 |     // For now, this is a placeholder that would be replaced with actual implementation\n403 |     SendableCryptoMaterial(base64Encoded: \"random-material\")\n    |                           `- error: incorrect argument label in call (have 'base64Encoded:', expected 'hexString:')\n404 |   }\n405 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:418:13: error: type 'CoreSecurityError' has no member 'general'\n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n419 |   }\n420 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:422:13: error: type 'CoreSecurityError' has no member 'general'\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n423 |   }\n424 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:426:13: error: type 'CoreSecurityError' has no member 'general'\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n427 |   }\n428 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:16:22: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n14 |   /// - Parameter reason: The reason for the error\n15 |   /// - Returns: A CoreSecurityError with the appropriate error code\n16 |   public static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n17 |     return .invalidInput(\"Invalid verification method: \\(reason)\")\n18 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:23:22: error: invalid redeclaration of 'verificationFailed(reason:)'\n21 |   /// - Parameter reason: The reason for the error\n22 |   /// - Returns: A CoreSecurityError with the appropriate error code\n23 |   public static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'verificationFailed(reason:)'\n24 |     return .authenticationFailed(\"Verification failed: \\(reason)\")\n25 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:30:22: error: invalid redeclaration of 'notImplemented(reason:)'\n28 |   /// - Parameter reason: The reason for the error\n29 |   /// - Returns: A CoreSecurityError with the appropriate error code\n30 |   public static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'notImplemented(reason:)'\n31 |     return .unsupportedOperation(\"Not implemented: \\(reason)\")\n32 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Logging.swift:38:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 36 |  according to the Alpha Dot Five architecture principles.\n 37 |  */\n 38 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 39 |   /**\n 40 |    Logs the start of a security operation with privacy-aware metadata.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  * Batch encryption and decryption for collections of data\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Encrypts data and then stores it securely.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:15: error: invalid redeclaration of 'notImplemented(reason:)'\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:428:13: error: type 'CoreSecurityError' has no member 'general'\n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n429 |   }\n430 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:432:13: error: type 'CoreSecurityError' has no member 'general'\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n433 |   }\n434 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:436:13: error: type 'CoreSecurityError' has no member 'general'\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n437 |   }\n438 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  - Common validation logic is centralised\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Validates configuration for encryption operations.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:205:13: error: type 'CoreSecurityError' has no member 'general'\n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n206 |   }\n207 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:209:13: error: type 'CoreSecurityError' has no member 'general'\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n210 |   }\n211 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:213:13: error: type 'CoreSecurityError' has no member 'general'\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n214 |   }\n215 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:15: error: invalid redeclaration of 'notImplemented(reason:)'\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:52:8: error: type 'CryptoServiceFactory' has no member 'createStandardCryptoService'\n 50 |     // Create standard crypto service\n 51 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 52 |       .createStandardCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createStandardCryptoService'\n 53 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n 54 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:53:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n 51 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 52 |       .createStandardCryptoService()\n 53 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n 54 | \n 55 |     // Use the provided logger or create a default one\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:61:23: error: extra argument 'environment' in call\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n 62 |       )\n 63 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:60:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n 58 |       actualLogger=logger\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n 61 |         environment: .development)\n 62 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:61:23: error: cannot infer contextual base in reference to member 'development'\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n 62 |       )\n 63 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:69:27: error: missing argument for parameter 'secureLogger' in call\n 67 |     let securityService=SecurityServiceActor(\n 68 |       cryptoService: cryptoService,\n 69 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n 70 |     )\n 71 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:96:8: error: type 'CryptoServiceFactory' has no member 'createHighSecurityCryptoService'\n 94 |     // Create high-security crypto service\n 95 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 96 |       .createHighSecurityCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createHighSecurityCryptoService'\n 97 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n 98 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:97:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n 95 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 96 |       .createHighSecurityCryptoService()\n 97 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n 98 | \n 99 |     // Use the provided logger or create a default one with debug level logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:105:23: error: extra argument 'environment' in call\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n106 |       )\n107 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:104:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n102 |       actualLogger=logger\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n105 |         environment: .development)\n106 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:105:23: error: cannot infer contextual base in reference to member 'development'\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n106 |       )\n107 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:113:27: error: missing argument for parameter 'secureLogger' in call\n111 |     let securityService=SecurityServiceActor(\n112 |       cryptoService: cryptoService,\n113 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n114 |     )\n115 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:141:8: error: type 'CryptoServiceFactory' has no member 'createMaxSecurityCryptoService'\n139 |     // Create max-security crypto service\n140 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n141 |       .createMaxSecurityCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createMaxSecurityCryptoService'\n142 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n143 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:142:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n140 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n141 |       .createMaxSecurityCryptoService()\n142 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n143 | \n144 |     // Use the provided logger or create a default one with debug level logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:150:23: error: extra argument 'environment' in call\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n151 |       )\n152 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:149:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n147 |       actualLogger=logger\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n150 |         environment: .development)\n151 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:150:23: error: cannot infer contextual base in reference to member 'development'\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n151 |       )\n152 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:158:27: error: missing argument for parameter 'secureLogger' in call\n156 |     let securityService=SecurityServiceActor(\n157 |       cryptoService: cryptoService,\n158 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n159 |     )\n160 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:172:13: error: type 'CoreSecurityError' has no member 'general'\n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n173 |   }\n174 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:176:13: error: type 'CoreSecurityError' has no member 'general'\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n177 |   }\n178 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:180:13: error: type 'CoreSecurityError' has no member 'general'\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n181 |   }\n182 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:92:13: error: type 'CoreSecurityError' has no member 'general'\n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 93 |   }\n 94 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:96:13: error: type 'CoreSecurityError' has no member 'general'\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 97 |   }\n 98 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:100:13: error: type 'CoreSecurityError' has no member 'general'\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n101 |   }\n102 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               `- warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:30:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 28 |   /// - Returns: The generated random integer\n 29 |   /// - Throws: SecurityError if random generation fails\n 30 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 31 | \n 32 |   /// Generates a cryptographically secure random integer within the specified closed range\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               `- warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:36:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 34 |   /// - Returns: The generated random integer\n 35 |   /// - Throws: SecurityError if random generation fails\n 36 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 37 | \n 38 |   /// Generates a cryptographically secure random double between 0.0 and 1.0\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:15: error: invalid redeclaration of 'notImplemented(reason:)'\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:53:27: error: type 'SecurityError' has no member 'alreadyInitialized'\n 51 |   public func initialise(entropySource: EntropySource) async throws {\n 52 |     guard !isInitialised else {\n 53 |       throw SecurityError.alreadyInitialized(\"Random data service is already initialised\")\n    |                           `- error: type 'SecurityError' has no member 'alreadyInitialized'\n 54 |     }\n 55 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:42: error: missing argument label 'entries:' in call\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:60:69: error: cannot infer contextual base in reference to member 'public'\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n    |                                                                     `- error: cannot infer contextual base in reference to member 'public'\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n 62 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:61:71: error: cannot infer contextual base in reference to member 'public'\n 59 |       metadata: LogMetadataDTOCollection([\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n    |                                                                       `- error: cannot infer contextual base in reference to member 'public'\n 62 |       ]),\n 63 |       source: \"RandomDataServiceActor.initialise\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:78:31: error: type 'SecurityError' has no member 'initialisationFailed'\n 76 | \n 77 |         guard result == errSecSuccess else {\n 78 |           throw SecurityError.initialisationFailed(\n    |                               `- error: type 'SecurityError' has no member 'initialisationFailed'\n 79 |             reason: \"Hardware entropy source is not available\"\n 80 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:85:31: error: type 'SecurityError' has no member 'initialisationFailed'\n 83 |         // Ensure the bytes are actually random\n 84 |         guard bytes != testBytes else {\n 85 |           throw SecurityError.initialisationFailed(\n    |                               `- error: type 'SecurityError' has no member 'initialisationFailed'\n 86 |             reason: \"Entropy source did not produce random data\"\n 87 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:65: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:90: error: missing argument label 'entries:' in call\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                                          `- error: missing argument label 'entries:' in call\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:90: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:100:69: error: cannot infer contextual base in reference to member 'public'\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                     `- error: cannot infer contextual base in reference to member 'public'\n101 |       ]),\n102 |       source: \"RandomDataServiceActor.initialise\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:42: error: missing argument label 'entries:' in call\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:132:53: error: cannot infer contextual base in reference to member 'public'\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n132 |         \"length\": (value: String(length), privacy: .public)\n    |                                                     `- error: cannot infer contextual base in reference to member 'public'\n133 |       ]),\n134 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:142:27: error: type 'SecurityError' has no member 'operationFailed'\n140 | \n141 |     guard result == errSecSuccess else {\n142 |       throw SecurityError.operationFailed(\"SecRandomCopyBytes failed with error \\(result)\")\n    |                           `- error: type 'SecurityError' has no member 'operationFailed'\n143 |     }\n144 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:56: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                        `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:81: error: missing argument label 'entries:' in call\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                                                 `- error: missing argument label 'entries:' in call\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:81: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                                                 `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:148:33: error: extra arguments at positions #2, #3 in call\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                 `- error: extra arguments at positions #2, #3 in call\n149 |       ]),\n150 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\nSwift.String.init:2:19: note: 'init(_:)' declared here\n1 | struct String {\n2 | @inlinable public init\u003cT\u003e(_ value: T) where T : LosslessStringConvertible}\n  |                   `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:148:126: error: cannot infer contextual base in reference to member 'public'\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                              `- error: cannot infer contextual base in reference to member 'public'\n149 |       ]),\n150 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:42: error: missing argument label 'entries:' in call\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:167:68: error: cannot infer contextual base in reference to member 'public'\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n    |                                                                    `- error: cannot infer contextual base in reference to member 'public'\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:168:68: error: cannot infer contextual base in reference to member 'public'\n166 |       metadata: LogMetadataDTOCollection([\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n    |                                                                    `- error: cannot infer contextual base in reference to member 'public'\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n170 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:169:63: error: cannot infer contextual base in reference to member 'public'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n    |                                                               `- error: cannot infer contextual base in reference to member 'public'\n170 |       ]),\n171 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:177:27: error: type 'SecurityError' has no member 'invalidInput'\n175 |     let width=range.upperBound - range.lowerBound\n176 |     guard width \u003e 0 else {\n177 |       throw SecurityError.invalidInput(\"Range width must be greater than zero\")\n    |                           `- error: type 'SecurityError' has no member 'invalidInput'\n178 |     }\n179 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:58: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                          `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:83: error: missing argument label 'entries:' in call\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                                                   `- error: missing argument label 'entries:' in call\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:83: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                                                   `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:198:32: error: extra arguments at positions #2, #3 in call\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                `- error: extra arguments at positions #2, #3 in call\n199 |       ]),\n200 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\nSwift.String.init:2:19: note: 'init(_:)' declared here\n1 | struct String {\n2 | @inlinable public init\u003cT\u003e(_ value: T) where T : LosslessStringConvertible}\n  |                   `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:198:120: error: cannot infer contextual base in reference to member 'public'\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                        `- error: cannot infer contextual base in reference to member 'public'\n199 |       ]),\n200 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:65: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:89: error: extra arguments at positions #2, #3 in call\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                                         `- error: extra arguments at positions #2, #3 in call\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogMetadataDTOCollection.swift:20:10: note: 'init(entries:)' declared here\n 18 |   ///\n 19 |   /// - Parameter entries: The initial metadata entries\n 20 |   public init(entries: [LogMetadataDTO]) {\n    |          `- note: 'init(entries:)' declared here\n 21 |     self.entries=entries\n 22 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:90: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type '[LogMetadataDTO]'\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                                          `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type '[LogMetadataDTO]'\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:57: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                         `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:82: error: missing argument label 'entries:' in call\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                                                  `- error: missing argument label 'entries:' in call\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:82: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                                                  `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:243:32: error: extra arguments at positions #3, #4 in call\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                `- error: extra arguments at positions #3, #4 in call\n244 |       ]),\n245 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n\nFoundation.String.init:2:8: note: 'init(format:_:)' declared here\n1 | struct String {\n2 | public init(format: __shared String, _ arguments: any CVarArg...)}\n  |        `- note: 'init(format:_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:243:136: error: cannot infer contextual base in reference to member 'public'\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                                        `- error: cannot infer contextual base in reference to member 'public'\n244 |       ]),\n245 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:257:27: error: type 'SecurityError' has no member 'notInitialized'\n255 |   private func validateInitialisation() throws {\n256 |     guard isInitialised else {\n257 |       throw SecurityError.notInitialized(\"Random data service is not initialised\")\n    |                           `- error: type 'SecurityError' has no member 'notInitialized'\n258 |     }\n259 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:266:13: error: type 'CoreSecurityError' has no member 'general'\n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n267 |   }\n268 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:270:13: error: type 'CoreSecurityError' has no member 'general'\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n271 |   }\n272 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:274:13: error: type 'CoreSecurityError' has no member 'general'\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n275 |   }\n276 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:25:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n23 |   /// - Returns: A fully configured random data service\n24 |   public static func createDefault() -\u003e RandomDataServiceProtocol {\n25 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n26 |       subsystem: \"uk.co.umbra.security\",\n27 |       category: \"RandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:45:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n43 |   /// - Returns: A fully configured high-security random data service\n44 |   public static func createHighSecurity() -\u003e RandomDataServiceProtocol {\n45 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n46 |       subsystem: \"uk.co.umbra.security\",\n47 |       category: \"HighSecurityRandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:63:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n61 |   /// - Returns: A minimally configured random data service\n62 |   public static func createMinimal() -\u003e RandomDataServiceProtocol {\n63 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n64 |       subsystem: \"uk.co.umbra.security\",\n65 |       category: \"MinimalRandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:83:13: error: type 'CoreSecurityError' has no member 'general'\n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n84 |   }\n85 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:87:13: error: type 'CoreSecurityError' has no member 'general'\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n88 |   }\n89 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:91:13: error: type 'CoreSecurityError' has no member 'general'\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n92 |   }\n93 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:110:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n108 | \n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n111 |     return .invalidVerificationMethod(reason: reason)\n112 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:114:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n112 |   }\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n115 |     return .verificationFailed(reason: reason)\n116 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:118:15: error: invalid redeclaration of 'notImplemented(reason:)'\n116 |   }\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n119 |     return .notImplemented(reason: reason)\n120 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:9:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  7 |   var metadata = PrivacyMetadata()\n  8 |   for (key, value) in dict {\n  9 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 10 |   }\n 11 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:95:27: error: cannot find 'LoggingServices' in scope\n 93 |       cryptoService: cryptoService,\n 94 |       logger: logger,\n 95 |       secureLogger: await LoggingServices.createSecureLogger(\n    |                           `- error: cannot find 'LoggingServices' in scope\n 96 |         subsystem: \"com.umbra.security\",\n 97 |         category: \"SecurityService\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:111:13: error: ambiguous use of 'invalidVerificationMethod(reason:)'\n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n111 |     return .invalidVerificationMethod(reason: reason)\n    |             `- error: ambiguous use of 'invalidVerificationMethod(reason:)'\n112 |   }\n113 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: note: found this candidate \n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:258:15: note: found this candidate \n256 | \n257 | extension CoreSecurityError {\n258 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n259 |     return .invalidVerificationMethod(reason: reason)\n260 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:115:13: error: ambiguous use of 'verificationFailed(reason:)'\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n115 |     return .verificationFailed(reason: reason)\n    |             `- error: ambiguous use of 'verificationFailed(reason:)'\n116 |   }\n117 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: note: found this candidate \n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:262:15: note: found this candidate \n260 |   }\n261 |   \n262 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n263 |     return .verificationFailed(reason: reason)\n264 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:119:13: error: ambiguous use of 'notImplemented(reason:)'\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n119 |     return .notImplemented(reason: reason)\n    |             `- error: ambiguous use of 'notImplemented(reason:)'\n120 |   }\n121 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              `- error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 31 |   // MARK: - Private Properties\n 32 | \n    :\n349 |    - Returns: Result of the operation\n350 |    */\n351 |   public func performSecureOperation(\n    |               `- note: candidate has non-matching type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n352 |     operation: SecurityOperation,\n353 |     config: SecurityConfigDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              |- error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n    |              `- note: add stubs for conformance\n 31 |   // MARK: - Private Properties\n 32 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:109:8: note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:16:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 14 |   var metadata = PrivacyMetadata()\n 15 |   for (key, value) in dict {\n 16 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 17 |   }\n 18 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:69:50: error: extra arguments at positions #1, #3, #4, #5 in call\n 67 |     self.logger = logger\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n    |                                                  `- error: extra arguments at positions #1, #3, #4, #5 in call\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/DTOs/SecurityDTOs.swift:23:10: note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 21 |   ///   - loggingLevel: The logging level for security operations\n 22 |   ///   - randomizationOptions: Options for secure random number generation\n 23 |   public init(\n    |          `- note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 24 |     securityLevel: CoreSecurityTypes.SecurityLevelDTO = .standard,\n 25 |     loggingLevel: CoreSecurityTypes.SecurityLogLevelDTO = .warning,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:70:22: error: cannot infer contextual base in reference to member 'standard'\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n 70 |       providerType: .standard,\n    |                      `- error: cannot infer contextual base in reference to member 'standard'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:72:29: error: cannot infer contextual base in reference to member 'aes256'\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n    |                             `- error: cannot infer contextual base in reference to member 'aes256'\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:73:23: error: cannot infer contextual base in reference to member 'sha256'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n    |                       `- error: cannot infer contextual base in reference to member 'sha256'\n 74 |       options: nil\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:74:16: error: 'nil' requires a contextual type\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n    |                `- error: 'nil' requires a contextual type\n 75 |     )\n 76 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:83:41: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 81 |         metadata: createPrivacyMetadata([\n 82 |           \"serviceId\": serviceId.uuidString,\n 83 |           \"providerType\": configuration.providerType.rawValue,\n    |                                         `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 84 |           \"securityLevel\": configuration.securityLevel.rawValue\n 85 |         ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:111:44: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n109 |       metadata: createPrivacyMetadata([\n110 |         \"serviceId\": serviceId.uuidString,\n111 |         \"providerType\": self.configuration.providerType.rawValue,\n    |                                            `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n112 |         \"securityLevel\": self.configuration.securityLevel.rawValue\n113 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:126:31: error: type 'CoreSecurityError' has no member 'serviceUnavailable'\n124 |   private func validateInitialisation() throws {\n125 |     if !isInitialised {\n126 |       throw CoreSecurityError.serviceUnavailable(reason: \"Security service not initialised\")\n    |                               `- error: type 'CoreSecurityError' has no member 'serviceUnavailable'\n127 |     }\n128 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:155:16: error: type 'SecurityEventStatus' has no member 'started'\n153 |     await secureLogger.securityEvent(\n154 |       action: \"Encrypt\",\n155 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n156 |       subject: nil,\n157 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:165:29: error: ambiguous use of 'notImplemented(reason:)'\n163 |     \n164 |     // Not implemented yet - would delegate to crypto service\n165 |     throw CoreSecurityError.notImplemented(reason: \"Encrypt operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n166 |   }\n167 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:180:16: error: type 'SecurityEventStatus' has no member 'started'\n178 |     await secureLogger.securityEvent(\n179 |       action: \"Decrypt\",\n180 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n181 |       subject: nil,\n182 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:190:29: error: ambiguous use of 'notImplemented(reason:)'\n188 |     \n189 |     // Not implemented yet - would delegate to crypto service\n190 |     throw CoreSecurityError.notImplemented(reason: \"Decrypt operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n191 |   }\n192 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:205:16: error: type 'SecurityEventStatus' has no member 'started'\n203 |     await secureLogger.securityEvent(\n204 |       action: \"GenerateKey\",\n205 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n206 |       subject: nil,\n207 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:215:29: error: ambiguous use of 'notImplemented(reason:)'\n213 |     \n214 |     // Not implemented yet - would delegate to crypto service\n215 |     throw CoreSecurityError.notImplemented(reason: \"Key generation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n216 |   }\n217 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:230:16: error: type 'SecurityEventStatus' has no member 'started'\n228 |     await secureLogger.securityEvent(\n229 |       action: \"SecureStore\",\n230 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n231 |       subject: nil,\n232 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:240:29: error: ambiguous use of 'notImplemented(reason:)'\n238 |     \n239 |     // Not implemented yet - would delegate to crypto service\n240 |     throw CoreSecurityError.notImplemented(reason: \"Secure store operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n241 |   }\n242 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:255:16: error: type 'SecurityEventStatus' has no member 'started'\n253 |     await secureLogger.securityEvent(\n254 |       action: \"SecureRetrieve\",\n255 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n256 |       subject: nil,\n257 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:265:29: error: ambiguous use of 'notImplemented(reason:)'\n263 |     \n264 |     // Not implemented yet - would delegate to crypto service\n265 |     throw CoreSecurityError.notImplemented(reason: \"Secure retrieve operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n266 |   }\n267 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:280:16: error: type 'SecurityEventStatus' has no member 'started'\n278 |     await secureLogger.securityEvent(\n279 |       action: \"SecureDelete\",\n280 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n281 |       subject: nil,\n282 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:290:29: error: ambiguous use of 'notImplemented(reason:)'\n288 |     \n289 |     // Not implemented yet - would delegate to crypto service\n290 |     throw CoreSecurityError.notImplemented(reason: \"Secure delete operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n291 |   }\n292 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:305:16: error: type 'SecurityEventStatus' has no member 'started'\n303 |     await secureLogger.securityEvent(\n304 |       action: \"Sign\",\n305 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n306 |       subject: nil,\n307 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:315:29: error: ambiguous use of 'notImplemented(reason:)'\n313 |     \n314 |     // Not implemented yet - would delegate to crypto service\n315 |     throw CoreSecurityError.notImplemented(reason: \"Sign operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n316 |   }\n317 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:330:16: error: type 'SecurityEventStatus' has no member 'started'\n328 |     await secureLogger.securityEvent(\n329 |       action: \"Verify\",\n330 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n331 |       subject: nil,\n332 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:340:29: error: ambiguous use of 'notImplemented(reason:)'\n338 |     \n339 |     // Not implemented yet - would delegate to crypto service\n340 |     throw CoreSecurityError.notImplemented(reason: \"Verify operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n341 |   }\n342 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:360:16: error: type 'SecurityEventStatus' has no member 'started'\n358 |     await secureLogger.securityEvent(\n359 |       action: \"SecurityOperation\",\n360 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n361 |       subject: nil,\n362 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:370:29: error: ambiguous use of 'notImplemented(reason:)'\n368 |     \n369 |     // Not implemented yet\n370 |     throw CoreSecurityError.notImplemented(reason: \"Generic secure operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n371 |   }\n372 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:382:29: error: type 'EncryptionAlgorithm' has no member 'aes256'\n380 |     // Create and return a new configuration based on the provided options\n381 |     return SecurityConfigDTO(\n382 |       encryptionAlgorithm: .aes256,\n    |                             `- error: type 'EncryptionAlgorithm' has no member 'aes256'\n383 |       hashAlgorithm: .sha256,\n384 |       providerType: .standard,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:384:22: error: type 'SecurityProviderType' has no member 'standard'\n382 |       encryptionAlgorithm: .aes256,\n383 |       hashAlgorithm: .sha256,\n384 |       providerType: .standard,\n    |                      `- error: type 'SecurityProviderType' has no member 'standard'\n385 |       options: options\n386 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceFactory.swift:15:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 13 |   var metadata = PrivacyMetadata()\n 14 |   for (key, value) in dict {\n 15 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 16 |   }\n 17 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: error: invalid redeclaration of 'notImplemented(reason:)'\n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:8:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  6 |   var metadata = PrivacyMetadata()\n  7 |   for (key, value) in dict {\n  8 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  9 |   }\n 10 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:114:39: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n112 |     // Add any additional metadata\n113 |     for (key, value) in additionalMetadata {\n114 |       metricMetadata = metricMetadata.withPublic(key: key, value: value)\n    |                                       `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n115 |     }\n116 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:119:39: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n117 |     // Add historical performance if available\n118 |     if let avgDuration=averagePerformance(for: operation) {\n119 |       metricMetadata = metricMetadata.withPublic(key: \"avgDurationMs\", value: String(format: \"%.2f\", avgDuration))\n    |                                       `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n120 |     }\n121 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:124:20: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n122 |     // Log the metrics with appropriate level based on success\n123 |     if success {\n124 |       await logger.info(\"Security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n    |                    `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n125 |     } else {\n126 |       await logger.warning(\"Failed security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:126:20: warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n124 |       await logger.info(\"Security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n125 |     } else {\n126 |       await logger.warning(\"Failed security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n    |                    `- warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n127 |     }\n128 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:185:41: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n183 |     // Add context information\n184 |     for (key, value) in context {\n185 |       anomalyMetadata = anomalyMetadata.withPublic(key: key, value: value)\n    |                                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n186 |     }\n187 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:189:18: warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n187 | \n188 |     // Log the anomaly\n189 |     await logger.warning(\"Performance anomaly detected in \\(operation.description)\", metadata: anomalyMetadata, source: \"SecurityImplementation\")\n    |                  `- warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n190 | \n191 |     // Prepare privacy-tagged metadata for secure logger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:286:17: error: type 'LogPrivacyLevel' has no member 'restricted'\n284 |     for pattern in restrictedKeyPatterns {\n285 |       if key.lowercased().contains(pattern) {\n286 |         return .restricted\n    |                 `- error: type 'LogPrivacyLevel' has no member 'restricted'\n287 |       }\n288 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:8:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  6 |   var metadata = PrivacyMetadata()\n  7 |   for (key, value) in dict {\n  8 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  9 |   }\n 10 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:93:43: error: cannot find 'startTime' in scope\n 91 |   ) async {\n 92 |     // Calculate duration before failure\n 93 |     let duration=Date().timeIntervalSince(startTime) * 1000\n    |                                           `- error: cannot find 'startTime' in scope\n 94 | \n 95 |     // Create error metadata for logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:119:70: error: reference to member 'int' cannot be resolved without a contextual type\n117 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n118 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operation.rawValue), privacyLevel: .public),\n119 |         \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration)), privacyLevel: .public),\n    |                                                                      `- error: reference to member 'int' cannot be resolved without a contextual type\n120 |         \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n121 |         \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(sanitizeErrorMessage(error.localizedDescription)), privacyLevel: .sensitive)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:126:12: error: unexpected non-void return value in void function\n124 | \n125 |     // Return a standardised error result\n126 |     return createErrorResult(error: error, duration: duration)\n    |            |- error: unexpected non-void return value in void function\n    |            `- note: did you mean to add a return type?\n127 |   }\n128 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:193:22: error: cannot find 'operationID' in scope\n191 |     // Create standard metadata\n192 |     let standardMetadata = createPrivacyMetadata([\n193 |       \"operationId\": operationID,\n    |                      `- error: cannot find 'operationID' in scope\n194 |       \"operation\": operation.rawValue,\n195 |       \"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:195:44: error: cannot find 'duration' in scope\n193 |       \"operationId\": operationID,\n194 |       \"operation\": operation.rawValue,\n195 |       \"durationMs\": String(format: \"%.2f\", duration),\n    |                                            `- error: cannot find 'duration' in scope\n196 |       \"errorType\": String(describing: type(of: error)),\n197 |       \"errorMessage\": sanitizeErrorMessage(error.localizedDescription)\nTarget //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations failed to build\nINFO: Elapsed time: 3.967s, Critical Path: 3.88s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories",
    "success": false,
    "start_time": "2025-04-09T00:55:14.975158+01:00",
    "end_time": "2025-04-09T00:55:19.681013+01:00",
    "duration": "4.705834333s",
    "output": "INFO: Invocation ID: 8e704a06-18fa-4af3-a3f3-cc8d97d7c627\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories (0 packages loaded, 0 targets configured).\n[1 / 4] Compiling Swift module //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation; 1s disk-cache, worker\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/SecurityImplementation/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:10: error: static methods may only be declared on a type\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:10: error: static methods may only be declared on a type\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:10: error: static methods may only be declared on a type\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:163:1: error: extraneous '}' at top level\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n163 | }\n    | `- error: extraneous '}' at top level\n164 | \n165 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:10: error: static methods may only be declared on a type\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:10: error: static methods may only be declared on a type\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:10: error: static methods may only be declared on a type\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:72:1: error: extraneous '}' at top level\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n72 | }\n   | `- error: extraneous '}' at top level\n73 | \n74 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:10: error: static methods may only be declared on a type\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:10: error: static methods may only be declared on a type\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:10: error: static methods may only be declared on a type\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1155:1: error: extraneous '}' at top level\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n1155 | }\n     | `- error: extraneous '}' at top level\n1156 | \n1157 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:10: error: static methods may only be declared on a type\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:10: error: static methods may only be declared on a type\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:10: error: static methods may only be declared on a type\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:616:1: error: extraneous '}' at top level\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n616 | }\n    | `- error: extraneous '}' at top level\n617 | \n618 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:25: error: cannot find ')' to match opening '(' in string interpolation\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:23: error: unterminated string literal\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:25: error: cannot find ')' to match opening '(' in string interpolation\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:23: error: unterminated string literal\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:166:18: error: unterminated string literal\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n166 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n167 | \n168 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:247:18: error: unterminated string literal\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n247 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n248 | \n249 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:10: error: static methods may only be declared on a type\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:10: error: static methods may only be declared on a type\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:10: error: static methods may only be declared on a type\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:275:1: error: extraneous '}' at top level\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n275 | }\n    | `- error: extraneous '}' at top level\n276 | \n277 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:10: error: static methods may only be declared on a type\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:10: error: static methods may only be declared on a type\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:10: error: static methods may only be declared on a type\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:477:1: error: extraneous '}' at top level\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n477 | }\n    | `- error: extraneous '}' at top level\n478 | \n479 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:10: error: static methods may only be declared on a type\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:10: error: static methods may only be declared on a type\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:10: error: static methods may only be declared on a type\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:101:1: error: extraneous '}' at top level\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n101 | }\n    | `- error: extraneous '}' at top level\n102 | \n103 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:179:20: error: unterminated string literal\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n179 |         , source: \\\"SecurityImplementation\\\")\n    |                    `- error: unterminated string literal\n180 | \n181 |         // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:200:18: error: unterminated string literal\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n200 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n201 | \n202 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:343:18: error: unterminated string literal\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n343 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n344 | \n345 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:10: error: static methods may only be declared on a type\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:10: error: static methods may only be declared on a type\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:10: error: static methods may only be declared on a type\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:428:1: error: extraneous '}' at top level\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n428 | }\n    | `- error: extraneous '}' at top level\n429 | \n430 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:10: error: static methods may only be declared on a type\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:10: error: static methods may only be declared on a type\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:10: error: static methods may only be declared on a type\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:438:1: error: extraneous '}' at top level\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n438 | }\n    | `- error: extraneous '}' at top level\n439 | \n440 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:10: error: static methods may only be declared on a type\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:10: error: static methods may only be declared on a type\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:10: error: static methods may only be declared on a type\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:182:1: error: extraneous '}' at top level\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n182 | }\n    | `- error: extraneous '}' at top level\n183 | \n184 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:10: error: static methods may only be declared on a type\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:10: error: static methods may only be declared on a type\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:10: error: static methods may only be declared on a type\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:102:1: error: extraneous '}' at top level\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n102 | }\n    | `- error: extraneous '}' at top level\n103 | \n104 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:10: error: static methods may only be declared on a type\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:10: error: static methods may only be declared on a type\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:10: error: static methods may only be declared on a type\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:276:1: error: extraneous '}' at top level\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n276 | }\n    | `- error: extraneous '}' at top level\n277 | \n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:82:10: error: static methods may only be declared on a type\n80 | \n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n84 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:86:10: error: static methods may only be declared on a type\n84 |   }\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n88 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:90:10: error: static methods may only be declared on a type\n88 |   }\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:93:1: error: extraneous '}' at top level\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n93 | }\n   | `- error: extraneous '}' at top level\n94 | \n95 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:15: error: invalid redeclaration of 'notImplemented(reason:)'\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:15: error: invalid redeclaration of 'notImplemented(reason:)'\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: expected ',' separator\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: expected ',' separator\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: unnamed parameters must be written with the empty name '_'\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: unnamed parameters must be written with the empty name '_'\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:15: error: cannot find type 'createPrivacyMetadata' in scope\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |               `- error: cannot find type 'createPrivacyMetadata' in scope\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:15: error: invalid redeclaration of 'notImplemented(reason:)'\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:62:27: error: cannot find type 'KeyStorageManager' in scope\n 60 |   init(\n 61 |     cryptoService: CryptoServiceProtocol,\n 62 |     keyManagementService: KeyStorageManager,\n    |                           `- error: cannot find type 'KeyStorageManager' in scope\n 63 |     logger: PrivacyAwareLoggingProtocol\n 64 |   ) {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:137:38: error: extra arguments at positions #1, #2 in call\n 135 |     )\n 136 | \n 137 |     signatureService=SignatureService(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:78:3: note: 'init(logger:)' declared here\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: 'init(logger:)' declared here\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:140:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n 140 |       logger: logger\n     |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 141 |     )\n 142 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:50: error: expected ',' separator\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                                                  `- error: expected ',' separator\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:15: error: invalid redeclaration of 'notImplemented(reason:)'\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:15: error: invalid redeclaration of 'notImplemented(reason:)'\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:29: error: cannot find type 'createPrivacyMetadata' in scope\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                             `- error: cannot find type 'createPrivacyMetadata' in scope\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:15: error: invalid redeclaration of 'notImplemented(reason:)'\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:43:37: error: cannot find type 'KeyStorageManager' in scope\n 41 |    The key manager used for key storage and retrieval\n 42 |    */\n 43 |   private let keyManagementService: KeyStorageManager\n    |                                     `- error: cannot find type 'KeyStorageManager' in scope\n 44 | \n 45 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:32:13: error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n 30 |  - Handle signature-specific errors\n 31 |  */\n 32 | final class SignatureService: SecurityServiceBase {\n    |             |- error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n    |             `- note: add stubs for conformance\n 33 |   // MARK: - Properties\n 34 | \n    :\n 46 |    The logger instance for recording operation details\n 47 |    */\n 48 |   let logger: PrivacyAwareLoggingProtocol\n    |       `- note: candidate has non-matching type 'any PrivacyAwareLoggingProtocol'\n 49 | \n 50 |   // MARK: - Initialisation\n    :\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: candidate has non-matching type '(logger: any PrivacyAwareLoggingProtocol)'\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:42:3: note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 32 |    The logger instance for recording operation details\n 33 |    */\n 34 |   var logger: LoggingInterfaces.LoggingProtocol { get }\n    |       `- note: protocol requires property 'logger' with type 'any LoggingProtocol'\n 35 | \n 36 |   /**\n    :\n 40 |        - logger: The logging service to use for operation logging\n 41 |    */\n 42 |   init(logger: LoggingInterfaces.LoggingProtocol)\n    |   `- note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 43 | \n 44 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:15: error: invalid redeclaration of 'notImplemented(reason:)'\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:16:22: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n14 |   /// - Parameter reason: The reason for the error\n15 |   /// - Returns: A CoreSecurityError with the appropriate error code\n16 |   public static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n17 |     return .invalidInput(\"Invalid verification method: \\(reason)\")\n18 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:23:22: error: invalid redeclaration of 'verificationFailed(reason:)'\n21 |   /// - Parameter reason: The reason for the error\n22 |   /// - Returns: A CoreSecurityError with the appropriate error code\n23 |   public static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'verificationFailed(reason:)'\n24 |     return .authenticationFailed(\"Verification failed: \\(reason)\")\n25 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:30:22: error: invalid redeclaration of 'notImplemented(reason:)'\n28 |   /// - Parameter reason: The reason for the error\n29 |   /// - Returns: A CoreSecurityError with the appropriate error code\n30 |   public static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'notImplemented(reason:)'\n31 |     return .unsupportedOperation(\"Not implemented: \\(reason)\")\n32 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Logging.swift:38:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 36 |  according to the Alpha Dot Five architecture principles.\n 37 |  */\n 38 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 39 |   /**\n 40 |    Logs the start of a security operation with privacy-aware metadata.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  * Batch encryption and decryption for collections of data\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Encrypts data and then stores it securely.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:15: error: invalid redeclaration of 'notImplemented(reason:)'\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  - Common validation logic is centralised\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Validates configuration for encryption operations.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:15: error: invalid redeclaration of 'notImplemented(reason:)'\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               `- warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:30:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 28 |   /// - Returns: The generated random integer\n 29 |   /// - Throws: SecurityError if random generation fails\n 30 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 31 | \n 32 |   /// Generates a cryptographically secure random integer within the specified closed range\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               `- warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:36:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 34 |   /// - Returns: The generated random integer\n 35 |   /// - Throws: SecurityError if random generation fails\n 36 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 37 | \n 38 |   /// Generates a cryptographically secure random double between 0.0 and 1.0\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:15: error: invalid redeclaration of 'notImplemented(reason:)'\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:110:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n108 | \n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n111 |     return .invalidVerificationMethod(reason: reason)\n112 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:114:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n112 |   }\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n115 |     return .verificationFailed(reason: reason)\n116 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:118:15: error: invalid redeclaration of 'notImplemented(reason:)'\n116 |   }\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n119 |     return .notImplemented(reason: reason)\n120 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              `- error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 31 |   // MARK: - Private Properties\n 32 | \n    :\n349 |    - Returns: Result of the operation\n350 |    */\n351 |   public func performSecureOperation(\n    |               `- note: candidate has non-matching type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n352 |     operation: SecurityOperation,\n353 |     config: SecurityConfigDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              |- error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n    |              `- note: add stubs for conformance\n 31 |   // MARK: - Private Properties\n 32 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:109:8: note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:69:50: error: extra arguments at positions #1, #3, #4, #5 in call\n 67 |     self.logger = logger\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n    |                                                  `- error: extra arguments at positions #1, #3, #4, #5 in call\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/DTOs/SecurityDTOs.swift:23:10: note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 21 |   ///   - loggingLevel: The logging level for security operations\n 22 |   ///   - randomizationOptions: Options for secure random number generation\n 23 |   public init(\n    |          `- note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 24 |     securityLevel: CoreSecurityTypes.SecurityLevelDTO = .standard,\n 25 |     loggingLevel: CoreSecurityTypes.SecurityLogLevelDTO = .warning,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:70:22: error: cannot infer contextual base in reference to member 'standard'\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n 70 |       providerType: .standard,\n    |                      `- error: cannot infer contextual base in reference to member 'standard'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:72:29: error: cannot infer contextual base in reference to member 'aes256'\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n    |                             `- error: cannot infer contextual base in reference to member 'aes256'\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:73:23: error: cannot infer contextual base in reference to member 'sha256'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n    |                       `- error: cannot infer contextual base in reference to member 'sha256'\n 74 |       options: nil\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:74:16: error: 'nil' requires a contextual type\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n    |                `- error: 'nil' requires a contextual type\n 75 |     )\n 76 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:83:41: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 81 |         metadata: createPrivacyMetadata([\n 82 |           \"serviceId\": serviceId.uuidString,\n 83 |           \"providerType\": configuration.providerType.rawValue,\n    |                                         `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 84 |           \"securityLevel\": configuration.securityLevel.rawValue\n 85 |         ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: error: invalid redeclaration of 'notImplemented(reason:)'\n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n305 |     return .notImplemented(reason: reason)\n306 |   }\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:10: error: static methods may only be declared on a type\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:10: error: static methods may only be declared on a type\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:10: error: static methods may only be declared on a type\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:163:1: error: extraneous '}' at top level\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n163 | }\n    | `- error: extraneous '}' at top level\n164 | \n165 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:10: error: static methods may only be declared on a type\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:10: error: static methods may only be declared on a type\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:10: error: static methods may only be declared on a type\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:72:1: error: extraneous '}' at top level\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n72 | }\n   | `- error: extraneous '}' at top level\n73 | \n74 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: expected ',' separator\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: expected ',' separator\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: unnamed parameters must be written with the empty name '_'\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: unnamed parameters must be written with the empty name '_'\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:10: error: static methods may only be declared on a type\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:10: error: static methods may only be declared on a type\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:10: error: static methods may only be declared on a type\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1155:1: error: extraneous '}' at top level\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n1155 | }\n     | `- error: extraneous '}' at top level\n1156 | \n1157 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:10: error: static methods may only be declared on a type\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:10: error: static methods may only be declared on a type\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:10: error: static methods may only be declared on a type\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:616:1: error: extraneous '}' at top level\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n616 | }\n    | `- error: extraneous '}' at top level\n617 | \n618 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:25: error: cannot find ')' to match opening '(' in string interpolation\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:23: error: unterminated string literal\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:25: error: cannot find ')' to match opening '(' in string interpolation\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:23: error: unterminated string literal\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:166:18: error: unterminated string literal\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n166 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n167 | \n168 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:247:18: error: unterminated string literal\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n247 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n248 | \n249 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:10: error: static methods may only be declared on a type\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:10: error: static methods may only be declared on a type\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:10: error: static methods may only be declared on a type\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:275:1: error: extraneous '}' at top level\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n275 | }\n    | `- error: extraneous '}' at top level\n276 | \n277 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:260:65: error: expected ',' separator\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n    |                                                                 `- error: expected ',' separator\n261 |             ]\n262 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:260:65: error: expected key expression in dictionary literal\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n    |                                                                 `- error: expected key expression in dictionary literal\n261 |             ]\n262 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:264:9: error: expected ')' in expression list\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- note: to match this opening '('\n256 |             status: .success,\n257 |             data: decryptedData,\n    :\n262 |           )\n263 | \n264 |         case let .failure(error):\n    |         `- error: expected ')' in expression list\n265 |           throw SecureStorageError.decryptionError(\"Failed to decrypt data: \\(error)\")\n266 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:50: error: expected ',' separator\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                                                  `- error: expected ',' separator\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:10: error: static methods may only be declared on a type\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:10: error: static methods may only be declared on a type\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:10: error: static methods may only be declared on a type\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:477:1: error: extraneous '}' at top level\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n477 | }\n    | `- error: extraneous '}' at top level\n478 | \n479 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:10: error: static methods may only be declared on a type\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:10: error: static methods may only be declared on a type\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:10: error: static methods may only be declared on a type\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:101:1: error: extraneous '}' at top level\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n101 | }\n    | `- error: extraneous '}' at top level\n102 | \n103 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:179:20: error: unterminated string literal\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n179 |         , source: \\\"SecurityImplementation\\\")\n    |                    `- error: unterminated string literal\n180 | \n181 |         // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:200:18: error: unterminated string literal\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n200 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n201 | \n202 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:343:18: error: unterminated string literal\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n343 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n344 | \n345 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:10: error: static methods may only be declared on a type\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:10: error: static methods may only be declared on a type\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:10: error: static methods may only be declared on a type\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:428:1: error: extraneous '}' at top level\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n428 | }\n    | `- error: extraneous '}' at top level\n429 | \n430 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:70:96: error: expected ',' separator\n 68 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n 69 |         verifyOperations: config.options?.verifyOperations ?? true,\n 70 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected ',' separator\n 71 |           \"identifier\": config.options?.metadata?[\"storeIdentifier\"] ?? UUID().uuidString,\n 72 |           \"data\": encryptResult.resultData?.base64EncodedString() ?? \"\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:70:96: error: expected key expression in dictionary literal\n 68 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n 69 |         verifyOperations: config.options?.verifyOperations ?? true,\n 70 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected key expression in dictionary literal\n 71 |           \"identifier\": config.options?.metadata?[\"storeIdentifier\"] ?? UUID().uuidString,\n 72 |           \"data\": encryptResult.resultData?.base64EncodedString() ?? \"\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:77:5: error: expected ')' in expression list\n 57 | \n 58 |     // Now store the encrypted data\n 59 |     let storeConfig=SecurityConfigDTO(\n    |                                      `- note: to match this opening '('\n 60 |       encryptionAlgorithm: config.encryptionAlgorithm,\n 61 |       hashAlgorithm: config.hashAlgorithm,\n    :\n 75 |     )\n 76 | \n 77 |     let storeResult=try await performSecureOperation(\n    |     `- error: expected ')' in expression list\n 78 |       operation: .storeKey,\n 79 |       config: storeConfig\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:112:96: error: expected ',' separator\n110 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n111 |         verifyOperations: config.options?.verifyOperations ?? true,\n112 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected ',' separator\n113 |           \"identifier\": identifier\n114 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:112:96: error: expected key expression in dictionary literal\n110 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n111 |         verifyOperations: config.options?.verifyOperations ?? true,\n112 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected key expression in dictionary literal\n113 |           \"identifier\": identifier\n114 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:119:5: error: expected ')' in expression list\n 99 |   ) async throws -\u003e SecurityResultDTO {\n100 |     // First retrieve the encrypted data\n101 |     let retrieveConfig=SecurityConfigDTO(\n    |                                         `- note: to match this opening '('\n102 |       encryptionAlgorithm: config.encryptionAlgorithm,\n103 |       hashAlgorithm: config.hashAlgorithm,\n    :\n117 | \n118 |     // Retrieve the encrypted data\n119 |     let retrieveResult=try await performSecureOperation(\n    |     `- error: expected ')' in expression list\n120 |       operation: .retrieveKey,\n121 |       config: retrieveConfig\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:10: error: static methods may only be declared on a type\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:10: error: static methods may only be declared on a type\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:10: error: static methods may only be declared on a type\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:438:1: error: extraneous '}' at top level\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n438 | }\n    | `- error: extraneous '}' at top level\n439 | \n440 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:62:7: error: expected expression\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n 62 |       )\n    |       `- error: expected expression\n 63 |       actualLogger=developmentLogger\n 64 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:106:7: error: expected expression\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n106 |       )\n    |       `- error: expected expression\n107 |       actualLogger=developmentLogger\n108 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:151:7: error: expected expression\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n151 |       )\n    |       `- error: expected expression\n152 |       actualLogger=developmentLogger\n153 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:10: error: static methods may only be declared on a type\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:10: error: static methods may only be declared on a type\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:10: error: static methods may only be declared on a type\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:182:1: error: extraneous '}' at top level\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n182 | }\n    | `- error: extraneous '}' at top level\n183 | \n184 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:10: error: static methods may only be declared on a type\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:10: error: static methods may only be declared on a type\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:10: error: static methods may only be declared on a type\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:102:1: error: extraneous '}' at top level\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n102 | }\n    | `- error: extraneous '}' at top level\n103 | \n104 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:10: error: static methods may only be declared on a type\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:10: error: static methods may only be declared on a type\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:10: error: static methods may only be declared on a type\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:276:1: error: extraneous '}' at top level\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n276 | }\n    | `- error: extraneous '}' at top level\n277 | \n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:82:10: error: static methods may only be declared on a type\n80 | \n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n84 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:86:10: error: static methods may only be declared on a type\n84 |   }\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n88 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:90:10: error: static methods may only be declared on a type\n88 |   }\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:93:1: error: extraneous '}' at top level\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n93 | }\n   | `- error: extraneous '}' at top level\n94 | \n95 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:173:5: error: expected expression\n171 |         \"durationMs\": String(format: \"%.2f\", duration)\n172 |       ])\n173 |     )\n    |     `- error: expected expression\n174 |   }\n175 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityErrorHandler.swift:73:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 71 |     await logger.error(\n 72 |       \"Security operation failed: \\(securityError.message)\",\n 73 |       metadata: metadata,\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 74 |       source: source\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityErrorHandler.swift:100:8: error: initializer for conditional binding must have Optional type, not 'NSError'\n 98 |     \n 99 |     // If it's an NSError, map it to a SecurityError\n100 |     if let nsError = error as NSError {\n    |        `- error: initializer for conditional binding must have Optional type, not 'NSError'\n101 |       return mapSecurityFrameworkError(nsError)\n102 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:15: error: invalid redeclaration of 'notImplemented(reason:)'\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:153:13: error: type 'CoreSecurityError' has no member 'general'\n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n154 |   }\n155 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:157:13: error: type 'CoreSecurityError' has no member 'general'\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n158 |   }\n159 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:161:13: error: type 'CoreSecurityError' has no member 'general'\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n162 |   }\n163 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:15: error: invalid redeclaration of 'notImplemented(reason:)'\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:62:13: error: type 'CoreSecurityError' has no member 'general'\n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n63 |   }\n64 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:66:13: error: type 'CoreSecurityError' has no member 'general'\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n67 |   }\n68 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:70:13: error: type 'CoreSecurityError' has no member 'general'\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n71 |   }\n72 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:15: error: cannot find type 'createPrivacyMetadata' in scope\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |               `- error: cannot find type 'createPrivacyMetadata' in scope\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:15: error: invalid redeclaration of 'notImplemented(reason:)'\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:62:27: error: cannot find type 'KeyStorageManager' in scope\n 60 |   init(\n 61 |     cryptoService: CryptoServiceProtocol,\n 62 |     keyManagementService: KeyStorageManager,\n    |                           `- error: cannot find type 'KeyStorageManager' in scope\n 63 |     logger: PrivacyAwareLoggingProtocol\n 64 |   ) {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:137:38: error: extra arguments at positions #1, #2 in call\n 135 |     )\n 136 | \n 137 |     signatureService=SignatureService(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:78:3: note: 'init(logger:)' declared here\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: 'init(logger:)' declared here\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:140:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n 140 |       logger: logger\n     |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 141 |     )\n 142 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:159:63: error: missing argument for parameter 'context' in call\n 157 |    */\n 158 |   public func initialize() async throws {\n 159 |     await logger.info(\"Initializing security provider service\")\n     |                                                               `- error: missing argument for parameter 'context' in call\n 160 | \n 161 |     // Log with secure logger for enhanced privacy awareness\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:182:75: error: missing argument for parameter 'context' in call\n 180 |     }\n 181 | \n 182 |     await logger.info(\"Security provider service initialized successfully\")\n     |                                                                           `- error: missing argument for parameter 'context' in call\n 183 | \n 184 |     // Log successful initialisation with secure logger\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:235:33: error: missing arguments for parameters 'mode', 'padding' in call\n 233 |       dataIdentifier: dataIdentifier,\n 234 |       keyIdentifier: keyIdentifier,\n 235 |       options: EncryptionOptions(algorithm: .aes256CBC)\n     |                                 `- error: missing arguments for parameters 'mode', 'padding' in call\n 236 |     )\n 237 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:105:10: note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n103 |   public let additionalAuthenticatedData: [UInt8]? // For AEAD modes like GCM\n104 | \n105 |   public init(\n    |          `- note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n106 |     algorithm: EncryptionAlgorithm,\n107 |     mode: EncryptionMode,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:248:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 246 |           return encryptedData\n 247 |         } else {\n 248 |           throw SecurityProtocolError.inputError(\"Failed to retrieve encrypted data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 249 |         }\n 250 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:271:33: error: missing arguments for parameters 'mode', 'padding' in call\n 269 |       encryptedDataIdentifier: encryptedDataIdentifier,\n 270 |       keyIdentifier: keyIdentifier,\n 271 |       options: DecryptionOptions(algorithm: .aes256CBC)\n     |                                 `- error: missing arguments for parameters 'mode', 'padding' in call\n 272 |     )\n 273 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:105:10: note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n103 |   public let additionalAuthenticatedData: [UInt8]? // For AEAD modes like GCM\n104 | \n105 |   public init(\n    |          `- note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n106 |     algorithm: EncryptionAlgorithm,\n107 |     mode: EncryptionMode,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:284:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 282 |           return decryptedData\n 283 |         } else {\n 284 |           throw SecurityProtocolError.inputError(\"Failed to retrieve decrypted data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 285 |         }\n 286 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:314:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 312 |           return signatureData\n 313 |         } else {\n 314 |           throw SecurityProtocolError.inputError(\"Failed to retrieve signature data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 315 |         }\n 316 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:368:68: error: cannot find 'createPrivacyMetadata' in scope\n 366 |     // Check if a key identifier is provided to load from key manager\n 367 |     if let keyID=config.options?.metadata?[\"keyIdentifier\"] {\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n     |                                                                    `- error: cannot find 'createPrivacyMetadata' in scope\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:370:9: error: missing argument for parameter 'source' in call\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n     |         `- error: missing argument for parameter 'source' in call\n 371 | \n 372 |       let result=await keyManager.retrieveKey(withIdentifier: keyID)\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:368:106: error: extra arguments at positions #2, #3 in call\n 366 |     // Check if a key identifier is provided to load from key manager\n 367 |     if let keyID=config.options?.metadata?[\"keyIdentifier\"] {\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n     |                                                                                                          `- error: extra arguments at positions #2, #3 in call\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:377:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 375 |           return key\n 376 |         case let .failure(error):\n 377 |           throw SecurityProtocolError.inputError(\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 378 |             \"Failed to retrieve key with identifier \\(keyID): \\(error.localizedDescription)\"\n 379 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:408:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 406 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 407 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n     |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:409:82: error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 407 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n     |                                                                                  `- error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n 411 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:410:80: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 411 |       ]\n 412 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:410:94: error: cannot convert value of type 'Bool' to expected argument type 'String'\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                              `- error: cannot convert value of type 'Bool' to expected argument type 'String'\n 411 |       ]\n 412 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:431:86: error: value of type 'SecurityResultDTO' has no member 'data'\n 429 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 430 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 431 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n     |                                                                                      `- error: value of type 'SecurityResultDTO' has no member 'data'\n 432 |         ]\n 433 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:430:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 428 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 429 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 430 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 431 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n 432 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:449:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 447 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 448 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 449 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 450 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 451 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:481:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 479 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 480 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n     |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:482:82: error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 480 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n     |                                                                                  `- error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n 484 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:483:80: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 484 |       ]\n 485 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:483:94: error: cannot convert value of type 'Bool' to expected argument type 'String'\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                              `- error: cannot convert value of type 'Bool' to expected argument type 'String'\n 484 |       ]\n 485 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:504:86: error: value of type 'SecurityResultDTO' has no member 'data'\n 502 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 503 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 504 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n     |                                                                                      `- error: value of type 'SecurityResultDTO' has no member 'data'\n 505 |         ]\n 506 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:503:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 501 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 502 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 503 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 504 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n 505 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:522:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 520 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 521 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 522 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 523 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 524 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:547:49: error: cannot find 'createPrivacyMetadata' in scope\n 545 |     // Log operation with standard logger\n 546 |     await logger.info(\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n     |                                                 `- error: cannot find 'createPrivacyMetadata' in scope\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:549:15: error: extra argument 'source' in call\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n     |               `- error: extra argument 'source' in call\n 550 | \n 551 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:547:90: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 545 |     // Log operation with standard logger\n 546 |     await logger.info(\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n     |                                                                                          `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:560:81: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 558 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 559 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 560 |         \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public),\n     |                                                                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 561 |         \"keySize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keySize), privacyLevel: .public)\n 562 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:561:81: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 559 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 560 |         \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public),\n 561 |         \"keySize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keySize), privacyLevel: .public)\n     |                                                                                 `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 562 |       ]\n 563 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:567:39: error: value of type 'any KeyManagementProtocol' has no member 'generateKey'\n 565 |     do {\n 566 |       // Process the request through the key management service\n 567 |       let result=try await keyManager.generateKey(\n     |                                       `- error: value of type 'any KeyManagementProtocol' has no member 'generateKey'\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:568:22: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 566 |       // Process the request through the key management service\n 567 |       let result=try await keyManager.generateKey(\n 568 |         type: config.keyType,\n     |                      `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 569 |         size: config.keySize,\n 570 |         metadata: config.metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:569:22: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 567 |       let result=try await keyManager.generateKey(\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n     |                      `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 570 |         metadata: config.metadata\n 571 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:570:26: error: value of type 'SecurityConfigDTO' has no member 'metadata'\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n 570 |         metadata: config.metadata\n     |                          `- error: value of type 'SecurityConfigDTO' has no member 'metadata'\n 571 |       )\n 572 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:19: error: cannot find 'createPrivacyMetadata' in scope\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                   `- error: cannot find 'createPrivacyMetadata' in scope\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:60: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                                                            `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:103: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:21: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                     `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:38: error: extra arguments at positions #1, #2 in call\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:38: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                                      `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:578:18: error: cannot infer contextual base in reference to member 'success'\n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n 578 |         status: .success,\n     |                  `- error: cannot infer contextual base in reference to member 'success'\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:592:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 590 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 591 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 592 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 593 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n 594 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:593:83: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 591 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 592 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 593 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n     |                                                                                   `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 594 |         ]\n 595 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:599:60: error: cannot find 'createPrivacyMetadata' in scope\n 597 |       // Log completion\n 598 |       await logger.info(\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n     |                                                            `- error: cannot find 'createPrivacyMetadata' in scope\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:601:17: error: extra argument 'source' in call\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n     |                 `- error: extra argument 'source' in call\n 602 | \n 603 |       return resultDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:599:101: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 597 |       // Log completion\n 598 |       await logger.info(\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n     |                                                                                                     `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:617:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 615 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 616 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 617 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 618 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 619 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:620:83: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 618 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 619 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public),\n 620 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n     |                                                                                   `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 621 |         ]\n 622 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:627:19: error: cannot find 'createPrivacyMetadata' in scope\n 625 |       await logger.error(\n 626 |         \"Key generation failed: \\(error.localizedDescription)\",\n 627 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"error\": error.localizedDescription]),\n     |                   `- error: cannot find 'createPrivacyMetadata' in scope\n 628 |         source: \"CoreSecurityProvider\"\n 629 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:627:60: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 625 |       await logger.error(\n 626 |         \"Key generation failed: \\(error.localizedDescription)\",\n 627 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"error\": error.localizedDescription]),\n     |                                                            `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 628 |         source: \"CoreSecurityProvider\"\n 629 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:644:5: warning: no calls to throwing functions occur within 'try' expression\n 642 |    */\n 643 |   public func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 644 |     try await signatureService.sign(config: config)\n     |     `- warning: no calls to throwing functions occur within 'try' expression\n 645 |   }\n 646 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:656:5: warning: no calls to throwing functions occur within 'try' expression\n 654 |    */\n 655 |   public func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 656 |     try await signatureService.verify(config: config)\n     |     `- warning: no calls to throwing functions occur within 'try' expression\n 657 |   }\n 658 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:668:30: error: value of type 'SecureStorageService' has no member 'store'\n 666 |    */\n 667 |   public func store(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 668 |     try await storageService.store(config: config)\n     |                              `- error: value of type 'SecureStorageService' has no member 'store'\n 669 |   }\n 670 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:680:30: error: value of type 'SecureStorageService' has no member 'retrieve'\n 678 |    */\n 679 |   public func retrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 680 |     try await storageService.retrieve(config: config)\n     |                              `- error: value of type 'SecureStorageService' has no member 'retrieve'\n 681 |   }\n 682 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:693:69: error: cannot find 'createPrivacyMetadata' in scope\n 691 |     let operationID=UUID().uuidString\n 692 | \n 693 |     await logger.debug(\"Starting secure store operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                     `- error: cannot find 'createPrivacyMetadata' in scope\n 694 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 695 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:702:27: error: type 'SecurityError' has no member 'invalidInput'\n 700 |       let inputData=Data(base64Encoded: dataString)\n 701 |     else {\n 702 |       throw SecurityError.invalidInput(\"Missing or invalid input data for secure storage\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 703 |     }\n 704 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:714:27: error: type 'SecurityError' has no member 'internalError'\n 712 |     // Then store the encrypted data using the key manager\n 713 |     guard let encryptedData=encryptionResult.resultData else {\n 714 |       throw SecurityError.internalError(\"Encryption successful but no encrypted data returned\")\n     |                           `- error: type 'SecurityError' has no member 'internalError'\n 715 |     }\n 716 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:718:50: error: extra arguments at positions #2, #3 in call\n 716 | \n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n     |                                                  `- error: extra arguments at positions #2, #3 in call\n 719 |       identifier: keyIdentifier,\n 720 |       keyData: encryptedData,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:20:8: note: 'storeKey(_:withIdentifier:)' declared here\n18 |   ///   - identifier: A string identifier for the key.\n19 |   /// - Returns: Success or an error.\n20 |   func storeKey(_ key: [UInt8], withIdentifier identifier: String) async\n   |        `- note: 'storeKey(_:withIdentifier:)' declared here\n21 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n22 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:719:32: error: missing argument for parameter 'withIdentifier' in call\n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n 719 |       identifier: keyIdentifier,\n     |                                `- error: missing argument for parameter 'withIdentifier' in call\n 720 |       keyData: encryptedData,\n 721 |       metadata: config.options?.metadata ?? [:]\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:20:8: note: 'storeKey(_:withIdentifier:)' declared here\n18 |   ///   - identifier: A string identifier for the key.\n19 |   /// - Returns: Success or an error.\n20 |   func storeKey(_ key: [UInt8], withIdentifier identifier: String) async\n   |        `- note: 'storeKey(_:withIdentifier:)' declared here\n21 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n22 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:719:19: error: cannot convert value of type 'String' to expected argument type '[UInt8]'\n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n 719 |       identifier: keyIdentifier,\n     |                   `- error: cannot convert value of type 'String' to expected argument type '[UInt8]'\n 720 |       keyData: encryptedData,\n 721 |       metadata: config.options?.metadata ?? [:]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:726:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 724 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 725 | \n 726 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 727 |       successful: storeResult.successful,\n 728 |       resultData: keyIdentifier.data(using: .utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:745:72: error: cannot find 'createPrivacyMetadata' in scope\n 743 |     let operationID=UUID().uuidString\n 744 | \n 745 |     await logger.debug(\"Starting secure retrieve operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n 746 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 747 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:751:27: error: type 'SecurityError' has no member 'invalidInput'\n 749 |     // Extract required parameters from configuration\n 750 |     guard let keyIdentifier=config.options?.metadata?[\"key_identifier\"] else {\n 751 |       throw SecurityError.invalidInput(\"Missing key identifier for secure retrieval\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 752 |     }\n 753 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:755:45: error: value of type 'any KeyManagementProtocol' has no member 'getKey'\n 753 | \n 754 |     // Retrieve the encrypted data using the key manager\n 755 |     let retrieveResult=try await keyManager.getKey(\n     |                                             `- error: value of type 'any KeyManagementProtocol' has no member 'getKey'\n 756 |       identifier: keyIdentifier,\n 757 |       metadata: config.options?.metadata ?? [:]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:762:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 760 |     if !retrieveResult.successful || retrieveResult.keyData == nil {\n 761 |       let errorDetails=retrieveResult.errorDetails ?? \"Failed to retrieve data\"\n 762 |       return SecurityResultDTO(\n     |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 763 |         successful: false,\n 764 |         resultData: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:780:27: error: type 'SecurityError' has no member 'internalError'\n 778 | \n 779 |     guard let keyData=retrieveResult.keyData else {\n 780 |       throw SecurityError.internalError(\"Key data missing after successful retrieval\")\n     |                           `- error: type 'SecurityError' has no member 'internalError'\n 781 |     }\n 782 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:808:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 806 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 807 | \n 808 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 809 |       successful: decryptResult.successful,\n 810 |       resultData: decryptResult.resultData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:827:70: error: cannot find 'createPrivacyMetadata' in scope\n 825 |     let operationID=UUID().uuidString\n 826 | \n 827 |     await logger.debug(\"Starting secure delete operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID\n     |                                                                      `- error: cannot find 'createPrivacyMetadata' in scope\n 828 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n 829 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:832:27: error: type 'SecurityError' has no member 'invalidInput'\n 830 |     // Extract required parameters from configuration\n 831 |     guard let keyIdentifier=config.options?.metadata?[\"key_identifier\"] else {\n 832 |       throw SecurityError.invalidInput(\"Missing key identifier for secure deletion\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 833 |     }\n 834 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:836:52: error: extra arguments at positions #1, #2 in call\n 834 | \n 835 |     // Delete the key using the key manager\n 836 |     let deleteResult=try await keyManager.deleteKey(\n     |                                                    `- error: extra arguments at positions #1, #2 in call\n 837 |       identifier: keyIdentifier,\n 838 |       metadata: config.options?.metadata ?? [:]\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:26:8: note: 'deleteKey(withIdentifier:)' declared here\n24 |   /// - Parameter identifier: A string identifying the key to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteKey(withIdentifier identifier: String) async\n   |        `- note: 'deleteKey(withIdentifier:)' declared here\n27 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n28 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:837:7: error: missing argument for parameter 'withIdentifier' in call\n 835 |     // Delete the key using the key manager\n 836 |     let deleteResult=try await keyManager.deleteKey(\n 837 |       identifier: keyIdentifier,\n     |       `- error: missing argument for parameter 'withIdentifier' in call\n 838 |       metadata: config.options?.metadata ?? [:]\n 839 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:26:8: note: 'deleteKey(withIdentifier:)' declared here\n24 |   /// - Parameter identifier: A string identifying the key to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteKey(withIdentifier identifier: String) async\n   |        `- note: 'deleteKey(withIdentifier:)' declared here\n27 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n28 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:843:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 841 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 842 | \n 843 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 844 |       successful: deleteResult.successful,\n 845 |       resultData: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:867:86: error: cannot find 'createPrivacyMetadata' in scope\n 865 |     let operationID=UUID().uuidString\n 866 | \n 867 |     await logger.debug(\"Starting secure operation: \\(operation.rawValue)\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                                      `- error: cannot find 'createPrivacyMetadata' in scope\n 868 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 869 |     ]))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:869:7: error: missing argument for parameter 'source' in call\n 867 |     await logger.debug(\"Starting secure operation: \\(operation.rawValue)\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n 868 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 869 |     ]))\n     |       `- error: missing argument for parameter 'source' in call\n 870 | \n 871 |     let result: CoreSecurityTypes.SecurityResultDTO=switch operation {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:877:19: error: cannot find 'hash' in scope\n 875 |         try await decrypt(config: config)\n 876 |       case .hashing:\n 877 |         try await hash(config: config)\n     |                   `- error: cannot find 'hash' in scope\n 878 |       case .keyGeneration:\n 879 |         try await generateKey(config: config)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:881:19: error: cannot find 'rotateKey' in scope\n 879 |         try await generateKey(config: config)\n 880 |       case .keyRotation:\n 881 |         try await rotateKey(config: config)\n     |                   `- error: cannot find 'rotateKey' in scope\n 882 |       case .keyDeletion:\n 883 |         try await secureDelete(config: config)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:872:13: error: type 'SecurityOperation' has no member 'encryption'\n 870 | \n 871 |     let result: CoreSecurityTypes.SecurityResultDTO=switch operation {\n 872 |       case .encryption:\n     |             `- error: type 'SecurityOperation' has no member 'encryption'\n 873 |         try await encrypt(config: config)\n 874 |       case .decryption:\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:897:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 895 |     updatedMetadata[\"operation_id\"]=operationID\n 896 | \n 897 |     return CoreSecurityTypes.SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 898 |       successful: result.successful,\n 899 |       resultData: result.resultData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:924:8: error: type 'SigningAlgorithm' has no member 'hmacSHA256'\n 922 |       .ed25519 // Hardware accelerated where available\n 923 |     } else {\n 924 |       .hmacSHA256 // Software implementation\n     |        `- error: type 'SigningAlgorithm' has no member 'hmacSHA256'\n 925 |     }\n 926 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:928:36: error: no type named 'HashingAlgorithm' in module 'CoreSecurityTypes'\n 926 | \n 927 |     // Determine the hashing algorithm\n 928 |     let hashing: CoreSecurityTypes.HashingAlgorithm=if options.useStrongerHashing {\n     |                                    `- error: no type named 'HashingAlgorithm' in module 'CoreSecurityTypes'\n 929 |       .sha512 // Stronger but slower\n 930 |     } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:935:25: error: cannot find 'SecurityOptions' in scope\n 933 | \n 934 |     // Create the security options with selected algorithms\n 935 |     let securityOptions=SecurityOptions(\n     |                         `- error: cannot find 'SecurityOptions' in scope\n 936 |       encryption: encryption,\n 937 |       decryption: encryption,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:944:29: error: extra arguments at positions #2, #3 in call\n 942 | \n 943 |     // Create the configuration DTO with the options\n 944 |     return SecurityConfigDTO(\n     |                             `- error: extra arguments at positions #2, #3 in call\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityConfigDTO.swift:31:10: note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n29 |      - options: Optional configuration options\n30 |    */\n31 |   public init(\n   |          `- note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n32 |     encryptionAlgorithm: EncryptionAlgorithm,\n33 |     hashAlgorithm: HashAlgorithm,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:944:29: error: missing arguments for parameters 'encryptionAlgorithm', 'hashAlgorithm', 'providerType' in call\n 942 | \n 943 |     // Create the configuration DTO with the options\n 944 |     return SecurityConfigDTO(\n     |                             `- error: missing arguments for parameters 'encryptionAlgorithm', 'hashAlgorithm', 'providerType' in call\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityConfigDTO.swift:31:10: note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n29 |      - options: Optional configuration options\n30 |    */\n31 |   public init(\n   |          `- note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n32 |     encryptionAlgorithm: EncryptionAlgorithm,\n33 |     hashAlgorithm: HashAlgorithm,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:946:21: error: value of type 'SecurityConfigOptions' has no member 'data'\n 944 |     return SecurityConfigDTO(\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n     |                     `- error: value of type 'SecurityConfigOptions' has no member 'data'\n 947 |       outputFormat: options.outputFormat ?? .binary\n 948 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:947:29: error: value of type 'SecurityConfigOptions' has no member 'outputFormat'\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n 947 |       outputFormat: options.outputFormat ?? .binary\n     |                             `- error: value of type 'SecurityConfigOptions' has no member 'outputFormat'\n 948 |     )\n 949 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:947:46: error: cannot infer contextual base in reference to member 'binary'\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n 947 |       outputFormat: options.outputFormat ?? .binary\n     |                                              `- error: cannot infer contextual base in reference to member 'binary'\n 948 |     )\n 949 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:963:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 961 | \n 962 |     // Map known error types to appropriate security errors\n 963 |     if let nsError=error as? NSError {\n     |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 964 |       switch nsError.domain {\n 965 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:966:19: error: type 'SecurityProtocolError' has no member 'networkError'\n 964 |       switch nsError.domain {\n 965 |         case NSURLErrorDomain:\n 966 |           return .networkError(\n     |                   `- error: type 'SecurityProtocolError' has no member 'networkError'\n 967 |             \"Network error during security operation: \\(nsError.localizedDescription)\"\n 968 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:970:19: error: type 'SecurityProtocolError' has no member 'systemError'\n 968 |           )\n 969 |         case NSOSStatusErrorDomain:\n 970 |           return .systemError(\n     |                   `- error: type 'SecurityProtocolError' has no member 'systemError'\n 971 |             \"System error during security operation: \\(nsError.localizedDescription)\"\n 972 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:979:13: error: type 'SecurityProtocolError' has no member 'generalError'\n 977 | \n 978 |     // Default error mapping\n 979 |     return .generalError(\"Security operation failed: \\(error.localizedDescription)\")\n     |             `- error: type 'SecurityProtocolError' has no member 'generalError'\n 980 |   }\n 981 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:32: error: extra argument 'errorCode' in call\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                `- error: extra argument 'errorCode' in call\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:36: error: missing argument for parameter 'executionTimeMs' in call\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                    `- error: missing argument for parameter 'executionTimeMs' in call\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityResultDTO.swift:55:22: note: 'failure(errorDetails:executionTimeMs:metadata:)' declared here\n53 |      - metadata: Optional additional metadata\n54 |    */\n55 |   public static func failure(\n   |                      `- note: 'failure(errorDetails:executionTimeMs:metadata:)' declared here\n56 |     errorDetails: String,\n57 |     executionTimeMs: Double,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:32: error: value of type 'SecurityProtocolError' has no member 'code'\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                `- error: value of type 'SecurityProtocolError' has no member 'code'\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1031:21: error: pattern with associated values does not match enum case 'encrypt'\n1029 |       let result: SecurityResultDTO=try await {\n1030 |         switch operation {\n1031 |           case let .encrypt(data, key, algorithm):\n     |                     |- error: pattern with associated values does not match enum case 'encrypt'\n     |                     `- note: remove associated values to make the pattern match\n1032 |             let config=SecurityConfigDTO(\n1033 |               operationType: .encrypt,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:49: error: extra arguments at positions #1, #2 in call\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |                                                 `- error: extra arguments at positions #1, #2 in call\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:49: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |                                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1133:18: error: cannot infer contextual base in reference to member 'failure'\n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n1133 |         status: .failure,\n     |                  `- error: cannot infer contextual base in reference to member 'failure'\n1134 |         error: error.localizedDescription,\n1135 |         metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1145:13: error: type 'CoreSecurityError' has no member 'general'\n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1146 |   }\n1147 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1149:13: error: type 'CoreSecurityError' has no member 'general'\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1150 |   }\n1151 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1153:13: error: type 'CoreSecurityError' has no member 'general'\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1154 |   }\n1155 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:15: error: invalid redeclaration of 'notImplemented(reason:)'\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:123:121: error: extra argument 'source' in call\n121 |     )\n122 | \n123 |     await logger.info(\"Starting encryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                         `- error: extra argument 'source' in call\n124 | \n125 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:123:66: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n121 |     )\n122 | \n123 |     await logger.info(\"Starting encryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                  `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n124 | \n125 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:134:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n132 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n133 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n134 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n    |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n135 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n136 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:135:90: error: value of type 'SecurityConfigOptions?' has no subscripts\n133 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n134 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n135 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n    |                                                                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n136 |       ]\n137 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:142:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n140 |       // Extract required parameters from configuration\n141 |       guard\n142 |         let inputDataString=config.options[\"data\"],\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n143 |         let inputData=Data(base64Encoded: inputDataString)\n144 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:171:33: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n169 |       // Choose encryption key\n170 |       let keyIdentifier: String\n171 |       if let configKeyID=config.keyIdentifier {\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n172 |         keyIdentifier=configKeyID\n173 |       } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:210:19: error: cannot find 'createPrivacyMetadata' in scope\n208 |         status: .success,\n209 |         data: encryptedData,\n210 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n211 |           \"operationID\": operationID,\n212 |           \"durationMs\": String(Int(duration * 1000))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:35: error: extra arguments at positions #1, #2 in call\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:208:18: error: cannot infer contextual base in reference to member 'success'\n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n208 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n209 |         data: encryptedData,\n210 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:225:72: error: type 'PrivacyMetadataValue' has no member 'int'\n223 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n224 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n225 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n226 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(encryptedData.count), privacyLevel: .public)\n227 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:226:72: error: type 'PrivacyMetadataValue' has no member 'int'\n224 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n225 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n226 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(encryptedData.count), privacyLevel: .public)\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n227 |         ]\n228 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:232:56: error: cannot find 'createPrivacyMetadata' in scope\n230 |       // Log success\n231 |       await logger.info(\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n234 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:234:11: error: missing argument for parameter 'source' in call\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n234 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n235 |       )\n236 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:233:35: error: extra arguments at positions #2, #3 in call\n231 |       await logger.info(\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n    |                                   `- error: extra arguments at positions #2, #3 in call\n234 |         ])\n235 |       )\n\nSwift.Int.init:2:8: note: 'init(_:)' declared here\n1 | struct Int {\n2 | public init(_ source: Double)}\n  |        `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:255:72: error: type 'PrivacyMetadataValue' has no member 'int'\n253 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n254 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n255 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n256 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n257 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:264:19: error: cannot find 'createPrivacyMetadata' in scope\n262 |       await logger.error(\n263 |         \"Encryption failed: \\(error.localizedDescription)\",\n264 |         metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n265 |           \"durationMs\": String(Int(duration * 1000)),\n266 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:267:11: error: missing argument for parameter 'source' in call\n265 |           \"durationMs\": String(Int(duration * 1000)),\n266 |           \"error\": error.localizedDescription\n267 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n268 |       )\n269 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:274:19: error: cannot find 'createPrivacyMetadata' in scope\n272 |         status: .failure,\n273 |         data: nil,\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n275 |           \"operationID\": operationID,\n276 |           \"durationMs\": String(Int(duration * 1000)),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:35: error: extra arguments at positions #1, #2 in call\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:272:18: error: cannot infer contextual base in reference to member 'failure'\n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n272 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n273 |         data: nil,\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:273:15: error: 'nil' requires a contextual type\n271 |       let result=SecurityResultDTO(\n272 |         status: .failure,\n273 |         data: nil,\n    |               `- error: 'nil' requires a contextual type\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n275 |           \"operationID\": operationID,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:242:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n240 | \n241 |       return result\n242 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n243 |       // Calculate duration for metrics\n244 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:303:121: error: extra argument 'source' in call\n301 |     )\n302 | \n303 |     await logger.info(\"Starting decryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                         `- error: extra argument 'source' in call\n304 | \n305 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:303:66: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n301 |     )\n302 | \n303 |     await logger.info(\"Starting decryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                  `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n304 | \n305 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:314:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n312 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n313 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n314 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n    |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n315 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n316 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:315:90: error: value of type 'SecurityConfigOptions?' has no subscripts\n313 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n314 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n315 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n    |                                                                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n316 |       ]\n317 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:322:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n320 |       // Extract required parameters from configuration\n321 |       guard\n322 |         let inputDataString=config.options[\"data\"],\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n323 |         let inputData=Data(base64Encoded: inputDataString)\n324 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:351:33: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n349 |       // Choose decryption key\n350 |       let keyIdentifier: String\n351 |       if let configKeyID=config.keyIdentifier {\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n352 |         keyIdentifier=configKeyID\n353 |       } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:390:19: error: cannot find 'createPrivacyMetadata' in scope\n388 |         status: .success,\n389 |         data: decryptedData,\n390 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n391 |           \"operationID\": operationID,\n392 |           \"durationMs\": String(Int(duration * 1000))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:35: error: extra arguments at positions #1, #2 in call\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:388:18: error: cannot infer contextual base in reference to member 'success'\n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n388 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n389 |         data: decryptedData,\n390 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:405:72: error: type 'PrivacyMetadataValue' has no member 'int'\n403 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n404 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n405 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n406 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(decryptedData.count), privacyLevel: .public)\n407 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:406:72: error: type 'PrivacyMetadataValue' has no member 'int'\n404 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n405 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n406 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(decryptedData.count), privacyLevel: .public)\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n407 |         ]\n408 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:412:56: error: cannot find 'createPrivacyMetadata' in scope\n410 |       // Log success\n411 |       await logger.info(\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n414 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:414:11: error: missing argument for parameter 'source' in call\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n414 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n415 |       )\n416 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:413:35: error: extra arguments at positions #2, #3 in call\n411 |       await logger.info(\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n    |                                   `- error: extra arguments at positions #2, #3 in call\n414 |         ])\n415 |       )\n\nSwift.Int.init:2:8: note: 'init(_:)' declared here\n1 | struct Int {\n2 | public init(_ source: Double)}\n  |        `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:435:72: error: type 'PrivacyMetadataValue' has no member 'int'\n433 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n434 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n435 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n436 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n437 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:444:19: error: cannot find 'createPrivacyMetadata' in scope\n442 |       await logger.error(\n443 |         \"Decryption failed: \\(error.localizedDescription)\",\n444 |         metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n445 |           \"durationMs\": String(Int(duration * 1000)),\n446 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:447:11: error: missing argument for parameter 'source' in call\n445 |           \"durationMs\": String(Int(duration * 1000)),\n446 |           \"error\": error.localizedDescription\n447 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n448 |       )\n449 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:454:19: error: cannot find 'createPrivacyMetadata' in scope\n452 |         status: .failure,\n453 |         data: nil,\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n455 |           \"operationID\": operationID,\n456 |           \"durationMs\": String(Int(duration * 1000)),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:35: error: extra arguments at positions #1, #2 in call\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:452:18: error: cannot infer contextual base in reference to member 'failure'\n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n452 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n453 |         data: nil,\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:453:15: error: 'nil' requires a contextual type\n451 |       let result=SecurityResultDTO(\n452 |         status: .failure,\n453 |         data: nil,\n    |               `- error: 'nil' requires a contextual type\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n455 |           \"operationID\": operationID,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:422:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n420 | \n421 |       return result\n422 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n423 |       // Calculate duration for metrics\n424 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:494:52: error: extra arguments at positions #1, #2 in call\n492 | \n493 |       // Try the standard protocol method signature which returns a Result type\n494 |       let encryptResult=await cryptoService.encrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n495 | \n496 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:494:52: error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n492 | \n493 |       // Try the standard protocol method signature which returns a Result type\n494 |       let encryptResult=await cryptoService.encrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n495 | \n496 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:541:52: error: extra arguments at positions #1, #2 in call\n539 | \n540 |       // Try the standard protocol method signature which returns a Result type\n541 |       let decryptResult=await cryptoService.decrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n542 | \n543 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:541:52: error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n539 | \n540 |       // Try the standard protocol method signature which returns a Result type\n541 |       let decryptResult=await cryptoService.decrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n542 | \n543 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:592:35: error: type 'SecurityProtocolError' has no member 'keyNotFound'\n590 |   func retrieve(withIdentifier identifier: String) throws -\u003e Data {\n591 |     guard let data=storage[identifier] else {\n592 |       throw SecurityProtocolError.keyNotFound\n    |                                   `- error: type 'SecurityProtocolError' has no member 'keyNotFound'\n593 |     }\n594 |     return data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:606:13: error: type 'CoreSecurityError' has no member 'general'\n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n607 |   }\n608 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:610:13: error: type 'CoreSecurityError' has no member 'general'\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n611 |   }\n612 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:614:13: error: type 'CoreSecurityError' has no member 'general'\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n615 |   }\n616 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:82:118: error: extra argument 'source' in call\n 80 |     )\n 81 | \n 82 |     await logger.info(\"Starting hashing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                      `- error: extra argument 'source' in call\n 83 | \n 84 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:82:63: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 80 |     )\n 81 | \n 82 |     await logger.info(\"Starting hashing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                               `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 83 | \n 84 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:87:38: error: value of type 'SecurityConfigOptions?' has no subscripts\n 85 |       // Extract required parameters from configuration\n 86 |       guard\n 87 |         let dataString=config.options[\"data\"],\n    |                                      `- error: value of type 'SecurityConfigOptions?' has no subscripts\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n 89 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:88:46: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n 86 |       guard\n 87 |         let dataString=config.options[\"data\"],\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n    |                                              `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n 89 |       else {\n 90 |         throw SecurityError.invalidInput(\"Missing or invalid input data for hashing\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:90:29: error: type 'SecurityError' has no member 'invalidInput'\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n 89 |       else {\n 90 |         throw SecurityError.invalidInput(\"Missing or invalid input data for hashing\")\n    |                             `- error: type 'SecurityError' has no member 'invalidInput'\n 91 |       }\n 92 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:94:56: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 92 | \n 93 |       // Determine hash algorithm to use\n 94 |       let hashAlgorithm=HashAlgorithm(rawValue: config.algorithm) ?? HashAlgorithm.sha256\n    |                                                        `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 95 | \n 96 |       // Perform the hashing operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:97:50: error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n 95 | \n 96 |       // Perform the hashing operation\n 97 |       let hashResult=try await cryptoService.hash(inputData, algorithm: hashAlgorithm.rawValue)\n    |                                                  `- error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n 98 | \n 99 |       // Calculate duration for performance metrics\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:107:11: error: missing argument for parameter 'source' in call\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n107 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n108 |       )\n109 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:104:75: error: value of type 'LogMetadata' has no member 'merging'\n102 |       // Log successful operation\n103 |       await logger.info(\n104 |         \"Completed hashing operation successfully\", metadata: logMetadata.merging([\n    |                                                                           `- error: value of type 'LogMetadata' has no member 'merging'\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:105:25: error: extra arguments at positions #2, #3 in call\n103 |       await logger.info(\n104 |         \"Completed hashing operation successfully\", metadata: logMetadata.merging([\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n    |                         `- error: extra arguments at positions #2, #3 in call\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n107 |         ])\n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:31: error: extra arguments at positions #1, #2, #3, #4 in call\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2, #3, #4 in call\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:126:11: error: missing argument for parameter 'source' in call\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n125 |           \"error\": error.localizedDescription\n126 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n127 |       )\n128 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:123:107: error: value of type 'LogMetadata' has no member 'merging'\n121 | \n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n    |                                                                                                           `- error: value of type 'LogMetadata' has no member 'merging'\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n125 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:31: error: extra arguments at positions #1, #2, #3, #4 in call\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2, #3, #4 in call\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:118:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n116 |       )\n117 | \n118 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n119 |       // Calculate duration even for failed operations\n120 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:163:122: error: extra argument 'source' in call\n161 |     ]\n162 | \n163 |     await logger.info(\"Starting direct hash operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                          `- error: extra argument 'source' in call\n164 | \n165 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:163:67: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n161 |     ]\n162 | \n163 |     await logger.info(\"Starting direct hash operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                   `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n164 | \n165 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:50: error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                  `- error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:51: error: cannot convert value of type 'SendableCryptoMaterial' to expected argument type 'String'\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                   `- error: cannot convert value of type 'SendableCryptoMaterial' to expected argument type 'String'\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:78: error: cannot convert value of type 'String' to expected argument type 'HashingOptions'\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                                              `- error: cannot convert value of type 'String' to expected argument type 'HashingOptions'\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:170: error: missing argument for parameter 'source' in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                                                                                                          `- error: missing argument for parameter 'source' in call\n173 |       )\n174 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:66: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                  `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n173 |       )\n174 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:169: error: missing argument for parameter 'uniquingKeysWith' in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                                                                                                         `- error: missing argument for parameter 'uniquingKeysWith' in call\n173 |       )\n174 | \n\nSwift.Dictionary.merging:2:36: note: 'merging(_:uniquingKeysWith:)' declared here\n1 | generic struct Dictionary {\n2 | @inlinable public __consuming func merging(_ other: __owned [Key : Value], uniquingKeysWith combine: (Value, Value) throws -\u003e Value) rethrows -\u003e [Key : Value]}\n  |                                    `- note: 'merging(_:uniquingKeysWith:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:89: error: extra arguments at positions #2, #3 in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                         `- error: extra arguments at positions #2, #3 in call\n173 |       )\n174 | \n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:182:11: error: missing argument for parameter 'source' in call\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n182 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n183 |       )\n184 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:179:111: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n177 |       // Log error\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n    |                                                                                                               `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:182:10: error: missing argument for parameter 'uniquingKeysWith' in call\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n182 |         ])\n    |          `- error: missing argument for parameter 'uniquingKeysWith' in call\n183 |       )\n184 | \n\nSwift.Dictionary.merging:2:36: note: 'merging(_:uniquingKeysWith:)' declared here\n1 | generic struct Dictionary {\n2 | @inlinable public __consuming func merging(_ other: __owned [Key : Value], uniquingKeysWith combine: (Value, Value) throws -\u003e Value) rethrows -\u003e [Key : Value]}\n  |                                    `- note: 'merging(_:uniquingKeysWith:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:205:13: error: type 'CoreSecurityError' has no member 'general'\n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n206 |   }\n207 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:209:13: error: type 'CoreSecurityError' has no member 'general'\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n210 |   }\n211 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:213:13: error: type 'CoreSecurityError' has no member 'general'\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n214 |   }\n215 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:15: error: invalid redeclaration of 'notImplemented(reason:)'\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:100:18: error: cannot convert value of type 'String' to expected argument type 'SecurityOperation'\n 98 |     let logMetadata=createOperationMetadata(\n 99 |       operationID: operationID,\n100 |       operation: operation,\n    |                  `- error: cannot convert value of type 'String' to expected argument type 'SecurityOperation'\n101 |       config: config\n102 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:104:125: error: extra argument 'source' in call\n102 |     )\n103 | \n104 |     await logger.info(\"Starting key generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                             `- error: extra argument 'source' in call\n105 | \n106 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:108:26: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n106 |     do {\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n    |                          `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n110 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:108:47: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n106 |     do {\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n    |                                               `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n110 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:109:28: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n    |                            `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n110 | \n111 |       // Use SendableCryptoMaterial instead of SecureBytes\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:109:63: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n    |                                                               `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n110 | \n111 |       // Use SendableCryptoMaterial instead of SecureBytes\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:114:13: error: cannot find 'secureRandomMaterial' in scope\n112 |       // In a production implementation, this would use a secure random generator\n113 |       let keyMaterial: SendableCryptoMaterial=if keySize \u003e 0 {\n114 |         try secureRandomMaterial(byteCount: keySize / 8)\n    |             `- error: cannot find 'secureRandomMaterial' in scope\n115 |       } else {\n116 |         SendableCryptoMaterial.zeros(count: 32) // Default to 256 bits (32 bytes)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:120:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n118 | \n119 |       // Store the key if an identifier is provided\n120 |       if let keyIdentifier=config.options[\"keyIdentifier\"] {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n121 |         let storageResult=await keyManager.secureStorage.storeMaterial(\n122 |           keyMaterial,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:121:44: error: value of type 'any KeyManagementProtocol' has no member 'secureStorage'\n119 |       // Store the key if an identifier is provided\n120 |       if let keyIdentifier=config.options[\"keyIdentifier\"] {\n121 |         let storageResult=await keyManager.secureStorage.storeMaterial(\n    |                                            `- error: value of type 'any KeyManagementProtocol' has no member 'secureStorage'\n122 |           keyMaterial,\n123 |           withIdentifier: keyIdentifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:126:31: error: type 'SecurityError' has no member 'keyStorage'\n124 |         )\n125 |         if case let .failure(error)=storageResult {\n126 |           throw SecurityError.keyStorage(error.description)\n    |                               `- error: type 'SecurityError' has no member 'keyStorage'\n127 |         }\n128 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:134:58: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n132 | \n133 |       // Create success metadata for logging\n134 |       let successMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                          `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n135 |         \"operationId\": operationID,\n136 |         \"operation\": operation,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:142:51: error: extra argument 'source' in call\n140 |       await logger.info(\n141 |         \"Key generation completed successfully\", metadata: successMetadata\n142 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                   `- error: extra argument 'source' in call\n143 | \n144 |       // Return successful result with the generated key metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:141:60: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n139 | \n140 |       await logger.info(\n141 |         \"Key generation completed successfully\", metadata: successMetadata\n    |                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n142 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n143 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:148:19: error: cannot find 'createPrivacyMetadata' in scope\n146 |         status: .success,\n147 |         data: keyMaterial,\n148 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n149 |           \"keySize\": \"\\(keySize)\",\n150 |           \"algorithm\": algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:31: error: extra arguments at positions #1, #2 in call\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:146:18: error: cannot infer contextual base in reference to member 'success'\n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n146 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n147 |         data: keyMaterial,\n148 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:158:56: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n156 | \n157 |       // Create failure metadata for logging\n158 |       let errorMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                        `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n159 |         \"operationId\": operationID,\n160 |         \"operation\": operation,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:165:105: error: missing argument for parameter 'source' in call\n163 |       ]\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                         `- error: missing argument for parameter 'source' in call\n166 |       , source: \\\"SecurityImplementation\\\")\n167 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:165:92: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n163 |       ]\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n166 |       , source: \\\"SecurityImplementation\\\")\n167 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:192:52: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n190 | \n191 |     // Create metadata for logging\n192 |     let logMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                    `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n193 |       \"operationId\": operationID,\n194 |       \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:199:133: error: extra argument 'source' in call\n197 |     ]\n198 | \n199 |     await logger.info(\"Starting random data generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                                     `- error: extra argument 'source' in call\n200 | \n201 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:199:78: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n197 |     ]\n198 | \n199 |     await logger.info(\"Starting random data generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                              `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n200 | \n201 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:204:29: error: type 'SecurityError' has no member 'invalidInput'\n202 |       // Validate parameters\n203 |       if length \u003c= 0 {\n204 |         throw SecurityError.invalidInput(\"Invalid length for random data generation: \\(length)\")\n    |                             `- error: type 'SecurityError' has no member 'invalidInput'\n205 |       }\n206 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:209:30: error: cannot find 'secureRandomMaterial' in scope\n207 |       // Use SendableCryptoMaterial instead of SecureBytes\n208 |       // In a production implementation, this would use a secure random generator\n209 |       let randomMaterial=try secureRandomMaterial(byteCount: length)\n    |                              `- error: cannot find 'secureRandomMaterial' in scope\n210 | \n211 |       // Calculate duration for performance metrics\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:215:58: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n213 | \n214 |       // Create success metadata for logging\n215 |       let successMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                          `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n216 |         \"operationId\": operationID,\n217 |         \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:224:51: error: extra argument 'source' in call\n222 |       await logger.info(\n223 |         \"Random data generation completed successfully\", metadata: successMetadata\n224 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                   `- error: extra argument 'source' in call\n225 | \n226 |       // Return successful result with the generated random data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:223:68: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n221 | \n222 |       await logger.info(\n223 |         \"Random data generation completed successfully\", metadata: successMetadata\n    |                                                                    `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n224 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n225 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:230:19: error: cannot find 'createPrivacyMetadata' in scope\n228 |         status: .success,\n229 |         data: randomMaterial,\n230 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n231 |           \"length\": \"\\(length)\"\n232 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:31: error: extra arguments at positions #1, #2 in call\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:228:18: error: cannot infer contextual base in reference to member 'success'\n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n228 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n229 |         data: randomMaterial,\n230 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:239:56: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n237 | \n238 |       // Create failure metadata for logging\n239 |       let errorMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                        `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n240 |         \"operationId\": operationID,\n241 |         \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:246:113: error: missing argument for parameter 'source' in call\n244 |       ]\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                                 `- error: missing argument for parameter 'source' in call\n247 |       , source: \\\"SecurityImplementation\\\")\n248 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:246:100: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n244 |       ]\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                    `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n247 |       , source: \\\"SecurityImplementation\\\")\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:265:13: error: type 'CoreSecurityError' has no member 'general'\n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n266 |   }\n267 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:269:13: error: type 'CoreSecurityError' has no member 'general'\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n270 |   }\n271 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:273:13: error: type 'CoreSecurityError' has no member 'general'\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n274 |   }\n275 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:29: error: cannot find type 'createPrivacyMetadata' in scope\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                             `- error: cannot find type 'createPrivacyMetadata' in scope\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:15: error: invalid redeclaration of 'notImplemented(reason:)'\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:95:22: error: extra arguments at positions #4, #5 in call\n 93 |     )\n 94 | \n 95 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n 96 |       \"Starting secure storage operation\", metadata: logMetadata,\n 97 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:96:54: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 94 | \n 95 |     await logger.info(\n 96 |       \"Starting secure storage operation\", metadata: logMetadata,\n    |                                                      `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 97 |       source: \"SecureStorageService\"\n 98 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:102:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n100 |     do {\n101 |       // Extract required parameters from configuration\n102 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n103 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n104 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:106:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n104 |       }\n105 | \n106 |       guard let dataToStore=config.options[\"data\"].flatMap({ Data(base64Encoded: $0) })\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n107 |       else {\n108 |         throw SecureStorageError.invalidInput(\"Missing or invalid data for storage\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:117:52: error: extra arguments at positions #1, #2 in call\n115 | \n116 |       // Encrypt the data before storage\n117 |       let encryptResult=await cryptoService.encrypt(data: dataToStore, using: storageKey)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n118 | \n119 |       switch encryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:117:52: error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n115 | \n116 |       // Encrypt the data before storage\n117 |       let encryptResult=await cryptoService.encrypt(data: dataToStore, using: storageKey)\n    |                                                    `- error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n118 | \n119 |       switch encryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:130:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:130:45: error: type 'String?' has no member 'string'\n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                                             `- error: type 'String?' has no member 'string'\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:131:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:131:43: error: type 'String?' has no member 'string'\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                           `- error: type 'String?' has no member 'string'\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:132:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:132:51: error: type 'String?' has no member 'string'\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                                   `- error: type 'String?' has no member 'string'\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:133:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n134 | \n135 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:133:44: error: type 'String?' has no member 'string'\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                            `- error: type 'String?' has no member 'string'\n134 | \n135 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:135:28: error: extra arguments at positions #4, #5 in call\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n135 |           await logger.info(\n    |                            `- error: extra arguments at positions #4, #5 in call\n136 |             \"Secure storage operation completed successfully\", metadata: successMetadata,\n137 |             source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:136:74: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n134 | \n135 |           await logger.info(\n136 |             \"Secure storage operation completed successfully\", metadata: successMetadata,\n    |                                                                          `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n137 |             source: \"SecureStorageService\"\n138 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:143:23: error: cannot find 'createPrivacyMetadata' in scope\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                       `- error: cannot find 'createPrivacyMetadata' in scope\n144 |               \"storageIdentifier\": identifier,\n145 |               \"storedBytes\": \"\\(storedBytes)\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:141:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n139 | \n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:142:22: error: extra argument 'status' in call\n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n    |                      `- error: extra argument 'status' in call\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n144 |               \"storageIdentifier\": identifier,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:141:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n139 | \n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:142:22: error: cannot infer contextual base in reference to member 'success'\n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n    |                      `- error: cannot infer contextual base in reference to member 'success'\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n144 |               \"storageIdentifier\": identifier,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:158:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:158:39: error: type 'String?' has no member 'string'\n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:159:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:159:37: error: type 'String?' has no member 'string'\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:160:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:160:38: error: type 'String?' has no member 'string'\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:161:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n162 | \n163 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:161:37: error: type 'String?' has no member 'string'\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n162 | \n163 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:165:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n163 |       await logger.error(\n164 |         \"Secure storage operation failed: \\(error.localizedDescription)\",\n165 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n166 |         source: \"SecureStorageService\"\n167 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:173:19: error: cannot find 'createPrivacyMetadata' in scope\n171 |         status: .failure,\n172 |         error: error,\n173 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n174 |           \"errorMessage\": error.localizedDescription\n175 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:31: error: extra arguments at positions #1, #2 in call\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:171:18: error: cannot infer contextual base in reference to member 'failure'\n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n171 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n172 |         error: error,\n173 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:152:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n150 |           throw SecureStorageError.encryptionError(\"Failed to encrypt data: \\(error)\")\n151 |       }\n152 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n153 |       // Calculate duration before failure\n154 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:198:22: error: extra arguments at positions #4, #5 in call\n196 |     )\n197 | \n198 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n199 |       \"Starting secure retrieval operation\", metadata: logMetadata,\n200 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:199:56: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n197 | \n198 |     await logger.info(\n199 |       \"Starting secure retrieval operation\", metadata: logMetadata,\n    |                                                        `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n200 |       source: \"SecureStorageService\"\n201 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:205:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n203 |     do {\n204 |       // Extract required parameters from configuration\n205 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n206 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n207 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:209:35: error: value of type 'SecurityConfigOptions?' has no subscripts\n207 |       }\n208 | \n209 |       guard let key=config.options[\"key\"].flatMap({ Data(base64Encoded: $0) }) else {\n    |                                   `- error: value of type 'SecurityConfigOptions?' has no subscripts\n210 |         throw SecureStorageError.invalidInput(\"Missing decryption key\")\n211 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:235:52: error: extra arguments at positions #1, #2 in call\n233 | \n234 |       // Decrypt the data\n235 |       let decryptResult=await cryptoService.decrypt(data: encryptedData, using: key)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n236 | \n237 |       switch decryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:235:52: error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n233 | \n234 |       // Decrypt the data\n235 |       let decryptResult=await cryptoService.decrypt(data: encryptedData, using: key)\n    |                                                    `- error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n236 | \n237 |       switch decryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:244:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:244:45: error: type 'String?' has no member 'string'\n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                                             `- error: type 'String?' has no member 'string'\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:245:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:245:43: error: type 'String?' has no member 'string'\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                           `- error: type 'String?' has no member 'string'\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:246:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:246:51: error: type 'String?' has no member 'string'\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                                   `- error: type 'String?' has no member 'string'\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:247:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n248 | \n249 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:247:44: error: type 'String?' has no member 'string'\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                            `- error: type 'String?' has no member 'string'\n248 | \n249 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:249:28: error: extra arguments at positions #4, #5 in call\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n249 |           await logger.info(\n    |                            `- error: extra arguments at positions #4, #5 in call\n250 |             \"Secure retrieval operation completed successfully\", metadata: successMetadata,\n251 |             source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:250:76: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n248 | \n249 |           await logger.info(\n250 |             \"Secure retrieval operation completed successfully\", metadata: successMetadata,\n    |                                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n251 |             source: \"SecureStorageService\"\n252 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:258:23: error: cannot find 'createPrivacyMetadata' in scope\n256 |             status: .success,\n257 |             data: decryptedData,\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                       `- error: cannot find 'createPrivacyMetadata' in scope\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:35: error: extra arguments at positions #1, #2 in call\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:256:22: error: cannot infer contextual base in reference to member 'success'\n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n256 |             status: .success,\n    |                      `- error: cannot infer contextual base in reference to member 'success'\n257 |             data: decryptedData,\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:273:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:273:39: error: type 'String?' has no member 'string'\n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:274:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:274:37: error: type 'String?' has no member 'string'\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:275:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:275:38: error: type 'String?' has no member 'string'\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:276:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:276:37: error: type 'String?' has no member 'string'\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:277:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n278 | \n279 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:277:40: error: type 'String?' has no member 'string'\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                                        `- error: type 'String?' has no member 'string'\n278 | \n279 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:281:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n279 |       await logger.error(\n280 |         \"Secure retrieval operation failed: \\(error.localizedDescription)\",\n281 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n282 |         source: \"SecureStorageService\"\n283 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:289:19: error: cannot find 'createPrivacyMetadata' in scope\n287 |         status: .failure,\n288 |         error: error,\n289 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n290 |           \"errorMessage\": error.localizedDescription\n291 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:31: error: extra arguments at positions #1, #2 in call\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:287:18: error: cannot infer contextual base in reference to member 'failure'\n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n287 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n288 |         error: error,\n289 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:267:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n265 |           throw SecureStorageError.decryptionError(\"Failed to decrypt data: \\(error)\")\n266 |       }\n267 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n268 |       // Calculate duration before failure\n269 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:314:22: error: extra arguments at positions #4, #5 in call\n312 |     )\n313 | \n314 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n315 |       \"Starting secure deletion operation\", metadata: logMetadata,\n316 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:315:55: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n313 | \n314 |     await logger.info(\n315 |       \"Starting secure deletion operation\", metadata: logMetadata,\n    |                                                       `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n316 |       source: \"SecureStorageService\"\n317 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:321:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n319 |     do {\n320 |       // Extract required parameters from configuration\n321 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n322 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n323 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:339:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:339:41: error: type 'String?' has no member 'string'\n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n    |                                         `- error: type 'String?' has no member 'string'\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:340:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:340:39: error: type 'String?' has no member 'string'\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                       `- error: type 'String?' has no member 'string'\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:341:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:341:47: error: type 'String?' has no member 'string'\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                               `- error: type 'String?' has no member 'string'\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:342:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n343 | \n344 |       await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:342:40: error: type 'String?' has no member 'string'\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                        `- error: type 'String?' has no member 'string'\n343 | \n344 |       await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:344:24: error: extra arguments at positions #4, #5 in call\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n344 |       await logger.info(\n    |                        `- error: extra arguments at positions #4, #5 in call\n345 |         \"Secure deletion operation completed successfully\", metadata: successMetadata,\n346 |         source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:345:71: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n343 | \n344 |       await logger.info(\n345 |         \"Secure deletion operation completed successfully\", metadata: successMetadata,\n    |                                                                       `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n346 |         source: \"SecureStorageService\"\n347 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:352:19: error: cannot find 'createPrivacyMetadata' in scope\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n353 |           \"storageIdentifier\": identifier\n354 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:350:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n348 | \n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:351:18: error: extra argument 'status' in call\n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n    |                  `- error: extra argument 'status' in call\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n353 |           \"storageIdentifier\": identifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:350:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n348 | \n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:351:18: error: cannot infer contextual base in reference to member 'success'\n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n353 |           \"storageIdentifier\": identifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:362:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:362:39: error: type 'String?' has no member 'string'\n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:363:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:363:37: error: type 'String?' has no member 'string'\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:364:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:364:38: error: type 'String?' has no member 'string'\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:365:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n367 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:365:37: error: type 'String?' has no member 'string'\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n367 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:366:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n367 | \n368 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:366:40: error: type 'String?' has no member 'string'\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                                        `- error: type 'String?' has no member 'string'\n367 | \n368 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:370:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n368 |       await logger.error(\n369 |         \"Secure deletion operation failed: \\(error.localizedDescription)\",\n370 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n371 |         source: \"SecureStorageService\"\n372 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:378:19: error: cannot find 'createPrivacyMetadata' in scope\n376 |         status: .failure,\n377 |         error: error,\n378 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n379 |           \"errorMessage\": error.localizedDescription\n380 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:31: error: extra arguments at positions #1, #2 in call\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:376:18: error: cannot infer contextual base in reference to member 'failure'\n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n376 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n377 |         error: error,\n378 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:356:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n354 |         ])\n355 |       )\n356 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n357 |       // Calculate duration before failure\n358 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:467:13: error: type 'CoreSecurityError' has no member 'general'\n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n468 |   }\n469 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:471:13: error: type 'CoreSecurityError' has no member 'general'\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n472 |   }\n473 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:475:13: error: type 'CoreSecurityError' has no member 'general'\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n476 |   }\n477 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:78:12: error: cannot find 'createPrivacyMetadata' in scope\n 76 |     config: SecurityConfigDTO\n 77 |   ) -\u003e LoggingInterfaces.LogMetadata {\n 78 |     return createPrivacyMetadata([\n    |            `- error: cannot find 'createPrivacyMetadata' in scope\n 79 |       \"operationId\": operationID,\n 80 |       \"operation\": String(describing: operation),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:81:27: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 79 |       \"operationId\": operationID,\n 80 |       \"operation\": String(describing: operation),\n 81 |       \"algorithm\": config.algorithm,\n    |                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 82 |       \"timestamp\": \"\\(Date())\"\n 83 |     ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:91:13: error: type 'CoreSecurityError' has no member 'general'\n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 92 |   }\n 93 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:95:13: error: type 'CoreSecurityError' has no member 'general'\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 96 |   }\n 97 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:99:13: error: type 'CoreSecurityError' has no member 'general'\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n100 |   }\n101 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:43:37: error: cannot find type 'KeyStorageManager' in scope\n 41 |    The key manager used for key storage and retrieval\n 42 |    */\n 43 |   private let keyManagementService: KeyStorageManager\n    |                                     `- error: cannot find type 'KeyStorageManager' in scope\n 44 | \n 45 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:32:13: error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n 30 |  - Handle signature-specific errors\n 31 |  */\n 32 | final class SignatureService: SecurityServiceBase {\n    |             |- error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n    |             `- note: add stubs for conformance\n 33 |   // MARK: - Properties\n 34 | \n    :\n 46 |    The logger instance for recording operation details\n 47 |    */\n 48 |   let logger: PrivacyAwareLoggingProtocol\n    |       `- note: candidate has non-matching type 'any PrivacyAwareLoggingProtocol'\n 49 | \n 50 |   // MARK: - Initialisation\n    :\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: candidate has non-matching type '(logger: any PrivacyAwareLoggingProtocol)'\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:42:3: note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 32 |    The logger instance for recording operation details\n 33 |    */\n 34 |   var logger: LoggingInterfaces.LoggingProtocol { get }\n    |       `- note: protocol requires property 'logger' with type 'any LoggingProtocol'\n 35 | \n 36 |   /**\n    :\n 40 |        - logger: The logging service to use for operation logging\n 41 |    */\n 42 |   init(logger: LoggingInterfaces.LoggingProtocol)\n    |   `- note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 43 | \n 44 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:15: error: invalid redeclaration of 'notImplemented(reason:)'\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:99:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 97 |     // Create metadata for logging\n 98 |     var logMetadata=PrivacyMetadata()\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:100:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 98 |     var logMetadata=PrivacyMetadata()\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n102 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:101:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:101:59: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                                                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:103:118: error: extra argument 'source' in call\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                      `- error: extra argument 'source' in call\n104 | \n105 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:107:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n105 |     do {\n106 |       // Extract required parameters from configuration\n107 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n108 |         throw SignatureError.invalidInput(\"Missing input data for signing\")\n109 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:107:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n105 |     do {\n106 |       // Extract required parameters from configuration\n107 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n108 |         throw SignatureError.invalidInput(\"Missing input data for signing\")\n109 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:116:36: error: value of type 'SecurityConfigOptions?' has no subscripts\n114 | \n115 |         // If keyID is provided, retrieve the key from key management\n116 |         if let keyID=config.options[\"keyId\"] {\n    |                                    `- error: value of type 'SecurityConfigOptions?' has no subscripts\n117 |           // Retrieve the key from the key management service\n118 |           let keyResult=await keyManagementService.secureStorage\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:127:35: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n125 |                 data: inputData,\n126 |                 key: keyMaterial,\n127 |                 algorithm: config.algorithm\n    |                                   `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n128 |               )\n129 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:136:48: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n134 |         }\n135 |         // If direct key is provided, use it\n136 |         else if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n137 |           // Use encrypt as a substitute for signature generation\n138 |           signature=try await performSignature(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:136:73: error: value of type 'SecurityConfigOptions?' has no subscripts\n134 |         }\n135 |         // If direct key is provided, use it\n136 |         else if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                                         `- error: value of type 'SecurityConfigOptions?' has no subscripts\n137 |           // Use encrypt as a substitute for signature generation\n138 |           signature=try await performSignature(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:141:31: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n139 |             data: inputData,\n140 |             key: key,\n141 |             algorithm: config.algorithm\n    |                               `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n142 |           )\n143 |         }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:154:25: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n152 |         // Create success metadata for logging\n153 |         var successMetadata=logMetadata\n154 |         successMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n155 |         successMetadata.setPublic(key: \"signatureSize\", value: String(signature.count))\n156 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:155:25: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n153 |         var successMetadata=logMetadata\n154 |         successMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n155 |         successMetadata.setPublic(key: \"signatureSize\", value: String(signature.count))\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n156 | \n157 |         await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:159:53: error: extra argument 'source' in call\n157 |         await logger.info(\n158 |           \"Signing operation completed successfully\", metadata: successMetadata\n159 |         , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                     `- error: extra argument 'source' in call\n160 | \n161 |         // Return successful result with signature\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:165:21: error: cannot find 'createPrivacyMetadata' in scope\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n    |                     `- error: cannot find 'createPrivacyMetadata' in scope\n166 |             \"algorithm\": config.algorithm\n167 |           ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:16: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:33: error: extra arguments at positions #1, #2 in call\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                                 `- error: extra arguments at positions #1, #2 in call\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:33: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:163:20: error: cannot infer contextual base in reference to member 'success'\n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n163 |           status: .success,\n    |                    `- error: cannot infer contextual base in reference to member 'success'\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:164:27: error: value of type 'SendableCryptoMaterial' has no member 'toBase64'\n162 |         return SecurityResultDTO(\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n    |                           `- error: value of type 'SendableCryptoMaterial' has no member 'toBase64'\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n166 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:166:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n166 |             \"algorithm\": config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n167 |           ])\n168 |         )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:175:23: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n173 |         // Create failure metadata for logging\n174 |         var errorMetadata=logMetadata\n175 |         errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                       `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n177 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:176:23: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n174 |         var errorMetadata=logMetadata\n175 |         errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                       `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:178:110: error: missing argument for parameter 'source' in call\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                              `- error: missing argument for parameter 'source' in call\n179 |         , source: \\\"SecurityImplementation\\\")\n180 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:196:21: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n194 |       // Create failure metadata for logging\n195 |       var errorMetadata=logMetadata\n196 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n198 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:197:21: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n195 |       var errorMetadata=logMetadata\n196 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:199:108: error: missing argument for parameter 'source' in call\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                            `- error: missing argument for parameter 'source' in call\n200 |       , source: \\\"SecurityImplementation\\\")\n201 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:169:9: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n167 |           ])\n168 |         )\n169 |       } catch {\n    |         `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n170 |         // Calculate duration before failure\n171 |         let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:226:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n224 |     // Create metadata for logging\n225 |     var logMetadata=PrivacyMetadata()\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:227:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n225 |     var logMetadata=PrivacyMetadata()\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n229 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:228:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:228:59: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                                                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:230:133: error: extra argument 'source' in call\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                                     `- error: extra argument 'source' in call\n231 | \n232 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:234:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n232 |     do {\n233 |       // Extract required parameters from configuration\n234 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n235 |         throw SignatureError.invalidInput(\"Missing input data for verification\")\n236 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:234:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n232 |     do {\n233 |       // Extract required parameters from configuration\n234 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n235 |         throw SignatureError.invalidInput(\"Missing input data for verification\")\n236 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:238:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n236 |       }\n237 | \n238 |       guard let signature=SendableCryptoMaterial.fromBase64(config.options[\"signature\"] ?? \"\")\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n239 |       else {\n240 |         throw SignatureError.invalidInput(\"Missing signature to verify\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:238:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n236 |       }\n237 | \n238 |       guard let signature=SendableCryptoMaterial.fromBase64(config.options[\"signature\"] ?? \"\")\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n239 |       else {\n240 |         throw SignatureError.invalidInput(\"Missing signature to verify\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:244:41: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n242 | \n243 |       // Check if key is provided directly in the options\n244 |       if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                         `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n245 |         // Try to verify the signature using the provided key\n246 |         let isValid=try await performVerification(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:244:66: error: value of type 'SecurityConfigOptions?' has no subscripts\n242 | \n243 |       // Check if key is provided directly in the options\n244 |       if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                                  `- error: value of type 'SecurityConfigOptions?' has no subscripts\n245 |         // Try to verify the signature using the provided key\n246 |         let isValid=try await performVerification(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:250:29: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n248 |           signature: signature,\n249 |           key: key,\n250 |           algorithm: config.algorithm\n    |                             `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n251 |         )\n252 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:258:30: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n256 |         // Create result metadata\n257 |         var verificationMetadata=logMetadata\n258 |         verificationMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                              `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n259 |         verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n260 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:259:30: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n257 |         var verificationMetadata=logMetadata\n258 |         verificationMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n259 |         verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n    |                              `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n260 | \n261 |         if isValid {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:264:55: error: extra argument 'source' in call\n262 |           await logger.info(\n263 |             \"Signature verification completed: Valid signature\", metadata: verificationMetadata\n264 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                       `- error: extra argument 'source' in call\n265 |         } else {\n266 |           await logger.warning(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:268:55: error: extra argument 'source' in call\n266 |           await logger.warning(\n267 |             \"Signature verification completed: Invalid signature\", metadata: verificationMetadata\n268 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                       `- error: extra argument 'source' in call\n269 |         }\n270 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:274:21: error: cannot find 'createPrivacyMetadata' in scope\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n    |                     `- error: cannot find 'createPrivacyMetadata' in scope\n275 |             \"algorithm\": config.algorithm\n276 |           ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:272:16: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n270 | \n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n    |                `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:273:20: error: extra argument 'status' in call\n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n    |                    `- error: extra argument 'status' in call\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:272:33: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n270 | \n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n    |                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:273:20: error: cannot infer contextual base in reference to member 'success'\n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n    |                    `- error: cannot infer contextual base in reference to member 'success'\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:275:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n276 |           ])\n277 |         )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:282:39: error: value of type 'SecurityConfigOptions?' has no subscripts\n280 | \n281 |         // Attempt to get key ID from config\n282 |         guard let keyID=config.options[\"keyId\"] else {\n    |                                       `- error: value of type 'SecurityConfigOptions?' has no subscripts\n283 |           throw SignatureError.invalidInput(\"Neither key nor keyId provided for verification\")\n284 |         }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:297:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n295 |               signature: signature,\n296 |               key: keyMaterial,\n297 |               algorithm: config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n298 |             )\n299 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:305:34: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n303 |             // Create result metadata\n304 |             var verificationMetadata=logMetadata\n305 |             verificationMetadata.setPublic(\n    |                                  `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n306 |               key: \"duration\",\n307 |               value: String(format: \"%.3f s\", duration)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:309:34: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n307 |               value: String(format: \"%.3f s\", duration)\n308 |             )\n309 |             verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n    |                                  `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n310 | \n311 |             if isValid {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:314:59: error: extra argument 'source' in call\n312 |               await logger.info(\n313 |                 \"Signature verification completed: Valid signature\", metadata: verificationMetadata\n314 |               , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                           `- error: extra argument 'source' in call\n315 |             } else {\n316 |               await logger.warning(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:318:59: error: extra argument 'source' in call\n316 |               await logger.warning(\n317 |                 \"Signature verification completed: Invalid signature\", metadata: verificationMetadata\n318 |               , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                           `- error: extra argument 'source' in call\n319 |             }\n320 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:324:25: error: cannot find 'createPrivacyMetadata' in scope\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n    |                         `- error: cannot find 'createPrivacyMetadata' in scope\n325 |                 \"algorithm\": config.algorithm\n326 |               ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:322:20: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n320 | \n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n    |                    `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:323:24: error: extra argument 'status' in call\n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n    |                        `- error: extra argument 'status' in call\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:322:37: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n320 | \n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n    |                                     `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:323:24: error: cannot infer contextual base in reference to member 'success'\n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n    |                        `- error: cannot infer contextual base in reference to member 'success'\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:325:37: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n    |                                     `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n326 |               ])\n327 |             )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:339:21: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n337 |       // Create failure metadata for logging\n338 |       var errorMetadata=logMetadata\n339 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n341 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:340:21: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n338 |       var errorMetadata=logMetadata\n339 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:342:123: error: missing argument for parameter 'source' in call\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                                           `- error: missing argument for parameter 'source' in call\n343 |       , source: \\\"SecurityImplementation\\\")\n344 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:403:27: error: incorrect argument label in call (have 'base64Encoded:', expected 'hexString:')\n401 |     // Implement secure random material generation\n402 |     // For now, this is a placeholder that would be replaced with actual implementation\n403 |     SendableCryptoMaterial(base64Encoded: \"random-material\")\n    |                           `- error: incorrect argument label in call (have 'base64Encoded:', expected 'hexString:')\n404 |   }\n405 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:418:13: error: type 'CoreSecurityError' has no member 'general'\n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n419 |   }\n420 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:422:13: error: type 'CoreSecurityError' has no member 'general'\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n423 |   }\n424 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:426:13: error: type 'CoreSecurityError' has no member 'general'\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n427 |   }\n428 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:16:22: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n14 |   /// - Parameter reason: The reason for the error\n15 |   /// - Returns: A CoreSecurityError with the appropriate error code\n16 |   public static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n17 |     return .invalidInput(\"Invalid verification method: \\(reason)\")\n18 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:23:22: error: invalid redeclaration of 'verificationFailed(reason:)'\n21 |   /// - Parameter reason: The reason for the error\n22 |   /// - Returns: A CoreSecurityError with the appropriate error code\n23 |   public static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'verificationFailed(reason:)'\n24 |     return .authenticationFailed(\"Verification failed: \\(reason)\")\n25 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:30:22: error: invalid redeclaration of 'notImplemented(reason:)'\n28 |   /// - Parameter reason: The reason for the error\n29 |   /// - Returns: A CoreSecurityError with the appropriate error code\n30 |   public static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'notImplemented(reason:)'\n31 |     return .unsupportedOperation(\"Not implemented: \\(reason)\")\n32 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Logging.swift:38:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 36 |  according to the Alpha Dot Five architecture principles.\n 37 |  */\n 38 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 39 |   /**\n 40 |    Logs the start of a security operation with privacy-aware metadata.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  * Batch encryption and decryption for collections of data\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Encrypts data and then stores it securely.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:15: error: invalid redeclaration of 'notImplemented(reason:)'\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:428:13: error: type 'CoreSecurityError' has no member 'general'\n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n429 |   }\n430 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:432:13: error: type 'CoreSecurityError' has no member 'general'\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n433 |   }\n434 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:436:13: error: type 'CoreSecurityError' has no member 'general'\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n437 |   }\n438 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  - Common validation logic is centralised\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Validates configuration for encryption operations.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:205:13: error: type 'CoreSecurityError' has no member 'general'\n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n206 |   }\n207 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:209:13: error: type 'CoreSecurityError' has no member 'general'\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n210 |   }\n211 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:213:13: error: type 'CoreSecurityError' has no member 'general'\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n214 |   }\n215 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:15: error: invalid redeclaration of 'notImplemented(reason:)'\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:52:8: error: type 'CryptoServiceFactory' has no member 'createStandardCryptoService'\n 50 |     // Create standard crypto service\n 51 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 52 |       .createStandardCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createStandardCryptoService'\n 53 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n 54 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:53:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n 51 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 52 |       .createStandardCryptoService()\n 53 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n 54 | \n 55 |     // Use the provided logger or create a default one\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:60:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n 58 |       actualLogger=logger\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n 61 |         environment: .development)\n 62 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:61:23: error: extra argument 'environment' in call\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n 62 |       )\n 63 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:61:23: error: cannot infer contextual base in reference to member 'development'\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n 62 |       )\n 63 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:69:27: error: missing argument for parameter 'secureLogger' in call\n 67 |     let securityService=SecurityServiceActor(\n 68 |       cryptoService: cryptoService,\n 69 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n 70 |     )\n 71 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:96:8: error: type 'CryptoServiceFactory' has no member 'createHighSecurityCryptoService'\n 94 |     // Create high-security crypto service\n 95 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 96 |       .createHighSecurityCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createHighSecurityCryptoService'\n 97 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n 98 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:97:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n 95 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 96 |       .createHighSecurityCryptoService()\n 97 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n 98 | \n 99 |     // Use the provided logger or create a default one with debug level logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:105:23: error: extra argument 'environment' in call\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n106 |       )\n107 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:104:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n102 |       actualLogger=logger\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n105 |         environment: .development)\n106 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:105:23: error: cannot infer contextual base in reference to member 'development'\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n106 |       )\n107 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:113:27: error: missing argument for parameter 'secureLogger' in call\n111 |     let securityService=SecurityServiceActor(\n112 |       cryptoService: cryptoService,\n113 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n114 |     )\n115 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:141:8: error: type 'CryptoServiceFactory' has no member 'createMaxSecurityCryptoService'\n139 |     // Create max-security crypto service\n140 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n141 |       .createMaxSecurityCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createMaxSecurityCryptoService'\n142 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n143 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:142:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n140 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n141 |       .createMaxSecurityCryptoService()\n142 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n143 | \n144 |     // Use the provided logger or create a default one with debug level logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:149:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n147 |       actualLogger=logger\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n150 |         environment: .development)\n151 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:150:23: error: extra argument 'environment' in call\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n151 |       )\n152 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:150:23: error: cannot infer contextual base in reference to member 'development'\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n151 |       )\n152 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:158:27: error: missing argument for parameter 'secureLogger' in call\n156 |     let securityService=SecurityServiceActor(\n157 |       cryptoService: cryptoService,\n158 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n159 |     )\n160 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:172:13: error: type 'CoreSecurityError' has no member 'general'\n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n173 |   }\n174 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:176:13: error: type 'CoreSecurityError' has no member 'general'\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n177 |   }\n178 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:180:13: error: type 'CoreSecurityError' has no member 'general'\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n181 |   }\n182 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:92:13: error: type 'CoreSecurityError' has no member 'general'\n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 93 |   }\n 94 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:96:13: error: type 'CoreSecurityError' has no member 'general'\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 97 |   }\n 98 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:100:13: error: type 'CoreSecurityError' has no member 'general'\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n101 |   }\n102 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               `- warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:30:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 28 |   /// - Returns: The generated random integer\n 29 |   /// - Throws: SecurityError if random generation fails\n 30 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 31 | \n 32 |   /// Generates a cryptographically secure random integer within the specified closed range\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               `- warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:36:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 34 |   /// - Returns: The generated random integer\n 35 |   /// - Throws: SecurityError if random generation fails\n 36 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 37 | \n 38 |   /// Generates a cryptographically secure random double between 0.0 and 1.0\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:15: error: invalid redeclaration of 'notImplemented(reason:)'\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:53:27: error: type 'SecurityError' has no member 'alreadyInitialized'\n 51 |   public func initialise(entropySource: EntropySource) async throws {\n 52 |     guard !isInitialised else {\n 53 |       throw SecurityError.alreadyInitialized(\"Random data service is already initialised\")\n    |                           `- error: type 'SecurityError' has no member 'alreadyInitialized'\n 54 |     }\n 55 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:42: error: missing argument label 'entries:' in call\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:60:69: error: cannot infer contextual base in reference to member 'public'\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n    |                                                                     `- error: cannot infer contextual base in reference to member 'public'\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n 62 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:61:71: error: cannot infer contextual base in reference to member 'public'\n 59 |       metadata: LogMetadataDTOCollection([\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n    |                                                                       `- error: cannot infer contextual base in reference to member 'public'\n 62 |       ]),\n 63 |       source: \"RandomDataServiceActor.initialise\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:78:31: error: type 'SecurityError' has no member 'initialisationFailed'\n 76 | \n 77 |         guard result == errSecSuccess else {\n 78 |           throw SecurityError.initialisationFailed(\n    |                               `- error: type 'SecurityError' has no member 'initialisationFailed'\n 79 |             reason: \"Hardware entropy source is not available\"\n 80 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:85:31: error: type 'SecurityError' has no member 'initialisationFailed'\n 83 |         // Ensure the bytes are actually random\n 84 |         guard bytes != testBytes else {\n 85 |           throw SecurityError.initialisationFailed(\n    |                               `- error: type 'SecurityError' has no member 'initialisationFailed'\n 86 |             reason: \"Entropy source did not produce random data\"\n 87 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:65: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:90: error: missing argument label 'entries:' in call\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                                          `- error: missing argument label 'entries:' in call\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:90: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:100:69: error: cannot infer contextual base in reference to member 'public'\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                     `- error: cannot infer contextual base in reference to member 'public'\n101 |       ]),\n102 |       source: \"RandomDataServiceActor.initialise\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:42: error: missing argument label 'entries:' in call\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:132:53: error: cannot infer contextual base in reference to member 'public'\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n132 |         \"length\": (value: String(length), privacy: .public)\n    |                                                     `- error: cannot infer contextual base in reference to member 'public'\n133 |       ]),\n134 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:142:27: error: type 'SecurityError' has no member 'operationFailed'\n140 | \n141 |     guard result == errSecSuccess else {\n142 |       throw SecurityError.operationFailed(\"SecRandomCopyBytes failed with error \\(result)\")\n    |                           `- error: type 'SecurityError' has no member 'operationFailed'\n143 |     }\n144 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:56: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                        `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:81: error: missing argument label 'entries:' in call\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                                                 `- error: missing argument label 'entries:' in call\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:81: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                                                 `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:148:33: error: extra arguments at positions #2, #3 in call\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                 `- error: extra arguments at positions #2, #3 in call\n149 |       ]),\n150 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\nSwift.String.init:2:19: note: 'init(_:)' declared here\n1 | struct String {\n2 | @inlinable public init\u003cT\u003e(_ value: T) where T : LosslessStringConvertible}\n  |                   `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:148:126: error: cannot infer contextual base in reference to member 'public'\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                              `- error: cannot infer contextual base in reference to member 'public'\n149 |       ]),\n150 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:42: error: missing argument label 'entries:' in call\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:167:68: error: cannot infer contextual base in reference to member 'public'\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n    |                                                                    `- error: cannot infer contextual base in reference to member 'public'\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:168:68: error: cannot infer contextual base in reference to member 'public'\n166 |       metadata: LogMetadataDTOCollection([\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n    |                                                                    `- error: cannot infer contextual base in reference to member 'public'\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n170 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:169:63: error: cannot infer contextual base in reference to member 'public'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n    |                                                               `- error: cannot infer contextual base in reference to member 'public'\n170 |       ]),\n171 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:177:27: error: type 'SecurityError' has no member 'invalidInput'\n175 |     let width=range.upperBound - range.lowerBound\n176 |     guard width \u003e 0 else {\n177 |       throw SecurityError.invalidInput(\"Range width must be greater than zero\")\n    |                           `- error: type 'SecurityError' has no member 'invalidInput'\n178 |     }\n179 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:58: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                          `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:83: error: missing argument label 'entries:' in call\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                                                   `- error: missing argument label 'entries:' in call\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:83: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                                                   `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:198:32: error: extra arguments at positions #2, #3 in call\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                `- error: extra arguments at positions #2, #3 in call\n199 |       ]),\n200 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\nSwift.String.init:2:19: note: 'init(_:)' declared here\n1 | struct String {\n2 | @inlinable public init\u003cT\u003e(_ value: T) where T : LosslessStringConvertible}\n  |                   `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:198:120: error: cannot infer contextual base in reference to member 'public'\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                        `- error: cannot infer contextual base in reference to member 'public'\n199 |       ]),\n200 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:65: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:89: error: extra arguments at positions #2, #3 in call\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                                         `- error: extra arguments at positions #2, #3 in call\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogMetadataDTOCollection.swift:20:10: note: 'init(entries:)' declared here\n 18 |   ///\n 19 |   /// - Parameter entries: The initial metadata entries\n 20 |   public init(entries: [LogMetadataDTO]) {\n    |          `- note: 'init(entries:)' declared here\n 21 |     self.entries=entries\n 22 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:90: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type '[LogMetadataDTO]'\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                                          `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type '[LogMetadataDTO]'\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:57: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                         `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:82: error: missing argument label 'entries:' in call\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                                                  `- error: missing argument label 'entries:' in call\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:82: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                                                  `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:243:32: error: extra arguments at positions #3, #4 in call\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                `- error: extra arguments at positions #3, #4 in call\n244 |       ]),\n245 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n\nFoundation.String.init:2:8: note: 'init(format:_:)' declared here\n1 | struct String {\n2 | public init(format: __shared String, _ arguments: any CVarArg...)}\n  |        `- note: 'init(format:_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:243:136: error: cannot infer contextual base in reference to member 'public'\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                                        `- error: cannot infer contextual base in reference to member 'public'\n244 |       ]),\n245 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:257:27: error: type 'SecurityError' has no member 'notInitialized'\n255 |   private func validateInitialisation() throws {\n256 |     guard isInitialised else {\n257 |       throw SecurityError.notInitialized(\"Random data service is not initialised\")\n    |                           `- error: type 'SecurityError' has no member 'notInitialized'\n258 |     }\n259 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:266:13: error: type 'CoreSecurityError' has no member 'general'\n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n267 |   }\n268 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:270:13: error: type 'CoreSecurityError' has no member 'general'\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n271 |   }\n272 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:274:13: error: type 'CoreSecurityError' has no member 'general'\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n275 |   }\n276 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:25:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n23 |   /// - Returns: A fully configured random data service\n24 |   public static func createDefault() -\u003e RandomDataServiceProtocol {\n25 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n26 |       subsystem: \"uk.co.umbra.security\",\n27 |       category: \"RandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:45:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n43 |   /// - Returns: A fully configured high-security random data service\n44 |   public static func createHighSecurity() -\u003e RandomDataServiceProtocol {\n45 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n46 |       subsystem: \"uk.co.umbra.security\",\n47 |       category: \"HighSecurityRandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:63:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n61 |   /// - Returns: A minimally configured random data service\n62 |   public static func createMinimal() -\u003e RandomDataServiceProtocol {\n63 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n64 |       subsystem: \"uk.co.umbra.security\",\n65 |       category: \"MinimalRandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:83:13: error: type 'CoreSecurityError' has no member 'general'\n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n84 |   }\n85 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:87:13: error: type 'CoreSecurityError' has no member 'general'\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n88 |   }\n89 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:91:13: error: type 'CoreSecurityError' has no member 'general'\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n92 |   }\n93 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:110:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n108 | \n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n111 |     return .invalidVerificationMethod(reason: reason)\n112 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:114:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n112 |   }\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n115 |     return .verificationFailed(reason: reason)\n116 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:118:15: error: invalid redeclaration of 'notImplemented(reason:)'\n116 |   }\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n119 |     return .notImplemented(reason: reason)\n120 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:9:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  7 |   var metadata = PrivacyMetadata()\n  8 |   for (key, value) in dict {\n  9 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 10 |   }\n 11 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:95:27: error: cannot find 'LoggingServices' in scope\n 93 |       cryptoService: cryptoService,\n 94 |       logger: logger,\n 95 |       secureLogger: await LoggingServices.createSecureLogger(\n    |                           `- error: cannot find 'LoggingServices' in scope\n 96 |         subsystem: \"com.umbra.security\",\n 97 |         category: \"SecurityService\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:111:13: error: ambiguous use of 'invalidVerificationMethod(reason:)'\n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n111 |     return .invalidVerificationMethod(reason: reason)\n    |             `- error: ambiguous use of 'invalidVerificationMethod(reason:)'\n112 |   }\n113 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: note: found this candidate \n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:258:15: note: found this candidate \n256 | \n257 | extension CoreSecurityError {\n258 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n259 |     return .invalidVerificationMethod(reason: reason)\n260 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:115:13: error: ambiguous use of 'verificationFailed(reason:)'\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n115 |     return .verificationFailed(reason: reason)\n    |             `- error: ambiguous use of 'verificationFailed(reason:)'\n116 |   }\n117 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: note: found this candidate \n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:262:15: note: found this candidate \n260 |   }\n261 |   \n262 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n263 |     return .verificationFailed(reason: reason)\n264 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:119:13: error: ambiguous use of 'notImplemented(reason:)'\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n119 |     return .notImplemented(reason: reason)\n    |             `- error: ambiguous use of 'notImplemented(reason:)'\n120 |   }\n121 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              `- error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 31 |   // MARK: - Private Properties\n 32 | \n    :\n349 |    - Returns: Result of the operation\n350 |    */\n351 |   public func performSecureOperation(\n    |               `- note: candidate has non-matching type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n352 |     operation: SecurityOperation,\n353 |     config: SecurityConfigDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              |- error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n    |              `- note: add stubs for conformance\n 31 |   // MARK: - Private Properties\n 32 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:109:8: note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:16:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 14 |   var metadata = PrivacyMetadata()\n 15 |   for (key, value) in dict {\n 16 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 17 |   }\n 18 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:69:50: error: extra arguments at positions #1, #3, #4, #5 in call\n 67 |     self.logger = logger\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n    |                                                  `- error: extra arguments at positions #1, #3, #4, #5 in call\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/DTOs/SecurityDTOs.swift:23:10: note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 21 |   ///   - loggingLevel: The logging level for security operations\n 22 |   ///   - randomizationOptions: Options for secure random number generation\n 23 |   public init(\n    |          `- note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 24 |     securityLevel: CoreSecurityTypes.SecurityLevelDTO = .standard,\n 25 |     loggingLevel: CoreSecurityTypes.SecurityLogLevelDTO = .warning,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:70:22: error: cannot infer contextual base in reference to member 'standard'\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n 70 |       providerType: .standard,\n    |                      `- error: cannot infer contextual base in reference to member 'standard'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:72:29: error: cannot infer contextual base in reference to member 'aes256'\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n    |                             `- error: cannot infer contextual base in reference to member 'aes256'\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:73:23: error: cannot infer contextual base in reference to member 'sha256'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n    |                       `- error: cannot infer contextual base in reference to member 'sha256'\n 74 |       options: nil\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:74:16: error: 'nil' requires a contextual type\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n    |                `- error: 'nil' requires a contextual type\n 75 |     )\n 76 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:83:41: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 81 |         metadata: createPrivacyMetadata([\n 82 |           \"serviceId\": serviceId.uuidString,\n 83 |           \"providerType\": configuration.providerType.rawValue,\n    |                                         `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 84 |           \"securityLevel\": configuration.securityLevel.rawValue\n 85 |         ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:111:44: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n109 |       metadata: createPrivacyMetadata([\n110 |         \"serviceId\": serviceId.uuidString,\n111 |         \"providerType\": self.configuration.providerType.rawValue,\n    |                                            `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n112 |         \"securityLevel\": self.configuration.securityLevel.rawValue\n113 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:126:31: error: type 'CoreSecurityError' has no member 'serviceUnavailable'\n124 |   private func validateInitialisation() throws {\n125 |     if !isInitialised {\n126 |       throw CoreSecurityError.serviceUnavailable(reason: \"Security service not initialised\")\n    |                               `- error: type 'CoreSecurityError' has no member 'serviceUnavailable'\n127 |     }\n128 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:155:16: error: type 'SecurityEventStatus' has no member 'started'\n153 |     await secureLogger.securityEvent(\n154 |       action: \"Encrypt\",\n155 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n156 |       subject: nil,\n157 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:165:29: error: ambiguous use of 'notImplemented(reason:)'\n163 |     \n164 |     // Not implemented yet - would delegate to crypto service\n165 |     throw CoreSecurityError.notImplemented(reason: \"Encrypt operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n166 |   }\n167 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:180:16: error: type 'SecurityEventStatus' has no member 'started'\n178 |     await secureLogger.securityEvent(\n179 |       action: \"Decrypt\",\n180 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n181 |       subject: nil,\n182 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:190:29: error: ambiguous use of 'notImplemented(reason:)'\n188 |     \n189 |     // Not implemented yet - would delegate to crypto service\n190 |     throw CoreSecurityError.notImplemented(reason: \"Decrypt operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n191 |   }\n192 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:205:16: error: type 'SecurityEventStatus' has no member 'started'\n203 |     await secureLogger.securityEvent(\n204 |       action: \"GenerateKey\",\n205 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n206 |       subject: nil,\n207 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:215:29: error: ambiguous use of 'notImplemented(reason:)'\n213 |     \n214 |     // Not implemented yet - would delegate to crypto service\n215 |     throw CoreSecurityError.notImplemented(reason: \"Key generation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n216 |   }\n217 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:230:16: error: type 'SecurityEventStatus' has no member 'started'\n228 |     await secureLogger.securityEvent(\n229 |       action: \"SecureStore\",\n230 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n231 |       subject: nil,\n232 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:240:29: error: ambiguous use of 'notImplemented(reason:)'\n238 |     \n239 |     // Not implemented yet - would delegate to crypto service\n240 |     throw CoreSecurityError.notImplemented(reason: \"Secure store operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n241 |   }\n242 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:255:16: error: type 'SecurityEventStatus' has no member 'started'\n253 |     await secureLogger.securityEvent(\n254 |       action: \"SecureRetrieve\",\n255 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n256 |       subject: nil,\n257 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:265:29: error: ambiguous use of 'notImplemented(reason:)'\n263 |     \n264 |     // Not implemented yet - would delegate to crypto service\n265 |     throw CoreSecurityError.notImplemented(reason: \"Secure retrieve operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n266 |   }\n267 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:280:16: error: type 'SecurityEventStatus' has no member 'started'\n278 |     await secureLogger.securityEvent(\n279 |       action: \"SecureDelete\",\n280 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n281 |       subject: nil,\n282 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:290:29: error: ambiguous use of 'notImplemented(reason:)'\n288 |     \n289 |     // Not implemented yet - would delegate to crypto service\n290 |     throw CoreSecurityError.notImplemented(reason: \"Secure delete operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n291 |   }\n292 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:305:16: error: type 'SecurityEventStatus' has no member 'started'\n303 |     await secureLogger.securityEvent(\n304 |       action: \"Sign\",\n305 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n306 |       subject: nil,\n307 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:315:29: error: ambiguous use of 'notImplemented(reason:)'\n313 |     \n314 |     // Not implemented yet - would delegate to crypto service\n315 |     throw CoreSecurityError.notImplemented(reason: \"Sign operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n316 |   }\n317 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:330:16: error: type 'SecurityEventStatus' has no member 'started'\n328 |     await secureLogger.securityEvent(\n329 |       action: \"Verify\",\n330 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n331 |       subject: nil,\n332 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:340:29: error: ambiguous use of 'notImplemented(reason:)'\n338 |     \n339 |     // Not implemented yet - would delegate to crypto service\n340 |     throw CoreSecurityError.notImplemented(reason: \"Verify operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n341 |   }\n342 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:360:16: error: type 'SecurityEventStatus' has no member 'started'\n358 |     await secureLogger.securityEvent(\n359 |       action: \"SecurityOperation\",\n360 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n361 |       subject: nil,\n362 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:370:29: error: ambiguous use of 'notImplemented(reason:)'\n368 |     \n369 |     // Not implemented yet\n370 |     throw CoreSecurityError.notImplemented(reason: \"Generic secure operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n371 |   }\n372 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:382:29: error: type 'EncryptionAlgorithm' has no member 'aes256'\n380 |     // Create and return a new configuration based on the provided options\n381 |     return SecurityConfigDTO(\n382 |       encryptionAlgorithm: .aes256,\n    |                             `- error: type 'EncryptionAlgorithm' has no member 'aes256'\n383 |       hashAlgorithm: .sha256,\n384 |       providerType: .standard,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:384:22: error: type 'SecurityProviderType' has no member 'standard'\n382 |       encryptionAlgorithm: .aes256,\n383 |       hashAlgorithm: .sha256,\n384 |       providerType: .standard,\n    |                      `- error: type 'SecurityProviderType' has no member 'standard'\n385 |       options: options\n386 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceFactory.swift:15:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 13 |   var metadata = PrivacyMetadata()\n 14 |   for (key, value) in dict {\n 15 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 16 |   }\n 17 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: error: invalid redeclaration of 'notImplemented(reason:)'\n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:8:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  6 |   var metadata = PrivacyMetadata()\n  7 |   for (key, value) in dict {\n  8 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  9 |   }\n 10 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:114:39: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n112 |     // Add any additional metadata\n113 |     for (key, value) in additionalMetadata {\n114 |       metricMetadata = metricMetadata.withPublic(key: key, value: value)\n    |                                       `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n115 |     }\n116 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:119:39: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n117 |     // Add historical performance if available\n118 |     if let avgDuration=averagePerformance(for: operation) {\n119 |       metricMetadata = metricMetadata.withPublic(key: \"avgDurationMs\", value: String(format: \"%.2f\", avgDuration))\n    |                                       `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n120 |     }\n121 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:124:20: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n122 |     // Log the metrics with appropriate level based on success\n123 |     if success {\n124 |       await logger.info(\"Security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n    |                    `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n125 |     } else {\n126 |       await logger.warning(\"Failed security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:126:20: warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n124 |       await logger.info(\"Security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n125 |     } else {\n126 |       await logger.warning(\"Failed security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n    |                    `- warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n127 |     }\n128 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:185:41: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n183 |     // Add context information\n184 |     for (key, value) in context {\n185 |       anomalyMetadata = anomalyMetadata.withPublic(key: key, value: value)\n    |                                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n186 |     }\n187 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:189:18: warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n187 | \n188 |     // Log the anomaly\n189 |     await logger.warning(\"Performance anomaly detected in \\(operation.description)\", metadata: anomalyMetadata, source: \"SecurityImplementation\")\n    |                  `- warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n190 | \n191 |     // Prepare privacy-tagged metadata for secure logger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:286:17: error: type 'LogPrivacyLevel' has no member 'restricted'\n284 |     for pattern in restrictedKeyPatterns {\n285 |       if key.lowercased().contains(pattern) {\n286 |         return .restricted\n    |                 `- error: type 'LogPrivacyLevel' has no member 'restricted'\n287 |       }\n288 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:8:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  6 |   var metadata = PrivacyMetadata()\n  7 |   for (key, value) in dict {\n  8 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  9 |   }\n 10 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:93:43: error: cannot find 'startTime' in scope\n 91 |   ) async {\n 92 |     // Calculate duration before failure\n 93 |     let duration=Date().timeIntervalSince(startTime) * 1000\n    |                                           `- error: cannot find 'startTime' in scope\n 94 | \n 95 |     // Create error metadata for logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:119:70: error: reference to member 'int' cannot be resolved without a contextual type\n117 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n118 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operation.rawValue), privacyLevel: .public),\n119 |         \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration)), privacyLevel: .public),\n    |                                                                      `- error: reference to member 'int' cannot be resolved without a contextual type\n120 |         \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n121 |         \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(sanitizeErrorMessage(error.localizedDescription)), privacyLevel: .sensitive)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:126:12: error: unexpected non-void return value in void function\n124 | \n125 |     // Return a standardised error result\n126 |     return createErrorResult(error: error, duration: duration)\n    |            |- error: unexpected non-void return value in void function\n    |            `- note: did you mean to add a return type?\n127 |   }\n128 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:193:22: error: cannot find 'operationID' in scope\n191 |     // Create standard metadata\n192 |     let standardMetadata = createPrivacyMetadata([\n193 |       \"operationId\": operationID,\n    |                      `- error: cannot find 'operationID' in scope\n194 |       \"operation\": operation.rawValue,\n195 |       \"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:195:44: error: cannot find 'duration' in scope\n193 |       \"operationId\": operationID,\n194 |       \"operation\": operation.rawValue,\n195 |       \"durationMs\": String(format: \"%.2f\", duration),\n    |                                            `- error: cannot find 'duration' in scope\n196 |       \"errorType\": String(describing: type(of: error)),\n197 |       \"errorMessage\": sanitizeErrorMessage(error.localizedDescription)\nTarget //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories failed to build\nINFO: Elapsed time: 4.024s, Critical Path: 3.95s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation",
    "success": false,
    "start_time": "2025-04-09T00:55:19.681115+01:00",
    "end_time": "2025-04-09T00:55:24.815976+01:00",
    "duration": "5.134838083s",
    "output": "INFO: Invocation ID: a53c1680-d113-49e7-b933-6d25b6e6a535\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation (0 packages loaded, 0 targets configured).\n[1 / 3] Compiling Swift module //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation; 1s disk-cache, worker\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/SecurityImplementation/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:10: error: static methods may only be declared on a type\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:10: error: static methods may only be declared on a type\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:10: error: static methods may only be declared on a type\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:163:1: error: extraneous '}' at top level\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n163 | }\n    | `- error: extraneous '}' at top level\n164 | \n165 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:10: error: static methods may only be declared on a type\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:10: error: static methods may only be declared on a type\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:10: error: static methods may only be declared on a type\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:72:1: error: extraneous '}' at top level\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n72 | }\n   | `- error: extraneous '}' at top level\n73 | \n74 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:10: error: static methods may only be declared on a type\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:10: error: static methods may only be declared on a type\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:10: error: static methods may only be declared on a type\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1155:1: error: extraneous '}' at top level\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n1155 | }\n     | `- error: extraneous '}' at top level\n1156 | \n1157 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:10: error: static methods may only be declared on a type\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:10: error: static methods may only be declared on a type\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:10: error: static methods may only be declared on a type\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:616:1: error: extraneous '}' at top level\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n616 | }\n    | `- error: extraneous '}' at top level\n617 | \n618 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:25: error: cannot find ')' to match opening '(' in string interpolation\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:23: error: unterminated string literal\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:25: error: cannot find ')' to match opening '(' in string interpolation\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:23: error: unterminated string literal\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:166:18: error: unterminated string literal\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n166 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n167 | \n168 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:247:18: error: unterminated string literal\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n247 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n248 | \n249 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:10: error: static methods may only be declared on a type\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:10: error: static methods may only be declared on a type\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:10: error: static methods may only be declared on a type\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:275:1: error: extraneous '}' at top level\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n275 | }\n    | `- error: extraneous '}' at top level\n276 | \n277 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:10: error: static methods may only be declared on a type\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:10: error: static methods may only be declared on a type\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:10: error: static methods may only be declared on a type\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:477:1: error: extraneous '}' at top level\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n477 | }\n    | `- error: extraneous '}' at top level\n478 | \n479 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:10: error: static methods may only be declared on a type\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:10: error: static methods may only be declared on a type\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:10: error: static methods may only be declared on a type\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:101:1: error: extraneous '}' at top level\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n101 | }\n    | `- error: extraneous '}' at top level\n102 | \n103 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:179:20: error: unterminated string literal\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n179 |         , source: \\\"SecurityImplementation\\\")\n    |                    `- error: unterminated string literal\n180 | \n181 |         // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:200:18: error: unterminated string literal\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n200 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n201 | \n202 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:343:18: error: unterminated string literal\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n343 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n344 | \n345 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:10: error: static methods may only be declared on a type\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:10: error: static methods may only be declared on a type\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:10: error: static methods may only be declared on a type\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:428:1: error: extraneous '}' at top level\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n428 | }\n    | `- error: extraneous '}' at top level\n429 | \n430 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:10: error: static methods may only be declared on a type\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:10: error: static methods may only be declared on a type\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:10: error: static methods may only be declared on a type\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:438:1: error: extraneous '}' at top level\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n438 | }\n    | `- error: extraneous '}' at top level\n439 | \n440 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:10: error: static methods may only be declared on a type\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:10: error: static methods may only be declared on a type\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:10: error: static methods may only be declared on a type\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:182:1: error: extraneous '}' at top level\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n182 | }\n    | `- error: extraneous '}' at top level\n183 | \n184 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:10: error: static methods may only be declared on a type\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:10: error: static methods may only be declared on a type\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:10: error: static methods may only be declared on a type\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:102:1: error: extraneous '}' at top level\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n102 | }\n    | `- error: extraneous '}' at top level\n103 | \n104 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:10: error: static methods may only be declared on a type\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:10: error: static methods may only be declared on a type\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:10: error: static methods may only be declared on a type\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:276:1: error: extraneous '}' at top level\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n276 | }\n    | `- error: extraneous '}' at top level\n277 | \n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:82:10: error: static methods may only be declared on a type\n80 | \n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n84 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:86:10: error: static methods may only be declared on a type\n84 |   }\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n88 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:90:10: error: static methods may only be declared on a type\n88 |   }\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:93:1: error: extraneous '}' at top level\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n93 | }\n   | `- error: extraneous '}' at top level\n94 | \n95 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:15: error: invalid redeclaration of 'notImplemented(reason:)'\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:15: error: invalid redeclaration of 'notImplemented(reason:)'\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: expected ',' separator\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: expected ',' separator\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: unnamed parameters must be written with the empty name '_'\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: unnamed parameters must be written with the empty name '_'\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:15: error: cannot find type 'createPrivacyMetadata' in scope\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |               `- error: cannot find type 'createPrivacyMetadata' in scope\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:15: error: invalid redeclaration of 'notImplemented(reason:)'\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:62:27: error: cannot find type 'KeyStorageManager' in scope\n 60 |   init(\n 61 |     cryptoService: CryptoServiceProtocol,\n 62 |     keyManagementService: KeyStorageManager,\n    |                           `- error: cannot find type 'KeyStorageManager' in scope\n 63 |     logger: PrivacyAwareLoggingProtocol\n 64 |   ) {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:137:38: error: extra arguments at positions #1, #2 in call\n 135 |     )\n 136 | \n 137 |     signatureService=SignatureService(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:78:3: note: 'init(logger:)' declared here\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: 'init(logger:)' declared here\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:140:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n 140 |       logger: logger\n     |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 141 |     )\n 142 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:50: error: expected ',' separator\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                                                  `- error: expected ',' separator\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:15: error: invalid redeclaration of 'notImplemented(reason:)'\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:15: error: invalid redeclaration of 'notImplemented(reason:)'\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:29: error: cannot find type 'createPrivacyMetadata' in scope\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                             `- error: cannot find type 'createPrivacyMetadata' in scope\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:15: error: invalid redeclaration of 'notImplemented(reason:)'\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:43:37: error: cannot find type 'KeyStorageManager' in scope\n 41 |    The key manager used for key storage and retrieval\n 42 |    */\n 43 |   private let keyManagementService: KeyStorageManager\n    |                                     `- error: cannot find type 'KeyStorageManager' in scope\n 44 | \n 45 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:32:13: error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n 30 |  - Handle signature-specific errors\n 31 |  */\n 32 | final class SignatureService: SecurityServiceBase {\n    |             |- error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n    |             `- note: add stubs for conformance\n 33 |   // MARK: - Properties\n 34 | \n    :\n 46 |    The logger instance for recording operation details\n 47 |    */\n 48 |   let logger: PrivacyAwareLoggingProtocol\n    |       `- note: candidate has non-matching type 'any PrivacyAwareLoggingProtocol'\n 49 | \n 50 |   // MARK: - Initialisation\n    :\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: candidate has non-matching type '(logger: any PrivacyAwareLoggingProtocol)'\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:42:3: note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 32 |    The logger instance for recording operation details\n 33 |    */\n 34 |   var logger: LoggingInterfaces.LoggingProtocol { get }\n    |       `- note: protocol requires property 'logger' with type 'any LoggingProtocol'\n 35 | \n 36 |   /**\n    :\n 40 |        - logger: The logging service to use for operation logging\n 41 |    */\n 42 |   init(logger: LoggingInterfaces.LoggingProtocol)\n    |   `- note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 43 | \n 44 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:15: error: invalid redeclaration of 'notImplemented(reason:)'\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:16:22: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n14 |   /// - Parameter reason: The reason for the error\n15 |   /// - Returns: A CoreSecurityError with the appropriate error code\n16 |   public static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n17 |     return .invalidInput(\"Invalid verification method: \\(reason)\")\n18 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:23:22: error: invalid redeclaration of 'verificationFailed(reason:)'\n21 |   /// - Parameter reason: The reason for the error\n22 |   /// - Returns: A CoreSecurityError with the appropriate error code\n23 |   public static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'verificationFailed(reason:)'\n24 |     return .authenticationFailed(\"Verification failed: \\(reason)\")\n25 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:30:22: error: invalid redeclaration of 'notImplemented(reason:)'\n28 |   /// - Parameter reason: The reason for the error\n29 |   /// - Returns: A CoreSecurityError with the appropriate error code\n30 |   public static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'notImplemented(reason:)'\n31 |     return .unsupportedOperation(\"Not implemented: \\(reason)\")\n32 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Logging.swift:38:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 36 |  according to the Alpha Dot Five architecture principles.\n 37 |  */\n 38 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 39 |   /**\n 40 |    Logs the start of a security operation with privacy-aware metadata.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  * Batch encryption and decryption for collections of data\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Encrypts data and then stores it securely.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:15: error: invalid redeclaration of 'notImplemented(reason:)'\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  - Common validation logic is centralised\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Validates configuration for encryption operations.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:15: error: invalid redeclaration of 'notImplemented(reason:)'\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               `- warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:30:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 28 |   /// - Returns: The generated random integer\n 29 |   /// - Throws: SecurityError if random generation fails\n 30 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 31 | \n 32 |   /// Generates a cryptographically secure random integer within the specified closed range\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               `- warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:36:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 34 |   /// - Returns: The generated random integer\n 35 |   /// - Throws: SecurityError if random generation fails\n 36 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 37 | \n 38 |   /// Generates a cryptographically secure random double between 0.0 and 1.0\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:15: error: invalid redeclaration of 'notImplemented(reason:)'\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:110:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n108 | \n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n111 |     return .invalidVerificationMethod(reason: reason)\n112 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:114:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n112 |   }\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n115 |     return .verificationFailed(reason: reason)\n116 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:118:15: error: invalid redeclaration of 'notImplemented(reason:)'\n116 |   }\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n119 |     return .notImplemented(reason: reason)\n120 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              `- error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 31 |   // MARK: - Private Properties\n 32 | \n    :\n349 |    - Returns: Result of the operation\n350 |    */\n351 |   public func performSecureOperation(\n    |               `- note: candidate has non-matching type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n352 |     operation: SecurityOperation,\n353 |     config: SecurityConfigDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              |- error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n    |              `- note: add stubs for conformance\n 31 |   // MARK: - Private Properties\n 32 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:109:8: note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:69:50: error: extra arguments at positions #1, #3, #4, #5 in call\n 67 |     self.logger = logger\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n    |                                                  `- error: extra arguments at positions #1, #3, #4, #5 in call\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/DTOs/SecurityDTOs.swift:23:10: note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 21 |   ///   - loggingLevel: The logging level for security operations\n 22 |   ///   - randomizationOptions: Options for secure random number generation\n 23 |   public init(\n    |          `- note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 24 |     securityLevel: CoreSecurityTypes.SecurityLevelDTO = .standard,\n 25 |     loggingLevel: CoreSecurityTypes.SecurityLogLevelDTO = .warning,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:70:22: error: cannot infer contextual base in reference to member 'standard'\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n 70 |       providerType: .standard,\n    |                      `- error: cannot infer contextual base in reference to member 'standard'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:72:29: error: cannot infer contextual base in reference to member 'aes256'\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n    |                             `- error: cannot infer contextual base in reference to member 'aes256'\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:73:23: error: cannot infer contextual base in reference to member 'sha256'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n    |                       `- error: cannot infer contextual base in reference to member 'sha256'\n 74 |       options: nil\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:74:16: error: 'nil' requires a contextual type\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n    |                `- error: 'nil' requires a contextual type\n 75 |     )\n 76 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:83:41: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 81 |         metadata: createPrivacyMetadata([\n 82 |           \"serviceId\": serviceId.uuidString,\n 83 |           \"providerType\": configuration.providerType.rawValue,\n    |                                         `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 84 |           \"securityLevel\": configuration.securityLevel.rawValue\n 85 |         ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: error: invalid redeclaration of 'notImplemented(reason:)'\n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n305 |     return .notImplemented(reason: reason)\n306 |   }\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:10: error: static methods may only be declared on a type\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:10: error: static methods may only be declared on a type\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:10: error: static methods may only be declared on a type\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:163:1: error: extraneous '}' at top level\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n163 | }\n    | `- error: extraneous '}' at top level\n164 | \n165 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:10: error: static methods may only be declared on a type\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:10: error: static methods may only be declared on a type\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:10: error: static methods may only be declared on a type\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:72:1: error: extraneous '}' at top level\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n72 | }\n   | `- error: extraneous '}' at top level\n73 | \n74 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: expected ',' separator\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: expected ',' separator\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:36: error: unnamed parameters must be written with the empty name '_'\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |                                    `- error: unnamed parameters must be written with the empty name '_'\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:10: error: static methods may only be declared on a type\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:10: error: static methods may only be declared on a type\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:10: error: static methods may only be declared on a type\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |          `- error: static methods may only be declared on a type\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1155:1: error: extraneous '}' at top level\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n1155 | }\n     | `- error: extraneous '}' at top level\n1156 | \n1157 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:10: error: static methods may only be declared on a type\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:10: error: static methods may only be declared on a type\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:10: error: static methods may only be declared on a type\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:616:1: error: extraneous '}' at top level\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n616 | }\n    | `- error: extraneous '}' at top level\n617 | \n618 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:25: error: cannot find ')' to match opening '(' in string interpolation\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:124:23: error: unterminated string literal\n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n125 |           \"error\": error.localizedDescription\n126 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:25: error: cannot find ')' to match opening '(' in string interpolation\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                         `- error: cannot find ')' to match opening '(' in string interpolation\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:180:23: error: unterminated string literal\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n    |                       `- error: unterminated string literal\n181 |           \"error\": error.localizedDescription\n182 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:166:18: error: unterminated string literal\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n166 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n167 | \n168 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:247:18: error: unterminated string literal\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n247 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n248 | \n249 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:10: error: static methods may only be declared on a type\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:10: error: static methods may only be declared on a type\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:10: error: static methods may only be declared on a type\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:275:1: error: extraneous '}' at top level\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n275 | }\n    | `- error: extraneous '}' at top level\n276 | \n277 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:260:65: error: expected ',' separator\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n    |                                                                 `- error: expected ',' separator\n261 |             ]\n262 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:260:65: error: expected key expression in dictionary literal\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n    |                                                                 `- error: expected key expression in dictionary literal\n261 |             ]\n262 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:264:9: error: expected ')' in expression list\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- note: to match this opening '('\n256 |             status: .success,\n257 |             data: decryptedData,\n    :\n262 |           )\n263 | \n264 |         case let .failure(error):\n    |         `- error: expected ')' in expression list\n265 |           throw SecureStorageError.decryptionError(\"Failed to decrypt data: \\(error)\")\n266 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:50: error: expected ',' separator\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                                                  `- error: expected ',' separator\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:10: error: static methods may only be declared on a type\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:10: error: static methods may only be declared on a type\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:10: error: static methods may only be declared on a type\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:477:1: error: extraneous '}' at top level\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n477 | }\n    | `- error: extraneous '}' at top level\n478 | \n479 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:10: error: static methods may only be declared on a type\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:10: error: static methods may only be declared on a type\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:10: error: static methods may only be declared on a type\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:101:1: error: extraneous '}' at top level\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n101 | }\n    | `- error: extraneous '}' at top level\n102 | \n103 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:179:20: error: unterminated string literal\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n179 |         , source: \\\"SecurityImplementation\\\")\n    |                    `- error: unterminated string literal\n180 | \n181 |         // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:200:18: error: unterminated string literal\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n200 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n201 | \n202 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:343:18: error: unterminated string literal\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n343 |       , source: \\\"SecurityImplementation\\\")\n    |                  `- error: unterminated string literal\n344 | \n345 |       // Return failure result\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:10: error: static methods may only be declared on a type\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:10: error: static methods may only be declared on a type\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:10: error: static methods may only be declared on a type\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:428:1: error: extraneous '}' at top level\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n428 | }\n    | `- error: extraneous '}' at top level\n429 | \n430 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:70:96: error: expected ',' separator\n 68 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n 69 |         verifyOperations: config.options?.verifyOperations ?? true,\n 70 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected ',' separator\n 71 |           \"identifier\": config.options?.metadata?[\"storeIdentifier\"] ?? UUID().uuidString,\n 72 |           \"data\": encryptResult.resultData?.base64EncodedString() ?? \"\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:70:96: error: expected key expression in dictionary literal\n 68 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n 69 |         verifyOperations: config.options?.verifyOperations ?? true,\n 70 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected key expression in dictionary literal\n 71 |           \"identifier\": config.options?.metadata?[\"storeIdentifier\"] ?? UUID().uuidString,\n 72 |           \"data\": encryptResult.resultData?.base64EncodedString() ?? \"\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:77:5: error: expected ')' in expression list\n 57 | \n 58 |     // Now store the encrypted data\n 59 |     let storeConfig=SecurityConfigDTO(\n    |                                      `- note: to match this opening '('\n 60 |       encryptionAlgorithm: config.encryptionAlgorithm,\n 61 |       hashAlgorithm: config.hashAlgorithm,\n    :\n 75 |     )\n 76 | \n 77 |     let storeResult=try await performSecureOperation(\n    |     `- error: expected ')' in expression list\n 78 |       operation: .storeKey,\n 79 |       config: storeConfig\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:112:96: error: expected ',' separator\n110 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n111 |         verifyOperations: config.options?.verifyOperations ?? true,\n112 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected ',' separator\n113 |           \"identifier\": identifier\n114 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:112:96: error: expected key expression in dictionary literal\n110 |         operationTimeoutSeconds: config.options?.operationTimeoutSeconds ?? 30.0,\n111 |         verifyOperations: config.options?.verifyOperations ?? true,\n112 |         metadata: createPrivacyMetadata([\"location\": config.options?.metadata?[\"storeLocation\"]) ?? \"default\",\n    |                                                                                                `- error: expected key expression in dictionary literal\n113 |           \"identifier\": identifier\n114 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:119:5: error: expected ')' in expression list\n 99 |   ) async throws -\u003e SecurityResultDTO {\n100 |     // First retrieve the encrypted data\n101 |     let retrieveConfig=SecurityConfigDTO(\n    |                                         `- note: to match this opening '('\n102 |       encryptionAlgorithm: config.encryptionAlgorithm,\n103 |       hashAlgorithm: config.hashAlgorithm,\n    :\n117 | \n118 |     // Retrieve the encrypted data\n119 |     let retrieveResult=try await performSecureOperation(\n    |     `- error: expected ')' in expression list\n120 |       operation: .retrieveKey,\n121 |       config: retrieveConfig\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:10: error: static methods may only be declared on a type\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:10: error: static methods may only be declared on a type\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:10: error: static methods may only be declared on a type\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:438:1: error: extraneous '}' at top level\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n438 | }\n    | `- error: extraneous '}' at top level\n439 | \n440 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:10: error: static methods may only be declared on a type\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:10: error: static methods may only be declared on a type\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:10: error: static methods may only be declared on a type\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:215:1: error: extraneous '}' at top level\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n215 | }\n    | `- error: extraneous '}' at top level\n216 | \n217 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:62:7: error: expected expression\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n 62 |       )\n    |       `- error: expected expression\n 63 |       actualLogger=developmentLogger\n 64 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:106:7: error: expected expression\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n106 |       )\n    |       `- error: expected expression\n107 |       actualLogger=developmentLogger\n108 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:151:7: error: expected expression\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n151 |       )\n    |       `- error: expected expression\n152 |       actualLogger=developmentLogger\n153 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:10: error: static methods may only be declared on a type\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:10: error: static methods may only be declared on a type\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:10: error: static methods may only be declared on a type\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:182:1: error: extraneous '}' at top level\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n182 | }\n    | `- error: extraneous '}' at top level\n183 | \n184 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:10: error: static methods may only be declared on a type\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:10: error: static methods may only be declared on a type\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:10: error: static methods may only be declared on a type\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:102:1: error: extraneous '}' at top level\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n102 | }\n    | `- error: extraneous '}' at top level\n103 | \n104 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:10: error: static methods may only be declared on a type\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:10: error: static methods may only be declared on a type\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:10: error: static methods may only be declared on a type\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |          `- error: static methods may only be declared on a type\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:276:1: error: extraneous '}' at top level\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n276 | }\n    | `- error: extraneous '}' at top level\n277 | \n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:82:10: error: static methods may only be declared on a type\n80 | \n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n84 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:86:10: error: static methods may only be declared on a type\n84 |   }\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n88 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:90:10: error: static methods may only be declared on a type\n88 |   }\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |          `- error: static methods may only be declared on a type\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:93:1: error: extraneous '}' at top level\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n92 |   }\n93 | }\n   | `- error: extraneous '}' at top level\n94 | \n95 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:173:5: error: expected expression\n171 |         \"durationMs\": String(format: \"%.2f\", duration)\n172 |       ])\n173 |     )\n    |     `- error: expected expression\n174 |   }\n175 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityErrorHandler.swift:73:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 71 |     await logger.error(\n 72 |       \"Security operation failed: \\(securityError.message)\",\n 73 |       metadata: metadata,\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 74 |       source: source\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityErrorHandler.swift:100:8: error: initializer for conditional binding must have Optional type, not 'NSError'\n 98 |     \n 99 |     // If it's an NSError, map it to a SecurityError\n100 |     if let nsError = error as NSError {\n    |        `- error: initializer for conditional binding must have Optional type, not 'NSError'\n101 |       return mapSecurityFrameworkError(nsError)\n102 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:152:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n150 | \n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:156:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n154 |   }\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n158 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:160:15: error: invalid redeclaration of 'notImplemented(reason:)'\n158 |   }\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n162 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:153:13: error: type 'CoreSecurityError' has no member 'general'\n151 |   \n152 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n153 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n154 |   }\n155 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:157:13: error: type 'CoreSecurityError' has no member 'general'\n155 |   \n156 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n157 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n158 |   }\n159 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityOperation.swift:161:13: error: type 'CoreSecurityError' has no member 'general'\n159 |   \n160 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n161 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n162 |   }\n163 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:61:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n59 | \n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n63 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:65:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n63 |   }\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n67 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:69:15: error: invalid redeclaration of 'notImplemented(reason:)'\n67 |   }\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n71 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:62:13: error: type 'CoreSecurityError' has no member 'general'\n60 |   \n61 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n62 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n63 |   }\n64 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:66:13: error: type 'CoreSecurityError' has no member 'general'\n64 |   \n65 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n66 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n67 |   }\n68 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProtocolError.swift:70:13: error: type 'CoreSecurityError' has no member 'general'\n68 |   \n69 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n70 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n71 |   }\n72 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1009:15: error: cannot find type 'createPrivacyMetadata' in scope\n1007 |   public func processSecurityOperation(\n1008 |     operation: SecurityOperation,\n1009 |     metadata: createPrivacyMetadata([String: String])\n     |               `- error: cannot find type 'createPrivacyMetadata' in scope\n1010 |   ) async -\u003e CoreSecurityTypes.SecurityResultDTO {\n1011 |     // Process the operation using actor-isolated state\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1144:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1142 | \n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n1146 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1148:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n1146 |   }\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n1150 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1152:15: error: invalid redeclaration of 'notImplemented(reason:)'\n1150 |   }\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n     |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n1154 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:62:27: error: cannot find type 'KeyStorageManager' in scope\n 60 |   init(\n 61 |     cryptoService: CryptoServiceProtocol,\n 62 |     keyManagementService: KeyStorageManager,\n    |                           `- error: cannot find type 'KeyStorageManager' in scope\n 63 |     logger: PrivacyAwareLoggingProtocol\n 64 |   ) {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:137:38: error: extra arguments at positions #1, #2 in call\n 135 |     )\n 136 | \n 137 |     signatureService=SignatureService(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:78:3: note: 'init(logger:)' declared here\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: 'init(logger:)' declared here\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:140:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 138 |       cryptoService: cryptoService,\n 139 |       keyManagementService: keyManager,\n 140 |       logger: logger\n     |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n 141 |     )\n 142 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:159:63: error: missing argument for parameter 'context' in call\n 157 |    */\n 158 |   public func initialize() async throws {\n 159 |     await logger.info(\"Initializing security provider service\")\n     |                                                               `- error: missing argument for parameter 'context' in call\n 160 | \n 161 |     // Log with secure logger for enhanced privacy awareness\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:182:75: error: missing argument for parameter 'context' in call\n 180 |     }\n 181 | \n 182 |     await logger.info(\"Security provider service initialized successfully\")\n     |                                                                           `- error: missing argument for parameter 'context' in call\n 183 | \n 184 |     // Log successful initialisation with secure logger\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:235:33: error: missing arguments for parameters 'mode', 'padding' in call\n 233 |       dataIdentifier: dataIdentifier,\n 234 |       keyIdentifier: keyIdentifier,\n 235 |       options: EncryptionOptions(algorithm: .aes256CBC)\n     |                                 `- error: missing arguments for parameters 'mode', 'padding' in call\n 236 |     )\n 237 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:105:10: note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n103 |   public let additionalAuthenticatedData: [UInt8]? // For AEAD modes like GCM\n104 | \n105 |   public init(\n    |          `- note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n106 |     algorithm: EncryptionAlgorithm,\n107 |     mode: EncryptionMode,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:248:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 246 |           return encryptedData\n 247 |         } else {\n 248 |           throw SecurityProtocolError.inputError(\"Failed to retrieve encrypted data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 249 |         }\n 250 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:271:33: error: missing arguments for parameters 'mode', 'padding' in call\n 269 |       encryptedDataIdentifier: encryptedDataIdentifier,\n 270 |       keyIdentifier: keyIdentifier,\n 271 |       options: DecryptionOptions(algorithm: .aes256CBC)\n     |                                 `- error: missing arguments for parameters 'mode', 'padding' in call\n 272 |     )\n 273 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:105:10: note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n103 |   public let additionalAuthenticatedData: [UInt8]? // For AEAD modes like GCM\n104 | \n105 |   public init(\n    |          `- note: 'init(algorithm:mode:padding:iv:additionalAuthenticatedData:)' declared here\n106 |     algorithm: EncryptionAlgorithm,\n107 |     mode: EncryptionMode,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:284:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 282 |           return decryptedData\n 283 |         } else {\n 284 |           throw SecurityProtocolError.inputError(\"Failed to retrieve decrypted data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 285 |         }\n 286 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:314:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 312 |           return signatureData\n 313 |         } else {\n 314 |           throw SecurityProtocolError.inputError(\"Failed to retrieve signature data\")\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 315 |         }\n 316 |       case let .failure(error):\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:368:68: error: cannot find 'createPrivacyMetadata' in scope\n 366 |     // Check if a key identifier is provided to load from key manager\n 367 |     if let keyID=config.options?.metadata?[\"keyIdentifier\"] {\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n     |                                                                    `- error: cannot find 'createPrivacyMetadata' in scope\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:370:9: error: missing argument for parameter 'source' in call\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n     |         `- error: missing argument for parameter 'source' in call\n 371 | \n 372 |       let result=await keyManager.retrieveKey(withIdentifier: keyID)\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:368:106: error: extra arguments at positions #2, #3 in call\n 366 |     // Check if a key identifier is provided to load from key manager\n 367 |     if let keyID=config.options?.metadata?[\"keyIdentifier\"] {\n 368 |       await logger.debug(\"Retrieving key for operation\", metadata: createPrivacyMetadata([\"operation\": \"\\(operation.rawValue, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n     |                                                                                                          `- error: extra arguments at positions #2, #3 in call\n 369 |         \"keyIdentifier\": keyID\n 370 |       ]))\n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:377:39: error: type 'SecurityProtocolError' has no member 'inputError'\n 375 |           return key\n 376 |         case let .failure(error):\n 377 |           throw SecurityProtocolError.inputError(\n     |                                       `- error: type 'SecurityProtocolError' has no member 'inputError'\n 378 |             \"Failed to retrieve key with identifier \\(keyID): \\(error.localizedDescription)\"\n 379 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:408:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 406 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 407 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n     |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:409:82: error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 407 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n     |                                                                                  `- error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n 411 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:410:80: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 411 |       ]\n 412 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:410:94: error: cannot convert value of type 'Bool' to expected argument type 'String'\n 408 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 409 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 410 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                              `- error: cannot convert value of type 'Bool' to expected argument type 'String'\n 411 |       ]\n 412 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:431:86: error: value of type 'SecurityResultDTO' has no member 'data'\n 429 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 430 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 431 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n     |                                                                                      `- error: value of type 'SecurityResultDTO' has no member 'data'\n 432 |         ]\n 433 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:430:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 428 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 429 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 430 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 431 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n 432 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:449:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 447 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 448 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 449 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 450 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 451 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:481:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 479 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 480 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n     |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:482:82: error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 480 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n     |                                                                                  `- error: value of type 'SecurityConfigDTO' has no member 'inputData'\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n 484 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:483:80: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n 484 |       ]\n 485 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:483:94: error: cannot convert value of type 'Bool' to expected argument type 'String'\n 481 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n 482 |         \"dataSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.inputData?.count ?? 0), privacyLevel: .public),\n 483 |         \"hasKey\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyIdentifier != nil), privacyLevel: .public)\n     |                                                                                              `- error: cannot convert value of type 'Bool' to expected argument type 'String'\n 484 |       ]\n 485 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:504:86: error: value of type 'SecurityResultDTO' has no member 'data'\n 502 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 503 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 504 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n     |                                                                                      `- error: value of type 'SecurityResultDTO' has no member 'data'\n 505 |         ]\n 506 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:503:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 501 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 502 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 503 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 504 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(result.data?.count ?? 0), privacyLevel: .public)\n 505 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:522:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 520 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 521 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 522 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 523 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 524 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:547:49: error: cannot find 'createPrivacyMetadata' in scope\n 545 |     // Log operation with standard logger\n 546 |     await logger.info(\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n     |                                                 `- error: cannot find 'createPrivacyMetadata' in scope\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:549:15: error: extra argument 'source' in call\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n     |               `- error: extra argument 'source' in call\n 550 | \n 551 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:547:90: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 545 |     // Log operation with standard logger\n 546 |     await logger.info(\n 547 |       \"Generating cryptographic key\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue], source: \"SecurityImplementation\"),\n     |                                                                                          `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 548 |       source: \"CoreSecurityProvider\"\n 549 |     , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:560:81: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 558 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 559 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 560 |         \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public),\n     |                                                                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 561 |         \"keySize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keySize), privacyLevel: .public)\n 562 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:561:81: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 559 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n 560 |         \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public),\n 561 |         \"keySize\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keySize), privacyLevel: .public)\n     |                                                                                 `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 562 |       ]\n 563 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:567:39: error: value of type 'any KeyManagementProtocol' has no member 'generateKey'\n 565 |     do {\n 566 |       // Process the request through the key management service\n 567 |       let result=try await keyManager.generateKey(\n     |                                       `- error: value of type 'any KeyManagementProtocol' has no member 'generateKey'\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:568:22: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 566 |       // Process the request through the key management service\n 567 |       let result=try await keyManager.generateKey(\n 568 |         type: config.keyType,\n     |                      `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 569 |         size: config.keySize,\n 570 |         metadata: config.metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:569:22: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 567 |       let result=try await keyManager.generateKey(\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n     |                      `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 570 |         metadata: config.metadata\n 571 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:570:26: error: value of type 'SecurityConfigDTO' has no member 'metadata'\n 568 |         type: config.keyType,\n 569 |         size: config.keySize,\n 570 |         metadata: config.metadata\n     |                          `- error: value of type 'SecurityConfigDTO' has no member 'metadata'\n 571 |       )\n 572 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:19: error: cannot find 'createPrivacyMetadata' in scope\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                   `- error: cannot find 'createPrivacyMetadata' in scope\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:60: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                                                            `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:580:103: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n     |                                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n 581 |       )\n 582 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:21: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                     `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:38: error: extra arguments at positions #1, #2 in call\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                                      `- error: extra arguments at positions #1, #2 in call\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:577:38: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n 575 | \n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n     |                                      `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n 578 |         status: .success,\n 579 |         data: Data(result.identifier.utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:578:18: error: cannot infer contextual base in reference to member 'success'\n 576 |       // Create result data\n 577 |       let resultDTO=SecurityResultDTO(\n 578 |         status: .success,\n     |                  `- error: cannot infer contextual base in reference to member 'success'\n 579 |         data: Data(result.identifier.utf8),\n 580 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keySize\": String(config.keySize)])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:592:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 590 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 591 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 592 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 593 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n 594 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:593:83: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 591 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n 592 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n 593 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n     |                                                                                   `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 594 |         ]\n 595 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:599:60: error: cannot find 'createPrivacyMetadata' in scope\n 597 |       // Log completion\n 598 |       await logger.info(\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n     |                                                            `- error: cannot find 'createPrivacyMetadata' in scope\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:601:17: error: extra argument 'source' in call\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n     |                 `- error: extra argument 'source' in call\n 602 | \n 603 |       return resultDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:599:101: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 597 |       // Log completion\n 598 |       await logger.info(\n 599 |         \"Key generation completed successfully\", metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"keyId\": result.identifier], source: \"SecurityImplementation\"),\n     |                                                                                                     `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 600 |         source: \"CoreSecurityProvider\"\n 601 |       , source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:617:72: error: type 'PrivacyMetadataValue' has no member 'int'\n 615 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n 616 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n 617 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n     |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n 618 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 619 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:620:83: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 618 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n 619 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public),\n 620 |           \"keyType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.keyType.rawValue), privacyLevel: .public)\n     |                                                                                   `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 621 |         ]\n 622 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:627:19: error: cannot find 'createPrivacyMetadata' in scope\n 625 |       await logger.error(\n 626 |         \"Key generation failed: \\(error.localizedDescription)\",\n 627 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"error\": error.localizedDescription]),\n     |                   `- error: cannot find 'createPrivacyMetadata' in scope\n 628 |         source: \"CoreSecurityProvider\"\n 629 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:627:60: error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 625 |       await logger.error(\n 626 |         \"Key generation failed: \\(error.localizedDescription)\",\n 627 |         metadata: createPrivacyMetadata([\"keyType\": config.keyType.rawValue, \"error\": error.localizedDescription]),\n     |                                                            `- error: value of type 'SecurityConfigDTO' has no member 'keyType'\n 628 |         source: \"CoreSecurityProvider\"\n 629 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:644:5: warning: no calls to throwing functions occur within 'try' expression\n 642 |    */\n 643 |   public func sign(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 644 |     try await signatureService.sign(config: config)\n     |     `- warning: no calls to throwing functions occur within 'try' expression\n 645 |   }\n 646 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:656:5: warning: no calls to throwing functions occur within 'try' expression\n 654 |    */\n 655 |   public func verify(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 656 |     try await signatureService.verify(config: config)\n     |     `- warning: no calls to throwing functions occur within 'try' expression\n 657 |   }\n 658 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:668:30: error: value of type 'SecureStorageService' has no member 'store'\n 666 |    */\n 667 |   public func store(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 668 |     try await storageService.store(config: config)\n     |                              `- error: value of type 'SecureStorageService' has no member 'store'\n 669 |   }\n 670 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:680:30: error: value of type 'SecureStorageService' has no member 'retrieve'\n 678 |    */\n 679 |   public func retrieve(config: SecurityConfigDTO) async throws -\u003e SecurityResultDTO {\n 680 |     try await storageService.retrieve(config: config)\n     |                              `- error: value of type 'SecureStorageService' has no member 'retrieve'\n 681 |   }\n 682 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:693:69: error: cannot find 'createPrivacyMetadata' in scope\n 691 |     let operationID=UUID().uuidString\n 692 | \n 693 |     await logger.debug(\"Starting secure store operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                     `- error: cannot find 'createPrivacyMetadata' in scope\n 694 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 695 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:702:27: error: type 'SecurityError' has no member 'invalidInput'\n 700 |       let inputData=Data(base64Encoded: dataString)\n 701 |     else {\n 702 |       throw SecurityError.invalidInput(\"Missing or invalid input data for secure storage\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 703 |     }\n 704 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:714:27: error: type 'SecurityError' has no member 'internalError'\n 712 |     // Then store the encrypted data using the key manager\n 713 |     guard let encryptedData=encryptionResult.resultData else {\n 714 |       throw SecurityError.internalError(\"Encryption successful but no encrypted data returned\")\n     |                           `- error: type 'SecurityError' has no member 'internalError'\n 715 |     }\n 716 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:718:50: error: extra arguments at positions #2, #3 in call\n 716 | \n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n     |                                                  `- error: extra arguments at positions #2, #3 in call\n 719 |       identifier: keyIdentifier,\n 720 |       keyData: encryptedData,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:20:8: note: 'storeKey(_:withIdentifier:)' declared here\n18 |   ///   - identifier: A string identifier for the key.\n19 |   /// - Returns: Success or an error.\n20 |   func storeKey(_ key: [UInt8], withIdentifier identifier: String) async\n   |        `- note: 'storeKey(_:withIdentifier:)' declared here\n21 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n22 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:719:32: error: missing argument for parameter 'withIdentifier' in call\n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n 719 |       identifier: keyIdentifier,\n     |                                `- error: missing argument for parameter 'withIdentifier' in call\n 720 |       keyData: encryptedData,\n 721 |       metadata: config.options?.metadata ?? [:]\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:20:8: note: 'storeKey(_:withIdentifier:)' declared here\n18 |   ///   - identifier: A string identifier for the key.\n19 |   /// - Returns: Success or an error.\n20 |   func storeKey(_ key: [UInt8], withIdentifier identifier: String) async\n   |        `- note: 'storeKey(_:withIdentifier:)' declared here\n21 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n22 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:719:19: error: cannot convert value of type 'String' to expected argument type '[UInt8]'\n 717 |     let keyIdentifier=UUID().uuidString\n 718 |     let storeResult=try await keyManager.storeKey(\n 719 |       identifier: keyIdentifier,\n     |                   `- error: cannot convert value of type 'String' to expected argument type '[UInt8]'\n 720 |       keyData: encryptedData,\n 721 |       metadata: config.options?.metadata ?? [:]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:726:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 724 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 725 | \n 726 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 727 |       successful: storeResult.successful,\n 728 |       resultData: keyIdentifier.data(using: .utf8),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:745:72: error: cannot find 'createPrivacyMetadata' in scope\n 743 |     let operationID=UUID().uuidString\n 744 | \n 745 |     await logger.debug(\"Starting secure retrieve operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n 746 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 747 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:751:27: error: type 'SecurityError' has no member 'invalidInput'\n 749 |     // Extract required parameters from configuration\n 750 |     guard let keyIdentifier=config.options?.metadata?[\"key_identifier\"] else {\n 751 |       throw SecurityError.invalidInput(\"Missing key identifier for secure retrieval\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 752 |     }\n 753 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:755:45: error: value of type 'any KeyManagementProtocol' has no member 'getKey'\n 753 | \n 754 |     // Retrieve the encrypted data using the key manager\n 755 |     let retrieveResult=try await keyManager.getKey(\n     |                                             `- error: value of type 'any KeyManagementProtocol' has no member 'getKey'\n 756 |       identifier: keyIdentifier,\n 757 |       metadata: config.options?.metadata ?? [:]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:762:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 760 |     if !retrieveResult.successful || retrieveResult.keyData == nil {\n 761 |       let errorDetails=retrieveResult.errorDetails ?? \"Failed to retrieve data\"\n 762 |       return SecurityResultDTO(\n     |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 763 |         successful: false,\n 764 |         resultData: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:780:27: error: type 'SecurityError' has no member 'internalError'\n 778 | \n 779 |     guard let keyData=retrieveResult.keyData else {\n 780 |       throw SecurityError.internalError(\"Key data missing after successful retrieval\")\n     |                           `- error: type 'SecurityError' has no member 'internalError'\n 781 |     }\n 782 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:808:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 806 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 807 | \n 808 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 809 |       successful: decryptResult.successful,\n 810 |       resultData: decryptResult.resultData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:827:70: error: cannot find 'createPrivacyMetadata' in scope\n 825 |     let operationID=UUID().uuidString\n 826 | \n 827 |     await logger.debug(\"Starting secure delete operation\", metadata: createPrivacyMetadata([\"operation_id\": operationID\n     |                                                                      `- error: cannot find 'createPrivacyMetadata' in scope\n 828 |     ], source: \"SecurityImplementation\"), source: \"SecurityImplementation\")\n 829 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:832:27: error: type 'SecurityError' has no member 'invalidInput'\n 830 |     // Extract required parameters from configuration\n 831 |     guard let keyIdentifier=config.options?.metadata?[\"key_identifier\"] else {\n 832 |       throw SecurityError.invalidInput(\"Missing key identifier for secure deletion\")\n     |                           `- error: type 'SecurityError' has no member 'invalidInput'\n 833 |     }\n 834 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:836:52: error: extra arguments at positions #1, #2 in call\n 834 | \n 835 |     // Delete the key using the key manager\n 836 |     let deleteResult=try await keyManager.deleteKey(\n     |                                                    `- error: extra arguments at positions #1, #2 in call\n 837 |       identifier: keyIdentifier,\n 838 |       metadata: config.options?.metadata ?? [:]\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:26:8: note: 'deleteKey(withIdentifier:)' declared here\n24 |   /// - Parameter identifier: A string identifying the key to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteKey(withIdentifier identifier: String) async\n   |        `- note: 'deleteKey(withIdentifier:)' declared here\n27 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n28 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:837:7: error: missing argument for parameter 'withIdentifier' in call\n 835 |     // Delete the key using the key manager\n 836 |     let deleteResult=try await keyManager.deleteKey(\n 837 |       identifier: keyIdentifier,\n     |       `- error: missing argument for parameter 'withIdentifier' in call\n 838 |       metadata: config.options?.metadata ?? [:]\n 839 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/KeyManagementProtocol.swift:26:8: note: 'deleteKey(withIdentifier:)' declared here\n24 |   /// - Parameter identifier: A string identifying the key to delete.\n25 |   /// - Returns: Success or an error.\n26 |   func deleteKey(withIdentifier identifier: String) async\n   |        `- note: 'deleteKey(withIdentifier:)' declared here\n27 |     -\u003e Result\u003cVoid, SecurityProtocolError\u003e\n28 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:843:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 841 |     let executionTime=Date().timeIntervalSince(startTime) * 1000\n 842 | \n 843 |     return SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 844 |       successful: deleteResult.successful,\n 845 |       resultData: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:867:86: error: cannot find 'createPrivacyMetadata' in scope\n 865 |     let operationID=UUID().uuidString\n 866 | \n 867 |     await logger.debug(\"Starting secure operation: \\(operation.rawValue)\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n     |                                                                                      `- error: cannot find 'createPrivacyMetadata' in scope\n 868 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 869 |     ]))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:869:7: error: missing argument for parameter 'source' in call\n 867 |     await logger.debug(\"Starting secure operation: \\(operation.rawValue)\", metadata: createPrivacyMetadata([\"operation_id\": operationID,\n 868 |       \"algorithm\": config.encryptionAlgorithm.rawValue\n 869 |     ]))\n     |       `- error: missing argument for parameter 'source' in call\n 870 | \n 871 |     let result: CoreSecurityTypes.SecurityResultDTO=switch operation {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:877:19: error: cannot find 'hash' in scope\n 875 |         try await decrypt(config: config)\n 876 |       case .hashing:\n 877 |         try await hash(config: config)\n     |                   `- error: cannot find 'hash' in scope\n 878 |       case .keyGeneration:\n 879 |         try await generateKey(config: config)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:881:19: error: cannot find 'rotateKey' in scope\n 879 |         try await generateKey(config: config)\n 880 |       case .keyRotation:\n 881 |         try await rotateKey(config: config)\n     |                   `- error: cannot find 'rotateKey' in scope\n 882 |       case .keyDeletion:\n 883 |         try await secureDelete(config: config)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:872:13: error: type 'SecurityOperation' has no member 'encryption'\n 870 | \n 871 |     let result: CoreSecurityTypes.SecurityResultDTO=switch operation {\n 872 |       case .encryption:\n     |             `- error: type 'SecurityOperation' has no member 'encryption'\n 873 |         try await encrypt(config: config)\n 874 |       case .decryption:\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:897:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 895 |     updatedMetadata[\"operation_id\"]=operationID\n 896 | \n 897 |     return CoreSecurityTypes.SecurityResultDTO(\n     |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n 898 |       successful: result.successful,\n 899 |       resultData: result.resultData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:924:8: error: type 'SigningAlgorithm' has no member 'hmacSHA256'\n 922 |       .ed25519 // Hardware accelerated where available\n 923 |     } else {\n 924 |       .hmacSHA256 // Software implementation\n     |        `- error: type 'SigningAlgorithm' has no member 'hmacSHA256'\n 925 |     }\n 926 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:928:36: error: no type named 'HashingAlgorithm' in module 'CoreSecurityTypes'\n 926 | \n 927 |     // Determine the hashing algorithm\n 928 |     let hashing: CoreSecurityTypes.HashingAlgorithm=if options.useStrongerHashing {\n     |                                    `- error: no type named 'HashingAlgorithm' in module 'CoreSecurityTypes'\n 929 |       .sha512 // Stronger but slower\n 930 |     } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:935:25: error: cannot find 'SecurityOptions' in scope\n 933 | \n 934 |     // Create the security options with selected algorithms\n 935 |     let securityOptions=SecurityOptions(\n     |                         `- error: cannot find 'SecurityOptions' in scope\n 936 |       encryption: encryption,\n 937 |       decryption: encryption,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:944:29: error: extra arguments at positions #2, #3 in call\n 942 | \n 943 |     // Create the configuration DTO with the options\n 944 |     return SecurityConfigDTO(\n     |                             `- error: extra arguments at positions #2, #3 in call\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityConfigDTO.swift:31:10: note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n29 |      - options: Optional configuration options\n30 |    */\n31 |   public init(\n   |          `- note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n32 |     encryptionAlgorithm: EncryptionAlgorithm,\n33 |     hashAlgorithm: HashAlgorithm,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:944:29: error: missing arguments for parameters 'encryptionAlgorithm', 'hashAlgorithm', 'providerType' in call\n 942 | \n 943 |     // Create the configuration DTO with the options\n 944 |     return SecurityConfigDTO(\n     |                             `- error: missing arguments for parameters 'encryptionAlgorithm', 'hashAlgorithm', 'providerType' in call\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityConfigDTO.swift:31:10: note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n29 |      - options: Optional configuration options\n30 |    */\n31 |   public init(\n   |          `- note: 'init(encryptionAlgorithm:hashAlgorithm:providerType:options:)' declared here\n32 |     encryptionAlgorithm: EncryptionAlgorithm,\n33 |     hashAlgorithm: HashAlgorithm,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:946:21: error: value of type 'SecurityConfigOptions' has no member 'data'\n 944 |     return SecurityConfigDTO(\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n     |                     `- error: value of type 'SecurityConfigOptions' has no member 'data'\n 947 |       outputFormat: options.outputFormat ?? .binary\n 948 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:947:29: error: value of type 'SecurityConfigOptions' has no member 'outputFormat'\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n 947 |       outputFormat: options.outputFormat ?? .binary\n     |                             `- error: value of type 'SecurityConfigOptions' has no member 'outputFormat'\n 948 |     )\n 949 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:947:46: error: cannot infer contextual base in reference to member 'binary'\n 945 |       options: securityOptions,\n 946 |       data: options.data,\n 947 |       outputFormat: options.outputFormat ?? .binary\n     |                                              `- error: cannot infer contextual base in reference to member 'binary'\n 948 |     )\n 949 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:963:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 961 | \n 962 |     // Map known error types to appropriate security errors\n 963 |     if let nsError=error as? NSError {\n     |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 964 |       switch nsError.domain {\n 965 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:966:19: error: type 'SecurityProtocolError' has no member 'networkError'\n 964 |       switch nsError.domain {\n 965 |         case NSURLErrorDomain:\n 966 |           return .networkError(\n     |                   `- error: type 'SecurityProtocolError' has no member 'networkError'\n 967 |             \"Network error during security operation: \\(nsError.localizedDescription)\"\n 968 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:970:19: error: type 'SecurityProtocolError' has no member 'systemError'\n 968 |           )\n 969 |         case NSOSStatusErrorDomain:\n 970 |           return .systemError(\n     |                   `- error: type 'SecurityProtocolError' has no member 'systemError'\n 971 |             \"System error during security operation: \\(nsError.localizedDescription)\"\n 972 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:979:13: error: type 'SecurityProtocolError' has no member 'generalError'\n 977 | \n 978 |     // Default error mapping\n 979 |     return .generalError(\"Security operation failed: \\(error.localizedDescription)\")\n     |             `- error: type 'SecurityProtocolError' has no member 'generalError'\n 980 |   }\n 981 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:32: error: extra argument 'errorCode' in call\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                `- error: extra argument 'errorCode' in call\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:36: error: missing argument for parameter 'executionTimeMs' in call\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                    `- error: missing argument for parameter 'executionTimeMs' in call\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/DTOs/SecurityResultDTO.swift:55:22: note: 'failure(errorDetails:executionTimeMs:metadata:)' declared here\n53 |      - metadata: Optional additional metadata\n54 |    */\n55 |   public static func failure(\n   |                      `- note: 'failure(errorDetails:executionTimeMs:metadata:)' declared here\n56 |     errorDetails: String,\n57 |     executionTimeMs: Double,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:991:32: error: value of type 'SecurityProtocolError' has no member 'code'\n 989 |     let securityError=mapToSecurityError(error)\n 990 |     return SecurityResultDTO.failure(\n 991 |       errorCode: securityError.code,\n     |                                `- error: value of type 'SecurityProtocolError' has no member 'code'\n 992 |       errorDetails: securityError.localizedDescription\n 993 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1031:21: error: pattern with associated values does not match enum case 'encrypt'\n1029 |       let result: SecurityResultDTO=try await {\n1030 |         switch operation {\n1031 |           case let .encrypt(data, key, algorithm):\n     |                     |- error: pattern with associated values does not match enum case 'encrypt'\n     |                     `- note: remove associated values to make the pattern match\n1032 |             let config=SecurityConfigDTO(\n1033 |               operationType: .encrypt,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:49: error: extra arguments at positions #1, #2 in call\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |                                                 `- error: extra arguments at positions #1, #2 in call\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1132:49: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n1130 | \n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n     |                                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n1133 |         status: .failure,\n1134 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1133:18: error: cannot infer contextual base in reference to member 'failure'\n1131 |       // Return failure result\n1132 |       return CoreSecurityTypes.SecurityResultDTO(\n1133 |         status: .failure,\n     |                  `- error: cannot infer contextual base in reference to member 'failure'\n1134 |         error: error.localizedDescription,\n1135 |         metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1145:13: error: type 'CoreSecurityError' has no member 'general'\n1143 |   \n1144 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n1145 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1146 |   }\n1147 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1149:13: error: type 'CoreSecurityError' has no member 'general'\n1147 |   \n1148 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n1149 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1150 |   }\n1151 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/SecurityProviderImpl.swift:1153:13: error: type 'CoreSecurityError' has no member 'general'\n1151 |   \n1152 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n1153 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n     |             `- error: type 'CoreSecurityError' has no member 'general'\n1154 |   }\n1155 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:605:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n603 | \n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n607 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:609:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n607 |   }\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n611 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:613:15: error: invalid redeclaration of 'notImplemented(reason:)'\n611 |   }\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n615 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:123:121: error: extra argument 'source' in call\n121 |     )\n122 | \n123 |     await logger.info(\"Starting encryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                         `- error: extra argument 'source' in call\n124 | \n125 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:123:66: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n121 |     )\n122 | \n123 |     await logger.info(\"Starting encryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                  `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n124 | \n125 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:134:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n132 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n133 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n134 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n    |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n135 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n136 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:135:90: error: value of type 'SecurityConfigOptions?' has no subscripts\n133 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n134 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n135 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n    |                                                                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n136 |       ]\n137 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:142:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n140 |       // Extract required parameters from configuration\n141 |       guard\n142 |         let inputDataString=config.options[\"data\"],\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n143 |         let inputData=Data(base64Encoded: inputDataString)\n144 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:171:33: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n169 |       // Choose encryption key\n170 |       let keyIdentifier: String\n171 |       if let configKeyID=config.keyIdentifier {\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n172 |         keyIdentifier=configKeyID\n173 |       } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:210:19: error: cannot find 'createPrivacyMetadata' in scope\n208 |         status: .success,\n209 |         data: encryptedData,\n210 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n211 |           \"operationID\": operationID,\n212 |           \"durationMs\": String(Int(duration * 1000))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:35: error: extra arguments at positions #1, #2 in call\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:207:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n205 | \n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n208 |         status: .success,\n209 |         data: encryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:208:18: error: cannot infer contextual base in reference to member 'success'\n206 |       // Create result object\n207 |       let result=SecurityResultDTO(\n208 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n209 |         data: encryptedData,\n210 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:225:72: error: type 'PrivacyMetadataValue' has no member 'int'\n223 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n224 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n225 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n226 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(encryptedData.count), privacyLevel: .public)\n227 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:226:72: error: type 'PrivacyMetadataValue' has no member 'int'\n224 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n225 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n226 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(encryptedData.count), privacyLevel: .public)\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n227 |         ]\n228 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:232:56: error: cannot find 'createPrivacyMetadata' in scope\n230 |       // Log success\n231 |       await logger.info(\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n234 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:234:11: error: missing argument for parameter 'source' in call\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n234 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n235 |       )\n236 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:233:35: error: extra arguments at positions #2, #3 in call\n231 |       await logger.info(\n232 |         \"Encryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n233 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n    |                                   `- error: extra arguments at positions #2, #3 in call\n234 |         ])\n235 |       )\n\nSwift.Int.init:2:8: note: 'init(_:)' declared here\n1 | struct Int {\n2 | public init(_ source: Double)}\n  |        `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:255:72: error: type 'PrivacyMetadataValue' has no member 'int'\n253 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n254 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n255 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n256 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n257 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:264:19: error: cannot find 'createPrivacyMetadata' in scope\n262 |       await logger.error(\n263 |         \"Encryption failed: \\(error.localizedDescription)\",\n264 |         metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n265 |           \"durationMs\": String(Int(duration * 1000)),\n266 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:267:11: error: missing argument for parameter 'source' in call\n265 |           \"durationMs\": String(Int(duration * 1000)),\n266 |           \"error\": error.localizedDescription\n267 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n268 |       )\n269 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:274:19: error: cannot find 'createPrivacyMetadata' in scope\n272 |         status: .failure,\n273 |         data: nil,\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n275 |           \"operationID\": operationID,\n276 |           \"durationMs\": String(Int(duration * 1000)),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:35: error: extra arguments at positions #1, #2 in call\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:271:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n269 | \n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n272 |         status: .failure,\n273 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:272:18: error: cannot infer contextual base in reference to member 'failure'\n270 |       // Create failure result\n271 |       let result=SecurityResultDTO(\n272 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n273 |         data: nil,\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:273:15: error: 'nil' requires a contextual type\n271 |       let result=SecurityResultDTO(\n272 |         status: .failure,\n273 |         data: nil,\n    |               `- error: 'nil' requires a contextual type\n274 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n275 |           \"operationID\": operationID,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:242:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n240 | \n241 |       return result\n242 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n243 |       // Calculate duration for metrics\n244 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:303:121: error: extra argument 'source' in call\n301 |     )\n302 | \n303 |     await logger.info(\"Starting decryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                         `- error: extra argument 'source' in call\n304 | \n305 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:303:66: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n301 |     )\n302 | \n303 |     await logger.info(\"Starting decryption operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                  `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n304 | \n305 |     // Log with secure logger for enhanced privacy awareness\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:314:87: error: value of type 'SecurityConfigDTO' has no member 'operationType'\n312 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n313 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n314 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n    |                                                                                       `- error: value of type 'SecurityConfigDTO' has no member 'operationType'\n315 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n316 |       ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:315:90: error: value of type 'SecurityConfigOptions?' has no subscripts\n313 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"start\"), privacyLevel: .public),\n314 |         \"operationType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.operationType.rawValue), privacyLevel: .public),\n315 |         \"algorithm\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(config.options[\"algorithm\"] ?? \"unknown\"), privacyLevel: .public)\n    |                                                                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n316 |       ]\n317 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:322:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n320 |       // Extract required parameters from configuration\n321 |       guard\n322 |         let inputDataString=config.options[\"data\"],\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n323 |         let inputData=Data(base64Encoded: inputDataString)\n324 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:351:33: error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n349 |       // Choose decryption key\n350 |       let keyIdentifier: String\n351 |       if let configKeyID=config.keyIdentifier {\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'keyIdentifier'\n352 |         keyIdentifier=configKeyID\n353 |       } else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:390:19: error: cannot find 'createPrivacyMetadata' in scope\n388 |         status: .success,\n389 |         data: decryptedData,\n390 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n391 |           \"operationID\": operationID,\n392 |           \"durationMs\": String(Int(duration * 1000))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:35: error: extra arguments at positions #1, #2 in call\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:387:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n385 | \n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n388 |         status: .success,\n389 |         data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:388:18: error: cannot infer contextual base in reference to member 'success'\n386 |       // Create result object\n387 |       let result=SecurityResultDTO(\n388 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n389 |         data: decryptedData,\n390 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:405:72: error: type 'PrivacyMetadataValue' has no member 'int'\n403 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n404 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n405 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n406 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(decryptedData.count), privacyLevel: .public)\n407 |         ]\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:406:72: error: type 'PrivacyMetadataValue' has no member 'int'\n404 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"complete\"), privacyLevel: .public),\n405 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n406 |           \"resultSize\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(decryptedData.count), privacyLevel: .public)\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n407 |         ]\n408 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:412:56: error: cannot find 'createPrivacyMetadata' in scope\n410 |       // Log success\n411 |       await logger.info(\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                                                        `- error: cannot find 'createPrivacyMetadata' in scope\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n414 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:414:11: error: missing argument for parameter 'source' in call\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n414 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n415 |       )\n416 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:413:35: error: extra arguments at positions #2, #3 in call\n411 |       await logger.info(\n412 |         \"Decryption completed successfully\", metadata: createPrivacyMetadata([\"operationID\": operationID,\n413 |           \"durationMs\": String(Int(duration * 1000, source: \"SecurityImplementation\", source: \"SecurityImplementation\"))\n    |                                   `- error: extra arguments at positions #2, #3 in call\n414 |         ])\n415 |       )\n\nSwift.Int.init:2:8: note: 'init(_:)' declared here\n1 | struct Int {\n2 | public init(_ source: Double)}\n  |        `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:435:72: error: type 'PrivacyMetadataValue' has no member 'int'\n433 |           \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n434 |           \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(\"error\"), privacyLevel: .public),\n435 |           \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration * 1000)), privacyLevel: .public),\n    |                                                                        `- error: type 'PrivacyMetadataValue' has no member 'int'\n436 |           \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n437 |           \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(error.localizedDescription), privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:444:19: error: cannot find 'createPrivacyMetadata' in scope\n442 |       await logger.error(\n443 |         \"Decryption failed: \\(error.localizedDescription)\",\n444 |         metadata: createPrivacyMetadata([\"operationID\": operationID,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n445 |           \"durationMs\": String(Int(duration * 1000)),\n446 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:447:11: error: missing argument for parameter 'source' in call\n445 |           \"durationMs\": String(Int(duration * 1000)),\n446 |           \"error\": error.localizedDescription\n447 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n448 |       )\n449 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:454:19: error: cannot find 'createPrivacyMetadata' in scope\n452 |         status: .failure,\n453 |         data: nil,\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n455 |           \"operationID\": operationID,\n456 |           \"durationMs\": String(Int(duration * 1000)),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:35: error: extra arguments at positions #1, #2 in call\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:451:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n449 | \n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n452 |         status: .failure,\n453 |         data: nil,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:452:18: error: cannot infer contextual base in reference to member 'failure'\n450 |       // Create failure result\n451 |       let result=SecurityResultDTO(\n452 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n453 |         data: nil,\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:453:15: error: 'nil' requires a contextual type\n451 |       let result=SecurityResultDTO(\n452 |         status: .failure,\n453 |         data: nil,\n    |               `- error: 'nil' requires a contextual type\n454 |         metadata: createPrivacyMetadata([\"operation\": operation.rawValue,\n455 |           \"operationID\": operationID,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:422:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n420 | \n421 |       return result\n422 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n423 |       // Calculate duration for metrics\n424 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:494:52: error: extra arguments at positions #1, #2 in call\n492 | \n493 |       // Try the standard protocol method signature which returns a Result type\n494 |       let encryptResult=await cryptoService.encrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n495 | \n496 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:494:52: error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n492 | \n493 |       // Try the standard protocol method signature which returns a Result type\n494 |       let encryptResult=await cryptoService.encrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n495 | \n496 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:541:52: error: extra arguments at positions #1, #2 in call\n539 | \n540 |       // Try the standard protocol method signature which returns a Result type\n541 |       let decryptResult=await cryptoService.decrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n542 | \n543 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:541:52: error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n539 | \n540 |       // Try the standard protocol method signature which returns a Result type\n541 |       let decryptResult=await cryptoService.decrypt(data: dataArray, using: keyArray)\n    |                                                    `- error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n542 | \n543 |       // Handle the Result type\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:592:35: error: type 'SecurityProtocolError' has no member 'keyNotFound'\n590 |   func retrieve(withIdentifier identifier: String) throws -\u003e Data {\n591 |     guard let data=storage[identifier] else {\n592 |       throw SecurityProtocolError.keyNotFound\n    |                                   `- error: type 'SecurityProtocolError' has no member 'keyNotFound'\n593 |     }\n594 |     return data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:606:13: error: type 'CoreSecurityError' has no member 'general'\n604 |   \n605 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n606 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n607 |   }\n608 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:610:13: error: type 'CoreSecurityError' has no member 'general'\n608 |   \n609 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n610 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n611 |   }\n612 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/EncryptionService.swift:614:13: error: type 'CoreSecurityError' has no member 'general'\n612 |   \n613 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n614 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n615 |   }\n616 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:82:118: error: extra argument 'source' in call\n 80 |     )\n 81 | \n 82 |     await logger.info(\"Starting hashing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                      `- error: extra argument 'source' in call\n 83 | \n 84 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:82:63: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 80 |     )\n 81 | \n 82 |     await logger.info(\"Starting hashing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                               `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 83 | \n 84 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:87:38: error: value of type 'SecurityConfigOptions?' has no subscripts\n 85 |       // Extract required parameters from configuration\n 86 |       guard\n 87 |         let dataString=config.options[\"data\"],\n    |                                      `- error: value of type 'SecurityConfigOptions?' has no subscripts\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n 89 |       else {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:88:46: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n 86 |       guard\n 87 |         let dataString=config.options[\"data\"],\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n    |                                              `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n 89 |       else {\n 90 |         throw SecurityError.invalidInput(\"Missing or invalid input data for hashing\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:90:29: error: type 'SecurityError' has no member 'invalidInput'\n 88 |         let inputData=SendableCryptoMaterial.fromBase64(dataString)\n 89 |       else {\n 90 |         throw SecurityError.invalidInput(\"Missing or invalid input data for hashing\")\n    |                             `- error: type 'SecurityError' has no member 'invalidInput'\n 91 |       }\n 92 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:94:56: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 92 | \n 93 |       // Determine hash algorithm to use\n 94 |       let hashAlgorithm=HashAlgorithm(rawValue: config.algorithm) ?? HashAlgorithm.sha256\n    |                                                        `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 95 | \n 96 |       // Perform the hashing operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:97:50: error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n 95 | \n 96 |       // Perform the hashing operation\n 97 |       let hashResult=try await cryptoService.hash(inputData, algorithm: hashAlgorithm.rawValue)\n    |                                                  `- error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n 98 | \n 99 |       // Calculate duration for performance metrics\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:107:11: error: missing argument for parameter 'source' in call\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n107 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n108 |       )\n109 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:104:75: error: value of type 'LogMetadata' has no member 'merging'\n102 |       // Log successful operation\n103 |       await logger.info(\n104 |         \"Completed hashing operation successfully\", metadata: logMetadata.merging([\n    |                                                                           `- error: value of type 'LogMetadata' has no member 'merging'\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:105:25: error: extra arguments at positions #2, #3 in call\n103 |       await logger.info(\n104 |         \"Completed hashing operation successfully\", metadata: logMetadata.merging([\n105 |           \"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\",\n    |                         `- error: extra arguments at positions #2, #3 in call\n106 |           \"hashAlgorithm\": hashAlgorithm.rawValue\n107 |         ])\n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:31: error: extra arguments at positions #1, #2, #3, #4 in call\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2, #3, #4 in call\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:111:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n109 | \n110 |       // Return successful result\n111 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n112 |         success: true,\n113 |         processedData: hashResult,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:126:11: error: missing argument for parameter 'source' in call\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n125 |           \"error\": error.localizedDescription\n126 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n127 |       )\n128 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:123:107: error: value of type 'LogMetadata' has no member 'merging'\n121 | \n122 |       // Log the error\n123 |       await logger.error(\"Hashing operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n    |                                                                                                           `- error: value of type 'LogMetadata' has no member 'merging'\n124 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n125 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:31: error: extra arguments at positions #1, #2, #3, #4 in call\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2, #3, #4 in call\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:130:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n128 | \n129 |       // Return failed result\n130 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs', 'metadata' in call\n131 |         success: false,\n132 |         error: error.localizedDescription,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:118:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n116 |       )\n117 | \n118 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n119 |       // Calculate duration even for failed operations\n120 |       let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:163:122: error: extra argument 'source' in call\n161 |     ]\n162 | \n163 |     await logger.info(\"Starting direct hash operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                          `- error: extra argument 'source' in call\n164 | \n165 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:163:67: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n161 |     ]\n162 | \n163 |     await logger.info(\"Starting direct hash operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                   `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n164 | \n165 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:50: error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                  `- error: incorrect argument labels in call (have '_:algorithm:', expected 'dataIdentifier:options:')\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:51: error: cannot convert value of type 'SendableCryptoMaterial' to expected argument type 'String'\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                   `- error: cannot convert value of type 'SendableCryptoMaterial' to expected argument type 'String'\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:167:78: error: cannot convert value of type 'String' to expected argument type 'HashingOptions'\n165 |     do {\n166 |       // Perform the hashing operation\n167 |       let hashedData=try await cryptoService.hash(data, algorithm: algorithm.rawValue)\n    |                                                                              `- error: cannot convert value of type 'String' to expected argument type 'HashingOptions'\n168 | \n169 |       // Log successful operation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:170: error: missing argument for parameter 'source' in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                                                                                                          `- error: missing argument for parameter 'source' in call\n173 |       )\n174 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:66: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                  `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n173 |       )\n174 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:169: error: missing argument for parameter 'uniquingKeysWith' in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                                                                                                         `- error: missing argument for parameter 'uniquingKeysWith' in call\n173 |       )\n174 | \n\nSwift.Dictionary.merging:2:36: note: 'merging(_:uniquingKeysWith:)' declared here\n1 | generic struct Dictionary {\n2 | @inlinable public __consuming func merging(_ other: __owned [Key : Value], uniquingKeysWith combine: (Value, Value) throws -\u003e Value) rethrows -\u003e [Key : Value]}\n  |                                    `- note: 'merging(_:uniquingKeysWith:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:172:89: error: extra arguments at positions #2, #3 in call\n170 |       let duration=Date().timeIntervalSince(startTime)\n171 |       await logger.info(\n172 |         \"Completed direct hash operation\", metadata: logMetadata.merging([\"duration\": \"\\(duration, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\"])\n    |                                                                                         `- error: extra arguments at positions #2, #3 in call\n173 |       )\n174 | \n\nSwift.DefaultStringInterpolation.appendInterpolation:2:33: note: 'appendInterpolation' declared here\n1 | struct DefaultStringInterpolation {\n2 | @inlinable public mutating func appendInterpolation\u003cT\u003e(_ value: T) where T : CustomStringConvertible, T : TextOutputStreamable}\n  |                                 `- note: 'appendInterpolation' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:182:11: error: missing argument for parameter 'source' in call\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n182 |         ])\n    |           `- error: missing argument for parameter 'source' in call\n183 |       )\n184 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:179:111: error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n177 |       // Log error\n178 |       let duration=Date().timeIntervalSince(startTime)\n179 |       await logger.error(\"Direct hash operation failed: \\(error.localizedDescription)\", metadata: logMetadata.merging([\n    |                                                                                                               `- error: cannot convert value of type '[String : String]' to expected argument type 'PrivacyMetadata'\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:182:10: error: missing argument for parameter 'uniquingKeysWith' in call\n180 |           \"duration\": \"\\(duration, source: \\\"SecurityImplementation\\\")\",\n181 |           \"error\": error.localizedDescription\n182 |         ])\n    |          `- error: missing argument for parameter 'uniquingKeysWith' in call\n183 |       )\n184 | \n\nSwift.Dictionary.merging:2:36: note: 'merging(_:uniquingKeysWith:)' declared here\n1 | generic struct Dictionary {\n2 | @inlinable public __consuming func merging(_ other: __owned [Key : Value], uniquingKeysWith combine: (Value, Value) throws -\u003e Value) rethrows -\u003e [Key : Value]}\n  |                                    `- note: 'merging(_:uniquingKeysWith:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:205:13: error: type 'CoreSecurityError' has no member 'general'\n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n206 |   }\n207 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:209:13: error: type 'CoreSecurityError' has no member 'general'\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n210 |   }\n211 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/HashingService.swift:213:13: error: type 'CoreSecurityError' has no member 'general'\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n214 |   }\n215 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:264:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n262 | \n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n266 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:268:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n266 |   }\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n270 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:272:15: error: invalid redeclaration of 'notImplemented(reason:)'\n270 |   }\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n274 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:100:18: error: cannot convert value of type 'String' to expected argument type 'SecurityOperation'\n 98 |     let logMetadata=createOperationMetadata(\n 99 |       operationID: operationID,\n100 |       operation: operation,\n    |                  `- error: cannot convert value of type 'String' to expected argument type 'SecurityOperation'\n101 |       config: config\n102 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:104:125: error: extra argument 'source' in call\n102 |     )\n103 | \n104 |     await logger.info(\"Starting key generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                             `- error: extra argument 'source' in call\n105 | \n106 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:108:26: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n106 |     do {\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n    |                          `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n110 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:108:47: error: value of type 'SecurityConfigDTO' has no member 'keySize'\n106 |     do {\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n    |                                               `- error: value of type 'SecurityConfigDTO' has no member 'keySize'\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n110 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:109:28: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n    |                            `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n110 | \n111 |       // Use SendableCryptoMaterial instead of SecureBytes\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:109:63: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n107 |       // Extract key parameters from configuration\n108 |       let keySize=config.keySize \u003e 0 ? config.keySize : 256 // Default to 256 bits if not specified\n109 |       let algorithm=config.algorithm.isEmpty ? \"AES\" : config.algorithm // Default to AES\n    |                                                               `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n110 | \n111 |       // Use SendableCryptoMaterial instead of SecureBytes\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:114:13: error: cannot find 'secureRandomMaterial' in scope\n112 |       // In a production implementation, this would use a secure random generator\n113 |       let keyMaterial: SendableCryptoMaterial=if keySize \u003e 0 {\n114 |         try secureRandomMaterial(byteCount: keySize / 8)\n    |             `- error: cannot find 'secureRandomMaterial' in scope\n115 |       } else {\n116 |         SendableCryptoMaterial.zeros(count: 32) // Default to 256 bits (32 bytes)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:120:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n118 | \n119 |       // Store the key if an identifier is provided\n120 |       if let keyIdentifier=config.options[\"keyIdentifier\"] {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n121 |         let storageResult=await keyManager.secureStorage.storeMaterial(\n122 |           keyMaterial,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:121:44: error: value of type 'any KeyManagementProtocol' has no member 'secureStorage'\n119 |       // Store the key if an identifier is provided\n120 |       if let keyIdentifier=config.options[\"keyIdentifier\"] {\n121 |         let storageResult=await keyManager.secureStorage.storeMaterial(\n    |                                            `- error: value of type 'any KeyManagementProtocol' has no member 'secureStorage'\n122 |           keyMaterial,\n123 |           withIdentifier: keyIdentifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:126:31: error: type 'SecurityError' has no member 'keyStorage'\n124 |         )\n125 |         if case let .failure(error)=storageResult {\n126 |           throw SecurityError.keyStorage(error.description)\n    |                               `- error: type 'SecurityError' has no member 'keyStorage'\n127 |         }\n128 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:134:58: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n132 | \n133 |       // Create success metadata for logging\n134 |       let successMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                          `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n135 |         \"operationId\": operationID,\n136 |         \"operation\": operation,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:142:51: error: extra argument 'source' in call\n140 |       await logger.info(\n141 |         \"Key generation completed successfully\", metadata: successMetadata\n142 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                   `- error: extra argument 'source' in call\n143 | \n144 |       // Return successful result with the generated key metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:141:60: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n139 | \n140 |       await logger.info(\n141 |         \"Key generation completed successfully\", metadata: successMetadata\n    |                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n142 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n143 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:148:19: error: cannot find 'createPrivacyMetadata' in scope\n146 |         status: .success,\n147 |         data: keyMaterial,\n148 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n149 |           \"keySize\": \"\\(keySize)\",\n150 |           \"algorithm\": algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:31: error: extra arguments at positions #1, #2 in call\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:145:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n143 | \n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n146 |         status: .success,\n147 |         data: keyMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:146:18: error: cannot infer contextual base in reference to member 'success'\n144 |       // Return successful result with the generated key metadata\n145 |       return SecurityResultDTO(\n146 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n147 |         data: keyMaterial,\n148 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:158:56: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n156 | \n157 |       // Create failure metadata for logging\n158 |       let errorMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                        `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n159 |         \"operationId\": operationID,\n160 |         \"operation\": operation,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:165:105: error: missing argument for parameter 'source' in call\n163 |       ]\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                         `- error: missing argument for parameter 'source' in call\n166 |       , source: \\\"SecurityImplementation\\\")\n167 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:165:92: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n163 |       ]\n164 | \n165 |       await logger.error(\"Key generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n166 |       , source: \\\"SecurityImplementation\\\")\n167 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:192:52: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n190 | \n191 |     // Create metadata for logging\n192 |     let logMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                    `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n193 |       \"operationId\": operationID,\n194 |       \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:199:133: error: extra argument 'source' in call\n197 |     ]\n198 | \n199 |     await logger.info(\"Starting random data generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                                     `- error: extra argument 'source' in call\n200 | \n201 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:199:78: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n197 |     ]\n198 | \n199 |     await logger.info(\"Starting random data generation operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                              `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n200 | \n201 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:204:29: error: type 'SecurityError' has no member 'invalidInput'\n202 |       // Validate parameters\n203 |       if length \u003c= 0 {\n204 |         throw SecurityError.invalidInput(\"Invalid length for random data generation: \\(length)\")\n    |                             `- error: type 'SecurityError' has no member 'invalidInput'\n205 |       }\n206 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:209:30: error: cannot find 'secureRandomMaterial' in scope\n207 |       // Use SendableCryptoMaterial instead of SecureBytes\n208 |       // In a production implementation, this would use a secure random generator\n209 |       let randomMaterial=try secureRandomMaterial(byteCount: length)\n    |                              `- error: cannot find 'secureRandomMaterial' in scope\n210 | \n211 |       // Calculate duration for performance metrics\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:215:58: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n213 | \n214 |       // Create success metadata for logging\n215 |       let successMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                          `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n216 |         \"operationId\": operationID,\n217 |         \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:224:51: error: extra argument 'source' in call\n222 |       await logger.info(\n223 |         \"Random data generation completed successfully\", metadata: successMetadata\n224 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                   `- error: extra argument 'source' in call\n225 | \n226 |       // Return successful result with the generated random data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:223:68: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n221 | \n222 |       await logger.info(\n223 |         \"Random data generation completed successfully\", metadata: successMetadata\n    |                                                                    `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n224 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n225 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:230:19: error: cannot find 'createPrivacyMetadata' in scope\n228 |         status: .success,\n229 |         data: randomMaterial,\n230 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n231 |           \"length\": \"\\(length)\"\n232 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:31: error: extra arguments at positions #1, #2 in call\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:227:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n225 | \n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n228 |         status: .success,\n229 |         data: randomMaterial,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:228:18: error: cannot infer contextual base in reference to member 'success'\n226 |       // Return successful result with the generated random data\n227 |       return SecurityResultDTO(\n228 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n229 |         data: randomMaterial,\n230 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:239:56: error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n237 | \n238 |       // Create failure metadata for logging\n239 |       let errorMetadata: LoggingInterfaces.LogMetadata=[\n    |                                                        `- error: cannot convert value of type '[String : String]' to specified type 'LogMetadata'\n240 |         \"operationId\": operationID,\n241 |         \"operation\": \"generateRandomData\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:246:113: error: missing argument for parameter 'source' in call\n244 |       ]\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                                 `- error: missing argument for parameter 'source' in call\n247 |       , source: \\\"SecurityImplementation\\\")\n248 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:246:100: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n244 |       ]\n245 | \n246 |       await logger.error(\"Random data generation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                    `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n247 |       , source: \\\"SecurityImplementation\\\")\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:265:13: error: type 'CoreSecurityError' has no member 'general'\n263 |   \n264 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n265 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n266 |   }\n267 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:269:13: error: type 'CoreSecurityError' has no member 'general'\n267 |   \n268 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n269 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n270 |   }\n271 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/KeyManagementService.swift:273:13: error: type 'CoreSecurityError' has no member 'general'\n271 |   \n272 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n273 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n274 |   }\n275 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:417:29: error: cannot find type 'createPrivacyMetadata' in scope\n415 |    */\n416 |   private func simulateSecureRetrieval(identifier _: String)\n417 |   -\u003e (data: Data, metadata: createPrivacyMetadata([String: String]))? {\n    |                             `- error: cannot find type 'createPrivacyMetadata' in scope\n418 |     // In a real implementation, this would retrieve data from secure storage\n419 |     // For simulation purposes, we'll create dummy data\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:466:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n464 | \n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n468 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:470:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n468 |   }\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n472 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:474:15: error: invalid redeclaration of 'notImplemented(reason:)'\n472 |   }\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n476 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:95:22: error: extra arguments at positions #4, #5 in call\n 93 |     )\n 94 | \n 95 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n 96 |       \"Starting secure storage operation\", metadata: logMetadata,\n 97 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:96:54: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 94 | \n 95 |     await logger.info(\n 96 |       \"Starting secure storage operation\", metadata: logMetadata,\n    |                                                      `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n 97 |       source: \"SecureStorageService\"\n 98 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:102:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n100 |     do {\n101 |       // Extract required parameters from configuration\n102 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n103 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n104 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:106:43: error: value of type 'SecurityConfigOptions?' has no subscripts\n104 |       }\n105 | \n106 |       guard let dataToStore=config.options[\"data\"].flatMap({ Data(base64Encoded: $0) })\n    |                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n107 |       else {\n108 |         throw SecureStorageError.invalidInput(\"Missing or invalid data for storage\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:117:52: error: extra arguments at positions #1, #2 in call\n115 | \n116 |       // Encrypt the data before storage\n117 |       let encryptResult=await cryptoService.encrypt(data: dataToStore, using: storageKey)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n118 | \n119 |       switch encryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:117:52: error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n115 | \n116 |       // Encrypt the data before storage\n117 |       let encryptResult=await cryptoService.encrypt(data: dataToStore, using: storageKey)\n    |                                                    `- error: missing arguments for parameters 'dataIdentifier', 'keyIdentifier', 'options' in call\n118 | \n119 |       switch encryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:19:8: note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: 'encrypt(dataIdentifier:keyIdentifier:options:)' declared here\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:130:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:130:45: error: type 'String?' has no member 'string'\n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                                             `- error: type 'String?' has no member 'string'\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:131:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:131:43: error: type 'String?' has no member 'string'\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                           `- error: type 'String?' has no member 'string'\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:132:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:132:51: error: type 'String?' has no member 'string'\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                                   `- error: type 'String?' has no member 'string'\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:133:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n127 | \n128 |           // Create success metadata for logging\n129 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n130 |           successMetadata[\"operationId\"] = .string(operationID)\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n134 | \n135 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:133:44: error: type 'String?' has no member 'string'\n131 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n132 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                            `- error: type 'String?' has no member 'string'\n134 | \n135 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:135:28: error: extra arguments at positions #4, #5 in call\n133 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n134 | \n135 |           await logger.info(\n    |                            `- error: extra arguments at positions #4, #5 in call\n136 |             \"Secure storage operation completed successfully\", metadata: successMetadata,\n137 |             source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:136:74: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n134 | \n135 |           await logger.info(\n136 |             \"Secure storage operation completed successfully\", metadata: successMetadata,\n    |                                                                          `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n137 |             source: \"SecureStorageService\"\n138 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:143:23: error: cannot find 'createPrivacyMetadata' in scope\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                       `- error: cannot find 'createPrivacyMetadata' in scope\n144 |               \"storageIdentifier\": identifier,\n145 |               \"storedBytes\": \"\\(storedBytes)\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:141:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n139 | \n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:142:22: error: extra argument 'status' in call\n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n    |                      `- error: extra argument 'status' in call\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n144 |               \"storageIdentifier\": identifier,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:141:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n139 | \n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n142 |             status: .success,\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:142:22: error: cannot infer contextual base in reference to member 'success'\n140 |           // Return successful result with identifier\n141 |           return SecurityResultDTO(\n142 |             status: .success,\n    |                      `- error: cannot infer contextual base in reference to member 'success'\n143 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n144 |               \"storageIdentifier\": identifier,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:158:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:158:39: error: type 'String?' has no member 'string'\n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:159:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:159:37: error: type 'String?' has no member 'string'\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:160:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:160:38: error: type 'String?' has no member 'string'\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:161:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n155 | \n156 |       // Create failure metadata for logging\n157 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n158 |       errorMetadata[\"operationId\"] = .string(operationID)\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n162 | \n163 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:161:37: error: type 'String?' has no member 'string'\n159 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n160 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n161 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n162 | \n163 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:165:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n163 |       await logger.error(\n164 |         \"Secure storage operation failed: \\(error.localizedDescription)\",\n165 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n166 |         source: \"SecureStorageService\"\n167 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:173:19: error: cannot find 'createPrivacyMetadata' in scope\n171 |         status: .failure,\n172 |         error: error,\n173 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n174 |           \"errorMessage\": error.localizedDescription\n175 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:31: error: extra arguments at positions #1, #2 in call\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:170:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n168 | \n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n171 |         status: .failure,\n172 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:171:18: error: cannot infer contextual base in reference to member 'failure'\n169 |       // Return failure result\n170 |       return SecurityResultDTO(\n171 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n172 |         error: error,\n173 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:152:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n150 |           throw SecureStorageError.encryptionError(\"Failed to encrypt data: \\(error)\")\n151 |       }\n152 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n153 |       // Calculate duration before failure\n154 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:198:22: error: extra arguments at positions #4, #5 in call\n196 |     )\n197 | \n198 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n199 |       \"Starting secure retrieval operation\", metadata: logMetadata,\n200 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:199:56: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n197 | \n198 |     await logger.info(\n199 |       \"Starting secure retrieval operation\", metadata: logMetadata,\n    |                                                        `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n200 |       source: \"SecureStorageService\"\n201 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:205:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n203 |     do {\n204 |       // Extract required parameters from configuration\n205 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n206 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n207 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:209:35: error: value of type 'SecurityConfigOptions?' has no subscripts\n207 |       }\n208 | \n209 |       guard let key=config.options[\"key\"].flatMap({ Data(base64Encoded: $0) }) else {\n    |                                   `- error: value of type 'SecurityConfigOptions?' has no subscripts\n210 |         throw SecureStorageError.invalidInput(\"Missing decryption key\")\n211 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:235:52: error: extra arguments at positions #1, #2 in call\n233 | \n234 |       // Decrypt the data\n235 |       let decryptResult=await cryptoService.decrypt(data: encryptedData, using: key)\n    |                                                    `- error: extra arguments at positions #1, #2 in call\n236 | \n237 |       switch decryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:235:52: error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n233 | \n234 |       // Decrypt the data\n235 |       let decryptResult=await cryptoService.decrypt(data: encryptedData, using: key)\n    |                                                    `- error: missing arguments for parameters 'encryptedDataIdentifier', 'keyIdentifier', 'options' in call\n236 | \n237 |       switch decryptResult {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:31:8: note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' declared here\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:244:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:244:45: error: type 'String?' has no member 'string'\n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n    |                                             `- error: type 'String?' has no member 'string'\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:245:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:245:43: error: type 'String?' has no member 'string'\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                           `- error: type 'String?' has no member 'string'\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:246:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:246:51: error: type 'String?' has no member 'string'\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                                   `- error: type 'String?' has no member 'string'\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:247:26: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n241 | \n242 |           // Create success metadata for logging\n243 |           let successMetadata=LoggingTypes.LogMetadata()\n    |           `- note: change 'let' to 'var' to make it mutable\n244 |           successMetadata[\"operationId\"] = .string(operationID)\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                          `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n248 | \n249 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:247:44: error: type 'String?' has no member 'string'\n245 |           successMetadata[\"operation\"] = .string(String(describing: operation))\n246 |           successMetadata[\"storageIdentifier\"] = .string(identifier)\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                            `- error: type 'String?' has no member 'string'\n248 | \n249 |           await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:249:28: error: extra arguments at positions #4, #5 in call\n247 |           successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n248 | \n249 |           await logger.info(\n    |                            `- error: extra arguments at positions #4, #5 in call\n250 |             \"Secure retrieval operation completed successfully\", metadata: successMetadata,\n251 |             source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:250:76: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n248 | \n249 |           await logger.info(\n250 |             \"Secure retrieval operation completed successfully\", metadata: successMetadata,\n    |                                                                            `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n251 |             source: \"SecureStorageService\"\n252 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:258:23: error: cannot find 'createPrivacyMetadata' in scope\n256 |             status: .success,\n257 |             data: decryptedData,\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                       `- error: cannot find 'createPrivacyMetadata' in scope\n259 |               \"storageIdentifier\": identifier,\n260 |               \"algorithm\": retrievalResult.metadata[\"algorithm\"]) ?? \"unknown\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:18: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                  `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:35: error: extra arguments at positions #1, #2 in call\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- error: extra arguments at positions #1, #2 in call\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:255:35: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n253 | \n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n    |                                   `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n256 |             status: .success,\n257 |             data: decryptedData,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:256:22: error: cannot infer contextual base in reference to member 'success'\n254 |           // Return successful result with retrieved data\n255 |           return SecurityResultDTO(\n256 |             status: .success,\n    |                      `- error: cannot infer contextual base in reference to member 'success'\n257 |             data: decryptedData,\n258 |             metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:273:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:273:39: error: type 'String?' has no member 'string'\n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:274:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:274:37: error: type 'String?' has no member 'string'\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:275:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:275:38: error: type 'String?' has no member 'string'\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:276:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:276:37: error: type 'String?' has no member 'string'\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n278 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:277:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n270 | \n271 |       // Create failure metadata for logging\n272 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n273 |       errorMetadata[\"operationId\"] = .string(operationID)\n274 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n278 | \n279 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:277:40: error: type 'String?' has no member 'string'\n275 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n276 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n277 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                                        `- error: type 'String?' has no member 'string'\n278 | \n279 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:281:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n279 |       await logger.error(\n280 |         \"Secure retrieval operation failed: \\(error.localizedDescription)\",\n281 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n282 |         source: \"SecureStorageService\"\n283 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:289:19: error: cannot find 'createPrivacyMetadata' in scope\n287 |         status: .failure,\n288 |         error: error,\n289 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n290 |           \"errorMessage\": error.localizedDescription\n291 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:31: error: extra arguments at positions #1, #2 in call\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:286:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n284 | \n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n287 |         status: .failure,\n288 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:287:18: error: cannot infer contextual base in reference to member 'failure'\n285 |       // Return failure result\n286 |       return SecurityResultDTO(\n287 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n288 |         error: error,\n289 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:267:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n265 |           throw SecureStorageError.decryptionError(\"Failed to decrypt data: \\(error)\")\n266 |       }\n267 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n268 |       // Calculate duration before failure\n269 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:314:22: error: extra arguments at positions #4, #5 in call\n312 |     )\n313 | \n314 |     await logger.info(\n    |                      `- error: extra arguments at positions #4, #5 in call\n315 |       \"Starting secure deletion operation\", metadata: logMetadata,\n316 |       source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:315:55: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n313 | \n314 |     await logger.info(\n315 |       \"Starting secure deletion operation\", metadata: logMetadata,\n    |                                                       `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n316 |       source: \"SecureStorageService\"\n317 |     , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:321:42: error: value of type 'SecurityConfigOptions?' has no subscripts\n319 |     do {\n320 |       // Extract required parameters from configuration\n321 |       guard let identifier=config.options[\"identifier\"] else {\n    |                                          `- error: value of type 'SecurityConfigOptions?' has no subscripts\n322 |         throw SecureStorageError.invalidInput(\"Missing storage identifier\")\n323 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:339:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:339:41: error: type 'String?' has no member 'string'\n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n    |                                         `- error: type 'String?' has no member 'string'\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:340:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:340:39: error: type 'String?' has no member 'string'\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                       `- error: type 'String?' has no member 'string'\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:341:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:341:47: error: type 'String?' has no member 'string'\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n    |                                               `- error: type 'String?' has no member 'string'\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:342:22: error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n336 | \n337 |       // Create success metadata for logging\n338 |       let successMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n339 |       successMetadata[\"operationId\"] = .string(operationID)\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                      `- error: cannot assign through subscript: 'successMetadata' is a 'let' constant\n343 | \n344 |       await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:342:40: error: type 'String?' has no member 'string'\n340 |       successMetadata[\"operation\"] = .string(String(describing: operation))\n341 |       successMetadata[\"storageIdentifier\"] = .string(identifier)\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                        `- error: type 'String?' has no member 'string'\n343 | \n344 |       await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:344:24: error: extra arguments at positions #4, #5 in call\n342 |       successMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n343 | \n344 |       await logger.info(\n    |                        `- error: extra arguments at positions #4, #5 in call\n345 |         \"Secure deletion operation completed successfully\", metadata: successMetadata,\n346 |         source: \"SecureStorageService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:59:15: note: 'info(_:metadata:source:)' declared here\n 57 |   ///   - source: The source of the log\n 58 |   @available(*, deprecated, message: \"Use info(_:context:) instead\")\n 59 |   public func info(\n    |               `- note: 'info(_:metadata:source:)' declared here\n 60 |     _ message: String,\n 61 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:345:71: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n343 | \n344 |       await logger.info(\n345 |         \"Secure deletion operation completed successfully\", metadata: successMetadata,\n    |                                                                       `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n346 |         source: \"SecureStorageService\"\n347 |       , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:352:19: error: cannot find 'createPrivacyMetadata' in scope\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n353 |           \"storageIdentifier\": identifier\n354 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:350:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n348 | \n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:351:18: error: extra argument 'status' in call\n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n    |                  `- error: extra argument 'status' in call\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n353 |           \"storageIdentifier\": identifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:350:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n348 | \n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n351 |         status: .success,\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:351:18: error: cannot infer contextual base in reference to member 'success'\n349 |       // Return successful result\n350 |       return SecurityResultDTO(\n351 |         status: .success,\n    |                  `- error: cannot infer contextual base in reference to member 'success'\n352 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n353 |           \"storageIdentifier\": identifier\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:362:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:362:39: error: type 'String?' has no member 'string'\n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n    |                                       `- error: type 'String?' has no member 'string'\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:363:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:363:37: error: type 'String?' has no member 'string'\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n    |                                     `- error: type 'String?' has no member 'string'\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:364:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:364:38: error: type 'String?' has no member 'string'\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n    |                                      `- error: type 'String?' has no member 'string'\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:365:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n367 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:365:37: error: type 'String?' has no member 'string'\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n    |                                     `- error: type 'String?' has no member 'string'\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n367 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:366:20: error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n359 | \n360 |       // Create failure metadata for logging\n361 |       let errorMetadata=LoggingTypes.LogMetadata()\n    |       `- note: change 'let' to 'var' to make it mutable\n362 |       errorMetadata[\"operationId\"] = .string(operationID)\n363 |       errorMetadata[\"operation\"] = .string(String(describing: operation))\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                    `- error: cannot assign through subscript: 'errorMetadata' is a 'let' constant\n367 | \n368 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:366:40: error: type 'String?' has no member 'string'\n364 |       errorMetadata[\"durationMs\"] = .string(String(format: \"%.2f\", duration))\n365 |       errorMetadata[\"errorType\"] = .string(\"\\(type(of: error))\")\n366 |       errorMetadata[\"errorMessage\"] = .string(error.localizedDescription)\n    |                                        `- error: type 'String?' has no member 'string'\n367 | \n368 |       await logger.error(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:370:19: error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n368 |       await logger.error(\n369 |         \"Secure deletion operation failed: \\(error.localizedDescription)\",\n370 |         metadata: errorMetadata,\n    |                   `- error: cannot convert value of type 'LogMetadata' to expected argument type 'PrivacyMetadata'\n371 |         source: \"SecureStorageService\"\n372 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:378:19: error: cannot find 'createPrivacyMetadata' in scope\n376 |         status: .failure,\n377 |         error: error,\n378 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n    |                   `- error: cannot find 'createPrivacyMetadata' in scope\n379 |           \"errorMessage\": error.localizedDescription\n380 |         ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:14: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |              `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:31: error: extra arguments at positions #1, #2 in call\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |                               `- error: extra arguments at positions #1, #2 in call\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:375:31: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n373 | \n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n    |                               `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n376 |         status: .failure,\n377 |         error: error,\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:376:18: error: cannot infer contextual base in reference to member 'failure'\n374 |       // Return failure result\n375 |       return SecurityResultDTO(\n376 |         status: .failure,\n    |                  `- error: cannot infer contextual base in reference to member 'failure'\n377 |         error: error,\n378 |         metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:356:7: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n354 |         ])\n355 |       )\n356 |     } catch {\n    |       `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n357 |       // Calculate duration before failure\n358 |       let duration=Date().timeIntervalSince(startTime) * 1000\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:467:13: error: type 'CoreSecurityError' has no member 'general'\n465 |   \n466 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n467 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n468 |   }\n469 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:471:13: error: type 'CoreSecurityError' has no member 'general'\n469 |   \n470 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n471 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n472 |   }\n473 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecureStorageService.swift:475:13: error: type 'CoreSecurityError' has no member 'general'\n473 |   \n474 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n475 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n476 |   }\n477 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:90:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 88 | \n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 92 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:94:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 92 |   }\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 96 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:98:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 96 |   }\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n100 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:78:12: error: cannot find 'createPrivacyMetadata' in scope\n 76 |     config: SecurityConfigDTO\n 77 |   ) -\u003e LoggingInterfaces.LogMetadata {\n 78 |     return createPrivacyMetadata([\n    |            `- error: cannot find 'createPrivacyMetadata' in scope\n 79 |       \"operationId\": operationID,\n 80 |       \"operation\": String(describing: operation),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:81:27: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 79 |       \"operationId\": operationID,\n 80 |       \"operation\": String(describing: operation),\n 81 |       \"algorithm\": config.algorithm,\n    |                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 82 |       \"timestamp\": \"\\(Date())\"\n 83 |     ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:91:13: error: type 'CoreSecurityError' has no member 'general'\n 89 |   \n 90 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n 91 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 92 |   }\n 93 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:95:13: error: type 'CoreSecurityError' has no member 'general'\n 93 |   \n 94 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n 95 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 96 |   }\n 97 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:99:13: error: type 'CoreSecurityError' has no member 'general'\n 97 |   \n 98 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n 99 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n100 |   }\n101 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:43:37: error: cannot find type 'KeyStorageManager' in scope\n 41 |    The key manager used for key storage and retrieval\n 42 |    */\n 43 |   private let keyManagementService: KeyStorageManager\n    |                                     `- error: cannot find type 'KeyStorageManager' in scope\n 44 | \n 45 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:32:13: error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n 30 |  - Handle signature-specific errors\n 31 |  */\n 32 | final class SignatureService: SecurityServiceBase {\n    |             |- error: type 'SignatureService' does not conform to protocol 'SecurityServiceBase'\n    |             `- note: add stubs for conformance\n 33 |   // MARK: - Properties\n 34 | \n    :\n 46 |    The logger instance for recording operation details\n 47 |    */\n 48 |   let logger: PrivacyAwareLoggingProtocol\n    |       `- note: candidate has non-matching type 'any PrivacyAwareLoggingProtocol'\n 49 | \n 50 |   // MARK: - Initialisation\n    :\n 76 |    - Parameter logger: The logging service to use\n 77 |    */\n 78 |   init(logger _: PrivacyAwareLoggingProtocol) {\n    |   `- note: candidate has non-matching type '(logger: any PrivacyAwareLoggingProtocol)'\n 79 |     fatalError(\n 80 |       \"This initializer is not supported. Use init(cryptoService:keyManagementService:logger:) instead.\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SecurityServiceBase.swift:42:3: note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 32 |    The logger instance for recording operation details\n 33 |    */\n 34 |   var logger: LoggingInterfaces.LoggingProtocol { get }\n    |       `- note: protocol requires property 'logger' with type 'any LoggingProtocol'\n 35 | \n 36 |   /**\n    :\n 40 |        - logger: The logging service to use for operation logging\n 41 |    */\n 42 |   init(logger: LoggingInterfaces.LoggingProtocol)\n    |   `- note: protocol requires initializer 'init(logger:)' with type '(logger: any LoggingProtocol)'\n 43 | \n 44 |   /**\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:417:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n415 | \n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n419 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:421:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n419 |   }\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n423 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:425:15: error: invalid redeclaration of 'notImplemented(reason:)'\n423 |   }\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n427 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:99:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 97 |     // Create metadata for logging\n 98 |     var logMetadata=PrivacyMetadata()\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:100:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 98 |     var logMetadata=PrivacyMetadata()\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n102 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:101:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:101:59: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n 99 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n100 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                                                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:103:118: error: extra argument 'source' in call\n101 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n102 | \n103 |     await logger.info(\"Starting signing operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                      `- error: extra argument 'source' in call\n104 | \n105 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:107:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n105 |     do {\n106 |       // Extract required parameters from configuration\n107 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n108 |         throw SignatureError.invalidInput(\"Missing input data for signing\")\n109 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:107:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n105 |     do {\n106 |       // Extract required parameters from configuration\n107 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n108 |         throw SignatureError.invalidInput(\"Missing input data for signing\")\n109 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:116:36: error: value of type 'SecurityConfigOptions?' has no subscripts\n114 | \n115 |         // If keyID is provided, retrieve the key from key management\n116 |         if let keyID=config.options[\"keyId\"] {\n    |                                    `- error: value of type 'SecurityConfigOptions?' has no subscripts\n117 |           // Retrieve the key from the key management service\n118 |           let keyResult=await keyManagementService.secureStorage\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:127:35: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n125 |                 data: inputData,\n126 |                 key: keyMaterial,\n127 |                 algorithm: config.algorithm\n    |                                   `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n128 |               )\n129 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:136:48: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n134 |         }\n135 |         // If direct key is provided, use it\n136 |         else if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n137 |           // Use encrypt as a substitute for signature generation\n138 |           signature=try await performSignature(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:136:73: error: value of type 'SecurityConfigOptions?' has no subscripts\n134 |         }\n135 |         // If direct key is provided, use it\n136 |         else if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                                         `- error: value of type 'SecurityConfigOptions?' has no subscripts\n137 |           // Use encrypt as a substitute for signature generation\n138 |           signature=try await performSignature(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:141:31: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n139 |             data: inputData,\n140 |             key: key,\n141 |             algorithm: config.algorithm\n    |                               `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n142 |           )\n143 |         }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:154:25: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n152 |         // Create success metadata for logging\n153 |         var successMetadata=logMetadata\n154 |         successMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n155 |         successMetadata.setPublic(key: \"signatureSize\", value: String(signature.count))\n156 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:155:25: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n153 |         var successMetadata=logMetadata\n154 |         successMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n155 |         successMetadata.setPublic(key: \"signatureSize\", value: String(signature.count))\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n156 | \n157 |         await logger.info(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:159:53: error: extra argument 'source' in call\n157 |         await logger.info(\n158 |           \"Signing operation completed successfully\", metadata: successMetadata\n159 |         , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                     `- error: extra argument 'source' in call\n160 | \n161 |         // Return successful result with signature\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:165:21: error: cannot find 'createPrivacyMetadata' in scope\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n    |                     `- error: cannot find 'createPrivacyMetadata' in scope\n166 |             \"algorithm\": config.algorithm\n167 |           ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:16: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:33: error: extra arguments at positions #1, #2 in call\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                                 `- error: extra arguments at positions #1, #2 in call\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:162:33: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n160 | \n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n    |                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:163:20: error: cannot infer contextual base in reference to member 'success'\n161 |         // Return successful result with signature\n162 |         return SecurityResultDTO(\n163 |           status: .success,\n    |                    `- error: cannot infer contextual base in reference to member 'success'\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:164:27: error: value of type 'SendableCryptoMaterial' has no member 'toBase64'\n162 |         return SecurityResultDTO(\n163 |           status: .success,\n164 |           data: signature.toBase64(),\n    |                           `- error: value of type 'SendableCryptoMaterial' has no member 'toBase64'\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n166 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:166:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n164 |           data: signature.toBase64(),\n165 |           metadata: createPrivacyMetadata([\"durationMs\": String(format: \"%.2f\", duration * 1000),\n166 |             \"algorithm\": config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n167 |           ])\n168 |         )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:175:23: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n173 |         // Create failure metadata for logging\n174 |         var errorMetadata=logMetadata\n175 |         errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                       `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n177 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:176:23: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n174 |         var errorMetadata=logMetadata\n175 |         errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                       `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:178:110: error: missing argument for parameter 'source' in call\n176 |         errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n177 | \n178 |         await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                              `- error: missing argument for parameter 'source' in call\n179 |         , source: \\\"SecurityImplementation\\\")\n180 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:196:21: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n194 |       // Create failure metadata for logging\n195 |       var errorMetadata=logMetadata\n196 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n198 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:197:21: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n195 |       var errorMetadata=logMetadata\n196 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:199:108: error: missing argument for parameter 'source' in call\n197 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n198 | \n199 |       await logger.error(\"Signing operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                            `- error: missing argument for parameter 'source' in call\n200 |       , source: \\\"SecurityImplementation\\\")\n201 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:169:9: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n167 |           ])\n168 |         )\n169 |       } catch {\n    |         `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n170 |         // Calculate duration before failure\n171 |         let duration=Date().timeIntervalSince(startTime)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:226:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n224 |     // Create metadata for logging\n225 |     var logMetadata=PrivacyMetadata()\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:227:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n225 |     var logMetadata=PrivacyMetadata()\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n229 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:228:17: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                 `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:228:59: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n226 |     logMetadata.setPublic(key: \"operationID\", value: operationID)\n227 |     logMetadata.setPublic(key: \"operation\", value: String(describing: operation))\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n    |                                                           `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:230:133: error: extra argument 'source' in call\n228 |     logMetadata.setPublic(key: \"algorithm\", value: config.algorithm)\n229 | \n230 |     await logger.info(\"Starting signature verification operation\", metadata: logMetadata, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                                                                                     `- error: extra argument 'source' in call\n231 | \n232 |     do {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:234:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n232 |     do {\n233 |       // Extract required parameters from configuration\n234 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n235 |         throw SignatureError.invalidInput(\"Missing input data for verification\")\n236 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:234:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n232 |     do {\n233 |       // Extract required parameters from configuration\n234 |       guard let inputData=SendableCryptoMaterial.fromBase64(config.options[\"data\"] ?? \"\") else {\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n235 |         throw SignatureError.invalidInput(\"Missing input data for verification\")\n236 |       }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:238:50: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n236 |       }\n237 | \n238 |       guard let signature=SendableCryptoMaterial.fromBase64(config.options[\"signature\"] ?? \"\")\n    |                                                  `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n239 |       else {\n240 |         throw SignatureError.invalidInput(\"Missing signature to verify\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:238:75: error: value of type 'SecurityConfigOptions?' has no subscripts\n236 |       }\n237 | \n238 |       guard let signature=SendableCryptoMaterial.fromBase64(config.options[\"signature\"] ?? \"\")\n    |                                                                           `- error: value of type 'SecurityConfigOptions?' has no subscripts\n239 |       else {\n240 |         throw SignatureError.invalidInput(\"Missing signature to verify\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:244:41: error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n242 | \n243 |       // Check if key is provided directly in the options\n244 |       if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                         `- error: type 'SendableCryptoMaterial' has no member 'fromBase64'\n245 |         // Try to verify the signature using the provided key\n246 |         let isValid=try await performVerification(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:244:66: error: value of type 'SecurityConfigOptions?' has no subscripts\n242 | \n243 |       // Check if key is provided directly in the options\n244 |       if let key=SendableCryptoMaterial.fromBase64(config.options[\"key\"] ?? \"\") {\n    |                                                                  `- error: value of type 'SecurityConfigOptions?' has no subscripts\n245 |         // Try to verify the signature using the provided key\n246 |         let isValid=try await performVerification(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:250:29: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n248 |           signature: signature,\n249 |           key: key,\n250 |           algorithm: config.algorithm\n    |                             `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n251 |         )\n252 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:258:30: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n256 |         // Create result metadata\n257 |         var verificationMetadata=logMetadata\n258 |         verificationMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                              `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n259 |         verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n260 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:259:30: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n257 |         var verificationMetadata=logMetadata\n258 |         verificationMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n259 |         verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n    |                              `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n260 | \n261 |         if isValid {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:264:55: error: extra argument 'source' in call\n262 |           await logger.info(\n263 |             \"Signature verification completed: Valid signature\", metadata: verificationMetadata\n264 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                       `- error: extra argument 'source' in call\n265 |         } else {\n266 |           await logger.warning(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:268:55: error: extra argument 'source' in call\n266 |           await logger.warning(\n267 |             \"Signature verification completed: Invalid signature\", metadata: verificationMetadata\n268 |           , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                       `- error: extra argument 'source' in call\n269 |         }\n270 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:274:21: error: cannot find 'createPrivacyMetadata' in scope\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n    |                     `- error: cannot find 'createPrivacyMetadata' in scope\n275 |             \"algorithm\": config.algorithm\n276 |           ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:272:16: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n270 | \n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n    |                `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:273:20: error: extra argument 'status' in call\n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n    |                    `- error: extra argument 'status' in call\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:272:33: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n270 | \n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n    |                                 `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:273:20: error: cannot infer contextual base in reference to member 'success'\n271 |         // Return verification result\n272 |         return SecurityResultDTO(\n273 |           status: .success,\n    |                    `- error: cannot infer contextual base in reference to member 'success'\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:275:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n273 |           status: .success,\n274 |           metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n275 |             \"algorithm\": config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n276 |           ])\n277 |         )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:282:39: error: value of type 'SecurityConfigOptions?' has no subscripts\n280 | \n281 |         // Attempt to get key ID from config\n282 |         guard let keyID=config.options[\"keyId\"] else {\n    |                                       `- error: value of type 'SecurityConfigOptions?' has no subscripts\n283 |           throw SignatureError.invalidInput(\"Neither key nor keyId provided for verification\")\n284 |         }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:297:33: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n295 |               signature: signature,\n296 |               key: keyMaterial,\n297 |               algorithm: config.algorithm\n    |                                 `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n298 |             )\n299 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:305:34: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n303 |             // Create result metadata\n304 |             var verificationMetadata=logMetadata\n305 |             verificationMetadata.setPublic(\n    |                                  `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n306 |               key: \"duration\",\n307 |               value: String(format: \"%.3f s\", duration)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:309:34: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n307 |               value: String(format: \"%.3f s\", duration)\n308 |             )\n309 |             verificationMetadata.setPublic(key: \"isValid\", value: String(isValid))\n    |                                  `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n310 | \n311 |             if isValid {\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:314:59: error: extra argument 'source' in call\n312 |               await logger.info(\n313 |                 \"Signature verification completed: Valid signature\", metadata: verificationMetadata\n314 |               , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                           `- error: extra argument 'source' in call\n315 |             } else {\n316 |               await logger.warning(\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:318:59: error: extra argument 'source' in call\n316 |               await logger.warning(\n317 |                 \"Signature verification completed: Invalid signature\", metadata: verificationMetadata\n318 |               , source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                           `- error: extra argument 'source' in call\n319 |             }\n320 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:324:25: error: cannot find 'createPrivacyMetadata' in scope\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n    |                         `- error: cannot find 'createPrivacyMetadata' in scope\n325 |                 \"algorithm\": config.algorithm\n326 |               ])\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:322:20: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n320 | \n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n    |                    `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:323:24: error: extra argument 'status' in call\n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n    |                        `- error: extra argument 'status' in call\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:322:37: error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n320 | \n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n    |                                     `- error: missing arguments for parameters 'successful', 'resultData', 'errorDetails', 'executionTimeMs' in call\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:323:24: error: cannot infer contextual base in reference to member 'success'\n321 |             // Return verification result\n322 |             return SecurityResultDTO(\n323 |               status: .success,\n    |                        `- error: cannot infer contextual base in reference to member 'success'\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:325:37: error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n323 |               status: .success,\n324 |               metadata: createPrivacyMetadata([\"verified\": \"\\(isValid)\",\n325 |                 \"algorithm\": config.algorithm\n    |                                     `- error: value of type 'SecurityConfigDTO' has no member 'algorithm'\n326 |               ])\n327 |             )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:339:21: error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n337 |       // Create failure metadata for logging\n338 |       var errorMetadata=logMetadata\n339 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPrivate'\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n341 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:340:21: error: value of type 'PrivacyMetadata' has no member 'setPublic'\n338 |       var errorMetadata=logMetadata\n339 |       errorMetadata.setPrivate(key: \"error\", value: error.localizedDescription)\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n    |                     `- error: value of type 'PrivacyMetadata' has no member 'setPublic'\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:342:123: error: missing argument for parameter 'source' in call\n340 |       errorMetadata.setPublic(key: \"duration\", value: String(format: \"%.3f s\", duration))\n341 | \n342 |       await logger.error(\"Signature verification operation failed: \\(error.localizedDescription)\", metadata: errorMetadata\n    |                                                                                                                           `- error: missing argument for parameter 'source' in call\n343 |       , source: \\\"SecurityImplementation\\\")\n344 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:89:15: note: 'error(_:metadata:source:)' declared here\n 87 |   ///   - source: The source of the log\n 88 |   @available(*, deprecated, message: \"Use error(_:context:) instead\")\n 89 |   public func error(\n    |               `- note: 'error(_:metadata:source:)' declared here\n 90 |     _ message: String,\n 91 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:403:27: error: incorrect argument label in call (have 'base64Encoded:', expected 'hexString:')\n401 |     // Implement secure random material generation\n402 |     // For now, this is a placeholder that would be replaced with actual implementation\n403 |     SendableCryptoMaterial(base64Encoded: \"random-material\")\n    |                           `- error: incorrect argument label in call (have 'base64Encoded:', expected 'hexString:')\n404 |   }\n405 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:418:13: error: type 'CoreSecurityError' has no member 'general'\n416 |   \n417 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n418 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n419 |   }\n420 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:422:13: error: type 'CoreSecurityError' has no member 'general'\n420 |   \n421 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n422 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n423 |   }\n424 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Core/Services/SignatureService.swift:426:13: error: type 'CoreSecurityError' has no member 'general'\n424 |   \n425 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n426 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n427 |   }\n428 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:16:22: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n14 |   /// - Parameter reason: The reason for the error\n15 |   /// - Returns: A CoreSecurityError with the appropriate error code\n16 |   public static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n17 |     return .invalidInput(\"Invalid verification method: \\(reason)\")\n18 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:23:22: error: invalid redeclaration of 'verificationFailed(reason:)'\n21 |   /// - Parameter reason: The reason for the error\n22 |   /// - Returns: A CoreSecurityError with the appropriate error code\n23 |   public static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'verificationFailed(reason:)'\n24 |     return .authenticationFailed(\"Verification failed: \\(reason)\")\n25 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/CoreSecurityError+Extensions.swift:30:22: error: invalid redeclaration of 'notImplemented(reason:)'\n28 |   /// - Parameter reason: The reason for the error\n29 |   /// - Returns: A CoreSecurityError with the appropriate error code\n30 |   public static func notImplemented(reason: String) -\u003e CoreSecurityError {\n   |                      `- error: invalid redeclaration of 'notImplemented(reason:)'\n31 |     return .unsupportedOperation(\"Not implemented: \\(reason)\")\n32 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Logging.swift:38:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 36 |  according to the Alpha Dot Five architecture principles.\n 37 |  */\n 38 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 39 |   /**\n 40 |    Logs the start of a security operation with privacy-aware metadata.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  * Batch encryption and decryption for collections of data\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Encrypts data and then stores it securely.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:427:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n425 | \n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n429 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:431:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n429 |   }\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n433 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:435:15: error: invalid redeclaration of 'notImplemented(reason:)'\n433 |   }\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n437 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:428:13: error: type 'CoreSecurityError' has no member 'general'\n426 |   \n427 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n428 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n429 |   }\n430 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:432:13: error: type 'CoreSecurityError' has no member 'general'\n430 |   \n431 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n432 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n433 |   }\n434 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Operations.swift:436:13: error: type 'CoreSecurityError' has no member 'general'\n434 |   \n435 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n436 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n437 |   }\n438 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:30:11: error: cannot find type 'CoreSecurityProviderService' in scope\n 28 |  - Common validation logic is centralised\n 29 |  */\n 30 | extension CoreSecurityProviderService {\n    |           `- error: cannot find type 'CoreSecurityProviderService' in scope\n 31 |   /**\n 32 |    Validates configuration for encryption operations.\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:204:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n202 | \n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n206 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:208:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n206 |   }\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n210 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:212:15: error: invalid redeclaration of 'notImplemented(reason:)'\n210 |   }\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n214 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:205:13: error: type 'CoreSecurityError' has no member 'general'\n203 |   \n204 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n205 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n206 |   }\n207 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:209:13: error: type 'CoreSecurityError' has no member 'general'\n207 |   \n208 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n209 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n210 |   }\n211 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Extensions/SecurityProvider+Validation.swift:213:13: error: type 'CoreSecurityError' has no member 'general'\n211 |   \n212 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n213 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n214 |   }\n215 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:171:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n169 | \n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n173 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:175:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n173 |   }\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n177 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:179:15: error: invalid redeclaration of 'notImplemented(reason:)'\n177 |   }\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n181 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:52:8: error: type 'CryptoServiceFactory' has no member 'createStandardCryptoService'\n 50 |     // Create standard crypto service\n 51 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 52 |       .createStandardCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createStandardCryptoService'\n 53 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n 54 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:53:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n 51 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 52 |       .createStandardCryptoService()\n 53 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n 54 | \n 55 |     // Use the provided logger or create a default one\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:61:23: error: extra argument 'environment' in call\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n 62 |       )\n 63 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:60:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n 58 |       actualLogger=logger\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n 61 |         environment: .development)\n 62 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:61:23: error: cannot infer contextual base in reference to member 'development'\n 59 |     } else {\n 60 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n 61 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n 62 |       )\n 63 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:69:27: error: missing argument for parameter 'secureLogger' in call\n 67 |     let securityService=SecurityServiceActor(\n 68 |       cryptoService: cryptoService,\n 69 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n 70 |     )\n 71 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:96:8: error: type 'CryptoServiceFactory' has no member 'createHighSecurityCryptoService'\n 94 |     // Create high-security crypto service\n 95 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 96 |       .createHighSecurityCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createHighSecurityCryptoService'\n 97 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n 98 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:97:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n 95 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n 96 |       .createHighSecurityCryptoService()\n 97 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n 98 | \n 99 |     // Use the provided logger or create a default one with debug level logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:105:23: error: extra argument 'environment' in call\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n106 |       )\n107 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:104:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n102 |       actualLogger=logger\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n105 |         environment: .development)\n106 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:105:23: error: cannot infer contextual base in reference to member 'development'\n103 |     } else {\n104 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n105 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n106 |       )\n107 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:113:27: error: missing argument for parameter 'secureLogger' in call\n111 |     let securityService=SecurityServiceActor(\n112 |       cryptoService: cryptoService,\n113 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n114 |     )\n115 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:141:8: error: type 'CryptoServiceFactory' has no member 'createMaxSecurityCryptoService'\n139 |     // Create max-security crypto service\n140 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n141 |       .createMaxSecurityCryptoService()\n    |        `- error: type 'CryptoServiceFactory' has no member 'createMaxSecurityCryptoService'\n142 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n143 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:142:72: error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n140 |     let cryptoService: any CryptoServiceProtocol=await CryptoServiceFactory\n141 |       .createMaxSecurityCryptoService()\n142 |     let keyManager=await KeyManagementFactory.createKeyManager(logger: logger)\n    |                                                                        |- error: cannot convert value of type '(any LoggingProtocol)?' to expected argument type '(any LoggingServiceProtocol)?'\n    |                                                                        `- note: arguments to generic parameter 'Wrapped' ('any LoggingProtocol' and 'any LoggingServiceProtocol') are expected to be equal\n143 | \n144 |     // Use the provided logger or create a default one with debug level logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:149:29: error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n147 |       actualLogger=logger\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n    |                             `- error: instance member 'createDevelopmentLogger' cannot be used on type 'LoggingServiceFactory'; did you mean to use a value of this type instead?\n150 |         environment: .development)\n151 |       )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:150:23: error: extra argument 'environment' in call\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n    |                       `- error: extra argument 'environment' in call\n151 |       )\n152 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:150:23: error: cannot infer contextual base in reference to member 'development'\n148 |     } else {\n149 |       let developmentLogger=LoggingServiceFactory.createDevelopmentLogger(\n150 |         environment: .development)\n    |                       `- error: cannot infer contextual base in reference to member 'development'\n151 |       )\n152 |       actualLogger=developmentLogger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:158:27: error: missing argument for parameter 'secureLogger' in call\n156 |     let securityService=SecurityServiceActor(\n157 |       cryptoService: cryptoService,\n158 |       logger: actualLogger\n    |                           `- error: missing argument for parameter 'secureLogger' in call\n159 |     )\n160 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:61:10: note: 'init(cryptoService:logger:secureLogger:)' declared here\n 59 |   ///   - logger: The logger to use for general logging\n 60 |   ///   - secureLogger: The secure logger to use for privacy-aware logging\n 61 |   public init(\n    |          `- note: 'init(cryptoService:logger:secureLogger:)' declared here\n 62 |     cryptoService: any CryptoServiceProtocol,\n 63 |     logger: LoggingInterfaces.LoggingProtocol,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:172:13: error: type 'CoreSecurityError' has no member 'general'\n170 |   \n171 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n172 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n173 |   }\n174 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:176:13: error: type 'CoreSecurityError' has no member 'general'\n174 |   \n175 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n176 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n177 |   }\n178 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Factory/SecurityProviderFactory.swift:180:13: error: type 'CoreSecurityError' has no member 'general'\n178 |   \n179 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n180 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n181 |   }\n182 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:91:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 89 | \n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n 93 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:95:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n 93 |   }\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n 97 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:99:15: error: invalid redeclaration of 'notImplemented(reason:)'\n 97 |   }\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n101 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:92:13: error: type 'CoreSecurityError' has no member 'general'\n 90 |   \n 91 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n 92 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 93 |   }\n 94 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:96:13: error: type 'CoreSecurityError' has no member 'general'\n 94 |   \n 95 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n 96 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n 97 |   }\n 98 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:100:13: error: type 'CoreSecurityError' has no member 'general'\n 98 |   \n 99 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n100 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n101 |   }\n102 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:160:15: warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n158 |   /// - Returns: The generated random integer\n159 |   /// - Throws: SecurityError if random generation fails\n160 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T {\n    |               `- warning: non-sendable parameter type 'Range\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n161 |     try validateInitialisation()\n162 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:30:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 28 |   /// - Returns: The generated random integer\n 29 |   /// - Throws: SecurityError if random generation fails\n 30 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: Range\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 31 | \n 32 |   /// Generates a cryptographically secure random integer within the specified closed range\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               |                     `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'generateRandomInteger(in:)'; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:210:15: warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n208 |   /// - Returns: The generated random integer\n209 |   /// - Throws: SecurityError if random generation fails\n210 |   public func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws\n    |               `- warning: non-sendable parameter type 'ClosedRange\u003cT\u003e' cannot be sent from caller of protocol requirement 'generateRandomInteger(in:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n211 |   -\u003e T {\n212 |     // Convert closed range to half-open range and use existing implementation\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Protocols/RandomDataServiceProtocol.swift:36:30: note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 34 |   /// - Returns: The generated random integer\n 35 |   /// - Throws: SecurityError if random generation fails\n 36 |   func generateRandomInteger\u003cT: FixedWidthInteger\u003e(in range: ClosedRange\u003cT\u003e) async throws -\u003e T\n    |                              `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n 37 | \n 38 |   /// Generates a cryptographically secure random double between 0.0 and 1.0\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:265:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n263 | \n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n267 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:269:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n267 |   }\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n271 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:273:15: error: invalid redeclaration of 'notImplemented(reason:)'\n271 |   }\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n275 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:53:27: error: type 'SecurityError' has no member 'alreadyInitialized'\n 51 |   public func initialise(entropySource: EntropySource) async throws {\n 52 |     guard !isInitialised else {\n 53 |       throw SecurityError.alreadyInitialized(\"Random data service is already initialised\")\n    |                           `- error: type 'SecurityError' has no member 'alreadyInitialized'\n 54 |     }\n 55 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:42: error: missing argument label 'entries:' in call\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:59:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 57 |     await logger.debug(\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:60:69: error: cannot infer contextual base in reference to member 'public'\n 58 |       \"Initialising random data service with \\(entropySource.rawValue) entropy source\",\n 59 |       metadata: LogMetadataDTOCollection([\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n    |                                                                     `- error: cannot infer contextual base in reference to member 'public'\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n 62 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:61:71: error: cannot infer contextual base in reference to member 'public'\n 59 |       metadata: LogMetadataDTOCollection([\n 60 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public),\n 61 |         \"service_id\": (value: serviceIdentifier.uuidString, privacy: .public)\n    |                                                                       `- error: cannot infer contextual base in reference to member 'public'\n 62 |       ]),\n 63 |       source: \"RandomDataServiceActor.initialise\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:78:31: error: type 'SecurityError' has no member 'initialisationFailed'\n 76 | \n 77 |         guard result == errSecSuccess else {\n 78 |           throw SecurityError.initialisationFailed(\n    |                               `- error: type 'SecurityError' has no member 'initialisationFailed'\n 79 |             reason: \"Hardware entropy source is not available\"\n 80 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:85:31: error: type 'SecurityError' has no member 'initialisationFailed'\n 83 |         // Ensure the bytes are actually random\n 84 |         guard bytes != testBytes else {\n 85 |           throw SecurityError.initialisationFailed(\n    |                               `- error: type 'SecurityError' has no member 'initialisationFailed'\n 86 |             reason: \"Entropy source did not produce random data\"\n 87 |           )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:65: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:90: error: missing argument label 'entries:' in call\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                                          `- error: missing argument label 'entries:' in call\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:99:90: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n 97 |     // Log success\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n    |                                                                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n101 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:100:69: error: cannot infer contextual base in reference to member 'public'\n 98 |     await logger.debug(\n 99 |       \"Random data service initialised successfully\", metadata: LogMetadataDTOCollection([\n100 |         \"entropy_source\": (value: entropySource.rawValue, privacy: .public, source: \"SecurityImplementation\", source: \"SecurityImplementation\")\n    |                                                                     `- error: cannot infer contextual base in reference to member 'public'\n101 |       ]),\n102 |       source: \"RandomDataServiceActor.initialise\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:42: error: missing argument label 'entries:' in call\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:131:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n129 |     await logger.debug(\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n132 |         \"length\": (value: String(length), privacy: .public)\n133 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:132:53: error: cannot infer contextual base in reference to member 'public'\n130 |       \"Generating \\(length) random bytes\",\n131 |       metadata: LogMetadataDTOCollection([\n132 |         \"length\": (value: String(length), privacy: .public)\n    |                                                     `- error: cannot infer contextual base in reference to member 'public'\n133 |       ]),\n134 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:142:27: error: type 'SecurityError' has no member 'operationFailed'\n140 | \n141 |     guard result == errSecSuccess else {\n142 |       throw SecurityError.operationFailed(\"SecRandomCopyBytes failed with error \\(result)\")\n    |                           `- error: type 'SecurityError' has no member 'operationFailed'\n143 |     }\n144 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:56: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                        `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:81: error: missing argument label 'entries:' in call\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                                                 `- error: missing argument label 'entries:' in call\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:147:81: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n145 |     // Log success\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n    |                                                                                 `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n149 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:148:33: error: extra arguments at positions #2, #3 in call\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                 `- error: extra arguments at positions #2, #3 in call\n149 |       ]),\n150 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\nSwift.String.init:2:19: note: 'init(_:)' declared here\n1 | struct String {\n2 | @inlinable public init\u003cT\u003e(_ value: T) where T : LosslessStringConvertible}\n  |                   `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:148:126: error: cannot infer contextual base in reference to member 'public'\n146 |     await logger.debug(\n147 |       \"Successfully generated random bytes\", metadata: LogMetadataDTOCollection([\n148 |         \"length\": (value: String(bytes.count, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                              `- error: cannot infer contextual base in reference to member 'public'\n149 |       ]),\n150 |       source: \"RandomDataServiceActor.generateRandomBytes\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:42: error: missing argument label 'entries:' in call\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: missing argument label 'entries:' in call\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:166:42: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n164 |     await logger.debug(\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n    |                                          `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:167:68: error: cannot infer contextual base in reference to member 'public'\n165 |       \"Generating random integer in range \\(range.lowerBound)..\u003c\\(range.upperBound)\",\n166 |       metadata: LogMetadataDTOCollection([\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n    |                                                                    `- error: cannot infer contextual base in reference to member 'public'\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:168:68: error: cannot infer contextual base in reference to member 'public'\n166 |       metadata: LogMetadataDTOCollection([\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n    |                                                                    `- error: cannot infer contextual base in reference to member 'public'\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n170 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:169:63: error: cannot infer contextual base in reference to member 'public'\n167 |         \"lower_bound\": (value: String(range.lowerBound), privacy: .public),\n168 |         \"upper_bound\": (value: String(range.upperBound), privacy: .public),\n169 |         \"type\": (value: String(describing: T.self), privacy: .public)\n    |                                                               `- error: cannot infer contextual base in reference to member 'public'\n170 |       ]),\n171 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:177:27: error: type 'SecurityError' has no member 'invalidInput'\n175 |     let width=range.upperBound - range.lowerBound\n176 |     guard width \u003e 0 else {\n177 |       throw SecurityError.invalidInput(\"Range width must be greater than zero\")\n    |                           `- error: type 'SecurityError' has no member 'invalidInput'\n178 |     }\n179 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:58: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                          `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:83: error: missing argument label 'entries:' in call\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                                                   `- error: missing argument label 'entries:' in call\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:197:83: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n195 |     // Log success\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n    |                                                                                   `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n199 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:198:32: error: extra arguments at positions #2, #3 in call\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                `- error: extra arguments at positions #2, #3 in call\n199 |       ]),\n200 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\nSwift.String.init:2:19: note: 'init(_:)' declared here\n1 | struct String {\n2 | @inlinable public init\u003cT\u003e(_ value: T) where T : LosslessStringConvertible}\n  |                   `- note: 'init(_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:198:120: error: cannot infer contextual base in reference to member 'public'\n196 |     await logger.debug(\n197 |       \"Successfully generated random integer\", metadata: LogMetadataDTOCollection([\n198 |         \"value\": (value: String(scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                        `- error: cannot infer contextual base in reference to member 'public'\n199 |       ]),\n200 |       source: \"RandomDataServiceActor.generateRandomInteger\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:65: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:89: error: extra arguments at positions #2, #3 in call\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                                         `- error: extra arguments at positions #2, #3 in call\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogMetadataDTOCollection.swift:20:10: note: 'init(entries:)' declared here\n 18 |   ///\n 19 |   /// - Parameter entries: The initial metadata entries\n 20 |   public init(entries: [LogMetadataDTO]) {\n    |          `- note: 'init(entries:)' declared here\n 21 |     self.entries=entries\n 22 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:224:90: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type '[LogMetadataDTO]'\n222 |     // Log operation with privacy controls\n223 |     await logger.debug(\n224 |       \"Generating random double between 0.0 and 1.0\", metadata: LogMetadataDTOCollection([:], source: \"SecurityImplementation\", source: \"SecurityImplementation\"),\n    |                                                                                          `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type '[LogMetadataDTO]'\n225 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n226 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:57: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                         `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:82: error: missing argument label 'entries:' in call\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                                                  `- error: missing argument label 'entries:' in call\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:242:82: error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n240 |     // Log success\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n    |                                                                                  `- error: cannot convert value of type '[String : Any]' to expected argument type '[LogMetadataDTO]'\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n244 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:243:32: error: extra arguments at positions #3, #4 in call\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                `- error: extra arguments at positions #3, #4 in call\n244 |       ]),\n245 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n\nFoundation.String.init:2:8: note: 'init(format:_:)' declared here\n1 | struct String {\n2 | public init(format: __shared String, _ arguments: any CVarArg...)}\n  |        `- note: 'init(format:_:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:243:136: error: cannot infer contextual base in reference to member 'public'\n241 |     await logger.debug(\n242 |       \"Successfully generated random double\", metadata: LogMetadataDTOCollection([\n243 |         \"value\": (value: String(format: \"%.6f\", scaled, source: \"SecurityImplementation\", source: \"SecurityImplementation\"), privacy: .public)\n    |                                                                                                                                        `- error: cannot infer contextual base in reference to member 'public'\n244 |       ]),\n245 |       source: \"RandomDataServiceActor.generateRandomDouble\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:257:27: error: type 'SecurityError' has no member 'notInitialized'\n255 |   private func validateInitialisation() throws {\n256 |     guard isInitialised else {\n257 |       throw SecurityError.notInitialized(\"Random data service is not initialised\")\n    |                           `- error: type 'SecurityError' has no member 'notInitialized'\n258 |     }\n259 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:266:13: error: type 'CoreSecurityError' has no member 'general'\n264 |   \n265 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n266 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n267 |   }\n268 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:270:13: error: type 'CoreSecurityError' has no member 'general'\n268 |   \n269 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n270 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n271 |   }\n272 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceActor.swift:274:13: error: type 'CoreSecurityError' has no member 'general'\n272 |   \n273 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n274 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n    |             `- error: type 'CoreSecurityError' has no member 'general'\n275 |   }\n276 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:25:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n23 |   /// - Returns: A fully configured random data service\n24 |   public static func createDefault() -\u003e RandomDataServiceProtocol {\n25 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n26 |       subsystem: \"uk.co.umbra.security\",\n27 |       category: \"RandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:45:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n43 |   /// - Returns: A fully configured high-security random data service\n44 |   public static func createHighSecurity() -\u003e RandomDataServiceProtocol {\n45 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n46 |       subsystem: \"uk.co.umbra.security\",\n47 |       category: \"HighSecurityRandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:63:38: error: type 'LoggingServiceFactory' has no member 'createDefault'\n61 |   /// - Returns: A minimally configured random data service\n62 |   public static func createMinimal() -\u003e RandomDataServiceProtocol {\n63 |     let logger=LoggingServiceFactory.createDefault(\n   |                                      `- error: type 'LoggingServiceFactory' has no member 'createDefault'\n64 |       subsystem: \"uk.co.umbra.security\",\n65 |       category: \"MinimalRandomDataService\"\n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:83:13: error: type 'CoreSecurityError' has no member 'general'\n81 |   \n82 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n83 |     return .general(code: \"INVALID_VERIFICATION_METHOD\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n84 |   }\n85 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:87:13: error: type 'CoreSecurityError' has no member 'general'\n85 |   \n86 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n87 |     return .general(code: \"VERIFICATION_FAILED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n88 |   }\n89 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/RandomDataServiceFactory.swift:91:13: error: type 'CoreSecurityError' has no member 'general'\n89 |   \n90 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n91 |     return .general(code: \"NOT_IMPLEMENTED\", message: reason)\n   |             `- error: type 'CoreSecurityError' has no member 'general'\n92 |   }\n93 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:110:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n108 | \n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n111 |     return .invalidVerificationMethod(reason: reason)\n112 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:114:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n112 |   }\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n115 |     return .verificationFailed(reason: reason)\n116 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:118:15: error: invalid redeclaration of 'notImplemented(reason:)'\n116 |   }\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n119 |     return .notImplemented(reason: reason)\n120 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:9:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  7 |   var metadata = PrivacyMetadata()\n  8 |   for (key, value) in dict {\n  9 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 10 |   }\n 11 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:95:27: error: cannot find 'LoggingServices' in scope\n 93 |       cryptoService: cryptoService,\n 94 |       logger: logger,\n 95 |       secureLogger: await LoggingServices.createSecureLogger(\n    |                           `- error: cannot find 'LoggingServices' in scope\n 96 |         subsystem: \"com.umbra.security\",\n 97 |         category: \"SecurityService\",\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:111:13: error: ambiguous use of 'invalidVerificationMethod(reason:)'\n109 | extension CoreSecurityError {\n110 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n111 |     return .invalidVerificationMethod(reason: reason)\n    |             `- error: ambiguous use of 'invalidVerificationMethod(reason:)'\n112 |   }\n113 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: note: found this candidate \n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:258:15: note: found this candidate \n256 | \n257 | extension CoreSecurityError {\n258 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n259 |     return .invalidVerificationMethod(reason: reason)\n260 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:115:13: error: ambiguous use of 'verificationFailed(reason:)'\n113 |   \n114 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n115 |     return .verificationFailed(reason: reason)\n    |             `- error: ambiguous use of 'verificationFailed(reason:)'\n116 |   }\n117 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: note: found this candidate \n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:262:15: note: found this candidate \n260 |   }\n261 |   \n262 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n263 |     return .verificationFailed(reason: reason)\n264 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityImplementation.swift:119:13: error: ambiguous use of 'notImplemented(reason:)'\n117 |   \n118 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n119 |     return .notImplemented(reason: reason)\n    |             `- error: ambiguous use of 'notImplemented(reason:)'\n120 |   }\n121 | }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              `- error: type 'SecurityServiceActor' does not conform to protocol 'SecurityProviderProtocol'\n 31 |   // MARK: - Private Properties\n 32 | \n    :\n349 |    - Returns: Result of the operation\n350 |    */\n351 |   public func performSecureOperation(\n    |               `- note: candidate has non-matching type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n352 |     operation: SecurityOperation,\n353 |     config: SecurityConfigDTO\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:30:14: error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n 28 | /// - Strong type safety with proper error handling\n 29 | /// - Clear domain separation between security policy and cryptographic operations\n 30 | public actor SecurityServiceActor: SecurityProviderProtocol, AsyncServiceInitializable {\n    |              |- error: type 'SecurityServiceActor' does not conform to protocol 'AsyncServiceInitializable'\n    |              `- note: add stubs for conformance\n 31 |   // MARK: - Private Properties\n 32 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProviderProtocol.swift:109:8: note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n107 |    - Returns: Result of the operation\n108 |    */\n109 |   func performSecureOperation(\n    |        `- note: protocol requires function 'performSecureOperation(operation:config:)' with type '(SecurityOperation, SecurityConfigDTO) async throws -\u003e SecurityResultDTO'\n110 |     operation: SecurityOperation,\n111 |     config: SecurityConfigDTO\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/AsyncServiceInitializable.swift:29:8: note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n27 |    - Throws: Error if initialization fails\n28 |    */\n29 |   func initialize() async throws\n   |        `- note: protocol requires function 'initialize()' with type '() async throws -\u003e ()'\n30 | }\n31 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:16:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 14 |   var metadata = PrivacyMetadata()\n 15 |   for (key, value) in dict {\n 16 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 17 |   }\n 18 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:69:50: error: extra arguments at positions #1, #3, #4, #5 in call\n 67 |     self.logger = logger\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n    |                                                  `- error: extra arguments at positions #1, #3, #4, #5 in call\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/DTOs/SecurityDTOs.swift:23:10: note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 21 |   ///   - loggingLevel: The logging level for security operations\n 22 |   ///   - randomizationOptions: Options for secure random number generation\n 23 |   public init(\n    |          `- note: 'init(securityLevel:loggingLevel:randomizationOptions:)' declared here\n 24 |     securityLevel: CoreSecurityTypes.SecurityLevelDTO = .standard,\n 25 |     loggingLevel: CoreSecurityTypes.SecurityLogLevelDTO = .warning,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:70:22: error: cannot infer contextual base in reference to member 'standard'\n 68 |     self.secureLogger = secureLogger\n 69 |     self.configuration = SecurityConfigurationDTO(\n 70 |       providerType: .standard,\n    |                      `- error: cannot infer contextual base in reference to member 'standard'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:72:29: error: cannot infer contextual base in reference to member 'aes256'\n 70 |       providerType: .standard,\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n    |                             `- error: cannot infer contextual base in reference to member 'aes256'\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:73:23: error: cannot infer contextual base in reference to member 'sha256'\n 71 |       securityLevel: .high,\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n    |                       `- error: cannot infer contextual base in reference to member 'sha256'\n 74 |       options: nil\n 75 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:74:16: error: 'nil' requires a contextual type\n 72 |       encryptionAlgorithm: .aes256,\n 73 |       hashAlgorithm: .sha256,\n 74 |       options: nil\n    |                `- error: 'nil' requires a contextual type\n 75 |     )\n 76 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:83:41: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 81 |         metadata: createPrivacyMetadata([\n 82 |           \"serviceId\": serviceId.uuidString,\n 83 |           \"providerType\": configuration.providerType.rawValue,\n    |                                         `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n 84 |           \"securityLevel\": configuration.securityLevel.rawValue\n 85 |         ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:111:44: error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n109 |       metadata: createPrivacyMetadata([\n110 |         \"serviceId\": serviceId.uuidString,\n111 |         \"providerType\": self.configuration.providerType.rawValue,\n    |                                            `- error: value of type 'SecurityConfigurationDTO' has no member 'providerType'\n112 |         \"securityLevel\": self.configuration.securityLevel.rawValue\n113 |       ]),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:126:31: error: type 'CoreSecurityError' has no member 'serviceUnavailable'\n124 |   private func validateInitialisation() throws {\n125 |     if !isInitialised {\n126 |       throw CoreSecurityError.serviceUnavailable(reason: \"Security service not initialised\")\n    |                               `- error: type 'CoreSecurityError' has no member 'serviceUnavailable'\n127 |     }\n128 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:155:16: error: type 'SecurityEventStatus' has no member 'started'\n153 |     await secureLogger.securityEvent(\n154 |       action: \"Encrypt\",\n155 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n156 |       subject: nil,\n157 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:165:29: error: ambiguous use of 'notImplemented(reason:)'\n163 |     \n164 |     // Not implemented yet - would delegate to crypto service\n165 |     throw CoreSecurityError.notImplemented(reason: \"Encrypt operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n166 |   }\n167 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:180:16: error: type 'SecurityEventStatus' has no member 'started'\n178 |     await secureLogger.securityEvent(\n179 |       action: \"Decrypt\",\n180 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n181 |       subject: nil,\n182 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:190:29: error: ambiguous use of 'notImplemented(reason:)'\n188 |     \n189 |     // Not implemented yet - would delegate to crypto service\n190 |     throw CoreSecurityError.notImplemented(reason: \"Decrypt operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n191 |   }\n192 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:205:16: error: type 'SecurityEventStatus' has no member 'started'\n203 |     await secureLogger.securityEvent(\n204 |       action: \"GenerateKey\",\n205 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n206 |       subject: nil,\n207 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:215:29: error: ambiguous use of 'notImplemented(reason:)'\n213 |     \n214 |     // Not implemented yet - would delegate to crypto service\n215 |     throw CoreSecurityError.notImplemented(reason: \"Key generation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n216 |   }\n217 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:230:16: error: type 'SecurityEventStatus' has no member 'started'\n228 |     await secureLogger.securityEvent(\n229 |       action: \"SecureStore\",\n230 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n231 |       subject: nil,\n232 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:240:29: error: ambiguous use of 'notImplemented(reason:)'\n238 |     \n239 |     // Not implemented yet - would delegate to crypto service\n240 |     throw CoreSecurityError.notImplemented(reason: \"Secure store operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n241 |   }\n242 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:255:16: error: type 'SecurityEventStatus' has no member 'started'\n253 |     await secureLogger.securityEvent(\n254 |       action: \"SecureRetrieve\",\n255 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n256 |       subject: nil,\n257 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:265:29: error: ambiguous use of 'notImplemented(reason:)'\n263 |     \n264 |     // Not implemented yet - would delegate to crypto service\n265 |     throw CoreSecurityError.notImplemented(reason: \"Secure retrieve operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n266 |   }\n267 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:280:16: error: type 'SecurityEventStatus' has no member 'started'\n278 |     await secureLogger.securityEvent(\n279 |       action: \"SecureDelete\",\n280 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n281 |       subject: nil,\n282 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:290:29: error: ambiguous use of 'notImplemented(reason:)'\n288 |     \n289 |     // Not implemented yet - would delegate to crypto service\n290 |     throw CoreSecurityError.notImplemented(reason: \"Secure delete operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n291 |   }\n292 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:305:16: error: type 'SecurityEventStatus' has no member 'started'\n303 |     await secureLogger.securityEvent(\n304 |       action: \"Sign\",\n305 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n306 |       subject: nil,\n307 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:315:29: error: ambiguous use of 'notImplemented(reason:)'\n313 |     \n314 |     // Not implemented yet - would delegate to crypto service\n315 |     throw CoreSecurityError.notImplemented(reason: \"Sign operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n316 |   }\n317 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:330:16: error: type 'SecurityEventStatus' has no member 'started'\n328 |     await secureLogger.securityEvent(\n329 |       action: \"Verify\",\n330 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n331 |       subject: nil,\n332 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:340:29: error: ambiguous use of 'notImplemented(reason:)'\n338 |     \n339 |     // Not implemented yet - would delegate to crypto service\n340 |     throw CoreSecurityError.notImplemented(reason: \"Verify operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n341 |   }\n342 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:360:16: error: type 'SecurityEventStatus' has no member 'started'\n358 |     await secureLogger.securityEvent(\n359 |       action: \"SecurityOperation\",\n360 |       status: .started,\n    |                `- error: type 'SecurityEventStatus' has no member 'started'\n361 |       subject: nil,\n362 |       resource: nil,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:370:29: error: ambiguous use of 'notImplemented(reason:)'\n368 |     \n369 |     // Not implemented yet\n370 |     throw CoreSecurityError.notImplemented(reason: \"Generic secure operation not implemented\")\n    |                             `- error: ambiguous use of 'notImplemented(reason:)'\n371 |   }\n372 |   \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: note: found this candidate \n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:266:15: note: found this candidate \n264 |   }\n265 |   \n266 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- note: found this candidate \n267 |     return .notImplemented(reason: reason)\n268 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:382:29: error: type 'EncryptionAlgorithm' has no member 'aes256'\n380 |     // Create and return a new configuration based on the provided options\n381 |     return SecurityConfigDTO(\n382 |       encryptionAlgorithm: .aes256,\n    |                             `- error: type 'EncryptionAlgorithm' has no member 'aes256'\n383 |       hashAlgorithm: .sha256,\n384 |       providerType: .standard,\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceActor.swift:384:22: error: type 'SecurityProviderType' has no member 'standard'\n382 |       encryptionAlgorithm: .aes256,\n383 |       hashAlgorithm: .sha256,\n384 |       providerType: .standard,\n    |                      `- error: type 'SecurityProviderType' has no member 'standard'\n385 |       options: options\n386 |     )\n\npackages/UmbraImplementations/Sources/SecurityImplementation/SecurityServiceFactory.swift:15:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 13 |   var metadata = PrivacyMetadata()\n 14 |   for (key, value) in dict {\n 15 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n 16 |   }\n 17 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:296:15: error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n294 | \n295 | extension CoreSecurityError {\n296 |   static func invalidVerificationMethod(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'invalidVerificationMethod(reason:)'\n297 |     return .invalidVerificationMethod(reason: reason)\n298 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:300:15: error: invalid redeclaration of 'verificationFailed(reason:)'\n298 |   }\n299 |   \n300 |   static func verificationFailed(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'verificationFailed(reason:)'\n301 |     return .verificationFailed(reason: reason)\n302 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:304:15: error: invalid redeclaration of 'notImplemented(reason:)'\n302 |   }\n303 |   \n304 |   static func notImplemented(reason: String) -\u003e CoreSecurityError {\n    |               `- error: invalid redeclaration of 'notImplemented(reason:)'\n305 |     return .notImplemented(reason: reason)\n306 |   }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:8:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  6 |   var metadata = PrivacyMetadata()\n  7 |   for (key, value) in dict {\n  8 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  9 |   }\n 10 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:114:39: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n112 |     // Add any additional metadata\n113 |     for (key, value) in additionalMetadata {\n114 |       metricMetadata = metricMetadata.withPublic(key: key, value: value)\n    |                                       `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n115 |     }\n116 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:119:39: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n117 |     // Add historical performance if available\n118 |     if let avgDuration=averagePerformance(for: operation) {\n119 |       metricMetadata = metricMetadata.withPublic(key: \"avgDurationMs\", value: String(format: \"%.2f\", avgDuration))\n    |                                       `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n120 |     }\n121 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:124:20: warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n122 |     // Log the metrics with appropriate level based on success\n123 |     if success {\n124 |       await logger.info(\"Security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n    |                    `- warning: 'info(_:metadata:source:)' is deprecated: Use info(_:context:) instead\n125 |     } else {\n126 |       await logger.warning(\"Failed security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:126:20: warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n124 |       await logger.info(\"Security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n125 |     } else {\n126 |       await logger.warning(\"Failed security operation metrics: \\(operation.description)\", metadata: metricMetadata, source: \"SecurityImplementation\")\n    |                    `- warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n127 |     }\n128 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:185:41: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n183 |     // Add context information\n184 |     for (key, value) in context {\n185 |       anomalyMetadata = anomalyMetadata.withPublic(key: key, value: value)\n    |                                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n186 |     }\n187 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:189:18: warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n187 | \n188 |     // Log the anomaly\n189 |     await logger.warning(\"Performance anomaly detected in \\(operation.description)\", metadata: anomalyMetadata, source: \"SecurityImplementation\")\n    |                  `- warning: 'warning(_:metadata:source:)' is deprecated: Use warning(_:context:) instead\n190 | \n191 |     // Prepare privacy-tagged metadata for secure logger\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityMetricsCollector.swift:286:17: error: type 'LogPrivacyLevel' has no member 'restricted'\n284 |     for pattern in restrictedKeyPatterns {\n285 |       if key.lowercased().contains(pattern) {\n286 |         return .restricted\n    |                 `- error: type 'LogPrivacyLevel' has no member 'restricted'\n287 |       }\n288 |     }\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:8:25: error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  6 |   var metadata = PrivacyMetadata()\n  7 |   for (key, value) in dict {\n  8 |     metadata = metadata.withPublic(key: key, value: value)\n    |                         `- error: value of type 'PrivacyMetadata' has no member 'withPublic'\n  9 |   }\n 10 |   return metadata\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:93:43: error: cannot find 'startTime' in scope\n 91 |   ) async {\n 92 |     // Calculate duration before failure\n 93 |     let duration=Date().timeIntervalSince(startTime) * 1000\n    |                                           `- error: cannot find 'startTime' in scope\n 94 | \n 95 |     // Create error metadata for logging\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:119:70: error: reference to member 'int' cannot be resolved without a contextual type\n117 |         \"operationId\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operationID), privacyLevel: .public),\n118 |         \"operation\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(operation.rawValue), privacyLevel: .public),\n119 |         \"durationMs\": PrivacyTaggedValue(value: PrivacyMetadataValue.int(Int(duration)), privacyLevel: .public),\n    |                                                                      `- error: reference to member 'int' cannot be resolved without a contextual type\n120 |         \"errorType\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(String(describing: type(of: error))), privacyLevel: .public),\n121 |         \"errorDescription\": PrivacyTaggedValue(value: PrivacyMetadataValue.string(sanitizeErrorMessage(error.localizedDescription)), privacyLevel: .sensitive)\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:126:12: error: unexpected non-void return value in void function\n124 | \n125 |     // Return a standardised error result\n126 |     return createErrorResult(error: error, duration: duration)\n    |            |- error: unexpected non-void return value in void function\n    |            `- note: did you mean to add a return type?\n127 |   }\n128 | \n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:193:22: error: cannot find 'operationID' in scope\n191 |     // Create standard metadata\n192 |     let standardMetadata = createPrivacyMetadata([\n193 |       \"operationId\": operationID,\n    |                      `- error: cannot find 'operationID' in scope\n194 |       \"operation\": operation.rawValue,\n195 |       \"durationMs\": String(format: \"%.2f\", duration),\n\npackages/UmbraImplementations/Sources/SecurityImplementation/Utilities/SecurityOperationsErrorHandler.swift:195:44: error: cannot find 'duration' in scope\n193 |       \"operationId\": operationID,\n194 |       \"operation\": operation.rawValue,\n195 |       \"durationMs\": String(format: \"%.2f\", duration),\n    |                                            `- error: cannot find 'duration' in scope\n196 |       \"errorType\": String(describing: type(of: error)),\n197 |       \"errorMessage\": sanitizeErrorMessage(error.localizedDescription)\nTarget //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation failed to build\nINFO: Elapsed time: 4.105s, Critical Path: 4.02s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement",
    "success": true,
    "start_time": "2025-04-09T00:55:24.816048+01:00",
    "end_time": "2025-04-09T00:55:25.623058+01:00",
    "duration": "807.006083ms",
    "output": "INFO: Invocation ID: 37c8ac26-ed53-4817-9787-154f4b673bec\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/SecurityKeyManagement.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/SecurityKeyManagement.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/SecurityKeyManagement.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/libSecurityKeyManagement.a\nINFO: Elapsed time: 0.088s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor",
    "success": true,
    "start_time": "2025-04-09T00:55:25.623064+01:00",
    "end_time": "2025-04-09T00:55:26.373705+01:00",
    "duration": "750.637542ms",
    "output": "INFO: Invocation ID: 4c9b50fd-9354-4af3-92df-8f24b9fd637b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor (2 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/KeyManagementActor.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/KeyManagementActor.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/KeyManagementActor.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/libKeyManagementActor.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes",
    "success": true,
    "start_time": "2025-04-09T00:55:26.373729+01:00",
    "end_time": "2025-04-09T00:55:27.158018+01:00",
    "duration": "784.285417ms",
    "output": "INFO: Invocation ID: da74f24d-8afe-4a56-a525-b5a283249b4e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/KeyManagementActorTypes.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/KeyManagementActorTypes.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/KeyManagementActorTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/libKeyManagementActorTypes.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage",
    "success": true,
    "start_time": "2025-04-09T00:55:27.158028+01:00",
    "end_time": "2025-04-09T00:55:27.979516+01:00",
    "duration": "821.484667ms",
    "output": "INFO: Invocation ID: 94ecc9e7-bf10-48a4-92d8-5033b1bd7193\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/KeyStorage.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/KeyStorage.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/KeyStorage.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/libKeyStorage.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes",
    "success": true,
    "start_time": "2025-04-09T00:55:27.979545+01:00",
    "end_time": "2025-04-09T00:55:28.781183+01:00",
    "duration": "801.634208ms",
    "output": "INFO: Invocation ID: fef40872-a4d6-40cc-9960-3bd6d9cfa45d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/SecurityKeyTypes.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/SecurityKeyTypes.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/SecurityKeyTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/libSecurityKeyTypes.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders",
    "success": true,
    "start_time": "2025-04-09T00:55:28.781191+01:00",
    "end_time": "2025-04-09T00:55:29.590315+01:00",
    "duration": "809.120458ms",
    "output": "INFO: Invocation ID: 0a742b1f-9c4f-47cc-953b-222d20b6e888\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/SecurityProviders.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/SecurityProviders.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/SecurityProviders.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/libSecurityProviders.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils",
    "success": true,
    "start_time": "2025-04-09T00:55:29.590324+01:00",
    "end_time": "2025-04-09T00:55:30.379221+01:00",
    "duration": "788.893875ms",
    "output": "INFO: Invocation ID: 9cd8de83-418d-4978-86a4-e331eef250ef\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/libSecurityUtils.a\nINFO: Elapsed time: 0.075s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/XPCServices:XPCServices",
    "success": true,
    "start_time": "2025-04-09T00:55:30.379248+01:00",
    "end_time": "2025-04-09T00:55:31.152516+01:00",
    "duration": "773.2645ms",
    "output": "INFO: Invocation ID: e3eeed7d-4eae-4c6e-96a4-77e8400d08e4\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/XPCServices:XPCServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/XPCServices:XPCServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/XPCServices:XPCServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/XPCServices:XPCServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/XPCServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/XPCServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/XPCServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/libXPCServices.a\nINFO: Elapsed time: 0.075s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:31.152532+01:00",
    "end_time": "2025-04-09T00:55:31.922655+01:00",
    "duration": "770.119208ms",
    "output": "INFO: Invocation ID: 8224e85f-347f-4dc9-b813-3641bbd7387c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/APIInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/APIInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/APIInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/libAPIInterfaces.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:31.922662+01:00",
    "end_time": "2025-04-09T00:55:32.685933+01:00",
    "duration": "763.267083ms",
    "output": "INFO: Invocation ID: 0fabb881-8f6b-4f15-a3ec-819e474fc22d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/BackupInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/BackupInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/BackupInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/libBackupInterfaces.a\nINFO: Elapsed time: 0.076s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:32.685961+01:00",
    "end_time": "2025-04-09T00:55:33.589179+01:00",
    "duration": "903.214125ms",
    "output": "INFO: Invocation ID: bc5b6500-39fb-4259-968b-a399bc6a2f50\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/CoreInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/CoreInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/CoreInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/libCoreInterfaces.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:33.58919+01:00",
    "end_time": "2025-04-09T00:55:34.376018+01:00",
    "duration": "786.824583ms",
    "output": "INFO: Invocation ID: c6539f41-c656-4edf-8146-7e4132db03ea\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/CryptoInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/CryptoInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/CryptoInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/libCryptoInterfaces.a\nINFO: Elapsed time: 0.076s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:34.376027+01:00",
    "end_time": "2025-04-09T00:55:35.242923+01:00",
    "duration": "866.891875ms",
    "output": "INFO: Invocation ID: 288bd7ca-1bae-450a-a82a-e806e34f8241\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/DateTimeInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/DateTimeInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/DateTimeInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/libDateTimeInterfaces.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:35.242938+01:00",
    "end_time": "2025-04-09T00:55:36.041296+01:00",
    "duration": "798.354333ms",
    "output": "INFO: Invocation ID: af3fa8bf-c3c6-48ba-8ad4-082b7ccb530b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/ErrorHandlingInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/ErrorHandlingInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/ErrorHandlingInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/libErrorHandlingInterfaces.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:36.041304+01:00",
    "end_time": "2025-04-09T00:55:36.823217+01:00",
    "duration": "781.909583ms",
    "output": "INFO: Invocation ID: 870872b5-6aa3-40cd-880e-777fa16185c7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/ErrorLoggingInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/ErrorLoggingInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/ErrorLoggingInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/libErrorLoggingInterfaces.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:36.823226+01:00",
    "end_time": "2025-04-09T00:55:38.034159+01:00",
    "duration": "1.210927875s",
    "output": "INFO: Invocation ID: 9b3c69c6-dc74-4768-bb8e-f04ba5fc93bd\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/libFileSystemInterfaces.a\nINFO: Elapsed time: 0.087s, Critical Path: 0.01s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:38.034187+01:00",
    "end_time": "2025-04-09T00:55:38.841012+01:00",
    "duration": "806.821584ms",
    "output": "INFO: Invocation ID: 37bce468-e986-49e1-87b1-c977cd732526\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/KeychainInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/KeychainInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/KeychainInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/libKeychainInterfaces.a\nINFO: Elapsed time: 0.074s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:38.841017+01:00",
    "end_time": "2025-04-09T00:55:39.952139+01:00",
    "duration": "1.111116834s",
    "output": "INFO: Invocation ID: 18a67225-41de-4ee6-9064-7ffcd5e0e5e5\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/libLoggingInterfaces.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:39.952147+01:00",
    "end_time": "2025-04-09T00:55:40.774554+01:00",
    "duration": "822.402834ms",
    "output": "INFO: Invocation ID: 23948694-11d4-4a3c-b99f-d88db7612db4\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/LoggingWrapperInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/LoggingWrapperInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/LoggingWrapperInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/libLoggingWrapperInterfaces.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:40.774563+01:00",
    "end_time": "2025-04-09T00:55:41.593714+01:00",
    "duration": "819.146875ms",
    "output": "INFO: Invocation ID: af83ab46-23d7-47ff-84fa-36e0ec1b39a3\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/NetworkInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/NetworkInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/NetworkInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/libNetworkInterfaces.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:41.593724+01:00",
    "end_time": "2025-04-09T00:55:42.695899+01:00",
    "duration": "1.10217075s",
    "output": "INFO: Invocation ID: 120b11ce-3c5b-4137-b3b4-0ec51384d09f\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/RepositoryInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/RepositoryInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/RepositoryInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/libRepositoryInterfaces.a\nINFO: Elapsed time: 0.073s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:42.695906+01:00",
    "end_time": "2025-04-09T00:55:43.716088+01:00",
    "duration": "1.020176625s",
    "output": "INFO: Invocation ID: 6bbabcb1-efa5-40a1-9a68-1c985a6e5752\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/libResticInterfaces.a\nINFO: Elapsed time: 0.084s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:43.716099+01:00",
    "end_time": "2025-04-09T00:55:44.649544+01:00",
    "duration": "933.440833ms",
    "output": "INFO: Invocation ID: 576251e8-26d8-4853-9e84-3ea61eed8ba0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityCoreInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityCoreInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityCoreInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/libSecurityCoreInterfaces.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces",
    "success": true,
    "start_time": "2025-04-09T00:55:44.649563+01:00",
    "end_time": "2025-04-09T00:55:45.43373+01:00",
    "duration": "784.163291ms",
    "output": "INFO: Invocation ID: e7616430-8981-4dee-9825-3977dc8b7643\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/SecurityInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/SecurityInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/SecurityInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/libSecurityInterfaces.a\nINFO: Elapsed time: 0.076s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore",
    "success": true,
    "start_time": "2025-04-09T00:55:45.433737+01:00",
    "end_time": "2025-04-09T00:55:46.518013+01:00",
    "duration": "1.084270875s",
    "output": "INFO: Invocation ID: 4f706e47-0c44-443c-bbba-64e53aef20e1\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/XPCProtocolsCore.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/XPCProtocolsCore.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/XPCProtocolsCore.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/libXPCProtocolsCore.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraServices/Sources/LoggingServices:LoggingServices",
    "success": true,
    "start_time": "2025-04-09T00:55:46.518024+01:00",
    "end_time": "2025-04-09T00:55:47.299567+01:00",
    "duration": "781.539583ms",
    "output": "INFO: Invocation ID: f567385f-2a5e-449e-a438-b40ebdc9a315\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraServices/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraServices/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraServices/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraServices/Sources/LoggingServices:LoggingServices up-to-date:\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/LoggingServices.swiftdoc\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/LoggingServices.swiftmodule\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/LoggingServices.swiftsourceinfo\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/libLoggingServices.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  }
]