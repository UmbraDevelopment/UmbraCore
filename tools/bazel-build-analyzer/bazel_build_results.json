[
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:07:23.597413+01:00",
    "end_time": "2025-04-13T09:07:25.8327+01:00",
    "duration": "2.235268916s",
    "output": "INFO: Invocation ID: 2ff07bd4-abbf-4f84-8aa7-ee5bbaaf228e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nLoading: 0 packages loaded\n    currently loading: packages/UmbraCoreTypes/Sources/APIInterfaces\nAnalyzing: target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (4 packages loaded, 7 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (4 packages loaded, 7 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (106 packages loaded, 2813 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/APIInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/APIInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/APIInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/libAPIInterfaces.a\nINFO: Elapsed time: 1.544s, Critical Path: 0.01s\nINFO: 1 process: 63 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/BuildConfig:BuildConfig",
    "success": true,
    "start_time": "2025-04-13T09:07:25.832728+01:00",
    "end_time": "2025-04-13T09:07:26.614114+01:00",
    "duration": "781.379417ms",
    "output": "INFO: Invocation ID: 7c55339b-e544-40b4-aa39-66d57b4a2257\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/BuildConfig:BuildConfig (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/BuildConfig:BuildConfig (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/BuildConfig:BuildConfig (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/BuildConfig:BuildConfig up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/BuildConfig/BuildConfig.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/BuildConfig/BuildConfig.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/BuildConfig/BuildConfig.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/BuildConfig/libBuildConfig.a\nINFO: Elapsed time: 0.095s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:07:26.614121+01:00",
    "end_time": "2025-04-13T09:07:27.461341+01:00",
    "duration": "847.212917ms",
    "output": "INFO: Invocation ID: e1ae2a73-7853-44fe-8e8d-2c60ccf4f51c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces (1 packages loaded, 6 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/ConfigInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/ConfigInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/ConfigInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/libConfigInterfaces.a\nINFO: Elapsed time: 0.105s, Critical Path: 0.01s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs",
    "success": true,
    "start_time": "2025-04-13T09:07:27.461348+01:00",
    "end_time": "2025-04-13T09:07:28.265342+01:00",
    "duration": "803.987ms",
    "output": "INFO: Invocation ID: ce76b413-fb8c-4d2b-b34d-a4d873b407b1\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/libCoreDTOs.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests",
    "success": true,
    "start_time": "2025-04-13T09:07:28.265346+01:00",
    "end_time": "2025-04-13T09:07:29.054046+01:00",
    "duration": "788.693458ms",
    "output": "INFO: Invocation ID: 84a5f11c-f136-4f82-b9e5-46e93d59dfa0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests (0 packages loaded, 1 target configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOsTests.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOsTests.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOsTests.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/libCoreDTOsTests.a\nINFO: Elapsed time: 0.095s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:07:29.054053+01:00",
    "end_time": "2025-04-13T09:07:29.798067+01:00",
    "duration": "744.007791ms",
    "output": "INFO: Invocation ID: 81ddf1d8-99a8-4242-a777-3e15a34e9eff\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces (1 packages loaded, 8 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/CoreInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/CoreInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/CoreInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/libCoreInterfaces.a\nINFO: Elapsed time: 0.087s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes",
    "success": true,
    "start_time": "2025-04-13T09:07:29.798073+01:00",
    "end_time": "2025-04-13T09:07:30.571443+01:00",
    "duration": "773.363917ms",
    "output": "INFO: Invocation ID: f8d4f9f7-28d8-4f2f-9356-a6b770fdfc3e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/libCoreSecurityTypes.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:07:30.571448+01:00",
    "end_time": "2025-04-13T09:07:31.383499+01:00",
    "duration": "812.043625ms",
    "output": "INFO: Invocation ID: 4c04e20a-665e-48c0-b9dd-7df431708c81\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces (2 packages loaded, 16 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/CryptoInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/CryptoInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/CryptoInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/libCryptoInterfaces.a\nINFO: Elapsed time: 0.127s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes",
    "success": true,
    "start_time": "2025-04-13T09:07:31.383507+01:00",
    "end_time": "2025-04-13T09:07:32.170044+01:00",
    "duration": "786.530625ms",
    "output": "INFO: Invocation ID: 3e3be388-f299-4fd7-8986-54f49e333079\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/CryptoTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/CryptoTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/CryptoTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/libCryptoTypes.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes",
    "success": true,
    "start_time": "2025-04-13T09:07:32.170052+01:00",
    "end_time": "2025-04-13T09:07:32.977759+01:00",
    "duration": "807.699625ms",
    "output": "INFO: Invocation ID: 9c729bca-4f0d-4a58-9d98-9286772589aa\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/DateTimeTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/DateTimeTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/DateTimeTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/libDateTimeTypes.a\nINFO: Elapsed time: 0.103s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes",
    "success": true,
    "start_time": "2025-04-13T09:07:32.977765+01:00",
    "end_time": "2025-04-13T09:07:33.800664+01:00",
    "duration": "822.892084ms",
    "output": "INFO: Invocation ID: 7ef4c539-a5f8-4a23-955a-d96280096bcf\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/DomainSecurityTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/DomainSecurityTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/DomainSecurityTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/libDomainSecurityTypes.a\nINFO: Elapsed time: 0.135s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes",
    "success": true,
    "start_time": "2025-04-13T09:07:33.800686+01:00",
    "end_time": "2025-04-13T09:07:34.589611+01:00",
    "duration": "788.918333ms",
    "output": "INFO: Invocation ID: 8455dfe8-2035-4d33-a9c4-077887bf94d6\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/ErrorCoreTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/ErrorCoreTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/ErrorCoreTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/libErrorCoreTypes.a\nINFO: Elapsed time: 0.089s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/FileSystemCommonTypes:FileSystemCommonTypes",
    "success": true,
    "start_time": "2025-04-13T09:07:34.589618+01:00",
    "end_time": "2025-04-13T09:07:35.381997+01:00",
    "duration": "792.3725ms",
    "output": "INFO: Invocation ID: b9f71da2-8ced-4dfe-a845-cf5406f5ce23\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/FileSystemCommonTypes:FileSystemCommonTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/FileSystemCommonTypes:FileSystemCommonTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/FileSystemCommonTypes:FileSystemCommonTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/FileSystemCommonTypes:FileSystemCommonTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemCommonTypes/FileSystemCommonTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemCommonTypes/FileSystemCommonTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemCommonTypes/FileSystemCommonTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemCommonTypes/libFileSystemCommonTypes.a\nINFO: Elapsed time: 0.092s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes",
    "success": true,
    "start_time": "2025-04-13T09:07:35.382004+01:00",
    "end_time": "2025-04-13T09:07:36.170199+01:00",
    "duration": "788.188875ms",
    "output": "INFO: Invocation ID: 5bda6146-74e8-4fb0-96c8-b4fc8457b066\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes (1 packages loaded, 9 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/FileSystemTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/FileSystemTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/FileSystemTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/libFileSystemTypes.a\nINFO: Elapsed time: 0.088s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes",
    "success": true,
    "start_time": "2025-04-13T09:07:36.170206+01:00",
    "end_time": "2025-04-13T09:07:36.936856+01:00",
    "duration": "766.643875ms",
    "output": "INFO: Invocation ID: f61000ed-01c0-47c4-8d60-b1d97ab44acf\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes (3 packages loaded, 29 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/libKeyManagementTypes.a\nINFO: Elapsed time: 0.094s, Critical Path: 0.00s\nINFO: 1 process: 7 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests",
    "success": true,
    "start_time": "2025-04-13T09:07:36.936863+01:00",
    "end_time": "2025-04-13T09:07:37.718642+01:00",
    "duration": "781.773417ms",
    "output": "INFO: Invocation ID: a3809325-acf0-4585-b7ab-e2f7d831ed45\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests (0 packages loaded, 1 target configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypesTests.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypesTests.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypesTests.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/libKeyManagementTypesTests.a\nINFO: Elapsed time: 0.091s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes",
    "success": true,
    "start_time": "2025-04-13T09:07:37.71865+01:00",
    "end_time": "2025-04-13T09:07:38.517059+01:00",
    "duration": "798.402833ms",
    "output": "INFO: Invocation ID: 3d79234e-f073-4a94-9c40-1a4cdb95af5d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes (2 packages loaded, 9 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/KeychainTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/KeychainTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/KeychainTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/libKeychainTypes.a\nINFO: Elapsed time: 0.089s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes",
    "success": true,
    "start_time": "2025-04-13T09:07:38.517067+01:00",
    "end_time": "2025-04-13T09:07:39.334348+01:00",
    "duration": "817.273584ms",
    "output": "INFO: Invocation ID: ed8e0216-255e-4d46-bab0-c9978b7d76f2\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/libLoggingTypes.a\nINFO: Elapsed time: 0.075s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/Notification:Notification",
    "success": true,
    "start_time": "2025-04-13T09:07:39.334354+01:00",
    "end_time": "2025-04-13T09:07:40.163068+01:00",
    "duration": "828.707125ms",
    "output": "INFO: Invocation ID: bfb4f4a8-da76-470e-9e8a-fcb6271d64ab\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Notification:Notification (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Notification:Notification (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/Notification:Notification (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/Notification:Notification up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/Notification.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/Notification.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/Notification.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/libNotification.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling",
    "success": true,
    "start_time": "2025-04-13T09:07:40.163071+01:00",
    "end_time": "2025-04-13T09:07:40.957552+01:00",
    "duration": "794.474125ms",
    "output": "INFO: Invocation ID: 617146d1-f262-45dd-9f3c-94ac8e7ac76f\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling (1 packages loaded, 5 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/Scheduling.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/Scheduling.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/Scheduling.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/libScheduling.a\nINFO: Elapsed time: 0.095s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SchedulingTypes:SchedulingTypes",
    "success": true,
    "start_time": "2025-04-13T09:07:40.957556+01:00",
    "end_time": "2025-04-13T09:07:41.78823+01:00",
    "duration": "830.666833ms",
    "output": "INFO: Invocation ID: ff9d15f6-8e29-43e8-8a29-fef2690cee76\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SchedulingTypes:SchedulingTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SchedulingTypes:SchedulingTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SchedulingTypes:SchedulingTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SchedulingTypes:SchedulingTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SchedulingTypes/SchedulingTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SchedulingTypes/SchedulingTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SchedulingTypes/SchedulingTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SchedulingTypes/libSchedulingTypes.a\nINFO: Elapsed time: 0.126s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:07:41.788234+01:00",
    "end_time": "2025-04-13T09:07:42.509426+01:00",
    "duration": "721.185334ms",
    "output": "INFO: Invocation ID: c757cab6-e4f7-4354-8989-d37935927d9a\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/SecurityInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/SecurityInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/SecurityInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/libSecurityInterfaces.a\nINFO: Elapsed time: 0.076s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters",
    "success": true,
    "start_time": "2025-04-13T09:07:42.509431+01:00",
    "end_time": "2025-04-13T09:07:43.309871+01:00",
    "duration": "800.433167ms",
    "output": "INFO: Invocation ID: b1c26182-b426-4b08-a909-37405389b2f9\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters (3 packages loaded, 17 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/SecurityInterfacesAdapters.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/SecurityInterfacesAdapters.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/SecurityInterfacesAdapters.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/libSecurityInterfacesAdapters.a\nINFO: Elapsed time: 0.094s, Critical Path: 0.00s\nINFO: 1 process: 7 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs",
    "success": true,
    "start_time": "2025-04-13T09:07:43.30989+01:00",
    "end_time": "2025-04-13T09:07:44.101586+01:00",
    "duration": "791.689792ms",
    "output": "INFO: Invocation ID: 2146225b-0461-4a77-9ad6-49bd9b21ab87\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/SecurityInterfacesDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/SecurityInterfacesDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/SecurityInterfacesDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/libSecurityInterfacesDTOs.a\nINFO: Elapsed time: 0.120s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels",
    "success": true,
    "start_time": "2025-04-13T09:07:44.101591+01:00",
    "end_time": "2025-04-13T09:07:44.87464+01:00",
    "duration": "773.042542ms",
    "output": "INFO: Invocation ID: ee8a5de7-e0f2-4bda-9bac-885823af3306\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/SecurityInterfacesModels.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/SecurityInterfacesModels.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/SecurityInterfacesModels.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/libSecurityInterfacesModels.a\nINFO: Elapsed time: 0.089s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols",
    "success": true,
    "start_time": "2025-04-13T09:07:44.874646+01:00",
    "end_time": "2025-04-13T09:07:45.663015+01:00",
    "duration": "788.361959ms",
    "output": "INFO: Invocation ID: c0cf6296-399c-49b6-aecc-10990e4fab85\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/libSecurityInterfacesProtocols.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes",
    "success": true,
    "start_time": "2025-04-13T09:07:45.66302+01:00",
    "end_time": "2025-04-13T09:07:46.443115+01:00",
    "duration": "780.088042ms",
    "output": "INFO: Invocation ID: 52a9c16c-a4ce-4330-a339-ee8e6173fae0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/SecurityInterfacesTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/SecurityInterfacesTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/SecurityInterfacesTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/libSecurityInterfacesTypes.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC",
    "success": true,
    "start_time": "2025-04-13T09:07:46.44312+01:00",
    "end_time": "2025-04-13T09:07:47.239489+01:00",
    "duration": "796.362208ms",
    "output": "INFO: Invocation ID: dbacba62-f21c-4609-8fa2-280c0ae54507\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/SecurityInterfacesXPC.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/SecurityInterfacesXPC.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/SecurityInterfacesXPC.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/libSecurityInterfacesXPC.a\nINFO: Elapsed time: 0.082s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes",
    "success": true,
    "start_time": "2025-04-13T09:07:47.239495+01:00",
    "end_time": "2025-04-13T09:07:48.012073+01:00",
    "duration": "772.572041ms",
    "output": "INFO: Invocation ID: 72516b27-4241-42f3-89d6-9be3eba0efcc\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes (1 packages loaded, 3 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/SecurityKeyTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/SecurityKeyTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/SecurityKeyTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/libSecurityKeyTypes.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors",
    "success": true,
    "start_time": "2025-04-13T09:07:48.012078+01:00",
    "end_time": "2025-04-13T09:07:48.787172+01:00",
    "duration": "775.087875ms",
    "output": "INFO: Invocation ID: 13c1f731-7edc-4ec0-9d13-7169c58a9b06\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/UmbraErrors.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/UmbraErrors.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/UmbraErrors.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/libUmbraErrors.a\nINFO: Elapsed time: 0.093s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore",
    "success": true,
    "start_time": "2025-04-13T09:07:48.787176+01:00",
    "end_time": "2025-04-13T09:07:49.55723+01:00",
    "duration": "770.047875ms",
    "output": "INFO: Invocation ID: dae86591-313c-42e6-bf51-a6cfe574e91d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/UmbraErrorsCore.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/UmbraErrorsCore.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/UmbraErrorsCore.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/libUmbraErrorsCore.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs",
    "success": true,
    "start_time": "2025-04-13T09:07:49.557236+01:00",
    "end_time": "2025-04-13T09:07:50.322861+01:00",
    "duration": "765.618792ms",
    "output": "INFO: Invocation ID: 0c45ec6b-ef1c-4c7b-9817-c8cb338897df\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/UmbraErrorsDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/UmbraErrorsDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/UmbraErrorsDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/libUmbraErrorsDTOs.a\nINFO: Elapsed time: 0.066s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains",
    "success": true,
    "start_time": "2025-04-13T09:07:50.322869+01:00",
    "end_time": "2025-04-13T09:07:51.110878+01:00",
    "duration": "788.002625ms",
    "output": "INFO: Invocation ID: 4185cb30-de4e-40ba-826f-c26ac490bb17\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/UmbraErrorsDomains.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/UmbraErrorsDomains.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/UmbraErrorsDomains.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/libUmbraErrorsDomains.a\nINFO: Elapsed time: 0.082s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping",
    "success": true,
    "start_time": "2025-04-13T09:07:51.110888+01:00",
    "end_time": "2025-04-13T09:07:51.922721+01:00",
    "duration": "811.826417ms",
    "output": "INFO: Invocation ID: f69908fc-a5ca-4940-8452-f13ca13fb513\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/UmbraErrorsMapping.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/UmbraErrorsMapping.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/UmbraErrorsMapping.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/libUmbraErrorsMapping.a\nINFO: Elapsed time: 0.089s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults",
    "success": true,
    "start_time": "2025-04-13T09:07:51.922726+01:00",
    "end_time": "2025-04-13T09:07:52.722715+01:00",
    "duration": "799.982333ms",
    "output": "INFO: Invocation ID: 552c6c76-2158-4b5a-a111-d1e91a821b74\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/UserDefaults.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/UserDefaults.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/UserDefaults.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/libUserDefaults.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters",
    "success": true,
    "start_time": "2025-04-13T09:07:52.72272+01:00",
    "end_time": "2025-04-13T09:07:53.475075+01:00",
    "duration": "752.3495ms",
    "output": "INFO: Invocation ID: 2c7fd178-3176-4fa8-b12f-e83fbd0cbf13\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/UserDefaultsAdapters.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/UserDefaultsAdapters.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/UserDefaultsAdapters.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/libUserDefaultsAdapters.a\nINFO: Elapsed time: 0.072s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs",
    "success": true,
    "start_time": "2025-04-13T09:07:53.475079+01:00",
    "end_time": "2025-04-13T09:07:54.240214+01:00",
    "duration": "765.128084ms",
    "output": "INFO: Invocation ID: 0cba4e2c-8487-4a12-ae5c-e7e1b29a6bbe\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/UserDefaultsDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/UserDefaultsDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/UserDefaultsDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/libUserDefaultsDTOs.a\nINFO: Elapsed time: 0.069s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/APIServices:APIServices",
    "success": false,
    "start_time": "2025-04-13T09:07:54.240218+01:00",
    "end_time": "2025-04-13T09:07:55.810379+01:00",
    "duration": "1.57014825s",
    "output": "INFO: Invocation ID: d584905e-58e0-4fbc-a228-6310c7155929\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/APIServices:APIServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/APIServices:APIServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/APIServices:APIServices (23 packages loaded, 239 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServicesCore/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServicesCore.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceFactory.swift:73:35: warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 71 |             // This comment acknowledges we're deliberately using a deprecated method for testing purposes.\n 72 |             // We accept the warning as this is explicitly for testing environments.\n 73 |             actualSecureStorage = createMockSecureStorage()\n    |                                   `- warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 74 |         }\n 75 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceType.swift:58:9: error: switch must be exhaustive\n56 |     /// - Returns: The equivalent CryptoServiceType\n57 |     public static func from(providerType: SecurityProviderType) -\u003e CryptoServiceType {\n58 |         switch providerType {\n   |         |- error: switch must be exhaustive\n   |         |- note: add missing case: '.cryptoKit'\n   |         |- note: add missing case: '.system'\n   |         |- note: add missing case: '.hsm'\n   |         |- note: add missing case: '.platform'\n   |         `- note: add missing cases\n59 |         case .basic:\n60 |             return .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:74:34: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 72 |     // Validate minimum size (header + iv)\n 73 |     if packagedData.count \u003c headerSize + ivSize {\n 74 |       throw SecurityStorageError.invalidDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 75 |     }\n 76 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:80:36: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 78 |     for i in 0..\u003c4 {\n 79 |       if packagedData[i] != magicBytes[i] {\n 80 |         throw SecurityStorageError.invalidDataFormat\n    |                                    `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 81 |       }\n 82 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:87:34: error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 85 |     let version = packagedData[4]\n 86 |     if version \u003e formatVersion {\n 87 |       throw SecurityStorageError.unsupportedDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 88 |     }\n 89 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: extra arguments at positions #2, #3 in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: extra arguments at positions #2, #3 in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:172:19: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n170 |     \n171 |     return SecurityResultDTO(\n172 |       resultData: packagedData,\n    |                   `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:174:16: error: cannot infer contextual base in reference to member 'standard'\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n    |                `- error: cannot infer contextual base in reference to member 'standard'\n175 |     )\n176 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:182:14: error: cannot find 'kCCModeGCM' in scope\n180 |     let status = CCCryptorCreateWithMode(\n181 |       CCOperation(kCCEncrypt),\n182 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n183 |       CCAlgorithm(kCCAlgorithmAES),\n184 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:192:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n190 |     \n191 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n192 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n193 |     }\n194 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:201:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n199 |     // Process additional authenticated data if provided\n200 |     if let aad = authenticatedData, !aad.isEmpty {\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:203:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n204 |       }\n205 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:217:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n215 |     \n216 |     guard encStatus == kCCSuccess else {\n217 |       throw SecurityProviderError.encryptionFailed(encStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n218 |     }\n219 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:19: error: generic parameter 'Element' could not be inferred\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |                   `- error: generic parameter 'Element' could not be inferred\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:230:35: error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n228 |     \n229 |     guard finalStatus == kCCSuccess else {\n230 |       throw SecurityProviderError.encryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n231 |     }\n232 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:234:21: error: cannot find 'CCCryptorGCMFinal' in scope\n232 |     \n233 |     // Get the authentication tag\n234 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n235 |       cryptor,\n236 |       \u0026tagBuffer,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:241:35: error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n239 |     \n240 |     guard tagStatus == kCCSuccess else {\n241 |       throw SecurityProviderError.authenticationTagGenerationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n242 |     }\n243 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:278:35: error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n276 |     // Validate data length (must include tag)\n277 |     guard data.count \u003e= gcmTagLength else {\n278 |       throw SecurityProviderError.invalidDataFormat\n    |                                   `- error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n279 |     }\n280 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:293:14: error: cannot find 'kCCModeGCM' in scope\n291 |     let status = CCCryptorCreateWithMode(\n292 |       CCOperation(kCCDecrypt),\n293 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n294 |       CCAlgorithm(kCCAlgorithmAES),\n295 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:303:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n301 |     \n302 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n303 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n304 |     }\n305 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:312:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n310 |     // Process additional authenticated data if provided\n311 |     if let aad = authenticatedData, !aad.isEmpty {\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:314:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n315 |       }\n316 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:328:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n326 |     \n327 |     guard decStatus == kCCSuccess else {\n328 |       throw SecurityProviderError.decryptionFailed(decStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n329 |     }\n330 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:18: error: generic parameter 'Element' could not be inferred\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |                  `- error: generic parameter 'Element' could not be inferred\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:341:35: error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n339 |     \n340 |     guard finalStatus == kCCSuccess else {\n341 |       throw SecurityProviderError.decryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n342 |     }\n343 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:346:21: error: cannot find 'CCCryptorGCMFinal' in scope\n344 |     // Verify the authentication tag\n345 |     var expectedTag = [UInt8](repeating: 0, count: gcmTagLength)\n346 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n347 |       cryptor,\n348 |       \u0026expectedTag,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:353:35: error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n351 |     \n352 |     guard tagStatus == kCCSuccess else {\n353 |       throw SecurityProviderError.authenticationTagVerificationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n354 |     }\n355 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:358:35: error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n356 |     // Compare tags\n357 |     guard tag.count == expectedTag.count \u0026\u0026 zip(tag, expectedTag).allSatisfy({ $0 == $1 }) else {\n358 |       throw SecurityProviderError.authenticationTagMismatch\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n359 |     }\n360 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:406:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n404 |     \n405 |     guard status == kCCSuccess else {\n406 |       throw SecurityProviderError.encryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n407 |     }\n408 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:443:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n441 |     \n442 |     guard status == kCCSuccess else {\n443 |       throw SecurityProviderError.decryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n444 |     }\n445 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:465:66: error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n463 |       // BLAKE2b is not directly supported in CommonCrypto\n464 |       // This would require a platform-specific implementation or use of a third-party library\n465 |       throw SecurityProviderError.unsupportedAlgorithm(algorithm.rawValue)\n    |                                                                  `- error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n466 |     }\n467 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:116:19: error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n114 |         // Check for specific error domains and codes\n115 |         if nsError.domain == NSOSStatusErrorDomain {\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:118:19: error: type 'SecurityStorageError' has no member 'systemError'\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'systemError'\n119 |         }\n120 |         \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:121:32: error: extra arguments at positions #2, #3 in call\n119 |         }\n120 |         \n121 |         return .operationFailed(error.localizedDescription, file: file, line: line)\n    |                                `- error: extra arguments at positions #2, #3 in call\n122 |       }\n123 |       \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProtocolError.swift:51:8: note: 'operationFailed' declared here\n 49 | \n 50 |   /// Generic operation failure with optional message\n 51 |   case operationFailed(String)\n    |        `- note: 'operationFailed' declared here\n 52 | \n 53 |   /// Invalid input provided to the operation\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:126:17: error: type 'SecurityStorageError' has no member 'unknownError'\n124 |       // If no error but also no result, it's a failure\n125 |       if result == nil {\n126 |         return .unknownError(file: file, line: line)\n    |                 `- error: type 'SecurityStorageError' has no member 'unknownError'\n127 |       }\n128 |       \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:130:15: error: type 'SecurityStorageError' has no member 'unknownError'\n128 |       \n129 |       // Default to unknown error\n130 |       return .unknownError(file: file, line: line)\n    |               `- error: type 'SecurityStorageError' has no member 'unknownError'\n131 |     }\n132 |   }\nTarget //packages/UmbraImplementations/Sources/APIServices:APIServices failed to build\nINFO: Elapsed time: 0.848s, Critical Path: 0.71s\nINFO: 2 processes: 41 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator",
    "success": false,
    "start_time": "2025-04-13T09:07:55.81039+01:00",
    "end_time": "2025-04-13T09:08:12.006986+01:00",
    "duration": "16.196460542s",
    "output": "INFO: Invocation ID: 024f97e1-5bdd-4106-b059-5701389ed63f\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator (11 packages loaded, 163 targets configured).\n[21 / 24] Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices; 1s disk-cache, worker\n[21 / 24] Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices; 12s disk-cache, worker\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/BackupServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/BackupServices:BackupServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/BackupServices/BackupServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:41:3: error: expected 'func' keyword in instance method declaration\n 39 | public class BaseBackupCommand {\n 40 |   /// The Restic service to use for operations\n 41 |   protected let resticService: ResticServiceProtocol\n    |   `- error: expected 'func' keyword in instance method declaration\n 42 | \n 43 |   /// Repository connection information\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:41:13: error: expected '(' in argument list of function declaration\n 39 | public class BaseBackupCommand {\n 40 |   /// The Restic service to use for operations\n 41 |   protected let resticService: ResticServiceProtocol\n    |             `- error: expected '(' in argument list of function declaration\n 42 | \n 43 |   /// Repository connection information\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:41:12: error: consecutive declarations on a line must be separated by ';'\n 39 | public class BaseBackupCommand {\n 40 |   /// The Restic service to use for operations\n 41 |   protected let resticService: ResticServiceProtocol\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 42 | \n 43 |   /// Repository connection information\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:3: error: expected 'func' keyword in instance method declaration\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |   `- error: expected 'func' keyword in instance method declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:13: error: expected '(' in argument list of function declaration\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |             `- error: expected '(' in argument list of function declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:12: error: consecutive declarations on a line must be separated by ';'\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:3: error: expected 'func' keyword in instance method declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |   `- error: expected 'func' keyword in instance method declaration\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:13: error: expected '(' in argument list of function declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |             `- error: expected '(' in argument list of function declaration\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:12: error: consecutive declarations on a line must be separated by ';'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:3: error: expected 'func' keyword in instance method declaration\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |   `- error: expected 'func' keyword in instance method declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:13: error: expected '(' in argument list of function declaration\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |             `- error: expected '(' in argument list of function declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:12: error: consecutive declarations on a line must be separated by ';'\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:3: error: expected 'func' keyword in instance method declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |   `- error: expected 'func' keyword in instance method declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:13: error: expected '(' in argument list of function declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |             `- error: expected '(' in argument list of function declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:12: error: consecutive declarations on a line must be separated by ';'\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:3: error: expected 'func' keyword in instance method declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |   `- error: expected 'func' keyword in instance method declaration\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:13: error: expected '(' in argument list of function declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |             `- error: expected '(' in argument list of function declaration\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:12: error: consecutive declarations on a line must be separated by ';'\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:3: error: expected 'func' keyword in instance method declaration\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |   `- error: expected 'func' keyword in instance method declaration\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:13: error: expected '(' in argument list of function declaration\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |             `- error: expected '(' in argument list of function declaration\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:12: error: consecutive declarations on a line must be separated by ';'\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:3: error: expected 'func' keyword in instance method declaration\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |   `- error: expected 'func' keyword in instance method declaration\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:13: error: expected '(' in argument list of function declaration\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |             `- error: expected '(' in argument list of function declaration\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:12: error: consecutive declarations on a line must be separated by ';'\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |            `- error: consecutive declarations on a line must be separated by ';'\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:3: error: expected 'func' keyword in instance method declaration\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:13: error: expected '(' in argument list of function declaration\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:12: error: consecutive declarations on a line must be separated by ';'\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:3: error: expected 'func' keyword in instance method declaration\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:13: error: expected '(' in argument list of function declaration\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:12: error: consecutive declarations on a line must be separated by ';'\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:3: error: expected 'func' keyword in instance method declaration\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:13: error: expected '(' in argument list of function declaration\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:12: error: consecutive declarations on a line must be separated by ';'\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:3: error: expected 'func' keyword in instance method declaration\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:13: error: expected '(' in argument list of function declaration\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:12: error: consecutive declarations on a line must be separated by ';'\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:3: error: expected 'func' keyword in instance method declaration\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |   `- error: expected 'func' keyword in instance method declaration\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:13: error: expected '(' in argument list of function declaration\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |             `- error: expected '(' in argument list of function declaration\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:12: error: consecutive declarations on a line must be separated by ';'\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |            `- error: consecutive declarations on a line must be separated by ';'\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:3: error: invalid redeclaration of 'protected()'\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |   `- error: invalid redeclaration of 'protected()'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:3: error: invalid redeclaration of 'protected()'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |   `- error: invalid redeclaration of 'protected()'\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:33: error: cannot find type 'BackupCommandFactory' in scope\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |                                 `- error: cannot find type 'BackupCommandFactory' in scope\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:3: error: invalid redeclaration of 'protected()'\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |   `- error: invalid redeclaration of 'protected()'\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:3: error: invalid redeclaration of 'protected()'\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |   `- error: invalid redeclaration of 'protected()'\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:3: error: invalid redeclaration of 'protected()'\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |   `- error: invalid redeclaration of 'protected()'\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:72:21: error: cannot find type 'BackupCommandFactory' in scope\n 70 |     resticService: ResticServiceProtocol,\n 71 |     repositoryInfo: RepositoryInfo,\n 72 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 73 |     resultParser: BackupResultParser,\n 74 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:3: error: invalid redeclaration of 'protected()'\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |   `- error: invalid redeclaration of 'protected()'\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:3: error: invalid redeclaration of 'protected()'\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |   `- error: invalid redeclaration of 'protected()'\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:3: error: invalid redeclaration of 'protected()'\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:3: error: invalid redeclaration of 'protected()'\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:3: error: invalid redeclaration of 'protected()'\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:3: error: invalid redeclaration of 'protected()'\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:3: error: invalid redeclaration of 'protected()'\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |   `- error: invalid redeclaration of 'protected()'\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:185:6: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n    |      `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n187 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: error: invalid redeclaration of 'BackupCreateParameters'\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- error: invalid redeclaration of 'BackupCreateParameters'\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: error: invalid redeclaration of 'BackupRestoreParameters'\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- error: invalid redeclaration of 'BackupRestoreParameters'\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: error: invalid redeclaration of 'BackupDeleteParameters'\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- error: invalid redeclaration of 'BackupDeleteParameters'\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: error: invalid redeclaration of 'BackupMaintenanceParameters'\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- error: invalid redeclaration of 'BackupMaintenanceParameters'\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:18:27: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for backup creation\n 18 |   private let parameters: BackupCreateParameters\n    |                           `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:21:15: note: found this candidate\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:41:17: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupCreateParameters,\n    |                 `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:21:15: note: found this candidate\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupCreateParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:18:27: error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for deleting a backup\n 18 |   private let parameters: BackupDeleteParameters\n    |                           `- error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: note: found this candidate\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- note: found this candidate\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:249:15: note: found this candidate\n247 |  * Parameters for deleting a backup.\n248 |  */\n249 | public struct BackupDeleteParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n250 |   /// ID of the snapshot to delete\n251 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:41:17: error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupDeleteParameters,\n    |                 `- error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: note: found this candidate\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- note: found this candidate\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:249:15: note: found this candidate\n247 |  * Parameters for deleting a backup.\n248 |  */\n249 | public struct BackupDeleteParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n250 |   /// ID of the snapshot to delete\n251 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupDeleteParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/ListSnapshotsCommand.swift:36:21: error: cannot find type 'BackupCommandFactory' in scope\n 34 |     resticService: ResticServiceProtocol,\n 35 |     repositoryInfo: RepositoryInfo,\n 36 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 37 |     resultParser: BackupResultParser,\n 38 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:18:27: error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for maintenance operation\n 18 |   private let parameters: BackupMaintenanceParameters\n    |                           `- error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: note: found this candidate\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- note: found this candidate\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:292:15: note: found this candidate\n290 |  * Parameters for performing repository maintenance.\n291 |  */\n292 | public struct BackupMaintenanceParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n293 |   /// Type of maintenance to perform\n294 |   public let maintenanceType: MaintenanceType\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:41:17: error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupMaintenanceParameters,\n    |                 `- error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: note: found this candidate\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- note: found this candidate\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:292:15: note: found this candidate\n290 |  * Parameters for performing repository maintenance.\n291 |  */\n292 | public struct BackupMaintenanceParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n293 |   /// Type of maintenance to perform\n294 |   public let maintenanceType: MaintenanceType\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupMaintenanceParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:18:27: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for backup restoration\n 18 |   private let parameters: BackupRestoreParameters\n    |                           `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:96:15: note: found this candidate\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:41:17: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupRestoreParameters,\n    |                 `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:96:15: note: found this candidate\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupRestoreParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupVerificationParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:149:17: error: cannot find type 'BackupProgress' in scope\n147 |    */\n148 |   public func logProgressUpdate(\n149 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n150 |     for operation: BackupOperation,\n151 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:46:31: error: cannot find type 'BackupCommandFactory' in scope\n 44 | \n 45 |   /// Factory for creating backup commands\n 46 |   private let commandFactory: BackupCommandFactory\n    |                               `- error: cannot find type 'BackupCommandFactory' in scope\n 47 | \n 48 |   /// The backup logger\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:55:60: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 53 | \n 54 |   /// Active operation cancellation tokens\n 55 |   private var activeOperationsCancellationTokens: [String: BackupOperationCancellationTokenImpl]=[:]\n    |                                                            `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 56 | \n 57 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:104:24: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n102 |     operationID: String,\n103 |     type: BackupOperationType,\n104 |     cancellationToken: BackupOperationCancellationTokenImpl?=nil\n    |                        `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n105 |   ) {\n106 |     let uuid=UUID()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:519:45: error: cannot find type 'VerificationResult' in scope\n517 |     snapshotID: String,\n518 |     verifyOptions: VerifyOptions?=nil\n519 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n520 |     // Create a log context\n521 |     let logContext=LogContextDTO(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:42:14: error: type 'BackupServiceWithCommands' does not conform to protocol 'BackupServiceProtocol'\n 40 |  - Progress reporting through AsyncStream\n 41 |  */\n 42 | public actor BackupServiceWithCommands: BackupServiceProtocol {\n    |              |- error: type 'BackupServiceWithCommands' does not conform to protocol 'BackupServiceProtocol'\n    |              `- note: add stubs for conformance\n 43 |   // MARK: - Properties\n 44 | \n    :\n587 |    - Returns: True if cancellation was successful, false otherwise\n588 |    */\n589 |   public func cancelOperation(operationID: String) async -\u003e Bool {\n    |               `- note: candidate has non-matching type '(String) async -\u003e Bool'\n590 |     // Get the cancellation token\n591 |     if let token=activeOperationsCancellationTokens[operationID] {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Protocols/BackupServiceProtocol.swift:58:8: note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 56 |    * - Returns: A Result containing either the operation response or an error\n 57 |    */\n 58 |   func createBackup(\n    |        `- note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 59 |     sources: [URL],\n 60 |     excludePaths: [URL]?,\n    :\n 77 |    * - Returns: A Result containing either the operation response or an error\n 78 |    */\n 79 |   func restoreBackup(\n    |        `- note: protocol requires function 'restoreBackup(snapshotID:targetPath:includePaths:excludePaths:restoreOptions:)' with type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 80 |     snapshotID: String,\n 81 |     targetPath: URL,\n    :\n 99 |    * - Returns: A Result containing either the list of snapshots or an error\n100 |    */\n101 |   func listSnapshots(\n    |        `- note: protocol requires function 'listSnapshots(tags:before:after:listOptions:)' with type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n102 |     tags: [String]?,\n103 |     before: Date?,\n    :\n117 |    * - Returns: A Result containing either the operation response or an error\n118 |    */\n119 |   func deleteBackup(\n    |        `- note: protocol requires function 'deleteBackup(snapshotID:deleteOptions:)' with type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n120 |     snapshotID: String,\n121 |     deleteOptions: DeleteOptions?\n    :\n134 |    * - Returns: A Result containing either the operation response or an error\n135 |    */\n136 |   func performMaintenance(\n    |        `- note: protocol requires function 'performMaintenance(type:maintenanceOptions:)' with type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n137 |     type: MaintenanceType,\n138 |     maintenanceOptions: MaintenanceOptions?\n    :\n166 |    *            doesn't exist or cannot be cancelled\n167 |    */\n168 |   func cancelOperation(operationID: UUID) async -\u003e Bool\n    |        `- note: protocol requires function 'cancelOperation(operationID:)' with type '(UUID) async -\u003e Bool'\n169 | }\n170 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:78:20: error: cannot find 'BackupCommandFactory' in scope\n 76 | \n 77 |     // Create the backup command factory\n 78 |     commandFactory=BackupCommandFactory(\n    |                    `- error: cannot find 'BackupCommandFactory' in scope\n 79 |       resticService: resticService,\n 80 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:47:31: error: cannot find type 'BackupCommandFactory' in scope\n 45 | \n 46 |   /// Factory for creating backup commands\n 47 |   private let commandFactory: BackupCommandFactory\n    |                               `- error: cannot find type 'BackupCommandFactory' in scope\n 48 | \n 49 |   /// The Restic command factory\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:71:60: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 69 | \n 70 |   /// Active operation cancellation tokens\n 71 |   private var activeOperationsCancellationTokens: [String: BackupOperationCancellationTokenImpl]=[:]\n    |                                                            `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 72 | \n 73 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:124:24: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n122 |     operationID: String,\n123 |     type: BackupOperationType,\n124 |     cancellationToken: BackupOperationCancellationTokenImpl?=nil\n    |                        `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n125 |   ) {\n126 |     let uuid=UUID()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:539:45: error: cannot find type 'VerificationResult' in scope\n537 |     snapshotID: String,\n538 |     verifyOptions: VerifyOptions?=nil\n539 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n540 |     // Create a log context\n541 |     let logContext=LogContextDTO(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:43:14: error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n 41 |  - Progress reporting through AsyncStream\n 42 |  */\n 43 | public actor BackupServicesActor: BackupServiceProtocol {\n    |              |- error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n    |              `- note: add stubs for conformance\n 44 |   // MARK: - Properties\n 45 | \n    :\n611 |    * - Returns: True if cancellation was successful, false otherwise\n612 |    */\n613 |   public func cancelOperation(operationID: String) async -\u003e Bool {\n    |               `- note: candidate has non-matching type '(String) async -\u003e Bool'\n614 |     // Get the cancellation token\n615 |     guard let token=activeOperationsCancellationTokens[operationID] else {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Protocols/BackupServiceProtocol.swift:58:8: note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 56 |    * - Returns: A Result containing either the operation response or an error\n 57 |    */\n 58 |   func createBackup(\n    |        `- note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 59 |     sources: [URL],\n 60 |     excludePaths: [URL]?,\n    :\n 77 |    * - Returns: A Result containing either the operation response or an error\n 78 |    */\n 79 |   func restoreBackup(\n    |        `- note: protocol requires function 'restoreBackup(snapshotID:targetPath:includePaths:excludePaths:restoreOptions:)' with type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 80 |     snapshotID: String,\n 81 |     targetPath: URL,\n    :\n 99 |    * - Returns: A Result containing either the list of snapshots or an error\n100 |    */\n101 |   func listSnapshots(\n    |        `- note: protocol requires function 'listSnapshots(tags:before:after:listOptions:)' with type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n102 |     tags: [String]?,\n103 |     before: Date?,\n    :\n117 |    * - Returns: A Result containing either the operation response or an error\n118 |    */\n119 |   func deleteBackup(\n    |        `- note: protocol requires function 'deleteBackup(snapshotID:deleteOptions:)' with type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n120 |     snapshotID: String,\n121 |     deleteOptions: DeleteOptions?\n    :\n134 |    * - Returns: A Result containing either the operation response or an error\n135 |    */\n136 |   func performMaintenance(\n    |        `- note: protocol requires function 'performMaintenance(type:maintenanceOptions:)' with type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n137 |     type: MaintenanceType,\n138 |     maintenanceOptions: MaintenanceOptions?\n    :\n166 |    *            doesn't exist or cannot be cancelled\n167 |    */\n168 |   func cancelOperation(operationID: UUID) async -\u003e Bool\n    |        `- note: protocol requires function 'cancelOperation(operationID:)' with type '(UUID) async -\u003e Bool'\n169 | }\n170 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:98:20: error: cannot find 'BackupCommandFactory' in scope\n 96 | \n 97 |     // Create the backup command factory\n 98 |     commandFactory=BackupCommandFactory(\n    |                    `- error: cannot find 'BackupCommandFactory' in scope\n 99 |       resticService: resticService,\n100 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:21:31: error: cannot find type 'BackupCommandFactory' in scope\n  19 | \n  20 |   /// Factory for creating backup commands\n  21 |   private let commandFactory: BackupCommandFactory\n     |                               `- error: cannot find type 'BackupCommandFactory' in scope\n  22 | \n  23 |   /// Parser for command results\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n  44 |     resticService: ResticServiceProtocol,\n  45 |     repositoryInfo: RepositoryInfo,\n  46 |     commandFactory: BackupCommandFactory,\n     |                     `- error: cannot find type 'BackupCommandFactory' in scope\n  47 |     resultParser: BackupResultParser,\n  48 |     snapshotService: SnapshotServiceProtocol,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:70:17: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n  68 |    */\n  69 |   public func createBackup(\n  70 |     parameters: BackupCreateParameters,\n     |                 `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n  71 |     progressReporter: BackupProgressReporter?,\n  72 |     cancellationToken _: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:21:15: note: found this candidate\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:72:26: error: cannot find type 'CancellationToken' in scope\n  70 |     parameters: BackupCreateParameters,\n  71 |     progressReporter: BackupProgressReporter?,\n  72 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n  73 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n  74 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:163:17: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 161 |    */\n 162 |   public func restoreBackup(\n 163 |     parameters: BackupRestoreParameters,\n     |                 `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 164 |     progressReporter: BackupProgressReporter?,\n 165 |     cancellationToken _: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:96:15: note: found this candidate\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:165:26: error: cannot find type 'CancellationToken' in scope\n 163 |     parameters: BackupRestoreParameters,\n 164 |     progressReporter: BackupProgressReporter?,\n 165 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 166 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n 167 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:311:17: error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 309 |    */\n 310 |   public func deleteBackup(\n 311 |     parameters: BackupDeleteParameters,\n     |                 `- error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 312 |     cancellationToken _: CancellationToken?\n 313 |   ) async throws -\u003e DeleteResult {\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: note: found this candidate\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- note: found this candidate\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:249:15: note: found this candidate\n247 |  * Parameters for deleting a backup.\n248 |  */\n249 | public struct BackupDeleteParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n250 |   /// ID of the snapshot to delete\n251 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:312:26: error: cannot find type 'CancellationToken' in scope\n 310 |   public func deleteBackup(\n 311 |     parameters: BackupDeleteParameters,\n 312 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 313 |   ) async throws -\u003e DeleteResult {\n 314 |     // Create log context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1032:17: error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n1030 |    */\n1031 |   public func performMaintenance(\n1032 |     parameters: BackupMaintenanceParameters,\n     |                 `- error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n1033 |     progressReporter: BackupProgressReporter?,\n1034 |     cancellationToken _: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: note: found this candidate\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- note: found this candidate\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:292:15: note: found this candidate\n290 |  * Parameters for performing repository maintenance.\n291 |  */\n292 | public struct BackupMaintenanceParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n293 |   /// Type of maintenance to perform\n294 |   public let maintenanceType: MaintenanceType\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1034:26: error: cannot find type 'CancellationToken' in scope\n1032 |     parameters: BackupMaintenanceParameters,\n1033 |     progressReporter: BackupProgressReporter?,\n1034 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n1035 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupProgressInfo\u003e) {\n1036 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:958:30: error: value of type 'DeleteResponse' has no member 'errors'\n 956 |       return DeleteResult(\n 957 |         snapshotID: snapshotID,\n 958 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                              `- error: value of type 'DeleteResponse' has no member 'errors'\n 959 |         filesDeleted: response.filesDeleted ?? 0,\n 960 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:958:57: error: value of type 'DeleteResponse' has no member 'errors'\n 956 |       return DeleteResult(\n 957 |         snapshotID: snapshotID,\n 958 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                                                         `- error: value of type 'DeleteResponse' has no member 'errors'\n 959 |         filesDeleted: response.filesDeleted ?? 0,\n 960 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:23:31: error: cannot find type 'ResticCommandFactory' in scope\n 21 | \n 22 |   /// Factory for creating Restic commands\n 23 |   private let commandFactory: ResticCommandFactory\n    |                               `- error: cannot find type 'ResticCommandFactory' in scope\n 24 | \n 25 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:50:20: error: cannot find 'ResticCommandFactory' in scope\n 48 |     self.operationExecutor=operationExecutor\n 49 |     self.operationsService=operationsService\n 50 |     commandFactory=ResticCommandFactory()\n    |                    `- error: cannot find 'ResticCommandFactory' in scope\n 51 |     resultParser=SnapshotResultParser()\n 52 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:22:31: error: cannot find type 'ResticCommandFactory' in scope\n 20 | \n 21 |   /// Factory for creating Restic commands\n 22 |   private let commandFactory: ResticCommandFactory\n    |                               `- error: cannot find type 'ResticCommandFactory' in scope\n 23 | \n 24 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:43:20: error: cannot find 'ResticCommandFactory' in scope\n 41 |     self.resticService=resticService\n 42 |     self.operationExecutor=operationExecutor\n 43 |     commandFactory=ResticCommandFactory()\n    |                    `- error: cannot find 'ResticCommandFactory' in scope\n 44 |     resultParser=SnapshotResultParser()\n 45 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:22:31: error: cannot find type 'ResticCommandFactory' in scope\n 20 | \n 21 |   /// Factory for creating Restic commands\n 22 |   private let commandFactory: ResticCommandFactory\n    |                               `- error: cannot find type 'ResticCommandFactory' in scope\n 23 | \n 24 |   /// Executor for operations\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:40:20: error: cannot find 'ResticCommandFactory' in scope\n 38 |     self.resticService=resticService\n 39 |     self.operationExecutor=operationExecutor\n 40 |     commandFactory=ResticCommandFactory()\n    |                    `- error: cannot find 'ResticCommandFactory' in scope\n 41 |   }\n 42 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:242:12: error: type 'EstimateSizeParameters' does not conform to protocol 'SnapshotOperationParameters'\n240 |     let resultParser=SnapshotResultParser()\n241 | \n242 |     struct EstimateSizeParameters: SnapshotOperationParameters {\n    |            |- error: type 'EstimateSizeParameters' does not conform to protocol 'SnapshotOperationParameters'\n    |            `- note: add stubs for conformance\n243 |       let snapshotID: String\n244 |       let operationType: SnapshotOperationType = .get\n    :\n250 |       }\n251 | \n252 |       func createLogContext() -\u003e SnapshotLogContextAdapter {\n    |            `- note: candidate has non-matching type '() -\u003e SnapshotLogContextAdapter'\n253 |         SnapshotLogContextAdapter(\n254 |           snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:44:8: note: protocol requires function 'createLogContext()' with type '() -\u003e SnapshotLogContext'\n 42 |   /// Creates a log context for the operation\n 43 |   /// - Returns: A SnapshotLogContext for logging\n 44 |   func createLogContext() -\u003e SnapshotLogContext\n    |        `- note: protocol requires function 'createLogContext()' with type '() -\u003e SnapshotLogContext'\n 45 | }\n 46 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:268:13: warning: variable 'args' was never mutated; consider changing to 'let' constant\n266 |       operation: { _, reporter, _ in\n267 |         // Create a command to get snapshot details with statistics\n268 |         var args=[\"snapshots\", snapshotID, \"--json\", \"--stats\"]\n    |             `- warning: variable 'args' was never mutated; consider changing to 'let' constant\n269 | \n270 |         let command=ResticCommandImpl(arguments: args)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:19:23: error: cannot find type 'LoggingProtocol' in scope\n 17 | \n 18 |   /// Logger for snapshot operations\n 19 |   private let logger: LoggingProtocol\n    |                       `- error: cannot find type 'LoggingProtocol' in scope\n 20 | \n 21 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:32:13: error: cannot find type 'LoggingProtocol' in scope\n 30 |     resticService: ResticServiceProtocol,\n 31 |     resultParser: SnapshotResultParser,\n 32 |     logger: LoggingProtocol\n    |             `- error: cannot find type 'LoggingProtocol' in scope\n 33 |   ) {\n 34 |     self.resticService=resticService\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupCancellationHandler.swift:7:58: error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 5 |  * Implementation of the cancellation handler for backup operations.\n 6 |  */\n 7 | public actor BackupCancellationHandler: BackupInterfaces.CancellationHandlerProtocol {\n   |                                                          `- error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 8 |   /// Map of operation IDs to cancellation tokens\n 9 |   private var tokens: [UUID: BackupCancellationToken]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:17:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 15 | \n 16 |   /// Handler for operation cancellation\n 17 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 18 | \n 19 |   /// Collector for metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:40:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 38 |   public init(\n 39 |     logger: any LoggingProtocol,\n 40 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 41 |     metricsCollector: BackupMetricsCollector,\n 42 |     errorLogContextMapper: ErrorLogContextMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:16:35: error: cannot find type 'CancellationHandlerProtocol' in scope\n 14 |  * - Support for both task-based and token-based cancellation\n 15 |  */\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n    |                                   `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cany Sendable, Error\u003e]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:174:21: error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n172 |  * Implementation of BackupCancellationToken.\n173 |  */\n174 | private final class BackupCancellationTokenImpl: BackupCancellationToken, @unchecked Sendable {\n    |                     |- error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n    |                     `- note: add stubs for conformance\n175 |   /// The unique identifier for this token\n176 |   public let id: String\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/BackupCancellationToken.swift:25:8: note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n23 |    * - Parameter callback: The callback to register\n24 |    */\n25 |   func registerCancellationCallback(_ callback: @escaping @Sendable () -\u003e Void) async\n   |        `- note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n26 | }\n27 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:27:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 25 | \n 26 |   /// Handler for operation cancellation\n 27 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 28 | \n 29 |   /// Collector for operation metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:52:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 50 |   public init(\n 51 |     resticService: ResticServiceProtocol,\n 52 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 53 |     metricsCollector: BackupMetricsCollector,\n 54 |     logger: any LoggingProtocol,\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:14:28: error: cannot find type 'DomainLoggerProtocol' in scope\n 12 |  * file paths and backup metadata.\n 13 |  */\n 14 | public actor BackupLogger: DomainLoggerProtocol {\n    |                            `- error: cannot find type 'DomainLoggerProtocol' in scope\n 15 |   /// The underlying logger\n 16 |   private let loggingService: any LoggingProtocol\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:448:25: error: cannot find type 'MetadataCollection' in scope\n446 | \n447 | extension BackupLogContext {\n448 |   func getMetadata() -\u003e MetadataCollection {\n    |                         `- error: cannot find type 'MetadataCollection' in scope\n449 |     // Convert the BackupLogContext to a LogMetadataDTOCollection\n450 |     // This ensures all privacy annotations are properly maintained\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:111:32: error: cannot find type 'MetadataCollection' in scope\n109 |    * - Returns: The metadata collection\n110 |    */\n111 |   public func getMetadata() -\u003e MetadataCollection {\n    |                                `- error: cannot find type 'MetadataCollection' in scope\n112 |     metadata\n113 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:12:15: error: inheritance from non-protocol type 'BackupLogContext'\n 10 |  * allowing for structured logging with appropriate privacy classifications.\n 11 |  */\n 12 | public struct BackupLogContextImpl: BackupLogContext, Sendable {\n    |               `- error: inheritance from non-protocol type 'BackupLogContext'\n 13 |   /// The domain name for the log context\n 14 |   public let domainName: String\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:221:25: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n    |                         `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n222 |     BackupInterfaces.SnapshotFileEntry(\n223 |       path: file.path ?? \"\",\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:220:8: error: no type named 'SnapshotFile' in module 'BackupServices'\n218 |   public static func toInterfaceSnapshotFileEntry(\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n    |        `- error: no type named 'SnapshotFile' in module 'BackupServices'\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n222 |     BackupInterfaces.SnapshotFileEntry(\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:241:24: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n    |                        `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n242 |     guard let files else { return nil }\n243 |     return files.map(toInterfaceSnapshotFileEntry)\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:240:78: error: no type named 'SnapshotFile' in module 'BackupServices'\n238 |    * - Returns: An array of converted snapshot file entries compatible with the interfaces module\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n    |                                                                              `- error: no type named 'SnapshotFile' in module 'BackupServices'\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n242 |     guard let files else { return nil }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupLogContext.swift:14:15: error: type 'BackupLogContext' does not conform to protocol 'LogContextDTO'\n 12 |  allowing for immutable context objects and thread safety.\n 13 |  */\n 14 | public struct BackupLogContext: LogContextDTO {\n    |               |- error: type 'BackupLogContext' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 15 |   /// The domain name for this context\n 16 |   public let domainName: String=\"BackupServices\"\n    :\n 26 | \n 27 |   /// Current operation being performed\n 28 |   public var operation: String? {\n    |              `- note: candidate has non-matching type 'String?'\n 29 |     // Find operation in the metadata entries\n 30 |     for entry in metadata.entries where entry.key == \"operation\" {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:11:7: note: protocol requires property 'operation' with type 'String'\n 9 | \n10 |   /// The operation being performed (e.g., \"addDestination\", \"writeLog\")\n11 |   var operation: String { get }\n   |       `- note: protocol requires property 'operation' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e BackupLogContext'\n29 | }\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupLogContextAdapter.swift:29:15: error: property 'operation' must be declared public because it matches a requirement in public protocol 'LogContextDTO'\n 27 | \n 28 |   /// Operation being performed\n 29 |   private let operation: String\n    |               |- error: property 'operation' must be declared public because it matches a requirement in public protocol 'LogContextDTO'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 30 | \n 31 |   /// Additional context values with privacy annotations\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupLogContextAdapter.swift:12:15: error: type 'BackupLogContextAdapter' does not conform to protocol 'LogContextDTO'\n 10 |  * appropriate privacy controls for backup-related operations.\n 11 |  */\n 12 | public struct BackupLogContextAdapter: LogContextDTO {\n    |               |- error: type 'BackupLogContextAdapter' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 13 |   /// The domain name for this context\n 14 |   public let domainName: String=\"BackupServices\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:14:7: note: protocol requires property 'category' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e BackupLogContextAdapter'\n29 | }\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:426:11: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n    :\n424 | \n425 | /// Extension to provide conversion methods between DTOs and BackupInterfaces types\n426 | extension BackupCreateParameters {\n    |           `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n427 |   /// Convert to BackupInterfaces parameters\n428 |   public func toBackupParameters() -\u003e BackupParameters {\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:448:11: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n    :\n446 | }\n447 | \n448 | extension BackupRestoreParameters {\n    |           `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n449 |   /// Convert to BackupInterfaces parameters\n450 |   public func toBackupParameters() -\u003e RestoreParameters {\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:18:14: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n16 |   /// - Returns: A ProgressCancellationToken that delegates to the original token\n17 |   public static func asProgressCancellationToken(\n18 |     _ token: BackupOperationCancellationTokenImpl\n   |              `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n19 |   ) -\u003e ProgressCancellationToken {\n20 |     ProgressCancellationTokenAdapter(token: token)\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:28:22: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n26 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken,\n27 | @unchecked Sendable {\n28 |   private let token: BackupOperationCancellationTokenImpl\n   |                      `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:31:15: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n31 |   init(token: BackupOperationCancellationTokenImpl) {\n   |               `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n32 |     self.token=token\n33 |     // Set up task to monitor the cancellation state\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:87:11: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n85 | \n86 | /// Extension to BackupOperationCancellationTokenImpl for tracking with BackupOperation\n87 | extension BackupOperationCancellationTokenImpl {\n   |           `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n88 |   /// Register this token with the given operation\n89 |   ///\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:10:15: error: type 'SnapshotLogContext' does not conform to protocol 'LogContextDTO'\n  8 |  * operation details in log messages while maintaining privacy awareness.\n  9 |  */\n 10 | public struct SnapshotLogContext: LogContextDTO {\n    |               |- error: type 'SnapshotLogContext' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 11 |   /// The domain name for this context\n 12 |   public let domainName: String=\"BackupServices.Snapshot\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:14:7: note: protocol requires property 'category' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e SnapshotLogContext'\n29 | }\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContextAdapter.swift:12:15: error: type 'SnapshotLogContextAdapter' does not conform to protocol 'LogContextDTO'\n 10 |  * and ensures proper separation between domain-specific metadata and core logging infrastructure.\n 11 |  */\n 12 | public struct SnapshotLogContextAdapter: LogContextDTO {\n    |               |- error: type 'SnapshotLogContextAdapter' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 13 |   /// The domain name of this context\n 14 |   public let domainName: String=\"BackupServices.Snapshot\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:11:7: note: protocol requires property 'operation' with type 'String'\n 9 | \n10 |   /// The operation being performed (e.g., \"addDestination\", \"writeLog\")\n11 |   var operation: String { get }\n   |       `- note: protocol requires property 'operation' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e SnapshotLogContextAdapter'\n29 | }\n30 | \npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:41:3: error: expected 'func' keyword in instance method declaration\n 39 | public class BaseBackupCommand {\n 40 |   /// The Restic service to use for operations\n 41 |   protected let resticService: ResticServiceProtocol\n    |   `- error: expected 'func' keyword in instance method declaration\n 42 | \n 43 |   /// Repository connection information\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:41:13: error: expected '(' in argument list of function declaration\n 39 | public class BaseBackupCommand {\n 40 |   /// The Restic service to use for operations\n 41 |   protected let resticService: ResticServiceProtocol\n    |             `- error: expected '(' in argument list of function declaration\n 42 | \n 43 |   /// Repository connection information\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:41:12: error: consecutive declarations on a line must be separated by ';'\n 39 | public class BaseBackupCommand {\n 40 |   /// The Restic service to use for operations\n 41 |   protected let resticService: ResticServiceProtocol\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 42 | \n 43 |   /// Repository connection information\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:3: error: expected 'func' keyword in instance method declaration\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |   `- error: expected 'func' keyword in instance method declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:13: error: expected '(' in argument list of function declaration\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |             `- error: expected '(' in argument list of function declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:12: error: consecutive declarations on a line must be separated by ';'\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:3: error: expected 'func' keyword in instance method declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |   `- error: expected 'func' keyword in instance method declaration\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:13: error: expected '(' in argument list of function declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |             `- error: expected '(' in argument list of function declaration\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:12: error: consecutive declarations on a line must be separated by ';'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:3: error: expected 'func' keyword in instance method declaration\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |   `- error: expected 'func' keyword in instance method declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:13: error: expected '(' in argument list of function declaration\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |             `- error: expected '(' in argument list of function declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:12: error: consecutive declarations on a line must be separated by ';'\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:3: error: expected 'func' keyword in instance method declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |   `- error: expected 'func' keyword in instance method declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:13: error: expected '(' in argument list of function declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |             `- error: expected '(' in argument list of function declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:12: error: consecutive declarations on a line must be separated by ';'\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:3: error: expected 'func' keyword in instance method declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |   `- error: expected 'func' keyword in instance method declaration\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:13: error: expected '(' in argument list of function declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |             `- error: expected '(' in argument list of function declaration\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:12: error: consecutive declarations on a line must be separated by ';'\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:3: error: expected 'func' keyword in instance method declaration\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |   `- error: expected 'func' keyword in instance method declaration\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:13: error: expected '(' in argument list of function declaration\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |             `- error: expected '(' in argument list of function declaration\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:12: error: consecutive declarations on a line must be separated by ';'\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:3: error: expected 'func' keyword in instance method declaration\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |   `- error: expected 'func' keyword in instance method declaration\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:13: error: expected '(' in argument list of function declaration\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |             `- error: expected '(' in argument list of function declaration\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:12: error: consecutive declarations on a line must be separated by ';'\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |            `- error: consecutive declarations on a line must be separated by ';'\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:3: error: expected 'func' keyword in instance method declaration\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:13: error: expected '(' in argument list of function declaration\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:12: error: consecutive declarations on a line must be separated by ';'\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:3: error: expected 'func' keyword in instance method declaration\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:13: error: expected '(' in argument list of function declaration\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:12: error: consecutive declarations on a line must be separated by ';'\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:3: error: expected 'func' keyword in instance method declaration\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:13: error: expected '(' in argument list of function declaration\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:12: error: consecutive declarations on a line must be separated by ';'\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:3: error: expected 'func' keyword in instance method declaration\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:13: error: expected '(' in argument list of function declaration\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:12: error: consecutive declarations on a line must be separated by ';'\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:3: error: expected 'func' keyword in instance method declaration\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |   `- error: expected 'func' keyword in instance method declaration\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:13: error: expected '(' in argument list of function declaration\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |             `- error: expected '(' in argument list of function declaration\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:12: error: consecutive declarations on a line must be separated by ';'\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |            `- error: consecutive declarations on a line must be separated by ';'\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:3: error: invalid redeclaration of 'protected()'\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |   `- error: invalid redeclaration of 'protected()'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:3: error: invalid redeclaration of 'protected()'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |   `- error: invalid redeclaration of 'protected()'\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:33: error: cannot find type 'BackupCommandFactory' in scope\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |                                 `- error: cannot find type 'BackupCommandFactory' in scope\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:3: error: invalid redeclaration of 'protected()'\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |   `- error: invalid redeclaration of 'protected()'\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:3: error: invalid redeclaration of 'protected()'\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |   `- error: invalid redeclaration of 'protected()'\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:3: error: invalid redeclaration of 'protected()'\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |   `- error: invalid redeclaration of 'protected()'\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:72:21: error: cannot find type 'BackupCommandFactory' in scope\n 70 |     resticService: ResticServiceProtocol,\n 71 |     repositoryInfo: RepositoryInfo,\n 72 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 73 |     resultParser: BackupResultParser,\n 74 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:3: error: invalid redeclaration of 'protected()'\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |   `- error: invalid redeclaration of 'protected()'\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:3: error: invalid redeclaration of 'protected()'\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |   `- error: invalid redeclaration of 'protected()'\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:3: error: invalid redeclaration of 'protected()'\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:3: error: invalid redeclaration of 'protected()'\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:3: error: invalid redeclaration of 'protected()'\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:3: error: invalid redeclaration of 'protected()'\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:3: error: invalid redeclaration of 'protected()'\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |   `- error: invalid redeclaration of 'protected()'\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:185:6: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n    |      `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n187 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:41:3: error: expected '{' in body of function declaration\n 39 | public class BaseBackupCommand {\n 40 |   /// The Restic service to use for operations\n 41 |   protected let resticService: ResticServiceProtocol\n    |   `- error: expected '{' in body of function declaration\n 42 | \n 43 |   /// Repository connection information\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:107:7: error: switch must be exhaustive\n105 |     // Add additional metadata with specified privacy levels\n106 |     for item in additionalMetadata {\n107 |       switch item.value.privacyLevel {\n    |       |- error: switch must be exhaustive\n    |       |- note: add missing case: '.sensitive'\n    |       |- note: add missing case: '.hash'\n    |       |- note: add missing case: '.never'\n    |       |- note: add missing case: '.auto'\n    |       `- note: add missing cases\n108 |         case .public:\n109 |           metadata=metadata.withPublic(key: item.key, value: item.value.value)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:117:12: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n115 |     }\n116 | \n117 |     return LogContextDTO(metadata: metadata)\n    |            `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n118 |   }\n119 | \n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: error: invalid redeclaration of 'BackupCreateParameters'\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- error: invalid redeclaration of 'BackupCreateParameters'\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: error: invalid redeclaration of 'BackupRestoreParameters'\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- error: invalid redeclaration of 'BackupRestoreParameters'\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: error: invalid redeclaration of 'BackupDeleteParameters'\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- error: invalid redeclaration of 'BackupDeleteParameters'\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: error: invalid redeclaration of 'BackupMaintenanceParameters'\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- error: invalid redeclaration of 'BackupMaintenanceParameters'\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:18:27: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for backup creation\n 18 |   private let parameters: BackupCreateParameters\n    |                           `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:21:15: note: found this candidate\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:41:17: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupCreateParameters,\n    |                 `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:21:15: note: found this candidate\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupCreateParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:97:8: error: value of type 'any LogContextDTO' has no member 'withPublic'\n 95 |     // Enhance the log context with specific operation details\n 96 |     let backupLogContext=context\n 97 |       .withPublic(key: \"operationID\", value: parameters.operationID)\n    |        `- error: value of type 'any LogContextDTO' has no member 'withPublic'\n 98 |       .withPublic(key: \"operation\", value: \"createBackup\")\n 99 |       .withPrivate(key: \"sources\", value: parameters.sources.map(\\.path).joined(separator: \", \"))\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:99:66: error: cannot infer key path type from context; consider explicitly specifying a root type\n 97 |       .withPublic(key: \"operationID\", value: parameters.operationID)\n 98 |       .withPublic(key: \"operation\", value: \"createBackup\")\n 99 |       .withPrivate(key: \"sources\", value: parameters.sources.map(\\.path).joined(separator: \", \"))\n    |                                                                  `- error: cannot infer key path type from context; consider explicitly specifying a root type\n100 |       .withPublic(key: \"sourceCount\", value: String(parameters.sources.count))\n101 | \n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:120:61: error: extra arguments at positions #2, #4 in call\n118 | \n119 |       // Execute the backup command with progress and cancellation support\n120 |       let result=try await resticService.executeWithProgress(\n    |                                                             `- error: extra arguments at positions #2, #4 in call\n121 |         command: command,\n122 |         repository: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/ResticServiceProtocol.swift:28:8: note: 'executeWithProgress(_:progressHandler:)' declared here\n26 |    * - Throws: BackupOperationError if the command fails\n27 |    */\n28 |   func executeWithProgress(\n   |        `- note: 'executeWithProgress(_:progressHandler:)' declared here\n29 |     _ command: ResticCommand,\n30 |     progressHandler: @escaping (String) -\u003e Void\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:123:26: error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n121 |         command: command,\n122 |         repository: repositoryInfo,\n123 |         progressHandler: progressHandler,\n    |                          `- error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n124 |         cancellationToken: cancellationToken\n125 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:128:73: error: missing argument for parameter 'sources' in call\n126 | \n127 |       // Parse the result\n128 |       let backupResult=try resultParser.parseBackupResult(output: result)\n    |                                                                         `- error: missing argument for parameter 'sources' in call\n129 | \n130 |       await logInfo(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:16:15: note: 'parseBackupResult(output:sources:)' declared here\n 14 |   /// - Returns: A backup result with details about the operation\n 15 |   /// - Throws: BackupError if parsing fails\n 16 |   public func parseBackupResult(output: String, sources: [URL]) throws -\u003e BackupResult {\n    |               `- note: 'parseBackupResult(output:sources:)' declared here\n 17 |     guard !output.isEmpty else {\n 18 |       throw BackupError.parsingError(details: \"Empty output from backup command\")\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:18:27: error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for deleting a backup\n 18 |   private let parameters: BackupDeleteParameters\n    |                           `- error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: note: found this candidate\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- note: found this candidate\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:249:15: note: found this candidate\n247 |  * Parameters for deleting a backup.\n248 |  */\n249 | public struct BackupDeleteParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n250 |   /// ID of the snapshot to delete\n251 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:41:17: error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupDeleteParameters,\n    |                 `- error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: note: found this candidate\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- note: found this candidate\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:249:15: note: found this candidate\n247 |  * Parameters for deleting a backup.\n248 |  */\n249 | public struct BackupDeleteParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n250 |   /// ID of the snapshot to delete\n251 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupDeleteParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:97:8: error: value of type 'any LogContextDTO' has no member 'withPublic'\n 95 |     // Enhance the log context with specific operation details\n 96 |     let backupLogContext=context\n 97 |       .withPublic(key: \"operationID\", value: parameters.operationID)\n    |        `- error: value of type 'any LogContextDTO' has no member 'withPublic'\n 98 |       .withPublic(key: \"operation\", value: \"deleteBackup\")\n 99 | \n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:122:61: error: extra arguments at positions #2, #4 in call\n120 | \n121 |       // Execute the delete command with progress and cancellation support\n122 |       let result=try await resticService.executeWithProgress(\n    |                                                             `- error: extra arguments at positions #2, #4 in call\n123 |         command: command,\n124 |         repository: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/ResticServiceProtocol.swift:28:8: note: 'executeWithProgress(_:progressHandler:)' declared here\n26 |    * - Throws: BackupOperationError if the command fails\n27 |    */\n28 |   func executeWithProgress(\n   |        `- note: 'executeWithProgress(_:progressHandler:)' declared here\n29 |     _ command: ResticCommand,\n30 |     progressHandler: @escaping (String) -\u003e Void\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:125:26: error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n123 |         command: command,\n124 |         repository: repositoryInfo,\n125 |         progressHandler: progressHandler,\n    |                          `- error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n126 |         cancellationToken: cancellationToken\n127 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:130:41: error: value of type 'BackupResultParser' has no member 'parseDeleteResult'\n128 | \n129 |       // Parse the result\n130 |       let deleteResult=try resultParser.parseDeleteResult(\n    |                                         `- error: value of type 'BackupResultParser' has no member 'parseDeleteResult'\n131 |         output: result,\n132 |         snapshotID: parameters.snapshotID ?? \"multiple snapshots\"\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/ListSnapshotsCommand.swift:36:21: error: cannot find type 'BackupCommandFactory' in scope\n 34 |     resticService: ResticServiceProtocol,\n 35 |     repositoryInfo: RepositoryInfo,\n 36 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 37 |     resultParser: BackupResultParser,\n 38 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/ListSnapshotsCommand.swift:67:8: error: value of type 'any LogContextDTO' has no member 'withPublic'\n 65 |     // Enhance the log context with specific operation details\n 66 |     let backupLogContext=context\n 67 |       .withPublic(key: \"operationID\", value: operationID)\n    |        `- error: value of type 'any LogContextDTO' has no member 'withPublic'\n 68 |       .withPublic(key: \"operation\", value: \"listSnapshots\")\n 69 | \n\npackages/UmbraImplementations/Sources/BackupServices/Commands/ListSnapshotsCommand.swift:96:21: error: extra argument 'repository' in call\n 94 |       let result=try await resticService.execute(\n 95 |         command: command,\n 96 |         repository: repositoryInfo\n    |                     `- error: extra argument 'repository' in call\n 97 |       )\n 98 | \n\npackages/UmbraImplementations/Sources/BackupServices/Commands/ListSnapshotsCommand.swift:100:71: error: missing argument for parameter 'sources' in call\n 98 | \n 99 |       // Parse the result\n100 |       let snapshots=try resultParser.parseSnapshotsList(output: result)\n    |                                                                       `- error: missing argument for parameter 'sources' in call\n101 | \n102 |       await logInfo(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:230:15: note: 'parseSnapshotsList(output:sources:)' declared here\n228 |   /// - Returns: An array of backup snapshots\n229 |   /// - Throws: BackupError if parsing fails\n230 |   public func parseSnapshotsList(output: String, sources: [URL]) throws -\u003e [BackupSnapshot] {\n    |               `- note: 'parseSnapshotsList(output:sources:)' declared here\n231 |     guard !output.isEmpty else {\n232 |       throw BackupError.parsingError(details: \"Empty output from snapshots command\")\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:18:27: error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for maintenance operation\n 18 |   private let parameters: BackupMaintenanceParameters\n    |                           `- error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: note: found this candidate\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- note: found this candidate\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:292:15: note: found this candidate\n290 |  * Parameters for performing repository maintenance.\n291 |  */\n292 | public struct BackupMaintenanceParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n293 |   /// Type of maintenance to perform\n294 |   public let maintenanceType: MaintenanceType\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:41:17: error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupMaintenanceParameters,\n    |                 `- error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: note: found this candidate\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- note: found this candidate\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:292:15: note: found this candidate\n290 |  * Parameters for performing repository maintenance.\n291 |  */\n292 | public struct BackupMaintenanceParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n293 |   /// Type of maintenance to perform\n294 |   public let maintenanceType: MaintenanceType\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupMaintenanceParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:97:8: error: value of type 'any LogContextDTO' has no member 'withPublic'\n 95 |     // Enhance the log context with specific operation details\n 96 |     let backupLogContext=context\n 97 |       .withPublic(key: \"operationID\", value: parameters.operationID)\n    |        `- error: value of type 'any LogContextDTO' has no member 'withPublic'\n 98 |       .withPublic(key: \"operation\", value: \"maintenance\")\n 99 |       .withPublic(key: \"maintenanceType\", value: parameters.type.rawValue)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:116:61: error: extra arguments at positions #2, #4 in call\n114 | \n115 |       // Execute the maintenance command with progress and cancellation support\n116 |       let result=try await resticService.executeWithProgress(\n    |                                                             `- error: extra arguments at positions #2, #4 in call\n117 |         command: command,\n118 |         repository: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/ResticServiceProtocol.swift:28:8: note: 'executeWithProgress(_:progressHandler:)' declared here\n26 |    * - Throws: BackupOperationError if the command fails\n27 |    */\n28 |   func executeWithProgress(\n   |        `- note: 'executeWithProgress(_:progressHandler:)' declared here\n29 |     _ command: ResticCommand,\n30 |     progressHandler: @escaping (String) -\u003e Void\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:119:26: error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n117 |         command: command,\n118 |         repository: repositoryInfo,\n119 |         progressHandler: progressHandler,\n    |                          `- error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n120 |         cancellationToken: cancellationToken\n121 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:18:27: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for backup restoration\n 18 |   private let parameters: BackupRestoreParameters\n    |                           `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:96:15: note: found this candidate\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:41:17: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupRestoreParameters,\n    |                 `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:96:15: note: found this candidate\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupRestoreParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:97:8: error: value of type 'any LogContextDTO' has no member 'withPublic'\n 95 |     // Enhance the log context with specific operation details\n 96 |     let backupLogContext=context\n 97 |       .withPublic(key: \"operationID\", value: parameters.operationID)\n    |        `- error: value of type 'any LogContextDTO' has no member 'withPublic'\n 98 |       .withPublic(key: \"operation\", value: \"restoreBackup\")\n 99 |       .withPublic(key: \"snapshotID\", value: parameters.snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:105:33: error: cannot infer key path type from context; consider explicitly specifying a root type\n103 |       _=backupLogContext.withPrivate(\n104 |         key: \"includePaths\",\n105 |         value: includePaths.map(\\.path).joined(separator: \", \")\n    |                                 `- error: cannot infer key path type from context; consider explicitly specifying a root type\n106 |       )\n107 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:124:61: error: extra arguments at positions #2, #4 in call\n122 | \n123 |       // Execute the restore command with progress and cancellation support\n124 |       let result=try await resticService.executeWithProgress(\n    |                                                             `- error: extra arguments at positions #2, #4 in call\n125 |         command: command,\n126 |         repository: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/ResticServiceProtocol.swift:28:8: note: 'executeWithProgress(_:progressHandler:)' declared here\n26 |    * - Throws: BackupOperationError if the command fails\n27 |    */\n28 |   func executeWithProgress(\n   |        `- note: 'executeWithProgress(_:progressHandler:)' declared here\n29 |     _ command: ResticCommand,\n30 |     progressHandler: @escaping (String) -\u003e Void\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:127:26: error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n125 |         command: command,\n126 |         repository: repositoryInfo,\n127 |         progressHandler: progressHandler,\n    |                          `- error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n128 |         cancellationToken: cancellationToken\n129 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:134:32: error: extra argument 'snapshotID' in call\n132 |       let restoreResult=try resultParser.parseRestoreResult(\n133 |         output: result,\n134 |         snapshotID: parameters.snapshotID,\n    |                                `- error: extra argument 'snapshotID' in call\n135 |         targetPath: parameters.targetPath\n136 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupVerificationParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:90:55: error: type 'BackupOperation' has no member 'verifyBackup'\n 88 |     ) async in\n 89 |       if let reporter=progressReporter {\n 90 |         await reporter.reportProgress(progress, for: .verifyBackup)\n    |                                                       `- error: type 'BackupOperation' has no member 'verifyBackup'\n 91 |       }\n 92 |       progressContinuation.yield(progress)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:102:8: error: value of type 'any LogContextDTO' has no member 'withPublic'\n100 |     // Enhance the log context with specific operation details\n101 |     let backupLogContext=context\n102 |       .withPublic(key: \"operationID\", value: parameters.operationID)\n    |        `- error: value of type 'any LogContextDTO' has no member 'withPublic'\n103 |       .withPublic(key: \"operation\", value: \"verifyBackup\")\n104 |       .withPublic(key: \"snapshotID\", value: parameters.snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:111:15: error: 'nil' requires a contextual type\n109 |       // First, get the snapshot details to verify it exists\n110 |       let snapshotCommand=try commandFactory.createListSnapshotsCommand(\n111 |         path: nil,\n    |               `- error: 'nil' requires a contextual type\n112 |         tags: nil,\n113 |         host: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:112:15: error: 'nil' requires a contextual type\n110 |       let snapshotCommand=try commandFactory.createListSnapshotsCommand(\n111 |         path: nil,\n112 |         tags: nil,\n    |               `- error: 'nil' requires a contextual type\n113 |         host: nil,\n114 |         snapshotID: parameters.snapshotID\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:113:15: error: 'nil' requires a contextual type\n111 |         path: nil,\n112 |         tags: nil,\n113 |         host: nil,\n    |               `- error: 'nil' requires a contextual type\n114 |         snapshotID: parameters.snapshotID\n115 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:119:21: error: extra argument 'repository' in call\n117 |       let snapshotResult=try await resticService.execute(\n118 |         command: snapshotCommand,\n119 |         repository: repositoryInfo\n    |                     `- error: extra argument 'repository' in call\n120 |       )\n121 | \n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:122:79: error: missing argument for parameter 'sources' in call\n120 |       )\n121 | \n122 |       let snapshots=try resultParser.parseSnapshotsList(output: snapshotResult)\n    |                                                                               `- error: missing argument for parameter 'sources' in call\n123 | \n124 |       guard let snapshot=snapshots.first(where: { $0.id == parameters.snapshotID }) else {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:230:15: note: 'parseSnapshotsList(output:sources:)' declared here\n228 |   /// - Returns: An array of backup snapshots\n229 |   /// - Throws: BackupError if parsing fails\n230 |   public func parseSnapshotsList(output: String, sources: [URL]) throws -\u003e [BackupSnapshot] {\n    |               `- note: 'parseSnapshotsList(output:sources:)' declared here\n231 |     guard !output.isEmpty else {\n232 |       throw BackupError.parsingError(details: \"Empty output from snapshots command\")\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:137:61: error: extra arguments at positions #2, #4 in call\n135 | \n136 |       // Execute the verify command with progress and cancellation support\n137 |       let result=try await resticService.executeWithProgress(\n    |                                                             `- error: extra arguments at positions #2, #4 in call\n138 |         command: command,\n139 |         repository: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/ResticServiceProtocol.swift:28:8: note: 'executeWithProgress(_:progressHandler:)' declared here\n26 |    * - Throws: BackupOperationError if the command fails\n27 |    */\n28 |   func executeWithProgress(\n   |        `- note: 'executeWithProgress(_:progressHandler:)' declared here\n29 |     _ command: ResticCommand,\n30 |     progressHandler: @escaping (String) -\u003e Void\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:145:47: error: value of type 'BackupResultParser' has no member 'parseVerificationResult'\n143 | \n144 |       // Parse the result\n145 |       let verificationResult=try resultParser.parseVerificationResult(\n    |                                               `- error: value of type 'BackupResultParser' has no member 'parseVerificationResult'\n146 |         output: result,\n147 |         snapshotID: parameters.snapshotID\n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:137:21: error: extra arguments at positions #1, #3 in call\n135 |    */\n136 |   public func toLogContextDTO() -\u003e LogContextDTO {\n137 |     BackupLogContext(\n    |                     `- error: extra arguments at positions #1, #3 in call\n138 |       operation: operationType.rawValue,\n139 |       source: \"BackupService\",\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupLogContext.swift:37:10: note: 'init(correlationID:source:)' declared here\n 35 | \n 36 |   /// Initialises an empty backup log context\n 37 |   public init(correlationID: String?=nil, source: String?=nil) {\n    |          `- note: 'init(correlationID:source:)' declared here\n 38 |     self.correlationID=correlationID\n 39 |     self.source=source\n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/SnapshotFileDTO.swift:88:17: error: cannot convert value of type 'FileType' to expected argument type 'SnapshotFileType'\n 86 |       uid: 0, // Default value as we don't have this information\n 87 |       gid: 0, // Default value as we don't have this information\n 88 |       fileType: fileType,\n    |                 `- error: cannot convert value of type 'FileType' to expected argument type 'SnapshotFileType'\n 89 |       contentHash: contentHash\n 90 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:45:54: error: type 'any ResticServiceFactory' has no member 'shared'\n 43 |   ) async throws -\u003e BackupServiceProtocol {\n 44 |     // Create a default Restic service\n 45 |     let resticService=try await ResticServiceFactory.shared.createDefault(\n    |                                                      `- error: type 'any ResticServiceFactory' has no member 'shared'\n 46 |       logger: logger,\n 47 |       repositoryPath: repositoryPath,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:53:13: error: extra argument 'path' in call\n 51 |     // Create repository info\n 52 |     let repositoryInfo=RepositoryInfo(\n 53 |       path: repositoryPath,\n    |             `- error: extra argument 'path' in call\n 54 |       password: repositoryPassword\n 55 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:52:38: error: missing arguments for parameters 'location', 'id' in call\n 50 | \n 51 |     // Create repository info\n 52 |     let repositoryInfo=RepositoryInfo(\n    |                                      `- error: missing arguments for parameters 'location', 'id' in call\n 53 |       path: repositoryPath,\n 54 |       password: repositoryPassword\n\npackages/UmbraImplementations/Sources/BackupServices/Types/RepositoryInfo.swift:28:10: note: 'init(location:id:password:description:)' declared here\n26 |   ///   - password: Optional password used to secure the repository\n27 |   ///   - description: Optional description of the repository\n28 |   public init(\n   |          `- note: 'init(location:id:password:description:)' declared here\n29 |     location: String,\n30 |     id: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:97:13: error: extra argument 'path' in call\n 95 |     // Create repository info\n 96 |     let repositoryInfo=RepositoryInfo(\n 97 |       path: repositoryPath,\n    |             `- error: extra argument 'path' in call\n 98 |       password: repositoryPassword\n 99 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:96:38: error: missing arguments for parameters 'location', 'id' in call\n 94 |   ) async -\u003e BackupServiceProtocol {\n 95 |     // Create repository info\n 96 |     let repositoryInfo=RepositoryInfo(\n    |                                      `- error: missing arguments for parameters 'location', 'id' in call\n 97 |       path: repositoryPath,\n 98 |       password: repositoryPassword\n\npackages/UmbraImplementations/Sources/BackupServices/Types/RepositoryInfo.swift:28:10: note: 'init(location:id:password:description:)' declared here\n26 |   ///   - password: Optional password used to secure the repository\n27 |   ///   - description: Optional description of the repository\n28 |   public init(\n   |          `- note: 'init(location:id:password:description:)' declared here\n29 |     location: String,\n30 |     id: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:137:54: error: type 'any ResticServiceFactory' has no member 'shared'\n135 |   ) async throws -\u003e BackupServiceProtocol {\n136 |     // Create a default Restic service\n137 |     let resticService=try await ResticServiceFactory.shared.createDefault(\n    |                                                      `- error: type 'any ResticServiceFactory' has no member 'shared'\n138 |       logger: logger,\n139 |       repositoryPath: repositoryInfo.path,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:139:38: error: value of type 'RepositoryInfo' has no member 'path'\n137 |     let resticService=try await ResticServiceFactory.shared.createDefault(\n138 |       logger: logger,\n139 |       repositoryPath: repositoryInfo.path,\n    |                                      `- error: value of type 'RepositoryInfo' has no member 'path'\n140 |       repositoryPassword: repositoryInfo.password\n141 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:144:64: error: value of type 'RepositoryInfo' has no member 'path'\n142 | \n143 |     // Check if we have a cached service\n144 |     if useCache, let cachedService=serviceCache[repositoryInfo.path] {\n    |                                                                `- error: value of type 'RepositoryInfo' has no member 'path'\n145 |       return cachedService\n146 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:157:35: error: value of type 'RepositoryInfo' has no member 'path'\n155 |     // Cache the service if requested\n156 |     if useCache {\n157 |       serviceCache[repositoryInfo.path]=backupService\n    |                                   `- error: value of type 'RepositoryInfo' has no member 'path'\n158 |     }\n159 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:149:17: error: cannot find type 'BackupProgress' in scope\n147 |    */\n148 |   public func logProgressUpdate(\n149 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n150 |     for operation: BackupOperation,\n151 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:40:5: error: type 'BackupLogContext' does not conform to protocol 'LogContextDTO'\n 38 |     message: String?=nil\n 39 |   ) async {\n 40 |     let operation=logContext.operation ?? \"unknown\"\n    |     `- error: type 'BackupLogContext' does not conform to protocol 'LogContextDTO'\n 41 |     let defaultMessage=\"Starting backup operation: \\(operation)\"\n 42 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:46:15: error: extra argument 'source' in call\n 44 |       message ?? defaultMessage,\n 45 |       context: logContext,\n 46 |       source: \"BackupService\"\n    |               `- error: extra argument 'source' in call\n 47 |     )\n 48 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:69:15: error: extra argument 'source' in call\n 67 |       message ?? defaultMessage,\n 68 |       context: updatedContext,\n 69 |       source: \"BackupService\"\n    |               `- error: extra argument 'source' in call\n 70 |     )\n 71 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:92:15: error: extra argument 'source' in call\n 90 |       message ?? defaultMessage,\n 91 |       context: updatedContext,\n 92 |       source: \"BackupService\"\n    |               `- error: extra argument 'source' in call\n 93 |     )\n 94 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:117:77: error: value of type 'BackupError' has no member 'code'\n115 |     if let backupError=error as? BackupError {\n116 |       updatedContext=updatedContext\n117 |         .withPublic(key: \"errorCode\", value: String(describing: backupError.code))\n    |                                                                             `- error: value of type 'BackupError' has no member 'code'\n118 |         .withPrivate(key: \"errorMessage\", value: backupError.localizedDescription)\n119 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:121:39: error: value of type 'BackupError' has no member 'context'\n119 | \n120 |       // Add structured error context if available\n121 |       if let errorContext=backupError.context {\n    |                                       `- error: value of type 'BackupError' has no member 'context'\n122 |         for (key, value) in errorContext {\n123 |           updatedContext=updatedContext\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:136:15: error: extra argument 'source' in call\n134 |       message ?? defaultMessage,\n135 |       context: updatedContext,\n136 |       source: \"BackupService\"\n    |               `- error: extra argument 'source' in call\n137 |     )\n138 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:169:19: error: extra argument 'source' in call\n167 |           \"Initialising backup operation: \\(operation)\",\n168 |           context: updatedContext,\n169 |           source: \"BackupService\"\n    |                   `- error: extra argument 'source' in call\n170 |         )\n171 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:184:19: error: extra argument 'source' in call\n182 |           \"Processing backup operation: \\(operation) - \\(phase) (\\(String(format: \"%.1f%%\", percentComplete * 100)))\",\n183 |           context: updatedContext,\n184 |           source: \"BackupService\"\n    |                   `- error: extra argument 'source' in call\n185 |         )\n186 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:194:19: error: extra argument 'source' in call\n192 |           \"Completed backup operation: \\(operation)\",\n193 |           context: updatedContext,\n194 |           source: \"BackupService\"\n    |                   `- error: extra argument 'source' in call\n195 |         )\n196 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:204:19: error: extra argument 'source' in call\n202 |           \"Cancelled backup operation: \\(operation)\",\n203 |           context: updatedContext,\n204 |           source: \"BackupService\"\n    |                   `- error: extra argument 'source' in call\n205 |         )\n206 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:216:19: error: extra argument 'source' in call\n214 |           \"Error during backup operation: \\(operation) - \\(error.localizedDescription)\",\n215 |           context: updatedContext,\n216 |           source: \"BackupService\"\n    |                   `- error: extra argument 'source' in call\n217 |         )\n218 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResticCommandFactory.swift:178:9: warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n176 |   ) throws -\u003e ResticCommand {\n177 |     // Determine base command from maintenance type\n178 |     var baseCommand=switch type {\n    |         `- warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n179 |       case .check:\n180 |         \"check\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:46:31: error: cannot find type 'BackupCommandFactory' in scope\n 44 | \n 45 |   /// Factory for creating backup commands\n 46 |   private let commandFactory: BackupCommandFactory\n    |                               `- error: cannot find type 'BackupCommandFactory' in scope\n 47 | \n 48 |   /// The backup logger\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:55:60: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 53 | \n 54 |   /// Active operation cancellation tokens\n 55 |   private var activeOperationsCancellationTokens: [String: BackupOperationCancellationTokenImpl]=[:]\n    |                                                            `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 56 | \n 57 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:104:24: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n102 |     operationID: String,\n103 |     type: BackupOperationType,\n104 |     cancellationToken: BackupOperationCancellationTokenImpl?=nil\n    |                        `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n105 |   ) {\n106 |     let uuid=UUID()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:519:45: error: cannot find type 'VerificationResult' in scope\n517 |     snapshotID: String,\n518 |     verifyOptions: VerifyOptions?=nil\n519 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n520 |     // Create a log context\n521 |     let logContext=LogContextDTO(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:42:14: error: type 'BackupServiceWithCommands' does not conform to protocol 'BackupServiceProtocol'\n 40 |  - Progress reporting through AsyncStream\n 41 |  */\n 42 | public actor BackupServiceWithCommands: BackupServiceProtocol {\n    |              |- error: type 'BackupServiceWithCommands' does not conform to protocol 'BackupServiceProtocol'\n    |              `- note: add stubs for conformance\n 43 |   // MARK: - Properties\n 44 | \n    :\n587 |    - Returns: True if cancellation was successful, false otherwise\n588 |    */\n589 |   public func cancelOperation(operationID: String) async -\u003e Bool {\n    |               `- note: candidate has non-matching type '(String) async -\u003e Bool'\n590 |     // Get the cancellation token\n591 |     if let token=activeOperationsCancellationTokens[operationID] {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Protocols/BackupServiceProtocol.swift:58:8: note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 56 |    * - Returns: A Result containing either the operation response or an error\n 57 |    */\n 58 |   func createBackup(\n    |        `- note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 59 |     sources: [URL],\n 60 |     excludePaths: [URL]?,\n    :\n 77 |    * - Returns: A Result containing either the operation response or an error\n 78 |    */\n 79 |   func restoreBackup(\n    |        `- note: protocol requires function 'restoreBackup(snapshotID:targetPath:includePaths:excludePaths:restoreOptions:)' with type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 80 |     snapshotID: String,\n 81 |     targetPath: URL,\n    :\n 99 |    * - Returns: A Result containing either the list of snapshots or an error\n100 |    */\n101 |   func listSnapshots(\n    |        `- note: protocol requires function 'listSnapshots(tags:before:after:listOptions:)' with type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n102 |     tags: [String]?,\n103 |     before: Date?,\n    :\n117 |    * - Returns: A Result containing either the operation response or an error\n118 |    */\n119 |   func deleteBackup(\n    |        `- note: protocol requires function 'deleteBackup(snapshotID:deleteOptions:)' with type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n120 |     snapshotID: String,\n121 |     deleteOptions: DeleteOptions?\n    :\n134 |    * - Returns: A Result containing either the operation response or an error\n135 |    */\n136 |   func performMaintenance(\n    |        `- note: protocol requires function 'performMaintenance(type:maintenanceOptions:)' with type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n137 |     type: MaintenanceType,\n138 |     maintenanceOptions: MaintenanceOptions?\n    :\n166 |    *            doesn't exist or cannot be cancelled\n167 |    */\n168 |   func cancelOperation(operationID: UUID) async -\u003e Bool\n    |        `- note: protocol requires function 'cancelOperation(operationID:)' with type '(UUID) async -\u003e Bool'\n169 | }\n170 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:78:20: error: cannot find 'BackupCommandFactory' in scope\n 76 | \n 77 |     // Create the backup command factory\n 78 |     commandFactory=BackupCommandFactory(\n    |                    `- error: cannot find 'BackupCommandFactory' in scope\n 79 |       resticService: resticService,\n 80 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:110:13: error: extra argument 'type' in call\n108 |       id: uuid,\n109 |       operationID: operationID,\n110 |       type: type\n    |             `- error: extra argument 'type' in call\n111 |     )\n112 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:109:20: error: cannot convert value of type 'String' to expected argument type 'BackupOperation'\n107 |     activeOperations[uuid]=BackupOperationToken(\n108 |       id: uuid,\n109 |       operationID: operationID,\n    |                    `- error: cannot convert value of type 'String' to expected argument type 'BackupOperation'\n110 |       type: type\n111 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:124:33: error: cannot call value of non-function type 'Dictionary\u003cUUID, BackupOperationToken\u003e.Element?' (aka 'Optional\u003c(key: UUID, value: BackupOperationToken)\u003e')\n122 |    */\n123 |   private func unregisterOperation(operationID: String) {\n124 |     if let key=activeOperations.first(where: { $0.value.operationID == operationID })?.key {\n    |                                 `- error: cannot call value of non-function type 'Dictionary\u003cUUID, BackupOperationToken\u003e.Element?' (aka 'Optional\u003c(key: UUID, value: BackupOperationToken)\u003e')\n125 |       activeOperations.removeValue(forKey: key)\n126 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:150:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n148 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e {\n149 |     // Create a log context\n150 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n151 |       metadata: LogMetadataDTOCollection()\n152 |         .withPublic(key: \"source\", value: \"BackupServicesActor.createBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:159:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n157 | \n158 |     // Create a cancellation token\n159 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n160 | \n161 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:164:14: error: cannot infer contextual base in reference to member 'createBackup'\n162 |     registerOperation(\n163 |       operationID: operationID,\n164 |       type: .createBackup,\n    |              `- error: cannot infer contextual base in reference to member 'createBackup'\n165 |       cancellationToken: cancellationToken\n166 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:169:26: error: cannot find 'BackupProgressReporterImpl' in scope\n167 | \n168 |     // Create the progress reporter\n169 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n170 | \n171 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:173:20: error: extra argument 'operationID' in call\n171 |     // Create the parameters\n172 |     let parameters=BackupCreateParameters(\n173 |       operationID: operationID,\n    |                    `- error: extra argument 'operationID' in call\n174 |       sources: sources,\n175 |       excludePaths: excludePaths,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:233:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n231 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e {\n232 |     // Create a log context\n233 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n234 |       metadata: LogMetadataDTOCollection()\n235 |         .withPublic(key: \"source\", value: \"BackupServicesActor.restoreBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:242:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n240 | \n241 |     // Create a cancellation token\n242 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n243 | \n244 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:247:14: error: cannot infer contextual base in reference to member 'restoreBackup'\n245 |     registerOperation(\n246 |       operationID: operationID,\n247 |       type: .restoreBackup,\n    |              `- error: cannot infer contextual base in reference to member 'restoreBackup'\n248 |       cancellationToken: cancellationToken\n249 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:252:26: error: cannot find 'BackupProgressReporterImpl' in scope\n250 | \n251 |     // Create the progress reporter\n252 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n253 | \n254 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:256:20: error: extra argument 'operationID' in call\n254 |     // Create the parameters\n255 |     let parameters=BackupRestoreParameters(\n256 |       operationID: operationID,\n    |                    `- error: extra argument 'operationID' in call\n257 |       snapshotID: snapshotID,\n258 |       targetPath: targetPath,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:313:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n311 |   ) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e {\n312 |     // Create a log context\n313 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n314 |       metadata: LogMetadataDTOCollection()\n315 |         .withPublic(key: \"source\", value: \"BackupServicesActor.listSnapshots\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:324:14: error: cannot infer contextual base in reference to member 'listSnapshots'\n322 |     registerOperation(\n323 |       operationID: operationID,\n324 |       type: .listSnapshots\n    |              `- error: cannot infer contextual base in reference to member 'listSnapshots'\n325 |     )\n326 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:369:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n367 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e {\n368 |     // Create a log context\n369 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n370 |       metadata: LogMetadataDTOCollection()\n371 |         .withPublic(key: \"source\", value: \"BackupServicesActor.deleteBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:378:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n376 | \n377 |     // Create a cancellation token\n378 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n379 | \n380 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:383:14: error: cannot infer contextual base in reference to member 'deleteBackup'\n381 |     registerOperation(\n382 |       operationID: operationID,\n383 |       type: .deleteBackup,\n    |              `- error: cannot infer contextual base in reference to member 'deleteBackup'\n384 |       cancellationToken: cancellationToken\n385 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:388:26: error: cannot find 'BackupProgressReporterImpl' in scope\n386 | \n387 |     // Create the progress reporter\n388 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n389 | \n390 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:391:42: error: extra arguments at positions #1, #3, #4, #5 in call\n389 | \n390 |     // Create the parameters\n391 |     let parameters=BackupDeleteParameters(\n    |                                          `- error: extra arguments at positions #1, #3, #4, #5 in call\n392 |       operationID: operationID,\n393 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:266:10: note: 'init(snapshotID:pruneAfterDelete:)' declared here\n264 |    *   - pruneAfterDelete: Whether to prune after deletion\n265 |    */\n266 |   public init(\n    |          `- note: 'init(snapshotID:pruneAfterDelete:)' declared here\n267 |     snapshotID: String,\n268 |     pruneAfterDelete: Bool=false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:393:19: error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n391 |     let parameters=BackupDeleteParameters(\n392 |       operationID: operationID,\n393 |       snapshotID: snapshotID,\n    |                   |- error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n    |                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'\n    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n394 |       tags: tags,\n395 |       host: host,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:446:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n444 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e {\n445 |     // Create a log context\n446 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n447 |       metadata: LogMetadataDTOCollection()\n448 |         .withPublic(key: \"source\", value: \"BackupServicesActor.performMaintenance\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:455:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n453 | \n454 |     // Create a cancellation token\n455 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n456 | \n457 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:460:14: error: cannot infer contextual base in reference to member 'maintenance'\n458 |     registerOperation(\n459 |       operationID: operationID,\n460 |       type: .maintenance,\n    |              `- error: cannot infer contextual base in reference to member 'maintenance'\n461 |       cancellationToken: cancellationToken\n462 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:465:26: error: cannot find 'BackupProgressReporterImpl' in scope\n463 | \n464 |     // Create the progress reporter\n465 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n466 | \n467 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:468:47: error: extra arguments at positions #1, #2 in call\n466 | \n467 |     // Create the parameters\n468 |     let parameters=BackupMaintenanceParameters(\n    |                                               `- error: extra arguments at positions #1, #2 in call\n469 |       operationID: operationID,\n470 |       type: type,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:309:10: note: 'init(maintenanceType:options:)' declared here\n307 |    *   - options: Optional maintenance options\n308 |    */\n309 |   public init(\n    |          `- note: 'init(maintenanceType:options:)' declared here\n310 |     maintenanceType: MaintenanceType,\n311 |     options: MaintenanceOptions?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:469:7: error: missing argument for parameter 'maintenanceType' in call\n467 |     // Create the parameters\n468 |     let parameters=BackupMaintenanceParameters(\n469 |       operationID: operationID,\n    |       `- error: missing argument for parameter 'maintenanceType' in call\n470 |       type: type,\n471 |       options: options\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:309:10: note: 'init(maintenanceType:options:)' declared here\n307 |    *   - options: Optional maintenance options\n308 |    */\n309 |   public init(\n    |          `- note: 'init(maintenanceType:options:)' declared here\n310 |     maintenanceType: MaintenanceType,\n311 |     options: MaintenanceOptions?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:521:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n519 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n520 |     // Create a log context\n521 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n522 |       metadata: LogMetadataDTOCollection()\n523 |         .withPublic(key: \"source\", value: \"BackupServicesActor.verifyBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:530:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n528 | \n529 |     // Create a cancellation token\n530 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n531 | \n532 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:535:14: error: cannot infer contextual base in reference to member 'verifyBackup'\n533 |     registerOperation(\n534 |       operationID: operationID,\n535 |       type: .verifyBackup,\n    |              `- error: cannot infer contextual base in reference to member 'verifyBackup'\n536 |       cancellationToken: cancellationToken\n537 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:540:26: error: cannot find 'BackupProgressReporterImpl' in scope\n538 | \n539 |     // Create the progress reporter\n540 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n541 | \n542 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:563:54: error: cannot find type 'VerificationResult' in scope\n561 | \n562 |     // Map the result to the expected response format\n563 |     let mappedResult: Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e\n    |                                                      `- error: cannot find type 'VerificationResult' in scope\n564 | \n565 |     switch result {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:596:22: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n594 | \n595 |       // Create log context\n596 |       let logContext=LogContextDTO(\n    |                      `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n597 |         metadata: LogMetadataDTOCollection()\n598 |           .withPublic(key: \"source\", value: \"BackupServicesActor.cancelOperation\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:603:30: error: extraneous argument label 'message:' in call\n601 | \n602 |       // Log the cancellation\n603 |       await backupLogger.info(\n    |                              `- error: extraneous argument label 'message:' in call\n604 |         message: \"Operation \\(operationID) cancellation requested\",\n605 |         context: logContext\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:47:31: error: cannot find type 'BackupCommandFactory' in scope\n 45 | \n 46 |   /// Factory for creating backup commands\n 47 |   private let commandFactory: BackupCommandFactory\n    |                               `- error: cannot find type 'BackupCommandFactory' in scope\n 48 | \n 49 |   /// The Restic command factory\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:71:60: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 69 | \n 70 |   /// Active operation cancellation tokens\n 71 |   private var activeOperationsCancellationTokens: [String: BackupOperationCancellationTokenImpl]=[:]\n    |                                                            `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 72 | \n 73 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:124:24: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n122 |     operationID: String,\n123 |     type: BackupOperationType,\n124 |     cancellationToken: BackupOperationCancellationTokenImpl?=nil\n    |                        `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n125 |   ) {\n126 |     let uuid=UUID()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:539:45: error: cannot find type 'VerificationResult' in scope\n537 |     snapshotID: String,\n538 |     verifyOptions: VerifyOptions?=nil\n539 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n540 |     // Create a log context\n541 |     let logContext=LogContextDTO(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:43:14: error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n 41 |  - Progress reporting through AsyncStream\n 42 |  */\n 43 | public actor BackupServicesActor: BackupServiceProtocol {\n    |              |- error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n    |              `- note: add stubs for conformance\n 44 |   // MARK: - Properties\n 45 | \n    :\n611 |    * - Returns: True if cancellation was successful, false otherwise\n612 |    */\n613 |   public func cancelOperation(operationID: String) async -\u003e Bool {\n    |               `- note: candidate has non-matching type '(String) async -\u003e Bool'\n614 |     // Get the cancellation token\n615 |     guard let token=activeOperationsCancellationTokens[operationID] else {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Protocols/BackupServiceProtocol.swift:58:8: note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 56 |    * - Returns: A Result containing either the operation response or an error\n 57 |    */\n 58 |   func createBackup(\n    |        `- note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 59 |     sources: [URL],\n 60 |     excludePaths: [URL]?,\n    :\n 77 |    * - Returns: A Result containing either the operation response or an error\n 78 |    */\n 79 |   func restoreBackup(\n    |        `- note: protocol requires function 'restoreBackup(snapshotID:targetPath:includePaths:excludePaths:restoreOptions:)' with type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 80 |     snapshotID: String,\n 81 |     targetPath: URL,\n    :\n 99 |    * - Returns: A Result containing either the list of snapshots or an error\n100 |    */\n101 |   func listSnapshots(\n    |        `- note: protocol requires function 'listSnapshots(tags:before:after:listOptions:)' with type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n102 |     tags: [String]?,\n103 |     before: Date?,\n    :\n117 |    * - Returns: A Result containing either the operation response or an error\n118 |    */\n119 |   func deleteBackup(\n    |        `- note: protocol requires function 'deleteBackup(snapshotID:deleteOptions:)' with type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n120 |     snapshotID: String,\n121 |     deleteOptions: DeleteOptions?\n    :\n134 |    * - Returns: A Result containing either the operation response or an error\n135 |    */\n136 |   func performMaintenance(\n    |        `- note: protocol requires function 'performMaintenance(type:maintenanceOptions:)' with type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n137 |     type: MaintenanceType,\n138 |     maintenanceOptions: MaintenanceOptions?\n    :\n166 |    *            doesn't exist or cannot be cancelled\n167 |    */\n168 |   func cancelOperation(operationID: UUID) async -\u003e Bool\n    |        `- note: protocol requires function 'cancelOperation(operationID:)' with type '(UUID) async -\u003e Bool'\n169 | }\n170 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:98:20: error: cannot find 'BackupCommandFactory' in scope\n 96 | \n 97 |     // Create the backup command factory\n 98 |     commandFactory=BackupCommandFactory(\n    |                    `- error: cannot find 'BackupCommandFactory' in scope\n 99 |       resticService: resticService,\n100 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:130:13: error: extra argument 'type' in call\n128 |       id: uuid,\n129 |       operationID: operationID,\n130 |       type: type\n    |             `- error: extra argument 'type' in call\n131 |     )\n132 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:129:20: error: cannot convert value of type 'String' to expected argument type 'BackupOperation'\n127 |     activeOperations[uuid]=BackupOperationToken(\n128 |       id: uuid,\n129 |       operationID: operationID,\n    |                    `- error: cannot convert value of type 'String' to expected argument type 'BackupOperation'\n130 |       type: type\n131 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:144:33: error: cannot call value of non-function type 'Dictionary\u003cUUID, BackupOperationToken\u003e.Element?' (aka 'Optional\u003c(key: UUID, value: BackupOperationToken)\u003e')\n142 |    */\n143 |   private func unregisterOperation(operationID: String) {\n144 |     if let key=activeOperations.first(where: { $0.value.operationID == operationID })?.key {\n    |                                 `- error: cannot call value of non-function type 'Dictionary\u003cUUID, BackupOperationToken\u003e.Element?' (aka 'Optional\u003c(key: UUID, value: BackupOperationToken)\u003e')\n145 |       activeOperations.removeValue(forKey: key)\n146 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:170:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n168 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e {\n169 |     // Create a log context\n170 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n171 |       metadata: LogMetadataDTOCollection()\n172 |         .withPublic(key: \"source\", value: \"BackupServicesActor.createBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:179:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n177 | \n178 |     // Create a cancellation token\n179 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n180 | \n181 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:184:14: error: cannot infer contextual base in reference to member 'createBackup'\n182 |     registerOperation(\n183 |       operationID: operationID,\n184 |       type: .createBackup,\n    |              `- error: cannot infer contextual base in reference to member 'createBackup'\n185 |       cancellationToken: cancellationToken\n186 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:189:26: error: cannot find 'BackupProgressReporterImpl' in scope\n187 | \n188 |     // Create the progress reporter\n189 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n190 | \n191 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:193:20: error: extra argument 'operationID' in call\n191 |     // Create the parameters\n192 |     let parameters=BackupCreateParameters(\n193 |       operationID: operationID,\n    |                    `- error: extra argument 'operationID' in call\n194 |       sources: sources,\n195 |       excludePaths: excludePaths,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:253:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n251 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e {\n252 |     // Create a log context\n253 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n254 |       metadata: LogMetadataDTOCollection()\n255 |         .withPublic(key: \"source\", value: \"BackupServicesActor.restoreBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:262:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n260 | \n261 |     // Create a cancellation token\n262 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n263 | \n264 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:267:14: error: cannot infer contextual base in reference to member 'restoreBackup'\n265 |     registerOperation(\n266 |       operationID: operationID,\n267 |       type: .restoreBackup,\n    |              `- error: cannot infer contextual base in reference to member 'restoreBackup'\n268 |       cancellationToken: cancellationToken\n269 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:272:26: error: cannot find 'BackupProgressReporterImpl' in scope\n270 | \n271 |     // Create the progress reporter\n272 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n273 | \n274 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:276:20: error: extra argument 'operationID' in call\n274 |     // Create the parameters\n275 |     let parameters=BackupRestoreParameters(\n276 |       operationID: operationID,\n    |                    `- error: extra argument 'operationID' in call\n277 |       snapshotID: snapshotID,\n278 |       targetPath: targetPath,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:333:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n331 |   ) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e {\n332 |     // Create a log context\n333 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n334 |       metadata: LogMetadataDTOCollection()\n335 |         .withPublic(key: \"source\", value: \"BackupServicesActor.listSnapshots\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:344:14: error: cannot infer contextual base in reference to member 'listSnapshots'\n342 |     registerOperation(\n343 |       operationID: operationID,\n344 |       type: .listSnapshots\n    |              `- error: cannot infer contextual base in reference to member 'listSnapshots'\n345 |     )\n346 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:389:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n387 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e {\n388 |     // Create a log context\n389 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n390 |       metadata: LogMetadataDTOCollection()\n391 |         .withPublic(key: \"source\", value: \"BackupServicesActor.deleteBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:398:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n396 | \n397 |     // Create a cancellation token\n398 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n399 | \n400 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:403:14: error: cannot infer contextual base in reference to member 'deleteBackup'\n401 |     registerOperation(\n402 |       operationID: operationID,\n403 |       type: .deleteBackup,\n    |              `- error: cannot infer contextual base in reference to member 'deleteBackup'\n404 |       cancellationToken: cancellationToken\n405 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:408:26: error: cannot find 'BackupProgressReporterImpl' in scope\n406 | \n407 |     // Create the progress reporter\n408 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n409 | \n410 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:411:42: error: extra arguments at positions #1, #3, #4, #5 in call\n409 | \n410 |     // Create the parameters\n411 |     let parameters=BackupDeleteParameters(\n    |                                          `- error: extra arguments at positions #1, #3, #4, #5 in call\n412 |       operationID: operationID,\n413 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:266:10: note: 'init(snapshotID:pruneAfterDelete:)' declared here\n264 |    *   - pruneAfterDelete: Whether to prune after deletion\n265 |    */\n266 |   public init(\n    |          `- note: 'init(snapshotID:pruneAfterDelete:)' declared here\n267 |     snapshotID: String,\n268 |     pruneAfterDelete: Bool=false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:413:19: error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n411 |     let parameters=BackupDeleteParameters(\n412 |       operationID: operationID,\n413 |       snapshotID: snapshotID,\n    |                   |- error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n    |                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'\n    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n414 |       tags: tags,\n415 |       host: host,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:466:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n464 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e {\n465 |     // Create a log context\n466 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n467 |       metadata: LogMetadataDTOCollection()\n468 |         .withPublic(key: \"source\", value: \"BackupServicesActor.performMaintenance\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:475:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n473 | \n474 |     // Create a cancellation token\n475 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n476 | \n477 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:480:14: error: cannot infer contextual base in reference to member 'maintenance'\n478 |     registerOperation(\n479 |       operationID: operationID,\n480 |       type: .maintenance,\n    |              `- error: cannot infer contextual base in reference to member 'maintenance'\n481 |       cancellationToken: cancellationToken\n482 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:485:26: error: cannot find 'BackupProgressReporterImpl' in scope\n483 | \n484 |     // Create the progress reporter\n485 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n486 | \n487 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:488:47: error: extra arguments at positions #1, #2 in call\n486 | \n487 |     // Create the parameters\n488 |     let parameters=BackupMaintenanceParameters(\n    |                                               `- error: extra arguments at positions #1, #2 in call\n489 |       operationID: operationID,\n490 |       type: type,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:309:10: note: 'init(maintenanceType:options:)' declared here\n307 |    *   - options: Optional maintenance options\n308 |    */\n309 |   public init(\n    |          `- note: 'init(maintenanceType:options:)' declared here\n310 |     maintenanceType: MaintenanceType,\n311 |     options: MaintenanceOptions?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:489:7: error: missing argument for parameter 'maintenanceType' in call\n487 |     // Create the parameters\n488 |     let parameters=BackupMaintenanceParameters(\n489 |       operationID: operationID,\n    |       `- error: missing argument for parameter 'maintenanceType' in call\n490 |       type: type,\n491 |       options: options\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:309:10: note: 'init(maintenanceType:options:)' declared here\n307 |    *   - options: Optional maintenance options\n308 |    */\n309 |   public init(\n    |          `- note: 'init(maintenanceType:options:)' declared here\n310 |     maintenanceType: MaintenanceType,\n311 |     options: MaintenanceOptions?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:541:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n539 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n540 |     // Create a log context\n541 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n542 |       metadata: LogMetadataDTOCollection()\n543 |         .withPublic(key: \"source\", value: \"BackupServicesActor.verifyBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:550:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n548 | \n549 |     // Create a cancellation token\n550 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n551 | \n552 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:555:14: error: cannot infer contextual base in reference to member 'verifyBackup'\n553 |     registerOperation(\n554 |       operationID: operationID,\n555 |       type: .verifyBackup,\n    |              `- error: cannot infer contextual base in reference to member 'verifyBackup'\n556 |       cancellationToken: cancellationToken\n557 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:560:26: error: cannot find 'BackupProgressReporterImpl' in scope\n558 | \n559 |     // Create the progress reporter\n560 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n561 | \n562 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:583:54: error: cannot find type 'VerificationResult' in scope\n581 | \n582 |     // Map the result to the expected response format\n583 |     let mappedResult: Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e\n    |                                                      `- error: cannot find type 'VerificationResult' in scope\n584 | \n585 |     switch result {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:623:28: error: extraneous argument label 'message:' in call\n621 | \n622 |     // Log the cancellation\n623 |     await backupLogger.info(\n    |                            `- error: extraneous argument label 'message:' in call\n624 |       message: \"Operation \\(operationID) cancellation requested\",\n625 |       context: LogContextDTO(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:625:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n623 |     await backupLogger.info(\n624 |       message: \"Operation \\(operationID) cancellation requested\",\n625 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n626 |         metadata: LogMetadataDTOCollection()\n627 |           .withPublic(key: \"source\", value: \"BackupServicesActor.cancelOperation\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:21:31: error: cannot find type 'BackupCommandFactory' in scope\n  19 | \n  20 |   /// Factory for creating backup commands\n  21 |   private let commandFactory: BackupCommandFactory\n     |                               `- error: cannot find type 'BackupCommandFactory' in scope\n  22 | \n  23 |   /// Parser for command results\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n  44 |     resticService: ResticServiceProtocol,\n  45 |     repositoryInfo: RepositoryInfo,\n  46 |     commandFactory: BackupCommandFactory,\n     |                     `- error: cannot find type 'BackupCommandFactory' in scope\n  47 |     resultParser: BackupResultParser,\n  48 |     snapshotService: SnapshotServiceProtocol,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:70:17: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n  68 |    */\n  69 |   public func createBackup(\n  70 |     parameters: BackupCreateParameters,\n     |                 `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n  71 |     progressReporter: BackupProgressReporter?,\n  72 |     cancellationToken _: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:21:15: note: found this candidate\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:72:26: error: cannot find type 'CancellationToken' in scope\n  70 |     parameters: BackupCreateParameters,\n  71 |     progressReporter: BackupProgressReporter?,\n  72 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n  73 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n  74 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:163:17: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 161 |    */\n 162 |   public func restoreBackup(\n 163 |     parameters: BackupRestoreParameters,\n     |                 `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 164 |     progressReporter: BackupProgressReporter?,\n 165 |     cancellationToken _: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:96:15: note: found this candidate\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:165:26: error: cannot find type 'CancellationToken' in scope\n 163 |     parameters: BackupRestoreParameters,\n 164 |     progressReporter: BackupProgressReporter?,\n 165 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 166 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n 167 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:311:17: error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 309 |    */\n 310 |   public func deleteBackup(\n 311 |     parameters: BackupDeleteParameters,\n     |                 `- error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 312 |     cancellationToken _: CancellationToken?\n 313 |   ) async throws -\u003e DeleteResult {\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: note: found this candidate\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- note: found this candidate\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:249:15: note: found this candidate\n247 |  * Parameters for deleting a backup.\n248 |  */\n249 | public struct BackupDeleteParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n250 |   /// ID of the snapshot to delete\n251 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:312:26: error: cannot find type 'CancellationToken' in scope\n 310 |   public func deleteBackup(\n 311 |     parameters: BackupDeleteParameters,\n 312 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 313 |   ) async throws -\u003e DeleteResult {\n 314 |     // Create log context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1032:17: error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n1030 |    */\n1031 |   public func performMaintenance(\n1032 |     parameters: BackupMaintenanceParameters,\n     |                 `- error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n1033 |     progressReporter: BackupProgressReporter?,\n1034 |     cancellationToken _: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: note: found this candidate\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- note: found this candidate\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:292:15: note: found this candidate\n290 |  * Parameters for performing repository maintenance.\n291 |  */\n292 | public struct BackupMaintenanceParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n293 |   /// Type of maintenance to perform\n294 |   public let maintenanceType: MaintenanceType\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1034:26: error: cannot find type 'CancellationToken' in scope\n1032 |     parameters: BackupMaintenanceParameters,\n1033 |     progressReporter: BackupProgressReporter?,\n1034 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n1035 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupProgressInfo\u003e) {\n1036 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:96:16: error: cannot find 'LoggingServiceFactory' in scope\n  94 | \n  95 |     // Create log context\n  96 |     let logger=LoggingServiceFactory.shared.createLogger(domain: \"BackupServices\")\n     |                `- error: cannot find 'LoggingServiceFactory' in scope\n  97 |     let logContext=BackupLogContext(\n  98 |       source: \"BackupOperationsService.createBackup\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:121:61: error: cannot infer key path type from context; consider explicitly specifying a root type\n 119 |     if let excludePaths=parameters.excludePaths, !excludePaths.isEmpty {\n 120 |       command.arguments.append(\"--exclude\")\n 121 |       command.arguments.append(contentsOf: excludePaths.map(\\.path))\n     |                                                             `- error: cannot infer key path type from context; consider explicitly specifying a root type\n 122 |     }\n 123 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:189:16: error: cannot find 'LoggingServiceFactory' in scope\n 187 | \n 188 |     // Create log context\n 189 |     let logger=LoggingServiceFactory.shared.createLogger(domain: \"BackupServices\")\n     |                `- error: cannot find 'LoggingServiceFactory' in scope\n 190 |     let logContext=BackupLogContext(\n 191 |       source: \"BackupOperationsService.restoreBackup\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:221:61: error: cannot infer key path type from context; consider explicitly specifying a root type\n 219 |     if let excludePaths=parameters.excludePaths, !excludePaths.isEmpty {\n 220 |       command.arguments.append(\"--exclude\")\n 221 |       command.arguments.append(contentsOf: excludePaths.map(\\.path))\n     |                                                             `- error: cannot infer key path type from context; consider explicitly specifying a root type\n 222 |     }\n 223 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:315:16: error: cannot find 'LoggingServiceFactory' in scope\n 313 |   ) async throws -\u003e DeleteResult {\n 314 |     // Create log context\n 315 |     let logger=LoggingServiceFactory.shared.createLogger(domain: \"BackupServices\")\n     |                `- error: cannot find 'LoggingServiceFactory' in scope\n 316 |     let logContext=BackupLogContext(\n 317 |       source: \"BackupOperationsService.deleteBackup\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:465:18: error: cannot find 'LoggingServiceFactory' in scope\n 463 | \n 464 |       // Create a logger instance\n 465 |       let logger=LoggingServiceFactory.shared.createLogger(domain: \"BackupServices\")\n     |                  `- error: cannot find 'LoggingServiceFactory' in scope\n 466 | \n 467 |       // Create a log context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:506:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 504 |         percentComplete: 5.0,\n 505 |         itemsProcessed: 0,\n 506 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 507 |         bytesProcessed: 0,\n 508 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:508:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 506 |         totalItems: snapshot.stats.totalFiles,\n 507 |         bytesProcessed: 0,\n 508 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 509 |         estimatedTimeRemaining: nil,\n 510 |         details: \"Analysing snapshot structure\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:517:58: error: cannot convert value of type 'BackupVerificationResult' to specified type '(_, _)'\n 515 |       let verificationLevel: BackupInterfaces.VerificationLevel=verifyOptions?\n 516 |         .fullVerification == true ? .full : .standard\n 517 |       let (verificationResult, verificationProgress)=try await snapshotService.verifySnapshot(\n     |                                                          `- error: cannot convert value of type 'BackupVerificationResult' to specified type '(_, _)'\n 518 |         snapshotID: snapshot.id,\n 519 |         level: verificationLevel\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:517:94: error: incorrect argument label in call (have 'snapshotID:level:', expected 'snapshotID:fullVerification:')\n 515 |       let verificationLevel: BackupInterfaces.VerificationLevel=verifyOptions?\n 516 |         .fullVerification == true ? .full : .standard\n 517 |       let (verificationResult, verificationProgress)=try await snapshotService.verifySnapshot(\n     |                                                                                              `- error: incorrect argument label in call (have 'snapshotID:level:', expected 'snapshotID:fullVerification:')\n 518 |         snapshotID: snapshot.id,\n 519 |         level: verificationLevel\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:519:16: error: cannot convert value of type 'VerificationLevel' to expected argument type 'Bool'\n 517 |       let (verificationResult, verificationProgress)=try await snapshotService.verifySnapshot(\n 518 |         snapshotID: snapshot.id,\n 519 |         level: verificationLevel\n     |                `- error: cannot convert value of type 'VerificationLevel' to expected argument type 'Bool'\n 520 |       )\n 521 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:534:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 532 |         percentComplete: 10.0,\n 533 |         itemsProcessed: 0,\n 534 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 535 |         bytesProcessed: Int64(snapshot.stats.totalSize / 10),\n 536 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:535:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 533 |         itemsProcessed: 0,\n 534 |         totalItems: snapshot.stats.totalFiles,\n 535 |         bytesProcessed: Int64(snapshot.stats.totalSize / 10),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 536 |         totalBytes: Int64(snapshot.stats.totalSize),\n 537 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:536:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 534 |         totalItems: snapshot.stats.totalFiles,\n 535 |         bytesProcessed: Int64(snapshot.stats.totalSize / 10),\n 536 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 537 |         estimatedTimeRemaining: nil,\n 538 |         details: \"Verifying data integrity\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:546:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 544 |         phase: .verifying,\n 545 |         percentComplete: 50.0,\n 546 |         itemsProcessed: snapshot.stats.totalFiles / 2,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 547 |         totalItems: snapshot.stats.totalFiles,\n 548 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:547:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 545 |         percentComplete: 50.0,\n 546 |         itemsProcessed: snapshot.stats.totalFiles / 2,\n 547 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 548 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n 549 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:548:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 546 |         itemsProcessed: snapshot.stats.totalFiles / 2,\n 547 |         totalItems: snapshot.stats.totalFiles,\n 548 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 549 |         totalBytes: Int64(snapshot.stats.totalSize),\n 550 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:549:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 547 |         totalItems: snapshot.stats.totalFiles,\n 548 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n 549 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 550 |         estimatedTimeRemaining: nil,\n 551 |         details: \"Verifying data integrity\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:559:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 557 |         phase: .verifying,\n 558 |         percentComplete: 90.0,\n 559 |         itemsProcessed: snapshot.stats.totalFiles,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 560 |         totalItems: snapshot.stats.totalFiles,\n 561 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:560:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 558 |         percentComplete: 90.0,\n 559 |         itemsProcessed: snapshot.stats.totalFiles,\n 560 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 561 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n 562 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:561:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 559 |         itemsProcessed: snapshot.stats.totalFiles,\n 560 |         totalItems: snapshot.stats.totalFiles,\n 561 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 562 |         totalBytes: Int64(snapshot.stats.totalSize),\n 563 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:562:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 560 |         totalItems: snapshot.stats.totalFiles,\n 561 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n 562 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 563 |         estimatedTimeRemaining: nil,\n 564 |         details: \"Verifying data integrity\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:572:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 570 |         phase: .finalising,\n 571 |         percentComplete: 95.0,\n 572 |         itemsProcessed: snapshot.stats.totalFiles,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 573 |         totalItems: snapshot.stats.totalFiles,\n 574 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:573:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 571 |         percentComplete: 95.0,\n 572 |         itemsProcessed: snapshot.stats.totalFiles,\n 573 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 574 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 575 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:574:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 572 |         itemsProcessed: snapshot.stats.totalFiles,\n 573 |         totalItems: snapshot.stats.totalFiles,\n 574 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 575 |         totalBytes: Int64(snapshot.stats.totalSize),\n 576 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:575:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 573 |         totalItems: snapshot.stats.totalFiles,\n 574 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 575 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 576 |         estimatedTimeRemaining: nil,\n 577 |         details: \"Finalising verification\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:597:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 595 |         phase: .completed,\n 596 |         percentComplete: 100.0,\n 597 |         itemsProcessed: snapshot.stats.totalFiles,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 598 |         totalItems: snapshot.stats.totalFiles,\n 599 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:598:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 596 |         percentComplete: 100.0,\n 597 |         itemsProcessed: snapshot.stats.totalFiles,\n 598 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 599 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 600 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:599:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 597 |         itemsProcessed: snapshot.stats.totalFiles,\n 598 |         totalItems: snapshot.stats.totalFiles,\n 599 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 600 |         totalBytes: Int64(snapshot.stats.totalSize),\n 601 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:600:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 598 |         totalItems: snapshot.stats.totalFiles,\n 599 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 600 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 601 |         estimatedTimeRemaining: nil,\n 602 |         details: \"Verification completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:642:11: error: cannot find 'logger' in scope\n 640 | \n 641 |     // Log operation start\n 642 |     await logger.info(\"Starting snapshot comparison\", context: context)\n     |           `- error: cannot find 'logger' in scope\n 643 | \n 644 |     // Report initial progress\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:646:15: error: type 'BackupProgressInfo.Phase' has no member 'preparing'\n 644 |     // Report initial progress\n 645 |     await reportProgress(BackupProgressInfo(\n 646 |       phase: .preparing,\n     |               `- error: type 'BackupProgressInfo.Phase' has no member 'preparing'\n 647 |       percentComplete: 0.0,\n 648 |       itemsProcessed: 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:665:27: error: enum case 'operationCancelled' has no associated values\n 663 |       // Check if the operation was cancelled\n 664 |       if let token=cancellationToken, await token.isCancelled {\n 665 |         throw BackupError.operationCancelled(\n     |                           `- error: enum case 'operationCancelled' has no associated values\n 666 |           details: \"Snapshot comparison cancelled\"\n 667 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:677:27: error: enum case 'operationCancelled' has no associated values\n 675 |       // Check if the operation was cancelled\n 676 |       if let token=cancellationToken, await token.isCancelled {\n 677 |         throw BackupError.operationCancelled(\n     |                           `- error: enum case 'operationCancelled' has no associated values\n 678 |           details: \"Snapshot comparison cancelled\"\n 679 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:698:18: error: 'nil' requires a contextual type\n 696 |         firstSnapshotID: parameters.firstSnapshotID,\n 697 |         secondSnapshotID: parameters.secondSnapshotID,\n 698 |         options: nil\n     |                  `- error: 'nil' requires a contextual type\n 699 |       )\n 700 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:706:27: error: enum case 'operationCancelled' has no associated values\n 704 |       // Check if the operation was cancelled\n 705 |       if let token=cancellationToken, await token.isCancelled {\n 706 |         throw BackupError.operationCancelled(\n     |                           `- error: enum case 'operationCancelled' has no associated values\n 707 |           details: \"Snapshot comparison cancelled\"\n 708 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:724:57: error: missing argument label 'output:' in call\n 722 | \n 723 |       // Parse the diff result\n 724 |       let comparisonDTO=try resultParser.parseDiffResult(\n     |                                                         `- error: missing argument label 'output:' in call\n 725 |         diffOutput,\n 726 |         firstSnapshotID: parameters.firstSnapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:731:31: error: value of type 'BackupResultParser' has no member 'createSnapshotComparisonResult'\n 729 | \n 730 |       // Convert to interface type\n 731 |       let result=resultParser.createSnapshotComparisonResult(\n     |                               `- error: value of type 'BackupResultParser' has no member 'createSnapshotComparisonResult'\n 732 |         from: comparisonDTO,\n 733 |         firstSnapshotID: parameters.firstSnapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:749:18: error: extra argument 'result' in call\n 747 |         estimatedTimeRemaining: nil,\n 748 |         details: \"Comparison complete\",\n 749 |         result: .success\n     |                  `- error: extra argument 'result' in call\n 750 |       ), reporter: progressReporter)\n 751 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:749:18: error: cannot infer contextual base in reference to member 'success'\n 747 |         estimatedTimeRemaining: nil,\n 748 |         details: \"Comparison complete\",\n 749 |         result: .success\n     |                  `- error: cannot infer contextual base in reference to member 'success'\n 750 |       ), reporter: progressReporter)\n 751 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:753:13: error: cannot find 'logger' in scope\n 751 | \n 752 |       // Log success\n 753 |       await logger.info(\n     |             `- error: cannot find 'logger' in scope\n 754 |         \"Snapshot comparison completed successfully: \" +\n 755 |           \"\\(comparisonDTO.addedCount) added, \" +\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:765:13: error: cannot find 'logger' in scope\n 763 |       // Map error and log failure\n 764 |       let backupError=errorMapper.mapError(error)\n 765 |       await logger.error(\n     |             `- error: cannot find 'logger' in scope\n 766 |         \"Snapshot comparison failed: \\(backupError.localizedDescription)\",\n 767 |         context: context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:780:18: error: extra argument 'result' in call\n 778 |         estimatedTimeRemaining: nil,\n 779 |         details: \"Comparison failed: \\(backupError.localizedDescription)\",\n 780 |         result: .failure(backupError)\n     |                  `- error: extra argument 'result' in call\n 781 |       ), reporter: progressReporter)\n 782 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:780:18: error: cannot infer contextual base in reference to member 'failure'\n 778 |         estimatedTimeRemaining: nil,\n 779 |         details: \"Comparison failed: \\(backupError.localizedDescription)\",\n 780 |         result: .failure(backupError)\n     |                  `- error: cannot infer contextual base in reference to member 'failure'\n 781 |       ), reporter: progressReporter)\n 782 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:842:45: error: missing argument for parameter 'for' in call\n 840 |     // Only report if a reporter was provided\n 841 |     if let reporter {\n 842 |       await reporter.reportProgress(progress)\n     |                                             `- error: missing argument for parameter 'for' in call\n 843 |     }\n 844 |   }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:12:8: note: 'reportProgress(_:for:)' declared here\n 10 |   ///   - progressInfo: The progress information\n 11 |   ///   - operation: The operation being performed\n 12 |   func reportProgress(_ progressInfo: BackupProgressInfo, for operation: BackupOperation) async\n    |        `- note: 'reportProgress(_:for:)' declared here\n 13 | \n 14 |   /// Reports that an operation has been cancelled\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:958:30: error: value of type 'DeleteResponse' has no member 'errors'\n 956 |       return DeleteResult(\n 957 |         snapshotID: snapshotID,\n 958 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                              `- error: value of type 'DeleteResponse' has no member 'errors'\n 959 |         filesDeleted: response.filesDeleted ?? 0,\n 960 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:958:57: error: value of type 'DeleteResponse' has no member 'errors'\n 956 |       return DeleteResult(\n 957 |         snapshotID: snapshotID,\n 958 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                                                         `- error: value of type 'DeleteResponse' has no member 'errors'\n 959 |         filesDeleted: response.filesDeleted ?? 0,\n 960 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:991:11: error: cannot find 'logger' in scope\n 989 |   ) async throws -\u003e BackupSnapshot {\n 990 |     // Log the request\n 991 |     await logger.debug(\"Retrieving snapshot details\", context: context)\n     |           `- error: cannot find 'logger' in scope\n 992 | \n 993 |     // Create the command to get snapshot details\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1003:35: error: value of type 'BackupResultParser' has no member 'parseSnapshotInfo'\n1001 | \n1002 |     // Parse the output\n1003 |     let snapshot=try resultParser.parseSnapshotInfo(output)\n     |                                   `- error: value of type 'BackupResultParser' has no member 'parseSnapshotInfo'\n1004 | \n1005 |     // Check if the snapshot was found\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1007:41: error: incorrect argument label in call (have 'details:', expected 'id:')\n1005 |     // Check if the snapshot was found\n1006 |     guard let snapshot else {\n1007 |       throw BackupError.snapshotNotFound(\n     |                                         `- error: incorrect argument label in call (have 'details:', expected 'id:')\n1008 |         details: \"Snapshot with ID \\(snapshotID) not found\"\n1009 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1013:11: error: cannot find 'logger' in scope\n1011 | \n1012 |     // Log success\n1013 |     await logger.debug(\n     |           `- error: cannot find 'logger' in scope\n1014 |       \"Retrieved snapshot details successfully\",\n1015 |       context: context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1053:16: error: cannot find 'LoggingServiceFactory' in scope\n1051 | \n1052 |     // Create log context\n1053 |     let logger=LoggingServiceFactory.shared.createLogger(domain: \"BackupServices\")\n     |                `- error: cannot find 'LoggingServiceFactory' in scope\n1054 |     let logContext=BackupLogContext(\n1055 |       source: \"BackupOperationsService.performMaintenance\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:23:31: error: cannot find type 'ResticCommandFactory' in scope\n 21 | \n 22 |   /// Factory for creating Restic commands\n 23 |   private let commandFactory: ResticCommandFactory\n    |                               `- error: cannot find type 'ResticCommandFactory' in scope\n 24 | \n 25 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:50:20: error: cannot find 'ResticCommandFactory' in scope\n 48 |     self.operationExecutor=operationExecutor\n 49 |     self.operationsService=operationsService\n 50 |     commandFactory=ResticCommandFactory()\n    |                    `- error: cannot find 'ResticCommandFactory' in scope\n 51 |     resultParser=SnapshotResultParser()\n 52 |   }\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:22:31: error: cannot find type 'ResticCommandFactory' in scope\n 20 | \n 21 |   /// Factory for creating Restic commands\n 22 |   private let commandFactory: ResticCommandFactory\n    |                               `- error: cannot find type 'ResticCommandFactory' in scope\n 23 | \n 24 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:43:20: error: cannot find 'ResticCommandFactory' in scope\n 41 |     self.resticService=resticService\n 42 |     self.operationExecutor=operationExecutor\n 43 |     commandFactory=ResticCommandFactory()\n    |                    `- error: cannot find 'ResticCommandFactory' in scope\n 44 |     resultParser=SnapshotResultParser()\n 45 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:65:15: error: extra argument 'source' in call\n 63 |     let logContext=SnapshotLogContext(\n 64 |       operation: \"listSnapshots\",\n 65 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n 66 |     )\n 67 |     .withPublic(key: \"operationType\", value: \"listSnapshots\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:64:33: error: missing argument for parameter 'snapshotID' in call\n 62 |     // Create a log context for privacy-aware logging\n 63 |     let logContext=SnapshotLogContext(\n 64 |       operation: \"listSnapshots\",\n    |                                 `- error: missing argument for parameter 'snapshotID' in call\n 65 |       source: \"SnapshotOperationsService\"\n 66 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:67:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n 65 |       source: \"SnapshotOperationsService\"\n 66 |     )\n 67 |     .withPublic(key: \"operationType\", value: \"listSnapshots\")\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n 68 | \n 69 |     if let repositoryID=parameters.repositoryID {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:85:19: error: extra argument 'logContext' in call\n 83 |       progressReporter: progressReporter,\n 84 |       cancellationToken: cancellationToken,\n 85 |       logContext: logContext,\n    |                   `- error: extra argument 'logContext' in call\n 86 |       operation: { params, reporter, _ in\n 87 |         // Create command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:572:31: error: extra argument 'dataIntegrityCheck' in call\n570 |         return try self.resultParser.parseVerificationResult(\n571 |           repositoryCheck: repositoryCheckOutput,\n572 |           dataIntegrityCheck: dataIntegrityOutput\n    |                               `- error: extra argument 'dataIntegrityCheck' in call\n573 |         )\n574 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:570:38: error: cannot convert value of type 'VerificationResultDTO' to closure result type 'BackupVerificationResultDTO'\n568 | \n569 |         // Parse results\n570 |         return try self.resultParser.parseVerificationResult(\n    |                                      `- error: cannot convert value of type 'VerificationResultDTO' to closure result type 'BackupVerificationResultDTO'\n571 |           repositoryCheck: repositoryCheckOutput,\n572 |           dataIntegrityCheck: dataIntegrityOutput\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:212:19: error: extra argument 'source' in call\n210 |         SnapshotLogContext(\n211 |           operation: \"getSnapshotDetails\",\n212 |           source: \"SnapshotOperationsService\"\n    |                   `- error: extra argument 'source' in call\n213 |         )\n214 |         .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:211:42: error: missing argument for parameter 'snapshotID' in call\n209 |       func createLogContext() -\u003e SnapshotLogContext {\n210 |         SnapshotLogContext(\n211 |           operation: \"getSnapshotDetails\",\n    |                                          `- error: missing argument for parameter 'snapshotID' in call\n212 |           source: \"SnapshotOperationsService\"\n213 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:214:10: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n212 |           source: \"SnapshotOperationsService\"\n213 |         )\n214 |         .withPublic(key: \"snapshotID\", value: snapshotID)\n    |          `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n215 |         .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n216 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:360:19: error: extra argument 'source' in call\n358 |         SnapshotLogContext(\n359 |           operation: operationType.rawValue,\n360 |           source: \"SnapshotOperationsService\"\n    |                   `- error: extra argument 'source' in call\n361 |         )\n362 |         .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:359:44: error: missing argument for parameter 'snapshotID' in call\n357 |       func createLogContext() -\u003e SnapshotLogContext {\n358 |         SnapshotLogContext(\n359 |           operation: operationType.rawValue,\n    |                                            `- error: missing argument for parameter 'snapshotID' in call\n360 |           source: \"SnapshotOperationsService\"\n361 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:362:10: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n360 |           source: \"SnapshotOperationsService\"\n361 |         )\n362 |         .withPublic(key: \"snapshotID\", value: snapshotID)\n    |          `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n363 |         .withPublic(key: \"pattern\", value: pattern)\n364 |         .withPublic(key: \"caseSensitive\", value: String(caseSensitive))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:22:31: error: cannot find type 'ResticCommandFactory' in scope\n 20 | \n 21 |   /// Factory for creating Restic commands\n 22 |   private let commandFactory: ResticCommandFactory\n    |                               `- error: cannot find type 'ResticCommandFactory' in scope\n 23 | \n 24 |   /// Executor for operations\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:40:20: error: cannot find 'ResticCommandFactory' in scope\n 38 |     self.resticService=resticService\n 39 |     self.operationExecutor=operationExecutor\n 40 |     commandFactory=ResticCommandFactory()\n    |                    `- error: cannot find 'ResticCommandFactory' in scope\n 41 |   }\n 42 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:116:44: error: argument type 'any ResticCommand' does not conform to expected type 'ResticCommand'\n114 |     // Create a task for executing the command\n115 |     let executionTask=Task {\n116 |       try await self.resticService.execute(command)\n    |                                            `- error: argument type 'any ResticCommand' does not conform to expected type 'ResticCommand'\n117 |     }\n118 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:168:22: warning: no 'async' operations occur within 'await' expression\n166 |     do {\n167 |       // Wait for execution to complete\n168 |       let result=try await executionTask.value\n    |                      `- warning: no 'async' operations occur within 'await' expression\n169 | \n170 |       // Cancel progress updates\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:168:18: warning: no calls to throwing functions occur within 'try' expression\n166 |     do {\n167 |       // Wait for execution to complete\n168 |       let result=try await executionTask.value\n    |                  `- warning: no calls to throwing functions occur within 'try' expression\n169 | \n170 |       // Cancel progress updates\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:242:12: error: type 'EstimateSizeParameters' does not conform to protocol 'SnapshotOperationParameters'\n240 |     let resultParser=SnapshotResultParser()\n241 | \n242 |     struct EstimateSizeParameters: SnapshotOperationParameters {\n    |            |- error: type 'EstimateSizeParameters' does not conform to protocol 'SnapshotOperationParameters'\n    |            `- note: add stubs for conformance\n243 |       let snapshotID: String\n244 |       let operationType: SnapshotOperationType = .get\n    :\n250 |       }\n251 | \n252 |       func createLogContext() -\u003e SnapshotLogContextAdapter {\n    |            `- note: candidate has non-matching type '() -\u003e SnapshotLogContextAdapter'\n253 |         SnapshotLogContextAdapter(\n254 |           snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:44:8: note: protocol requires function 'createLogContext()' with type '() -\u003e SnapshotLogContext'\n 42 |   /// Creates a log context for the operation\n 43 |   /// - Returns: A SnapshotLogContext for logging\n 44 |   func createLogContext() -\u003e SnapshotLogContext\n    |        `- note: protocol requires function 'createLogContext()' with type '() -\u003e SnapshotLogContext'\n 45 | }\n 46 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:268:13: warning: variable 'args' was never mutated; consider changing to 'let' constant\n266 |       operation: { _, reporter, _ in\n267 |         // Create a command to get snapshot details with statistics\n268 |         var args=[\"snapshots\", snapshotID, \"--json\", \"--stats\"]\n    |             `- warning: variable 'args' was never mutated; consider changing to 'let' constant\n269 | \n270 |         let command=ResticCommandImpl(arguments: args)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:19:23: error: cannot find type 'LoggingProtocol' in scope\n 17 | \n 18 |   /// Logger for snapshot operations\n 19 |   private let logger: LoggingProtocol\n    |                       `- error: cannot find type 'LoggingProtocol' in scope\n 20 | \n 21 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:32:13: error: cannot find type 'LoggingProtocol' in scope\n 30 |     resticService: ResticServiceProtocol,\n 31 |     resultParser: SnapshotResultParser,\n 32 |     logger: LoggingProtocol\n    |             `- error: cannot find type 'LoggingProtocol' in scope\n 33 |   ) {\n 34 |     self.resticService=resticService\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:55:15: error: extra argument 'source' in call\n 53 |     let context=SnapshotLogContext(\n 54 |       operation: \"getSnapshotDetails\",\n 55 |       source: \"SnapshotServiceImpl\"\n    |               `- error: extra argument 'source' in call\n 56 |     )\n 57 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:54:38: error: missing argument for parameter 'snapshotID' in call\n 52 |     // Create a log context\n 53 |     let context=SnapshotLogContext(\n 54 |       operation: \"getSnapshotDetails\",\n    |                                      `- error: missing argument for parameter 'snapshotID' in call\n 55 |       source: \"SnapshotServiceImpl\"\n 56 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:57:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n 55 |       source: \"SnapshotServiceImpl\"\n 56 |     )\n 57 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n 58 |     .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n 59 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:109:15: error: extra argument 'source' in call\n107 |     let context=SnapshotLogContext(\n108 |       operation: \"getLatestSnapshot\",\n109 |       source: \"SnapshotServiceImpl\"\n    |               `- error: extra argument 'source' in call\n110 |     )\n111 |     .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:108:37: error: missing argument for parameter 'snapshotID' in call\n106 |     // Create a log context\n107 |     let context=SnapshotLogContext(\n108 |       operation: \"getLatestSnapshot\",\n    |                                     `- error: missing argument for parameter 'snapshotID' in call\n109 |       source: \"SnapshotServiceImpl\"\n110 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:111:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n109 |       source: \"SnapshotServiceImpl\"\n110 |     )\n111 |     .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n112 | \n113 |     await logger.info(\"Getting latest snapshot\", context: context)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:162:15: error: extra argument 'source' in call\n160 |     let context=SnapshotLogContext(\n161 |       operation: \"listSnapshots\",\n162 |       source: \"SnapshotServiceImpl\"\n    |               `- error: extra argument 'source' in call\n163 |     )\n164 |     .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:161:33: error: missing argument for parameter 'snapshotID' in call\n159 |     // Create a log context\n160 |     let context=SnapshotLogContext(\n161 |       operation: \"listSnapshots\",\n    |                                 `- error: missing argument for parameter 'snapshotID' in call\n162 |       source: \"SnapshotServiceImpl\"\n163 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:164:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n162 |       source: \"SnapshotServiceImpl\"\n163 |     )\n164 |     .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n165 | \n166 |     await logger.info(\"Listing snapshots\", context: context)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:181:38: error: value of type 'SnapshotResultParser' has no member 'parseSnapshotList'\n179 | \n180 |       // Parse the result\n181 |       let snapshots=try resultParser.parseSnapshotList(output)\n    |                                      `- error: value of type 'SnapshotResultParser' has no member 'parseSnapshotList'\n182 | \n183 |       await logger.info(\"Retrieved \\(snapshots.count) snapshots\", context: context)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:212:15: error: extra argument 'source' in call\n210 |     let context=SnapshotLogContext(\n211 |       operation: \"compareSnapshots\",\n212 |       source: \"SnapshotServiceImpl\"\n    |               `- error: extra argument 'source' in call\n213 |     )\n214 |     .withPublic(key: \"firstSnapshotID\", value: firstSnapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:211:36: error: missing argument for parameter 'snapshotID' in call\n209 |     // Create a log context\n210 |     let context=SnapshotLogContext(\n211 |       operation: \"compareSnapshots\",\n    |                                    `- error: missing argument for parameter 'snapshotID' in call\n212 |       source: \"SnapshotServiceImpl\"\n213 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:214:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n212 |       source: \"SnapshotServiceImpl\"\n213 |     )\n214 |     .withPublic(key: \"firstSnapshotID\", value: firstSnapshotID)\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n215 |     .withPublic(key: \"secondSnapshotID\", value: secondSnapshotID)\n216 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:267:15: error: extra argument 'source' in call\n265 |     let context=SnapshotLogContext(\n266 |       operation: \"verifySnapshot\",\n267 |       source: \"SnapshotServiceImpl\"\n    |               `- error: extra argument 'source' in call\n268 |     )\n269 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:266:34: error: missing argument for parameter 'snapshotID' in call\n264 |     // Create a log context\n265 |     let context=SnapshotLogContext(\n266 |       operation: \"verifySnapshot\",\n    |                                  `- error: missing argument for parameter 'snapshotID' in call\n267 |       source: \"SnapshotServiceImpl\"\n268 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:269:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n267 |       source: \"SnapshotServiceImpl\"\n268 |     )\n269 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n270 |     .withPublic(key: \"fullVerification\", value: String(fullVerification))\n271 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupCancellationHandler.swift:7:58: error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 5 |  * Implementation of the cancellation handler for backup operations.\n 6 |  */\n 7 | public actor BackupCancellationHandler: BackupInterfaces.CancellationHandlerProtocol {\n   |                                                          `- error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 8 |   /// Map of operation IDs to cancellation tokens\n 9 |   private var tokens: [UUID: BackupCancellationToken]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupErrorMapper.swift:43:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n41 | \n42 |     // Handle NSError types\n43 |     if let nsError=error as? NSError {\n   |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n44 |       switch nsError.domain {\n45 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:17:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 15 | \n 16 |   /// Handler for operation cancellation\n 17 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 18 | \n 19 |   /// Collector for metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:40:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 38 |   public init(\n 39 |     logger: any LoggingProtocol,\n 40 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 41 |     metricsCollector: BackupMetricsCollector,\n 42 |     errorLogContextMapper: ErrorLogContextMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:75:55: error: value of type 'P' has no member 'operationID'\n 73 |     )\n 74 |     .withOperation(parameters.operationType)\n 75 |     .withPublic(key: \"operationID\", value: parameters.operationID.uuidString)\n    |                                                       `- error: value of type 'P' has no member 'operationID'\n 76 | \n 77 |     // Log operation start\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:85:28: warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n 61 |    * - Throws: BackupOperationError if the operation fails\n 62 |    */\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n    |                                                     `- note: consider making generic parameter 'R' conform to the 'Sendable' protocol\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, BackupCancellationToken?) async throws -\u003e R,\n    :\n 83 |     do {\n 84 |       // Execute the operation\n 85 |       let result=try await operation(parameters, progressReporter, cancellationToken)\n    |                            `- warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n 86 | \n 87 |       // Log operation completion\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:16:35: error: cannot find type 'CancellationHandlerProtocol' in scope\n 14 |  * - Support for both task-based and token-based cancellation\n 15 |  */\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n    |                                   `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cany Sendable, Error\u003e]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:174:21: error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n172 |  * Implementation of BackupCancellationToken.\n173 |  */\n174 | private final class BackupCancellationTokenImpl: BackupCancellationToken, @unchecked Sendable {\n    |                     |- error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n    |                     `- note: add stubs for conformance\n175 |   /// The unique identifier for this token\n176 |   public let id: String\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/BackupCancellationToken.swift:25:8: note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n23 |    * - Parameter callback: The callback to register\n24 |    */\n25 |   func registerCancellationCallback(_ callback: @escaping @Sendable () -\u003e Void) async\n   |        `- note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n26 | }\n27 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:216:20: warning: result of call to 'cancelOperation(id:)' is unused\n214 | \n215 |     // Notify the handler\n216 |     await handler?.cancelOperation(id: id)\n    |                    `- warning: result of call to 'cancelOperation(id:)' is unused\n217 |   }\n218 | }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorLogContextMapper.swift:39:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n37 | \n38 |     // Add error code if available\n39 |     if let nsError=error as? NSError {\n   |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n40 |       return errorContext\n41 |         .withPublic(key: \"errorCode\", value: String(nsError.code))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorMapper.swift:58:17: error: type '_ErrorCodeProtocol' has no member 'other'\n 56 |         )\n 57 | \n 58 |       case let .other(message):\n    |                 `- error: type '_ErrorCodeProtocol' has no member 'other'\n 59 |         BackupError.unknownError(\n 60 |           details: message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:27:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 25 | \n 26 |   /// Handler for operation cancellation\n 27 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 28 | \n 29 |   /// Collector for operation metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:52:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 50 |   public init(\n 51 |     resticService: ResticServiceProtocol,\n 52 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 53 |     metricsCollector: BackupMetricsCollector,\n 54 |     logger: any LoggingProtocol,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:90:15: error: extra argument 'source' in call\n 88 |     let logContext=SnapshotLogContext(\n 89 |       operation: parameters.operationType.rawValue,\n 90 |       source: \"SnapshotOperationExecutor\"\n    |               `- error: extra argument 'source' in call\n 91 |     )\n 92 |     .withPublic(key: \"operation_type\", value: parameters.operationType.rawValue)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:89:51: error: missing argument for parameter 'snapshotID' in call\n 87 |     // Create log context for privacy-aware logging\n 88 |     let logContext=SnapshotLogContext(\n 89 |       operation: parameters.operationType.rawValue,\n    |                                                   `- error: missing argument for parameter 'snapshotID' in call\n 90 |       source: \"SnapshotOperationExecutor\"\n 91 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:92:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n 90 |       source: \"SnapshotOperationExecutor\"\n 91 |     )\n 92 |     .withPublic(key: \"operation_type\", value: parameters.operationType.rawValue)\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n 93 |     .withPublic(key: \"operation_id\", value: parameters.operationID)\n 94 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:93:56: error: value of type 'P' has no member 'operationID'\n 91 |     )\n 92 |     .withPublic(key: \"operation_type\", value: parameters.operationType.rawValue)\n 93 |     .withPublic(key: \"operation_id\", value: parameters.operationID)\n    |                                                        `- error: value of type 'P' has no member 'operationID'\n 94 | \n 95 |     // Add snapshot ID if available\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:96:8: error: initializer for conditional binding must have Optional type, not 'String'\n 94 | \n 95 |     // Add snapshot ID if available\n 96 |     if let snapshotID, !snapshotID.isEmpty {\n    |        `- error: initializer for conditional binding must have Optional type, not 'String'\n 97 |       logContext.withPublic(key: \"snapshot_id\", value: snapshotID)\n 98 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:101:36: error: value of type 'P' has no member 'repositoryID'\n 99 | \n100 |     // Add repository ID if available\n101 |     if let repositoryID=parameters.repositoryID, !repositoryID.isEmpty {\n    |                                    `- error: value of type 'P' has no member 'repositoryID'\n102 |       logContext.withPublic(key: \"repository_id\", value: repositoryID)\n103 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:106:30: error: extra argument 'metadata' in call\n104 |       SnapshotLogContext(\n105 |         operation: \"unknown\",\n106 |         metadata: logContext.metadata\n    |                              `- error: extra argument 'metadata' in call\n107 |       )\n108 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:105:29: error: missing argument for parameter 'snapshotID' in call\n103 |       // Create a new context with the existing metadata\n104 |       SnapshotLogContext(\n105 |         operation: \"unknown\",\n    |                             `- error: missing argument for parameter 'snapshotID' in call\n106 |         metadata: logContext.metadata\n107 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:112:8: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n110 |     // Add error information with proper privacy annotations\n111 |     let updatedContext=snapshotContext\n112 |       .withPublic(key: \"status\", value: \"error\")\n    |        `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n113 |       .withPublic(key: \"errorType\", value: String(describing: type(of: error)))\n114 |       .withPrivate(key: \"errorMessage\", value: errorDescription)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:138:56: error: missing argument for parameter 'snapshotID' in call\n136 |   ) async {\n137 |     // Create a context with all the information using proper privacy annotations\n138 |     var context=SnapshotLogContext(operation: operation)\n    |                                                        `- error: missing argument for parameter 'snapshotID' in call\n139 |       .withPublic(key: \"phase\", value: phase)\n140 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:139:8: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n137 |     // Create a context with all the information using proper privacy annotations\n138 |     var context=SnapshotLogContext(operation: operation)\n139 |       .withPublic(key: \"phase\", value: phase)\n    |        `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n140 | \n141 |     if let progress {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:348:16: error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n346 |       secondSnapshotID: secondSnapshotID,\n347 |       addedFiles: interfaceDifference.addedFiles\n348 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n    |                `- error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n349 |       removedFiles: interfaceDifference.removedFiles\n350 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:350:16: error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n348 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n349 |       removedFiles: interfaceDifference.removedFiles\n350 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n    |                `- error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n351 |       modifiedFiles: interfaceDifference.modifiedFiles\n352 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:352:16: error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n350 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n351 |       modifiedFiles: interfaceDifference.modifiedFiles\n352 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n    |                `- error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n353 |       unchangedFiles: [],\n354 |       changeSize: calculateChangeSize(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:532:10: error: type 'VerificationIssue.IssueType' has no member 'permissionDenied'\n530 |         .checksumMismatch\n531 |       case .permissionDenied:\n532 |         .permissionDenied\n    |          `- error: type 'VerificationIssue.IssueType' has no member 'permissionDenied'\n533 |       case .structuralError:\n534 |         .structuralError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:549:10: error: type 'RepairAction.ActionType' has no member 'pruneRepository'\n547 |         .rebuildMetadata\n548 |       case .pruneRepository:\n549 |         .pruneRepository\n    |          `- error: type 'RepairAction.ActionType' has no member 'pruneRepository'\n550 |     }\n551 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:585:19: error: value of type 'SnapshotFileDTO' has no member 'mode'\n583 |       size: entry.size,\n584 |       modificationTime: entry.modificationTime ?? Date(),\n585 |       mode: entry.mode ?? 0,\n    |                   `- error: value of type 'SnapshotFileDTO' has no member 'mode'\n586 |       uid: entry.uid ?? 0,\n587 |       gid: entry.gid ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:586:18: error: value of type 'SnapshotFileDTO' has no member 'uid'\n584 |       modificationTime: entry.modificationTime ?? Date(),\n585 |       mode: entry.mode ?? 0,\n586 |       uid: entry.uid ?? 0,\n    |                  `- error: value of type 'SnapshotFileDTO' has no member 'uid'\n587 |       gid: entry.gid ?? 0,\n588 |       contentHash: entry.hash\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:587:18: error: value of type 'SnapshotFileDTO' has no member 'gid'\n585 |       mode: entry.mode ?? 0,\n586 |       uid: entry.uid ?? 0,\n587 |       gid: entry.gid ?? 0,\n    |                  `- error: value of type 'SnapshotFileDTO' has no member 'gid'\n588 |       contentHash: entry.hash\n589 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:588:26: error: value of type 'SnapshotFileDTO' has no member 'hash'\n586 |       uid: entry.uid ?? 0,\n587 |       gid: entry.gid ?? 0,\n588 |       contentHash: entry.hash\n    |                          `- error: value of type 'SnapshotFileDTO' has no member 'hash'\n589 |     )\n590 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:668:41: error: cannot find 'DiffResultDTO' in scope\n666 |       decoder.dateDecodingStrategy = .iso8601\n667 | \n668 |       let diffResult=try decoder.decode(DiffResultDTO.self, from: jsonData)\n    |                                         `- error: cannot find 'DiffResultDTO' in scope\n669 | \n670 |       // Extract the files from the diff result\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:668:34: error: type of expression is ambiguous without a type annotation\n666 |       decoder.dateDecodingStrategy = .iso8601\n667 | \n668 |       let diffResult=try decoder.decode(DiffResultDTO.self, from: jsonData)\n    |                                  `- error: type of expression is ambiguous without a type annotation\n669 | \n670 |       // Extract the files from the diff result\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:679:11: error: argument 'type' must precede argument 'permissions'\n677 |           owner: entry.user,\n678 |           group: entry.group,\n679 |           type: entry.type ?? \"file\"\n    |           `- error: argument 'type' must precede argument 'permissions'\n680 |         )\n681 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:691:11: error: argument 'type' must precede argument 'permissions'\n689 |           owner: entry.user,\n690 |           group: entry.group,\n691 |           type: entry.type ?? \"file\"\n    |           `- error: argument 'type' must precede argument 'permissions'\n692 |         )\n693 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:703:11: error: argument 'type' must precede argument 'permissions'\n701 |           owner: entry.user,\n702 |           group: entry.group,\n703 |           type: entry.type ?? \"file\"\n    |           `- error: argument 'type' must precede argument 'permissions'\n704 |         )\n705 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:14:28: error: cannot find type 'DomainLoggerProtocol' in scope\n 12 |  * file paths and backup metadata.\n 13 |  */\n 14 | public actor BackupLogger: DomainLoggerProtocol {\n    |                            `- error: cannot find type 'DomainLoggerProtocol' in scope\n 15 |   /// The underlying logger\n 16 |   private let loggingService: any LoggingProtocol\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:448:25: error: cannot find type 'MetadataCollection' in scope\n446 | \n447 | extension BackupLogContext {\n448 |   func getMetadata() -\u003e MetadataCollection {\n    |                         `- error: cannot find type 'MetadataCollection' in scope\n449 |     // Convert the BackupLogContext to a LogMetadataDTOCollection\n450 |     // This ensures all privacy annotations are properly maintained\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:61:40: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 59 |       source: domainName\n 60 |     )\n 61 |     await log(level, message, context: context)\n    |                                        `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 62 |   }\n 63 | \n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:109:41: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n107 | \n108 |       // Create a new context with error information\n109 |       if let backupContext=finalContext as? BackupLogContextImpl {\n    |                                         `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n110 |         // Update the context with error information\n111 |         let updatedContext=backupContext.withUpdatedMetadata(\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:111:42: error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n109 |       if let backupContext=finalContext as? BackupLogContextImpl {\n110 |         // Update the context with error information\n111 |         let updatedContext=backupContext.withUpdatedMetadata(\n    |                                          `- error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n112 |           backupContext.metadata.merging(with: errorMetadata).withPrivate(\n113 |             key: \"error\",\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:126:41: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n124 |       let formattedMessage=message ?? \"[\\(domainName)] \\(error.localizedDescription)\"\n125 | \n126 |       if let backupContext=finalContext as? BackupLogContextImpl {\n    |                                         `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n127 |         // Update the context with error information\n128 |         let updatedContext=backupContext.withUpdatedMetadata(\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:128:42: error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n126 |       if let backupContext=finalContext as? BackupLogContextImpl {\n127 |         // Update the context with error information\n128 |         let updatedContext=backupContext.withUpdatedMetadata(\n    |                                          `- error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n129 |           backupContext.metadata.withPrivate(key: \"error\", value: error.localizedDescription)\n130 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:166:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n164 |       level,\n165 |       message,\n166 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n167 |     )\n168 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:177:34: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n175 |    */\n176 |   private func enhanceContext(_ context: BackupLogContext) -\u003e BackupLogContextImpl {\n177 |     if let backupContext=context as? BackupLogContextImpl {\n    |                                  `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n178 |       return backupContext\n179 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:183:37: error: missing argument for parameter 'source' in call\n181 |     // Create a new context with the same information\n182 |     return BackupLogContextImpl(\n183 |       domainName: context.domainName,\n    |                                     `- error: missing argument for parameter 'source' in call\n184 |       metadata: context.getMetadata()\n185 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:30:10: note: 'init(domainName:source:metadata:)' declared here\n 28 |    *   - metadata: The metadata collection\n 29 |    */\n 30 |   public init(\n    |          `- note: 'init(domainName:source:metadata:)' declared here\n 31 |     domainName: String,\n 32 |     source: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:358:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n356 |       .info,\n357 |       message ?? defaultMessage,\n358 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n359 |     )\n360 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:388:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n386 |       .error,\n387 |       message,\n388 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n389 |     )\n390 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:442:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n440 |       .info,\n441 |       message ?? defaultMessage,\n442 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n443 |     )\n444 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:451:28: error: cannot find 'toMetadataCollection' in scope\n449 |     // Convert the BackupLogContext to a LogMetadataDTOCollection\n450 |     // This ensures all privacy annotations are properly maintained\n451 |     let metadataCollection=toMetadataCollection()\n    |                            `- error: cannot find 'toMetadataCollection' in scope\n452 | \n453 |     // Convert to the legacy MetadataCollection format\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:455:24: error: cannot find 'MetadataCollection' in scope\n453 |     // Convert to the legacy MetadataCollection format\n454 |     // This is needed for compatibility with the existing logging system\n455 |     var legacyMetadata=MetadataCollection()\n    |                        `- error: cannot find 'MetadataCollection' in scope\n456 | \n457 |     // Transfer all metadata with their privacy levels preserved\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:111:32: error: cannot find type 'MetadataCollection' in scope\n109 |    * - Returns: The metadata collection\n110 |    */\n111 |   public func getMetadata() -\u003e MetadataCollection {\n    |                                `- error: cannot find type 'MetadataCollection' in scope\n112 |     metadata\n113 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:12:15: error: inheritance from non-protocol type 'BackupLogContext'\n 10 |  * allowing for structured logging with appropriate privacy classifications.\n 11 |  */\n 12 | public struct BackupLogContextImpl: BackupLogContext, Sendable {\n    |               `- error: inheritance from non-protocol type 'BackupLogContext'\n 13 |   /// The domain name for the log context\n 14 |   public let domainName: String\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:60:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 58 |   public func withPublic(key: String, value: String) -\u003e Self {\n 59 |     var newMetadata=metadata\n 60 |     newMetadata.add(key: key, value: value, privacy: .public)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 61 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 62 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:60:55: error: cannot infer contextual base in reference to member 'public'\n 58 |   public func withPublic(key: String, value: String) -\u003e Self {\n 59 |     var newMetadata=metadata\n 60 |     newMetadata.add(key: key, value: value, privacy: .public)\n    |                                                       `- error: cannot infer contextual base in reference to member 'public'\n 61 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 62 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:74:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 72 |   public func withPrivate(key: String, value: String) -\u003e Self {\n 73 |     var newMetadata=metadata\n 74 |     newMetadata.add(key: key, value: value, privacy: .private)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 75 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:74:55: error: cannot infer contextual base in reference to member 'private'\n 72 |   public func withPrivate(key: String, value: String) -\u003e Self {\n 73 |     var newMetadata=metadata\n 74 |     newMetadata.add(key: key, value: value, privacy: .private)\n    |                                                       `- error: cannot infer contextual base in reference to member 'private'\n 75 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:88:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 86 |   public func withSensitive(key: String, value: String) -\u003e Self {\n 87 |     var newMetadata=metadata\n 88 |     newMetadata.add(key: key, value: value, privacy: .sensitive)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 89 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 90 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:88:55: error: cannot infer contextual base in reference to member 'sensitive'\n 86 |   public func withSensitive(key: String, value: String) -\u003e Self {\n 87 |     var newMetadata=metadata\n 88 |     newMetadata.add(key: key, value: value, privacy: .sensitive)\n    |                                                       `- error: cannot infer contextual base in reference to member 'sensitive'\n 89 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 90 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:102:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n100 |   public func withHashed(key: String, value: String) -\u003e Self {\n101 |     var newMetadata=metadata\n102 |     newMetadata.add(key: key, value: value, privacy: .hash)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n103 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n104 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:102:55: error: cannot infer contextual base in reference to member 'hash'\n100 |   public func withHashed(key: String, value: String) -\u003e Self {\n101 |     var newMetadata=metadata\n102 |     newMetadata.add(key: key, value: value, privacy: .hash)\n    |                                                       `- error: cannot infer contextual base in reference to member 'hash'\n103 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n104 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:221:25: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n    |                         `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n222 |     BackupInterfaces.SnapshotFileEntry(\n223 |       path: file.path ?? \"\",\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:220:8: error: no type named 'SnapshotFile' in module 'BackupServices'\n218 |   public static func toInterfaceSnapshotFileEntry(\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n    |        `- error: no type named 'SnapshotFile' in module 'BackupServices'\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n222 |     BackupInterfaces.SnapshotFileEntry(\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:241:24: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n    |                        `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n242 |     guard let files else { return nil }\n243 |     return files.map(toInterfaceSnapshotFileEntry)\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:240:78: error: no type named 'SnapshotFile' in module 'BackupServices'\n238 |    * - Returns: An array of converted snapshot file entries compatible with the interfaces module\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n    |                                                                              `- error: no type named 'SnapshotFile' in module 'BackupServices'\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n242 |     guard let files else { return nil }\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:33:13: error: type 'VerificationIssueDTO.IssueType' has no member 'integrityViolation'\n 31 |       case .checksumMismatch:\n 32 |         .checksumMismatch\n 33 |       case .integrityViolation:\n    |             `- error: type 'VerificationIssueDTO.IssueType' has no member 'integrityViolation'\n 34 |         .integrityViolation\n 35 |       case .other:\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:117:13: error: type 'RepairActionDTO.ActionType' has no member 'removeCorrupted'\n115 |       case .rebuildMetadata:\n116 |         .rebuildMetadata\n117 |       case .removeCorrupted:\n    |             `- error: type 'RepairActionDTO.ActionType' has no member 'removeCorrupted'\n118 |         .removeCorrupted\n119 |       case .other:\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupLogContext.swift:14:15: error: type 'BackupLogContext' does not conform to protocol 'LogContextDTO'\n 12 |  allowing for immutable context objects and thread safety.\n 13 |  */\n 14 | public struct BackupLogContext: LogContextDTO {\n    |               |- error: type 'BackupLogContext' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 15 |   /// The domain name for this context\n 16 |   public let domainName: String=\"BackupServices\"\n    :\n 26 | \n 27 |   /// Current operation being performed\n 28 |   public var operation: String? {\n    |              `- note: candidate has non-matching type 'String?'\n 29 |     // Find operation in the metadata entries\n 30 |     for entry in metadata.entries where entry.key == \"operation\" {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:11:7: note: protocol requires property 'operation' with type 'String'\n 9 | \n10 |   /// The operation being performed (e.g., \"addDestination\", \"writeLog\")\n11 |   var operation: String { get }\n   |       `- note: protocol requires property 'operation' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e BackupLogContext'\n29 | }\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupLogContextAdapter.swift:29:15: error: property 'operation' must be declared public because it matches a requirement in public protocol 'LogContextDTO'\n 27 | \n 28 |   /// Operation being performed\n 29 |   private let operation: String\n    |               |- error: property 'operation' must be declared public because it matches a requirement in public protocol 'LogContextDTO'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 30 | \n 31 |   /// Additional context values with privacy annotations\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupLogContextAdapter.swift:12:15: error: type 'BackupLogContextAdapter' does not conform to protocol 'LogContextDTO'\n 10 |  * appropriate privacy controls for backup-related operations.\n 11 |  */\n 12 | public struct BackupLogContextAdapter: LogContextDTO {\n    |               |- error: type 'BackupLogContextAdapter' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 13 |   /// The domain name for this context\n 14 |   public let domainName: String=\"BackupServices\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:14:7: note: protocol requires property 'category' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e BackupLogContextAdapter'\n29 | }\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:21:15: error: invalid redeclaration of 'BackupCreateParameters'\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- error: invalid redeclaration of 'BackupCreateParameters'\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:96:15: error: invalid redeclaration of 'BackupRestoreParameters'\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- error: invalid redeclaration of 'BackupRestoreParameters'\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:249:15: error: invalid redeclaration of 'BackupDeleteParameters'\n247 |  * Parameters for deleting a backup.\n248 |  */\n249 | public struct BackupDeleteParameters: BackupOperationParameters {\n    |               `- error: invalid redeclaration of 'BackupDeleteParameters'\n250 |   /// ID of the snapshot to delete\n251 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:292:15: error: invalid redeclaration of 'BackupMaintenanceParameters'\n290 |  * Parameters for performing repository maintenance.\n291 |  */\n292 | public struct BackupMaintenanceParameters: BackupOperationParameters {\n    |               `- error: invalid redeclaration of 'BackupMaintenanceParameters'\n293 |   /// Type of maintenance to perform\n294 |   public let maintenanceType: MaintenanceType\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:426:11: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n    :\n424 | \n425 | /// Extension to provide conversion methods between DTOs and BackupInterfaces types\n426 | extension BackupCreateParameters {\n    |           `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n427 |   /// Convert to BackupInterfaces parameters\n428 |   public func toBackupParameters() -\u003e BackupParameters {\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:448:11: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n    :\n446 | }\n447 | \n448 | extension BackupRestoreParameters {\n    |           `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n449 |   /// Convert to BackupInterfaces parameters\n450 |   public func toBackupParameters() -\u003e RestoreParameters {\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:493:7: error: argument 'before' must precede argument 'host'\n491 |       host: parameters.host,\n492 |       path: parameters.path.map { URL(fileURLWithPath: $0) },\n493 |       before: nil,\n    |       `- error: argument 'before' must precede argument 'host'\n494 |       after: nil\n495 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:18:14: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n16 |   /// - Returns: A ProgressCancellationToken that delegates to the original token\n17 |   public static func asProgressCancellationToken(\n18 |     _ token: BackupOperationCancellationTokenImpl\n   |              `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n19 |   ) -\u003e ProgressCancellationToken {\n20 |     ProgressCancellationTokenAdapter(token: token)\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:28:22: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n26 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken,\n27 | @unchecked Sendable {\n28 |   private let token: BackupOperationCancellationTokenImpl\n   |                      `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:31:15: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n31 |   init(token: BackupOperationCancellationTokenImpl) {\n   |               `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n32 |     self.token=token\n33 |     // Set up task to monitor the cancellation state\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:87:11: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n85 | \n86 | /// Extension to BackupOperationCancellationTokenImpl for tracking with BackupOperation\n87 | extension BackupOperationCancellationTokenImpl {\n   |           `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n88 |   /// Register this token with the given operation\n89 |   ///\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:76:9: warning: no 'async' operations occur within 'await' expression\n74 |       while !_isCancelled {\n75 |         try? await Task.sleep(nanoseconds: 100_000_000) // 100ms\n76 |         await self.updateCancellationState()\n   |         `- warning: no 'async' operations occur within 'await' expression\n77 |         if self._isCancelled {\n78 |           callback()\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:10:15: error: type 'SnapshotLogContext' does not conform to protocol 'LogContextDTO'\n  8 |  * operation details in log messages while maintaining privacy awareness.\n  9 |  */\n 10 | public struct SnapshotLogContext: LogContextDTO {\n    |               |- error: type 'SnapshotLogContext' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 11 |   /// The domain name for this context\n 12 |   public let domainName: String=\"BackupServices.Snapshot\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:14:7: note: protocol requires property 'category' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e SnapshotLogContext'\n29 | }\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContextAdapter.swift:12:15: error: type 'SnapshotLogContextAdapter' does not conform to protocol 'LogContextDTO'\n 10 |  * and ensures proper separation between domain-specific metadata and core logging infrastructure.\n 11 |  */\n 12 | public struct SnapshotLogContextAdapter: LogContextDTO {\n    |               |- error: type 'SnapshotLogContextAdapter' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 13 |   /// The domain name of this context\n 14 |   public let domainName: String=\"BackupServices.Snapshot\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:11:7: note: protocol requires property 'operation' with type 'String'\n 9 | \n10 |   /// The operation being performed (e.g., \"addDestination\", \"writeLog\")\n11 |   var operation: String { get }\n   |       `- note: protocol requires property 'operation' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e SnapshotLogContextAdapter'\n29 | }\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:86:15: error: extra argument 'source' in call\n 84 |     let context=SnapshotLogContext(\n 85 |       operation: operationType.rawValue,\n 86 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n 87 |     )\n 88 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:85:40: error: missing argument for parameter 'snapshotID' in call\n 83 |   public func createLogContext() -\u003e SnapshotLogContext {\n 84 |     let context=SnapshotLogContext(\n 85 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n 86 |       source: \"SnapshotOperationsService\"\n 87 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:89:12: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n 87 |     )\n 88 | \n 89 |     return context\n    |            `- error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n 90 |       .withPublic(key: \"repositoryID\", value: repositoryID ?? \"default\")\n 91 |       .withPublic(key: \"tags\", value: tags?.joined(separator: \", \") ?? \"\")\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:128:15: error: extra argument 'source' in call\n126 |     let context=SnapshotLogContext(\n127 |       operation: operationType.rawValue,\n128 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n129 |     )\n130 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:127:40: error: missing argument for parameter 'snapshotID' in call\n125 |   public func createLogContext() -\u003e SnapshotLogContext {\n126 |     let context=SnapshotLogContext(\n127 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n128 |       source: \"SnapshotOperationsService\"\n129 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:169:15: error: extra argument 'source' in call\n167 |     let context=SnapshotLogContext(\n168 |       operation: operationType.rawValue,\n169 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n170 |     )\n171 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:168:40: error: missing argument for parameter 'snapshotID' in call\n166 |   public func createLogContext() -\u003e SnapshotLogContext {\n167 |     let context=SnapshotLogContext(\n168 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n169 |       source: \"SnapshotOperationsService\"\n170 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:215:15: error: extra argument 'source' in call\n213 |     let context=SnapshotLogContext(\n214 |       operation: operationType.rawValue,\n215 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n216 |     )\n217 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:214:40: error: missing argument for parameter 'snapshotID' in call\n212 |   public func createLogContext() -\u003e SnapshotLogContext {\n213 |     let context=SnapshotLogContext(\n214 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n215 |       source: \"SnapshotOperationsService\"\n216 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:251:15: error: extra argument 'source' in call\n249 |     let context=SnapshotLogContext(\n250 |       operation: operationType.rawValue,\n251 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n252 |     )\n253 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:250:40: error: missing argument for parameter 'snapshotID' in call\n248 |   public func createLogContext() -\u003e SnapshotLogContext {\n249 |     let context=SnapshotLogContext(\n250 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n251 |       source: \"SnapshotOperationsService\"\n252 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:294:15: error: extra argument 'source' in call\n292 |     let context=SnapshotLogContext(\n293 |       operation: operationType.rawValue,\n294 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n295 |     )\n296 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:293:40: error: missing argument for parameter 'snapshotID' in call\n291 |   public func createLogContext() -\u003e SnapshotLogContext {\n292 |     let context=SnapshotLogContext(\n293 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n294 |       source: \"SnapshotOperationsService\"\n295 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:338:15: error: extra argument 'source' in call\n336 |     let context=SnapshotLogContext(\n337 |       operation: operationType.rawValue,\n338 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n339 |     )\n340 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:337:40: error: missing argument for parameter 'snapshotID' in call\n335 |   public func createLogContext() -\u003e SnapshotLogContext {\n336 |     let context=SnapshotLogContext(\n337 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n338 |       source: \"SnapshotOperationsService\"\n339 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:372:15: error: extra argument 'source' in call\n370 |     SnapshotLogContext(\n371 |       operation: operationType.rawValue,\n372 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n373 |     )\n374 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:371:40: error: missing argument for parameter 'snapshotID' in call\n369 |   public func createLogContext() -\u003e SnapshotLogContext {\n370 |     SnapshotLogContext(\n371 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n372 |       source: \"SnapshotOperationsService\"\n373 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:374:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n372 |       source: \"SnapshotOperationsService\"\n373 |     )\n374 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n375 |   }\n376 | }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:403:15: error: extra argument 'source' in call\n401 |     SnapshotLogContext(\n402 |       operation: operationType.rawValue,\n403 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n404 |     )\n405 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:402:40: error: missing argument for parameter 'snapshotID' in call\n400 |   public func createLogContext() -\u003e SnapshotLogContext {\n401 |     SnapshotLogContext(\n402 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n403 |       source: \"SnapshotOperationsService\"\n404 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:405:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n403 |       source: \"SnapshotOperationsService\"\n404 |     )\n405 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n406 |   }\n407 | }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:441:15: error: extra argument 'source' in call\n439 |     let context=SnapshotLogContext(\n440 |       operation: operationType.rawValue,\n441 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n442 |     )\n443 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:440:40: error: missing argument for parameter 'snapshotID' in call\n438 |   public func createLogContext() -\u003e SnapshotLogContext {\n439 |     let context=SnapshotLogContext(\n440 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n441 |       source: \"SnapshotOperationsService\"\n442 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:490:15: error: extra argument 'source' in call\n488 |     SnapshotLogContext(\n489 |       operation: operationType.rawValue,\n490 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n491 |     )\n492 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:489:40: error: missing argument for parameter 'snapshotID' in call\n487 |   public func createLogContext() -\u003e SnapshotLogContext {\n488 |     SnapshotLogContext(\n489 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n490 |       source: \"SnapshotOperationsService\"\n491 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:492:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n490 |       source: \"SnapshotOperationsService\"\n491 |     )\n492 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n493 |     .withPublic(key: \"verificationLevel\", value: level.rawValue)\n494 |   }\nTarget //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator failed to build\nINFO: Elapsed time: 15.519s, Critical Path: 15.40s\nINFO: 2 processes: 20 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BackupServices:BackupServices",
    "success": false,
    "start_time": "2025-04-13T09:08:12.007054+01:00",
    "end_time": "2025-04-13T09:08:28.207613+01:00",
    "duration": "16.200423083s",
    "output": "INFO: Invocation ID: ce364b72-d89c-47d7-b29d-c9884e261cee\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupServices:BackupServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupServices:BackupServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BackupServices:BackupServices (0 packages loaded, 0 targets configured).\n[1 / 3] Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices; 1s disk-cache, worker\n[1 / 3] Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices; 12s disk-cache, worker\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/BackupServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/BackupServices:BackupServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/BackupServices/BackupServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:41:3: error: expected 'func' keyword in instance method declaration\n 39 | public class BaseBackupCommand {\n 40 |   /// The Restic service to use for operations\n 41 |   protected let resticService: ResticServiceProtocol\n    |   `- error: expected 'func' keyword in instance method declaration\n 42 | \n 43 |   /// Repository connection information\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:41:13: error: expected '(' in argument list of function declaration\n 39 | public class BaseBackupCommand {\n 40 |   /// The Restic service to use for operations\n 41 |   protected let resticService: ResticServiceProtocol\n    |             `- error: expected '(' in argument list of function declaration\n 42 | \n 43 |   /// Repository connection information\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:41:12: error: consecutive declarations on a line must be separated by ';'\n 39 | public class BaseBackupCommand {\n 40 |   /// The Restic service to use for operations\n 41 |   protected let resticService: ResticServiceProtocol\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 42 | \n 43 |   /// Repository connection information\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:3: error: expected 'func' keyword in instance method declaration\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |   `- error: expected 'func' keyword in instance method declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:13: error: expected '(' in argument list of function declaration\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |             `- error: expected '(' in argument list of function declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:12: error: consecutive declarations on a line must be separated by ';'\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:3: error: expected 'func' keyword in instance method declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |   `- error: expected 'func' keyword in instance method declaration\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:13: error: expected '(' in argument list of function declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |             `- error: expected '(' in argument list of function declaration\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:12: error: consecutive declarations on a line must be separated by ';'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:3: error: expected 'func' keyword in instance method declaration\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |   `- error: expected 'func' keyword in instance method declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:13: error: expected '(' in argument list of function declaration\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |             `- error: expected '(' in argument list of function declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:12: error: consecutive declarations on a line must be separated by ';'\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:3: error: expected 'func' keyword in instance method declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |   `- error: expected 'func' keyword in instance method declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:13: error: expected '(' in argument list of function declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |             `- error: expected '(' in argument list of function declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:12: error: consecutive declarations on a line must be separated by ';'\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:3: error: expected 'func' keyword in instance method declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |   `- error: expected 'func' keyword in instance method declaration\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:13: error: expected '(' in argument list of function declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |             `- error: expected '(' in argument list of function declaration\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:12: error: consecutive declarations on a line must be separated by ';'\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:3: error: expected 'func' keyword in instance method declaration\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |   `- error: expected 'func' keyword in instance method declaration\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:13: error: expected '(' in argument list of function declaration\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |             `- error: expected '(' in argument list of function declaration\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:12: error: consecutive declarations on a line must be separated by ';'\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:3: error: expected 'func' keyword in instance method declaration\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |   `- error: expected 'func' keyword in instance method declaration\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:13: error: expected '(' in argument list of function declaration\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |             `- error: expected '(' in argument list of function declaration\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:12: error: consecutive declarations on a line must be separated by ';'\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |            `- error: consecutive declarations on a line must be separated by ';'\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:3: error: expected 'func' keyword in instance method declaration\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:13: error: expected '(' in argument list of function declaration\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:12: error: consecutive declarations on a line must be separated by ';'\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:3: error: expected 'func' keyword in instance method declaration\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:13: error: expected '(' in argument list of function declaration\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:12: error: consecutive declarations on a line must be separated by ';'\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:3: error: expected 'func' keyword in instance method declaration\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:13: error: expected '(' in argument list of function declaration\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:12: error: consecutive declarations on a line must be separated by ';'\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:3: error: expected 'func' keyword in instance method declaration\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:13: error: expected '(' in argument list of function declaration\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:12: error: consecutive declarations on a line must be separated by ';'\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:3: error: expected 'func' keyword in instance method declaration\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |   `- error: expected 'func' keyword in instance method declaration\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:13: error: expected '(' in argument list of function declaration\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |             `- error: expected '(' in argument list of function declaration\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:12: error: consecutive declarations on a line must be separated by ';'\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |            `- error: consecutive declarations on a line must be separated by ';'\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:3: error: invalid redeclaration of 'protected()'\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |   `- error: invalid redeclaration of 'protected()'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:3: error: invalid redeclaration of 'protected()'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |   `- error: invalid redeclaration of 'protected()'\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:33: error: cannot find type 'BackupCommandFactory' in scope\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |                                 `- error: cannot find type 'BackupCommandFactory' in scope\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:3: error: invalid redeclaration of 'protected()'\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |   `- error: invalid redeclaration of 'protected()'\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:3: error: invalid redeclaration of 'protected()'\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |   `- error: invalid redeclaration of 'protected()'\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:3: error: invalid redeclaration of 'protected()'\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |   `- error: invalid redeclaration of 'protected()'\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:72:21: error: cannot find type 'BackupCommandFactory' in scope\n 70 |     resticService: ResticServiceProtocol,\n 71 |     repositoryInfo: RepositoryInfo,\n 72 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 73 |     resultParser: BackupResultParser,\n 74 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:3: error: invalid redeclaration of 'protected()'\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |   `- error: invalid redeclaration of 'protected()'\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:3: error: invalid redeclaration of 'protected()'\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |   `- error: invalid redeclaration of 'protected()'\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:3: error: invalid redeclaration of 'protected()'\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:3: error: invalid redeclaration of 'protected()'\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:3: error: invalid redeclaration of 'protected()'\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:3: error: invalid redeclaration of 'protected()'\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:3: error: invalid redeclaration of 'protected()'\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |   `- error: invalid redeclaration of 'protected()'\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:185:6: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n    |      `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n187 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: error: invalid redeclaration of 'BackupCreateParameters'\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- error: invalid redeclaration of 'BackupCreateParameters'\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: error: invalid redeclaration of 'BackupRestoreParameters'\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- error: invalid redeclaration of 'BackupRestoreParameters'\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: error: invalid redeclaration of 'BackupDeleteParameters'\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- error: invalid redeclaration of 'BackupDeleteParameters'\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: error: invalid redeclaration of 'BackupMaintenanceParameters'\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- error: invalid redeclaration of 'BackupMaintenanceParameters'\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:18:27: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for backup creation\n 18 |   private let parameters: BackupCreateParameters\n    |                           `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:21:15: note: found this candidate\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:41:17: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupCreateParameters,\n    |                 `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:21:15: note: found this candidate\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupCreateParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:18:27: error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for deleting a backup\n 18 |   private let parameters: BackupDeleteParameters\n    |                           `- error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: note: found this candidate\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- note: found this candidate\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:249:15: note: found this candidate\n247 |  * Parameters for deleting a backup.\n248 |  */\n249 | public struct BackupDeleteParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n250 |   /// ID of the snapshot to delete\n251 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:41:17: error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupDeleteParameters,\n    |                 `- error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: note: found this candidate\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- note: found this candidate\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:249:15: note: found this candidate\n247 |  * Parameters for deleting a backup.\n248 |  */\n249 | public struct BackupDeleteParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n250 |   /// ID of the snapshot to delete\n251 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupDeleteParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/ListSnapshotsCommand.swift:36:21: error: cannot find type 'BackupCommandFactory' in scope\n 34 |     resticService: ResticServiceProtocol,\n 35 |     repositoryInfo: RepositoryInfo,\n 36 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 37 |     resultParser: BackupResultParser,\n 38 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:18:27: error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for maintenance operation\n 18 |   private let parameters: BackupMaintenanceParameters\n    |                           `- error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: note: found this candidate\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- note: found this candidate\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:292:15: note: found this candidate\n290 |  * Parameters for performing repository maintenance.\n291 |  */\n292 | public struct BackupMaintenanceParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n293 |   /// Type of maintenance to perform\n294 |   public let maintenanceType: MaintenanceType\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:41:17: error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupMaintenanceParameters,\n    |                 `- error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: note: found this candidate\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- note: found this candidate\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:292:15: note: found this candidate\n290 |  * Parameters for performing repository maintenance.\n291 |  */\n292 | public struct BackupMaintenanceParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n293 |   /// Type of maintenance to perform\n294 |   public let maintenanceType: MaintenanceType\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupMaintenanceParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:18:27: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for backup restoration\n 18 |   private let parameters: BackupRestoreParameters\n    |                           `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:96:15: note: found this candidate\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:41:17: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupRestoreParameters,\n    |                 `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:96:15: note: found this candidate\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupRestoreParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupVerificationParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:149:17: error: cannot find type 'BackupProgress' in scope\n147 |    */\n148 |   public func logProgressUpdate(\n149 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n150 |     for operation: BackupOperation,\n151 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:46:31: error: cannot find type 'BackupCommandFactory' in scope\n 44 | \n 45 |   /// Factory for creating backup commands\n 46 |   private let commandFactory: BackupCommandFactory\n    |                               `- error: cannot find type 'BackupCommandFactory' in scope\n 47 | \n 48 |   /// The backup logger\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:55:60: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 53 | \n 54 |   /// Active operation cancellation tokens\n 55 |   private var activeOperationsCancellationTokens: [String: BackupOperationCancellationTokenImpl]=[:]\n    |                                                            `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 56 | \n 57 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:104:24: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n102 |     operationID: String,\n103 |     type: BackupOperationType,\n104 |     cancellationToken: BackupOperationCancellationTokenImpl?=nil\n    |                        `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n105 |   ) {\n106 |     let uuid=UUID()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:519:45: error: cannot find type 'VerificationResult' in scope\n517 |     snapshotID: String,\n518 |     verifyOptions: VerifyOptions?=nil\n519 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n520 |     // Create a log context\n521 |     let logContext=LogContextDTO(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:42:14: error: type 'BackupServiceWithCommands' does not conform to protocol 'BackupServiceProtocol'\n 40 |  - Progress reporting through AsyncStream\n 41 |  */\n 42 | public actor BackupServiceWithCommands: BackupServiceProtocol {\n    |              |- error: type 'BackupServiceWithCommands' does not conform to protocol 'BackupServiceProtocol'\n    |              `- note: add stubs for conformance\n 43 |   // MARK: - Properties\n 44 | \n    :\n587 |    - Returns: True if cancellation was successful, false otherwise\n588 |    */\n589 |   public func cancelOperation(operationID: String) async -\u003e Bool {\n    |               `- note: candidate has non-matching type '(String) async -\u003e Bool'\n590 |     // Get the cancellation token\n591 |     if let token=activeOperationsCancellationTokens[operationID] {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Protocols/BackupServiceProtocol.swift:58:8: note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 56 |    * - Returns: A Result containing either the operation response or an error\n 57 |    */\n 58 |   func createBackup(\n    |        `- note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 59 |     sources: [URL],\n 60 |     excludePaths: [URL]?,\n    :\n 77 |    * - Returns: A Result containing either the operation response or an error\n 78 |    */\n 79 |   func restoreBackup(\n    |        `- note: protocol requires function 'restoreBackup(snapshotID:targetPath:includePaths:excludePaths:restoreOptions:)' with type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 80 |     snapshotID: String,\n 81 |     targetPath: URL,\n    :\n 99 |    * - Returns: A Result containing either the list of snapshots or an error\n100 |    */\n101 |   func listSnapshots(\n    |        `- note: protocol requires function 'listSnapshots(tags:before:after:listOptions:)' with type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n102 |     tags: [String]?,\n103 |     before: Date?,\n    :\n117 |    * - Returns: A Result containing either the operation response or an error\n118 |    */\n119 |   func deleteBackup(\n    |        `- note: protocol requires function 'deleteBackup(snapshotID:deleteOptions:)' with type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n120 |     snapshotID: String,\n121 |     deleteOptions: DeleteOptions?\n    :\n134 |    * - Returns: A Result containing either the operation response or an error\n135 |    */\n136 |   func performMaintenance(\n    |        `- note: protocol requires function 'performMaintenance(type:maintenanceOptions:)' with type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n137 |     type: MaintenanceType,\n138 |     maintenanceOptions: MaintenanceOptions?\n    :\n166 |    *            doesn't exist or cannot be cancelled\n167 |    */\n168 |   func cancelOperation(operationID: UUID) async -\u003e Bool\n    |        `- note: protocol requires function 'cancelOperation(operationID:)' with type '(UUID) async -\u003e Bool'\n169 | }\n170 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:78:20: error: cannot find 'BackupCommandFactory' in scope\n 76 | \n 77 |     // Create the backup command factory\n 78 |     commandFactory=BackupCommandFactory(\n    |                    `- error: cannot find 'BackupCommandFactory' in scope\n 79 |       resticService: resticService,\n 80 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:47:31: error: cannot find type 'BackupCommandFactory' in scope\n 45 | \n 46 |   /// Factory for creating backup commands\n 47 |   private let commandFactory: BackupCommandFactory\n    |                               `- error: cannot find type 'BackupCommandFactory' in scope\n 48 | \n 49 |   /// The Restic command factory\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:71:60: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 69 | \n 70 |   /// Active operation cancellation tokens\n 71 |   private var activeOperationsCancellationTokens: [String: BackupOperationCancellationTokenImpl]=[:]\n    |                                                            `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 72 | \n 73 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:124:24: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n122 |     operationID: String,\n123 |     type: BackupOperationType,\n124 |     cancellationToken: BackupOperationCancellationTokenImpl?=nil\n    |                        `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n125 |   ) {\n126 |     let uuid=UUID()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:539:45: error: cannot find type 'VerificationResult' in scope\n537 |     snapshotID: String,\n538 |     verifyOptions: VerifyOptions?=nil\n539 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n540 |     // Create a log context\n541 |     let logContext=LogContextDTO(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:43:14: error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n 41 |  - Progress reporting through AsyncStream\n 42 |  */\n 43 | public actor BackupServicesActor: BackupServiceProtocol {\n    |              |- error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n    |              `- note: add stubs for conformance\n 44 |   // MARK: - Properties\n 45 | \n    :\n611 |    * - Returns: True if cancellation was successful, false otherwise\n612 |    */\n613 |   public func cancelOperation(operationID: String) async -\u003e Bool {\n    |               `- note: candidate has non-matching type '(String) async -\u003e Bool'\n614 |     // Get the cancellation token\n615 |     guard let token=activeOperationsCancellationTokens[operationID] else {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Protocols/BackupServiceProtocol.swift:58:8: note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 56 |    * - Returns: A Result containing either the operation response or an error\n 57 |    */\n 58 |   func createBackup(\n    |        `- note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 59 |     sources: [URL],\n 60 |     excludePaths: [URL]?,\n    :\n 77 |    * - Returns: A Result containing either the operation response or an error\n 78 |    */\n 79 |   func restoreBackup(\n    |        `- note: protocol requires function 'restoreBackup(snapshotID:targetPath:includePaths:excludePaths:restoreOptions:)' with type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 80 |     snapshotID: String,\n 81 |     targetPath: URL,\n    :\n 99 |    * - Returns: A Result containing either the list of snapshots or an error\n100 |    */\n101 |   func listSnapshots(\n    |        `- note: protocol requires function 'listSnapshots(tags:before:after:listOptions:)' with type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n102 |     tags: [String]?,\n103 |     before: Date?,\n    :\n117 |    * - Returns: A Result containing either the operation response or an error\n118 |    */\n119 |   func deleteBackup(\n    |        `- note: protocol requires function 'deleteBackup(snapshotID:deleteOptions:)' with type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n120 |     snapshotID: String,\n121 |     deleteOptions: DeleteOptions?\n    :\n134 |    * - Returns: A Result containing either the operation response or an error\n135 |    */\n136 |   func performMaintenance(\n    |        `- note: protocol requires function 'performMaintenance(type:maintenanceOptions:)' with type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n137 |     type: MaintenanceType,\n138 |     maintenanceOptions: MaintenanceOptions?\n    :\n166 |    *            doesn't exist or cannot be cancelled\n167 |    */\n168 |   func cancelOperation(operationID: UUID) async -\u003e Bool\n    |        `- note: protocol requires function 'cancelOperation(operationID:)' with type '(UUID) async -\u003e Bool'\n169 | }\n170 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:98:20: error: cannot find 'BackupCommandFactory' in scope\n 96 | \n 97 |     // Create the backup command factory\n 98 |     commandFactory=BackupCommandFactory(\n    |                    `- error: cannot find 'BackupCommandFactory' in scope\n 99 |       resticService: resticService,\n100 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:21:31: error: cannot find type 'BackupCommandFactory' in scope\n  19 | \n  20 |   /// Factory for creating backup commands\n  21 |   private let commandFactory: BackupCommandFactory\n     |                               `- error: cannot find type 'BackupCommandFactory' in scope\n  22 | \n  23 |   /// Parser for command results\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n  44 |     resticService: ResticServiceProtocol,\n  45 |     repositoryInfo: RepositoryInfo,\n  46 |     commandFactory: BackupCommandFactory,\n     |                     `- error: cannot find type 'BackupCommandFactory' in scope\n  47 |     resultParser: BackupResultParser,\n  48 |     snapshotService: SnapshotServiceProtocol,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:70:17: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n  68 |    */\n  69 |   public func createBackup(\n  70 |     parameters: BackupCreateParameters,\n     |                 `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n  71 |     progressReporter: BackupProgressReporter?,\n  72 |     cancellationToken _: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:21:15: note: found this candidate\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:72:26: error: cannot find type 'CancellationToken' in scope\n  70 |     parameters: BackupCreateParameters,\n  71 |     progressReporter: BackupProgressReporter?,\n  72 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n  73 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n  74 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:163:17: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 161 |    */\n 162 |   public func restoreBackup(\n 163 |     parameters: BackupRestoreParameters,\n     |                 `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 164 |     progressReporter: BackupProgressReporter?,\n 165 |     cancellationToken _: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:96:15: note: found this candidate\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:165:26: error: cannot find type 'CancellationToken' in scope\n 163 |     parameters: BackupRestoreParameters,\n 164 |     progressReporter: BackupProgressReporter?,\n 165 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 166 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n 167 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:311:17: error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 309 |    */\n 310 |   public func deleteBackup(\n 311 |     parameters: BackupDeleteParameters,\n     |                 `- error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 312 |     cancellationToken _: CancellationToken?\n 313 |   ) async throws -\u003e DeleteResult {\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: note: found this candidate\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- note: found this candidate\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:249:15: note: found this candidate\n247 |  * Parameters for deleting a backup.\n248 |  */\n249 | public struct BackupDeleteParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n250 |   /// ID of the snapshot to delete\n251 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:312:26: error: cannot find type 'CancellationToken' in scope\n 310 |   public func deleteBackup(\n 311 |     parameters: BackupDeleteParameters,\n 312 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 313 |   ) async throws -\u003e DeleteResult {\n 314 |     // Create log context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1032:17: error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n1030 |    */\n1031 |   public func performMaintenance(\n1032 |     parameters: BackupMaintenanceParameters,\n     |                 `- error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n1033 |     progressReporter: BackupProgressReporter?,\n1034 |     cancellationToken _: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: note: found this candidate\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- note: found this candidate\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:292:15: note: found this candidate\n290 |  * Parameters for performing repository maintenance.\n291 |  */\n292 | public struct BackupMaintenanceParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n293 |   /// Type of maintenance to perform\n294 |   public let maintenanceType: MaintenanceType\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1034:26: error: cannot find type 'CancellationToken' in scope\n1032 |     parameters: BackupMaintenanceParameters,\n1033 |     progressReporter: BackupProgressReporter?,\n1034 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n1035 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupProgressInfo\u003e) {\n1036 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:958:30: error: value of type 'DeleteResponse' has no member 'errors'\n 956 |       return DeleteResult(\n 957 |         snapshotID: snapshotID,\n 958 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                              `- error: value of type 'DeleteResponse' has no member 'errors'\n 959 |         filesDeleted: response.filesDeleted ?? 0,\n 960 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:958:57: error: value of type 'DeleteResponse' has no member 'errors'\n 956 |       return DeleteResult(\n 957 |         snapshotID: snapshotID,\n 958 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                                                         `- error: value of type 'DeleteResponse' has no member 'errors'\n 959 |         filesDeleted: response.filesDeleted ?? 0,\n 960 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:23:31: error: cannot find type 'ResticCommandFactory' in scope\n 21 | \n 22 |   /// Factory for creating Restic commands\n 23 |   private let commandFactory: ResticCommandFactory\n    |                               `- error: cannot find type 'ResticCommandFactory' in scope\n 24 | \n 25 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:50:20: error: cannot find 'ResticCommandFactory' in scope\n 48 |     self.operationExecutor=operationExecutor\n 49 |     self.operationsService=operationsService\n 50 |     commandFactory=ResticCommandFactory()\n    |                    `- error: cannot find 'ResticCommandFactory' in scope\n 51 |     resultParser=SnapshotResultParser()\n 52 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:22:31: error: cannot find type 'ResticCommandFactory' in scope\n 20 | \n 21 |   /// Factory for creating Restic commands\n 22 |   private let commandFactory: ResticCommandFactory\n    |                               `- error: cannot find type 'ResticCommandFactory' in scope\n 23 | \n 24 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:43:20: error: cannot find 'ResticCommandFactory' in scope\n 41 |     self.resticService=resticService\n 42 |     self.operationExecutor=operationExecutor\n 43 |     commandFactory=ResticCommandFactory()\n    |                    `- error: cannot find 'ResticCommandFactory' in scope\n 44 |     resultParser=SnapshotResultParser()\n 45 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:22:31: error: cannot find type 'ResticCommandFactory' in scope\n 20 | \n 21 |   /// Factory for creating Restic commands\n 22 |   private let commandFactory: ResticCommandFactory\n    |                               `- error: cannot find type 'ResticCommandFactory' in scope\n 23 | \n 24 |   /// Executor for operations\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:40:20: error: cannot find 'ResticCommandFactory' in scope\n 38 |     self.resticService=resticService\n 39 |     self.operationExecutor=operationExecutor\n 40 |     commandFactory=ResticCommandFactory()\n    |                    `- error: cannot find 'ResticCommandFactory' in scope\n 41 |   }\n 42 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:242:12: error: type 'EstimateSizeParameters' does not conform to protocol 'SnapshotOperationParameters'\n240 |     let resultParser=SnapshotResultParser()\n241 | \n242 |     struct EstimateSizeParameters: SnapshotOperationParameters {\n    |            |- error: type 'EstimateSizeParameters' does not conform to protocol 'SnapshotOperationParameters'\n    |            `- note: add stubs for conformance\n243 |       let snapshotID: String\n244 |       let operationType: SnapshotOperationType = .get\n    :\n250 |       }\n251 | \n252 |       func createLogContext() -\u003e SnapshotLogContextAdapter {\n    |            `- note: candidate has non-matching type '() -\u003e SnapshotLogContextAdapter'\n253 |         SnapshotLogContextAdapter(\n254 |           snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:44:8: note: protocol requires function 'createLogContext()' with type '() -\u003e SnapshotLogContext'\n 42 |   /// Creates a log context for the operation\n 43 |   /// - Returns: A SnapshotLogContext for logging\n 44 |   func createLogContext() -\u003e SnapshotLogContext\n    |        `- note: protocol requires function 'createLogContext()' with type '() -\u003e SnapshotLogContext'\n 45 | }\n 46 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:268:13: warning: variable 'args' was never mutated; consider changing to 'let' constant\n266 |       operation: { _, reporter, _ in\n267 |         // Create a command to get snapshot details with statistics\n268 |         var args=[\"snapshots\", snapshotID, \"--json\", \"--stats\"]\n    |             `- warning: variable 'args' was never mutated; consider changing to 'let' constant\n269 | \n270 |         let command=ResticCommandImpl(arguments: args)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:19:23: error: cannot find type 'LoggingProtocol' in scope\n 17 | \n 18 |   /// Logger for snapshot operations\n 19 |   private let logger: LoggingProtocol\n    |                       `- error: cannot find type 'LoggingProtocol' in scope\n 20 | \n 21 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:32:13: error: cannot find type 'LoggingProtocol' in scope\n 30 |     resticService: ResticServiceProtocol,\n 31 |     resultParser: SnapshotResultParser,\n 32 |     logger: LoggingProtocol\n    |             `- error: cannot find type 'LoggingProtocol' in scope\n 33 |   ) {\n 34 |     self.resticService=resticService\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupCancellationHandler.swift:7:58: error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 5 |  * Implementation of the cancellation handler for backup operations.\n 6 |  */\n 7 | public actor BackupCancellationHandler: BackupInterfaces.CancellationHandlerProtocol {\n   |                                                          `- error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 8 |   /// Map of operation IDs to cancellation tokens\n 9 |   private var tokens: [UUID: BackupCancellationToken]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:17:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 15 | \n 16 |   /// Handler for operation cancellation\n 17 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 18 | \n 19 |   /// Collector for metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:40:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 38 |   public init(\n 39 |     logger: any LoggingProtocol,\n 40 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 41 |     metricsCollector: BackupMetricsCollector,\n 42 |     errorLogContextMapper: ErrorLogContextMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:16:35: error: cannot find type 'CancellationHandlerProtocol' in scope\n 14 |  * - Support for both task-based and token-based cancellation\n 15 |  */\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n    |                                   `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cany Sendable, Error\u003e]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:174:21: error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n172 |  * Implementation of BackupCancellationToken.\n173 |  */\n174 | private final class BackupCancellationTokenImpl: BackupCancellationToken, @unchecked Sendable {\n    |                     |- error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n    |                     `- note: add stubs for conformance\n175 |   /// The unique identifier for this token\n176 |   public let id: String\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/BackupCancellationToken.swift:25:8: note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n23 |    * - Parameter callback: The callback to register\n24 |    */\n25 |   func registerCancellationCallback(_ callback: @escaping @Sendable () -\u003e Void) async\n   |        `- note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n26 | }\n27 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:27:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 25 | \n 26 |   /// Handler for operation cancellation\n 27 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 28 | \n 29 |   /// Collector for operation metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:52:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 50 |   public init(\n 51 |     resticService: ResticServiceProtocol,\n 52 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 53 |     metricsCollector: BackupMetricsCollector,\n 54 |     logger: any LoggingProtocol,\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:14:28: error: cannot find type 'DomainLoggerProtocol' in scope\n 12 |  * file paths and backup metadata.\n 13 |  */\n 14 | public actor BackupLogger: DomainLoggerProtocol {\n    |                            `- error: cannot find type 'DomainLoggerProtocol' in scope\n 15 |   /// The underlying logger\n 16 |   private let loggingService: any LoggingProtocol\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:448:25: error: cannot find type 'MetadataCollection' in scope\n446 | \n447 | extension BackupLogContext {\n448 |   func getMetadata() -\u003e MetadataCollection {\n    |                         `- error: cannot find type 'MetadataCollection' in scope\n449 |     // Convert the BackupLogContext to a LogMetadataDTOCollection\n450 |     // This ensures all privacy annotations are properly maintained\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:111:32: error: cannot find type 'MetadataCollection' in scope\n109 |    * - Returns: The metadata collection\n110 |    */\n111 |   public func getMetadata() -\u003e MetadataCollection {\n    |                                `- error: cannot find type 'MetadataCollection' in scope\n112 |     metadata\n113 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:12:15: error: inheritance from non-protocol type 'BackupLogContext'\n 10 |  * allowing for structured logging with appropriate privacy classifications.\n 11 |  */\n 12 | public struct BackupLogContextImpl: BackupLogContext, Sendable {\n    |               `- error: inheritance from non-protocol type 'BackupLogContext'\n 13 |   /// The domain name for the log context\n 14 |   public let domainName: String\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:221:25: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n    |                         `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n222 |     BackupInterfaces.SnapshotFileEntry(\n223 |       path: file.path ?? \"\",\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:220:8: error: no type named 'SnapshotFile' in module 'BackupServices'\n218 |   public static func toInterfaceSnapshotFileEntry(\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n    |        `- error: no type named 'SnapshotFile' in module 'BackupServices'\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n222 |     BackupInterfaces.SnapshotFileEntry(\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:241:24: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n    |                        `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n242 |     guard let files else { return nil }\n243 |     return files.map(toInterfaceSnapshotFileEntry)\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:240:78: error: no type named 'SnapshotFile' in module 'BackupServices'\n238 |    * - Returns: An array of converted snapshot file entries compatible with the interfaces module\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n    |                                                                              `- error: no type named 'SnapshotFile' in module 'BackupServices'\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n242 |     guard let files else { return nil }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupLogContext.swift:14:15: error: type 'BackupLogContext' does not conform to protocol 'LogContextDTO'\n 12 |  allowing for immutable context objects and thread safety.\n 13 |  */\n 14 | public struct BackupLogContext: LogContextDTO {\n    |               |- error: type 'BackupLogContext' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 15 |   /// The domain name for this context\n 16 |   public let domainName: String=\"BackupServices\"\n    :\n 26 | \n 27 |   /// Current operation being performed\n 28 |   public var operation: String? {\n    |              `- note: candidate has non-matching type 'String?'\n 29 |     // Find operation in the metadata entries\n 30 |     for entry in metadata.entries where entry.key == \"operation\" {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:11:7: note: protocol requires property 'operation' with type 'String'\n 9 | \n10 |   /// The operation being performed (e.g., \"addDestination\", \"writeLog\")\n11 |   var operation: String { get }\n   |       `- note: protocol requires property 'operation' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e BackupLogContext'\n29 | }\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupLogContextAdapter.swift:29:15: error: property 'operation' must be declared public because it matches a requirement in public protocol 'LogContextDTO'\n 27 | \n 28 |   /// Operation being performed\n 29 |   private let operation: String\n    |               |- error: property 'operation' must be declared public because it matches a requirement in public protocol 'LogContextDTO'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 30 | \n 31 |   /// Additional context values with privacy annotations\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupLogContextAdapter.swift:12:15: error: type 'BackupLogContextAdapter' does not conform to protocol 'LogContextDTO'\n 10 |  * appropriate privacy controls for backup-related operations.\n 11 |  */\n 12 | public struct BackupLogContextAdapter: LogContextDTO {\n    |               |- error: type 'BackupLogContextAdapter' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 13 |   /// The domain name for this context\n 14 |   public let domainName: String=\"BackupServices\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:14:7: note: protocol requires property 'category' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e BackupLogContextAdapter'\n29 | }\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:426:11: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n    :\n424 | \n425 | /// Extension to provide conversion methods between DTOs and BackupInterfaces types\n426 | extension BackupCreateParameters {\n    |           `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n427 |   /// Convert to BackupInterfaces parameters\n428 |   public func toBackupParameters() -\u003e BackupParameters {\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:448:11: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n    :\n446 | }\n447 | \n448 | extension BackupRestoreParameters {\n    |           `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n449 |   /// Convert to BackupInterfaces parameters\n450 |   public func toBackupParameters() -\u003e RestoreParameters {\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:18:14: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n16 |   /// - Returns: A ProgressCancellationToken that delegates to the original token\n17 |   public static func asProgressCancellationToken(\n18 |     _ token: BackupOperationCancellationTokenImpl\n   |              `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n19 |   ) -\u003e ProgressCancellationToken {\n20 |     ProgressCancellationTokenAdapter(token: token)\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:28:22: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n26 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken,\n27 | @unchecked Sendable {\n28 |   private let token: BackupOperationCancellationTokenImpl\n   |                      `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:31:15: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n31 |   init(token: BackupOperationCancellationTokenImpl) {\n   |               `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n32 |     self.token=token\n33 |     // Set up task to monitor the cancellation state\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:87:11: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n85 | \n86 | /// Extension to BackupOperationCancellationTokenImpl for tracking with BackupOperation\n87 | extension BackupOperationCancellationTokenImpl {\n   |           `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n88 |   /// Register this token with the given operation\n89 |   ///\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:10:15: error: type 'SnapshotLogContext' does not conform to protocol 'LogContextDTO'\n  8 |  * operation details in log messages while maintaining privacy awareness.\n  9 |  */\n 10 | public struct SnapshotLogContext: LogContextDTO {\n    |               |- error: type 'SnapshotLogContext' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 11 |   /// The domain name for this context\n 12 |   public let domainName: String=\"BackupServices.Snapshot\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:14:7: note: protocol requires property 'category' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e SnapshotLogContext'\n29 | }\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContextAdapter.swift:12:15: error: type 'SnapshotLogContextAdapter' does not conform to protocol 'LogContextDTO'\n 10 |  * and ensures proper separation between domain-specific metadata and core logging infrastructure.\n 11 |  */\n 12 | public struct SnapshotLogContextAdapter: LogContextDTO {\n    |               |- error: type 'SnapshotLogContextAdapter' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 13 |   /// The domain name of this context\n 14 |   public let domainName: String=\"BackupServices.Snapshot\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:11:7: note: protocol requires property 'operation' with type 'String'\n 9 | \n10 |   /// The operation being performed (e.g., \"addDestination\", \"writeLog\")\n11 |   var operation: String { get }\n   |       `- note: protocol requires property 'operation' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e SnapshotLogContextAdapter'\n29 | }\n30 | \npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:41:3: error: expected 'func' keyword in instance method declaration\n 39 | public class BaseBackupCommand {\n 40 |   /// The Restic service to use for operations\n 41 |   protected let resticService: ResticServiceProtocol\n    |   `- error: expected 'func' keyword in instance method declaration\n 42 | \n 43 |   /// Repository connection information\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:41:13: error: expected '(' in argument list of function declaration\n 39 | public class BaseBackupCommand {\n 40 |   /// The Restic service to use for operations\n 41 |   protected let resticService: ResticServiceProtocol\n    |             `- error: expected '(' in argument list of function declaration\n 42 | \n 43 |   /// Repository connection information\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:41:12: error: consecutive declarations on a line must be separated by ';'\n 39 | public class BaseBackupCommand {\n 40 |   /// The Restic service to use for operations\n 41 |   protected let resticService: ResticServiceProtocol\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 42 | \n 43 |   /// Repository connection information\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:3: error: expected 'func' keyword in instance method declaration\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |   `- error: expected 'func' keyword in instance method declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:13: error: expected '(' in argument list of function declaration\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |             `- error: expected '(' in argument list of function declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:12: error: consecutive declarations on a line must be separated by ';'\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:3: error: expected 'func' keyword in instance method declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |   `- error: expected 'func' keyword in instance method declaration\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:13: error: expected '(' in argument list of function declaration\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |             `- error: expected '(' in argument list of function declaration\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:12: error: consecutive declarations on a line must be separated by ';'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:3: error: expected 'func' keyword in instance method declaration\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |   `- error: expected 'func' keyword in instance method declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:13: error: expected '(' in argument list of function declaration\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |             `- error: expected '(' in argument list of function declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:12: error: consecutive declarations on a line must be separated by ';'\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:3: error: expected 'func' keyword in instance method declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |   `- error: expected 'func' keyword in instance method declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:13: error: expected '(' in argument list of function declaration\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |             `- error: expected '(' in argument list of function declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:12: error: consecutive declarations on a line must be separated by ';'\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:3: error: expected 'func' keyword in instance method declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |   `- error: expected 'func' keyword in instance method declaration\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:13: error: expected '(' in argument list of function declaration\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |             `- error: expected '(' in argument list of function declaration\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:12: error: consecutive declarations on a line must be separated by ';'\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:3: error: expected 'func' keyword in instance method declaration\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |   `- error: expected 'func' keyword in instance method declaration\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:13: error: expected '(' in argument list of function declaration\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |             `- error: expected '(' in argument list of function declaration\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:12: error: consecutive declarations on a line must be separated by ';'\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |            `- error: consecutive declarations on a line must be separated by ';'\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:3: error: expected 'func' keyword in instance method declaration\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |   `- error: expected 'func' keyword in instance method declaration\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:13: error: expected '(' in argument list of function declaration\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |             `- error: expected '(' in argument list of function declaration\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:12: error: consecutive declarations on a line must be separated by ';'\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |            `- error: consecutive declarations on a line must be separated by ';'\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:3: error: expected 'func' keyword in instance method declaration\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:13: error: expected '(' in argument list of function declaration\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:12: error: consecutive declarations on a line must be separated by ';'\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:3: error: expected 'func' keyword in instance method declaration\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:13: error: expected '(' in argument list of function declaration\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:12: error: consecutive declarations on a line must be separated by ';'\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:3: error: expected 'func' keyword in instance method declaration\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:13: error: expected '(' in argument list of function declaration\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:12: error: consecutive declarations on a line must be separated by ';'\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:3: error: expected 'func' keyword in instance method declaration\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |   `- error: expected 'func' keyword in instance method declaration\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:13: error: expected '(' in argument list of function declaration\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |             `- error: expected '(' in argument list of function declaration\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:12: error: consecutive declarations on a line must be separated by ';'\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |            `- error: consecutive declarations on a line must be separated by ';'\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:3: error: expected 'func' keyword in instance method declaration\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |   `- error: expected 'func' keyword in instance method declaration\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:13: error: expected '(' in argument list of function declaration\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |             `- error: expected '(' in argument list of function declaration\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:12: error: consecutive declarations on a line must be separated by ';'\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |            `- error: consecutive declarations on a line must be separated by ';'\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:44:3: error: invalid redeclaration of 'protected()'\n 42 | \n 43 |   /// Repository connection information\n 44 |   protected let repositoryInfo: RepositoryInfo\n    |   `- error: invalid redeclaration of 'protected()'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:3: error: invalid redeclaration of 'protected()'\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |   `- error: invalid redeclaration of 'protected()'\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:47:33: error: cannot find type 'BackupCommandFactory' in scope\n 45 | \n 46 |   /// The command factory for creating Restic commands\n 47 |   protected let commandFactory: BackupCommandFactory\n    |                                 `- error: cannot find type 'BackupCommandFactory' in scope\n 48 | \n 49 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:50:3: error: invalid redeclaration of 'protected()'\n 48 | \n 49 |   /// Parser for Restic command results\n 50 |   protected let resultParser: BackupResultParser\n    |   `- error: invalid redeclaration of 'protected()'\n 51 | \n 52 |   /// Optional logger for operation tracking\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:53:3: error: invalid redeclaration of 'protected()'\n 51 | \n 52 |   /// Optional logger for operation tracking\n 53 |   protected let logger: LoggingProtocol?\n    |   `- error: invalid redeclaration of 'protected()'\n 54 | \n 55 |   /// Error mapper for translating errors\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:56:3: error: invalid redeclaration of 'protected()'\n 54 | \n 55 |   /// Error mapper for translating errors\n 56 |   protected let errorMapper: BackupErrorMapper\n    |   `- error: invalid redeclaration of 'protected()'\n 57 | \n 58 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:72:21: error: cannot find type 'BackupCommandFactory' in scope\n 70 |     resticService: ResticServiceProtocol,\n 71 |     repositoryInfo: RepositoryInfo,\n 72 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 73 |     resultParser: BackupResultParser,\n 74 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:94:3: error: invalid redeclaration of 'protected()'\n 92 |    - Returns: A configured log context\n 93 |    */\n 94 |   protected func createLogContext(\n    |   `- error: invalid redeclaration of 'protected()'\n 95 |     operation: String,\n 96 |     correlationID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:125:3: error: invalid redeclaration of 'protected()'\n123 |    - Returns: A tuple containing the progress stream and its continuation\n124 |    */\n125 |   protected func createProgressStream()\n    |   `- error: invalid redeclaration of 'protected()'\n126 |   -\u003e (AsyncStream\u003cBackupProgressInfo\u003e, AsyncStream\u003cBackupProgressInfo\u003e.Continuation) {\n127 |     var continuation: AsyncStream\u003cBackupProgressInfo\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:141:3: error: invalid redeclaration of 'protected()'\n139 |       - context: The logging context\n140 |    */\n141 |   protected func logDebug(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n142 |     await logger?.log(.debug, message, context: context)\n143 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:152:3: error: invalid redeclaration of 'protected()'\n150 |       - context: The logging context\n151 |    */\n152 |   protected func logInfo(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n153 |     await logger?.log(.info, message, context: context)\n154 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:163:3: error: invalid redeclaration of 'protected()'\n161 |       - context: The logging context\n162 |    */\n163 |   protected func logWarning(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n164 |     await logger?.log(.warning, message, context: context)\n165 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:174:3: error: invalid redeclaration of 'protected()'\n172 |       - context: The logging context\n173 |    */\n174 |   protected func logError(_ message: String, context: LogContextDTO) async {\n    |   `- error: invalid redeclaration of 'protected()'\n175 |     await logger?.log(.error, message, context: context)\n176 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:184:3: error: invalid redeclaration of 'protected()'\n182 |    - Returns: A cancellation token implementation\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n    |   `- error: invalid redeclaration of 'protected()'\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:185:6: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n183 |    */\n184 |   protected func createCancellationToken(operationID: String)\n185 |   -\u003e BackupOperationCancellationTokenImpl {\n    |      `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n186 |     BackupOperationCancellationTokenImpl(operationID: operationID)\n187 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:41:3: error: expected '{' in body of function declaration\n 39 | public class BaseBackupCommand {\n 40 |   /// The Restic service to use for operations\n 41 |   protected let resticService: ResticServiceProtocol\n    |   `- error: expected '{' in body of function declaration\n 42 | \n 43 |   /// Repository connection information\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:107:7: error: switch must be exhaustive\n105 |     // Add additional metadata with specified privacy levels\n106 |     for item in additionalMetadata {\n107 |       switch item.value.privacyLevel {\n    |       |- error: switch must be exhaustive\n    |       |- note: add missing case: '.sensitive'\n    |       |- note: add missing case: '.hash'\n    |       |- note: add missing case: '.never'\n    |       |- note: add missing case: '.auto'\n    |       `- note: add missing cases\n108 |         case .public:\n109 |           metadata=metadata.withPublic(key: item.key, value: item.value.value)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupCommand.swift:117:12: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n115 |     }\n116 | \n117 |     return LogContextDTO(metadata: metadata)\n    |            `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n118 |   }\n119 | \n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: error: invalid redeclaration of 'BackupCreateParameters'\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- error: invalid redeclaration of 'BackupCreateParameters'\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: error: invalid redeclaration of 'BackupRestoreParameters'\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- error: invalid redeclaration of 'BackupRestoreParameters'\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: error: invalid redeclaration of 'BackupDeleteParameters'\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- error: invalid redeclaration of 'BackupDeleteParameters'\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: error: invalid redeclaration of 'BackupMaintenanceParameters'\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- error: invalid redeclaration of 'BackupMaintenanceParameters'\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:18:27: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for backup creation\n 18 |   private let parameters: BackupCreateParameters\n    |                           `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:21:15: note: found this candidate\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:41:17: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupCreateParameters,\n    |                 `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:21:15: note: found this candidate\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupCreateParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:97:8: error: value of type 'any LogContextDTO' has no member 'withPublic'\n 95 |     // Enhance the log context with specific operation details\n 96 |     let backupLogContext=context\n 97 |       .withPublic(key: \"operationID\", value: parameters.operationID)\n    |        `- error: value of type 'any LogContextDTO' has no member 'withPublic'\n 98 |       .withPublic(key: \"operation\", value: \"createBackup\")\n 99 |       .withPrivate(key: \"sources\", value: parameters.sources.map(\\.path).joined(separator: \", \"))\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:99:66: error: cannot infer key path type from context; consider explicitly specifying a root type\n 97 |       .withPublic(key: \"operationID\", value: parameters.operationID)\n 98 |       .withPublic(key: \"operation\", value: \"createBackup\")\n 99 |       .withPrivate(key: \"sources\", value: parameters.sources.map(\\.path).joined(separator: \", \"))\n    |                                                                  `- error: cannot infer key path type from context; consider explicitly specifying a root type\n100 |       .withPublic(key: \"sourceCount\", value: String(parameters.sources.count))\n101 | \n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:120:61: error: extra arguments at positions #2, #4 in call\n118 | \n119 |       // Execute the backup command with progress and cancellation support\n120 |       let result=try await resticService.executeWithProgress(\n    |                                                             `- error: extra arguments at positions #2, #4 in call\n121 |         command: command,\n122 |         repository: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/ResticServiceProtocol.swift:28:8: note: 'executeWithProgress(_:progressHandler:)' declared here\n26 |    * - Throws: BackupOperationError if the command fails\n27 |    */\n28 |   func executeWithProgress(\n   |        `- note: 'executeWithProgress(_:progressHandler:)' declared here\n29 |     _ command: ResticCommand,\n30 |     progressHandler: @escaping (String) -\u003e Void\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:123:26: error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n121 |         command: command,\n122 |         repository: repositoryInfo,\n123 |         progressHandler: progressHandler,\n    |                          `- error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n124 |         cancellationToken: cancellationToken\n125 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/CreateBackupCommand.swift:128:73: error: missing argument for parameter 'sources' in call\n126 | \n127 |       // Parse the result\n128 |       let backupResult=try resultParser.parseBackupResult(output: result)\n    |                                                                         `- error: missing argument for parameter 'sources' in call\n129 | \n130 |       await logInfo(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:16:15: note: 'parseBackupResult(output:sources:)' declared here\n 14 |   /// - Returns: A backup result with details about the operation\n 15 |   /// - Throws: BackupError if parsing fails\n 16 |   public func parseBackupResult(output: String, sources: [URL]) throws -\u003e BackupResult {\n    |               `- note: 'parseBackupResult(output:sources:)' declared here\n 17 |     guard !output.isEmpty else {\n 18 |       throw BackupError.parsingError(details: \"Empty output from backup command\")\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:18:27: error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for deleting a backup\n 18 |   private let parameters: BackupDeleteParameters\n    |                           `- error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: note: found this candidate\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- note: found this candidate\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:249:15: note: found this candidate\n247 |  * Parameters for deleting a backup.\n248 |  */\n249 | public struct BackupDeleteParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n250 |   /// ID of the snapshot to delete\n251 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:41:17: error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupDeleteParameters,\n    |                 `- error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: note: found this candidate\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- note: found this candidate\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:249:15: note: found this candidate\n247 |  * Parameters for deleting a backup.\n248 |  */\n249 | public struct BackupDeleteParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n250 |   /// ID of the snapshot to delete\n251 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupDeleteParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:97:8: error: value of type 'any LogContextDTO' has no member 'withPublic'\n 95 |     // Enhance the log context with specific operation details\n 96 |     let backupLogContext=context\n 97 |       .withPublic(key: \"operationID\", value: parameters.operationID)\n    |        `- error: value of type 'any LogContextDTO' has no member 'withPublic'\n 98 |       .withPublic(key: \"operation\", value: \"deleteBackup\")\n 99 | \n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:122:61: error: extra arguments at positions #2, #4 in call\n120 | \n121 |       // Execute the delete command with progress and cancellation support\n122 |       let result=try await resticService.executeWithProgress(\n    |                                                             `- error: extra arguments at positions #2, #4 in call\n123 |         command: command,\n124 |         repository: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/ResticServiceProtocol.swift:28:8: note: 'executeWithProgress(_:progressHandler:)' declared here\n26 |    * - Throws: BackupOperationError if the command fails\n27 |    */\n28 |   func executeWithProgress(\n   |        `- note: 'executeWithProgress(_:progressHandler:)' declared here\n29 |     _ command: ResticCommand,\n30 |     progressHandler: @escaping (String) -\u003e Void\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:125:26: error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n123 |         command: command,\n124 |         repository: repositoryInfo,\n125 |         progressHandler: progressHandler,\n    |                          `- error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n126 |         cancellationToken: cancellationToken\n127 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/DeleteBackupCommand.swift:130:41: error: value of type 'BackupResultParser' has no member 'parseDeleteResult'\n128 | \n129 |       // Parse the result\n130 |       let deleteResult=try resultParser.parseDeleteResult(\n    |                                         `- error: value of type 'BackupResultParser' has no member 'parseDeleteResult'\n131 |         output: result,\n132 |         snapshotID: parameters.snapshotID ?? \"multiple snapshots\"\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/ListSnapshotsCommand.swift:36:21: error: cannot find type 'BackupCommandFactory' in scope\n 34 |     resticService: ResticServiceProtocol,\n 35 |     repositoryInfo: RepositoryInfo,\n 36 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 37 |     resultParser: BackupResultParser,\n 38 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/ListSnapshotsCommand.swift:67:8: error: value of type 'any LogContextDTO' has no member 'withPublic'\n 65 |     // Enhance the log context with specific operation details\n 66 |     let backupLogContext=context\n 67 |       .withPublic(key: \"operationID\", value: operationID)\n    |        `- error: value of type 'any LogContextDTO' has no member 'withPublic'\n 68 |       .withPublic(key: \"operation\", value: \"listSnapshots\")\n 69 | \n\npackages/UmbraImplementations/Sources/BackupServices/Commands/ListSnapshotsCommand.swift:96:21: error: extra argument 'repository' in call\n 94 |       let result=try await resticService.execute(\n 95 |         command: command,\n 96 |         repository: repositoryInfo\n    |                     `- error: extra argument 'repository' in call\n 97 |       )\n 98 | \n\npackages/UmbraImplementations/Sources/BackupServices/Commands/ListSnapshotsCommand.swift:100:71: error: missing argument for parameter 'sources' in call\n 98 | \n 99 |       // Parse the result\n100 |       let snapshots=try resultParser.parseSnapshotsList(output: result)\n    |                                                                       `- error: missing argument for parameter 'sources' in call\n101 | \n102 |       await logInfo(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:230:15: note: 'parseSnapshotsList(output:sources:)' declared here\n228 |   /// - Returns: An array of backup snapshots\n229 |   /// - Throws: BackupError if parsing fails\n230 |   public func parseSnapshotsList(output: String, sources: [URL]) throws -\u003e [BackupSnapshot] {\n    |               `- note: 'parseSnapshotsList(output:sources:)' declared here\n231 |     guard !output.isEmpty else {\n232 |       throw BackupError.parsingError(details: \"Empty output from snapshots command\")\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:18:27: error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for maintenance operation\n 18 |   private let parameters: BackupMaintenanceParameters\n    |                           `- error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: note: found this candidate\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- note: found this candidate\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:292:15: note: found this candidate\n290 |  * Parameters for performing repository maintenance.\n291 |  */\n292 | public struct BackupMaintenanceParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n293 |   /// Type of maintenance to perform\n294 |   public let maintenanceType: MaintenanceType\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:41:17: error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupMaintenanceParameters,\n    |                 `- error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: note: found this candidate\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- note: found this candidate\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:292:15: note: found this candidate\n290 |  * Parameters for performing repository maintenance.\n291 |  */\n292 | public struct BackupMaintenanceParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n293 |   /// Type of maintenance to perform\n294 |   public let maintenanceType: MaintenanceType\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupMaintenanceParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:97:8: error: value of type 'any LogContextDTO' has no member 'withPublic'\n 95 |     // Enhance the log context with specific operation details\n 96 |     let backupLogContext=context\n 97 |       .withPublic(key: \"operationID\", value: parameters.operationID)\n    |        `- error: value of type 'any LogContextDTO' has no member 'withPublic'\n 98 |       .withPublic(key: \"operation\", value: \"maintenance\")\n 99 |       .withPublic(key: \"maintenanceType\", value: parameters.type.rawValue)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:116:61: error: extra arguments at positions #2, #4 in call\n114 | \n115 |       // Execute the maintenance command with progress and cancellation support\n116 |       let result=try await resticService.executeWithProgress(\n    |                                                             `- error: extra arguments at positions #2, #4 in call\n117 |         command: command,\n118 |         repository: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/ResticServiceProtocol.swift:28:8: note: 'executeWithProgress(_:progressHandler:)' declared here\n26 |    * - Throws: BackupOperationError if the command fails\n27 |    */\n28 |   func executeWithProgress(\n   |        `- note: 'executeWithProgress(_:progressHandler:)' declared here\n29 |     _ command: ResticCommand,\n30 |     progressHandler: @escaping (String) -\u003e Void\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/MaintenanceCommand.swift:119:26: error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n117 |         command: command,\n118 |         repository: repositoryInfo,\n119 |         progressHandler: progressHandler,\n    |                          `- error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n120 |         cancellationToken: cancellationToken\n121 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:18:27: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 16 | \n 17 |   /// Parameters for backup restoration\n 18 |   private let parameters: BackupRestoreParameters\n    |                           `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 19 | \n 20 |   /// Progress reporter for tracking progress\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:96:15: note: found this candidate\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:41:17: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 39 |    */\n 40 |   public init(\n 41 |     parameters: BackupRestoreParameters,\n    |                 `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:96:15: note: found this candidate\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupRestoreParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:97:8: error: value of type 'any LogContextDTO' has no member 'withPublic'\n 95 |     // Enhance the log context with specific operation details\n 96 |     let backupLogContext=context\n 97 |       .withPublic(key: \"operationID\", value: parameters.operationID)\n    |        `- error: value of type 'any LogContextDTO' has no member 'withPublic'\n 98 |       .withPublic(key: \"operation\", value: \"restoreBackup\")\n 99 |       .withPublic(key: \"snapshotID\", value: parameters.snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:105:33: error: cannot infer key path type from context; consider explicitly specifying a root type\n103 |       _=backupLogContext.withPrivate(\n104 |         key: \"includePaths\",\n105 |         value: includePaths.map(\\.path).joined(separator: \", \")\n    |                                 `- error: cannot infer key path type from context; consider explicitly specifying a root type\n106 |       )\n107 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:124:61: error: extra arguments at positions #2, #4 in call\n122 | \n123 |       // Execute the restore command with progress and cancellation support\n124 |       let result=try await resticService.executeWithProgress(\n    |                                                             `- error: extra arguments at positions #2, #4 in call\n125 |         command: command,\n126 |         repository: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/ResticServiceProtocol.swift:28:8: note: 'executeWithProgress(_:progressHandler:)' declared here\n26 |    * - Throws: BackupOperationError if the command fails\n27 |    */\n28 |   func executeWithProgress(\n   |        `- note: 'executeWithProgress(_:progressHandler:)' declared here\n29 |     _ command: ResticCommand,\n30 |     progressHandler: @escaping (String) -\u003e Void\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:127:26: error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n125 |         command: command,\n126 |         repository: repositoryInfo,\n127 |         progressHandler: progressHandler,\n    |                          `- error: cannot pass function of type '(BackupProgressInfo) async -\u003e ()' to parameter expecting synchronous function type\n128 |         cancellationToken: cancellationToken\n129 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/RestoreBackupCommand.swift:134:32: error: extra argument 'snapshotID' in call\n132 |       let restoreResult=try resultParser.parseRestoreResult(\n133 |         output: result,\n134 |         snapshotID: parameters.snapshotID,\n    |                                `- error: extra argument 'snapshotID' in call\n135 |         targetPath: parameters.targetPath\n136 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:24:34: error: cannot find type 'CancellationToken' in scope\n 22 | \n 23 |   /// Cancellation token for the operation\n 24 |   private let cancellationToken: CancellationToken?\n    |                                  `- error: cannot find type 'CancellationToken' in scope\n 25 | \n 26 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:43:24: error: cannot find type 'CancellationToken' in scope\n 41 |     parameters: BackupVerificationParameters,\n 42 |     progressReporter: BackupProgressReporter?,\n 43 |     cancellationToken: CancellationToken?,\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n 44 |     resticService: ResticServiceProtocol,\n 45 |     repositoryInfo: RepositoryInfo,\n 46 |     commandFactory: BackupCommandFactory,\n    |                     `- error: cannot find type 'BackupCommandFactory' in scope\n 47 |     resultParser: BackupResultParser,\n 48 |     errorMapper: BackupErrorMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:90:55: error: type 'BackupOperation' has no member 'verifyBackup'\n 88 |     ) async in\n 89 |       if let reporter=progressReporter {\n 90 |         await reporter.reportProgress(progress, for: .verifyBackup)\n    |                                                       `- error: type 'BackupOperation' has no member 'verifyBackup'\n 91 |       }\n 92 |       progressContinuation.yield(progress)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:102:8: error: value of type 'any LogContextDTO' has no member 'withPublic'\n100 |     // Enhance the log context with specific operation details\n101 |     let backupLogContext=context\n102 |       .withPublic(key: \"operationID\", value: parameters.operationID)\n    |        `- error: value of type 'any LogContextDTO' has no member 'withPublic'\n103 |       .withPublic(key: \"operation\", value: \"verifyBackup\")\n104 |       .withPublic(key: \"snapshotID\", value: parameters.snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:111:15: error: 'nil' requires a contextual type\n109 |       // First, get the snapshot details to verify it exists\n110 |       let snapshotCommand=try commandFactory.createListSnapshotsCommand(\n111 |         path: nil,\n    |               `- error: 'nil' requires a contextual type\n112 |         tags: nil,\n113 |         host: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:112:15: error: 'nil' requires a contextual type\n110 |       let snapshotCommand=try commandFactory.createListSnapshotsCommand(\n111 |         path: nil,\n112 |         tags: nil,\n    |               `- error: 'nil' requires a contextual type\n113 |         host: nil,\n114 |         snapshotID: parameters.snapshotID\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:113:15: error: 'nil' requires a contextual type\n111 |         path: nil,\n112 |         tags: nil,\n113 |         host: nil,\n    |               `- error: 'nil' requires a contextual type\n114 |         snapshotID: parameters.snapshotID\n115 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:119:21: error: extra argument 'repository' in call\n117 |       let snapshotResult=try await resticService.execute(\n118 |         command: snapshotCommand,\n119 |         repository: repositoryInfo\n    |                     `- error: extra argument 'repository' in call\n120 |       )\n121 | \n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:122:79: error: missing argument for parameter 'sources' in call\n120 |       )\n121 | \n122 |       let snapshots=try resultParser.parseSnapshotsList(output: snapshotResult)\n    |                                                                               `- error: missing argument for parameter 'sources' in call\n123 | \n124 |       guard let snapshot=snapshots.first(where: { $0.id == parameters.snapshotID }) else {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:230:15: note: 'parseSnapshotsList(output:sources:)' declared here\n228 |   /// - Returns: An array of backup snapshots\n229 |   /// - Throws: BackupError if parsing fails\n230 |   public func parseSnapshotsList(output: String, sources: [URL]) throws -\u003e [BackupSnapshot] {\n    |               `- note: 'parseSnapshotsList(output:sources:)' declared here\n231 |     guard !output.isEmpty else {\n232 |       throw BackupError.parsingError(details: \"Empty output from snapshots command\")\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:137:61: error: extra arguments at positions #2, #4 in call\n135 | \n136 |       // Execute the verify command with progress and cancellation support\n137 |       let result=try await resticService.executeWithProgress(\n    |                                                             `- error: extra arguments at positions #2, #4 in call\n138 |         command: command,\n139 |         repository: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/ResticServiceProtocol.swift:28:8: note: 'executeWithProgress(_:progressHandler:)' declared here\n26 |    * - Throws: BackupOperationError if the command fails\n27 |    */\n28 |   func executeWithProgress(\n   |        `- note: 'executeWithProgress(_:progressHandler:)' declared here\n29 |     _ command: ResticCommand,\n30 |     progressHandler: @escaping (String) -\u003e Void\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/VerifyBackupCommand.swift:145:47: error: value of type 'BackupResultParser' has no member 'parseVerificationResult'\n143 | \n144 |       // Parse the result\n145 |       let verificationResult=try resultParser.parseVerificationResult(\n    |                                               `- error: value of type 'BackupResultParser' has no member 'parseVerificationResult'\n146 |         output: result,\n147 |         snapshotID: parameters.snapshotID\n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/BackupLogContextDTO.swift:137:21: error: extra arguments at positions #1, #3 in call\n135 |    */\n136 |   public func toLogContextDTO() -\u003e LogContextDTO {\n137 |     BackupLogContext(\n    |                     `- error: extra arguments at positions #1, #3 in call\n138 |       operation: operationType.rawValue,\n139 |       source: \"BackupService\",\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupLogContext.swift:37:10: note: 'init(correlationID:source:)' declared here\n 35 | \n 36 |   /// Initialises an empty backup log context\n 37 |   public init(correlationID: String?=nil, source: String?=nil) {\n    |          `- note: 'init(correlationID:source:)' declared here\n 38 |     self.correlationID=correlationID\n 39 |     self.source=source\n\npackages/UmbraImplementations/Sources/BackupServices/DTOs/SnapshotFileDTO.swift:88:17: error: cannot convert value of type 'FileType' to expected argument type 'SnapshotFileType'\n 86 |       uid: 0, // Default value as we don't have this information\n 87 |       gid: 0, // Default value as we don't have this information\n 88 |       fileType: fileType,\n    |                 `- error: cannot convert value of type 'FileType' to expected argument type 'SnapshotFileType'\n 89 |       contentHash: contentHash\n 90 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:45:54: error: type 'any ResticServiceFactory' has no member 'shared'\n 43 |   ) async throws -\u003e BackupServiceProtocol {\n 44 |     // Create a default Restic service\n 45 |     let resticService=try await ResticServiceFactory.shared.createDefault(\n    |                                                      `- error: type 'any ResticServiceFactory' has no member 'shared'\n 46 |       logger: logger,\n 47 |       repositoryPath: repositoryPath,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:53:13: error: extra argument 'path' in call\n 51 |     // Create repository info\n 52 |     let repositoryInfo=RepositoryInfo(\n 53 |       path: repositoryPath,\n    |             `- error: extra argument 'path' in call\n 54 |       password: repositoryPassword\n 55 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:52:38: error: missing arguments for parameters 'location', 'id' in call\n 50 | \n 51 |     // Create repository info\n 52 |     let repositoryInfo=RepositoryInfo(\n    |                                      `- error: missing arguments for parameters 'location', 'id' in call\n 53 |       path: repositoryPath,\n 54 |       password: repositoryPassword\n\npackages/UmbraImplementations/Sources/BackupServices/Types/RepositoryInfo.swift:28:10: note: 'init(location:id:password:description:)' declared here\n26 |   ///   - password: Optional password used to secure the repository\n27 |   ///   - description: Optional description of the repository\n28 |   public init(\n   |          `- note: 'init(location:id:password:description:)' declared here\n29 |     location: String,\n30 |     id: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:97:13: error: extra argument 'path' in call\n 95 |     // Create repository info\n 96 |     let repositoryInfo=RepositoryInfo(\n 97 |       path: repositoryPath,\n    |             `- error: extra argument 'path' in call\n 98 |       password: repositoryPassword\n 99 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:96:38: error: missing arguments for parameters 'location', 'id' in call\n 94 |   ) async -\u003e BackupServiceProtocol {\n 95 |     // Create repository info\n 96 |     let repositoryInfo=RepositoryInfo(\n    |                                      `- error: missing arguments for parameters 'location', 'id' in call\n 97 |       path: repositoryPath,\n 98 |       password: repositoryPassword\n\npackages/UmbraImplementations/Sources/BackupServices/Types/RepositoryInfo.swift:28:10: note: 'init(location:id:password:description:)' declared here\n26 |   ///   - password: Optional password used to secure the repository\n27 |   ///   - description: Optional description of the repository\n28 |   public init(\n   |          `- note: 'init(location:id:password:description:)' declared here\n29 |     location: String,\n30 |     id: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:137:54: error: type 'any ResticServiceFactory' has no member 'shared'\n135 |   ) async throws -\u003e BackupServiceProtocol {\n136 |     // Create a default Restic service\n137 |     let resticService=try await ResticServiceFactory.shared.createDefault(\n    |                                                      `- error: type 'any ResticServiceFactory' has no member 'shared'\n138 |       logger: logger,\n139 |       repositoryPath: repositoryInfo.path,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:139:38: error: value of type 'RepositoryInfo' has no member 'path'\n137 |     let resticService=try await ResticServiceFactory.shared.createDefault(\n138 |       logger: logger,\n139 |       repositoryPath: repositoryInfo.path,\n    |                                      `- error: value of type 'RepositoryInfo' has no member 'path'\n140 |       repositoryPassword: repositoryInfo.password\n141 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:144:64: error: value of type 'RepositoryInfo' has no member 'path'\n142 | \n143 |     // Check if we have a cached service\n144 |     if useCache, let cachedService=serviceCache[repositoryInfo.path] {\n    |                                                                `- error: value of type 'RepositoryInfo' has no member 'path'\n145 |       return cachedService\n146 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:157:35: error: value of type 'RepositoryInfo' has no member 'path'\n155 |     // Cache the service if requested\n156 |     if useCache {\n157 |       serviceCache[repositoryInfo.path]=backupService\n    |                                   `- error: value of type 'RepositoryInfo' has no member 'path'\n158 |     }\n159 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:149:17: error: cannot find type 'BackupProgress' in scope\n147 |    */\n148 |   public func logProgressUpdate(\n149 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n150 |     for operation: BackupOperation,\n151 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:40:5: error: type 'BackupLogContext' does not conform to protocol 'LogContextDTO'\n 38 |     message: String?=nil\n 39 |   ) async {\n 40 |     let operation=logContext.operation ?? \"unknown\"\n    |     `- error: type 'BackupLogContext' does not conform to protocol 'LogContextDTO'\n 41 |     let defaultMessage=\"Starting backup operation: \\(operation)\"\n 42 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:46:15: error: extra argument 'source' in call\n 44 |       message ?? defaultMessage,\n 45 |       context: logContext,\n 46 |       source: \"BackupService\"\n    |               `- error: extra argument 'source' in call\n 47 |     )\n 48 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:69:15: error: extra argument 'source' in call\n 67 |       message ?? defaultMessage,\n 68 |       context: updatedContext,\n 69 |       source: \"BackupService\"\n    |               `- error: extra argument 'source' in call\n 70 |     )\n 71 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:92:15: error: extra argument 'source' in call\n 90 |       message ?? defaultMessage,\n 91 |       context: updatedContext,\n 92 |       source: \"BackupService\"\n    |               `- error: extra argument 'source' in call\n 93 |     )\n 94 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:117:77: error: value of type 'BackupError' has no member 'code'\n115 |     if let backupError=error as? BackupError {\n116 |       updatedContext=updatedContext\n117 |         .withPublic(key: \"errorCode\", value: String(describing: backupError.code))\n    |                                                                             `- error: value of type 'BackupError' has no member 'code'\n118 |         .withPrivate(key: \"errorMessage\", value: backupError.localizedDescription)\n119 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:121:39: error: value of type 'BackupError' has no member 'context'\n119 | \n120 |       // Add structured error context if available\n121 |       if let errorContext=backupError.context {\n    |                                       `- error: value of type 'BackupError' has no member 'context'\n122 |         for (key, value) in errorContext {\n123 |           updatedContext=updatedContext\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:136:15: error: extra argument 'source' in call\n134 |       message ?? defaultMessage,\n135 |       context: updatedContext,\n136 |       source: \"BackupService\"\n    |               `- error: extra argument 'source' in call\n137 |     )\n138 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:169:19: error: extra argument 'source' in call\n167 |           \"Initialising backup operation: \\(operation)\",\n168 |           context: updatedContext,\n169 |           source: \"BackupService\"\n    |                   `- error: extra argument 'source' in call\n170 |         )\n171 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:184:19: error: extra argument 'source' in call\n182 |           \"Processing backup operation: \\(operation) - \\(phase) (\\(String(format: \"%.1f%%\", percentComplete * 100)))\",\n183 |           context: updatedContext,\n184 |           source: \"BackupService\"\n    |                   `- error: extra argument 'source' in call\n185 |         )\n186 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:194:19: error: extra argument 'source' in call\n192 |           \"Completed backup operation: \\(operation)\",\n193 |           context: updatedContext,\n194 |           source: \"BackupService\"\n    |                   `- error: extra argument 'source' in call\n195 |         )\n196 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:204:19: error: extra argument 'source' in call\n202 |           \"Cancelled backup operation: \\(operation)\",\n203 |           context: updatedContext,\n204 |           source: \"BackupService\"\n    |                   `- error: extra argument 'source' in call\n205 |         )\n206 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:216:19: error: extra argument 'source' in call\n214 |           \"Error during backup operation: \\(operation) - \\(error.localizedDescription)\",\n215 |           context: updatedContext,\n216 |           source: \"BackupService\"\n    |                   `- error: extra argument 'source' in call\n217 |         )\n218 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResticCommandFactory.swift:178:9: warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n176 |   ) throws -\u003e ResticCommand {\n177 |     // Determine base command from maintenance type\n178 |     var baseCommand=switch type {\n    |         `- warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n179 |       case .check:\n180 |         \"check\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:46:31: error: cannot find type 'BackupCommandFactory' in scope\n 44 | \n 45 |   /// Factory for creating backup commands\n 46 |   private let commandFactory: BackupCommandFactory\n    |                               `- error: cannot find type 'BackupCommandFactory' in scope\n 47 | \n 48 |   /// The backup logger\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:55:60: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 53 | \n 54 |   /// Active operation cancellation tokens\n 55 |   private var activeOperationsCancellationTokens: [String: BackupOperationCancellationTokenImpl]=[:]\n    |                                                            `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 56 | \n 57 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:104:24: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n102 |     operationID: String,\n103 |     type: BackupOperationType,\n104 |     cancellationToken: BackupOperationCancellationTokenImpl?=nil\n    |                        `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n105 |   ) {\n106 |     let uuid=UUID()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:519:45: error: cannot find type 'VerificationResult' in scope\n517 |     snapshotID: String,\n518 |     verifyOptions: VerifyOptions?=nil\n519 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n520 |     // Create a log context\n521 |     let logContext=LogContextDTO(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:42:14: error: type 'BackupServiceWithCommands' does not conform to protocol 'BackupServiceProtocol'\n 40 |  - Progress reporting through AsyncStream\n 41 |  */\n 42 | public actor BackupServiceWithCommands: BackupServiceProtocol {\n    |              |- error: type 'BackupServiceWithCommands' does not conform to protocol 'BackupServiceProtocol'\n    |              `- note: add stubs for conformance\n 43 |   // MARK: - Properties\n 44 | \n    :\n587 |    - Returns: True if cancellation was successful, false otherwise\n588 |    */\n589 |   public func cancelOperation(operationID: String) async -\u003e Bool {\n    |               `- note: candidate has non-matching type '(String) async -\u003e Bool'\n590 |     // Get the cancellation token\n591 |     if let token=activeOperationsCancellationTokens[operationID] {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Protocols/BackupServiceProtocol.swift:58:8: note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 56 |    * - Returns: A Result containing either the operation response or an error\n 57 |    */\n 58 |   func createBackup(\n    |        `- note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 59 |     sources: [URL],\n 60 |     excludePaths: [URL]?,\n    :\n 77 |    * - Returns: A Result containing either the operation response or an error\n 78 |    */\n 79 |   func restoreBackup(\n    |        `- note: protocol requires function 'restoreBackup(snapshotID:targetPath:includePaths:excludePaths:restoreOptions:)' with type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 80 |     snapshotID: String,\n 81 |     targetPath: URL,\n    :\n 99 |    * - Returns: A Result containing either the list of snapshots or an error\n100 |    */\n101 |   func listSnapshots(\n    |        `- note: protocol requires function 'listSnapshots(tags:before:after:listOptions:)' with type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n102 |     tags: [String]?,\n103 |     before: Date?,\n    :\n117 |    * - Returns: A Result containing either the operation response or an error\n118 |    */\n119 |   func deleteBackup(\n    |        `- note: protocol requires function 'deleteBackup(snapshotID:deleteOptions:)' with type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n120 |     snapshotID: String,\n121 |     deleteOptions: DeleteOptions?\n    :\n134 |    * - Returns: A Result containing either the operation response or an error\n135 |    */\n136 |   func performMaintenance(\n    |        `- note: protocol requires function 'performMaintenance(type:maintenanceOptions:)' with type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n137 |     type: MaintenanceType,\n138 |     maintenanceOptions: MaintenanceOptions?\n    :\n166 |    *            doesn't exist or cannot be cancelled\n167 |    */\n168 |   func cancelOperation(operationID: UUID) async -\u003e Bool\n    |        `- note: protocol requires function 'cancelOperation(operationID:)' with type '(UUID) async -\u003e Bool'\n169 | }\n170 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:78:20: error: cannot find 'BackupCommandFactory' in scope\n 76 | \n 77 |     // Create the backup command factory\n 78 |     commandFactory=BackupCommandFactory(\n    |                    `- error: cannot find 'BackupCommandFactory' in scope\n 79 |       resticService: resticService,\n 80 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:110:13: error: extra argument 'type' in call\n108 |       id: uuid,\n109 |       operationID: operationID,\n110 |       type: type\n    |             `- error: extra argument 'type' in call\n111 |     )\n112 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:109:20: error: cannot convert value of type 'String' to expected argument type 'BackupOperation'\n107 |     activeOperations[uuid]=BackupOperationToken(\n108 |       id: uuid,\n109 |       operationID: operationID,\n    |                    `- error: cannot convert value of type 'String' to expected argument type 'BackupOperation'\n110 |       type: type\n111 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:124:33: error: cannot call value of non-function type 'Dictionary\u003cUUID, BackupOperationToken\u003e.Element?' (aka 'Optional\u003c(key: UUID, value: BackupOperationToken)\u003e')\n122 |    */\n123 |   private func unregisterOperation(operationID: String) {\n124 |     if let key=activeOperations.first(where: { $0.value.operationID == operationID })?.key {\n    |                                 `- error: cannot call value of non-function type 'Dictionary\u003cUUID, BackupOperationToken\u003e.Element?' (aka 'Optional\u003c(key: UUID, value: BackupOperationToken)\u003e')\n125 |       activeOperations.removeValue(forKey: key)\n126 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:150:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n148 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e {\n149 |     // Create a log context\n150 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n151 |       metadata: LogMetadataDTOCollection()\n152 |         .withPublic(key: \"source\", value: \"BackupServicesActor.createBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:159:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n157 | \n158 |     // Create a cancellation token\n159 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n160 | \n161 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:164:14: error: cannot infer contextual base in reference to member 'createBackup'\n162 |     registerOperation(\n163 |       operationID: operationID,\n164 |       type: .createBackup,\n    |              `- error: cannot infer contextual base in reference to member 'createBackup'\n165 |       cancellationToken: cancellationToken\n166 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:169:26: error: cannot find 'BackupProgressReporterImpl' in scope\n167 | \n168 |     // Create the progress reporter\n169 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n170 | \n171 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:173:20: error: extra argument 'operationID' in call\n171 |     // Create the parameters\n172 |     let parameters=BackupCreateParameters(\n173 |       operationID: operationID,\n    |                    `- error: extra argument 'operationID' in call\n174 |       sources: sources,\n175 |       excludePaths: excludePaths,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:233:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n231 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e {\n232 |     // Create a log context\n233 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n234 |       metadata: LogMetadataDTOCollection()\n235 |         .withPublic(key: \"source\", value: \"BackupServicesActor.restoreBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:242:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n240 | \n241 |     // Create a cancellation token\n242 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n243 | \n244 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:247:14: error: cannot infer contextual base in reference to member 'restoreBackup'\n245 |     registerOperation(\n246 |       operationID: operationID,\n247 |       type: .restoreBackup,\n    |              `- error: cannot infer contextual base in reference to member 'restoreBackup'\n248 |       cancellationToken: cancellationToken\n249 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:252:26: error: cannot find 'BackupProgressReporterImpl' in scope\n250 | \n251 |     // Create the progress reporter\n252 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n253 | \n254 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:256:20: error: extra argument 'operationID' in call\n254 |     // Create the parameters\n255 |     let parameters=BackupRestoreParameters(\n256 |       operationID: operationID,\n    |                    `- error: extra argument 'operationID' in call\n257 |       snapshotID: snapshotID,\n258 |       targetPath: targetPath,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:313:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n311 |   ) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e {\n312 |     // Create a log context\n313 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n314 |       metadata: LogMetadataDTOCollection()\n315 |         .withPublic(key: \"source\", value: \"BackupServicesActor.listSnapshots\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:324:14: error: cannot infer contextual base in reference to member 'listSnapshots'\n322 |     registerOperation(\n323 |       operationID: operationID,\n324 |       type: .listSnapshots\n    |              `- error: cannot infer contextual base in reference to member 'listSnapshots'\n325 |     )\n326 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:369:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n367 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e {\n368 |     // Create a log context\n369 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n370 |       metadata: LogMetadataDTOCollection()\n371 |         .withPublic(key: \"source\", value: \"BackupServicesActor.deleteBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:378:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n376 | \n377 |     // Create a cancellation token\n378 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n379 | \n380 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:383:14: error: cannot infer contextual base in reference to member 'deleteBackup'\n381 |     registerOperation(\n382 |       operationID: operationID,\n383 |       type: .deleteBackup,\n    |              `- error: cannot infer contextual base in reference to member 'deleteBackup'\n384 |       cancellationToken: cancellationToken\n385 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:388:26: error: cannot find 'BackupProgressReporterImpl' in scope\n386 | \n387 |     // Create the progress reporter\n388 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n389 | \n390 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:391:42: error: extra arguments at positions #1, #3, #4, #5 in call\n389 | \n390 |     // Create the parameters\n391 |     let parameters=BackupDeleteParameters(\n    |                                          `- error: extra arguments at positions #1, #3, #4, #5 in call\n392 |       operationID: operationID,\n393 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:266:10: note: 'init(snapshotID:pruneAfterDelete:)' declared here\n264 |    *   - pruneAfterDelete: Whether to prune after deletion\n265 |    */\n266 |   public init(\n    |          `- note: 'init(snapshotID:pruneAfterDelete:)' declared here\n267 |     snapshotID: String,\n268 |     pruneAfterDelete: Bool=false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:393:19: error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n391 |     let parameters=BackupDeleteParameters(\n392 |       operationID: operationID,\n393 |       snapshotID: snapshotID,\n    |                   |- error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n    |                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'\n    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n394 |       tags: tags,\n395 |       host: host,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:446:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n444 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e {\n445 |     // Create a log context\n446 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n447 |       metadata: LogMetadataDTOCollection()\n448 |         .withPublic(key: \"source\", value: \"BackupServicesActor.performMaintenance\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:455:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n453 | \n454 |     // Create a cancellation token\n455 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n456 | \n457 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:460:14: error: cannot infer contextual base in reference to member 'maintenance'\n458 |     registerOperation(\n459 |       operationID: operationID,\n460 |       type: .maintenance,\n    |              `- error: cannot infer contextual base in reference to member 'maintenance'\n461 |       cancellationToken: cancellationToken\n462 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:465:26: error: cannot find 'BackupProgressReporterImpl' in scope\n463 | \n464 |     // Create the progress reporter\n465 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n466 | \n467 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:468:47: error: extra arguments at positions #1, #2 in call\n466 | \n467 |     // Create the parameters\n468 |     let parameters=BackupMaintenanceParameters(\n    |                                               `- error: extra arguments at positions #1, #2 in call\n469 |       operationID: operationID,\n470 |       type: type,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:309:10: note: 'init(maintenanceType:options:)' declared here\n307 |    *   - options: Optional maintenance options\n308 |    */\n309 |   public init(\n    |          `- note: 'init(maintenanceType:options:)' declared here\n310 |     maintenanceType: MaintenanceType,\n311 |     options: MaintenanceOptions?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:469:7: error: missing argument for parameter 'maintenanceType' in call\n467 |     // Create the parameters\n468 |     let parameters=BackupMaintenanceParameters(\n469 |       operationID: operationID,\n    |       `- error: missing argument for parameter 'maintenanceType' in call\n470 |       type: type,\n471 |       options: options\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:309:10: note: 'init(maintenanceType:options:)' declared here\n307 |    *   - options: Optional maintenance options\n308 |    */\n309 |   public init(\n    |          `- note: 'init(maintenanceType:options:)' declared here\n310 |     maintenanceType: MaintenanceType,\n311 |     options: MaintenanceOptions?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:521:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n519 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n520 |     // Create a log context\n521 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n522 |       metadata: LogMetadataDTOCollection()\n523 |         .withPublic(key: \"source\", value: \"BackupServicesActor.verifyBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:530:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n528 | \n529 |     // Create a cancellation token\n530 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n531 | \n532 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:535:14: error: cannot infer contextual base in reference to member 'verifyBackup'\n533 |     registerOperation(\n534 |       operationID: operationID,\n535 |       type: .verifyBackup,\n    |              `- error: cannot infer contextual base in reference to member 'verifyBackup'\n536 |       cancellationToken: cancellationToken\n537 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:540:26: error: cannot find 'BackupProgressReporterImpl' in scope\n538 | \n539 |     // Create the progress reporter\n540 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n541 | \n542 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:563:54: error: cannot find type 'VerificationResult' in scope\n561 | \n562 |     // Map the result to the expected response format\n563 |     let mappedResult: Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e\n    |                                                      `- error: cannot find type 'VerificationResult' in scope\n564 | \n565 |     switch result {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:596:22: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n594 | \n595 |       // Create log context\n596 |       let logContext=LogContextDTO(\n    |                      `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n597 |         metadata: LogMetadataDTOCollection()\n598 |           .withPublic(key: \"source\", value: \"BackupServicesActor.cancelOperation\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServiceWithCommands.swift:603:30: error: extraneous argument label 'message:' in call\n601 | \n602 |       // Log the cancellation\n603 |       await backupLogger.info(\n    |                              `- error: extraneous argument label 'message:' in call\n604 |         message: \"Operation \\(operationID) cancellation requested\",\n605 |         context: logContext\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:47:31: error: cannot find type 'BackupCommandFactory' in scope\n 45 | \n 46 |   /// Factory for creating backup commands\n 47 |   private let commandFactory: BackupCommandFactory\n    |                               `- error: cannot find type 'BackupCommandFactory' in scope\n 48 | \n 49 |   /// The Restic command factory\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:71:60: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 69 | \n 70 |   /// Active operation cancellation tokens\n 71 |   private var activeOperationsCancellationTokens: [String: BackupOperationCancellationTokenImpl]=[:]\n    |                                                            `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n 72 | \n 73 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:124:24: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n122 |     operationID: String,\n123 |     type: BackupOperationType,\n124 |     cancellationToken: BackupOperationCancellationTokenImpl?=nil\n    |                        `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n125 |   ) {\n126 |     let uuid=UUID()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:539:45: error: cannot find type 'VerificationResult' in scope\n537 |     snapshotID: String,\n538 |     verifyOptions: VerifyOptions?=nil\n539 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n540 |     // Create a log context\n541 |     let logContext=LogContextDTO(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:43:14: error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n 41 |  - Progress reporting through AsyncStream\n 42 |  */\n 43 | public actor BackupServicesActor: BackupServiceProtocol {\n    |              |- error: type 'BackupServicesActor' does not conform to protocol 'BackupServiceProtocol'\n    |              `- note: add stubs for conformance\n 44 |   // MARK: - Properties\n 45 | \n    :\n611 |    * - Returns: True if cancellation was successful, false otherwise\n612 |    */\n613 |   public func cancelOperation(operationID: String) async -\u003e Bool {\n    |               `- note: candidate has non-matching type '(String) async -\u003e Bool'\n614 |     // Get the cancellation token\n615 |     guard let token=activeOperationsCancellationTokens[operationID] else {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Protocols/BackupServiceProtocol.swift:58:8: note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 56 |    * - Returns: A Result containing either the operation response or an error\n 57 |    */\n 58 |   func createBackup(\n    |        `- note: protocol requires function 'createBackup(sources:excludePaths:tags:backupOptions:)' with type '([URL], [URL]?, [String]?, BackupOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e'\n 59 |     sources: [URL],\n 60 |     excludePaths: [URL]?,\n    :\n 77 |    * - Returns: A Result containing either the operation response or an error\n 78 |    */\n 79 |   func restoreBackup(\n    |        `- note: protocol requires function 'restoreBackup(snapshotID:targetPath:includePaths:excludePaths:restoreOptions:)' with type '(String, URL, [URL]?, [URL]?, RestoreOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e'\n 80 |     snapshotID: String,\n 81 |     targetPath: URL,\n    :\n 99 |    * - Returns: A Result containing either the list of snapshots or an error\n100 |    */\n101 |   func listSnapshots(\n    |        `- note: protocol requires function 'listSnapshots(tags:before:after:listOptions:)' with type '([String]?, Date?, Date?, ListOptions?) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e'\n102 |     tags: [String]?,\n103 |     before: Date?,\n    :\n117 |    * - Returns: A Result containing either the operation response or an error\n118 |    */\n119 |   func deleteBackup(\n    |        `- note: protocol requires function 'deleteBackup(snapshotID:deleteOptions:)' with type '(String, DeleteOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e'\n120 |     snapshotID: String,\n121 |     deleteOptions: DeleteOptions?\n    :\n134 |    * - Returns: A Result containing either the operation response or an error\n135 |    */\n136 |   func performMaintenance(\n    |        `- note: protocol requires function 'performMaintenance(type:maintenanceOptions:)' with type '(MaintenanceType, MaintenanceOptions?) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e'\n137 |     type: MaintenanceType,\n138 |     maintenanceOptions: MaintenanceOptions?\n    :\n166 |    *            doesn't exist or cannot be cancelled\n167 |    */\n168 |   func cancelOperation(operationID: UUID) async -\u003e Bool\n    |        `- note: protocol requires function 'cancelOperation(operationID:)' with type '(UUID) async -\u003e Bool'\n169 | }\n170 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:98:20: error: cannot find 'BackupCommandFactory' in scope\n 96 | \n 97 |     // Create the backup command factory\n 98 |     commandFactory=BackupCommandFactory(\n    |                    `- error: cannot find 'BackupCommandFactory' in scope\n 99 |       resticService: resticService,\n100 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:130:13: error: extra argument 'type' in call\n128 |       id: uuid,\n129 |       operationID: operationID,\n130 |       type: type\n    |             `- error: extra argument 'type' in call\n131 |     )\n132 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:129:20: error: cannot convert value of type 'String' to expected argument type 'BackupOperation'\n127 |     activeOperations[uuid]=BackupOperationToken(\n128 |       id: uuid,\n129 |       operationID: operationID,\n    |                    `- error: cannot convert value of type 'String' to expected argument type 'BackupOperation'\n130 |       type: type\n131 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:144:33: error: cannot call value of non-function type 'Dictionary\u003cUUID, BackupOperationToken\u003e.Element?' (aka 'Optional\u003c(key: UUID, value: BackupOperationToken)\u003e')\n142 |    */\n143 |   private func unregisterOperation(operationID: String) {\n144 |     if let key=activeOperations.first(where: { $0.value.operationID == operationID })?.key {\n    |                                 `- error: cannot call value of non-function type 'Dictionary\u003cUUID, BackupOperationToken\u003e.Element?' (aka 'Optional\u003c(key: UUID, value: BackupOperationToken)\u003e')\n145 |       activeOperations.removeValue(forKey: key)\n146 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:170:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n168 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cBackupResult\u003e, BackupOperationError\u003e {\n169 |     // Create a log context\n170 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n171 |       metadata: LogMetadataDTOCollection()\n172 |         .withPublic(key: \"source\", value: \"BackupServicesActor.createBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:179:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n177 | \n178 |     // Create a cancellation token\n179 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n180 | \n181 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:184:14: error: cannot infer contextual base in reference to member 'createBackup'\n182 |     registerOperation(\n183 |       operationID: operationID,\n184 |       type: .createBackup,\n    |              `- error: cannot infer contextual base in reference to member 'createBackup'\n185 |       cancellationToken: cancellationToken\n186 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:189:26: error: cannot find 'BackupProgressReporterImpl' in scope\n187 | \n188 |     // Create the progress reporter\n189 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n190 | \n191 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:193:20: error: extra argument 'operationID' in call\n191 |     // Create the parameters\n192 |     let parameters=BackupCreateParameters(\n193 |       operationID: operationID,\n    |                    `- error: extra argument 'operationID' in call\n194 |       sources: sources,\n195 |       excludePaths: excludePaths,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:253:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n251 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cRestoreResult\u003e, BackupOperationError\u003e {\n252 |     // Create a log context\n253 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n254 |       metadata: LogMetadataDTOCollection()\n255 |         .withPublic(key: \"source\", value: \"BackupServicesActor.restoreBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:262:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n260 | \n261 |     // Create a cancellation token\n262 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n263 | \n264 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:267:14: error: cannot infer contextual base in reference to member 'restoreBackup'\n265 |     registerOperation(\n266 |       operationID: operationID,\n267 |       type: .restoreBackup,\n    |              `- error: cannot infer contextual base in reference to member 'restoreBackup'\n268 |       cancellationToken: cancellationToken\n269 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:272:26: error: cannot find 'BackupProgressReporterImpl' in scope\n270 | \n271 |     // Create the progress reporter\n272 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n273 | \n274 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:276:20: error: extra argument 'operationID' in call\n274 |     // Create the parameters\n275 |     let parameters=BackupRestoreParameters(\n276 |       operationID: operationID,\n    |                    `- error: extra argument 'operationID' in call\n277 |       snapshotID: snapshotID,\n278 |       targetPath: targetPath,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:333:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n331 |   ) async -\u003e Result\u003c[BackupSnapshot], BackupOperationError\u003e {\n332 |     // Create a log context\n333 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n334 |       metadata: LogMetadataDTOCollection()\n335 |         .withPublic(key: \"source\", value: \"BackupServicesActor.listSnapshots\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:344:14: error: cannot infer contextual base in reference to member 'listSnapshots'\n342 |     registerOperation(\n343 |       operationID: operationID,\n344 |       type: .listSnapshots\n    |              `- error: cannot infer contextual base in reference to member 'listSnapshots'\n345 |     )\n346 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:389:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n387 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cBackupDeleteResult\u003e, BackupOperationError\u003e {\n388 |     // Create a log context\n389 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n390 |       metadata: LogMetadataDTOCollection()\n391 |         .withPublic(key: \"source\", value: \"BackupServicesActor.deleteBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:398:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n396 | \n397 |     // Create a cancellation token\n398 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n399 | \n400 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:403:14: error: cannot infer contextual base in reference to member 'deleteBackup'\n401 |     registerOperation(\n402 |       operationID: operationID,\n403 |       type: .deleteBackup,\n    |              `- error: cannot infer contextual base in reference to member 'deleteBackup'\n404 |       cancellationToken: cancellationToken\n405 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:408:26: error: cannot find 'BackupProgressReporterImpl' in scope\n406 | \n407 |     // Create the progress reporter\n408 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n409 | \n410 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:411:42: error: extra arguments at positions #1, #3, #4, #5 in call\n409 | \n410 |     // Create the parameters\n411 |     let parameters=BackupDeleteParameters(\n    |                                          `- error: extra arguments at positions #1, #3, #4, #5 in call\n412 |       operationID: operationID,\n413 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:266:10: note: 'init(snapshotID:pruneAfterDelete:)' declared here\n264 |    *   - pruneAfterDelete: Whether to prune after deletion\n265 |    */\n266 |   public init(\n    |          `- note: 'init(snapshotID:pruneAfterDelete:)' declared here\n267 |     snapshotID: String,\n268 |     pruneAfterDelete: Bool=false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:413:19: error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n411 |     let parameters=BackupDeleteParameters(\n412 |       operationID: operationID,\n413 |       snapshotID: snapshotID,\n    |                   |- error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n    |                   |- note: coalesce using '??' to provide a default when the optional value contains 'nil'\n    |                   `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n414 |       tags: tags,\n415 |       host: host,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:466:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n464 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cMaintenanceResult\u003e, BackupOperationError\u003e {\n465 |     // Create a log context\n466 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n467 |       metadata: LogMetadataDTOCollection()\n468 |         .withPublic(key: \"source\", value: \"BackupServicesActor.performMaintenance\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:475:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n473 | \n474 |     // Create a cancellation token\n475 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n476 | \n477 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:480:14: error: cannot infer contextual base in reference to member 'maintenance'\n478 |     registerOperation(\n479 |       operationID: operationID,\n480 |       type: .maintenance,\n    |              `- error: cannot infer contextual base in reference to member 'maintenance'\n481 |       cancellationToken: cancellationToken\n482 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:485:26: error: cannot find 'BackupProgressReporterImpl' in scope\n483 | \n484 |     // Create the progress reporter\n485 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n486 | \n487 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:488:47: error: extra arguments at positions #1, #2 in call\n486 | \n487 |     // Create the parameters\n488 |     let parameters=BackupMaintenanceParameters(\n    |                                               `- error: extra arguments at positions #1, #2 in call\n489 |       operationID: operationID,\n490 |       type: type,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:309:10: note: 'init(maintenanceType:options:)' declared here\n307 |    *   - options: Optional maintenance options\n308 |    */\n309 |   public init(\n    |          `- note: 'init(maintenanceType:options:)' declared here\n310 |     maintenanceType: MaintenanceType,\n311 |     options: MaintenanceOptions?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:489:7: error: missing argument for parameter 'maintenanceType' in call\n487 |     // Create the parameters\n488 |     let parameters=BackupMaintenanceParameters(\n489 |       operationID: operationID,\n    |       `- error: missing argument for parameter 'maintenanceType' in call\n490 |       type: type,\n491 |       options: options\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:309:10: note: 'init(maintenanceType:options:)' declared here\n307 |    *   - options: Optional maintenance options\n308 |    */\n309 |   public init(\n    |          `- note: 'init(maintenanceType:options:)' declared here\n310 |     maintenanceType: MaintenanceType,\n311 |     options: MaintenanceOptions?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:541:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n539 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n540 |     // Create a log context\n541 |     let logContext=LogContextDTO(\n    |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n542 |       metadata: LogMetadataDTOCollection()\n543 |         .withPublic(key: \"source\", value: \"BackupServicesActor.verifyBackup\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:550:27: error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n548 | \n549 |     // Create a cancellation token\n550 |     let cancellationToken=BackupOperationCancellationTokenImpl(operationID: operationID)\n    |                           `- error: cannot find 'BackupOperationCancellationTokenImpl' in scope\n551 | \n552 |     // Register the operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:555:14: error: cannot infer contextual base in reference to member 'verifyBackup'\n553 |     registerOperation(\n554 |       operationID: operationID,\n555 |       type: .verifyBackup,\n    |              `- error: cannot infer contextual base in reference to member 'verifyBackup'\n556 |       cancellationToken: cancellationToken\n557 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:560:26: error: cannot find 'BackupProgressReporterImpl' in scope\n558 | \n559 |     // Create the progress reporter\n560 |     let progressReporter=BackupProgressReporterImpl()\n    |                          `- error: cannot find 'BackupProgressReporterImpl' in scope\n561 | \n562 |     // Create the parameters\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:583:54: error: cannot find type 'VerificationResult' in scope\n581 | \n582 |     // Map the result to the expected response format\n583 |     let mappedResult: Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e\n    |                                                      `- error: cannot find type 'VerificationResult' in scope\n584 | \n585 |     switch result {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:623:28: error: extraneous argument label 'message:' in call\n621 | \n622 |     // Log the cancellation\n623 |     await backupLogger.info(\n    |                            `- error: extraneous argument label 'message:' in call\n624 |       message: \"Operation \\(operationID) cancellation requested\",\n625 |       context: LogContextDTO(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:625:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n623 |     await backupLogger.info(\n624 |       message: \"Operation \\(operationID) cancellation requested\",\n625 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n626 |         metadata: LogMetadataDTOCollection()\n627 |           .withPublic(key: \"source\", value: \"BackupServicesActor.cancelOperation\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:21:31: error: cannot find type 'BackupCommandFactory' in scope\n  19 | \n  20 |   /// Factory for creating backup commands\n  21 |   private let commandFactory: BackupCommandFactory\n     |                               `- error: cannot find type 'BackupCommandFactory' in scope\n  22 | \n  23 |   /// Parser for command results\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:46:21: error: cannot find type 'BackupCommandFactory' in scope\n  44 |     resticService: ResticServiceProtocol,\n  45 |     repositoryInfo: RepositoryInfo,\n  46 |     commandFactory: BackupCommandFactory,\n     |                     `- error: cannot find type 'BackupCommandFactory' in scope\n  47 |     resultParser: BackupResultParser,\n  48 |     snapshotService: SnapshotServiceProtocol,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:70:17: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n  68 |    */\n  69 |   public func createBackup(\n  70 |     parameters: BackupCreateParameters,\n     |                 `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n  71 |     progressReporter: BackupProgressReporter?,\n  72 |     cancellationToken _: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:21:15: note: found this candidate\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:72:26: error: cannot find type 'CancellationToken' in scope\n  70 |     parameters: BackupCreateParameters,\n  71 |     progressReporter: BackupProgressReporter?,\n  72 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n  73 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n  74 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:163:17: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 161 |    */\n 162 |   public func restoreBackup(\n 163 |     parameters: BackupRestoreParameters,\n     |                 `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 164 |     progressReporter: BackupProgressReporter?,\n 165 |     cancellationToken _: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:96:15: note: found this candidate\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:165:26: error: cannot find type 'CancellationToken' in scope\n 163 |     parameters: BackupRestoreParameters,\n 164 |     progressReporter: BackupProgressReporter?,\n 165 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 166 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgressInfo\u003e) {\n 167 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:311:17: error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 309 |    */\n 310 |   public func deleteBackup(\n 311 |     parameters: BackupDeleteParameters,\n     |                 `- error: 'BackupDeleteParameters' is ambiguous for type lookup in this context\n 312 |     cancellationToken _: CancellationToken?\n 313 |   ) async throws -\u003e DeleteResult {\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:147:15: note: found this candidate\n145 |  This struct encapsulates all parameters required for deleting snapshots.\n146 |  */\n147 | public struct BackupDeleteParameters {\n    |               `- note: found this candidate\n148 |   /// Unique identifier for this operation\n149 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:249:15: note: found this candidate\n247 |  * Parameters for deleting a backup.\n248 |  */\n249 | public struct BackupDeleteParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n250 |   /// ID of the snapshot to delete\n251 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:312:26: error: cannot find type 'CancellationToken' in scope\n 310 |   public func deleteBackup(\n 311 |     parameters: BackupDeleteParameters,\n 312 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n 313 |   ) async throws -\u003e DeleteResult {\n 314 |     // Create log context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1032:17: error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n1030 |    */\n1031 |   public func performMaintenance(\n1032 |     parameters: BackupMaintenanceParameters,\n     |                 `- error: 'BackupMaintenanceParameters' is ambiguous for type lookup in this context\n1033 |     progressReporter: BackupProgressReporter?,\n1034 |     cancellationToken _: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:193:15: note: found this candidate\n191 |  This struct encapsulates all parameters required for maintenance operations.\n192 |  */\n193 | public struct BackupMaintenanceParameters {\n    |               `- note: found this candidate\n194 |   /// Unique identifier for this operation\n195 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:292:15: note: found this candidate\n290 |  * Parameters for performing repository maintenance.\n291 |  */\n292 | public struct BackupMaintenanceParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n293 |   /// Type of maintenance to perform\n294 |   public let maintenanceType: MaintenanceType\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1034:26: error: cannot find type 'CancellationToken' in scope\n1032 |     parameters: BackupMaintenanceParameters,\n1033 |     progressReporter: BackupProgressReporter?,\n1034 |     cancellationToken _: CancellationToken?\n     |                          `- error: cannot find type 'CancellationToken' in scope\n1035 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupProgressInfo\u003e) {\n1036 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:96:16: error: cannot find 'LoggingServiceFactory' in scope\n  94 | \n  95 |     // Create log context\n  96 |     let logger=LoggingServiceFactory.shared.createLogger(domain: \"BackupServices\")\n     |                `- error: cannot find 'LoggingServiceFactory' in scope\n  97 |     let logContext=BackupLogContext(\n  98 |       source: \"BackupOperationsService.createBackup\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:121:61: error: cannot infer key path type from context; consider explicitly specifying a root type\n 119 |     if let excludePaths=parameters.excludePaths, !excludePaths.isEmpty {\n 120 |       command.arguments.append(\"--exclude\")\n 121 |       command.arguments.append(contentsOf: excludePaths.map(\\.path))\n     |                                                             `- error: cannot infer key path type from context; consider explicitly specifying a root type\n 122 |     }\n 123 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:189:16: error: cannot find 'LoggingServiceFactory' in scope\n 187 | \n 188 |     // Create log context\n 189 |     let logger=LoggingServiceFactory.shared.createLogger(domain: \"BackupServices\")\n     |                `- error: cannot find 'LoggingServiceFactory' in scope\n 190 |     let logContext=BackupLogContext(\n 191 |       source: \"BackupOperationsService.restoreBackup\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:221:61: error: cannot infer key path type from context; consider explicitly specifying a root type\n 219 |     if let excludePaths=parameters.excludePaths, !excludePaths.isEmpty {\n 220 |       command.arguments.append(\"--exclude\")\n 221 |       command.arguments.append(contentsOf: excludePaths.map(\\.path))\n     |                                                             `- error: cannot infer key path type from context; consider explicitly specifying a root type\n 222 |     }\n 223 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:315:16: error: cannot find 'LoggingServiceFactory' in scope\n 313 |   ) async throws -\u003e DeleteResult {\n 314 |     // Create log context\n 315 |     let logger=LoggingServiceFactory.shared.createLogger(domain: \"BackupServices\")\n     |                `- error: cannot find 'LoggingServiceFactory' in scope\n 316 |     let logContext=BackupLogContext(\n 317 |       source: \"BackupOperationsService.deleteBackup\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:465:18: error: cannot find 'LoggingServiceFactory' in scope\n 463 | \n 464 |       // Create a logger instance\n 465 |       let logger=LoggingServiceFactory.shared.createLogger(domain: \"BackupServices\")\n     |                  `- error: cannot find 'LoggingServiceFactory' in scope\n 466 | \n 467 |       // Create a log context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:506:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 504 |         percentComplete: 5.0,\n 505 |         itemsProcessed: 0,\n 506 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 507 |         bytesProcessed: 0,\n 508 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:508:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 506 |         totalItems: snapshot.stats.totalFiles,\n 507 |         bytesProcessed: 0,\n 508 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 509 |         estimatedTimeRemaining: nil,\n 510 |         details: \"Analysing snapshot structure\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:517:58: error: cannot convert value of type 'BackupVerificationResult' to specified type '(_, _)'\n 515 |       let verificationLevel: BackupInterfaces.VerificationLevel=verifyOptions?\n 516 |         .fullVerification == true ? .full : .standard\n 517 |       let (verificationResult, verificationProgress)=try await snapshotService.verifySnapshot(\n     |                                                          `- error: cannot convert value of type 'BackupVerificationResult' to specified type '(_, _)'\n 518 |         snapshotID: snapshot.id,\n 519 |         level: verificationLevel\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:517:94: error: incorrect argument label in call (have 'snapshotID:level:', expected 'snapshotID:fullVerification:')\n 515 |       let verificationLevel: BackupInterfaces.VerificationLevel=verifyOptions?\n 516 |         .fullVerification == true ? .full : .standard\n 517 |       let (verificationResult, verificationProgress)=try await snapshotService.verifySnapshot(\n     |                                                                                              `- error: incorrect argument label in call (have 'snapshotID:level:', expected 'snapshotID:fullVerification:')\n 518 |         snapshotID: snapshot.id,\n 519 |         level: verificationLevel\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:519:16: error: cannot convert value of type 'VerificationLevel' to expected argument type 'Bool'\n 517 |       let (verificationResult, verificationProgress)=try await snapshotService.verifySnapshot(\n 518 |         snapshotID: snapshot.id,\n 519 |         level: verificationLevel\n     |                `- error: cannot convert value of type 'VerificationLevel' to expected argument type 'Bool'\n 520 |       )\n 521 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:534:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 532 |         percentComplete: 10.0,\n 533 |         itemsProcessed: 0,\n 534 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 535 |         bytesProcessed: Int64(snapshot.stats.totalSize / 10),\n 536 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:535:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 533 |         itemsProcessed: 0,\n 534 |         totalItems: snapshot.stats.totalFiles,\n 535 |         bytesProcessed: Int64(snapshot.stats.totalSize / 10),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 536 |         totalBytes: Int64(snapshot.stats.totalSize),\n 537 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:536:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 534 |         totalItems: snapshot.stats.totalFiles,\n 535 |         bytesProcessed: Int64(snapshot.stats.totalSize / 10),\n 536 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 537 |         estimatedTimeRemaining: nil,\n 538 |         details: \"Verifying data integrity\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:546:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 544 |         phase: .verifying,\n 545 |         percentComplete: 50.0,\n 546 |         itemsProcessed: snapshot.stats.totalFiles / 2,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 547 |         totalItems: snapshot.stats.totalFiles,\n 548 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:547:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 545 |         percentComplete: 50.0,\n 546 |         itemsProcessed: snapshot.stats.totalFiles / 2,\n 547 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 548 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n 549 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:548:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 546 |         itemsProcessed: snapshot.stats.totalFiles / 2,\n 547 |         totalItems: snapshot.stats.totalFiles,\n 548 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 549 |         totalBytes: Int64(snapshot.stats.totalSize),\n 550 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:549:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 547 |         totalItems: snapshot.stats.totalFiles,\n 548 |         bytesProcessed: Int64(snapshot.stats.totalSize / 2),\n 549 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 550 |         estimatedTimeRemaining: nil,\n 551 |         details: \"Verifying data integrity\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:559:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 557 |         phase: .verifying,\n 558 |         percentComplete: 90.0,\n 559 |         itemsProcessed: snapshot.stats.totalFiles,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 560 |         totalItems: snapshot.stats.totalFiles,\n 561 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:560:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 558 |         percentComplete: 90.0,\n 559 |         itemsProcessed: snapshot.stats.totalFiles,\n 560 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 561 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n 562 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:561:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 559 |         itemsProcessed: snapshot.stats.totalFiles,\n 560 |         totalItems: snapshot.stats.totalFiles,\n 561 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 562 |         totalBytes: Int64(snapshot.stats.totalSize),\n 563 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:562:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 560 |         totalItems: snapshot.stats.totalFiles,\n 561 |         bytesProcessed: Int64(snapshot.stats.totalSize * 9 / 10),\n 562 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 563 |         estimatedTimeRemaining: nil,\n 564 |         details: \"Verifying data integrity\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:572:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 570 |         phase: .finalising,\n 571 |         percentComplete: 95.0,\n 572 |         itemsProcessed: snapshot.stats.totalFiles,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 573 |         totalItems: snapshot.stats.totalFiles,\n 574 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:573:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 571 |         percentComplete: 95.0,\n 572 |         itemsProcessed: snapshot.stats.totalFiles,\n 573 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 574 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 575 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:574:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 572 |         itemsProcessed: snapshot.stats.totalFiles,\n 573 |         totalItems: snapshot.stats.totalFiles,\n 574 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 575 |         totalBytes: Int64(snapshot.stats.totalSize),\n 576 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:575:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 573 |         totalItems: snapshot.stats.totalFiles,\n 574 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 575 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 576 |         estimatedTimeRemaining: nil,\n 577 |         details: \"Finalising verification\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:597:34: error: value of type 'BackupSnapshot' has no member 'stats'\n 595 |         phase: .completed,\n 596 |         percentComplete: 100.0,\n 597 |         itemsProcessed: snapshot.stats.totalFiles,\n     |                                  `- error: value of type 'BackupSnapshot' has no member 'stats'\n 598 |         totalItems: snapshot.stats.totalFiles,\n 599 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:598:30: error: value of type 'BackupSnapshot' has no member 'stats'\n 596 |         percentComplete: 100.0,\n 597 |         itemsProcessed: snapshot.stats.totalFiles,\n 598 |         totalItems: snapshot.stats.totalFiles,\n     |                              `- error: value of type 'BackupSnapshot' has no member 'stats'\n 599 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 600 |         totalBytes: Int64(snapshot.stats.totalSize),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:599:40: error: value of type 'BackupSnapshot' has no member 'stats'\n 597 |         itemsProcessed: snapshot.stats.totalFiles,\n 598 |         totalItems: snapshot.stats.totalFiles,\n 599 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n     |                                        `- error: value of type 'BackupSnapshot' has no member 'stats'\n 600 |         totalBytes: Int64(snapshot.stats.totalSize),\n 601 |         estimatedTimeRemaining: nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:600:36: error: value of type 'BackupSnapshot' has no member 'stats'\n 598 |         totalItems: snapshot.stats.totalFiles,\n 599 |         bytesProcessed: Int64(snapshot.stats.totalSize),\n 600 |         totalBytes: Int64(snapshot.stats.totalSize),\n     |                                    `- error: value of type 'BackupSnapshot' has no member 'stats'\n 601 |         estimatedTimeRemaining: nil,\n 602 |         details: \"Verification completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:642:11: error: cannot find 'logger' in scope\n 640 | \n 641 |     // Log operation start\n 642 |     await logger.info(\"Starting snapshot comparison\", context: context)\n     |           `- error: cannot find 'logger' in scope\n 643 | \n 644 |     // Report initial progress\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:646:15: error: type 'BackupProgressInfo.Phase' has no member 'preparing'\n 644 |     // Report initial progress\n 645 |     await reportProgress(BackupProgressInfo(\n 646 |       phase: .preparing,\n     |               `- error: type 'BackupProgressInfo.Phase' has no member 'preparing'\n 647 |       percentComplete: 0.0,\n 648 |       itemsProcessed: 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:665:27: error: enum case 'operationCancelled' has no associated values\n 663 |       // Check if the operation was cancelled\n 664 |       if let token=cancellationToken, await token.isCancelled {\n 665 |         throw BackupError.operationCancelled(\n     |                           `- error: enum case 'operationCancelled' has no associated values\n 666 |           details: \"Snapshot comparison cancelled\"\n 667 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:677:27: error: enum case 'operationCancelled' has no associated values\n 675 |       // Check if the operation was cancelled\n 676 |       if let token=cancellationToken, await token.isCancelled {\n 677 |         throw BackupError.operationCancelled(\n     |                           `- error: enum case 'operationCancelled' has no associated values\n 678 |           details: \"Snapshot comparison cancelled\"\n 679 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:698:18: error: 'nil' requires a contextual type\n 696 |         firstSnapshotID: parameters.firstSnapshotID,\n 697 |         secondSnapshotID: parameters.secondSnapshotID,\n 698 |         options: nil\n     |                  `- error: 'nil' requires a contextual type\n 699 |       )\n 700 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:706:27: error: enum case 'operationCancelled' has no associated values\n 704 |       // Check if the operation was cancelled\n 705 |       if let token=cancellationToken, await token.isCancelled {\n 706 |         throw BackupError.operationCancelled(\n     |                           `- error: enum case 'operationCancelled' has no associated values\n 707 |           details: \"Snapshot comparison cancelled\"\n 708 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:724:57: error: missing argument label 'output:' in call\n 722 | \n 723 |       // Parse the diff result\n 724 |       let comparisonDTO=try resultParser.parseDiffResult(\n     |                                                         `- error: missing argument label 'output:' in call\n 725 |         diffOutput,\n 726 |         firstSnapshotID: parameters.firstSnapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:731:31: error: value of type 'BackupResultParser' has no member 'createSnapshotComparisonResult'\n 729 | \n 730 |       // Convert to interface type\n 731 |       let result=resultParser.createSnapshotComparisonResult(\n     |                               `- error: value of type 'BackupResultParser' has no member 'createSnapshotComparisonResult'\n 732 |         from: comparisonDTO,\n 733 |         firstSnapshotID: parameters.firstSnapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:749:18: error: extra argument 'result' in call\n 747 |         estimatedTimeRemaining: nil,\n 748 |         details: \"Comparison complete\",\n 749 |         result: .success\n     |                  `- error: extra argument 'result' in call\n 750 |       ), reporter: progressReporter)\n 751 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:749:18: error: cannot infer contextual base in reference to member 'success'\n 747 |         estimatedTimeRemaining: nil,\n 748 |         details: \"Comparison complete\",\n 749 |         result: .success\n     |                  `- error: cannot infer contextual base in reference to member 'success'\n 750 |       ), reporter: progressReporter)\n 751 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:753:13: error: cannot find 'logger' in scope\n 751 | \n 752 |       // Log success\n 753 |       await logger.info(\n     |             `- error: cannot find 'logger' in scope\n 754 |         \"Snapshot comparison completed successfully: \" +\n 755 |           \"\\(comparisonDTO.addedCount) added, \" +\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:765:13: error: cannot find 'logger' in scope\n 763 |       // Map error and log failure\n 764 |       let backupError=errorMapper.mapError(error)\n 765 |       await logger.error(\n     |             `- error: cannot find 'logger' in scope\n 766 |         \"Snapshot comparison failed: \\(backupError.localizedDescription)\",\n 767 |         context: context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:780:18: error: extra argument 'result' in call\n 778 |         estimatedTimeRemaining: nil,\n 779 |         details: \"Comparison failed: \\(backupError.localizedDescription)\",\n 780 |         result: .failure(backupError)\n     |                  `- error: extra argument 'result' in call\n 781 |       ), reporter: progressReporter)\n 782 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:780:18: error: cannot infer contextual base in reference to member 'failure'\n 778 |         estimatedTimeRemaining: nil,\n 779 |         details: \"Comparison failed: \\(backupError.localizedDescription)\",\n 780 |         result: .failure(backupError)\n     |                  `- error: cannot infer contextual base in reference to member 'failure'\n 781 |       ), reporter: progressReporter)\n 782 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:842:45: error: missing argument for parameter 'for' in call\n 840 |     // Only report if a reporter was provided\n 841 |     if let reporter {\n 842 |       await reporter.reportProgress(progress)\n     |                                             `- error: missing argument for parameter 'for' in call\n 843 |     }\n 844 |   }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:12:8: note: 'reportProgress(_:for:)' declared here\n 10 |   ///   - progressInfo: The progress information\n 11 |   ///   - operation: The operation being performed\n 12 |   func reportProgress(_ progressInfo: BackupProgressInfo, for operation: BackupOperation) async\n    |        `- note: 'reportProgress(_:for:)' declared here\n 13 | \n 14 |   /// Reports that an operation has been cancelled\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:958:30: error: value of type 'DeleteResponse' has no member 'errors'\n 956 |       return DeleteResult(\n 957 |         snapshotID: snapshotID,\n 958 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                              `- error: value of type 'DeleteResponse' has no member 'errors'\n 959 |         filesDeleted: response.filesDeleted ?? 0,\n 960 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:958:57: error: value of type 'DeleteResponse' has no member 'errors'\n 956 |       return DeleteResult(\n 957 |         snapshotID: snapshotID,\n 958 |         successful: response.errors == nil || (response.errors?.isEmpty ?? true),\n     |                                                         `- error: value of type 'DeleteResponse' has no member 'errors'\n 959 |         filesDeleted: response.filesDeleted ?? 0,\n 960 |         sizeDeleted: response.sizeDeleted ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:991:11: error: cannot find 'logger' in scope\n 989 |   ) async throws -\u003e BackupSnapshot {\n 990 |     // Log the request\n 991 |     await logger.debug(\"Retrieving snapshot details\", context: context)\n     |           `- error: cannot find 'logger' in scope\n 992 | \n 993 |     // Create the command to get snapshot details\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1003:35: error: value of type 'BackupResultParser' has no member 'parseSnapshotInfo'\n1001 | \n1002 |     // Parse the output\n1003 |     let snapshot=try resultParser.parseSnapshotInfo(output)\n     |                                   `- error: value of type 'BackupResultParser' has no member 'parseSnapshotInfo'\n1004 | \n1005 |     // Check if the snapshot was found\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1007:41: error: incorrect argument label in call (have 'details:', expected 'id:')\n1005 |     // Check if the snapshot was found\n1006 |     guard let snapshot else {\n1007 |       throw BackupError.snapshotNotFound(\n     |                                         `- error: incorrect argument label in call (have 'details:', expected 'id:')\n1008 |         details: \"Snapshot with ID \\(snapshotID) not found\"\n1009 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1013:11: error: cannot find 'logger' in scope\n1011 | \n1012 |     // Log success\n1013 |     await logger.debug(\n     |           `- error: cannot find 'logger' in scope\n1014 |       \"Retrieved snapshot details successfully\",\n1015 |       context: context\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:1053:16: error: cannot find 'LoggingServiceFactory' in scope\n1051 | \n1052 |     // Create log context\n1053 |     let logger=LoggingServiceFactory.shared.createLogger(domain: \"BackupServices\")\n     |                `- error: cannot find 'LoggingServiceFactory' in scope\n1054 |     let logContext=BackupLogContext(\n1055 |       source: \"BackupOperationsService.performMaintenance\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:23:31: error: cannot find type 'ResticCommandFactory' in scope\n 21 | \n 22 |   /// Factory for creating Restic commands\n 23 |   private let commandFactory: ResticCommandFactory\n    |                               `- error: cannot find type 'ResticCommandFactory' in scope\n 24 | \n 25 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:50:20: error: cannot find 'ResticCommandFactory' in scope\n 48 |     self.operationExecutor=operationExecutor\n 49 |     self.operationsService=operationsService\n 50 |     commandFactory=ResticCommandFactory()\n    |                    `- error: cannot find 'ResticCommandFactory' in scope\n 51 |     resultParser=SnapshotResultParser()\n 52 |   }\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:22:31: error: cannot find type 'ResticCommandFactory' in scope\n 20 | \n 21 |   /// Factory for creating Restic commands\n 22 |   private let commandFactory: ResticCommandFactory\n    |                               `- error: cannot find type 'ResticCommandFactory' in scope\n 23 | \n 24 |   /// Parser for Restic command results\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:43:20: error: cannot find 'ResticCommandFactory' in scope\n 41 |     self.resticService=resticService\n 42 |     self.operationExecutor=operationExecutor\n 43 |     commandFactory=ResticCommandFactory()\n    |                    `- error: cannot find 'ResticCommandFactory' in scope\n 44 |     resultParser=SnapshotResultParser()\n 45 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:65:15: error: extra argument 'source' in call\n 63 |     let logContext=SnapshotLogContext(\n 64 |       operation: \"listSnapshots\",\n 65 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n 66 |     )\n 67 |     .withPublic(key: \"operationType\", value: \"listSnapshots\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:64:33: error: missing argument for parameter 'snapshotID' in call\n 62 |     // Create a log context for privacy-aware logging\n 63 |     let logContext=SnapshotLogContext(\n 64 |       operation: \"listSnapshots\",\n    |                                 `- error: missing argument for parameter 'snapshotID' in call\n 65 |       source: \"SnapshotOperationsService\"\n 66 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:67:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n 65 |       source: \"SnapshotOperationsService\"\n 66 |     )\n 67 |     .withPublic(key: \"operationType\", value: \"listSnapshots\")\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n 68 | \n 69 |     if let repositoryID=parameters.repositoryID {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:85:19: error: extra argument 'logContext' in call\n 83 |       progressReporter: progressReporter,\n 84 |       cancellationToken: cancellationToken,\n 85 |       logContext: logContext,\n    |                   `- error: extra argument 'logContext' in call\n 86 |       operation: { params, reporter, _ in\n 87 |         // Create command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:570:38: error: cannot convert value of type 'VerificationResultDTO' to closure result type 'BackupVerificationResultDTO'\n568 | \n569 |         // Parse results\n570 |         return try self.resultParser.parseVerificationResult(\n    |                                      `- error: cannot convert value of type 'VerificationResultDTO' to closure result type 'BackupVerificationResultDTO'\n571 |           repositoryCheck: repositoryCheckOutput,\n572 |           dataIntegrityCheck: dataIntegrityOutput\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:572:31: error: extra argument 'dataIntegrityCheck' in call\n570 |         return try self.resultParser.parseVerificationResult(\n571 |           repositoryCheck: repositoryCheckOutput,\n572 |           dataIntegrityCheck: dataIntegrityOutput\n    |                               `- error: extra argument 'dataIntegrityCheck' in call\n573 |         )\n574 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:212:19: error: extra argument 'source' in call\n210 |         SnapshotLogContext(\n211 |           operation: \"getSnapshotDetails\",\n212 |           source: \"SnapshotOperationsService\"\n    |                   `- error: extra argument 'source' in call\n213 |         )\n214 |         .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:211:42: error: missing argument for parameter 'snapshotID' in call\n209 |       func createLogContext() -\u003e SnapshotLogContext {\n210 |         SnapshotLogContext(\n211 |           operation: \"getSnapshotDetails\",\n    |                                          `- error: missing argument for parameter 'snapshotID' in call\n212 |           source: \"SnapshotOperationsService\"\n213 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:214:10: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n212 |           source: \"SnapshotOperationsService\"\n213 |         )\n214 |         .withPublic(key: \"snapshotID\", value: snapshotID)\n    |          `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n215 |         .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n216 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:360:19: error: extra argument 'source' in call\n358 |         SnapshotLogContext(\n359 |           operation: operationType.rawValue,\n360 |           source: \"SnapshotOperationsService\"\n    |                   `- error: extra argument 'source' in call\n361 |         )\n362 |         .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:359:44: error: missing argument for parameter 'snapshotID' in call\n357 |       func createLogContext() -\u003e SnapshotLogContext {\n358 |         SnapshotLogContext(\n359 |           operation: operationType.rawValue,\n    |                                            `- error: missing argument for parameter 'snapshotID' in call\n360 |           source: \"SnapshotOperationsService\"\n361 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:362:10: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n360 |           source: \"SnapshotOperationsService\"\n361 |         )\n362 |         .withPublic(key: \"snapshotID\", value: snapshotID)\n    |          `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n363 |         .withPublic(key: \"pattern\", value: pattern)\n364 |         .withPublic(key: \"caseSensitive\", value: String(caseSensitive))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:22:31: error: cannot find type 'ResticCommandFactory' in scope\n 20 | \n 21 |   /// Factory for creating Restic commands\n 22 |   private let commandFactory: ResticCommandFactory\n    |                               `- error: cannot find type 'ResticCommandFactory' in scope\n 23 | \n 24 |   /// Executor for operations\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:40:20: error: cannot find 'ResticCommandFactory' in scope\n 38 |     self.resticService=resticService\n 39 |     self.operationExecutor=operationExecutor\n 40 |     commandFactory=ResticCommandFactory()\n    |                    `- error: cannot find 'ResticCommandFactory' in scope\n 41 |   }\n 42 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:116:44: error: argument type 'any ResticCommand' does not conform to expected type 'ResticCommand'\n114 |     // Create a task for executing the command\n115 |     let executionTask=Task {\n116 |       try await self.resticService.execute(command)\n    |                                            `- error: argument type 'any ResticCommand' does not conform to expected type 'ResticCommand'\n117 |     }\n118 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:168:22: warning: no 'async' operations occur within 'await' expression\n166 |     do {\n167 |       // Wait for execution to complete\n168 |       let result=try await executionTask.value\n    |                      `- warning: no 'async' operations occur within 'await' expression\n169 | \n170 |       // Cancel progress updates\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:168:18: warning: no calls to throwing functions occur within 'try' expression\n166 |     do {\n167 |       // Wait for execution to complete\n168 |       let result=try await executionTask.value\n    |                  `- warning: no calls to throwing functions occur within 'try' expression\n169 | \n170 |       // Cancel progress updates\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:242:12: error: type 'EstimateSizeParameters' does not conform to protocol 'SnapshotOperationParameters'\n240 |     let resultParser=SnapshotResultParser()\n241 | \n242 |     struct EstimateSizeParameters: SnapshotOperationParameters {\n    |            |- error: type 'EstimateSizeParameters' does not conform to protocol 'SnapshotOperationParameters'\n    |            `- note: add stubs for conformance\n243 |       let snapshotID: String\n244 |       let operationType: SnapshotOperationType = .get\n    :\n250 |       }\n251 | \n252 |       func createLogContext() -\u003e SnapshotLogContextAdapter {\n    |            `- note: candidate has non-matching type '() -\u003e SnapshotLogContextAdapter'\n253 |         SnapshotLogContextAdapter(\n254 |           snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:44:8: note: protocol requires function 'createLogContext()' with type '() -\u003e SnapshotLogContext'\n 42 |   /// Creates a log context for the operation\n 43 |   /// - Returns: A SnapshotLogContext for logging\n 44 |   func createLogContext() -\u003e SnapshotLogContext\n    |        `- note: protocol requires function 'createLogContext()' with type '() -\u003e SnapshotLogContext'\n 45 | }\n 46 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:268:13: warning: variable 'args' was never mutated; consider changing to 'let' constant\n266 |       operation: { _, reporter, _ in\n267 |         // Create a command to get snapshot details with statistics\n268 |         var args=[\"snapshots\", snapshotID, \"--json\", \"--stats\"]\n    |             `- warning: variable 'args' was never mutated; consider changing to 'let' constant\n269 | \n270 |         let command=ResticCommandImpl(arguments: args)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:19:23: error: cannot find type 'LoggingProtocol' in scope\n 17 | \n 18 |   /// Logger for snapshot operations\n 19 |   private let logger: LoggingProtocol\n    |                       `- error: cannot find type 'LoggingProtocol' in scope\n 20 | \n 21 |   /**\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:32:13: error: cannot find type 'LoggingProtocol' in scope\n 30 |     resticService: ResticServiceProtocol,\n 31 |     resultParser: SnapshotResultParser,\n 32 |     logger: LoggingProtocol\n    |             `- error: cannot find type 'LoggingProtocol' in scope\n 33 |   ) {\n 34 |     self.resticService=resticService\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:55:15: error: extra argument 'source' in call\n 53 |     let context=SnapshotLogContext(\n 54 |       operation: \"getSnapshotDetails\",\n 55 |       source: \"SnapshotServiceImpl\"\n    |               `- error: extra argument 'source' in call\n 56 |     )\n 57 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:54:38: error: missing argument for parameter 'snapshotID' in call\n 52 |     // Create a log context\n 53 |     let context=SnapshotLogContext(\n 54 |       operation: \"getSnapshotDetails\",\n    |                                      `- error: missing argument for parameter 'snapshotID' in call\n 55 |       source: \"SnapshotServiceImpl\"\n 56 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:57:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n 55 |       source: \"SnapshotServiceImpl\"\n 56 |     )\n 57 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n 58 |     .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n 59 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:109:15: error: extra argument 'source' in call\n107 |     let context=SnapshotLogContext(\n108 |       operation: \"getLatestSnapshot\",\n109 |       source: \"SnapshotServiceImpl\"\n    |               `- error: extra argument 'source' in call\n110 |     )\n111 |     .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:108:37: error: missing argument for parameter 'snapshotID' in call\n106 |     // Create a log context\n107 |     let context=SnapshotLogContext(\n108 |       operation: \"getLatestSnapshot\",\n    |                                     `- error: missing argument for parameter 'snapshotID' in call\n109 |       source: \"SnapshotServiceImpl\"\n110 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:111:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n109 |       source: \"SnapshotServiceImpl\"\n110 |     )\n111 |     .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n112 | \n113 |     await logger.info(\"Getting latest snapshot\", context: context)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:162:15: error: extra argument 'source' in call\n160 |     let context=SnapshotLogContext(\n161 |       operation: \"listSnapshots\",\n162 |       source: \"SnapshotServiceImpl\"\n    |               `- error: extra argument 'source' in call\n163 |     )\n164 |     .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:161:33: error: missing argument for parameter 'snapshotID' in call\n159 |     // Create a log context\n160 |     let context=SnapshotLogContext(\n161 |       operation: \"listSnapshots\",\n    |                                 `- error: missing argument for parameter 'snapshotID' in call\n162 |       source: \"SnapshotServiceImpl\"\n163 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:164:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n162 |       source: \"SnapshotServiceImpl\"\n163 |     )\n164 |     .withPublic(key: \"includeFileStatistics\", value: String(includeFileStatistics))\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n165 | \n166 |     await logger.info(\"Listing snapshots\", context: context)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:181:38: error: value of type 'SnapshotResultParser' has no member 'parseSnapshotList'\n179 | \n180 |       // Parse the result\n181 |       let snapshots=try resultParser.parseSnapshotList(output)\n    |                                      `- error: value of type 'SnapshotResultParser' has no member 'parseSnapshotList'\n182 | \n183 |       await logger.info(\"Retrieved \\(snapshots.count) snapshots\", context: context)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:212:15: error: extra argument 'source' in call\n210 |     let context=SnapshotLogContext(\n211 |       operation: \"compareSnapshots\",\n212 |       source: \"SnapshotServiceImpl\"\n    |               `- error: extra argument 'source' in call\n213 |     )\n214 |     .withPublic(key: \"firstSnapshotID\", value: firstSnapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:211:36: error: missing argument for parameter 'snapshotID' in call\n209 |     // Create a log context\n210 |     let context=SnapshotLogContext(\n211 |       operation: \"compareSnapshots\",\n    |                                    `- error: missing argument for parameter 'snapshotID' in call\n212 |       source: \"SnapshotServiceImpl\"\n213 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:214:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n212 |       source: \"SnapshotServiceImpl\"\n213 |     )\n214 |     .withPublic(key: \"firstSnapshotID\", value: firstSnapshotID)\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n215 |     .withPublic(key: \"secondSnapshotID\", value: secondSnapshotID)\n216 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:267:15: error: extra argument 'source' in call\n265 |     let context=SnapshotLogContext(\n266 |       operation: \"verifySnapshot\",\n267 |       source: \"SnapshotServiceImpl\"\n    |               `- error: extra argument 'source' in call\n268 |     )\n269 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:266:34: error: missing argument for parameter 'snapshotID' in call\n264 |     // Create a log context\n265 |     let context=SnapshotLogContext(\n266 |       operation: \"verifySnapshot\",\n    |                                  `- error: missing argument for parameter 'snapshotID' in call\n267 |       source: \"SnapshotServiceImpl\"\n268 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotServiceImpl.swift:269:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n267 |       source: \"SnapshotServiceImpl\"\n268 |     )\n269 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n270 |     .withPublic(key: \"fullVerification\", value: String(fullVerification))\n271 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupCancellationHandler.swift:7:58: error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 5 |  * Implementation of the cancellation handler for backup operations.\n 6 |  */\n 7 | public actor BackupCancellationHandler: BackupInterfaces.CancellationHandlerProtocol {\n   |                                                          `- error: no type named 'CancellationHandlerProtocol' in module 'BackupInterfaces'\n 8 |   /// Map of operation IDs to cancellation tokens\n 9 |   private var tokens: [UUID: BackupCancellationToken]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupErrorMapper.swift:43:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n41 | \n42 |     // Handle NSError types\n43 |     if let nsError=error as? NSError {\n   |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n44 |       switch nsError.domain {\n45 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:17:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 15 | \n 16 |   /// Handler for operation cancellation\n 17 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 18 | \n 19 |   /// Collector for metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:40:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 38 |   public init(\n 39 |     logger: any LoggingProtocol,\n 40 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 41 |     metricsCollector: BackupMetricsCollector,\n 42 |     errorLogContextMapper: ErrorLogContextMapper,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:75:55: error: value of type 'P' has no member 'operationID'\n 73 |     )\n 74 |     .withOperation(parameters.operationType)\n 75 |     .withPublic(key: \"operationID\", value: parameters.operationID.uuidString)\n    |                                                       `- error: value of type 'P' has no member 'operationID'\n 76 | \n 77 |     // Log operation start\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:85:28: warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n 61 |    * - Throws: BackupOperationError if the operation fails\n 62 |    */\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n    |                                                     `- note: consider making generic parameter 'R' conform to the 'Sendable' protocol\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, BackupCancellationToken?) async throws -\u003e R,\n    :\n 83 |     do {\n 84 |       // Execute the operation\n 85 |       let result=try await operation(parameters, progressReporter, cancellationToken)\n    |                            `- warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n 86 | \n 87 |       // Log operation completion\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:16:35: error: cannot find type 'CancellationHandlerProtocol' in scope\n 14 |  * - Support for both task-based and token-based cancellation\n 15 |  */\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n    |                                   `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cany Sendable, Error\u003e]=[:]\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:174:21: error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n172 |  * Implementation of BackupCancellationToken.\n173 |  */\n174 | private final class BackupCancellationTokenImpl: BackupCancellationToken, @unchecked Sendable {\n    |                     |- error: type 'BackupCancellationTokenImpl' does not conform to protocol 'BackupCancellationToken'\n    |                     `- note: add stubs for conformance\n175 |   /// The unique identifier for this token\n176 |   public let id: String\n\npackages/UmbraImplementations/Sources/BackupServices/Protocols/BackupCancellationToken.swift:25:8: note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n23 |    * - Parameter callback: The callback to register\n24 |    */\n25 |   func registerCancellationCallback(_ callback: @escaping @Sendable () -\u003e Void) async\n   |        `- note: protocol requires function 'registerCancellationCallback' with type '(@escaping @Sendable () -\u003e Void) async -\u003e ()'\n26 | }\n27 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:216:20: warning: result of call to 'cancelOperation(id:)' is unused\n214 | \n215 |     // Notify the handler\n216 |     await handler?.cancelOperation(id: id)\n    |                    `- warning: result of call to 'cancelOperation(id:)' is unused\n217 |   }\n218 | }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorLogContextMapper.swift:39:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n37 | \n38 |     // Add error code if available\n39 |     if let nsError=error as? NSError {\n   |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n40 |       return errorContext\n41 |         .withPublic(key: \"errorCode\", value: String(nsError.code))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorMapper.swift:58:17: error: type '_ErrorCodeProtocol' has no member 'other'\n 56 |         )\n 57 | \n 58 |       case let .other(message):\n    |                 `- error: type '_ErrorCodeProtocol' has no member 'other'\n 59 |         BackupError.unknownError(\n 60 |           details: message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:27:36: error: cannot find type 'CancellationHandlerProtocol' in scope\n 25 | \n 26 |   /// Handler for operation cancellation\n 27 |   private let cancellationHandler: CancellationHandlerProtocol\n    |                                    `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 28 | \n 29 |   /// Collector for operation metrics\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:52:26: error: cannot find type 'CancellationHandlerProtocol' in scope\n 50 |   public init(\n 51 |     resticService: ResticServiceProtocol,\n 52 |     cancellationHandler: CancellationHandlerProtocol,\n    |                          `- error: cannot find type 'CancellationHandlerProtocol' in scope\n 53 |     metricsCollector: BackupMetricsCollector,\n 54 |     logger: any LoggingProtocol,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:90:15: error: extra argument 'source' in call\n 88 |     let logContext=SnapshotLogContext(\n 89 |       operation: parameters.operationType.rawValue,\n 90 |       source: \"SnapshotOperationExecutor\"\n    |               `- error: extra argument 'source' in call\n 91 |     )\n 92 |     .withPublic(key: \"operation_type\", value: parameters.operationType.rawValue)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:89:51: error: missing argument for parameter 'snapshotID' in call\n 87 |     // Create log context for privacy-aware logging\n 88 |     let logContext=SnapshotLogContext(\n 89 |       operation: parameters.operationType.rawValue,\n    |                                                   `- error: missing argument for parameter 'snapshotID' in call\n 90 |       source: \"SnapshotOperationExecutor\"\n 91 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:92:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n 90 |       source: \"SnapshotOperationExecutor\"\n 91 |     )\n 92 |     .withPublic(key: \"operation_type\", value: parameters.operationType.rawValue)\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n 93 |     .withPublic(key: \"operation_id\", value: parameters.operationID)\n 94 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:93:56: error: value of type 'P' has no member 'operationID'\n 91 |     )\n 92 |     .withPublic(key: \"operation_type\", value: parameters.operationType.rawValue)\n 93 |     .withPublic(key: \"operation_id\", value: parameters.operationID)\n    |                                                        `- error: value of type 'P' has no member 'operationID'\n 94 | \n 95 |     // Add snapshot ID if available\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:96:8: error: initializer for conditional binding must have Optional type, not 'String'\n 94 | \n 95 |     // Add snapshot ID if available\n 96 |     if let snapshotID, !snapshotID.isEmpty {\n    |        `- error: initializer for conditional binding must have Optional type, not 'String'\n 97 |       logContext.withPublic(key: \"snapshot_id\", value: snapshotID)\n 98 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:101:36: error: value of type 'P' has no member 'repositoryID'\n 99 | \n100 |     // Add repository ID if available\n101 |     if let repositoryID=parameters.repositoryID, !repositoryID.isEmpty {\n    |                                    `- error: value of type 'P' has no member 'repositoryID'\n102 |       logContext.withPublic(key: \"repository_id\", value: repositoryID)\n103 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:106:30: error: extra argument 'metadata' in call\n104 |       SnapshotLogContext(\n105 |         operation: \"unknown\",\n106 |         metadata: logContext.metadata\n    |                              `- error: extra argument 'metadata' in call\n107 |       )\n108 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:105:29: error: missing argument for parameter 'snapshotID' in call\n103 |       // Create a new context with the existing metadata\n104 |       SnapshotLogContext(\n105 |         operation: \"unknown\",\n    |                             `- error: missing argument for parameter 'snapshotID' in call\n106 |         metadata: logContext.metadata\n107 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:112:8: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n110 |     // Add error information with proper privacy annotations\n111 |     let updatedContext=snapshotContext\n112 |       .withPublic(key: \"status\", value: \"error\")\n    |        `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n113 |       .withPublic(key: \"errorType\", value: String(describing: type(of: error)))\n114 |       .withPrivate(key: \"errorMessage\", value: errorDescription)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:138:56: error: missing argument for parameter 'snapshotID' in call\n136 |   ) async {\n137 |     // Create a context with all the information using proper privacy annotations\n138 |     var context=SnapshotLogContext(operation: operation)\n    |                                                        `- error: missing argument for parameter 'snapshotID' in call\n139 |       .withPublic(key: \"phase\", value: phase)\n140 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:139:8: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n137 |     // Create a context with all the information using proper privacy annotations\n138 |     var context=SnapshotLogContext(operation: operation)\n139 |       .withPublic(key: \"phase\", value: phase)\n    |        `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n140 | \n141 |     if let progress {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:348:16: error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n346 |       secondSnapshotID: secondSnapshotID,\n347 |       addedFiles: interfaceDifference.addedFiles\n348 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n    |                `- error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n349 |       removedFiles: interfaceDifference.removedFiles\n350 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:350:16: error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n348 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n349 |       removedFiles: interfaceDifference.removedFiles\n350 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n    |                `- error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n351 |       modifiedFiles: interfaceDifference.modifiedFiles\n352 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:352:16: error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n350 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n351 |       modifiedFiles: interfaceDifference.modifiedFiles\n352 |         .map { $0 as [BackupInterfaces.SnapshotFile] } ?? [],\n    |                `- error: cannot convert value of type 'BackupFile' to type '[SnapshotFile]' in coercion\n353 |       unchangedFiles: [],\n354 |       changeSize: calculateChangeSize(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:532:10: error: type 'VerificationIssue.IssueType' has no member 'permissionDenied'\n530 |         .checksumMismatch\n531 |       case .permissionDenied:\n532 |         .permissionDenied\n    |          `- error: type 'VerificationIssue.IssueType' has no member 'permissionDenied'\n533 |       case .structuralError:\n534 |         .structuralError\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:549:10: error: type 'RepairAction.ActionType' has no member 'pruneRepository'\n547 |         .rebuildMetadata\n548 |       case .pruneRepository:\n549 |         .pruneRepository\n    |          `- error: type 'RepairAction.ActionType' has no member 'pruneRepository'\n550 |     }\n551 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:585:19: error: value of type 'SnapshotFileDTO' has no member 'mode'\n583 |       size: entry.size,\n584 |       modificationTime: entry.modificationTime ?? Date(),\n585 |       mode: entry.mode ?? 0,\n    |                   `- error: value of type 'SnapshotFileDTO' has no member 'mode'\n586 |       uid: entry.uid ?? 0,\n587 |       gid: entry.gid ?? 0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:586:18: error: value of type 'SnapshotFileDTO' has no member 'uid'\n584 |       modificationTime: entry.modificationTime ?? Date(),\n585 |       mode: entry.mode ?? 0,\n586 |       uid: entry.uid ?? 0,\n    |                  `- error: value of type 'SnapshotFileDTO' has no member 'uid'\n587 |       gid: entry.gid ?? 0,\n588 |       contentHash: entry.hash\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:587:18: error: value of type 'SnapshotFileDTO' has no member 'gid'\n585 |       mode: entry.mode ?? 0,\n586 |       uid: entry.uid ?? 0,\n587 |       gid: entry.gid ?? 0,\n    |                  `- error: value of type 'SnapshotFileDTO' has no member 'gid'\n588 |       contentHash: entry.hash\n589 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:588:26: error: value of type 'SnapshotFileDTO' has no member 'hash'\n586 |       uid: entry.uid ?? 0,\n587 |       gid: entry.gid ?? 0,\n588 |       contentHash: entry.hash\n    |                          `- error: value of type 'SnapshotFileDTO' has no member 'hash'\n589 |     )\n590 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:668:41: error: cannot find 'DiffResultDTO' in scope\n666 |       decoder.dateDecodingStrategy = .iso8601\n667 | \n668 |       let diffResult=try decoder.decode(DiffResultDTO.self, from: jsonData)\n    |                                         `- error: cannot find 'DiffResultDTO' in scope\n669 | \n670 |       // Extract the files from the diff result\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:668:34: error: type of expression is ambiguous without a type annotation\n666 |       decoder.dateDecodingStrategy = .iso8601\n667 | \n668 |       let diffResult=try decoder.decode(DiffResultDTO.self, from: jsonData)\n    |                                  `- error: type of expression is ambiguous without a type annotation\n669 | \n670 |       // Extract the files from the diff result\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:679:11: error: argument 'type' must precede argument 'permissions'\n677 |           owner: entry.user,\n678 |           group: entry.group,\n679 |           type: entry.type ?? \"file\"\n    |           `- error: argument 'type' must precede argument 'permissions'\n680 |         )\n681 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:691:11: error: argument 'type' must precede argument 'permissions'\n689 |           owner: entry.user,\n690 |           group: entry.group,\n691 |           type: entry.type ?? \"file\"\n    |           `- error: argument 'type' must precede argument 'permissions'\n692 |         )\n693 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:703:11: error: argument 'type' must precede argument 'permissions'\n701 |           owner: entry.user,\n702 |           group: entry.group,\n703 |           type: entry.type ?? \"file\"\n    |           `- error: argument 'type' must precede argument 'permissions'\n704 |         )\n705 |       }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:14:28: error: cannot find type 'DomainLoggerProtocol' in scope\n 12 |  * file paths and backup metadata.\n 13 |  */\n 14 | public actor BackupLogger: DomainLoggerProtocol {\n    |                            `- error: cannot find type 'DomainLoggerProtocol' in scope\n 15 |   /// The underlying logger\n 16 |   private let loggingService: any LoggingProtocol\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:448:25: error: cannot find type 'MetadataCollection' in scope\n446 | \n447 | extension BackupLogContext {\n448 |   func getMetadata() -\u003e MetadataCollection {\n    |                         `- error: cannot find type 'MetadataCollection' in scope\n449 |     // Convert the BackupLogContext to a LogMetadataDTOCollection\n450 |     // This ensures all privacy annotations are properly maintained\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:61:40: error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 59 |       source: domainName\n 60 |     )\n 61 |     await log(level, message, context: context)\n    |                                        `- error: cannot convert value of type 'BackupLogContextImpl' to expected argument type 'BackupLogContext'\n 62 |   }\n 63 | \n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:109:41: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n107 | \n108 |       // Create a new context with error information\n109 |       if let backupContext=finalContext as? BackupLogContextImpl {\n    |                                         `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n110 |         // Update the context with error information\n111 |         let updatedContext=backupContext.withUpdatedMetadata(\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:111:42: error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n109 |       if let backupContext=finalContext as? BackupLogContextImpl {\n110 |         // Update the context with error information\n111 |         let updatedContext=backupContext.withUpdatedMetadata(\n    |                                          `- error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n112 |           backupContext.metadata.merging(with: errorMetadata).withPrivate(\n113 |             key: \"error\",\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:126:41: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n124 |       let formattedMessage=message ?? \"[\\(domainName)] \\(error.localizedDescription)\"\n125 | \n126 |       if let backupContext=finalContext as? BackupLogContextImpl {\n    |                                         `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n127 |         // Update the context with error information\n128 |         let updatedContext=backupContext.withUpdatedMetadata(\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:128:42: error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n126 |       if let backupContext=finalContext as? BackupLogContextImpl {\n127 |         // Update the context with error information\n128 |         let updatedContext=backupContext.withUpdatedMetadata(\n    |                                          `- error: value of type 'BackupLogContextImpl' has no member 'withUpdatedMetadata'\n129 |           backupContext.metadata.withPrivate(key: \"error\", value: error.localizedDescription)\n130 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:166:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n164 |       level,\n165 |       message,\n166 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n167 |     )\n168 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:177:34: warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n175 |    */\n176 |   private func enhanceContext(_ context: BackupLogContext) -\u003e BackupLogContextImpl {\n177 |     if let backupContext=context as? BackupLogContextImpl {\n    |                                  `- warning: cast from 'BackupLogContext' to unrelated type 'BackupLogContextImpl' always fails\n178 |       return backupContext\n179 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:183:37: error: missing argument for parameter 'source' in call\n181 |     // Create a new context with the same information\n182 |     return BackupLogContextImpl(\n183 |       domainName: context.domainName,\n    |                                     `- error: missing argument for parameter 'source' in call\n184 |       metadata: context.getMetadata()\n185 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:30:10: note: 'init(domainName:source:metadata:)' declared here\n 28 |    *   - metadata: The metadata collection\n 29 |    */\n 30 |   public init(\n    |          `- note: 'init(domainName:source:metadata:)' declared here\n 31 |     domainName: String,\n 32 |     source: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:358:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n356 |       .info,\n357 |       message ?? defaultMessage,\n358 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n359 |     )\n360 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:388:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n386 |       .error,\n387 |       message,\n388 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n389 |     )\n390 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:442:16: error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n440 |       .info,\n441 |       message ?? defaultMessage,\n442 |       context: enhancedContext\n    |                `- error: argument type 'BackupLogContextImpl' does not conform to expected type 'LogContextDTO'\n443 |     )\n444 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:451:28: error: cannot find 'toMetadataCollection' in scope\n449 |     // Convert the BackupLogContext to a LogMetadataDTOCollection\n450 |     // This ensures all privacy annotations are properly maintained\n451 |     let metadataCollection=toMetadataCollection()\n    |                            `- error: cannot find 'toMetadataCollection' in scope\n452 | \n453 |     // Convert to the legacy MetadataCollection format\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:455:24: error: cannot find 'MetadataCollection' in scope\n453 |     // Convert to the legacy MetadataCollection format\n454 |     // This is needed for compatibility with the existing logging system\n455 |     var legacyMetadata=MetadataCollection()\n    |                        `- error: cannot find 'MetadataCollection' in scope\n456 | \n457 |     // Transfer all metadata with their privacy levels preserved\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:111:32: error: cannot find type 'MetadataCollection' in scope\n109 |    * - Returns: The metadata collection\n110 |    */\n111 |   public func getMetadata() -\u003e MetadataCollection {\n    |                                `- error: cannot find type 'MetadataCollection' in scope\n112 |     metadata\n113 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:12:15: error: inheritance from non-protocol type 'BackupLogContext'\n 10 |  * allowing for structured logging with appropriate privacy classifications.\n 11 |  */\n 12 | public struct BackupLogContextImpl: BackupLogContext, Sendable {\n    |               `- error: inheritance from non-protocol type 'BackupLogContext'\n 13 |   /// The domain name for the log context\n 14 |   public let domainName: String\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:60:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 58 |   public func withPublic(key: String, value: String) -\u003e Self {\n 59 |     var newMetadata=metadata\n 60 |     newMetadata.add(key: key, value: value, privacy: .public)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 61 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 62 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:60:55: error: cannot infer contextual base in reference to member 'public'\n 58 |   public func withPublic(key: String, value: String) -\u003e Self {\n 59 |     var newMetadata=metadata\n 60 |     newMetadata.add(key: key, value: value, privacy: .public)\n    |                                                       `- error: cannot infer contextual base in reference to member 'public'\n 61 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 62 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:74:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 72 |   public func withPrivate(key: String, value: String) -\u003e Self {\n 73 |     var newMetadata=metadata\n 74 |     newMetadata.add(key: key, value: value, privacy: .private)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 75 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:74:55: error: cannot infer contextual base in reference to member 'private'\n 72 |   public func withPrivate(key: String, value: String) -\u003e Self {\n 73 |     var newMetadata=metadata\n 74 |     newMetadata.add(key: key, value: value, privacy: .private)\n    |                                                       `- error: cannot infer contextual base in reference to member 'private'\n 75 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:88:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 86 |   public func withSensitive(key: String, value: String) -\u003e Self {\n 87 |     var newMetadata=metadata\n 88 |     newMetadata.add(key: key, value: value, privacy: .sensitive)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n 89 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 90 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:88:55: error: cannot infer contextual base in reference to member 'sensitive'\n 86 |   public func withSensitive(key: String, value: String) -\u003e Self {\n 87 |     var newMetadata=metadata\n 88 |     newMetadata.add(key: key, value: value, privacy: .sensitive)\n    |                                                       `- error: cannot infer contextual base in reference to member 'sensitive'\n 89 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n 90 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:102:17: error: value of type 'LogMetadataDTOCollection' has no member 'add'\n100 |   public func withHashed(key: String, value: String) -\u003e Self {\n101 |     var newMetadata=metadata\n102 |     newMetadata.add(key: key, value: value, privacy: .hash)\n    |                 `- error: value of type 'LogMetadataDTOCollection' has no member 'add'\n103 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n104 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/LogContextDTO.swift:102:55: error: cannot infer contextual base in reference to member 'hash'\n100 |   public func withHashed(key: String, value: String) -\u003e Self {\n101 |     var newMetadata=metadata\n102 |     newMetadata.add(key: key, value: value, privacy: .hash)\n    |                                                       `- error: cannot infer contextual base in reference to member 'hash'\n103 |     return BackupLogContextImpl(domainName: domainName, source: source, metadata: newMetadata)\n104 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:221:25: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n    |                         `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n222 |     BackupInterfaces.SnapshotFileEntry(\n223 |       path: file.path ?? \"\",\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:220:8: error: no type named 'SnapshotFile' in module 'BackupServices'\n218 |   public static func toInterfaceSnapshotFileEntry(\n219 |     _ file: BackupServices\n220 |       .SnapshotFile\n    |        `- error: no type named 'SnapshotFile' in module 'BackupServices'\n221 |   ) -\u003e BackupInterfaces.SnapshotFileEntry {\n222 |     BackupInterfaces.SnapshotFileEntry(\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:241:24: error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n    |                        `- error: no type named 'SnapshotFileEntry' in module 'BackupInterfaces'\n242 |     guard let files else { return nil }\n243 |     return files.map(toInterfaceSnapshotFileEntry)\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:240:78: error: no type named 'SnapshotFile' in module 'BackupServices'\n238 |    * - Returns: An array of converted snapshot file entries compatible with the interfaces module\n239 |    */\n240 |   public static func toInterfaceSnapshotFileEntries(_ files: [BackupServices.SnapshotFile]?)\n    |                                                                              `- error: no type named 'SnapshotFile' in module 'BackupServices'\n241 |   -\u003e [BackupInterfaces.SnapshotFileEntry]? {\n242 |     guard let files else { return nil }\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:33:13: error: type 'VerificationIssueDTO.IssueType' has no member 'integrityViolation'\n 31 |       case .checksumMismatch:\n 32 |         .checksumMismatch\n 33 |       case .integrityViolation:\n    |             `- error: type 'VerificationIssueDTO.IssueType' has no member 'integrityViolation'\n 34 |         .integrityViolation\n 35 |       case .other:\n\npackages/UmbraImplementations/Sources/BackupServices/Mappers/BackupTypesMapper.swift:117:13: error: type 'RepairActionDTO.ActionType' has no member 'removeCorrupted'\n115 |       case .rebuildMetadata:\n116 |         .rebuildMetadata\n117 |       case .removeCorrupted:\n    |             `- error: type 'RepairActionDTO.ActionType' has no member 'removeCorrupted'\n118 |         .removeCorrupted\n119 |       case .other:\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupLogContext.swift:14:15: error: type 'BackupLogContext' does not conform to protocol 'LogContextDTO'\n 12 |  allowing for immutable context objects and thread safety.\n 13 |  */\n 14 | public struct BackupLogContext: LogContextDTO {\n    |               |- error: type 'BackupLogContext' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 15 |   /// The domain name for this context\n 16 |   public let domainName: String=\"BackupServices\"\n    :\n 26 | \n 27 |   /// Current operation being performed\n 28 |   public var operation: String? {\n    |              `- note: candidate has non-matching type 'String?'\n 29 |     // Find operation in the metadata entries\n 30 |     for entry in metadata.entries where entry.key == \"operation\" {\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:11:7: note: protocol requires property 'operation' with type 'String'\n 9 | \n10 |   /// The operation being performed (e.g., \"addDestination\", \"writeLog\")\n11 |   var operation: String { get }\n   |       `- note: protocol requires property 'operation' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e BackupLogContext'\n29 | }\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupLogContextAdapter.swift:29:15: error: property 'operation' must be declared public because it matches a requirement in public protocol 'LogContextDTO'\n 27 | \n 28 |   /// Operation being performed\n 29 |   private let operation: String\n    |               |- error: property 'operation' must be declared public because it matches a requirement in public protocol 'LogContextDTO'\n    |               `- note: mark the property as 'public' to satisfy the requirement\n 30 | \n 31 |   /// Additional context values with privacy annotations\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupLogContextAdapter.swift:12:15: error: type 'BackupLogContextAdapter' does not conform to protocol 'LogContextDTO'\n 10 |  * appropriate privacy controls for backup-related operations.\n 11 |  */\n 12 | public struct BackupLogContextAdapter: LogContextDTO {\n    |               |- error: type 'BackupLogContextAdapter' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 13 |   /// The domain name for this context\n 14 |   public let domainName: String=\"BackupServices\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:14:7: note: protocol requires property 'category' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e BackupLogContextAdapter'\n29 | }\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:21:15: error: invalid redeclaration of 'BackupCreateParameters'\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- error: invalid redeclaration of 'BackupCreateParameters'\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:96:15: error: invalid redeclaration of 'BackupRestoreParameters'\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- error: invalid redeclaration of 'BackupRestoreParameters'\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:249:15: error: invalid redeclaration of 'BackupDeleteParameters'\n247 |  * Parameters for deleting a backup.\n248 |  */\n249 | public struct BackupDeleteParameters: BackupOperationParameters {\n    |               `- error: invalid redeclaration of 'BackupDeleteParameters'\n250 |   /// ID of the snapshot to delete\n251 |   public let snapshotID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:292:15: error: invalid redeclaration of 'BackupMaintenanceParameters'\n290 |  * Parameters for performing repository maintenance.\n291 |  */\n292 | public struct BackupMaintenanceParameters: BackupOperationParameters {\n    |               `- error: invalid redeclaration of 'BackupMaintenanceParameters'\n293 |   /// Type of maintenance to perform\n294 |   public let maintenanceType: MaintenanceType\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:426:11: error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n 19 |  * Parameters for creating a backup.\n 20 |  */\n 21 | public struct BackupCreateParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 22 |   /// Source paths to include in the backup\n 23 |   public let sources: [URL]\n    :\n424 | \n425 | /// Extension to provide conversion methods between DTOs and BackupInterfaces types\n426 | extension BackupCreateParameters {\n    |           `- error: 'BackupCreateParameters' is ambiguous for type lookup in this context\n427 |   /// Convert to BackupInterfaces parameters\n428 |   public func toBackupParameters() -\u003e BackupParameters {\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:9:15: note: found this candidate\n  7 |  This struct encapsulates all parameters required for creating a new backup.\n  8 |  */\n  9 | public struct BackupCreateParameters {\n    |               `- note: found this candidate\n 10 |   /// Unique identifier for this operation\n 11 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:448:11: error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n 94 |  * Parameters for restoring a backup.\n 95 |  */\n 96 | public struct BackupRestoreParameters: BackupOperationParameters {\n    |               `- note: found this candidate\n 97 |   /// ID of the snapshot to restore\n 98 |   public let snapshotID: String\n    :\n446 | }\n447 | \n448 | extension BackupRestoreParameters {\n    |           `- error: 'BackupRestoreParameters' is ambiguous for type lookup in this context\n449 |   /// Convert to BackupInterfaces parameters\n450 |   public func toBackupParameters() -\u003e RestoreParameters {\n\npackages/UmbraImplementations/Sources/BackupServices/Commands/BackupParameters.swift:55:15: note: found this candidate\n 53 |  This struct encapsulates all parameters required for restoring a backup.\n 54 |  */\n 55 | public struct BackupRestoreParameters {\n    |               `- note: found this candidate\n 56 |   /// Unique identifier for this operation\n 57 |   public let operationID: String\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:493:7: error: argument 'before' must precede argument 'host'\n491 |       host: parameters.host,\n492 |       path: parameters.path.map { URL(fileURLWithPath: $0) },\n493 |       before: nil,\n    |       `- error: argument 'before' must precede argument 'host'\n494 |       after: nil\n495 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:18:14: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n16 |   /// - Returns: A ProgressCancellationToken that delegates to the original token\n17 |   public static func asProgressCancellationToken(\n18 |     _ token: BackupOperationCancellationTokenImpl\n   |              `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n19 |   ) -\u003e ProgressCancellationToken {\n20 |     ProgressCancellationTokenAdapter(token: token)\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:28:22: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n26 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken,\n27 | @unchecked Sendable {\n28 |   private let token: BackupOperationCancellationTokenImpl\n   |                      `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:31:15: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n29 |   private var _isCancelled: Bool=false\n30 | \n31 |   init(token: BackupOperationCancellationTokenImpl) {\n   |               `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n32 |     self.token=token\n33 |     // Set up task to monitor the cancellation state\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:87:11: error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n85 | \n86 | /// Extension to BackupOperationCancellationTokenImpl for tracking with BackupOperation\n87 | extension BackupOperationCancellationTokenImpl {\n   |           `- error: cannot find type 'BackupOperationCancellationTokenImpl' in scope\n88 |   /// Register this token with the given operation\n89 |   ///\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:76:9: warning: no 'async' operations occur within 'await' expression\n74 |       while !_isCancelled {\n75 |         try? await Task.sleep(nanoseconds: 100_000_000) // 100ms\n76 |         await self.updateCancellationState()\n   |         `- warning: no 'async' operations occur within 'await' expression\n77 |         if self._isCancelled {\n78 |           callback()\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:10:15: error: type 'SnapshotLogContext' does not conform to protocol 'LogContextDTO'\n  8 |  * operation details in log messages while maintaining privacy awareness.\n  9 |  */\n 10 | public struct SnapshotLogContext: LogContextDTO {\n    |               |- error: type 'SnapshotLogContext' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 11 |   /// The domain name for this context\n 12 |   public let domainName: String=\"BackupServices.Snapshot\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:14:7: note: protocol requires property 'category' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e SnapshotLogContext'\n29 | }\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContextAdapter.swift:12:15: error: type 'SnapshotLogContextAdapter' does not conform to protocol 'LogContextDTO'\n 10 |  * and ensures proper separation between domain-specific metadata and core logging infrastructure.\n 11 |  */\n 12 | public struct SnapshotLogContextAdapter: LogContextDTO {\n    |               |- error: type 'SnapshotLogContextAdapter' does not conform to protocol 'LogContextDTO'\n    |               `- note: add stubs for conformance\n 13 |   /// The domain name of this context\n 14 |   public let domainName: String=\"BackupServices.Snapshot\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LogContextDTO.swift:11:7: note: protocol requires property 'operation' with type 'String'\n 9 | \n10 |   /// The operation being performed (e.g., \"addDestination\", \"writeLog\")\n11 |   var operation: String { get }\n   |       `- note: protocol requires property 'operation' with type 'String'\n12 |   \n13 |   /// The category for the log entry (e.g., \"LoggingSystem\", \"Security\")\n14 |   var category: String { get }\n   |       `- note: protocol requires property 'category' with type 'String'\n15 | \n16 |   /// Optional source information (class, file, etc.)\n   :\n26 |   /// - Parameter additionalMetadata: Additional metadata to include\n27 |   /// - Returns: New context with merged metadata\n28 |   func withMetadata(_ additionalMetadata: LogMetadataDTOCollection) -\u003e Self\n   |        `- note: protocol requires function 'withMetadata' with type '(LogMetadataDTOCollection) -\u003e SnapshotLogContextAdapter'\n29 | }\n30 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:86:15: error: extra argument 'source' in call\n 84 |     let context=SnapshotLogContext(\n 85 |       operation: operationType.rawValue,\n 86 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n 87 |     )\n 88 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:85:40: error: missing argument for parameter 'snapshotID' in call\n 83 |   public func createLogContext() -\u003e SnapshotLogContext {\n 84 |     let context=SnapshotLogContext(\n 85 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n 86 |       source: \"SnapshotOperationsService\"\n 87 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:89:12: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n 87 |     )\n 88 | \n 89 |     return context\n    |            `- error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n 90 |       .withPublic(key: \"repositoryID\", value: repositoryID ?? \"default\")\n 91 |       .withPublic(key: \"tags\", value: tags?.joined(separator: \", \") ?? \"\")\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:128:15: error: extra argument 'source' in call\n126 |     let context=SnapshotLogContext(\n127 |       operation: operationType.rawValue,\n128 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n129 |     )\n130 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:127:40: error: missing argument for parameter 'snapshotID' in call\n125 |   public func createLogContext() -\u003e SnapshotLogContext {\n126 |     let context=SnapshotLogContext(\n127 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n128 |       source: \"SnapshotOperationsService\"\n129 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:169:15: error: extra argument 'source' in call\n167 |     let context=SnapshotLogContext(\n168 |       operation: operationType.rawValue,\n169 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n170 |     )\n171 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:168:40: error: missing argument for parameter 'snapshotID' in call\n166 |   public func createLogContext() -\u003e SnapshotLogContext {\n167 |     let context=SnapshotLogContext(\n168 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n169 |       source: \"SnapshotOperationsService\"\n170 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:215:15: error: extra argument 'source' in call\n213 |     let context=SnapshotLogContext(\n214 |       operation: operationType.rawValue,\n215 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n216 |     )\n217 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:214:40: error: missing argument for parameter 'snapshotID' in call\n212 |   public func createLogContext() -\u003e SnapshotLogContext {\n213 |     let context=SnapshotLogContext(\n214 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n215 |       source: \"SnapshotOperationsService\"\n216 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:251:15: error: extra argument 'source' in call\n249 |     let context=SnapshotLogContext(\n250 |       operation: operationType.rawValue,\n251 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n252 |     )\n253 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:250:40: error: missing argument for parameter 'snapshotID' in call\n248 |   public func createLogContext() -\u003e SnapshotLogContext {\n249 |     let context=SnapshotLogContext(\n250 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n251 |       source: \"SnapshotOperationsService\"\n252 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:294:15: error: extra argument 'source' in call\n292 |     let context=SnapshotLogContext(\n293 |       operation: operationType.rawValue,\n294 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n295 |     )\n296 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:293:40: error: missing argument for parameter 'snapshotID' in call\n291 |   public func createLogContext() -\u003e SnapshotLogContext {\n292 |     let context=SnapshotLogContext(\n293 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n294 |       source: \"SnapshotOperationsService\"\n295 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:338:15: error: extra argument 'source' in call\n336 |     let context=SnapshotLogContext(\n337 |       operation: operationType.rawValue,\n338 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n339 |     )\n340 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:337:40: error: missing argument for parameter 'snapshotID' in call\n335 |   public func createLogContext() -\u003e SnapshotLogContext {\n336 |     let context=SnapshotLogContext(\n337 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n338 |       source: \"SnapshotOperationsService\"\n339 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:372:15: error: extra argument 'source' in call\n370 |     SnapshotLogContext(\n371 |       operation: operationType.rawValue,\n372 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n373 |     )\n374 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:371:40: error: missing argument for parameter 'snapshotID' in call\n369 |   public func createLogContext() -\u003e SnapshotLogContext {\n370 |     SnapshotLogContext(\n371 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n372 |       source: \"SnapshotOperationsService\"\n373 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:374:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n372 |       source: \"SnapshotOperationsService\"\n373 |     )\n374 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n375 |   }\n376 | }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:403:15: error: extra argument 'source' in call\n401 |     SnapshotLogContext(\n402 |       operation: operationType.rawValue,\n403 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n404 |     )\n405 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:402:40: error: missing argument for parameter 'snapshotID' in call\n400 |   public func createLogContext() -\u003e SnapshotLogContext {\n401 |     SnapshotLogContext(\n402 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n403 |       source: \"SnapshotOperationsService\"\n404 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:405:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n403 |       source: \"SnapshotOperationsService\"\n404 |     )\n405 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n406 |   }\n407 | }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:441:15: error: extra argument 'source' in call\n439 |     let context=SnapshotLogContext(\n440 |       operation: operationType.rawValue,\n441 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n442 |     )\n443 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:440:40: error: missing argument for parameter 'snapshotID' in call\n438 |   public func createLogContext() -\u003e SnapshotLogContext {\n439 |     let context=SnapshotLogContext(\n440 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n441 |       source: \"SnapshotOperationsService\"\n442 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:490:15: error: extra argument 'source' in call\n488 |     SnapshotLogContext(\n489 |       operation: operationType.rawValue,\n490 |       source: \"SnapshotOperationsService\"\n    |               `- error: extra argument 'source' in call\n491 |     )\n492 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:489:40: error: missing argument for parameter 'snapshotID' in call\n487 |   public func createLogContext() -\u003e SnapshotLogContext {\n488 |     SnapshotLogContext(\n489 |       operation: operationType.rawValue,\n    |                                        `- error: missing argument for parameter 'snapshotID' in call\n490 |       source: \"SnapshotOperationsService\"\n491 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotLogContext.swift:41:10: note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 39 |    *   - correlationID: Optional correlation ID for tracing\n 40 |    */\n 41 |   public init(\n    |          `- note: 'init(operation:snapshotID:errorMessage:correlationID:)' declared here\n 42 |     operation: String,\n 43 |     snapshotID: String,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:492:6: error: value of type 'SnapshotLogContext' has no member 'withPublic'\n490 |       source: \"SnapshotOperationsService\"\n491 |     )\n492 |     .withPublic(key: \"snapshotID\", value: snapshotID)\n    |      `- error: value of type 'SnapshotLogContext' has no member 'withPublic'\n493 |     .withPublic(key: \"verificationLevel\", value: level.rawValue)\n494 |   }\nTarget //packages/UmbraImplementations/Sources/BackupServices:BackupServices failed to build\nINFO: Elapsed time: 15.482s, Critical Path: 15.40s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices",
    "success": true,
    "start_time": "2025-04-13T09:08:28.207656+01:00",
    "end_time": "2025-04-13T09:08:29.141168+01:00",
    "duration": "933.504083ms",
    "output": "INFO: Invocation ID: 321301eb-dc1f-481a-ba0e-59f6bf0b037b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices (4 packages loaded, 36 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/BookmarkServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/BookmarkServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/BookmarkServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/libBookmarkServices.a\nINFO: Elapsed time: 0.113s, Critical Path: 0.00s\nINFO: 1 process: 9 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger",
    "success": true,
    "start_time": "2025-04-13T09:08:29.141176+01:00",
    "end_time": "2025-04-13T09:08:29.917321+01:00",
    "duration": "776.138416ms",
    "output": "INFO: Invocation ID: d5d2b84f-b76c-4dcd-9047-c296b469bbbe\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/BookmarkLogger.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/BookmarkLogger.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/BookmarkLogger.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/libBookmarkLogger.a\nINFO: Elapsed time: 0.100s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel",
    "success": true,
    "start_time": "2025-04-13T09:08:29.917328+01:00",
    "end_time": "2025-04-13T09:08:30.674631+01:00",
    "duration": "757.296083ms",
    "output": "INFO: Invocation ID: 8b206e52-7667-4be6-80fc-742dbf6ec72f\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/BookmarkModel.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/BookmarkModel.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/BookmarkModel.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/libBookmarkModel.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices",
    "success": true,
    "start_time": "2025-04-13T09:08:30.674638+01:00",
    "end_time": "2025-04-13T09:08:31.488016+01:00",
    "duration": "813.371417ms",
    "output": "INFO: Invocation ID: be38dbb6-ac2c-4658-bcd0-9cc3833dedcd\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices (1 packages loaded, 3 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/libConfigServices.a\nINFO: Elapsed time: 0.084s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CoreFileOperations:CoreFileOperations",
    "success": true,
    "start_time": "2025-04-13T09:08:31.488036+01:00",
    "end_time": "2025-04-13T09:08:32.250345+01:00",
    "duration": "762.303041ms",
    "output": "INFO: Invocation ID: e2c34e80-9fd4-4189-84c2-69dc4c2c1b65\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CoreFileOperations:CoreFileOperations (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CoreFileOperations:CoreFileOperations (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CoreFileOperations:CoreFileOperations (1 packages loaded, 3 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/CoreFileOperations:CoreFileOperations up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/CoreFileOperations/CoreFileOperations.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/CoreFileOperations/CoreFileOperations.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/CoreFileOperations/CoreFileOperations.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/CoreFileOperations/libCoreFileOperations.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CoreServices:CoreServices",
    "success": false,
    "start_time": "2025-04-13T09:08:32.250364+01:00",
    "end_time": "2025-04-13T09:08:33.812147+01:00",
    "duration": "1.561769792s",
    "output": "INFO: Invocation ID: bedda153-57bd-4222-95bc-7f42a7a0a5a0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CoreServices:CoreServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CoreServices:CoreServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CoreServices:CoreServices (1 packages loaded, 8 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServicesCore/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServicesCore.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceFactory.swift:73:35: warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 71 |             // This comment acknowledges we're deliberately using a deprecated method for testing purposes.\n 72 |             // We accept the warning as this is explicitly for testing environments.\n 73 |             actualSecureStorage = createMockSecureStorage()\n    |                                   `- warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 74 |         }\n 75 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceType.swift:58:9: error: switch must be exhaustive\n56 |     /// - Returns: The equivalent CryptoServiceType\n57 |     public static func from(providerType: SecurityProviderType) -\u003e CryptoServiceType {\n58 |         switch providerType {\n   |         |- error: switch must be exhaustive\n   |         |- note: add missing case: '.cryptoKit'\n   |         |- note: add missing case: '.system'\n   |         |- note: add missing case: '.hsm'\n   |         |- note: add missing case: '.platform'\n   |         `- note: add missing cases\n59 |         case .basic:\n60 |             return .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:74:34: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 72 |     // Validate minimum size (header + iv)\n 73 |     if packagedData.count \u003c headerSize + ivSize {\n 74 |       throw SecurityStorageError.invalidDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 75 |     }\n 76 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:80:36: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 78 |     for i in 0..\u003c4 {\n 79 |       if packagedData[i] != magicBytes[i] {\n 80 |         throw SecurityStorageError.invalidDataFormat\n    |                                    `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 81 |       }\n 82 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:87:34: error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 85 |     let version = packagedData[4]\n 86 |     if version \u003e formatVersion {\n 87 |       throw SecurityStorageError.unsupportedDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 88 |     }\n 89 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: extra arguments at positions #2, #3 in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: extra arguments at positions #2, #3 in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:172:19: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n170 |     \n171 |     return SecurityResultDTO(\n172 |       resultData: packagedData,\n    |                   `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:174:16: error: cannot infer contextual base in reference to member 'standard'\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n    |                `- error: cannot infer contextual base in reference to member 'standard'\n175 |     )\n176 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:182:14: error: cannot find 'kCCModeGCM' in scope\n180 |     let status = CCCryptorCreateWithMode(\n181 |       CCOperation(kCCEncrypt),\n182 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n183 |       CCAlgorithm(kCCAlgorithmAES),\n184 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:192:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n190 |     \n191 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n192 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n193 |     }\n194 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:201:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n199 |     // Process additional authenticated data if provided\n200 |     if let aad = authenticatedData, !aad.isEmpty {\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:203:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n204 |       }\n205 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:217:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n215 |     \n216 |     guard encStatus == kCCSuccess else {\n217 |       throw SecurityProviderError.encryptionFailed(encStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n218 |     }\n219 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:19: error: generic parameter 'Element' could not be inferred\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |                   `- error: generic parameter 'Element' could not be inferred\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:230:35: error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n228 |     \n229 |     guard finalStatus == kCCSuccess else {\n230 |       throw SecurityProviderError.encryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n231 |     }\n232 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:234:21: error: cannot find 'CCCryptorGCMFinal' in scope\n232 |     \n233 |     // Get the authentication tag\n234 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n235 |       cryptor,\n236 |       \u0026tagBuffer,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:241:35: error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n239 |     \n240 |     guard tagStatus == kCCSuccess else {\n241 |       throw SecurityProviderError.authenticationTagGenerationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n242 |     }\n243 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:278:35: error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n276 |     // Validate data length (must include tag)\n277 |     guard data.count \u003e= gcmTagLength else {\n278 |       throw SecurityProviderError.invalidDataFormat\n    |                                   `- error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n279 |     }\n280 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:293:14: error: cannot find 'kCCModeGCM' in scope\n291 |     let status = CCCryptorCreateWithMode(\n292 |       CCOperation(kCCDecrypt),\n293 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n294 |       CCAlgorithm(kCCAlgorithmAES),\n295 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:303:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n301 |     \n302 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n303 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n304 |     }\n305 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:312:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n310 |     // Process additional authenticated data if provided\n311 |     if let aad = authenticatedData, !aad.isEmpty {\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:314:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n315 |       }\n316 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:328:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n326 |     \n327 |     guard decStatus == kCCSuccess else {\n328 |       throw SecurityProviderError.decryptionFailed(decStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n329 |     }\n330 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:18: error: generic parameter 'Element' could not be inferred\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |                  `- error: generic parameter 'Element' could not be inferred\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:341:35: error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n339 |     \n340 |     guard finalStatus == kCCSuccess else {\n341 |       throw SecurityProviderError.decryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n342 |     }\n343 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:346:21: error: cannot find 'CCCryptorGCMFinal' in scope\n344 |     // Verify the authentication tag\n345 |     var expectedTag = [UInt8](repeating: 0, count: gcmTagLength)\n346 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n347 |       cryptor,\n348 |       \u0026expectedTag,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:353:35: error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n351 |     \n352 |     guard tagStatus == kCCSuccess else {\n353 |       throw SecurityProviderError.authenticationTagVerificationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n354 |     }\n355 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:358:35: error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n356 |     // Compare tags\n357 |     guard tag.count == expectedTag.count \u0026\u0026 zip(tag, expectedTag).allSatisfy({ $0 == $1 }) else {\n358 |       throw SecurityProviderError.authenticationTagMismatch\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n359 |     }\n360 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:406:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n404 |     \n405 |     guard status == kCCSuccess else {\n406 |       throw SecurityProviderError.encryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n407 |     }\n408 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:443:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n441 |     \n442 |     guard status == kCCSuccess else {\n443 |       throw SecurityProviderError.decryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n444 |     }\n445 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:465:66: error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n463 |       // BLAKE2b is not directly supported in CommonCrypto\n464 |       // This would require a platform-specific implementation or use of a third-party library\n465 |       throw SecurityProviderError.unsupportedAlgorithm(algorithm.rawValue)\n    |                                                                  `- error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n466 |     }\n467 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:116:19: error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n114 |         // Check for specific error domains and codes\n115 |         if nsError.domain == NSOSStatusErrorDomain {\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:118:19: error: type 'SecurityStorageError' has no member 'systemError'\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'systemError'\n119 |         }\n120 |         \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:121:32: error: extra arguments at positions #2, #3 in call\n119 |         }\n120 |         \n121 |         return .operationFailed(error.localizedDescription, file: file, line: line)\n    |                                `- error: extra arguments at positions #2, #3 in call\n122 |       }\n123 |       \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProtocolError.swift:51:8: note: 'operationFailed' declared here\n 49 | \n 50 |   /// Generic operation failure with optional message\n 51 |   case operationFailed(String)\n    |        `- note: 'operationFailed' declared here\n 52 | \n 53 |   /// Invalid input provided to the operation\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:126:17: error: type 'SecurityStorageError' has no member 'unknownError'\n124 |       // If no error but also no result, it's a failure\n125 |       if result == nil {\n126 |         return .unknownError(file: file, line: line)\n    |                 `- error: type 'SecurityStorageError' has no member 'unknownError'\n127 |       }\n128 |       \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:130:15: error: type 'SecurityStorageError' has no member 'unknownError'\n128 |       \n129 |       // Default to unknown error\n130 |       return .unknownError(file: file, line: line)\n    |               `- error: type 'SecurityStorageError' has no member 'unknownError'\n131 |     }\n132 |   }\nTarget //packages/UmbraImplementations/Sources/CoreServices:CoreServices failed to build\nINFO: Elapsed time: 0.835s, Critical Path: 0.74s\nINFO: 2 processes: 1 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices",
    "success": false,
    "start_time": "2025-04-13T09:08:33.812159+01:00",
    "end_time": "2025-04-13T09:08:35.355672+01:00",
    "duration": "1.543499833s",
    "output": "INFO: Invocation ID: 02cb380b-cf17-4b26-af93-0a4a76a69218\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServicesCore/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServicesCore.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceFactory.swift:73:35: warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 71 |             // This comment acknowledges we're deliberately using a deprecated method for testing purposes.\n 72 |             // We accept the warning as this is explicitly for testing environments.\n 73 |             actualSecureStorage = createMockSecureStorage()\n    |                                   `- warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 74 |         }\n 75 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceType.swift:58:9: error: switch must be exhaustive\n56 |     /// - Returns: The equivalent CryptoServiceType\n57 |     public static func from(providerType: SecurityProviderType) -\u003e CryptoServiceType {\n58 |         switch providerType {\n   |         |- error: switch must be exhaustive\n   |         |- note: add missing case: '.cryptoKit'\n   |         |- note: add missing case: '.system'\n   |         |- note: add missing case: '.hsm'\n   |         |- note: add missing case: '.platform'\n   |         `- note: add missing cases\n59 |         case .basic:\n60 |             return .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:74:34: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 72 |     // Validate minimum size (header + iv)\n 73 |     if packagedData.count \u003c headerSize + ivSize {\n 74 |       throw SecurityStorageError.invalidDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 75 |     }\n 76 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:80:36: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 78 |     for i in 0..\u003c4 {\n 79 |       if packagedData[i] != magicBytes[i] {\n 80 |         throw SecurityStorageError.invalidDataFormat\n    |                                    `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 81 |       }\n 82 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:87:34: error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 85 |     let version = packagedData[4]\n 86 |     if version \u003e formatVersion {\n 87 |       throw SecurityStorageError.unsupportedDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 88 |     }\n 89 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: extra arguments at positions #2, #3 in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: extra arguments at positions #2, #3 in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:172:19: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n170 |     \n171 |     return SecurityResultDTO(\n172 |       resultData: packagedData,\n    |                   `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:174:16: error: cannot infer contextual base in reference to member 'standard'\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n    |                `- error: cannot infer contextual base in reference to member 'standard'\n175 |     )\n176 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:182:14: error: cannot find 'kCCModeGCM' in scope\n180 |     let status = CCCryptorCreateWithMode(\n181 |       CCOperation(kCCEncrypt),\n182 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n183 |       CCAlgorithm(kCCAlgorithmAES),\n184 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:192:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n190 |     \n191 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n192 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n193 |     }\n194 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:201:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n199 |     // Process additional authenticated data if provided\n200 |     if let aad = authenticatedData, !aad.isEmpty {\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:203:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n204 |       }\n205 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:217:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n215 |     \n216 |     guard encStatus == kCCSuccess else {\n217 |       throw SecurityProviderError.encryptionFailed(encStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n218 |     }\n219 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:19: error: generic parameter 'Element' could not be inferred\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |                   `- error: generic parameter 'Element' could not be inferred\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:230:35: error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n228 |     \n229 |     guard finalStatus == kCCSuccess else {\n230 |       throw SecurityProviderError.encryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n231 |     }\n232 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:234:21: error: cannot find 'CCCryptorGCMFinal' in scope\n232 |     \n233 |     // Get the authentication tag\n234 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n235 |       cryptor,\n236 |       \u0026tagBuffer,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:241:35: error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n239 |     \n240 |     guard tagStatus == kCCSuccess else {\n241 |       throw SecurityProviderError.authenticationTagGenerationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n242 |     }\n243 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:278:35: error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n276 |     // Validate data length (must include tag)\n277 |     guard data.count \u003e= gcmTagLength else {\n278 |       throw SecurityProviderError.invalidDataFormat\n    |                                   `- error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n279 |     }\n280 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:293:14: error: cannot find 'kCCModeGCM' in scope\n291 |     let status = CCCryptorCreateWithMode(\n292 |       CCOperation(kCCDecrypt),\n293 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n294 |       CCAlgorithm(kCCAlgorithmAES),\n295 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:303:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n301 |     \n302 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n303 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n304 |     }\n305 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:312:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n310 |     // Process additional authenticated data if provided\n311 |     if let aad = authenticatedData, !aad.isEmpty {\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:314:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n315 |       }\n316 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:328:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n326 |     \n327 |     guard decStatus == kCCSuccess else {\n328 |       throw SecurityProviderError.decryptionFailed(decStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n329 |     }\n330 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:18: error: generic parameter 'Element' could not be inferred\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |                  `- error: generic parameter 'Element' could not be inferred\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:341:35: error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n339 |     \n340 |     guard finalStatus == kCCSuccess else {\n341 |       throw SecurityProviderError.decryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n342 |     }\n343 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:346:21: error: cannot find 'CCCryptorGCMFinal' in scope\n344 |     // Verify the authentication tag\n345 |     var expectedTag = [UInt8](repeating: 0, count: gcmTagLength)\n346 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n347 |       cryptor,\n348 |       \u0026expectedTag,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:353:35: error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n351 |     \n352 |     guard tagStatus == kCCSuccess else {\n353 |       throw SecurityProviderError.authenticationTagVerificationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n354 |     }\n355 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:358:35: error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n356 |     // Compare tags\n357 |     guard tag.count == expectedTag.count \u0026\u0026 zip(tag, expectedTag).allSatisfy({ $0 == $1 }) else {\n358 |       throw SecurityProviderError.authenticationTagMismatch\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n359 |     }\n360 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:406:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n404 |     \n405 |     guard status == kCCSuccess else {\n406 |       throw SecurityProviderError.encryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n407 |     }\n408 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:443:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n441 |     \n442 |     guard status == kCCSuccess else {\n443 |       throw SecurityProviderError.decryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n444 |     }\n445 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:465:66: error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n463 |       // BLAKE2b is not directly supported in CommonCrypto\n464 |       // This would require a platform-specific implementation or use of a third-party library\n465 |       throw SecurityProviderError.unsupportedAlgorithm(algorithm.rawValue)\n    |                                                                  `- error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n466 |     }\n467 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:116:19: error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n114 |         // Check for specific error domains and codes\n115 |         if nsError.domain == NSOSStatusErrorDomain {\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:118:19: error: type 'SecurityStorageError' has no member 'systemError'\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'systemError'\n119 |         }\n120 |         \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:121:32: error: extra arguments at positions #2, #3 in call\n119 |         }\n120 |         \n121 |         return .operationFailed(error.localizedDescription, file: file, line: line)\n    |                                `- error: extra arguments at positions #2, #3 in call\n122 |       }\n123 |       \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProtocolError.swift:51:8: note: 'operationFailed' declared here\n 49 | \n 50 |   /// Generic operation failure with optional message\n 51 |   case operationFailed(String)\n    |        `- note: 'operationFailed' declared here\n 52 | \n 53 |   /// Invalid input provided to the operation\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:126:17: error: type 'SecurityStorageError' has no member 'unknownError'\n124 |       // If no error but also no result, it's a failure\n125 |       if result == nil {\n126 |         return .unknownError(file: file, line: line)\n    |                 `- error: type 'SecurityStorageError' has no member 'unknownError'\n127 |       }\n128 |       \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:130:15: error: type 'SecurityStorageError' has no member 'unknownError'\n128 |       \n129 |       // Default to unknown error\n130 |       return .unknownError(file: file, line: line)\n    |               `- error: type 'SecurityStorageError' has no member 'unknownError'\n131 |     }\n132 |   }\nTarget //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed to build\nINFO: Elapsed time: 0.835s, Critical Path: 0.74s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger",
    "success": true,
    "start_time": "2025-04-13T09:08:35.355681+01:00",
    "end_time": "2025-04-13T09:08:36.106306+01:00",
    "duration": "750.618417ms",
    "output": "INFO: Invocation ID: 11dc0842-1a12-4468-a6e7-4291ed09664f\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/CryptoLogger.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/CryptoLogger.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/CryptoLogger.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/libCryptoLogger.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoServicesApple:CryptoServicesApple",
    "success": false,
    "start_time": "2025-04-13T09:08:36.106314+01:00",
    "end_time": "2025-04-13T09:08:37.639099+01:00",
    "duration": "1.532771583s",
    "output": "INFO: Invocation ID: a1df9bbc-a07d-442b-a463-316450f7751f\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServicesApple:CryptoServicesApple (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServicesApple:CryptoServicesApple (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoServicesApple:CryptoServicesApple (1 packages loaded, 3 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServicesCore/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServicesCore.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceFactory.swift:73:35: warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 71 |             // This comment acknowledges we're deliberately using a deprecated method for testing purposes.\n 72 |             // We accept the warning as this is explicitly for testing environments.\n 73 |             actualSecureStorage = createMockSecureStorage()\n    |                                   `- warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 74 |         }\n 75 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceType.swift:58:9: error: switch must be exhaustive\n56 |     /// - Returns: The equivalent CryptoServiceType\n57 |     public static func from(providerType: SecurityProviderType) -\u003e CryptoServiceType {\n58 |         switch providerType {\n   |         |- error: switch must be exhaustive\n   |         |- note: add missing case: '.cryptoKit'\n   |         |- note: add missing case: '.system'\n   |         |- note: add missing case: '.hsm'\n   |         |- note: add missing case: '.platform'\n   |         `- note: add missing cases\n59 |         case .basic:\n60 |             return .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:74:34: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 72 |     // Validate minimum size (header + iv)\n 73 |     if packagedData.count \u003c headerSize + ivSize {\n 74 |       throw SecurityStorageError.invalidDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 75 |     }\n 76 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:80:36: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 78 |     for i in 0..\u003c4 {\n 79 |       if packagedData[i] != magicBytes[i] {\n 80 |         throw SecurityStorageError.invalidDataFormat\n    |                                    `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 81 |       }\n 82 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:87:34: error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 85 |     let version = packagedData[4]\n 86 |     if version \u003e formatVersion {\n 87 |       throw SecurityStorageError.unsupportedDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 88 |     }\n 89 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: extra arguments at positions #2, #3 in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: extra arguments at positions #2, #3 in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:172:19: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n170 |     \n171 |     return SecurityResultDTO(\n172 |       resultData: packagedData,\n    |                   `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:174:16: error: cannot infer contextual base in reference to member 'standard'\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n    |                `- error: cannot infer contextual base in reference to member 'standard'\n175 |     )\n176 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:182:14: error: cannot find 'kCCModeGCM' in scope\n180 |     let status = CCCryptorCreateWithMode(\n181 |       CCOperation(kCCEncrypt),\n182 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n183 |       CCAlgorithm(kCCAlgorithmAES),\n184 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:192:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n190 |     \n191 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n192 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n193 |     }\n194 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:201:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n199 |     // Process additional authenticated data if provided\n200 |     if let aad = authenticatedData, !aad.isEmpty {\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:203:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n204 |       }\n205 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:217:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n215 |     \n216 |     guard encStatus == kCCSuccess else {\n217 |       throw SecurityProviderError.encryptionFailed(encStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n218 |     }\n219 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:19: error: generic parameter 'Element' could not be inferred\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |                   `- error: generic parameter 'Element' could not be inferred\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:230:35: error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n228 |     \n229 |     guard finalStatus == kCCSuccess else {\n230 |       throw SecurityProviderError.encryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n231 |     }\n232 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:234:21: error: cannot find 'CCCryptorGCMFinal' in scope\n232 |     \n233 |     // Get the authentication tag\n234 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n235 |       cryptor,\n236 |       \u0026tagBuffer,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:241:35: error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n239 |     \n240 |     guard tagStatus == kCCSuccess else {\n241 |       throw SecurityProviderError.authenticationTagGenerationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n242 |     }\n243 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:278:35: error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n276 |     // Validate data length (must include tag)\n277 |     guard data.count \u003e= gcmTagLength else {\n278 |       throw SecurityProviderError.invalidDataFormat\n    |                                   `- error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n279 |     }\n280 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:293:14: error: cannot find 'kCCModeGCM' in scope\n291 |     let status = CCCryptorCreateWithMode(\n292 |       CCOperation(kCCDecrypt),\n293 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n294 |       CCAlgorithm(kCCAlgorithmAES),\n295 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:303:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n301 |     \n302 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n303 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n304 |     }\n305 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:312:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n310 |     // Process additional authenticated data if provided\n311 |     if let aad = authenticatedData, !aad.isEmpty {\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:314:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n315 |       }\n316 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:328:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n326 |     \n327 |     guard decStatus == kCCSuccess else {\n328 |       throw SecurityProviderError.decryptionFailed(decStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n329 |     }\n330 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:18: error: generic parameter 'Element' could not be inferred\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |                  `- error: generic parameter 'Element' could not be inferred\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:341:35: error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n339 |     \n340 |     guard finalStatus == kCCSuccess else {\n341 |       throw SecurityProviderError.decryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n342 |     }\n343 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:346:21: error: cannot find 'CCCryptorGCMFinal' in scope\n344 |     // Verify the authentication tag\n345 |     var expectedTag = [UInt8](repeating: 0, count: gcmTagLength)\n346 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n347 |       cryptor,\n348 |       \u0026expectedTag,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:353:35: error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n351 |     \n352 |     guard tagStatus == kCCSuccess else {\n353 |       throw SecurityProviderError.authenticationTagVerificationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n354 |     }\n355 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:358:35: error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n356 |     // Compare tags\n357 |     guard tag.count == expectedTag.count \u0026\u0026 zip(tag, expectedTag).allSatisfy({ $0 == $1 }) else {\n358 |       throw SecurityProviderError.authenticationTagMismatch\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n359 |     }\n360 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:406:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n404 |     \n405 |     guard status == kCCSuccess else {\n406 |       throw SecurityProviderError.encryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n407 |     }\n408 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:443:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n441 |     \n442 |     guard status == kCCSuccess else {\n443 |       throw SecurityProviderError.decryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n444 |     }\n445 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:465:66: error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n463 |       // BLAKE2b is not directly supported in CommonCrypto\n464 |       // This would require a platform-specific implementation or use of a third-party library\n465 |       throw SecurityProviderError.unsupportedAlgorithm(algorithm.rawValue)\n    |                                                                  `- error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n466 |     }\n467 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:116:19: error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n114 |         // Check for specific error domains and codes\n115 |         if nsError.domain == NSOSStatusErrorDomain {\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:118:19: error: type 'SecurityStorageError' has no member 'systemError'\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'systemError'\n119 |         }\n120 |         \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:121:32: error: extra arguments at positions #2, #3 in call\n119 |         }\n120 |         \n121 |         return .operationFailed(error.localizedDescription, file: file, line: line)\n    |                                `- error: extra arguments at positions #2, #3 in call\n122 |       }\n123 |       \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProtocolError.swift:51:8: note: 'operationFailed' declared here\n 49 | \n 50 |   /// Generic operation failure with optional message\n 51 |   case operationFailed(String)\n    |        `- note: 'operationFailed' declared here\n 52 | \n 53 |   /// Invalid input provided to the operation\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:126:17: error: type 'SecurityStorageError' has no member 'unknownError'\n124 |       // If no error but also no result, it's a failure\n125 |       if result == nil {\n126 |         return .unknownError(file: file, line: line)\n    |                 `- error: type 'SecurityStorageError' has no member 'unknownError'\n127 |       }\n128 |       \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:130:15: error: type 'SecurityStorageError' has no member 'unknownError'\n128 |       \n129 |       // Default to unknown error\n130 |       return .unknownError(file: file, line: line)\n    |               `- error: type 'SecurityStorageError' has no member 'unknownError'\n131 |     }\n132 |   }\nTarget //packages/UmbraImplementations/Sources/CryptoServicesApple:CryptoServicesApple failed to build\nINFO: Elapsed time: 0.835s, Critical Path: 0.74s\nINFO: 2 processes: 1 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore",
    "success": false,
    "start_time": "2025-04-13T09:08:37.639112+01:00",
    "end_time": "2025-04-13T09:08:39.213701+01:00",
    "duration": "1.5745755s",
    "output": "INFO: Invocation ID: a4c91e94-23cb-4cbb-99b0-74f046770a33\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServicesCore/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServicesCore.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceFactory.swift:73:35: warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 71 |             // This comment acknowledges we're deliberately using a deprecated method for testing purposes.\n 72 |             // We accept the warning as this is explicitly for testing environments.\n 73 |             actualSecureStorage = createMockSecureStorage()\n    |                                   `- warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 74 |         }\n 75 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceType.swift:58:9: error: switch must be exhaustive\n56 |     /// - Returns: The equivalent CryptoServiceType\n57 |     public static func from(providerType: SecurityProviderType) -\u003e CryptoServiceType {\n58 |         switch providerType {\n   |         |- error: switch must be exhaustive\n   |         |- note: add missing case: '.cryptoKit'\n   |         |- note: add missing case: '.system'\n   |         |- note: add missing case: '.hsm'\n   |         |- note: add missing case: '.platform'\n   |         `- note: add missing cases\n59 |         case .basic:\n60 |             return .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:74:34: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 72 |     // Validate minimum size (header + iv)\n 73 |     if packagedData.count \u003c headerSize + ivSize {\n 74 |       throw SecurityStorageError.invalidDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 75 |     }\n 76 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:80:36: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 78 |     for i in 0..\u003c4 {\n 79 |       if packagedData[i] != magicBytes[i] {\n 80 |         throw SecurityStorageError.invalidDataFormat\n    |                                    `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 81 |       }\n 82 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:87:34: error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 85 |     let version = packagedData[4]\n 86 |     if version \u003e formatVersion {\n 87 |       throw SecurityStorageError.unsupportedDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 88 |     }\n 89 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: extra arguments at positions #2, #3 in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: extra arguments at positions #2, #3 in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:172:19: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n170 |     \n171 |     return SecurityResultDTO(\n172 |       resultData: packagedData,\n    |                   `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:174:16: error: cannot infer contextual base in reference to member 'standard'\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n    |                `- error: cannot infer contextual base in reference to member 'standard'\n175 |     )\n176 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:182:14: error: cannot find 'kCCModeGCM' in scope\n180 |     let status = CCCryptorCreateWithMode(\n181 |       CCOperation(kCCEncrypt),\n182 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n183 |       CCAlgorithm(kCCAlgorithmAES),\n184 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:192:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n190 |     \n191 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n192 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n193 |     }\n194 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:201:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n199 |     // Process additional authenticated data if provided\n200 |     if let aad = authenticatedData, !aad.isEmpty {\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:203:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n204 |       }\n205 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:217:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n215 |     \n216 |     guard encStatus == kCCSuccess else {\n217 |       throw SecurityProviderError.encryptionFailed(encStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n218 |     }\n219 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:19: error: generic parameter 'Element' could not be inferred\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |                   `- error: generic parameter 'Element' could not be inferred\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:230:35: error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n228 |     \n229 |     guard finalStatus == kCCSuccess else {\n230 |       throw SecurityProviderError.encryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n231 |     }\n232 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:234:21: error: cannot find 'CCCryptorGCMFinal' in scope\n232 |     \n233 |     // Get the authentication tag\n234 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n235 |       cryptor,\n236 |       \u0026tagBuffer,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:241:35: error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n239 |     \n240 |     guard tagStatus == kCCSuccess else {\n241 |       throw SecurityProviderError.authenticationTagGenerationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n242 |     }\n243 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:278:35: error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n276 |     // Validate data length (must include tag)\n277 |     guard data.count \u003e= gcmTagLength else {\n278 |       throw SecurityProviderError.invalidDataFormat\n    |                                   `- error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n279 |     }\n280 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:293:14: error: cannot find 'kCCModeGCM' in scope\n291 |     let status = CCCryptorCreateWithMode(\n292 |       CCOperation(kCCDecrypt),\n293 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n294 |       CCAlgorithm(kCCAlgorithmAES),\n295 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:303:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n301 |     \n302 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n303 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n304 |     }\n305 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:312:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n310 |     // Process additional authenticated data if provided\n311 |     if let aad = authenticatedData, !aad.isEmpty {\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:314:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n315 |       }\n316 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:328:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n326 |     \n327 |     guard decStatus == kCCSuccess else {\n328 |       throw SecurityProviderError.decryptionFailed(decStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n329 |     }\n330 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:18: error: generic parameter 'Element' could not be inferred\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |                  `- error: generic parameter 'Element' could not be inferred\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:341:35: error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n339 |     \n340 |     guard finalStatus == kCCSuccess else {\n341 |       throw SecurityProviderError.decryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n342 |     }\n343 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:346:21: error: cannot find 'CCCryptorGCMFinal' in scope\n344 |     // Verify the authentication tag\n345 |     var expectedTag = [UInt8](repeating: 0, count: gcmTagLength)\n346 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n347 |       cryptor,\n348 |       \u0026expectedTag,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:353:35: error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n351 |     \n352 |     guard tagStatus == kCCSuccess else {\n353 |       throw SecurityProviderError.authenticationTagVerificationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n354 |     }\n355 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:358:35: error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n356 |     // Compare tags\n357 |     guard tag.count == expectedTag.count \u0026\u0026 zip(tag, expectedTag).allSatisfy({ $0 == $1 }) else {\n358 |       throw SecurityProviderError.authenticationTagMismatch\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n359 |     }\n360 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:406:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n404 |     \n405 |     guard status == kCCSuccess else {\n406 |       throw SecurityProviderError.encryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n407 |     }\n408 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:443:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n441 |     \n442 |     guard status == kCCSuccess else {\n443 |       throw SecurityProviderError.decryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n444 |     }\n445 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:465:66: error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n463 |       // BLAKE2b is not directly supported in CommonCrypto\n464 |       // This would require a platform-specific implementation or use of a third-party library\n465 |       throw SecurityProviderError.unsupportedAlgorithm(algorithm.rawValue)\n    |                                                                  `- error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n466 |     }\n467 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:116:19: error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n114 |         // Check for specific error domains and codes\n115 |         if nsError.domain == NSOSStatusErrorDomain {\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:118:19: error: type 'SecurityStorageError' has no member 'systemError'\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'systemError'\n119 |         }\n120 |         \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:121:32: error: extra arguments at positions #2, #3 in call\n119 |         }\n120 |         \n121 |         return .operationFailed(error.localizedDescription, file: file, line: line)\n    |                                `- error: extra arguments at positions #2, #3 in call\n122 |       }\n123 |       \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProtocolError.swift:51:8: note: 'operationFailed' declared here\n 49 | \n 50 |   /// Generic operation failure with optional message\n 51 |   case operationFailed(String)\n    |        `- note: 'operationFailed' declared here\n 52 | \n 53 |   /// Invalid input provided to the operation\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:126:17: error: type 'SecurityStorageError' has no member 'unknownError'\n124 |       // If no error but also no result, it's a failure\n125 |       if result == nil {\n126 |         return .unknownError(file: file, line: line)\n    |                 `- error: type 'SecurityStorageError' has no member 'unknownError'\n127 |       }\n128 |       \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:130:15: error: type 'SecurityStorageError' has no member 'unknownError'\n128 |       \n129 |       // Default to unknown error\n130 |       return .unknownError(file: file, line: line)\n    |               `- error: type 'SecurityStorageError' has no member 'unknownError'\n131 |     }\n132 |   }\nTarget //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore failed to build\nINFO: Elapsed time: 0.851s, Critical Path: 0.74s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoServicesStandard:CryptoServicesStandard",
    "success": false,
    "start_time": "2025-04-13T09:08:39.21372+01:00",
    "end_time": "2025-04-13T09:08:40.754602+01:00",
    "duration": "1.540869167s",
    "output": "INFO: Invocation ID: f281f40e-5ac0-4d48-a5a0-89f14ee92565\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServicesStandard:CryptoServicesStandard (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServicesStandard:CryptoServicesStandard (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoServicesStandard:CryptoServicesStandard (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServicesCore/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServicesCore.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceFactory.swift:73:35: warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 71 |             // This comment acknowledges we're deliberately using a deprecated method for testing purposes.\n 72 |             // We accept the warning as this is explicitly for testing environments.\n 73 |             actualSecureStorage = createMockSecureStorage()\n    |                                   `- warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 74 |         }\n 75 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceType.swift:58:9: error: switch must be exhaustive\n56 |     /// - Returns: The equivalent CryptoServiceType\n57 |     public static func from(providerType: SecurityProviderType) -\u003e CryptoServiceType {\n58 |         switch providerType {\n   |         |- error: switch must be exhaustive\n   |         |- note: add missing case: '.cryptoKit'\n   |         |- note: add missing case: '.system'\n   |         |- note: add missing case: '.hsm'\n   |         |- note: add missing case: '.platform'\n   |         `- note: add missing cases\n59 |         case .basic:\n60 |             return .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:74:34: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 72 |     // Validate minimum size (header + iv)\n 73 |     if packagedData.count \u003c headerSize + ivSize {\n 74 |       throw SecurityStorageError.invalidDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 75 |     }\n 76 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:80:36: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 78 |     for i in 0..\u003c4 {\n 79 |       if packagedData[i] != magicBytes[i] {\n 80 |         throw SecurityStorageError.invalidDataFormat\n    |                                    `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 81 |       }\n 82 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:87:34: error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 85 |     let version = packagedData[4]\n 86 |     if version \u003e formatVersion {\n 87 |       throw SecurityStorageError.unsupportedDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 88 |     }\n 89 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: extra arguments at positions #2, #3 in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: extra arguments at positions #2, #3 in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:172:19: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n170 |     \n171 |     return SecurityResultDTO(\n172 |       resultData: packagedData,\n    |                   `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:174:16: error: cannot infer contextual base in reference to member 'standard'\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n    |                `- error: cannot infer contextual base in reference to member 'standard'\n175 |     )\n176 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:182:14: error: cannot find 'kCCModeGCM' in scope\n180 |     let status = CCCryptorCreateWithMode(\n181 |       CCOperation(kCCEncrypt),\n182 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n183 |       CCAlgorithm(kCCAlgorithmAES),\n184 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:192:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n190 |     \n191 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n192 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n193 |     }\n194 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:201:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n199 |     // Process additional authenticated data if provided\n200 |     if let aad = authenticatedData, !aad.isEmpty {\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:203:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n204 |       }\n205 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:217:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n215 |     \n216 |     guard encStatus == kCCSuccess else {\n217 |       throw SecurityProviderError.encryptionFailed(encStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n218 |     }\n219 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:19: error: generic parameter 'Element' could not be inferred\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |                   `- error: generic parameter 'Element' could not be inferred\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:230:35: error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n228 |     \n229 |     guard finalStatus == kCCSuccess else {\n230 |       throw SecurityProviderError.encryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n231 |     }\n232 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:234:21: error: cannot find 'CCCryptorGCMFinal' in scope\n232 |     \n233 |     // Get the authentication tag\n234 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n235 |       cryptor,\n236 |       \u0026tagBuffer,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:241:35: error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n239 |     \n240 |     guard tagStatus == kCCSuccess else {\n241 |       throw SecurityProviderError.authenticationTagGenerationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n242 |     }\n243 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:278:35: error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n276 |     // Validate data length (must include tag)\n277 |     guard data.count \u003e= gcmTagLength else {\n278 |       throw SecurityProviderError.invalidDataFormat\n    |                                   `- error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n279 |     }\n280 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:293:14: error: cannot find 'kCCModeGCM' in scope\n291 |     let status = CCCryptorCreateWithMode(\n292 |       CCOperation(kCCDecrypt),\n293 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n294 |       CCAlgorithm(kCCAlgorithmAES),\n295 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:303:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n301 |     \n302 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n303 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n304 |     }\n305 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:312:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n310 |     // Process additional authenticated data if provided\n311 |     if let aad = authenticatedData, !aad.isEmpty {\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:314:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n315 |       }\n316 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:328:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n326 |     \n327 |     guard decStatus == kCCSuccess else {\n328 |       throw SecurityProviderError.decryptionFailed(decStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n329 |     }\n330 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:18: error: generic parameter 'Element' could not be inferred\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |                  `- error: generic parameter 'Element' could not be inferred\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:341:35: error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n339 |     \n340 |     guard finalStatus == kCCSuccess else {\n341 |       throw SecurityProviderError.decryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n342 |     }\n343 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:346:21: error: cannot find 'CCCryptorGCMFinal' in scope\n344 |     // Verify the authentication tag\n345 |     var expectedTag = [UInt8](repeating: 0, count: gcmTagLength)\n346 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n347 |       cryptor,\n348 |       \u0026expectedTag,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:353:35: error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n351 |     \n352 |     guard tagStatus == kCCSuccess else {\n353 |       throw SecurityProviderError.authenticationTagVerificationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n354 |     }\n355 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:358:35: error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n356 |     // Compare tags\n357 |     guard tag.count == expectedTag.count \u0026\u0026 zip(tag, expectedTag).allSatisfy({ $0 == $1 }) else {\n358 |       throw SecurityProviderError.authenticationTagMismatch\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n359 |     }\n360 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:406:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n404 |     \n405 |     guard status == kCCSuccess else {\n406 |       throw SecurityProviderError.encryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n407 |     }\n408 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:443:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n441 |     \n442 |     guard status == kCCSuccess else {\n443 |       throw SecurityProviderError.decryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n444 |     }\n445 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:465:66: error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n463 |       // BLAKE2b is not directly supported in CommonCrypto\n464 |       // This would require a platform-specific implementation or use of a third-party library\n465 |       throw SecurityProviderError.unsupportedAlgorithm(algorithm.rawValue)\n    |                                                                  `- error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n466 |     }\n467 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:116:19: error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n114 |         // Check for specific error domains and codes\n115 |         if nsError.domain == NSOSStatusErrorDomain {\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:118:19: error: type 'SecurityStorageError' has no member 'systemError'\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'systemError'\n119 |         }\n120 |         \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:121:32: error: extra arguments at positions #2, #3 in call\n119 |         }\n120 |         \n121 |         return .operationFailed(error.localizedDescription, file: file, line: line)\n    |                                `- error: extra arguments at positions #2, #3 in call\n122 |       }\n123 |       \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProtocolError.swift:51:8: note: 'operationFailed' declared here\n 49 | \n 50 |   /// Generic operation failure with optional message\n 51 |   case operationFailed(String)\n    |        `- note: 'operationFailed' declared here\n 52 | \n 53 |   /// Invalid input provided to the operation\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:126:17: error: type 'SecurityStorageError' has no member 'unknownError'\n124 |       // If no error but also no result, it's a failure\n125 |       if result == nil {\n126 |         return .unknownError(file: file, line: line)\n    |                 `- error: type 'SecurityStorageError' has no member 'unknownError'\n127 |       }\n128 |       \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:130:15: error: type 'SecurityStorageError' has no member 'unknownError'\n128 |       \n129 |       // Default to unknown error\n130 |       return .unknownError(file: file, line: line)\n    |               `- error: type 'SecurityStorageError' has no member 'unknownError'\n131 |     }\n132 |   }\nTarget //packages/UmbraImplementations/Sources/CryptoServicesStandard:CryptoServicesStandard failed to build\nINFO: Elapsed time: 0.832s, Critical Path: 0.74s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoServicesXfn:CryptoServicesXfn",
    "success": false,
    "start_time": "2025-04-13T09:08:40.754614+01:00",
    "end_time": "2025-04-13T09:08:42.355254+01:00",
    "duration": "1.600626958s",
    "output": "INFO: Invocation ID: 982b8540-85bc-4366-81db-af7aefebd11c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServicesXfn:CryptoServicesXfn (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServicesXfn:CryptoServicesXfn (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoServicesXfn:CryptoServicesXfn (1 packages loaded, 3 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServicesCore/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServicesCore.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceFactory.swift:73:35: warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 71 |             // This comment acknowledges we're deliberately using a deprecated method for testing purposes.\n 72 |             // We accept the warning as this is explicitly for testing environments.\n 73 |             actualSecureStorage = createMockSecureStorage()\n    |                                   `- warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 74 |         }\n 75 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceType.swift:58:9: error: switch must be exhaustive\n56 |     /// - Returns: The equivalent CryptoServiceType\n57 |     public static func from(providerType: SecurityProviderType) -\u003e CryptoServiceType {\n58 |         switch providerType {\n   |         |- error: switch must be exhaustive\n   |         |- note: add missing case: '.cryptoKit'\n   |         |- note: add missing case: '.system'\n   |         |- note: add missing case: '.hsm'\n   |         |- note: add missing case: '.platform'\n   |         `- note: add missing cases\n59 |         case .basic:\n60 |             return .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:74:34: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 72 |     // Validate minimum size (header + iv)\n 73 |     if packagedData.count \u003c headerSize + ivSize {\n 74 |       throw SecurityStorageError.invalidDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 75 |     }\n 76 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:80:36: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 78 |     for i in 0..\u003c4 {\n 79 |       if packagedData[i] != magicBytes[i] {\n 80 |         throw SecurityStorageError.invalidDataFormat\n    |                                    `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 81 |       }\n 82 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:87:34: error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 85 |     let version = packagedData[4]\n 86 |     if version \u003e formatVersion {\n 87 |       throw SecurityStorageError.unsupportedDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 88 |     }\n 89 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: extra arguments at positions #2, #3 in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: extra arguments at positions #2, #3 in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:172:19: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n170 |     \n171 |     return SecurityResultDTO(\n172 |       resultData: packagedData,\n    |                   `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:174:16: error: cannot infer contextual base in reference to member 'standard'\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n    |                `- error: cannot infer contextual base in reference to member 'standard'\n175 |     )\n176 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:182:14: error: cannot find 'kCCModeGCM' in scope\n180 |     let status = CCCryptorCreateWithMode(\n181 |       CCOperation(kCCEncrypt),\n182 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n183 |       CCAlgorithm(kCCAlgorithmAES),\n184 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:192:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n190 |     \n191 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n192 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n193 |     }\n194 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:201:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n199 |     // Process additional authenticated data if provided\n200 |     if let aad = authenticatedData, !aad.isEmpty {\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:203:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n204 |       }\n205 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:217:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n215 |     \n216 |     guard encStatus == kCCSuccess else {\n217 |       throw SecurityProviderError.encryptionFailed(encStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n218 |     }\n219 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:19: error: generic parameter 'Element' could not be inferred\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |                   `- error: generic parameter 'Element' could not be inferred\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:230:35: error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n228 |     \n229 |     guard finalStatus == kCCSuccess else {\n230 |       throw SecurityProviderError.encryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n231 |     }\n232 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:234:21: error: cannot find 'CCCryptorGCMFinal' in scope\n232 |     \n233 |     // Get the authentication tag\n234 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n235 |       cryptor,\n236 |       \u0026tagBuffer,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:241:35: error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n239 |     \n240 |     guard tagStatus == kCCSuccess else {\n241 |       throw SecurityProviderError.authenticationTagGenerationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n242 |     }\n243 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:278:35: error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n276 |     // Validate data length (must include tag)\n277 |     guard data.count \u003e= gcmTagLength else {\n278 |       throw SecurityProviderError.invalidDataFormat\n    |                                   `- error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n279 |     }\n280 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:293:14: error: cannot find 'kCCModeGCM' in scope\n291 |     let status = CCCryptorCreateWithMode(\n292 |       CCOperation(kCCDecrypt),\n293 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n294 |       CCAlgorithm(kCCAlgorithmAES),\n295 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:303:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n301 |     \n302 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n303 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n304 |     }\n305 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:312:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n310 |     // Process additional authenticated data if provided\n311 |     if let aad = authenticatedData, !aad.isEmpty {\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:314:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n315 |       }\n316 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:328:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n326 |     \n327 |     guard decStatus == kCCSuccess else {\n328 |       throw SecurityProviderError.decryptionFailed(decStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n329 |     }\n330 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:18: error: generic parameter 'Element' could not be inferred\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |                  `- error: generic parameter 'Element' could not be inferred\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:341:35: error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n339 |     \n340 |     guard finalStatus == kCCSuccess else {\n341 |       throw SecurityProviderError.decryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n342 |     }\n343 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:346:21: error: cannot find 'CCCryptorGCMFinal' in scope\n344 |     // Verify the authentication tag\n345 |     var expectedTag = [UInt8](repeating: 0, count: gcmTagLength)\n346 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n347 |       cryptor,\n348 |       \u0026expectedTag,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:353:35: error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n351 |     \n352 |     guard tagStatus == kCCSuccess else {\n353 |       throw SecurityProviderError.authenticationTagVerificationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n354 |     }\n355 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:358:35: error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n356 |     // Compare tags\n357 |     guard tag.count == expectedTag.count \u0026\u0026 zip(tag, expectedTag).allSatisfy({ $0 == $1 }) else {\n358 |       throw SecurityProviderError.authenticationTagMismatch\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n359 |     }\n360 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:406:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n404 |     \n405 |     guard status == kCCSuccess else {\n406 |       throw SecurityProviderError.encryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n407 |     }\n408 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:443:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n441 |     \n442 |     guard status == kCCSuccess else {\n443 |       throw SecurityProviderError.decryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n444 |     }\n445 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:465:66: error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n463 |       // BLAKE2b is not directly supported in CommonCrypto\n464 |       // This would require a platform-specific implementation or use of a third-party library\n465 |       throw SecurityProviderError.unsupportedAlgorithm(algorithm.rawValue)\n    |                                                                  `- error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n466 |     }\n467 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:116:19: error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n114 |         // Check for specific error domains and codes\n115 |         if nsError.domain == NSOSStatusErrorDomain {\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:118:19: error: type 'SecurityStorageError' has no member 'systemError'\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'systemError'\n119 |         }\n120 |         \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:121:32: error: extra arguments at positions #2, #3 in call\n119 |         }\n120 |         \n121 |         return .operationFailed(error.localizedDescription, file: file, line: line)\n    |                                `- error: extra arguments at positions #2, #3 in call\n122 |       }\n123 |       \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProtocolError.swift:51:8: note: 'operationFailed' declared here\n 49 | \n 50 |   /// Generic operation failure with optional message\n 51 |   case operationFailed(String)\n    |        `- note: 'operationFailed' declared here\n 52 | \n 53 |   /// Invalid input provided to the operation\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:126:17: error: type 'SecurityStorageError' has no member 'unknownError'\n124 |       // If no error but also no result, it's a failure\n125 |       if result == nil {\n126 |         return .unknownError(file: file, line: line)\n    |                 `- error: type 'SecurityStorageError' has no member 'unknownError'\n127 |       }\n128 |       \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:130:15: error: type 'SecurityStorageError' has no member 'unknownError'\n128 |       \n129 |       // Default to unknown error\n130 |       return .unknownError(file: file, line: line)\n    |               `- error: type 'SecurityStorageError' has no member 'unknownError'\n131 |     }\n132 |   }\nTarget //packages/UmbraImplementations/Sources/CryptoServicesXfn:CryptoServicesXfn failed to build\nINFO: Elapsed time: 0.824s, Critical Path: 0.74s\nINFO: 2 processes: 1 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices",
    "success": true,
    "start_time": "2025-04-13T09:08:42.355267+01:00",
    "end_time": "2025-04-13T09:08:43.194641+01:00",
    "duration": "839.3665ms",
    "output": "INFO: Invocation ID: 46a63ba3-87d8-4fa5-8efb-c3ec96c8befd\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/libCryptoXPCServices.a\nINFO: Elapsed time: 0.135s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices",
    "success": true,
    "start_time": "2025-04-13T09:08:43.194647+01:00",
    "end_time": "2025-04-13T09:08:43.990727+01:00",
    "duration": "796.073083ms",
    "output": "INFO: Invocation ID: c96dbb5d-0c12-4363-89b9-2f981153a6aa\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices (2 packages loaded, 8 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/DateTimeServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/DateTimeServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/DateTimeServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/libDateTimeServices.a\nINFO: Elapsed time: 0.100s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl",
    "success": true,
    "start_time": "2025-04-13T09:08:43.990751+01:00",
    "end_time": "2025-04-13T09:08:44.778732+01:00",
    "duration": "787.97475ms",
    "output": "INFO: Invocation ID: b4e94f39-6c97-4312-b0cf-b7cac19be89e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/ErrorDomainsImpl.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/ErrorDomainsImpl.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/ErrorDomainsImpl.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/libErrorDomainsImpl.a\nINFO: Elapsed time: 0.082s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl",
    "success": true,
    "start_time": "2025-04-13T09:08:44.778739+01:00",
    "end_time": "2025-04-13T09:08:45.515145+01:00",
    "duration": "736.400042ms",
    "output": "INFO: Invocation ID: dc0bc254-e9ca-4ef6-84ae-b4879abbb7ec\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/ErrorHandlingImpl.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/ErrorHandlingImpl.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/ErrorHandlingImpl.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/libErrorHandlingImpl.a\nINFO: Elapsed time: 0.082s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices",
    "success": true,
    "start_time": "2025-04-13T09:08:45.515153+01:00",
    "end_time": "2025-04-13T09:08:46.273146+01:00",
    "duration": "757.986792ms",
    "output": "INFO: Invocation ID: 10a281b7-ad80-4ac2-a690-447a461bed88\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices (2 packages loaded, 8 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/ErrorLoggingServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/ErrorLoggingServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/ErrorLoggingServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/libErrorLoggingServices.a\nINFO: Elapsed time: 0.089s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/FileMetadataOperations:FileMetadataOperations",
    "success": true,
    "start_time": "2025-04-13T09:08:46.273153+01:00",
    "end_time": "2025-04-13T09:08:47.048686+01:00",
    "duration": "775.525959ms",
    "output": "INFO: Invocation ID: b36bb944-5963-4b15-860f-8ddbb2d19a0e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/FileMetadataOperations:FileMetadataOperations (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/FileMetadataOperations:FileMetadataOperations (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/FileMetadataOperations:FileMetadataOperations (1 packages loaded, 3 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/FileMetadataOperations:FileMetadataOperations up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/FileMetadataOperations/FileMetadataOperations.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/FileMetadataOperations/FileMetadataOperations.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/FileMetadataOperations/FileMetadataOperations.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/FileMetadataOperations/libFileMetadataOperations.a\nINFO: Elapsed time: 0.089s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/FileSandboxing:FileSandboxing",
    "success": true,
    "start_time": "2025-04-13T09:08:47.048693+01:00",
    "end_time": "2025-04-13T09:08:47.831604+01:00",
    "duration": "782.903667ms",
    "output": "INFO: Invocation ID: e5619d4b-3d1c-4ad9-a682-8af4e90fd853\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/FileSandboxing:FileSandboxing (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/FileSandboxing:FileSandboxing (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/FileSandboxing:FileSandboxing (1 packages loaded, 3 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/FileSandboxing:FileSandboxing up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/FileSandboxing/FileSandboxing.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/FileSandboxing/FileSandboxing.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/FileSandboxing/FileSandboxing.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/FileSandboxing/libFileSandboxing.a\nINFO: Elapsed time: 0.085s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices",
    "success": true,
    "start_time": "2025-04-13T09:08:47.831612+01:00",
    "end_time": "2025-04-13T09:08:54.841949+01:00",
    "duration": "7.010278834s",
    "output": "INFO: Invocation ID: 8348053a-56d2-45f8-984d-274e04625a93\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices (2 packages loaded, 10 targets configured).\n[4 / 12] Compiling Swift module //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs; 1s disk-cache, worker\n[5 / 12] Compiling Swift module //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces; 0s disk-cache, worker\n[6 / 12] Compiling Swift module //packages/UmbraImplementations/Sources/CoreFileOperations:CoreFileOperations; 0s disk-cache, worker ... (4 actions running)\n[10 / 12] Compiling Swift module //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices; 0s disk-cache, worker\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/FileSystemServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/FileSystemServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/FileSystemServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/libFileSystemServices.a\nINFO: Elapsed time: 6.366s, Critical Path: 6.24s\nINFO: 9 processes: 3 action cache hit, 1 internal, 8 worker.\nINFO: Build completed successfully, 9 total actions\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices",
    "success": true,
    "start_time": "2025-04-13T09:08:54.841966+01:00",
    "end_time": "2025-04-13T09:08:59.240148+01:00",
    "duration": "4.398144917s",
    "output": "INFO: Invocation ID: e2e5c40c-20f0-4b63-823f-18f17fcaebfe\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices (0 packages loaded, 0 targets configured).\n[7 / 13] Compiling Swift module //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders; 1s disk-cache, worker ... (3 actions, 2 running)\n[11 / 13] Compiling Swift module //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices; 1s disk-cache, worker\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/KeychainServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/KeychainServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/KeychainServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/libKeychainServices.a\nINFO: Elapsed time: 3.723s, Critical Path: 3.64s\nINFO: 12 processes: 1 action cache hit, 1 internal, 11 worker.\nINFO: Build completed successfully, 12 total actions\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor",
    "success": true,
    "start_time": "2025-04-13T09:08:59.240158+01:00",
    "end_time": "2025-04-13T09:09:00.479127+01:00",
    "duration": "1.238959625s",
    "output": "INFO: Invocation ID: 1a28efb6-129c-4904-ad91-74b99b736533\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/KeychainSecurityActor.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/KeychainSecurityActor.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/KeychainSecurityActor.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/libKeychainSecurityActor.a\nINFO: Elapsed time: 0.593s, Critical Path: 0.49s\nINFO: 2 processes: 2 action cache hit, 1 internal, 1 worker.\nINFO: Build completed successfully, 2 total actions\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor",
    "success": true,
    "start_time": "2025-04-13T09:09:00.479135+01:00",
    "end_time": "2025-04-13T09:09:01.280582+01:00",
    "duration": "801.440334ms",
    "output": "INFO: Invocation ID: b6e85434-7ad0-4ea4-a06d-73b615f0553b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/KeychainSecurityActor.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/KeychainSecurityActor.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/KeychainSecurityActor.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/libKeychainSecurityActor.a\nINFO: Elapsed time: 0.088s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks",
    "success": true,
    "start_time": "2025-04-13T09:09:01.2806+01:00",
    "end_time": "2025-04-13T09:09:02.026028+01:00",
    "duration": "745.4225ms",
    "output": "INFO: Invocation ID: 7967339c-c62c-462d-bdb9-0d4139d64f35\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/Fallbacks.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/Fallbacks.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/Fallbacks.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/libFallbacks.a\nINFO: Elapsed time: 0.073s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger",
    "success": true,
    "start_time": "2025-04-13T09:09:02.02605+01:00",
    "end_time": "2025-04-13T09:09:02.82093+01:00",
    "duration": "794.873167ms",
    "output": "INFO: Invocation ID: e5371869-011c-442b-b024-9dbf0326e46b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/KeychainLogger.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/KeychainLogger.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/KeychainLogger.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/libKeychainLogger.a\nINFO: Elapsed time: 0.091s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters",
    "success": true,
    "start_time": "2025-04-13T09:09:02.820937+01:00",
    "end_time": "2025-04-13T09:09:03.60739+01:00",
    "duration": "786.4465ms",
    "output": "INFO: Invocation ID: 043b1b58-f0cd-4252-93a3-2af07e25717b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/libLoggingAdapters.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices",
    "success": true,
    "start_time": "2025-04-13T09:09:03.607397+01:00",
    "end_time": "2025-04-13T09:09:04.41066+01:00",
    "duration": "803.255875ms",
    "output": "INFO: Invocation ID: 03f4f5cb-d821-4b27-a5cc-e18dc72eec79\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/LoggingServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/LoggingServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/LoggingServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/libLoggingServices.a\nINFO: Elapsed time: 0.092s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices",
    "success": true,
    "start_time": "2025-04-13T09:09:04.410667+01:00",
    "end_time": "2025-04-13T09:09:05.202346+01:00",
    "duration": "791.673125ms",
    "output": "INFO: Invocation ID: 07fc4d4e-0f46-402f-a97f-4d35eee3d924\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/LoggingWrapperServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/LoggingWrapperServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/LoggingWrapperServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/libLoggingWrapperServices.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices",
    "success": true,
    "start_time": "2025-04-13T09:09:05.202354+01:00",
    "end_time": "2025-04-13T09:09:07.720559+01:00",
    "duration": "2.518184042s",
    "output": "INFO: Invocation ID: 09a536cc-2da0-4b65-9ff0-7d9fa59f45ce\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices (2 packages loaded, 18 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/NetworkServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/NetworkServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/NetworkServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/libNetworkServices.a\nINFO: Elapsed time: 1.839s, Critical Path: 1.74s\nINFO: 3 processes: 3 action cache hit, 1 internal, 2 worker.\nINFO: Build completed successfully, 3 total actions\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices",
    "success": true,
    "start_time": "2025-04-13T09:09:07.720566+01:00",
    "end_time": "2025-04-13T09:09:09.161103+01:00",
    "duration": "1.440525084s",
    "output": "INFO: Invocation ID: bed8de93-e104-43b3-bcb1-1ba9b0a49707\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices (1 packages loaded, 7 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/RepositoryServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/RepositoryServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/RepositoryServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/libRepositoryServices.a\nINFO: Elapsed time: 0.759s, Critical Path: 0.67s\nINFO: 2 processes: 2 action cache hit, 1 internal, 1 worker.\nINFO: Build completed successfully, 2 total actions\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ResticServices:ResticServices",
    "success": true,
    "start_time": "2025-04-13T09:09:09.161128+01:00",
    "end_time": "2025-04-13T09:09:10.798127+01:00",
    "duration": "1.636985s",
    "output": "INFO: Invocation ID: 6303b1a0-0d8d-487c-a1f3-31461033646a\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ResticServices:ResticServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ResticServices:ResticServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ResticServices:ResticServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ResticServices:ResticServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/libResticServices.a\nINFO: Elapsed time: 0.923s, Critical Path: 0.83s\nINFO: 2 processes: 1 action cache hit, 1 internal, 1 worker.\nINFO: Build completed successfully, 2 total actions\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecureFileOperations:SecureFileOperations",
    "success": true,
    "start_time": "2025-04-13T09:09:10.798132+01:00",
    "end_time": "2025-04-13T09:09:11.595569+01:00",
    "duration": "797.430167ms",
    "output": "INFO: Invocation ID: 291e5771-54e0-43a0-baa9-c921319d370f\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecureFileOperations:SecureFileOperations (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecureFileOperations:SecureFileOperations (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecureFileOperations:SecureFileOperations (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecureFileOperations:SecureFileOperations up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecureFileOperations/SecureFileOperations.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecureFileOperations/SecureFileOperations.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecureFileOperations/SecureFileOperations.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecureFileOperations/libSecureFileOperations.a\nINFO: Elapsed time: 0.093s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore",
    "success": true,
    "start_time": "2025-04-13T09:09:11.595577+01:00",
    "end_time": "2025-04-13T09:09:12.393807+01:00",
    "duration": "798.222875ms",
    "output": "INFO: Invocation ID: 11aa2e20-a6f3-4bb2-9d02-09f4543b94ab\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/SecurityCore.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/SecurityCore.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/SecurityCore.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/libSecurityCore.a\nINFO: Elapsed time: 0.090s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices",
    "success": false,
    "start_time": "2025-04-13T09:09:12.393813+01:00",
    "end_time": "2025-04-13T09:09:14.467125+01:00",
    "duration": "2.073293875s",
    "output": "INFO: Invocation ID: c29c256d-71ad-4546-982d-25278fdc9d25\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices (3 packages loaded, 14 targets configured).\n[11 / 21] Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore; 0s disk-cache, worker ... (2 actions, 1 running)\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServicesCore/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServicesCore.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceFactory.swift:73:35: warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 71 |             // This comment acknowledges we're deliberately using a deprecated method for testing purposes.\n 72 |             // We accept the warning as this is explicitly for testing environments.\n 73 |             actualSecureStorage = createMockSecureStorage()\n    |                                   `- warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 74 |         }\n 75 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceType.swift:58:9: error: switch must be exhaustive\n56 |     /// - Returns: The equivalent CryptoServiceType\n57 |     public static func from(providerType: SecurityProviderType) -\u003e CryptoServiceType {\n58 |         switch providerType {\n   |         |- error: switch must be exhaustive\n   |         |- note: add missing case: '.cryptoKit'\n   |         |- note: add missing case: '.system'\n   |         |- note: add missing case: '.hsm'\n   |         |- note: add missing case: '.platform'\n   |         `- note: add missing cases\n59 |         case .basic:\n60 |             return .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:74:34: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 72 |     // Validate minimum size (header + iv)\n 73 |     if packagedData.count \u003c headerSize + ivSize {\n 74 |       throw SecurityStorageError.invalidDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 75 |     }\n 76 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:80:36: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 78 |     for i in 0..\u003c4 {\n 79 |       if packagedData[i] != magicBytes[i] {\n 80 |         throw SecurityStorageError.invalidDataFormat\n    |                                    `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 81 |       }\n 82 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:87:34: error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 85 |     let version = packagedData[4]\n 86 |     if version \u003e formatVersion {\n 87 |       throw SecurityStorageError.unsupportedDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 88 |     }\n 89 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: extra arguments at positions #2, #3 in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: extra arguments at positions #2, #3 in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:172:19: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n170 |     \n171 |     return SecurityResultDTO(\n172 |       resultData: packagedData,\n    |                   `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:174:16: error: cannot infer contextual base in reference to member 'standard'\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n    |                `- error: cannot infer contextual base in reference to member 'standard'\n175 |     )\n176 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:182:14: error: cannot find 'kCCModeGCM' in scope\n180 |     let status = CCCryptorCreateWithMode(\n181 |       CCOperation(kCCEncrypt),\n182 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n183 |       CCAlgorithm(kCCAlgorithmAES),\n184 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:192:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n190 |     \n191 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n192 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n193 |     }\n194 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:201:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n199 |     // Process additional authenticated data if provided\n200 |     if let aad = authenticatedData, !aad.isEmpty {\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:203:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n204 |       }\n205 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:217:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n215 |     \n216 |     guard encStatus == kCCSuccess else {\n217 |       throw SecurityProviderError.encryptionFailed(encStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n218 |     }\n219 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:19: error: generic parameter 'Element' could not be inferred\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |                   `- error: generic parameter 'Element' could not be inferred\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:230:35: error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n228 |     \n229 |     guard finalStatus == kCCSuccess else {\n230 |       throw SecurityProviderError.encryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n231 |     }\n232 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:234:21: error: cannot find 'CCCryptorGCMFinal' in scope\n232 |     \n233 |     // Get the authentication tag\n234 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n235 |       cryptor,\n236 |       \u0026tagBuffer,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:241:35: error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n239 |     \n240 |     guard tagStatus == kCCSuccess else {\n241 |       throw SecurityProviderError.authenticationTagGenerationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n242 |     }\n243 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:278:35: error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n276 |     // Validate data length (must include tag)\n277 |     guard data.count \u003e= gcmTagLength else {\n278 |       throw SecurityProviderError.invalidDataFormat\n    |                                   `- error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n279 |     }\n280 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:293:14: error: cannot find 'kCCModeGCM' in scope\n291 |     let status = CCCryptorCreateWithMode(\n292 |       CCOperation(kCCDecrypt),\n293 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n294 |       CCAlgorithm(kCCAlgorithmAES),\n295 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:303:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n301 |     \n302 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n303 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n304 |     }\n305 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:312:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n310 |     // Process additional authenticated data if provided\n311 |     if let aad = authenticatedData, !aad.isEmpty {\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:314:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n315 |       }\n316 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:328:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n326 |     \n327 |     guard decStatus == kCCSuccess else {\n328 |       throw SecurityProviderError.decryptionFailed(decStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n329 |     }\n330 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:18: error: generic parameter 'Element' could not be inferred\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |                  `- error: generic parameter 'Element' could not be inferred\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:341:35: error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n339 |     \n340 |     guard finalStatus == kCCSuccess else {\n341 |       throw SecurityProviderError.decryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n342 |     }\n343 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:346:21: error: cannot find 'CCCryptorGCMFinal' in scope\n344 |     // Verify the authentication tag\n345 |     var expectedTag = [UInt8](repeating: 0, count: gcmTagLength)\n346 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n347 |       cryptor,\n348 |       \u0026expectedTag,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:353:35: error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n351 |     \n352 |     guard tagStatus == kCCSuccess else {\n353 |       throw SecurityProviderError.authenticationTagVerificationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n354 |     }\n355 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:358:35: error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n356 |     // Compare tags\n357 |     guard tag.count == expectedTag.count \u0026\u0026 zip(tag, expectedTag).allSatisfy({ $0 == $1 }) else {\n358 |       throw SecurityProviderError.authenticationTagMismatch\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n359 |     }\n360 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:406:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n404 |     \n405 |     guard status == kCCSuccess else {\n406 |       throw SecurityProviderError.encryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n407 |     }\n408 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:443:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n441 |     \n442 |     guard status == kCCSuccess else {\n443 |       throw SecurityProviderError.decryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n444 |     }\n445 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:465:66: error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n463 |       // BLAKE2b is not directly supported in CommonCrypto\n464 |       // This would require a platform-specific implementation or use of a third-party library\n465 |       throw SecurityProviderError.unsupportedAlgorithm(algorithm.rawValue)\n    |                                                                  `- error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n466 |     }\n467 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:116:19: error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n114 |         // Check for specific error domains and codes\n115 |         if nsError.domain == NSOSStatusErrorDomain {\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:118:19: error: type 'SecurityStorageError' has no member 'systemError'\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'systemError'\n119 |         }\n120 |         \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:121:32: error: extra arguments at positions #2, #3 in call\n119 |         }\n120 |         \n121 |         return .operationFailed(error.localizedDescription, file: file, line: line)\n    |                                `- error: extra arguments at positions #2, #3 in call\n122 |       }\n123 |       \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProtocolError.swift:51:8: note: 'operationFailed' declared here\n 49 | \n 50 |   /// Generic operation failure with optional message\n 51 |   case operationFailed(String)\n    |        `- note: 'operationFailed' declared here\n 52 | \n 53 |   /// Invalid input provided to the operation\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:126:17: error: type 'SecurityStorageError' has no member 'unknownError'\n124 |       // If no error but also no result, it's a failure\n125 |       if result == nil {\n126 |         return .unknownError(file: file, line: line)\n    |                 `- error: type 'SecurityStorageError' has no member 'unknownError'\n127 |       }\n128 |       \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:130:15: error: type 'SecurityStorageError' has no member 'unknownError'\n128 |       \n129 |       // Default to unknown error\n130 |       return .unknownError(file: file, line: line)\n    |               `- error: type 'SecurityStorageError' has no member 'unknownError'\n131 |     }\n132 |   }\nTarget //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices failed to build\nINFO: Elapsed time: 1.278s, Critical Path: 1.18s\nINFO: 10 processes: 3 action cache hit, 3 internal, 7 worker.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations",
    "success": false,
    "start_time": "2025-04-13T09:09:14.467143+01:00",
    "end_time": "2025-04-13T09:09:15.394701+01:00",
    "duration": "927.550833ms",
    "output": "INFO: Invocation ID: 0df9e1ad-2437-4179-8a77-3699fb92861a\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/SecurityUtils/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nFailed to copy bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftdoc for incremental builds, maybe it wasn't produced?\nTarget //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations failed to build\nINFO: Elapsed time: 0.215s, Critical Path: 0.13s\nINFO: 3 processes: 3 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories",
    "success": false,
    "start_time": "2025-04-13T09:09:15.394708+01:00",
    "end_time": "2025-04-13T09:09:16.891977+01:00",
    "duration": "1.497256958s",
    "output": "INFO: Invocation ID: 206bf318-48ed-429f-a109-7f4fa85de8f9\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServicesCore/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServicesCore.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceFactory.swift:73:35: warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 71 |             // This comment acknowledges we're deliberately using a deprecated method for testing purposes.\n 72 |             // We accept the warning as this is explicitly for testing environments.\n 73 |             actualSecureStorage = createMockSecureStorage()\n    |                                   `- warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 74 |         }\n 75 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceType.swift:58:9: error: switch must be exhaustive\n56 |     /// - Returns: The equivalent CryptoServiceType\n57 |     public static func from(providerType: SecurityProviderType) -\u003e CryptoServiceType {\n58 |         switch providerType {\n   |         |- error: switch must be exhaustive\n   |         |- note: add missing case: '.cryptoKit'\n   |         |- note: add missing case: '.system'\n   |         |- note: add missing case: '.hsm'\n   |         |- note: add missing case: '.platform'\n   |         `- note: add missing cases\n59 |         case .basic:\n60 |             return .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:74:34: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 72 |     // Validate minimum size (header + iv)\n 73 |     if packagedData.count \u003c headerSize + ivSize {\n 74 |       throw SecurityStorageError.invalidDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 75 |     }\n 76 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:80:36: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 78 |     for i in 0..\u003c4 {\n 79 |       if packagedData[i] != magicBytes[i] {\n 80 |         throw SecurityStorageError.invalidDataFormat\n    |                                    `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 81 |       }\n 82 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:87:34: error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 85 |     let version = packagedData[4]\n 86 |     if version \u003e formatVersion {\n 87 |       throw SecurityStorageError.unsupportedDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 88 |     }\n 89 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: extra arguments at positions #2, #3 in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: extra arguments at positions #2, #3 in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:172:19: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n170 |     \n171 |     return SecurityResultDTO(\n172 |       resultData: packagedData,\n    |                   `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:174:16: error: cannot infer contextual base in reference to member 'standard'\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n    |                `- error: cannot infer contextual base in reference to member 'standard'\n175 |     )\n176 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:182:14: error: cannot find 'kCCModeGCM' in scope\n180 |     let status = CCCryptorCreateWithMode(\n181 |       CCOperation(kCCEncrypt),\n182 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n183 |       CCAlgorithm(kCCAlgorithmAES),\n184 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:192:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n190 |     \n191 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n192 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n193 |     }\n194 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:201:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n199 |     // Process additional authenticated data if provided\n200 |     if let aad = authenticatedData, !aad.isEmpty {\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:203:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n204 |       }\n205 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:217:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n215 |     \n216 |     guard encStatus == kCCSuccess else {\n217 |       throw SecurityProviderError.encryptionFailed(encStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n218 |     }\n219 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:19: error: generic parameter 'Element' could not be inferred\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |                   `- error: generic parameter 'Element' could not be inferred\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:230:35: error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n228 |     \n229 |     guard finalStatus == kCCSuccess else {\n230 |       throw SecurityProviderError.encryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n231 |     }\n232 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:234:21: error: cannot find 'CCCryptorGCMFinal' in scope\n232 |     \n233 |     // Get the authentication tag\n234 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n235 |       cryptor,\n236 |       \u0026tagBuffer,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:241:35: error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n239 |     \n240 |     guard tagStatus == kCCSuccess else {\n241 |       throw SecurityProviderError.authenticationTagGenerationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n242 |     }\n243 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:278:35: error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n276 |     // Validate data length (must include tag)\n277 |     guard data.count \u003e= gcmTagLength else {\n278 |       throw SecurityProviderError.invalidDataFormat\n    |                                   `- error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n279 |     }\n280 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:293:14: error: cannot find 'kCCModeGCM' in scope\n291 |     let status = CCCryptorCreateWithMode(\n292 |       CCOperation(kCCDecrypt),\n293 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n294 |       CCAlgorithm(kCCAlgorithmAES),\n295 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:303:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n301 |     \n302 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n303 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n304 |     }\n305 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:312:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n310 |     // Process additional authenticated data if provided\n311 |     if let aad = authenticatedData, !aad.isEmpty {\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:314:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n315 |       }\n316 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:328:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n326 |     \n327 |     guard decStatus == kCCSuccess else {\n328 |       throw SecurityProviderError.decryptionFailed(decStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n329 |     }\n330 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:18: error: generic parameter 'Element' could not be inferred\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |                  `- error: generic parameter 'Element' could not be inferred\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:341:35: error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n339 |     \n340 |     guard finalStatus == kCCSuccess else {\n341 |       throw SecurityProviderError.decryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n342 |     }\n343 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:346:21: error: cannot find 'CCCryptorGCMFinal' in scope\n344 |     // Verify the authentication tag\n345 |     var expectedTag = [UInt8](repeating: 0, count: gcmTagLength)\n346 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n347 |       cryptor,\n348 |       \u0026expectedTag,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:353:35: error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n351 |     \n352 |     guard tagStatus == kCCSuccess else {\n353 |       throw SecurityProviderError.authenticationTagVerificationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n354 |     }\n355 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:358:35: error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n356 |     // Compare tags\n357 |     guard tag.count == expectedTag.count \u0026\u0026 zip(tag, expectedTag).allSatisfy({ $0 == $1 }) else {\n358 |       throw SecurityProviderError.authenticationTagMismatch\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n359 |     }\n360 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:406:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n404 |     \n405 |     guard status == kCCSuccess else {\n406 |       throw SecurityProviderError.encryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n407 |     }\n408 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:443:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n441 |     \n442 |     guard status == kCCSuccess else {\n443 |       throw SecurityProviderError.decryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n444 |     }\n445 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:465:66: error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n463 |       // BLAKE2b is not directly supported in CommonCrypto\n464 |       // This would require a platform-specific implementation or use of a third-party library\n465 |       throw SecurityProviderError.unsupportedAlgorithm(algorithm.rawValue)\n    |                                                                  `- error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n466 |     }\n467 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:116:19: error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n114 |         // Check for specific error domains and codes\n115 |         if nsError.domain == NSOSStatusErrorDomain {\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:118:19: error: type 'SecurityStorageError' has no member 'systemError'\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'systemError'\n119 |         }\n120 |         \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:121:32: error: extra arguments at positions #2, #3 in call\n119 |         }\n120 |         \n121 |         return .operationFailed(error.localizedDescription, file: file, line: line)\n    |                                `- error: extra arguments at positions #2, #3 in call\n122 |       }\n123 |       \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProtocolError.swift:51:8: note: 'operationFailed' declared here\n 49 | \n 50 |   /// Generic operation failure with optional message\n 51 |   case operationFailed(String)\n    |        `- note: 'operationFailed' declared here\n 52 | \n 53 |   /// Invalid input provided to the operation\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:126:17: error: type 'SecurityStorageError' has no member 'unknownError'\n124 |       // If no error but also no result, it's a failure\n125 |       if result == nil {\n126 |         return .unknownError(file: file, line: line)\n    |                 `- error: type 'SecurityStorageError' has no member 'unknownError'\n127 |       }\n128 |       \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:130:15: error: type 'SecurityStorageError' has no member 'unknownError'\n128 |       \n129 |       // Default to unknown error\n130 |       return .unknownError(file: file, line: line)\n    |               `- error: type 'SecurityStorageError' has no member 'unknownError'\n131 |     }\n132 |   }\nTarget //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories failed to build\nINFO: Elapsed time: 0.820s, Critical Path: 0.74s\nINFO: 3 processes: 3 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation",
    "success": false,
    "start_time": "2025-04-13T09:09:16.891987+01:00",
    "end_time": "2025-04-13T09:09:18.406621+01:00",
    "duration": "1.514621042s",
    "output": "INFO: Invocation ID: 5f7ea140-1508-4d84-956c-51af93c4869b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServicesCore/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServicesCore:CryptoServicesCore) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServicesCore.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceFactory.swift:73:35: warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 71 |             // This comment acknowledges we're deliberately using a deprecated method for testing purposes.\n 72 |             // We accept the warning as this is explicitly for testing environments.\n 73 |             actualSecureStorage = createMockSecureStorage()\n    |                                   `- warning: 'createMockSecureStorage()' is deprecated: Use only for testing\n 74 |         }\n 75 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/CryptoServiceType.swift:58:9: error: switch must be exhaustive\n56 |     /// - Returns: The equivalent CryptoServiceType\n57 |     public static func from(providerType: SecurityProviderType) -\u003e CryptoServiceType {\n58 |         switch providerType {\n   |         |- error: switch must be exhaustive\n   |         |- note: add missing case: '.cryptoKit'\n   |         |- note: add missing case: '.system'\n   |         |- note: add missing case: '.hsm'\n   |         |- note: add missing case: '.platform'\n   |         `- note: add missing cases\n59 |         case .basic:\n60 |             return .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:74:34: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 72 |     // Validate minimum size (header + iv)\n 73 |     if packagedData.count \u003c headerSize + ivSize {\n 74 |       throw SecurityStorageError.invalidDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 75 |     }\n 76 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:80:36: error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 78 |     for i in 0..\u003c4 {\n 79 |       if packagedData[i] != magicBytes[i] {\n 80 |         throw SecurityStorageError.invalidDataFormat\n    |                                    `- error: type 'SecurityStorageError' has no member 'invalidDataFormat'\n 81 |       }\n 82 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:87:34: error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 85 |     let version = packagedData[4]\n 86 |     if version \u003e formatVersion {\n 87 |       throw SecurityStorageError.unsupportedDataFormat\n    |                                  `- error: type 'SecurityStorageError' has no member 'unsupportedDataFormat'\n 88 |     }\n 89 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:12: error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |            `- error: 'SecurityResultDTO' initializer is inaccessible due to 'private' protection level\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: extra arguments at positions #2, #3 in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: extra arguments at positions #2, #3 in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:171:29: error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n169 |     )\n170 |     \n171 |     return SecurityResultDTO(\n    |                             `- error: missing arguments for parameters 'successful', 'errorDetails', 'executionTimeMs', 'metadata' in call\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n\nCoreSecurityTypes.SecurityResultDTO.init:2:9: note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n1 | struct SecurityResultDTO {\n2 | private init(successful: Bool, resultData: Data?, errorDetails: String?, executionTimeMs: Double, metadata: [String : String]?)}\n  |         `- note: 'init(successful:resultData:errorDetails:executionTimeMs:metadata:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:172:19: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n170 |     \n171 |     return SecurityResultDTO(\n172 |       resultData: packagedData,\n    |                   `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoFormat.swift:174:16: error: cannot infer contextual base in reference to member 'standard'\n172 |       resultData: packagedData,\n173 |       algorithm: getAlgorithmFromFormat(hasTag: tag != nil),\n174 |       format: .standard\n    |                `- error: cannot infer contextual base in reference to member 'standard'\n175 |     )\n176 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:182:14: error: cannot find 'kCCModeGCM' in scope\n180 |     let status = CCCryptorCreateWithMode(\n181 |       CCOperation(kCCEncrypt),\n182 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n183 |       CCAlgorithm(kCCAlgorithmAES),\n184 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:192:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n190 |     \n191 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n192 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n193 |     }\n194 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:201:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n199 |     // Process additional authenticated data if provided\n200 |     if let aad = authenticatedData, !aad.isEmpty {\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:203:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n201 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n202 |       guard aadStatus == kCCSuccess else {\n203 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n204 |       }\n205 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:217:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n215 |     \n216 |     guard encStatus == kCCSuccess else {\n217 |       throw SecurityProviderError.encryptionFailed(encStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n218 |     }\n219 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:224:19: error: generic parameter 'Element' could not be inferred\n222 |     let finalStatus = CCCryptorFinal(\n223 |       cryptor,\n224 |       \u0026ciphertext + bytesWritten,\n    |                   `- error: generic parameter 'Element' could not be inferred\n225 |       ciphertext.count - bytesWritten,\n226 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:230:35: error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n228 |     \n229 |     guard finalStatus == kCCSuccess else {\n230 |       throw SecurityProviderError.encryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'encryptionFinalisationFailed'\n231 |     }\n232 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:234:21: error: cannot find 'CCCryptorGCMFinal' in scope\n232 |     \n233 |     // Get the authentication tag\n234 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n235 |       cryptor,\n236 |       \u0026tagBuffer,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:241:35: error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n239 |     \n240 |     guard tagStatus == kCCSuccess else {\n241 |       throw SecurityProviderError.authenticationTagGenerationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagGenerationFailed'\n242 |     }\n243 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:278:35: error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n276 |     // Validate data length (must include tag)\n277 |     guard data.count \u003e= gcmTagLength else {\n278 |       throw SecurityProviderError.invalidDataFormat\n    |                                   `- error: type 'SecurityProviderError' has no member 'invalidDataFormat'\n279 |     }\n280 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:293:14: error: cannot find 'kCCModeGCM' in scope\n291 |     let status = CCCryptorCreateWithMode(\n292 |       CCOperation(kCCDecrypt),\n293 |       CCMode(kCCModeGCM),\n    |              `- error: cannot find 'kCCModeGCM' in scope\n294 |       CCAlgorithm(kCCAlgorithmAES),\n295 |       CCPadding(ccNoPadding),\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:303:35: error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n301 |     \n302 |     guard status == kCCSuccess, let cryptor = cryptorRef else {\n303 |       throw SecurityProviderError.cryptorCreationFailed(status)\n    |                                   `- error: type 'SecurityProviderError' has no member 'cryptorCreationFailed'\n304 |     }\n305 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:312:23: error: cannot find 'CCCryptorGCMAddAAD' in scope\n310 |     // Process additional authenticated data if provided\n311 |     if let aad = authenticatedData, !aad.isEmpty {\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n    |                       `- error: cannot find 'CCCryptorGCMAddAAD' in scope\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:314:37: error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n312 |       let aadStatus = CCCryptorGCMAddAAD(cryptor, aad, aad.count)\n313 |       guard aadStatus == kCCSuccess else {\n314 |         throw SecurityProviderError.aadProcessingFailed(aadStatus)\n    |                                     `- error: type 'SecurityProviderError' has no member 'aadProcessingFailed'\n315 |       }\n316 |     }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:328:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n326 |     \n327 |     guard decStatus == kCCSuccess else {\n328 |       throw SecurityProviderError.decryptionFailed(decStatus)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n329 |     }\n330 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:7: warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |       |- warning: cannot use inout expression here; argument #1 must be a pointer that outlives the call to '+'\n    |       |- note: implicit argument conversion from '[UInt8]' to 'UnsafeMutableRawPointer' produces a pointer valid only for the duration of the call to '+'\n    |       `- note: use the 'withUnsafeMutableBytes' method on Array in order to explicitly convert argument to buffer pointer valid for a defined scope\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:335:18: error: generic parameter 'Element' could not be inferred\n333 |     let finalStatus = CCCryptorFinal(\n334 |       cryptor,\n335 |       \u0026plaintext + bytesWritten,\n    |                  `- error: generic parameter 'Element' could not be inferred\n336 |       plaintext.count - bytesWritten,\n337 |       \u0026finalBytesWritten\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:341:35: error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n339 |     \n340 |     guard finalStatus == kCCSuccess else {\n341 |       throw SecurityProviderError.decryptionFinalisationFailed(finalStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'decryptionFinalisationFailed'\n342 |     }\n343 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:346:21: error: cannot find 'CCCryptorGCMFinal' in scope\n344 |     // Verify the authentication tag\n345 |     var expectedTag = [UInt8](repeating: 0, count: gcmTagLength)\n346 |     let tagStatus = CCCryptorGCMFinal(\n    |                     `- error: cannot find 'CCCryptorGCMFinal' in scope\n347 |       cryptor,\n348 |       \u0026expectedTag,\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:353:35: error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n351 |     \n352 |     guard tagStatus == kCCSuccess else {\n353 |       throw SecurityProviderError.authenticationTagVerificationFailed(tagStatus)\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagVerificationFailed'\n354 |     }\n355 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:358:35: error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n356 |     // Compare tags\n357 |     guard tag.count == expectedTag.count \u0026\u0026 zip(tag, expectedTag).allSatisfy({ $0 == $1 }) else {\n358 |       throw SecurityProviderError.authenticationTagMismatch\n    |                                   `- error: type 'SecurityProviderError' has no member 'authenticationTagMismatch'\n359 |     }\n360 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:406:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n404 |     \n405 |     guard status == kCCSuccess else {\n406 |       throw SecurityProviderError.encryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n407 |     }\n408 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:443:52: error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n441 |     \n442 |     guard status == kCCSuccess else {\n443 |       throw SecurityProviderError.decryptionFailed(status)\n    |                                                    `- error: cannot convert value of type 'CCCryptorStatus' (aka 'Int32') to expected argument type 'String'\n444 |     }\n445 |     \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/CryptoOperations.swift:465:66: error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n463 |       // BLAKE2b is not directly supported in CommonCrypto\n464 |       // This would require a platform-specific implementation or use of a third-party library\n465 |       throw SecurityProviderError.unsupportedAlgorithm(algorithm.rawValue)\n    |                                                                  `- error: cannot convert value of type 'String' to expected argument type 'EncryptionAlgorithm'\n466 |     }\n467 |   }\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:116:19: error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n114 |         // Check for specific error domains and codes\n115 |         if nsError.domain == NSOSStatusErrorDomain {\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'securityFrameworkError'\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:118:19: error: type 'SecurityStorageError' has no member 'systemError'\n116 |           return .securityFrameworkError(nsError.code, file: file, line: line)\n117 |         } else if nsError.domain == NSPOSIXErrorDomain {\n118 |           return .systemError(nsError.code, file: file, line: line)\n    |                   `- error: type 'SecurityStorageError' has no member 'systemError'\n119 |         }\n120 |         \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:121:32: error: extra arguments at positions #2, #3 in call\n119 |         }\n120 |         \n121 |         return .operationFailed(error.localizedDescription, file: file, line: line)\n    |                                `- error: extra arguments at positions #2, #3 in call\n122 |       }\n123 |       \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityProtocolError.swift:51:8: note: 'operationFailed' declared here\n 49 | \n 50 |   /// Generic operation failure with optional message\n 51 |   case operationFailed(String)\n    |        `- note: 'operationFailed' declared here\n 52 | \n 53 |   /// Invalid input provided to the operation\n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:126:17: error: type 'SecurityStorageError' has no member 'unknownError'\n124 |       // If no error but also no result, it's a failure\n125 |       if result == nil {\n126 |         return .unknownError(file: file, line: line)\n    |                 `- error: type 'SecurityStorageError' has no member 'unknownError'\n127 |       }\n128 |       \n\npackages/UmbraImplementations/Sources/CryptoServicesCore/Utilities/DataConversionExtensions.swift:130:15: error: type 'SecurityStorageError' has no member 'unknownError'\n128 |       \n129 |       // Default to unknown error\n130 |       return .unknownError(file: file, line: line)\n    |               `- error: type 'SecurityStorageError' has no member 'unknownError'\n131 |     }\n132 |   }\nTarget //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation failed to build\nINFO: Elapsed time: 0.829s, Critical Path: 0.74s\nINFO: 3 processes: 3 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement",
    "success": true,
    "start_time": "2025-04-13T09:09:18.406638+01:00",
    "end_time": "2025-04-13T09:09:20.790616+01:00",
    "duration": "2.383957417s",
    "output": "INFO: Invocation ID: 8890209a-6cf2-467f-a5e0-9d9b8e143249\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/SecurityKeyManagement.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/SecurityKeyManagement.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/SecurityKeyManagement.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/libSecurityKeyManagement.a\nINFO: Elapsed time: 1.701s, Critical Path: 1.61s\nINFO: 3 processes: 1 action cache hit, 1 internal, 2 worker.\nINFO: Build completed successfully, 3 total actions\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor",
    "success": true,
    "start_time": "2025-04-13T09:09:20.790628+01:00",
    "end_time": "2025-04-13T09:09:22.681949+01:00",
    "duration": "1.891305291s",
    "output": "INFO: Invocation ID: d78d19e1-05d3-4712-bd4e-5c88551bf566\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor (2 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/KeyManagementActor.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/KeyManagementActor.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/KeyManagementActor.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/libKeyManagementActor.a\nINFO: Elapsed time: 1.038s, Critical Path: 0.95s\nINFO: 3 processes: 3 action cache hit, 1 internal, 2 worker.\nINFO: Build completed successfully, 3 total actions\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes",
    "success": true,
    "start_time": "2025-04-13T09:09:22.681969+01:00",
    "end_time": "2025-04-13T09:09:23.483585+01:00",
    "duration": "801.6095ms",
    "output": "INFO: Invocation ID: ed118cf3-0736-4282-a6f9-7f3159cc04d9\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/KeyManagementActorTypes.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/KeyManagementActorTypes.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/KeyManagementActorTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/libKeyManagementActorTypes.a\nINFO: Elapsed time: 0.096s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage",
    "success": true,
    "start_time": "2025-04-13T09:09:23.483592+01:00",
    "end_time": "2025-04-13T09:09:24.233554+01:00",
    "duration": "749.955583ms",
    "output": "INFO: Invocation ID: ada63608-966c-4a16-bd02-9ecc982ce428\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/KeyStorage.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/KeyStorage.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/KeyStorage.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/libKeyStorage.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes",
    "success": true,
    "start_time": "2025-04-13T09:09:24.23356+01:00",
    "end_time": "2025-04-13T09:09:25.03147+01:00",
    "duration": "797.904125ms",
    "output": "INFO: Invocation ID: f7d01e1b-2f92-4dbc-af92-380ab43de2bd\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/SecurityKeyTypes.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/SecurityKeyTypes.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/SecurityKeyTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/libSecurityKeyTypes.a\nINFO: Elapsed time: 0.092s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders",
    "success": true,
    "start_time": "2025-04-13T09:09:25.031477+01:00",
    "end_time": "2025-04-13T09:09:25.84597+01:00",
    "duration": "814.485625ms",
    "output": "INFO: Invocation ID: 95a4979a-b944-409c-b825-69bd9b40c37b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/SecurityProviders.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/SecurityProviders.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/SecurityProviders.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/libSecurityProviders.a\nINFO: Elapsed time: 0.090s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils",
    "success": true,
    "start_time": "2025-04-13T09:09:25.845977+01:00",
    "end_time": "2025-04-13T09:09:26.616558+01:00",
    "duration": "770.57425ms",
    "output": "INFO: Invocation ID: b4646222-df4b-4078-b00a-58882028ae93\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/libSecurityUtils.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/XPCServices:XPCServices",
    "success": true,
    "start_time": "2025-04-13T09:09:26.616576+01:00",
    "end_time": "2025-04-13T09:09:27.403278+01:00",
    "duration": "786.69575ms",
    "output": "INFO: Invocation ID: ef325c68-40d7-4459-809b-0fa5e04f682c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/XPCServices:XPCServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/XPCServices:XPCServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/XPCServices:XPCServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/XPCServices:XPCServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/XPCServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/XPCServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/XPCServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/libXPCServices.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces:UmbraInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:27.403301+01:00",
    "end_time": "2025-04-13T09:09:30.214974+01:00",
    "duration": "2.811650292s",
    "output": "INFO: Invocation ID: 6a94c7ad-d84a-47b2-8793-b06a07c7f712\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces:UmbraInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces:UmbraInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces:UmbraInterfaces (1 packages loaded, 20 targets configured).\n[2 / 4] Compiling Swift module //packages/UmbraInterfaces:UmbraInterfaces; 1s disk-cache, worker\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces:UmbraInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/UmbraInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/UmbraInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/UmbraInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/libUmbraInterfaces.a\nINFO: Elapsed time: 2.151s, Critical Path: 2.05s\nINFO: 2 processes: 2 action cache hit, 1 internal, 1 worker.\nINFO: Build completed successfully, 2 total actions\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:30.214982+01:00",
    "end_time": "2025-04-13T09:09:30.978801+01:00",
    "duration": "763.8135ms",
    "output": "INFO: Invocation ID: 4f478f64-2c0f-4692-9ab4-370713232926\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/APIInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/APIInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/APIInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/libAPIInterfaces.a\nINFO: Elapsed time: 0.088s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:30.978809+01:00",
    "end_time": "2025-04-13T09:09:31.704055+01:00",
    "duration": "725.240417ms",
    "output": "INFO: Invocation ID: be0f1a68-6aae-4a94-8fa0-1b9b15cac294\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/BackupInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/BackupInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/BackupInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/libBackupInterfaces.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:31.704079+01:00",
    "end_time": "2025-04-13T09:09:32.499396+01:00",
    "duration": "795.310125ms",
    "output": "INFO: Invocation ID: df448c7e-271d-48bf-a3a9-0ffa03200426\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/CoreInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/CoreInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/CoreInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/libCoreInterfaces.a\nINFO: Elapsed time: 0.087s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:32.499409+01:00",
    "end_time": "2025-04-13T09:09:33.278588+01:00",
    "duration": "779.172042ms",
    "output": "INFO: Invocation ID: 7e894daf-1892-4e47-9218-3691b4f2d50c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/CryptoInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/CryptoInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/CryptoInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/libCryptoInterfaces.a\nINFO: Elapsed time: 0.085s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:33.278596+01:00",
    "end_time": "2025-04-13T09:09:34.393841+01:00",
    "duration": "1.115236s",
    "output": "INFO: Invocation ID: adb1bc1a-38f5-48cd-8855-cfb832e34847\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/DateTimeInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/DateTimeInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/DateTimeInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/libDateTimeInterfaces.a\nINFO: Elapsed time: 0.433s, Critical Path: 0.35s\nINFO: 2 processes: 1 action cache hit, 1 internal, 1 worker.\nINFO: Build completed successfully, 2 total actions\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:34.393848+01:00",
    "end_time": "2025-04-13T09:09:35.158444+01:00",
    "duration": "764.589916ms",
    "output": "INFO: Invocation ID: 917d44ef-cb2e-49bd-b0e3-3a37886b9e85\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/ErrorHandlingInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/ErrorHandlingInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/ErrorHandlingInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/libErrorHandlingInterfaces.a\nINFO: Elapsed time: 0.088s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:35.158463+01:00",
    "end_time": "2025-04-13T09:09:35.954865+01:00",
    "duration": "796.395542ms",
    "output": "INFO: Invocation ID: 90105188-8747-4de5-9cbd-6503908b9fe9\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/ErrorLoggingInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/ErrorLoggingInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/ErrorLoggingInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/libErrorLoggingInterfaces.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:35.954871+01:00",
    "end_time": "2025-04-13T09:09:36.716634+01:00",
    "duration": "761.756708ms",
    "output": "INFO: Invocation ID: 14d654c0-6903-4634-89f4-ae944db7f042\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/libFileSystemInterfaces.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:36.716641+01:00",
    "end_time": "2025-04-13T09:09:37.494323+01:00",
    "duration": "777.675917ms",
    "output": "INFO: Invocation ID: 02c70b33-2e1d-464d-8db6-a0d5f14ecd28\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/KeychainInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/KeychainInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/KeychainInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/libKeychainInterfaces.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:37.494347+01:00",
    "end_time": "2025-04-13T09:09:38.276689+01:00",
    "duration": "782.335791ms",
    "output": "INFO: Invocation ID: caab47be-91f1-4ea7-8b39-2215f6e44ba9\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/libLoggingInterfaces.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:38.276694+01:00",
    "end_time": "2025-04-13T09:09:39.039927+01:00",
    "duration": "763.226584ms",
    "output": "INFO: Invocation ID: b97e3039-bdee-4244-99ec-98dd0095d037\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/LoggingWrapperInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/LoggingWrapperInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/LoggingWrapperInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/libLoggingWrapperInterfaces.a\nINFO: Elapsed time: 0.090s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:39.039932+01:00",
    "end_time": "2025-04-13T09:09:39.825114+01:00",
    "duration": "785.175208ms",
    "output": "INFO: Invocation ID: b0368d07-9d77-4ce9-a5f1-6c42295710ab\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/NetworkInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/NetworkInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/NetworkInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/libNetworkInterfaces.a\nINFO: Elapsed time: 0.087s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:39.825122+01:00",
    "end_time": "2025-04-13T09:09:40.624782+01:00",
    "duration": "799.654ms",
    "output": "INFO: Invocation ID: 0df27cec-dad3-4006-b32a-962e522e6a82\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/RepositoryInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/RepositoryInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/RepositoryInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/libRepositoryInterfaces.a\nINFO: Elapsed time: 0.090s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:40.624788+01:00",
    "end_time": "2025-04-13T09:09:41.39867+01:00",
    "duration": "773.875042ms",
    "output": "INFO: Invocation ID: f36484ae-5d30-4164-8462-5ff363c884c4\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/libResticInterfaces.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:41.398678+01:00",
    "end_time": "2025-04-13T09:09:42.786403+01:00",
    "duration": "1.38771375s",
    "output": "INFO: Invocation ID: 4d9f216e-57fb-48e2-8f21-647a80ba5328\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityCoreInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityCoreInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityCoreInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/libSecurityCoreInterfaces.a\nINFO: Elapsed time: 0.669s, Critical Path: 0.58s\nINFO: 2 processes: 1 internal, 1 local.\nINFO: Build completed successfully, 2 total actions\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces",
    "success": true,
    "start_time": "2025-04-13T09:09:42.786417+01:00",
    "end_time": "2025-04-13T09:09:44.034893+01:00",
    "duration": "1.248465208s",
    "output": "INFO: Invocation ID: ad7a1dd9-2c34-41c1-9559-8f7c40a8aa4e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/SecurityInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/SecurityInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/SecurityInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/libSecurityInterfaces.a\nINFO: Elapsed time: 0.537s, Critical Path: 0.45s\nINFO: 2 processes: 2 action cache hit, 1 internal, 1 worker.\nINFO: Build completed successfully, 2 total actions\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore",
    "success": true,
    "start_time": "2025-04-13T09:09:44.034904+01:00",
    "end_time": "2025-04-13T09:09:44.786284+01:00",
    "duration": "751.3735ms",
    "output": "INFO: Invocation ID: f37809f6-3839-4e18-a9d0-d881ccaf5f5e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/XPCProtocolsCore.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/XPCProtocolsCore.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/XPCProtocolsCore.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/libXPCProtocolsCore.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraServices/Sources/LoggingServices:LoggingServices",
    "success": true,
    "start_time": "2025-04-13T09:09:44.786292+01:00",
    "end_time": "2025-04-13T09:09:45.587947+01:00",
    "duration": "801.649042ms",
    "output": "INFO: Invocation ID: d3795e5c-cc06-4836-87f7-37f7360f3dbb\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraServices/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraServices/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraServices/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraServices/Sources/LoggingServices:LoggingServices up-to-date:\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/LoggingServices.swiftdoc\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/LoggingServices.swiftmodule\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/LoggingServices.swiftsourceinfo\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/libLoggingServices.a\nINFO: Elapsed time: 0.092s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  }
]