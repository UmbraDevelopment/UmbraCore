[
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:56:51.571899+01:00",
    "end_time": "2025-04-08T00:56:53.702032+01:00",
    "duration": "2.130122458s",
    "output": "INFO: Invocation ID: 0fb6e98e-5f26-4d0d-ba59-d6679c34cc49\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (4 packages loaded, 7 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (4 packages loaded, 7 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (106 packages loaded, 2797 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/APIInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/APIInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/APIInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/libAPIInterfaces.a\nINFO: Elapsed time: 1.370s, Critical Path: 0.01s\nINFO: 1 process: 63 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:56:53.70206+01:00",
    "end_time": "2025-04-08T00:56:54.486839+01:00",
    "duration": "784.774583ms",
    "output": "INFO: Invocation ID: 84f69c36-685c-4bd4-b5e5-a727c7ec5606\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces (1 packages loaded, 6 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/ConfigInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/ConfigInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/ConfigInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/libConfigInterfaces.a\nINFO: Elapsed time: 0.099s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs",
    "success": true,
    "start_time": "2025-04-08T00:56:54.48685+01:00",
    "end_time": "2025-04-08T00:56:55.283798+01:00",
    "duration": "796.944375ms",
    "output": "INFO: Invocation ID: 0021fa69-2e94-4b92-b8b1-6df2eef27f0a\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/libCoreDTOs.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests",
    "success": true,
    "start_time": "2025-04-08T00:56:55.283803+01:00",
    "end_time": "2025-04-08T00:56:56.076479+01:00",
    "duration": "792.671541ms",
    "output": "INFO: Invocation ID: 0355060a-6b7e-4f1e-8c4a-8bb6ecbd8225\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests (0 packages loaded, 1 target configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOsTests.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOsTests.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOsTests.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/libCoreDTOsTests.a\nINFO: Elapsed time: 0.096s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:56:56.076484+01:00",
    "end_time": "2025-04-08T00:56:56.836842+01:00",
    "duration": "760.353417ms",
    "output": "INFO: Invocation ID: 05e4137b-f50e-4fb9-bfbd-8e181d2f9985\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces (1 packages loaded, 8 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/CoreInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/CoreInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/CoreInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/libCoreInterfaces.a\nINFO: Elapsed time: 0.084s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes",
    "success": true,
    "start_time": "2025-04-08T00:56:56.836847+01:00",
    "end_time": "2025-04-08T00:56:57.61657+01:00",
    "duration": "779.718333ms",
    "output": "INFO: Invocation ID: 14f2fb29-e77d-43eb-a7aa-d66fabb2a040\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/libCoreSecurityTypes.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:56:57.616575+01:00",
    "end_time": "2025-04-08T00:56:58.421723+01:00",
    "duration": "805.144208ms",
    "output": "INFO: Invocation ID: e30c8524-2d91-456d-9bd6-d52ac801bdad\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces (2 packages loaded, 15 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/CryptoInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/CryptoInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/CryptoInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/libCryptoInterfaces.a\nINFO: Elapsed time: 0.092s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes",
    "success": true,
    "start_time": "2025-04-08T00:56:58.421727+01:00",
    "end_time": "2025-04-08T00:56:59.205196+01:00",
    "duration": "783.46525ms",
    "output": "INFO: Invocation ID: f368232e-8d94-43fd-80ce-a319ab498836\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/CryptoTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/CryptoTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/CryptoTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/libCryptoTypes.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes",
    "success": true,
    "start_time": "2025-04-08T00:56:59.205202+01:00",
    "end_time": "2025-04-08T00:56:59.985879+01:00",
    "duration": "780.673375ms",
    "output": "INFO: Invocation ID: 184b305d-afa9-4e75-8711-8e5e24caeb88\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/DateTimeTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/DateTimeTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/DateTimeTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/libDateTimeTypes.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes",
    "success": true,
    "start_time": "2025-04-08T00:56:59.98591+01:00",
    "end_time": "2025-04-08T00:57:00.770809+01:00",
    "duration": "784.895375ms",
    "output": "INFO: Invocation ID: 52154a1b-27ad-46e5-bba6-596114526dc8\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/DomainSecurityTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/DomainSecurityTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/DomainSecurityTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/libDomainSecurityTypes.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes",
    "success": true,
    "start_time": "2025-04-08T00:57:00.770828+01:00",
    "end_time": "2025-04-08T00:57:01.575406+01:00",
    "duration": "804.573667ms",
    "output": "INFO: Invocation ID: 15d6bd96-f85d-4724-ae92-ba66cedd0c4b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/ErrorCoreTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/ErrorCoreTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/ErrorCoreTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/libErrorCoreTypes.a\nINFO: Elapsed time: 0.085s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes",
    "success": true,
    "start_time": "2025-04-08T00:57:01.575411+01:00",
    "end_time": "2025-04-08T00:57:02.354125+01:00",
    "duration": "778.710459ms",
    "output": "INFO: Invocation ID: 243f4573-69fb-4adf-8026-b881680e63e0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/FileSystemTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/FileSystemTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/FileSystemTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/libFileSystemTypes.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes",
    "success": true,
    "start_time": "2025-04-08T00:57:02.354132+01:00",
    "end_time": "2025-04-08T00:57:03.227614+01:00",
    "duration": "873.478ms",
    "output": "INFO: Invocation ID: a6b6feef-ef7b-4df9-ae67-3fd67bcf8a14\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes (3 packages loaded, 24 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/libKeyManagementTypes.a\nINFO: Elapsed time: 0.143s, Critical Path: 0.00s\nINFO: 1 process: 7 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests",
    "success": true,
    "start_time": "2025-04-08T00:57:03.22762+01:00",
    "end_time": "2025-04-08T00:57:04.020479+01:00",
    "duration": "792.85425ms",
    "output": "INFO: Invocation ID: 2b177034-4fa0-4482-a73a-f22dacb2fb31\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests (0 packages loaded, 1 target configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypesTests.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypesTests.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypesTests.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/libKeyManagementTypesTests.a\nINFO: Elapsed time: 0.082s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes",
    "success": true,
    "start_time": "2025-04-08T00:57:04.020485+01:00",
    "end_time": "2025-04-08T00:57:04.808924+01:00",
    "duration": "788.4355ms",
    "output": "INFO: Invocation ID: 52971f25-04ad-4e86-9767-32b0cbcb7b89\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes (2 packages loaded, 9 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/KeychainTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/KeychainTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/KeychainTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/libKeychainTypes.a\nINFO: Elapsed time: 0.088s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes",
    "success": true,
    "start_time": "2025-04-08T00:57:04.808931+01:00",
    "end_time": "2025-04-08T00:57:05.586328+01:00",
    "duration": "777.393958ms",
    "output": "INFO: Invocation ID: d8e77a3b-bc3d-4016-919c-b4adb92001fa\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/libLoggingTypes.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/Notification:Notification",
    "success": true,
    "start_time": "2025-04-08T00:57:05.586335+01:00",
    "end_time": "2025-04-08T00:57:06.313164+01:00",
    "duration": "726.824958ms",
    "output": "INFO: Invocation ID: ad4d7dfd-1d5c-4a67-8123-371c58850023\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Notification:Notification (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Notification:Notification (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/Notification:Notification (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/Notification:Notification up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/Notification.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/Notification.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/Notification.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/libNotification.a\nINFO: Elapsed time: 0.070s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling",
    "success": true,
    "start_time": "2025-04-08T00:57:06.31317+01:00",
    "end_time": "2025-04-08T00:57:07.081185+01:00",
    "duration": "768.011417ms",
    "output": "INFO: Invocation ID: 38dd0a15-a91a-403f-9bab-a740c62248ab\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/Scheduling.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/Scheduling.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/Scheduling.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/libScheduling.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:57:07.081197+01:00",
    "end_time": "2025-04-08T00:57:07.88552+01:00",
    "duration": "804.318792ms",
    "output": "INFO: Invocation ID: 89014034-f9f5-4c68-b6c3-b2baa47b4dce\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/SecurityInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/SecurityInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/SecurityInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/libSecurityInterfaces.a\nINFO: Elapsed time: 0.076s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters",
    "success": true,
    "start_time": "2025-04-08T00:57:07.885526+01:00",
    "end_time": "2025-04-08T00:57:08.670466+01:00",
    "duration": "784.936042ms",
    "output": "INFO: Invocation ID: 136864ca-6896-4a57-8642-e987f2ee251d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters (3 packages loaded, 17 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/SecurityInterfacesAdapters.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/SecurityInterfacesAdapters.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/SecurityInterfacesAdapters.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/libSecurityInterfacesAdapters.a\nINFO: Elapsed time: 0.092s, Critical Path: 0.00s\nINFO: 1 process: 7 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs",
    "success": true,
    "start_time": "2025-04-08T00:57:08.670483+01:00",
    "end_time": "2025-04-08T00:57:09.452093+01:00",
    "duration": "781.606666ms",
    "output": "INFO: Invocation ID: a3f00c0c-80b8-4602-9b1b-67222ec0ae09\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/SecurityInterfacesDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/SecurityInterfacesDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/SecurityInterfacesDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/libSecurityInterfacesDTOs.a\nINFO: Elapsed time: 0.084s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels",
    "success": true,
    "start_time": "2025-04-08T00:57:09.452099+01:00",
    "end_time": "2025-04-08T00:57:10.25739+01:00",
    "duration": "805.286583ms",
    "output": "INFO: Invocation ID: 9cf0e442-8286-4672-9c07-a38a8a71c387\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/SecurityInterfacesModels.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/SecurityInterfacesModels.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/SecurityInterfacesModels.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/libSecurityInterfacesModels.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols",
    "success": true,
    "start_time": "2025-04-08T00:57:10.257396+01:00",
    "end_time": "2025-04-08T00:57:11.070428+01:00",
    "duration": "813.027459ms",
    "output": "INFO: Invocation ID: 040363aa-f4b5-408b-9dfa-bc9c237d9c89\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/libSecurityInterfacesProtocols.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes",
    "success": true,
    "start_time": "2025-04-08T00:57:11.070434+01:00",
    "end_time": "2025-04-08T00:57:11.87302+01:00",
    "duration": "802.581875ms",
    "output": "INFO: Invocation ID: 0e20354a-8490-4d2f-95e3-355e87ad3ac0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/SecurityInterfacesTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/SecurityInterfacesTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/SecurityInterfacesTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/libSecurityInterfacesTypes.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC",
    "success": true,
    "start_time": "2025-04-08T00:57:11.873039+01:00",
    "end_time": "2025-04-08T00:57:12.667833+01:00",
    "duration": "794.789833ms",
    "output": "INFO: Invocation ID: 2cd50c95-910b-44a4-81b4-121102e5ca05\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/SecurityInterfacesXPC.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/SecurityInterfacesXPC.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/SecurityInterfacesXPC.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/libSecurityInterfacesXPC.a\nINFO: Elapsed time: 0.091s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes",
    "success": true,
    "start_time": "2025-04-08T00:57:12.667838+01:00",
    "end_time": "2025-04-08T00:57:13.456204+01:00",
    "duration": "788.362375ms",
    "output": "INFO: Invocation ID: 9f146b14-b667-4ec2-b54b-0cdfab35c5d2\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes (1 packages loaded, 3 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/SecurityKeyTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/SecurityKeyTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/SecurityKeyTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/libSecurityKeyTypes.a\nINFO: Elapsed time: 0.084s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors",
    "success": true,
    "start_time": "2025-04-08T00:57:13.456226+01:00",
    "end_time": "2025-04-08T00:57:14.388413+01:00",
    "duration": "932.182542ms",
    "output": "INFO: Invocation ID: 2de4ebbd-d8a1-404c-b46d-df68f5303182\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/UmbraErrors.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/UmbraErrors.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/UmbraErrors.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/libUmbraErrors.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore",
    "success": true,
    "start_time": "2025-04-08T00:57:14.388419+01:00",
    "end_time": "2025-04-08T00:57:15.168734+01:00",
    "duration": "780.311417ms",
    "output": "INFO: Invocation ID: e7d3d425-b4e5-46bc-a95e-9e2699709c97\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/UmbraErrorsCore.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/UmbraErrorsCore.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/UmbraErrorsCore.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/libUmbraErrorsCore.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs",
    "success": true,
    "start_time": "2025-04-08T00:57:15.168739+01:00",
    "end_time": "2025-04-08T00:57:15.988305+01:00",
    "duration": "819.561875ms",
    "output": "INFO: Invocation ID: 6e1fa9d4-1a5b-4e35-b2ca-de3a46ff8f74\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/UmbraErrorsDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/UmbraErrorsDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/UmbraErrorsDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/libUmbraErrorsDTOs.a\nINFO: Elapsed time: 0.082s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains",
    "success": true,
    "start_time": "2025-04-08T00:57:15.98831+01:00",
    "end_time": "2025-04-08T00:57:16.791784+01:00",
    "duration": "803.469542ms",
    "output": "INFO: Invocation ID: 8163be42-411e-410d-b9d8-6c265a8ea5e7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/UmbraErrorsDomains.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/UmbraErrorsDomains.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/UmbraErrorsDomains.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/libUmbraErrorsDomains.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping",
    "success": true,
    "start_time": "2025-04-08T00:57:16.791788+01:00",
    "end_time": "2025-04-08T00:57:17.669882+01:00",
    "duration": "878.089041ms",
    "output": "INFO: Invocation ID: 3652ac74-4a90-4644-a236-da2eaed6823c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/UmbraErrorsMapping.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/UmbraErrorsMapping.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/UmbraErrorsMapping.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/libUmbraErrorsMapping.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults",
    "success": true,
    "start_time": "2025-04-08T00:57:17.669887+01:00",
    "end_time": "2025-04-08T00:57:18.476846+01:00",
    "duration": "806.954875ms",
    "output": "INFO: Invocation ID: 61ad2d17-52c7-46a8-911c-92d5cf22a0ca\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/UserDefaults.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/UserDefaults.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/UserDefaults.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/libUserDefaults.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters",
    "success": true,
    "start_time": "2025-04-08T00:57:18.47685+01:00",
    "end_time": "2025-04-08T00:57:19.287192+01:00",
    "duration": "810.337458ms",
    "output": "INFO: Invocation ID: 48910782-aced-47d1-9ff5-3dd04eabe944\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/UserDefaultsAdapters.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/UserDefaultsAdapters.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/UserDefaultsAdapters.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/libUserDefaultsAdapters.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs",
    "success": true,
    "start_time": "2025-04-08T00:57:19.287197+01:00",
    "end_time": "2025-04-08T00:57:20.024419+01:00",
    "duration": "737.218166ms",
    "output": "INFO: Invocation ID: 2bcb3d33-1eac-4797-a0e9-b68b88735a05\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/UserDefaultsDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/UserDefaultsDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/UserDefaultsDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/libUserDefaultsDTOs.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/APIServices:APIServices",
    "success": false,
    "start_time": "2025-04-08T00:57:20.024424+01:00",
    "end_time": "2025-04-08T00:57:21.609361+01:00",
    "duration": "1.584928458s",
    "output": "INFO: Invocation ID: 68972e02-6847-481a-83b3-ea127b0378c7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/APIServices:APIServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/APIServices:APIServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/APIServices:APIServices (11 packages loaded, 113 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/APIServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/APIServices:APIServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/APIServices:APIServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/APIServices/APIServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:33:59: error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 31 | \n 32 |   /// The security bookmark service for managing security-scoped bookmarks\n 33 |   private let securityBookmarkService: SecurityInterfaces.SecurityBookmarkProtocol\n    |                                                           `- error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 34 | \n 35 |   /// Event continuations for streaming events\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:48:49: error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 46 |     configuration: APIConfigurationDTO,\n 47 |     logger: LoggingProtocol,\n 48 |     securityBookmarkService: SecurityInterfaces.SecurityBookmarkProtocol\n    |                                                 `- error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 49 |   ) {\n 50 |     self.configuration = configuration\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:23:14: error: type 'APIServiceActor' does not conform to protocol 'APIServiceProtocol'\n 21 | /// All mutable state is properly isolated within the actor.\n 22 | /// All methods use Swift's structured concurrency for safe asynchronous operations.\n 23 | public actor APIServiceActor: APIServiceProtocol {\n    |              |- error: type 'APIServiceActor' does not conform to protocol 'APIServiceProtocol'\n    |              `- note: add stubs for conformance\n 24 |   // MARK: - Private Properties\n 25 | \n    :\n 58 |   /// - Parameter configuration: The configuration to use for initialisation\n 59 |   /// - Throws: UmbraErrors.APIError if initialisation fails\n 60 |   public func initialise(configuration: APIConfigurationDTO) async throws {\n    |               `- note: candidate has non-matching type '(APIConfigurationDTO) async throws -\u003e ()'\n 61 |     // Log the initialisation attempt with privacy-aware logging\n 62 |     await logger.info(\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/APIInterfaces/Protocols/APIServiceProtocol.swift:24:8: note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n22 |   /// - Parameter configuration: The configuration to use for initialisation\n23 |   /// - Throws: UmbraErrors.APIError if initialisation fails\n24 |   func initialise(configuration: APIConfigurationDTO) async throws\n   |        `- note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n25 | \n26 |   /// Creates an encrypted security-scoped bookmark for the specified URL\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:30:15: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 28 | \n 29 |   /// Active operations tracking\n 30 |   private var activeOperations: [String: Task\u003cAny, Error\u003e] = [:]\n    |               `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 31 | \n 32 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:171:23: error: 'OperationResult' is not a member type of type 'T'\n169 |     _ operation: T,\n170 |     options _: APIConfigurationOptions? = nil\n171 |   ) async throws -\u003e T.OperationResult {\n    |                       `- error: 'OperationResult' is not a member type of type 'T'\n172 |     let operationID = UUID().uuidString\n173 |     let operationMetadata = LogMetadataDTOCollection()\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:275:26: error: 'OperationResult' is not a member type of type 'T'\n273 |     _ operation: T,\n274 |     options: APIConfigurationOptions? = nil\n275 |   ) async -\u003e APIResult\u003cT.OperationResult\u003e {\n    |                          `- error: 'OperationResult' is not a member type of type 'T'\n276 |     do {\n277 |       let result = try await execute(operation, options: options)\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:14:14: error: type 'AlphaAPIService' does not conform to protocol 'APIServiceProtocol'\n 12 |  and requirements, with consistent error handling.\n 13 |  */\n 14 | public actor AlphaAPIService: APIServiceProtocol {\n    |              |- error: type 'AlphaAPIService' does not conform to protocol 'APIServiceProtocol'\n    |              `- note: add stubs for conformance\n 15 |   // MARK: - Private Properties\n 16 | \n    :\n 58 |    - Throws: UmbraErrors.APIError if initialisation fails\n 59 |    */\n 60 |   public func initialise(configuration: APIConfigurationDTO) async throws {\n    |               `- note: candidate has non-matching type '(APIConfigurationDTO) async throws -\u003e ()'\n 61 |     self.configuration = configuration\n 62 |     \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/APIInterfaces/Protocols/APIServiceProtocol.swift:24:8: note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n22 |   /// - Parameter configuration: The configuration to use for initialisation\n23 |   /// - Throws: UmbraErrors.APIError if initialisation fails\n24 |   func initialise(configuration: APIConfigurationDTO) async throws\n   |        `- note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n25 | \n26 |   /// Creates an encrypted security-scoped bookmark for the specified URL\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:333:38: error: cannot find type 'SecurityConfigOptions' in scope\n331 |   }\n332 | \n333 |   func createSecureConfig(options _: SecurityConfigOptions) async -\u003e SecurityConfigDTO {\n    |                                      `- error: cannot find type 'SecurityConfigOptions' in scope\n334 |     fatalError(\"Not implemented in placeholder\")\n335 |   }\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:358:16: error: type 'RepositoryDomainHandlerImpl' does not conform to protocol 'DomainHandler'\n356 | \n357 | /// Placeholder for repository domain handler\n358 | private struct RepositoryDomainHandlerImpl: DomainHandler {\n    |                |- error: type 'RepositoryDomainHandlerImpl' does not conform to protocol 'DomainHandler'\n    |                `- note: add stubs for conformance\n359 |   let service: RepositoryServiceProtocol\n360 |   let logger: LoggingProtocol\n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:375:16: error: type 'BackupDomainHandlerImpl' does not conform to protocol 'DomainHandler'\n373 | \n374 | /// Placeholder for backup domain handler\n375 | private struct BackupDomainHandlerImpl: DomainHandler {\n    |                |- error: type 'BackupDomainHandlerImpl' does not conform to protocol 'DomainHandler'\n    |                `- note: add stubs for conformance\n376 |   let service: BackupServiceProtocol\n377 |   let logger: LoggingProtocol\n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:394:16: error: type 'SecurityDomainHandlerMock' does not conform to protocol 'DomainHandler'\n392 | \n393 | /// Mock security domain handler for testing\n394 | private struct SecurityDomainHandlerMock: DomainHandler {\n    |                |- error: type 'SecurityDomainHandlerMock' does not conform to protocol 'DomainHandler'\n    |                `- note: add stubs for conformance\n395 |   let logger: LoggingProtocol\n396 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:408:16: error: type 'RepositoryDomainHandlerMock' does not conform to protocol 'DomainHandler'\n406 | \n407 | /// Mock repository domain handler for testing\n408 | private struct RepositoryDomainHandlerMock: DomainHandler {\n    |                |- error: type 'RepositoryDomainHandlerMock' does not conform to protocol 'DomainHandler'\n    |                `- note: add stubs for conformance\n409 |   let logger: LoggingProtocol\n410 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:422:16: error: type 'BackupDomainHandlerMock' does not conform to protocol 'DomainHandler'\n420 | \n421 | /// Mock backup domain handler for testing\n422 | private struct BackupDomainHandlerMock: DomainHandler {\n    |                |- error: type 'BackupDomainHandlerMock' does not conform to protocol 'DomainHandler'\n    |                `- note: add stubs for conformance\n423 |   let logger: LoggingProtocol\n424 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:436:15: error: type 'SystemDomainHandlerMock' does not conform to protocol 'DomainHandler'\n434 | \n435 | /// Mock implementation of a system domain handler for testing\n436 | private class SystemDomainHandlerMock: DomainHandler {\n    |               |- error: type 'SystemDomainHandlerMock' does not conform to protocol 'DomainHandler'\n    |               `- note: add stubs for conformance\n437 |   /// Logger instance\n438 |   private let logger: LoggingProtocol\n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/Domains/BackupDomainHandler.swift:26:15: error: type 'BackupDomainHandler' does not conform to protocol 'DomainHandler'\n 24 |  thread safety throughout the handler.\n 25 |  */\n 26 | public struct BackupDomainHandler: DomainHandler {\n    |               |- error: type 'BackupDomainHandler' does not conform to protocol 'DomainHandler'\n    |               `- note: add stubs for conformance\n 27 |   /// Backup service for snapshot operations\n 28 |   private let backupService: BackupServiceProtocol\n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:26:15: error: type 'RepositoryDomainHandler' does not conform to protocol 'DomainHandler'\n 24 |  thread safety throughout the handler.\n 25 |  */\n 26 | public struct RepositoryDomainHandler: DomainHandler {\n    |               |- error: type 'RepositoryDomainHandler' does not conform to protocol 'DomainHandler'\n    |               `- note: add stubs for conformance\n 27 |   /// Repository service for storage operations\n 28 |   private let repositoryService: RepositoryServiceProtocol\n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:45:15: error: type 'SecurityDomainHandler' does not conform to protocol 'DomainHandler'\n  43 |  ensuring sensitive material is protected throughout its lifecycle.\n  44 |  */\n  45 | public struct SecurityDomainHandler: DomainHandler {\n     |               |- error: type 'SecurityDomainHandler' does not conform to protocol 'DomainHandler'\n     |               `- note: add stubs for conformance\n  46 |   /// Security service for cryptographic operations\n  47 |   private let securityService: any SecurityProviderProtocol\n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/Extensions/RepositoryExtensions.swift:11:18: error: cannot find type 'RepositoryProtocol' in scope\n 9 |  * in the original protocol definition.\n10 |  */\n11 | public extension RepositoryProtocol {\n   |                  `- error: cannot find type 'RepositoryProtocol' in scope\n12 |     /**\n13 |      * Gets the display name for the repository\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:33:59: error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 31 | \n 32 |   /// The security bookmark service for managing security-scoped bookmarks\n 33 |   private let securityBookmarkService: SecurityInterfaces.SecurityBookmarkProtocol\n    |                                                           `- error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 34 | \n 35 |   /// Event continuations for streaming events\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:48:49: error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 46 |     configuration: APIConfigurationDTO,\n 47 |     logger: LoggingProtocol,\n 48 |     securityBookmarkService: SecurityInterfaces.SecurityBookmarkProtocol\n    |                                                 `- error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 49 |   ) {\n 50 |     self.configuration = configuration\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:23:14: error: type 'APIServiceActor' does not conform to protocol 'APIServiceProtocol'\n 21 | /// All mutable state is properly isolated within the actor.\n 22 | /// All methods use Swift's structured concurrency for safe asynchronous operations.\n 23 | public actor APIServiceActor: APIServiceProtocol {\n    |              |- error: type 'APIServiceActor' does not conform to protocol 'APIServiceProtocol'\n    |              `- note: add stubs for conformance\n 24 |   // MARK: - Private Properties\n 25 | \n    :\n 58 |   /// - Parameter configuration: The configuration to use for initialisation\n 59 |   /// - Throws: UmbraErrors.APIError if initialisation fails\n 60 |   public func initialise(configuration: APIConfigurationDTO) async throws {\n    |               `- note: candidate has non-matching type '(APIConfigurationDTO) async throws -\u003e ()'\n 61 |     // Log the initialisation attempt with privacy-aware logging\n 62 |     await logger.info(\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/APIInterfaces/Protocols/APIServiceProtocol.swift:24:8: note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n22 |   /// - Parameter configuration: The configuration to use for initialisation\n23 |   /// - Throws: UmbraErrors.APIError if initialisation fails\n24 |   func initialise(configuration: APIConfigurationDTO) async throws\n   |        `- note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n25 | \n26 |   /// Creates an encrypted security-scoped bookmark for the specified URL\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:64:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 62 |     await logger.info(\n 63 |       \"Initialising API service\",\n 64 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 65 |         domainName: \"APIService\",\n 66 |         source: \"initialise\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:78:74: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 76 |     do {\n 77 |       // Perform initialization steps as needed\n 78 |       await logger.info(\"API service initialised successfully\", context: LogContextDTO(domainName: \"APIService\", source: \"initialise\", metadata: LogMetadataDTOCollection()))\n    |                                                                          `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 79 |     } catch {\n 80 |       // Log the error and throw an appropriate domain-specific error\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:83:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 81 |       await logger.error(\n 82 |         \"Failed to initialise API service: \\(error.localizedDescription)\",\n 83 |         context: LogContextDTO(\n    |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 84 |           domainName: \"APIService\",\n 85 |           source: \"initialise\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:92:22: error: type 'APIError' has no member 'initialisation'\n 90 | \n 91 |       // Rethrow as a domain-specific error\n 92 |       throw APIError.initialisation(\n    |                      `- error: type 'APIError' has no member 'initialisation'\n 93 |         message: \"Failed to initialise API service: \\(error.localizedDescription)\",\n 94 |         underlyingError: error\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:107:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n105 |     await logger.debug(\n106 |       \"Creating encrypted bookmark\",\n107 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n108 |         domainName: \"APIService\",\n109 |         source: \"createEncryptedBookmark\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:141:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n139 |     await logger.debug(\n140 |       \"Resolving encrypted bookmark\",\n141 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n142 |         domainName: \"APIService\",\n143 |         source: \"resolveEncryptedBookmark\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:168:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n166 |       await logger.error(\n167 |         \"Failed to resolve bookmark\",\n168 |         context: LogContextDTO(\n    |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n169 |           domainName: \"APIService\",\n170 |           source: \"resolveEncryptedBookmark\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:190:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n188 |     await logger.debug(\n189 |       \"Deleting encrypted bookmark\",\n190 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n191 |         domainName: \"APIService\",\n192 |         source: \"deleteEncryptedBookmark\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:204:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n202 |       await logger.info(\n203 |         \"Encrypted bookmark deleted\",\n204 |         context: LogContextDTO(\n    |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n205 |           domainName: \"APIService\",\n206 |           source: \"deleteEncryptedBookmark\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:225:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n223 |       await logger.error(\n224 |         \"Failed to delete bookmark\",\n225 |         context: LogContextDTO(\n    |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n226 |           domainName: \"APIService\",\n227 |           source: \"deleteEncryptedBookmark\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:253:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n251 |     await logger.debug(\n252 |       \"Returning API version information\",\n253 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n254 |         domainName: \"APIService\",\n255 |         source: \"getVersion\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:276:22: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n274 |           await logger.debug(\n275 |             \"Subscribing to API events\",\n276 |             context: LogContextDTO(\n    |                      `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n277 |               domainName: \"APIService\",\n278 |               source: \"subscribeToEvents\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:324:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n322 |     await logger.debug(\n323 |       \"Event subscription removed\",\n324 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n325 |         domainName: \"APIService\",\n326 |         source: \"removeEventContinuation\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:344:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n342 |       await logger.trace(\n343 |         \"Published event to subscriber\",\n344 |         context: LogContextDTO(\n    |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n345 |           domainName: \"APIService\",\n346 |           source: \"publishEvent\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:364:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n362 |     await logger.info(\n363 |       \"Registered event subscriber\",\n364 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n365 |         domainName: \"APIService\",\n366 |         source: \"registerEventSubscriber\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:382:65: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n380 |     // In a real implementation, we would unregister this continuation from an event bus\n381 |     // For now, we'll just log that it was called\n382 |     await logger.info(\"Unregistered event subscriber\", context: LogContextDTO(domainName: \"APIService\", source: \"unregisterEventSubscriber\", metadata: LogMetadataDTOCollection()))\n    |                                                                 `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n383 | \n384 |     // Remove the continuation from our collection by comparing continuation IDs\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:30:15: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 28 | \n 29 |   /// Active operations tracking\n 30 |   private var activeOperations: [String: Task\u003cAny, Error\u003e] = [:]\n    |               `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 31 | \n 32 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:171:23: error: 'OperationResult' is not a member type of type 'T'\n169 |     _ operation: T,\n170 |     options _: APIConfigurationOptions? = nil\n171 |   ) async throws -\u003e T.OperationResult {\n    |                       `- error: 'OperationResult' is not a member type of type 'T'\n172 |     let operationID = UUID().uuidString\n173 |     let operationMetadata = LogMetadataDTOCollection()\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:275:26: error: 'OperationResult' is not a member type of type 'T'\n273 |     _ operation: T,\n274 |     options: APIConfigurationOptions? = nil\n275 |   ) async -\u003e APIResult\u003cT.OperationResult\u003e {\n    |                          `- error: 'OperationResult' is not a member type of type 'T'\n276 |     do {\n277 |       let result = try await execute(operation, options: options)\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:14:14: error: type 'AlphaAPIService' does not conform to protocol 'APIServiceProtocol'\n 12 |  and requirements, with consistent error handling.\n 13 |  */\n 14 | public actor AlphaAPIService: APIServiceProtocol {\n    |              |- error: type 'AlphaAPIService' does not conform to protocol 'APIServiceProtocol'\n    |              `- note: add stubs for conformance\n 15 |   // MARK: - Private Properties\n 16 | \n    :\n 58 |    - Throws: UmbraErrors.APIError if initialisation fails\n 59 |    */\n 60 |   public func initialise(configuration: APIConfigurationDTO) async throws {\n    |               `- note: candidate has non-matching type '(APIConfigurationDTO) async throws -\u003e ()'\n 61 |     self.configuration = configuration\n 62 |     \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/APIInterfaces/Protocols/APIServiceProtocol.swift:24:8: note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n22 |   /// - Parameter configuration: The configuration to use for initialisation\n23 |   /// - Throws: UmbraErrors.APIError if initialisation fails\n24 |   func initialise(configuration: APIConfigurationDTO) async throws\n   |        `- note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n25 | \n26 |   /// Creates an encrypted security-scoped bookmark for the specified URL\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:65:5: error: cannot find 'securityDomainHandler' in scope\n 63 |     // Initialize domain handlers\n 64 |     // In a real implementation, these would be properly created and configured\n 65 |     securityDomainHandler = SecurityDomainHandler(logger: logger)\n    |     `- error: cannot find 'securityDomainHandler' in scope\n 66 |     \n 67 |     // Log initialization\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:65:51: error: missing argument for parameter 'service' in call\n 63 |     // Initialize domain handlers\n 64 |     // In a real implementation, these would be properly created and configured\n 65 |     securityDomainHandler = SecurityDomainHandler(logger: logger)\n    |                                                   `- error: missing argument for parameter 'service' in call\n 66 |     \n 67 |     // Log initialization\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:62:10: note: 'init(service:logger:)' declared here\n  60 |    proper isolation and thread safety for all cryptographic operations.\n  61 |    */\n  62 |   public init(\n     |          `- note: 'init(service:logger:)' declared here\n  63 |     service: any SecurityProviderProtocol,\n  64 |     logger: (any LoggingProtocol)?=nil\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:70:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 68 |     await logger.info(\n 69 |       \"API service initialized\",\n 70 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 71 |         domainName: \"APIService\",\n 72 |         source: \"initialise\",\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:124:28: error: value of type 'APIConfigurationDTO' has no member 'majorVersion'\n122 |   public func getVersion() async -\u003e APIVersionDTO {\n123 |     let version = APIVersionDTO(\n124 |       major: configuration.majorVersion,\n    |                            `- error: value of type 'APIConfigurationDTO' has no member 'majorVersion'\n125 |       minor: configuration.minorVersion,\n126 |       patch: configuration.patchVersion,\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:125:28: error: value of type 'APIConfigurationDTO' has no member 'minorVersion'\n123 |     let version = APIVersionDTO(\n124 |       major: configuration.majorVersion,\n125 |       minor: configuration.minorVersion,\n    |                            `- error: value of type 'APIConfigurationDTO' has no member 'minorVersion'\n126 |       patch: configuration.patchVersion,\n127 |       buildIdentifier: configuration.buildIdentifier\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:126:28: error: value of type 'APIConfigurationDTO' has no member 'patchVersion'\n124 |       major: configuration.majorVersion,\n125 |       minor: configuration.minorVersion,\n126 |       patch: configuration.patchVersion,\n    |                            `- error: value of type 'APIConfigurationDTO' has no member 'patchVersion'\n127 |       buildIdentifier: configuration.buildIdentifier\n128 |     )\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:127:38: error: value of type 'APIConfigurationDTO' has no member 'buildIdentifier'\n125 |       minor: configuration.minorVersion,\n126 |       patch: configuration.patchVersion,\n127 |       buildIdentifier: configuration.buildIdentifier\n    |                                      `- error: value of type 'APIConfigurationDTO' has no member 'buildIdentifier'\n128 |     )\n129 |     \n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:180:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n178 |     await logger.info(\n179 |       \"Executing operation \\(String(describing: type(of: operation)))\",\n180 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n181 |         domainName: \"APIService\",\n182 |         source: \"execute\",\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:202:90: error: 'OperationResult' is not a member type of type 'T'\n200 | \n201 |         // Check if the handler can handle this type of operation\n202 |         guard let result = try await handler.handleOperation(operation: operation) as? T.OperationResult else {\n    |                                                                                          `- error: 'OperationResult' is not a member type of type 'T'\n203 |           throw APIError.operationFailed(\n204 |             message: \"Operation \\(type(of: operation)) not supported by handler for domain \\(domain)\",\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:248:47: error: 'OperationResult' is not a member type of type 'T'\n246 |     do {\n247 |       // Await the task result\n248 |       let result = try await task.value as! T.OperationResult\n    |                                               `- error: 'OperationResult' is not a member type of type 'T'\n249 | \n250 |       // Remove the task from active operations\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:298:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n296 |       await logger.warning(\n297 |         \"Operation not found for cancellation\",\n298 |         context: LogContextDTO(\n    |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n299 |           domainName: \"APIService\",\n300 |           source: \"cancelOperation\",\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:311:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n309 |     await logger.info(\n310 |       \"Cancelling operation\",\n311 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n312 |         domainName: \"APIService\",\n313 |         source: \"cancelOperation\",\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:320:10: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n318 | \n319 |     // Cancel the task\n320 |     task.cancel()\n    |          `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n321 | \n322 |     // Remove from active operations\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:358:28: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n356 | \n357 |     // Handle NSError\n358 |     if let nsError = error as? NSError {\n    |                            `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n359 |       switch nsError.domain {\n360 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:391:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n389 |     await logger.info(\n390 |       \"Registered event subscriber\",\n391 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n392 |         domainName: \"APIService\",\n393 |         source: \"registerEventSubscriber\",\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:415:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n413 |     await logger.info(\n414 |       \"Unregistered event subscriber\",\n415 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n416 |         domainName: \"APIService\",\n417 |         source: \"unregisterEventSubscriber\",\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:450:9: warning: variable 'result' was never mutated; consider changing to 'let' constant\n448 |    */\n449 |   func mergeWith(_: LogMetadataDTOCollection) -\u003e LogMetadataDTOCollection {\n450 |     var result = self\n    |         `- warning: variable 'result' was never mutated; consider changing to 'let' constant\n451 | \n452 |     // Since we don't have direct access to the underlying storage,\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:333:38: error: cannot find type 'SecurityConfigOptions' in scope\n331 |   }\n332 | \n333 |   func createSecureConfig(options _: SecurityConfigOptions) async -\u003e SecurityConfigDTO {\n    |                                      `- error: cannot find type 'SecurityConfigOptions' in scope\n334 |     fatalError(\"Not implemented in placeholder\")\n335 |   }\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:358:16: error: type 'RepositoryDomainHandlerImpl' does not conform to protocol 'DomainHandler'\n356 | \n357 | /// Placeholder for repository domain handler\n358 | private struct RepositoryDomainHandlerImpl: DomainHandler {\n    |                |- error: type 'RepositoryDomainHandlerImpl' does not conform to protocol 'DomainHandler'\n    |                `- note: add stubs for conformance\n359 |   let service: RepositoryServiceProtocol\n360 |   let logger: LoggingProtocol\n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:375:16: error: type 'BackupDomainHandlerImpl' does not conform to protocol 'DomainHandler'\n373 | \n374 | /// Placeholder for backup domain handler\n375 | private struct BackupDomainHandlerImpl: DomainHandler {\n    |                |- error: type 'BackupDomainHandlerImpl' does not conform to protocol 'DomainHandler'\n    |                `- note: add stubs for conformance\n376 |   let service: BackupServiceProtocol\n377 |   let logger: LoggingProtocol\n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:394:16: error: type 'SecurityDomainHandlerMock' does not conform to protocol 'DomainHandler'\n392 | \n393 | /// Mock security domain handler for testing\n394 | private struct SecurityDomainHandlerMock: DomainHandler {\n    |                |- error: type 'SecurityDomainHandlerMock' does not conform to protocol 'DomainHandler'\n    |                `- note: add stubs for conformance\n395 |   let logger: LoggingProtocol\n396 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:408:16: error: type 'RepositoryDomainHandlerMock' does not conform to protocol 'DomainHandler'\n406 | \n407 | /// Mock repository domain handler for testing\n408 | private struct RepositoryDomainHandlerMock: DomainHandler {\n    |                |- error: type 'RepositoryDomainHandlerMock' does not conform to protocol 'DomainHandler'\n    |                `- note: add stubs for conformance\n409 |   let logger: LoggingProtocol\n410 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:422:16: error: type 'BackupDomainHandlerMock' does not conform to protocol 'DomainHandler'\n420 | \n421 | /// Mock backup domain handler for testing\n422 | private struct BackupDomainHandlerMock: DomainHandler {\n    |                |- error: type 'BackupDomainHandlerMock' does not conform to protocol 'DomainHandler'\n    |                `- note: add stubs for conformance\n423 |   let logger: LoggingProtocol\n424 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:436:15: error: type 'SystemDomainHandlerMock' does not conform to protocol 'DomainHandler'\n434 | \n435 | /// Mock implementation of a system domain handler for testing\n436 | private class SystemDomainHandlerMock: DomainHandler {\n    |               |- error: type 'SystemDomainHandlerMock' does not conform to protocol 'DomainHandler'\n    |               `- note: add stubs for conformance\n437 |   /// Logger instance\n438 |   private let logger: LoggingProtocol\n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:171:5: error: module 'LoggingServices' has no member named 'createLogger'\n169 |   private static func createDefaultLogger() -\u003e LoggingProtocol {\n170 |     // In a real implementation, this would use proper logging configuration\n171 |     LoggingServices.createLogger(\n    |     `- error: module 'LoggingServices' has no member named 'createLogger'\n172 |       domain: \"APIService\",\n173 |       category: \"Service\"\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:183:5: error: module 'LoggingServices' has no member named 'createLogger'\n181 |    */\n182 |   private static func createProductionLogger() -\u003e LoggingProtocol {\n183 |     LoggingServices.createLogger(\n    |     `- error: module 'LoggingServices' has no member named 'createLogger'\n184 |       domain: \"APIService\",\n185 |       category: \"Service\"\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:195:5: error: module 'LoggingServices' has no member named 'createLogger'\n193 |    */\n194 |   private static func createTestingLogger() -\u003e LoggingProtocol {\n195 |     LoggingServices.createLogger(\n    |     `- error: module 'LoggingServices' has no member named 'createLogger'\n196 |       domain: \"APIServiceTest\",\n197 |       category: \"Test\"\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:443:27: error: module 'LoggingServices' has no member named 'createLogger'\n441 |   /// - Parameter logger: Logger to use for this handler\n442 |   init(logger: LoggingProtocol?) {\n443 |     self.logger=logger ?? LoggingServices.createLogger(domain: \"SystemDomainMock\", category: \"Test\")\n    |                           `- error: module 'LoggingServices' has no member named 'createLogger'\n444 |   }\n445 | \n\npackages/UmbraImplementations/Sources/APIServices/Domains/BackupDomainHandler.swift:26:15: error: type 'BackupDomainHandler' does not conform to protocol 'DomainHandler'\n 24 |  thread safety throughout the handler.\n 25 |  */\n 26 | public struct BackupDomainHandler: DomainHandler {\n    |               |- error: type 'BackupDomainHandler' does not conform to protocol 'DomainHandler'\n    |               `- note: add stubs for conformance\n 27 |   /// Backup service for snapshot operations\n 28 |   private let backupService: BackupServiceProtocol\n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/Domains/BackupDomainHandler.swift:179:19: error: type '_ErrorCodeProtocol' has no member 'repositoryNotFound'\n177 |             identifier: id\n178 |           )\n179 |         case let .repositoryNotFound(id):\n    |                   `- error: type '_ErrorCodeProtocol' has no member 'repositoryNotFound'\n180 |           return APIError.resourceNotFound(\n181 |             message: \"Repository not found: \\(id)\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/BackupDomainHandler.swift:184:19: error: type '_ErrorCodeProtocol' has no member 'backupFailed'\n182 |             identifier: id\n183 |           )\n184 |         case let .backupFailed(message):\n    |                   `- error: type '_ErrorCodeProtocol' has no member 'backupFailed'\n185 |           return APIError.operationFailed(\n186 |             message: message,\n\npackages/UmbraImplementations/Sources/APIServices/Domains/BackupDomainHandler.swift:190:19: error: type '_ErrorCodeProtocol' has no member 'pathNotFound'\n188 |             underlyingError: backupError\n189 |           )\n190 |         case let .pathNotFound(path):\n    |                   `- error: type '_ErrorCodeProtocol' has no member 'pathNotFound'\n191 |           return APIError.resourceNotFound(\n192 |             message: \"Backup path not found: \\(path)\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/BackupDomainHandler.swift:195:19: error: type '_ErrorCodeProtocol' has no member 'permissionDenied'\n193 |             identifier: path\n194 |           )\n195 |         case let .permissionDenied(message):\n    |                   `- error: type '_ErrorCodeProtocol' has no member 'permissionDenied'\n196 |           return APIError.permissionDenied(\n197 |             message: message,\n\npackages/UmbraImplementations/Sources/APIServices/Domains/BackupDomainHandler.swift:200:19: error: type '_ErrorCodeProtocol' has no member 'invalidOperation'\n198 |             code: \"BACKUP_PERMISSION_DENIED\"\n199 |           )\n200 |         case let .invalidOperation(message):\n    |                   `- error: type '_ErrorCodeProtocol' has no member 'invalidOperation'\n201 |           return APIError.validationFailed(\n202 |             message: message,\n\npackages/UmbraImplementations/Sources/APIServices/Domains/BackupDomainHandler.swift:733:55: error: missing argument for parameter 'filesRestored' in call\n731 |       fileCount: result.fileCount,\n732 |       duration: result.duration,\n733 |       targetPath: operation.parameters.targetDirectory\n    |                                                       `- error: missing argument for parameter 'filesRestored' in call\n734 |     )\n735 | \n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:382:10: note: 'init(snapshotID:restoreTime:totalSize:fileCount:duration:targetPath:filesRestored:)' declared here\n380 |   public let filesRestored: Int\n381 | \n382 |   public init(\n    |          `- note: 'init(snapshotID:restoreTime:totalSize:fileCount:duration:targetPath:filesRestored:)' declared here\n383 |     snapshotID: String,\n384 |     restoreTime: Date,\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:26:15: error: type 'RepositoryDomainHandler' does not conform to protocol 'DomainHandler'\n 24 |  thread safety throughout the handler.\n 25 |  */\n 26 | public struct RepositoryDomainHandler: DomainHandler {\n    |               |- error: type 'RepositoryDomainHandler' does not conform to protocol 'DomainHandler'\n    |               `- note: add stubs for conformance\n 27 |   /// Repository service for storage operations\n 28 |   private let repositoryService: RepositoryServiceProtocol\n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:310:28: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n308 |         RepositoryInfo(\n309 |           id: id,\n310 |           name: repository.getName() ?? repository.identifier,\n    |                            `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n311 |           status: mapStatus(Task.detached { repository.state }.value),\n312 |           creationDate: repository.getCreationDate() ?? Date(),\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:312:36: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n310 |           name: repository.getName() ?? repository.identifier,\n311 |           status: mapStatus(Task.detached { repository.state }.value),\n312 |           creationDate: repository.getCreationDate() ?? Date(),\n    |                                    `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n313 |           lastAccessDate: repository.getLastAccessDate() ?? Date()\n314 |         )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:313:38: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n311 |           status: mapStatus(Task.detached { repository.state }.value),\n312 |           creationDate: repository.getCreationDate() ?? Date(),\n313 |           lastAccessDate: repository.getLastAccessDate() ?? Date()\n    |                                      `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n314 |         )\n315 |       )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:359:24: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n357 |     let details=try await RepositoryDetails(\n358 |       id: repository.identifier,\n359 |       name: repository.getName() ?? repository.identifier,\n    |                        `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n360 |       status: mapStatus(Task.detached { repository.state }.value),\n361 |       creationDate: repository.getCreationDate() ?? Date(),\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:361:32: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n359 |       name: repository.getName() ?? repository.identifier,\n360 |       status: mapStatus(Task.detached { repository.state }.value),\n361 |       creationDate: repository.getCreationDate() ?? Date(),\n    |                                `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n362 |       lastAccessDate: repository.getLastAccessDate() ?? Date(),\n363 |       snapshotCount: Int(stats.snapshotCount),\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:362:34: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n360 |       status: mapStatus(Task.detached { repository.state }.value),\n361 |       creationDate: repository.getCreationDate() ?? Date(),\n362 |       lastAccessDate: repository.getLastAccessDate() ?? Date(),\n    |                                  `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n363 |       snapshotCount: Int(stats.snapshotCount),\n364 |       totalSize: Int(stats.totalSize),\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:399:26: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'setName'\n397 | \n398 |     // Apply name and other metadata if needed\n399 |     try await repository.setName(params.name)\n    |                          `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'setName'\n400 |     try await repository.setMetadata([\n401 |       \"creation_date\": Date().description\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:400:26: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'setMetadata'\n398 |     // Apply name and other metadata if needed\n399 |     try await repository.setName(params.name)\n400 |     try await repository.setMetadata([\n    |                          `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'setMetadata'\n401 |       \"creation_date\": Date().description\n402 |     ])\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:407:24: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n405 |     let info=try await RepositoryInfo(\n406 |       id: repository.identifier,\n407 |       name: repository.getName() ?? repository.identifier,\n    |                        `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n408 |       status: mapStatus(Task.detached { repository.state }.value),\n409 |       creationDate: repository.getCreationDate() ?? Date(),\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:409:32: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n407 |       name: repository.getName() ?? repository.identifier,\n408 |       status: mapStatus(Task.detached { repository.state }.value),\n409 |       creationDate: repository.getCreationDate() ?? Date(),\n    |                                `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n410 |       lastAccessDate: repository.getLastAccessDate() ?? Date()\n411 |     )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:410:34: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n408 |       status: mapStatus(Task.detached { repository.state }.value),\n409 |       creationDate: repository.getCreationDate() ?? Date(),\n410 |       lastAccessDate: repository.getLastAccessDate() ?? Date()\n    |                                  `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n411 |     )\n412 | \n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:420:65: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'name'\n418 |           .withPublic(key: \"operation\", value: \"createRepository\")\n419 |           .withPublic(key: \"repository_id\", value: repository.identifier)\n420 |           .withPublic(key: \"repository_name\", value: repository.name)\n    |                                                                 `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'name'\n421 |       )\n422 |     )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:456:27: error: value of type 'UpdateRepositoryOperation' has no member 'name'\n454 | \n455 |     // Update the repository metadata\n456 |     if let name=operation.name {\n    |                           `- error: value of type 'UpdateRepositoryOperation' has no member 'name'\n457 |       try await repository.setName(name)\n458 |     }\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:457:28: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'setName'\n455 |     // Update the repository metadata\n456 |     if let name=operation.name {\n457 |       try await repository.setName(name)\n    |                            `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'setName'\n458 |     }\n459 | \n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:463:24: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n461 |     let updatedInfo=try await RepositoryInfo(\n462 |       id: repository.identifier,\n463 |       name: repository.getName() ?? repository.identifier,\n    |                        `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n464 |       status: mapStatus(Task.detached { repository.state }.value),\n465 |       creationDate: repository.getCreationDate() ?? Date(),\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:465:32: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n463 |       name: repository.getName() ?? repository.identifier,\n464 |       status: mapStatus(Task.detached { repository.state }.value),\n465 |       creationDate: repository.getCreationDate() ?? Date(),\n    |                                `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n466 |       lastAccessDate: repository.getLastAccessDate() ?? Date()\n467 |     )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:466:34: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n464 |       status: mapStatus(Task.detached { repository.state }.value),\n465 |       creationDate: repository.getCreationDate() ?? Date(),\n466 |       lastAccessDate: repository.getLastAccessDate() ?? Date()\n    |                                  `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n467 |     )\n468 | \n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:45:15: error: type 'SecurityDomainHandler' does not conform to protocol 'DomainHandler'\n  43 |  ensuring sensitive material is protected throughout its lifecycle.\n  44 |  */\n  45 | public struct SecurityDomainHandler: DomainHandler {\n     |               |- error: type 'SecurityDomainHandler' does not conform to protocol 'DomainHandler'\n     |               `- note: add stubs for conformance\n  46 |   /// Security service for cryptographic operations\n  47 |   private let securityService: any SecurityProviderProtocol\n\npackages/UmbraImplementations/Sources/APIServices/AlphaDomainTypes.swift:53:7: note: protocol requires property 'domain' with type 'String'\n 51 |    The domain identifier this handler supports\n 52 |    */\n 53 |   var domain: String { get }\n    |       `- note: protocol requires property 'domain' with type 'String'\n 54 |   \n 55 |   /**\n    :\n 60 |    - Throws: APIError if the operation fails\n 61 |    */\n 62 |   func handleOperation\u003cT: APIOperation\u003e(operation: T) async throws -\u003e Any\n    |        `- note: protocol requires function 'handleOperation(operation:)' with type '\u003cT\u003e (operation: T) async throws -\u003e Any'\n 63 | }\n 64 | \n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:89:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n  87 |     await logger?.debug(\n  88 |       \"Handling security operation: \\(operationName)\",\n  89 |       context: LogContextDTO(\n     |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n  90 |         domainName: \"security\",\n  91 |         source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:109:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 107 |       await logger?.info(\n 108 |         \"Security operation completed successfully\",\n 109 |         context: LogContextDTO(\n     |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 110 |           domainName: \"security\",\n 111 |           source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:120:47: error: value of type 'APIError' has no member 'code'\n 118 |       // Already an APIError, just log and rethrow\n 119 |       let errorMetadata=LogMetadataDTOCollection()\n 120 |         .with(key: \"error_code\", value: error.code, privacyLevel: .public)\n     |                                               `- error: value of type 'APIError' has no member 'code'\n 121 |         .with(key: \"error_domain\", value: \"security\", privacyLevel: .public)\n 122 | \n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:125:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 123 |       await logger?.error(\n 124 |         \"Security operation failed: \\(error.localizedDescription)\",\n 125 |         context: LogContextDTO(\n     |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 126 |           domainName: \"security\",\n 127 |           source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:139:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 137 |       await logger?.error(\n 138 |         \"Security operation failed: \\(apiError.localizedDescription)\",\n 139 |         context: LogContextDTO(\n     |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 140 |           domainName: \"security\",\n 141 |           source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:143:54: error: value of type 'APIError' has no member 'code'\n 141 |           source: \"SecurityDomainHandler\",\n 142 |           metadata: LogMetadataDTOCollection()\n 143 |             .with(key: \"error_code\", value: apiError.code, privacyLevel: .public)\n     |                                                      `- error: value of type 'APIError' has no member 'code'\n 144 |             .with(key: \"error_domain\", value: \"security\", privacyLevel: .public)\n 145 |         )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:334:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 332 |         await logger?.warning(\n 333 |           \"SHA-1 is deprecated and was requested, using SHA-256 instead\",\n 334 |           context: LogContextDTO(\n     |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 335 |             domainName: \"security\",\n 336 |             source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:347:20: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 345 |         await logger?.warning(\n 346 |           \"SHA-384 is not directly supported, using SHA-512 instead\",\n 347 |           context: LogContextDTO(\n     |                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 348 |             domainName: \"security\",\n 349 |             source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:361:22: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 359 |           await logger?.warning(\n 360 |             \"Empty hash algorithm specified, using SHA-256 as default\",\n 361 |             context: LogContextDTO(\n     |                      `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 362 |               domainName: \"security\",\n 363 |               source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:390:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 388 |     await logger?.debug(\n 389 |       \"Processing encryption request\",\n 390 |       context: LogContextDTO(\n     |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 391 |         domainName: \"security\",\n 392 |         source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:456:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 454 |     await logger?.debug(\n 455 |       \"Processing decryption request\",\n 456 |       context: LogContextDTO(\n     |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 457 |         domainName: \"security\",\n 458 |         source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:514:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 512 |     await logger?.debug(\n 513 |       \"Generating cryptographic key\",\n 514 |       context: LogContextDTO(\n     |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 515 |         domainName: \"security\",\n 516 |         source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:569:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 567 |     await logger?.debug(\n 568 |       \"Computing hash for data\",\n 569 |       context: LogContextDTO(\n     |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 570 |         domainName: \"security\",\n 571 |         source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:580:38: error: value of type 'any SecurityProviderProtocol' has no member 'hashData'\n 578 | \n 579 |     // Compute the hash\n 580 |     return try await securityService.hashData(\n     |                                      `- error: value of type 'any SecurityProviderProtocol' has no member 'hashData'\n 581 |       data: operation.data,\n 582 |       algorithm: algorithm\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:601:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 599 |     await logger?.debug(\n 600 |       \"Storing cryptographic key\",\n 601 |       context: LogContextDTO(\n     |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 602 |         domainName: \"security\",\n 603 |         source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:643:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 641 |     await logger?.info(\n 642 |       \"Key stored successfully\",\n 643 |       context: LogContextDTO(\n     |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 644 |         domainName: \"security\",\n 645 |         source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:670:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 668 |     await logger?.debug(\n 669 |       \"Retrieving cryptographic key\",\n 670 |       context: LogContextDTO(\n     |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 671 |         domainName: \"security\",\n 672 |         source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:692:32: error: value of type 'RetrieveKey' has no member 'keyType'\n 690 |           \"operation\": \"retrieveKey\",\n 691 |           \"keyIdentifier\": operation.identifier,\n 692 |           \"keyType\": operation.keyType ?? \"symmetric\"\n     |                                `- error: value of type 'RetrieveKey' has no member 'keyType'\n 693 |         ]\n 694 |       )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:703:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 701 |       await logger?.info(\n 702 |         \"Key retrieved successfully\",\n 703 |         context: LogContextDTO(\n     |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 704 |           domainName: \"security\",\n 705 |           source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:724:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 722 |       await logger?.error(\n 723 |         \"Failed to retrieve key\",\n 724 |         context: LogContextDTO(\n     |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 725 |           domainName: \"security\",\n 726 |           source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:752:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 750 |     await logger?.debug(\n 751 |       \"Deleting cryptographic key\",\n 752 |       context: LogContextDTO(\n     |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 753 |         domainName: \"security\",\n 754 |         source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:774:31: error: value of type 'DeleteKey' has no member 'forced'\n 772 |           \"operation\": \"deleteKey\",\n 773 |           \"keyIdentifier\": operation.identifier,\n 774 |           \"forced\": operation.forced ? \"true\" : \"false\"\n     |                               `- error: value of type 'DeleteKey' has no member 'forced'\n 775 |         ]\n 776 |       )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:784:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 782 |     await logger?.info(\n 783 |       \"Key deleted successfully\",\n 784 |       context: LogContextDTO(\n     |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 785 |         domainName: \"security\",\n 786 |         source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:821:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 819 |     await logger?.debug(\n 820 |       \"Storing secret data\",\n 821 |       context: LogContextDTO(\n     |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 822 |         domainName: \"security\",\n 823 |         source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:829:44: error: value of type 'any SecurityProviderProtocol' has no member 'saveSecret'\n 827 | \n 828 |     // Store the secret with the provided identifier or generate a new one\n 829 |     let secretID=try await securityService.saveSecret(\n     |                                            `- error: value of type 'any SecurityProviderProtocol' has no member 'saveSecret'\n 830 |       secret: operation.secret,\n 831 |       identifier: operation.identifier\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:836:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 834 |     await logger?.info(\n 835 |       \"Successfully stored secret\",\n 836 |       context: LogContextDTO(\n     |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 837 |         domainName: \"security\",\n 838 |         source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:864:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 862 |     await logger?.debug(\n 863 |       \"Retrieving secret data\",\n 864 |       context: LogContextDTO(\n     |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 865 |         domainName: \"security\",\n 866 |         source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:878:44: error: value of type 'any SecurityProviderProtocol' has no member 'getSecret'\n 876 |     // Retrieve secret\n 877 |     do {\n 878 |       let result=try await securityService.getSecret(\n     |                                            `- error: value of type 'any SecurityProviderProtocol' has no member 'getSecret'\n 879 |         identifier: operation.identifier\n 880 |       )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:884:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 882 |       await logger?.info(\n 883 |         \"Successfully retrieved secret\",\n 884 |         context: LogContextDTO(\n     |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 885 |           domainName: \"security\",\n 886 |           source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:898:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 896 |       await logger?.error(\n 897 |         \"Failed to retrieve secret\",\n 898 |         context: LogContextDTO(\n     |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 899 |           domainName: \"security\",\n 900 |           source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:927:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 925 |     await logger?.debug(\n 926 |       \"Deleting secret data\",\n 927 |       context: LogContextDTO(\n     |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 928 |         domainName: \"security\",\n 929 |         source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:940:33: error: value of type 'any SecurityProviderProtocol' has no member 'removeSecret'\n 938 | \n 939 |     // Delete the secret\n 940 |     _=try await securityService.removeSecret(\n     |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'removeSecret'\n 941 |       identifier: operation.identifier\n 942 |     )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:946:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 944 |     await logger?.info(\n 945 |       \"Successfully deleted secret\",\n 946 |       context: LogContextDTO(\n     |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 947 |         domainName: \"security\",\n 948 |         source: \"SecurityDomainHandler\",\n\npackages/UmbraImplementations/Sources/APIServices/Extensions/RepositoryExtensions.swift:11:18: error: cannot find type 'RepositoryProtocol' in scope\n 9 |  * in the original protocol definition.\n10 |  */\n11 | public extension RepositoryProtocol {\n   |                  `- error: cannot find type 'RepositoryProtocol' in scope\n12 |     /**\n13 |      * Gets the display name for the repository\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:437:36: error: type 'BackupOperationError' has no member 'snapshotNotFound'\n435 |           return snapshot\n436 |         }\n437 |         throw BackupOperationError.snapshotNotFound(id: id)\n    |                                    `- error: type 'BackupOperationError' has no member 'snapshotNotFound'\n438 |       case let .failure(error):\n439 |         throw error\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:434:25: warning: no calls to throwing functions occur within 'try' expression\n432 |     switch result {\n433 |       case let .success(snapshots):\n434 |         if let snapshot=try? snapshots.first(where: { $0.id == id }) {\n    |                         `- warning: no calls to throwing functions occur within 'try' expression\n435 |           return snapshot\n436 |         }\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:479:52: error: binary operator '??' cannot be applied to operands of type '[String : Data]?' and '[String : Data]'\n477 |       paths: paths.map(\\.path),\n478 |       tags: config.tags,\n479 |       metadata: config.metadata as? [String: Data] ?? [:]\n    |                                                    `- error: binary operator '??' cannot be applied to operands of type '[String : Data]?' and '[String : Data]'\n480 |     )\n481 | \n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:539:22: error: value of type 'SnapshotFile' has no member 'id'\n537 |         return files.map { file in\n538 |           FileEntry(\n539 |             id: file.id, // Using our extension property\n    |                      `- error: value of type 'SnapshotFile' has no member 'id'\n540 |             path: file.path,\n541 |             size: file.size,\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:542:36: error: value of type 'SnapshotFile' has no member 'modificationDate'\n540 |             path: file.path,\n541 |             size: file.size,\n542 |             modificationDate: file.modificationDate ?? Date(), // Using our extension property\n    |                                    `- error: value of type 'SnapshotFile' has no member 'modificationDate'\n543 |             isDirectory: file.type == .directory, // Using our extension property\n544 |             hash: file.hash // Using our extension property\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:543:31: error: value of type 'SnapshotFile' has no member 'type'\n541 |             size: file.size,\n542 |             modificationDate: file.modificationDate ?? Date(), // Using our extension property\n543 |             isDirectory: file.type == .directory, // Using our extension property\n    |                               `- error: value of type 'SnapshotFile' has no member 'type'\n544 |             hash: file.hash // Using our extension property\n545 |           )\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:544:24: error: value of type 'SnapshotFile' has no member 'hash'\n542 |             modificationDate: file.modificationDate ?? Date(), // Using our extension property\n543 |             isDirectory: file.type == .directory, // Using our extension property\n544 |             hash: file.hash // Using our extension property\n    |                        `- error: value of type 'SnapshotFile' has no member 'hash'\n545 |           )\n546 |         }\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:543:40: error: cannot infer contextual base in reference to member 'directory'\n541 |             size: file.size,\n542 |             modificationDate: file.modificationDate ?? Date(), // Using our extension property\n543 |             isDirectory: file.type == .directory, // Using our extension property\n    |                                        `- error: cannot infer contextual base in reference to member 'directory'\n544 |             hash: file.hash // Using our extension property\n545 |           )\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:578:9: warning: initialization of immutable value 'snapshot' was never used; consider replacing with assignment to '_' or removing it\n576 |   ) async throws -\u003e RestoreResultDTO {\n577 |     // Get the snapshot\n578 |     let snapshot=try await getSnapshot(id: id, fromRepository: repositoryID)\n    |         `- warning: initialization of immutable value 'snapshot' was never used; consider replacing with assignment to '_' or removing it\n579 | \n580 |     // Start restore\nTarget //packages/UmbraImplementations/Sources/APIServices:APIServices failed to build\nINFO: Elapsed time: 0.819s, Critical Path: 0.72s\nINFO: 2 processes: 21 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator",
    "success": false,
    "start_time": "2025-04-08T00:57:21.609388+01:00",
    "end_time": "2025-04-08T00:57:23.848282+01:00",
    "duration": "2.238883167s",
    "output": "INFO: Invocation ID: a209b56e-7efb-43fa-80ce-450a0ee977b9\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator (16 packages loaded, 135 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/BackupServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/BackupServices:BackupServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/BackupServices/BackupServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:712:45: error: cannot find type 'VerificationResult' in scope\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n713 |     // Create a log context\n714 |     let logContext=BackupLogContext()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:710:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n708 |     snapshotID: String?,\n709 |     verifyData: Bool=true,\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n    |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:60:65: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                 `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:59:26: error: cannot find type 'CancellationToken' in scope\n 57 |     parameters: BackupCreateParameters,\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:129:66: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:128:26: error: cannot find type 'CancellationToken' in scope\n126 |     parameters: BackupRestoreParameters,\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:193:26: error: cannot find type 'CancellationToken' in scope\n191 |   public func listBackups(\n192 |     parameters: BackupListParameters,\n193 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n194 |   ) async throws -\u003e [BackupSnapshot] {\n195 |     // Create the list command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:250:21: error: cannot find type 'DeleteResult' in scope\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n250 |   ) async throws -\u003e DeleteResult {\n    |                     `- error: cannot find type 'DeleteResult' in scope\n251 |     // Create the delete command\n252 |     var command=ResticCommandImpl(arguments: [\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:249:26: error: cannot find type 'CancellationToken' in scope\n247 |   public func deleteBackup(\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n250 |   ) async throws -\u003e DeleteResult {\n251 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:296:26: error: cannot find type 'CancellationToken' in scope\n294 |     pattern: String?=nil,\n295 |     progressReporter _: BackupProgressReporter?,\n296 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n297 |   ) async throws -\u003e [SnapshotFileEntry] {\n298 |     // Create the find command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:664:80: error: cannot find type 'DeleteResult' in scope\n662 |    * Parse delete result from JSON output.\n663 |    */\n664 |   private func parseDeleteResult(output: String, snapshotID: String) throws -\u003e DeleteResult {\n    |                                                                                `- error: cannot find type 'DeleteResult' in scope\n665 |     guard let data=output.data(using: .utf8) else {\n666 |       throw BackupOperationError.parsingFailure(\"Could not convert output to data\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:707:70: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                      `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:706:26: error: cannot find type 'CancellationToken' in scope\n704 |     parameters: BackupMaintenanceParameters,\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:218:31: error: extra arguments at positions #3, #8 in call\n216 |         if let progressReporter=reporter {\n217 |           await progressReporter.reportProgress(\n218 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n219 |               phase: .processing,\n220 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:376:31: error: extra arguments at positions #3, #8 in call\n374 |         if let reporter {\n375 |           await reporter.reportProgress(\n376 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n377 |               phase: .processing,\n378 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:279:31: error: extra arguments at positions #3, #8 in call\n277 |         if let reporter {\n278 |           await reporter.reportProgress(\n279 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n280 |               phase: .processing,\n281 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:65:45: error: cannot find type 'CancellationToken' in scope\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n    |                                             `- error: cannot find type 'CancellationToken' in scope\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:67:24: error: cannot find type 'CancellationToken' in scope\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 68 |   ) async throws -\u003e R {\n 69 |     // Create a log context for this operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:18:15: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cAny, Error\u003e]=[:]\n    |               `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 19 | \n 20 |   /// Storage for active cancellation tokens\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               |                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               `- warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationHandlerProtocol.swift:52:8: note: a function type must be marked '@Sendable' to conform to 'Sendable'\n50 |    * - Throws: Error if the operation fails or is cancelled\n51 |    */\n52 |   func withCancellationSupport\u003cT\u003e(\n   |        `- note: a function type must be marked '@Sendable' to conform to 'Sendable'\n53 |     _ operation: @escaping () async throws -\u003e T,\n54 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:424:40: error: cannot find type 'SnapshotFileType' in scope\n422 | \n423 |   // Convert SnapshotFileType to BackupFileType\n424 |   private func convertFileType(_ type: SnapshotFileType?) -\u003e BackupFileType {\n    |                                        `- error: cannot find type 'SnapshotFileType' in scope\n425 |     guard let type else { return .file }\n426 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:332:47: error: cannot find type 'BackupCreationParameters' in scope\n330 | extension BackupCreateParameters {\n331 |   /// Convert to BackupInterfaces.BackupCreationParameters\n332 |   public func toBackupCreationParameters() -\u003e BackupCreationParameters {\n    |                                               `- error: cannot find type 'BackupCreationParameters' in scope\n333 |     BackupCreationParameters(\n334 |       sources: sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:342:39: error: cannot find type 'BackupCreationParameters' in scope\n340 | \n341 |   /// Create from BackupInterfaces.BackupCreationParameters\n342 |   public static func from(parameters: BackupCreationParameters) -\u003e BackupCreateParameters {\n    |                                       `- error: cannot find type 'BackupCreationParameters' in scope\n343 |     BackupCreateParameters(\n344 |       sources: parameters.sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:354:63: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n352 | extension BackupRestoreParameters {\n353 |   /// Convert to BackupInterfaces.BackupRestoreParameters\n354 |   public func toBackupRestoreParameters() -\u003e BackupInterfaces.BackupRestoreParameters {\n    |                                                               `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n355 |     BackupInterfaces.BackupRestoreParameters(\n356 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:368:8: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n366 |   public static func from(\n367 |     parameters: BackupInterfaces\n368 |       .BackupRestoreParameters\n    |        `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n369 |   ) -\u003e BackupRestoreParameters {\n370 |     BackupRestoreParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:382:60: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n380 | extension BackupListParameters {\n381 |   /// Convert to BackupInterfaces.BackupListParameters\n382 |   public func toBackupListParameters() -\u003e BackupInterfaces.BackupListParameters {\n    |                                                            `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n383 |     BackupInterfaces.BackupListParameters(\n384 |       tags: tags,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:396:8: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n394 |   public static func from(\n395 |     parameters: BackupInterfaces\n396 |       .BackupListParameters\n    |        `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n397 |   ) -\u003e BackupListParameters {\n398 |     BackupListParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:217:41: error: cannot find type 'VerificationResult' in scope\n215 | extension BackupVerificationResultDTO {\n216 |   /// Convert this DTO to a BackupInterfaces.VerificationResult\n217 |   public func toVerificationResult() -\u003e VerificationResult {\n    |                                         `- error: cannot find type 'VerificationResult' in scope\n218 |     VerificationResult(\n219 |       verified: verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:231:47: error: cannot find type 'VerificationResult' in scope\n229 | \n230 |   /// Create a BackupVerificationResultDTO from a BackupInterfaces.VerificationResult\n231 |   public static func from(verificationResult: VerificationResult) -\u003e BackupVerificationResultDTO {\n    |                                               `- error: cannot find type 'VerificationResult' in scope\n232 |     BackupVerificationResultDTO(\n233 |       verified: verificationResult.verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:245:39: error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n243 | }\n244 | \n245 | extension BackupVerificationResultDTO.VerificationIssue {\n    |                                       `- error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n246 |   /// Convert this DTO to a BackupInterfaces.VerificationIssue\n247 |   public func toVerificationIssue() -\u003e VerificationResult.VerificationIssue {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:271:39: error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n269 | }\n270 | \n271 | extension BackupVerificationResultDTO.RepairSummary {\n    |                                       `- error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n272 |   /// Convert this DTO to a BackupInterfaces.RepairSummary\n273 |   public func toRepairSummary() -\u003e VerificationResult.RepairSummary {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:294:39: error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n292 | }\n293 | \n294 | extension BackupVerificationResultDTO.RepairAction {\n    |                                       `- error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n295 |   /// Convert this DTO to a BackupInterfaces.RepairAction\n296 |   public func toRepairAction() -\u003e VerificationResult.RepairAction {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:27:15: warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n25 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken {\n26 |   private let token: BackupOperationCancellationToken\n27 |   private var _isCancelled: Bool=false\n   |               `- warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n28 | \n29 |   init(token: BackupOperationCancellationToken) {\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:39:9: warning: initialization of immutable value 'operationsService' was never used; consider replacing with assignment to '_' or removing it\n 37 | \n 38 |     // Create operations service\n 39 |     let operationsService=BackupOperationsService(\n    |         `- warning: initialization of immutable value 'operationsService' was never used; consider replacing with assignment to '_' or removing it\n 40 |       resticService: resticService,\n 41 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:47:9: warning: initialization of immutable value 'operationExecutor' was never used; consider replacing with assignment to '_' or removing it\n 45 | \n 46 |     // Create operation executor\n 47 |     let operationExecutor=BackupOperationExecutor(\n    |         `- warning: initialization of immutable value 'operationExecutor' was never used; consider replacing with assignment to '_' or removing it\n 48 |       logger: logger,\n 49 |       cancellationHandler: cancellationHandler,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:43:22: error: extra arguments at positions #2, #3 in call\n 41 |     let defaultMessage=\"Starting backup operation: \\(operation)\"\n 42 | \n 43 |     await logger.info(\n    |                      `- error: extra arguments at positions #2, #3 in call\n 44 |       message ?? defaultMessage,\n 45 |       metadata: logContext.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:44:32: error: missing argument for parameter 'context' in call\n 42 | \n 43 |     await logger.info(\n 44 |       message ?? defaultMessage,\n    |                                `- error: missing argument for parameter 'context' in call\n 45 |       metadata: logContext.toPrivacyMetadata(),\n 46 |       source: \"BackupService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:67:18: error: no exact matches in call to instance method 'info'\n 65 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"success\", privacy: .public)\n 66 | \n 67 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n 68 |       message ?? defaultMessage,\n 69 |       metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:91:18: error: no exact matches in call to instance method 'info'\n 89 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n 90 | \n 91 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n 92 |       message ?? defaultMessage,\n 93 |       metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:119:88: error: value of type 'BackupError' has no member 'code'\n117 |     // Add error details with appropriate privacy levels\n118 |     if let backupError=error as? BackupError {\n119 |       metadata[\"errorCode\"]=PrivacyMetadataValue(value: String(describing: backupError.code),\n    |                                                                                        `- error: value of type 'BackupError' has no member 'code'\n120 |                                                  privacy: .public)\n121 |       metadata[\"errorMessage\"]=PrivacyMetadataValue(value: backupError.localizedDescription,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:125:39: error: value of type 'BackupError' has no member 'context'\n123 | \n124 |       // Add structured error context if available\n125 |       if let errorContext=backupError.context {\n    |                                       `- error: value of type 'BackupError' has no member 'context'\n126 |         for (key, value) in errorContext {\n127 |           metadata[\"error_\\(key)\"]=PrivacyMetadataValue(value: value, privacy: .private)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:137:18: error: no exact matches in call to instance method 'error'\n135 |     }\n136 | \n137 |     await logger.error(\n    |                  `- error: no exact matches in call to instance method 'error'\n138 |       message ?? defaultMessage,\n139 |       metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 50 | \n 51 |   /// Log a critical message\n    :\n 85 |   }\n 86 | \n 87 |   public func error(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 88 |     await log(.error, message, context: context)\n 89 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:166:22: error: no exact matches in call to instance method 'info'\n164 |         metadata[\"description\"]=PrivacyMetadataValue(value: description, privacy: .public)\n165 | \n166 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n167 |           \"Initialising backup operation: \\(operation)\",\n168 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:179:22: error: no exact matches in call to instance method 'info'\n177 |                                                          privacy: .public)\n178 | \n179 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n180 |           \"Processing backup operation: \\(operation) - \\(phase) (\\(String(format: \"%.1f%%\", percentComplete * 100)))\",\n181 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:188:22: error: no exact matches in call to instance method 'info'\n186 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"completed\", privacy: .public)\n187 | \n188 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n189 |           \"Completed backup operation: \\(operation)\",\n190 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:197:22: error: no exact matches in call to instance method 'info'\n195 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n196 | \n197 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n198 |           \"Cancelled backup operation: \\(operation)\",\n199 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:218:22: error: no exact matches in call to instance method 'error'\n216 |         }\n217 | \n218 |         await logger.error(\n    |                      `- error: no exact matches in call to instance method 'error'\n219 |           \"Failed backup operation: \\(operation)\",\n220 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 50 | \n 51 |   /// Log a critical message\n    :\n 85 |   }\n 86 | \n 87 |   public func error(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 88 |     await log(.error, message, context: context)\n 89 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupCommandFactory.swift:178:9: warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n176 |   ) throws -\u003e ResticCommand {\n177 |     // Determine base command from maintenance type\n178 |     var baseCommand=switch type {\n    |         `- warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n179 |       case .check:\n180 |         \"check\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:712:45: error: cannot find type 'VerificationResult' in scope\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n713 |     // Create a log context\n714 |     let logContext=BackupLogContext()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:710:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n708 |     snapshotID: String?,\n709 |     verifyData: Bool=true,\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n    |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:65:45: error: cannot find type 'CancellationToken' in scope\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n    |                                             `- error: cannot find type 'CancellationToken' in scope\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:67:24: error: cannot find type 'CancellationToken' in scope\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 68 |   ) async throws -\u003e R {\n 69 |     // Create a log context for this operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:60:65: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                 `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:59:26: error: cannot find type 'CancellationToken' in scope\n 57 |     parameters: BackupCreateParameters,\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:210:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n208 |         value: result,\n209 |         progressStream: progressReporter.stream,\n210 |         metadata: metadata\n    |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n211 |       )\n212 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:226:26: error: generic parameter 'some Sendable' could not be inferred\n224 | \n225 |       // Log success\n226 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n227 |         context: enhancedContext,\n228 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:129:66: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:128:26: error: cannot find type 'CancellationToken' in scope\n126 |     parameters: BackupRestoreParameters,\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:364:26: error: generic parameter 'some Sendable' could not be inferred\n362 | \n363 |       // Log success\n364 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n365 |         context: enhancedContext,\n366 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:440:20: error: extra argument 'listOptions' in call\n438 |       before: before,\n439 |       after: after,\n440 |       listOptions: listOptions\n    |                    `- error: extra argument 'listOptions' in call\n441 |     )\n442 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:445:49: error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n443 |     do {\n444 |       // Execute the operation\n445 |       let snapshots=try await operationsService.listSnapshots(parameters: parameters)\n    |                                                 `- error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n446 | \n447 |       // Record the end time\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:460:26: error: generic parameter 'some Sendable' could not be inferred\n458 | \n459 |       // Log success\n460 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n461 |         context: enhancedContext,\n462 |         result: snapshots\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:513:40: error: value of type 'DeleteOptions' has no member 'prune'\n511 |     let parameters=BackupDeleteParameters(\n512 |       snapshotID: snapshotID,\n513 |       pruneAfterDelete: deleteOptions?.prune ?? false\n    |                                        `- error: value of type 'DeleteOptions' has no member 'prune'\n514 |     )\n515 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:250:21: error: cannot find type 'DeleteResult' in scope\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n250 |   ) async throws -\u003e DeleteResult {\n    |                     `- error: cannot find type 'DeleteResult' in scope\n251 |     // Create the delete command\n252 |     var command=ResticCommandImpl(arguments: [\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:249:26: error: cannot find type 'CancellationToken' in scope\n247 |   public func deleteBackup(\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n250 |   ) async throws -\u003e DeleteResult {\n251 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:567:26: error: generic parameter 'some Sendable' could not be inferred\n565 | \n566 |       // Log success\n567 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n568 |         context: enhancedContext,\n569 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:707:70: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                      `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:706:26: error: cannot find type 'CancellationToken' in scope\n704 |     parameters: BackupMaintenanceParameters,\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:660:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n658 |         value: result,\n659 |         progressStream: progressReporter.stream,\n660 |         metadata: metadata\n    |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n661 |       )\n662 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:670:26: error: generic parameter 'some Sendable' could not be inferred\n668 | \n669 |       // Log success\n670 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n671 |         context: enhancedContext,\n672 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:734:19: error: type 'BackupOperation' has no member 'verifyBackup'\n732 |     let token=BackupOperationToken(\n733 |       id: UUID(),\n734 |       operation: .verifyBackup,\n    |                   `- error: type 'BackupOperation' has no member 'verifyBackup'\n735 |       cancellable: true\n736 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:747:30: error: type 'BackupVerifyParameters' has no member 'RepairMode'\n745 |     // Create DTO parameters for the operation using adapter pattern\n746 |     let localRepairMode=repairMode.map {\n747 |       BackupVerifyParameters.RepairMode(rawValue: $0.rawValue) ?? .reportOnly\n    |                              `- error: type 'BackupVerifyParameters' has no member 'RepairMode'\n748 |     }\n749 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:750:50: error: type 'VerifyOptions' has no member 'from'\n748 |     }\n749 | \n750 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n    |                                                  `- error: type 'VerifyOptions' has no member 'from'\n751 | \n752 |     let parameters=BackupVerifyParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:752:42: error: extra arguments at positions #2, #3, #4 in call\n750 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n751 | \n752 |     let parameters=BackupVerifyParameters(\n    |                                          `- error: extra arguments at positions #2, #3, #4 in call\n753 |       snapshotID: snapshotID,\n754 |       verifyData: verifyData,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:753:29: error: missing argument for parameter 'verifyOptions' in call\n751 | \n752 |     let parameters=BackupVerifyParameters(\n753 |       snapshotID: snapshotID,\n    |                             `- error: missing argument for parameter 'verifyOptions' in call\n754 |       verifyData: verifyData,\n755 |       repairMode: localRepairMode,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:761:61: error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n759 |     do {\n760 |       // Execute the operation\n761 |       let verificationResultDTO=try await operationExecutor.executeVerifyOperation(\n    |                                                             `- error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n762 |         parameters: parameters,\n763 |         progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:774:19: error: extra argument 'duration' in call\n772 |       await backupLogger.logOperationSuccess(\n773 |         context: enhancedContext,\n774 |         duration: duration\n    |                   `- error: extra argument 'duration' in call\n775 |       )\n776 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:772:26: error: generic parameter 'some Sendable' could not be inferred\n770 | \n771 |       // Log operation success\n772 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n773 |         context: enhancedContext,\n774 |         duration: duration\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:792:29: error: value of type 'any Error' has no member 'asBackupOperationError'\n790 |     } catch {\n791 |       // Map error\n792 |       let backupError=error.asBackupOperationError\n    |                             `- error: value of type 'any Error' has no member 'asBackupOperationError'\n793 | \n794 |       // Log error\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:831:37: error: extra argument 'error' in call\n829 |       await backupLogger.logOperationFailure(\n830 |         context: logContext,\n831 |         error: BackupOperationError.operationNotFound(\"Operation with ID \\(operationID) not found\")\n    |                                     `- error: extra argument 'error' in call\n832 |       )\n833 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:831:37: error: type 'BackupOperationError' has no member 'operationNotFound'\n829 |       await backupLogger.logOperationFailure(\n830 |         context: logContext,\n831 |         error: BackupOperationError.operationNotFound(\"Operation with ID \\(operationID) not found\")\n    |                                     `- error: type 'BackupOperationError' has no member 'operationNotFound'\n832 |       )\n833 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:842:12: error: extra argument 'error' in call\n840 |         context: logContext,\n841 |         error: BackupOperationError\n842 |           .operationNotCancellable(\"Operation \\(token.operation) cannot be cancelled\")\n    |            `- error: extra argument 'error' in call\n843 |       )\n844 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:842:12: error: type 'BackupOperationError' has no member 'operationNotCancellable'\n840 |         context: logContext,\n841 |         error: BackupOperationError\n842 |           .operationNotCancellable(\"Operation \\(token.operation) cannot be cancelled\")\n    |            `- error: type 'BackupOperationError' has no member 'operationNotCancellable'\n843 |       )\n844 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:852:26: error: generic parameter 'some Sendable' could not be inferred\n850 | \n851 |       // Log success\n852 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n853 |         context: logContext,\n854 |         message: \"Operation cancelled successfully\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:862:16: error: extra argument 'error' in call\n860 |       await backupLogger.logOperationFailure(\n861 |         context: logContext,\n862 |         error: error\n    |                `- error: extra argument 'error' in call\n863 |       )\n864 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:877:11: error: cannot assign to property: 'cancelled' setter is inaccessible\n875 |   private func cancelOperationImpl(token: BackupOperationToken) async throws {\n876 |     // Signal cancellation to the operation\n877 |     token.cancelled=true\n    |           `- error: cannot assign to property: 'cancelled' setter is inaccessible\n878 | \n879 |     // Remove from active operations\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:888:24: error: value of type 'BackupLogger' has no member 'logInfo'\n886 |       .withPublic(key: \"operationType\", value: String(describing: token.operation))\n887 | \n888 |     await backupLogger.logInfo(\n    |                        `- error: value of type 'BackupLogger' has no member 'logInfo'\n889 |       context: logContext,\n890 |       message: \"Operation cancellation complete\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:907:45: error: cannot find type 'RepositoryError' in scope\n905 |     } else if error is CancellationError {\n906 |       .operationCancelled(\"Operation was cancelled\")\n907 |     } else if let repositoryError=error as? RepositoryError {\n    |                                             `- error: cannot find type 'RepositoryError' in scope\n908 |       .repositoryError(repositoryError)\n909 |     } else if let timeout=error as? TimeoutError {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:930:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n928 | \n929 |     // Map known error types\n930 |     if let nsError=error as? NSError {\n    |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n931 |       switch nsError.domain {\n932 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:935:19: error: type 'BackupOperationError' has no member 'fileSystemError'\n933 |           return .networkError(\"Network error: \\(nsError.localizedDescription)\")\n934 |         case NSCocoaErrorDomain:\n935 |           return .fileSystemError(\"File system error: \\(nsError.localizedDescription)\")\n    |                   `- error: type 'BackupOperationError' has no member 'fileSystemError'\n936 |         default:\n937 |           break\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:942:13: error: type 'BackupOperationError' has no member 'unknownError'\n940 | \n941 |     // Default to unknown error with the original description\n942 |     return .unknownError(\"Operation failed: \\(error.localizedDescription)\")\n    |             `- error: type 'BackupOperationError' has no member 'unknownError'\n943 |   }\n944 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:954:13: warning: result of call to 'cancelOperation(id:)' is unused\n952 | \n953 |     for (id, _) in activeOperationsCancellationTokens {\n954 |       await cancelOperation(id: id)\n    |             `- warning: result of call to 'cancelOperation(id:)' is unused\n955 |     }\n956 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:974:49: error: value of type 'String' has no member 'uuidString'\n972 |     let logContext=BackupLogContext()\n973 |       .withOperation(\"cancelOperation\")\n974 |       .withPublic(key: \"operationID\", value: id.uuidString)\n    |                                                 `- error: value of type 'String' has no member 'uuidString'\n975 | \n976 |     // Log cancellation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:980:29: error: value of type 'BackupOperationExecutor' has no member 'cancelOperation'\n978 | \n979 |     // Cancel the operation\n980 |     await operationExecutor.cancelOperation(id: token.id)\n    |                             `- error: value of type 'BackupOperationExecutor' has no member 'cancelOperation'\n981 | \n982 |     // Remove the token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:193:26: error: cannot find type 'CancellationToken' in scope\n191 |   public func listBackups(\n192 |     parameters: BackupListParameters,\n193 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n194 |   ) async throws -\u003e [BackupSnapshot] {\n195 |     // Create the list command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:296:26: error: cannot find type 'CancellationToken' in scope\n294 |     pattern: String?=nil,\n295 |     progressReporter _: BackupProgressReporter?,\n296 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n297 |   ) async throws -\u003e [SnapshotFileEntry] {\n298 |     // Create the find command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:664:80: error: cannot find type 'DeleteResult' in scope\n662 |    * Parse delete result from JSON output.\n663 |    */\n664 |   private func parseDeleteResult(output: String, snapshotID: String) throws -\u003e DeleteResult {\n    |                                                                                `- error: cannot find type 'DeleteResult' in scope\n665 |     guard let data=output.data(using: .utf8) else {\n666 |       throw BackupOperationError.parsingFailure(\"Could not convert output to data\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:62:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n 64 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:63:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 64 |       progressContinuation=continuation\n 65 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:63:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n 64 |       progressContinuation=continuation\n 65 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:69:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 67 |     // Create a progress handler that forwards to both the reporter and the stream\n 68 |     let progressHandler={ [progressReporter, progressContinuation] (\n 69 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 70 |     ) async in\n 71 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:96:25: error: no exact matches in call to instance method 'append'\n 94 |     if let excludePaths = parameters.excludePaths, !excludePaths.isEmpty {\n 95 |       command.arguments.append(\"--exclude\")\n 96 |       command.arguments.append(contentsOf: excludePaths)\n    |                         `- error: no exact matches in call to instance method 'append'\n 97 |     }\n 98 | \n\nSwift.Array.append:2:33: note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Element' == 'S.Element')\n1 | generic struct Array {\n2 | @inlinable public mutating func append\u003cS\u003e(contentsOf newElements: __owned S) where Element == S.Element, S : Sequence}\n  |                                 `- note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Element' == 'S.Element')\n3 | \n\nSwift.RangeReplaceableCollection.append:2:33: note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n1 | protocol RangeReplaceableCollection {\n2 | @inlinable public mutating func append\u003cS\u003e(contentsOf newElements: __owned S) where S : Sequence, Self.Element == S.Element}\n  |                                 `- note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:109:71: error: missing argument for parameter 'sources' in call\n107 | \n108 |     // Parse the result\n109 |     let backupResult=try resultParser.parseBackupResult(output: output)\n    |                                                                       `- error: missing argument for parameter 'sources' in call\n110 | \n111 |     // Return the result and the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:16:15: note: 'parseBackupResult(output:sources:)' declared here\n 14 |   /// - Returns: A backup result with details about the operation\n 15 |   /// - Throws: BackupError if parsing fails\n 16 |   public func parseBackupResult(output: String, sources: [URL]) throws -\u003e BackupResult {\n    |               `- note: 'parseBackupResult(output:sources:)' declared here\n 17 |     guard !output.isEmpty else {\n 18 |       throw BackupError.parsingError(details: \"Empty output from backup command\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:131:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n133 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:132:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n133 |       progressContinuation=continuation\n134 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:132:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n133 |       progressContinuation=continuation\n134 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:138:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n136 |     // Create a progress handler that forwards to both the reporter and the stream\n137 |     let progressHandler={ [progressReporter, progressContinuation] (\n138 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n139 |     ) async in\n140 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:157:18: error: cannot convert value of type 'URL' to expected element type 'Array\u003cString\u003e.ArrayLiteralElement' (aka 'String')\n155 |       parameters.snapshotID,\n156 |       \"--target\",\n157 |       parameters.targetPath\n    |                  `- error: cannot convert value of type 'URL' to expected element type 'Array\u003cString\u003e.ArrayLiteralElement' (aka 'String')\n158 |     ])\n159 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:176:73: error: missing argument for parameter 'targetPath' in call\n174 | \n175 |     // Parse the result\n176 |     let restoreResult=try resultParser.parseRestoreResult(output: output)\n    |                                                                         `- error: missing argument for parameter 'targetPath' in call\n177 | \n178 |     // Return the result and the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:63:15: note: 'parseRestoreResult(output:targetPath:)' declared here\n 61 |   /// - Returns: A RestoreResult object\n 62 |   /// - Throws: BackupError if parsing fails\n 63 |   public func parseRestoreResult(output: String, targetPath: URL) throws -\u003e RestoreResult {\n    |               `- note: 'parseRestoreResult(output:targetPath:)' declared here\n 64 |     // Simple parsing - look for file restoration lines\n 65 |     let lines=output.components(separatedBy: .newlines)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:353:55: error: type 'BackupOperation' has no member 'verifyBackup'\n351 |       // Forward to the progress reporter if provided\n352 |       if let reporter=progressReporter {\n353 |         await reporter.reportProgress(progress, for: .verifyBackup)\n    |                                                       `- error: type 'BackupOperation' has no member 'verifyBackup'\n354 |       }\n355 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:376:11: error: cannot find 'snapshotService' in scope\n374 |       let snapshot=try await (\n375 |         snapshotID != nil ?\n376 |           snapshotService.getSnapshot(id: snapshotID!) :\n    |           `- error: cannot find 'snapshotService' in scope\n377 |           snapshotService.getLatestSnapshot()\n378 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:377:11: error: cannot find 'snapshotService' in scope\n375 |         snapshotID != nil ?\n376 |           snapshotService.getSnapshot(id: snapshotID!) :\n377 |           snapshotService.getLatestSnapshot()\n    |           `- error: cannot find 'snapshotService' in scope\n378 |       )\n379 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:382:36: error: type 'BackupOperationError' has no member 'snapshotNotFound'\n380 |       // Early exit if no snapshot found\n381 |       guard let snapshot else {\n382 |         throw BackupOperationError.snapshotNotFound(\n    |                                    `- error: type 'BackupOperationError' has no member 'snapshotNotFound'\n383 |           \"No snapshot found to verify\" + (snapshotID != nil ? \" with ID \\(snapshotID!)\" : \"\")\n384 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:388:7: error: cannot find 'logger' in scope\n386 | \n387 |       // Log verification start\n388 |       logger.info(\n    |       `- error: cannot find 'logger' in scope\n389 |         context: backupLogContext.withOperation(\"verifyBackup\")\n390 |           .withPublic(key: \"snapshotID\", value: snapshot.id)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:389:18: error: cannot find 'backupLogContext' in scope\n387 |       // Log verification start\n388 |       logger.info(\n389 |         context: backupLogContext.withOperation(\"verifyBackup\")\n    |                  `- error: cannot find 'backupLogContext' in scope\n390 |           .withPublic(key: \"snapshotID\", value: snapshot.id)\n391 |           .withPublic(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:407:23: error: extra argument 'transferRate' in call\n405 |         totalBytes: 0,\n406 |         estimatedTimeRemaining: nil,\n407 |         transferRate: nil,\n    |                       `- error: extra argument 'transferRate' in call\n408 |         details: \"Analysing snapshot structure\"\n409 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:407:23: error: 'nil' requires a contextual type\n405 |         totalBytes: 0,\n406 |         estimatedTimeRemaining: nil,\n407 |         transferRate: nil,\n    |                       `- error: 'nil' requires a contextual type\n408 |         details: \"Analysing snapshot structure\"\n409 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:412:40: error: cannot find 'snapshotService' in scope\n410 | \n411 |       // Use snapshot service to perform actual verification\n412 |       let verificationResult=try await snapshotService.verifySnapshot(\n    |                                        `- error: cannot find 'snapshotService' in scope\n413 |         id: snapshot.id,\n414 |         fullVerification: verifyOptions?.fullVerification ?? false,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:434:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n432 |         itemsProcessed: Int(Double(totalItems) * 0.25),\n433 |         totalItems: totalItems,\n434 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.25),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n435 |         totalBytes: UInt64(snapshot.stats.totalSize)\n436 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:450:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n448 |         itemsProcessed: Int(Double(totalItems) * 0.5),\n449 |         totalItems: totalItems,\n450 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.5),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n451 |         totalBytes: UInt64(snapshot.stats.totalSize)\n452 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:466:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n464 |         itemsProcessed: Int(Double(totalItems) * 0.75),\n465 |         totalItems: totalItems,\n466 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.75),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n467 |         totalBytes: UInt64(snapshot.stats.totalSize)\n468 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:709:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n711 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n711 |       progressContinuation=continuation\n712 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n711 |       progressContinuation=continuation\n712 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:716:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n714 |     // Create a progress handler that forwards to both the reporter and the stream\n715 |     let progressHandler={ [progressReporter, progressContinuation] (\n716 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n717 |     ) async in\n718 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:758:7: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n756 |     // Report progress\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n    |       `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n759 |         phase: .processing,\n760 |         percentComplete: 0.1,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:758:21: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n756 |     // Report progress\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n    |                     `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n759 |         phase: .processing,\n760 |         percentComplete: 0.1,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:759:9: error: missing argument for parameter 'from' in call\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n759 |         phase: .processing,\n    |         `- error: missing argument for parameter 'from' in call\n760 |         percentComplete: 0.1,\n761 |         currentItem: \"Starting maintenance\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:759:17: error: cannot infer contextual base in reference to member 'processing'\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n759 |         phase: .processing,\n    |                 `- error: cannot infer contextual base in reference to member 'processing'\n760 |         percentComplete: 0.1,\n761 |         currentItem: \"Starting maintenance\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:766:33: error: 'nil' requires a contextual type\n764 |         processedBytes: 0,\n765 |         totalBytes: 0,\n766 |         estimatedTimeRemaining: nil,\n    |                                 `- error: 'nil' requires a contextual type\n767 |         bytesPerSecond: nil,\n768 |         error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:767:25: error: 'nil' requires a contextual type\n765 |         totalBytes: 0,\n766 |         estimatedTimeRemaining: nil,\n767 |         bytesPerSecond: nil,\n    |                         `- error: 'nil' requires a contextual type\n768 |         error: nil\n769 |       ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:768:16: error: 'nil' requires a contextual type\n766 |         estimatedTimeRemaining: nil,\n767 |         bytesPerSecond: nil,\n768 |         error: nil\n    |                `- error: 'nil' requires a contextual type\n769 |       ),\n770 |       for: .maintenance\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:773:46: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n771 |     )\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n    |                                              `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n774 |       phase: .processing,\n775 |       percentComplete: 0.1,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:774:7: error: missing argument for parameter 'from' in call\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n774 |       phase: .processing,\n    |       `- error: missing argument for parameter 'from' in call\n775 |       percentComplete: 0.1,\n776 |       currentItem: \"Starting maintenance\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:774:15: error: cannot infer contextual base in reference to member 'processing'\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n774 |       phase: .processing,\n    |               `- error: cannot infer contextual base in reference to member 'processing'\n775 |       percentComplete: 0.1,\n776 |       currentItem: \"Starting maintenance\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:781:31: error: 'nil' requires a contextual type\n779 |       processedBytes: 0,\n780 |       totalBytes: 0,\n781 |       estimatedTimeRemaining: nil,\n    |                               `- error: 'nil' requires a contextual type\n782 |       bytesPerSecond: nil,\n783 |       error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:782:23: error: 'nil' requires a contextual type\n780 |       totalBytes: 0,\n781 |       estimatedTimeRemaining: nil,\n782 |       bytesPerSecond: nil,\n    |                       `- error: 'nil' requires a contextual type\n783 |       error: nil\n784 |     ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:783:14: error: 'nil' requires a contextual type\n781 |       estimatedTimeRemaining: nil,\n782 |       bytesPerSecond: nil,\n783 |       error: nil\n    |              `- error: 'nil' requires a contextual type\n784 |     ))\n785 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:791:7: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n789 |     // Report completion\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n    |       `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n792 |         phase: .completed,\n793 |         percentComplete: 1.0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:791:21: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n789 |     // Report completion\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n    |                     `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n792 |         phase: .completed,\n793 |         percentComplete: 1.0,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:792:9: error: missing argument for parameter 'from' in call\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n792 |         phase: .completed,\n    |         `- error: missing argument for parameter 'from' in call\n793 |         percentComplete: 1.0,\n794 |         currentItem: \"Maintenance completed\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:792:17: error: cannot infer contextual base in reference to member 'completed'\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n792 |         phase: .completed,\n    |                 `- error: cannot infer contextual base in reference to member 'completed'\n793 |         percentComplete: 1.0,\n794 |         currentItem: \"Maintenance completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:799:33: error: 'nil' requires a contextual type\n797 |         processedBytes: 0,\n798 |         totalBytes: 0,\n799 |         estimatedTimeRemaining: nil,\n    |                                 `- error: 'nil' requires a contextual type\n800 |         bytesPerSecond: nil,\n801 |         error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:800:25: error: 'nil' requires a contextual type\n798 |         totalBytes: 0,\n799 |         estimatedTimeRemaining: nil,\n800 |         bytesPerSecond: nil,\n    |                         `- error: 'nil' requires a contextual type\n801 |         error: nil\n802 |       ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:801:16: error: 'nil' requires a contextual type\n799 |         estimatedTimeRemaining: nil,\n800 |         bytesPerSecond: nil,\n801 |         error: nil\n    |                `- error: 'nil' requires a contextual type\n802 |       ),\n803 |       for: .maintenance\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:806:46: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n804 |     )\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n    |                                              `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n807 |       phase: .completed,\n808 |       percentComplete: 1.0,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:807:7: error: missing argument for parameter 'from' in call\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n807 |       phase: .completed,\n    |       `- error: missing argument for parameter 'from' in call\n808 |       percentComplete: 1.0,\n809 |       currentItem: \"Maintenance completed\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:807:15: error: cannot infer contextual base in reference to member 'completed'\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n807 |       phase: .completed,\n    |               `- error: cannot infer contextual base in reference to member 'completed'\n808 |       percentComplete: 1.0,\n809 |       currentItem: \"Maintenance completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:814:31: error: 'nil' requires a contextual type\n812 |       processedBytes: 0,\n813 |       totalBytes: 0,\n814 |       estimatedTimeRemaining: nil,\n    |                               `- error: 'nil' requires a contextual type\n815 |       bytesPerSecond: nil,\n816 |       error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:815:23: error: 'nil' requires a contextual type\n813 |       totalBytes: 0,\n814 |       estimatedTimeRemaining: nil,\n815 |       bytesPerSecond: nil,\n    |                       `- error: 'nil' requires a contextual type\n816 |       error: nil\n817 |     ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:816:14: error: 'nil' requires a contextual type\n814 |       estimatedTimeRemaining: nil,\n815 |       bytesPerSecond: nil,\n816 |       error: nil\n    |              `- error: 'nil' requires a contextual type\n817 |     ))\n818 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:71:14: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 69 |     if\n 70 |       error is CancellationError ||\n 71 |       (error as? NSError)?.domain == NSURLErrorDomain \u0026\u0026\n    |              `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 72 |       (error as? NSError)?.code == NSURLErrorCancelled\n 73 |     {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:72:14: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 70 |       error is CancellationError ||\n 71 |       (error as? NSError)?.domain == NSURLErrorDomain \u0026\u0026\n 72 |       (error as? NSError)?.code == NSURLErrorCancelled\n    |              `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 73 |     {\n 74 |       return BackupOperationError.operationCancelled(\"Operation was cancelled by the user\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:85:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 83 | \n 84 |     // Map NSError\n 85 |     if let nsError=error as? NSError {\n    |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 86 |       switch nsError.domain {\n 87 |         case NSPOSIXErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:83:40: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n 81 |           // Update progress\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n    |                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n 84 |               phase: .processing,\n 85 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:84:15: error: missing argument for parameter 'from' in call\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n 84 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n 85 |               percentComplete: 0.3,\n 86 |               currentItem: \"Updating snapshot tags\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:84:23: error: cannot infer contextual base in reference to member 'processing'\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n 84 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n 85 |               percentComplete: 0.3,\n 86 |               currentItem: \"Updating snapshot tags\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:91:39: error: 'nil' requires a contextual type\n 89 |               processedBytes: 0,\n 90 |               totalBytes: 0,\n 91 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n 92 |               bytesPerSecond: nil,\n 93 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:92:31: error: 'nil' requires a contextual type\n 90 |               totalBytes: 0,\n 91 |               estimatedTimeRemaining: nil,\n 92 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n 93 |               error: nil\n 94 |             )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:93:22: error: 'nil' requires a contextual type\n 91 |               estimatedTimeRemaining: nil,\n 92 |               bytesPerSecond: nil,\n 93 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n 94 |             )\n 95 |             await reporter.reportProgress(progress, for: .updateTags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:152:40: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n150 |           // Update progress\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n    |                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n153 |               phase: .processing,\n154 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:153:15: error: missing argument for parameter 'from' in call\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n153 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n154 |               percentComplete: 0.3,\n155 |               currentItem: \"Updating snapshot description\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:153:23: error: cannot infer contextual base in reference to member 'processing'\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n153 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n154 |               percentComplete: 0.3,\n155 |               currentItem: \"Updating snapshot description\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:160:39: error: 'nil' requires a contextual type\n158 |               processedBytes: 0,\n159 |               totalBytes: 0,\n160 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n161 |               bytesPerSecond: nil,\n162 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:161:31: error: 'nil' requires a contextual type\n159 |               totalBytes: 0,\n160 |               estimatedTimeRemaining: nil,\n161 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n162 |               error: nil\n163 |             )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:162:22: error: 'nil' requires a contextual type\n160 |               estimatedTimeRemaining: nil,\n161 |               bytesPerSecond: nil,\n162 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n163 |             )\n164 |             await reporter.reportProgress(progress, for: .updateTags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:80:31: error: extra arguments at positions #3, #8 in call\n 78 |         if let progressReporter=reporter {\n 79 |           await progressReporter.reportProgress(\n 80 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n 81 |               phase: .processing,\n 82 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:134:31: error: extra arguments at positions #3, #8 in call\n132 |         if let progressReporter=reporter {\n133 |           await progressReporter.reportProgress(\n134 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n135 |               phase: .processing,\n136 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:218:31: error: extra arguments at positions #3, #8 in call\n216 |         if let progressReporter=reporter {\n217 |           await progressReporter.reportProgress(\n218 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n219 |               phase: .processing,\n220 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:267:9: error: type of expression is ambiguous without a type annotation\n265 |     cancellationToken: BackupCancellationToken?\n266 |   ) async throws -\u003e BackupSnapshotComparisonResult {\n267 |     try await operationExecutor.execute(\n    |         `- error: type of expression is ambiguous without a type annotation\n268 |       parameters: parameters,\n269 |       progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:376:31: error: extra arguments at positions #3, #8 in call\n374 |         if let reporter {\n375 |           await reporter.reportProgress(\n376 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n377 |               phase: .processing,\n378 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:494:31: error: extra arguments at positions #3, #8 in call\n492 |         if let progressReporter=reporter {\n493 |           await progressReporter.reportProgress(\n494 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n495 |               phase: .processing,\n496 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:73:31: error: extra arguments at positions #3, #8 in call\n 71 |         if let progressReporter=reporter {\n 72 |           await progressReporter.reportProgress(\n 73 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n 74 |               phase: .processing,\n 75 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:132:31: error: extra arguments at positions #3, #8 in call\n130 |         if let reporter=progressReporter {\n131 |           await reporter.reportProgress(\n132 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n133 |               phase: .processing,\n134 |               percentComplete: progress,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:157:26: error: cannot call value of non-function type 'Bool'\n155 |         // Check for cancellation in a loop\n156 |         while !Task.isCancelled {\n157 |           if await token.isCancelled() {\n    |                          `- error: cannot call value of non-function type 'Bool'\n158 |             executionTask.cancel()\n159 |             progressTask.cancel()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:279:31: error: extra arguments at positions #3, #8 in call\n277 |         if let reporter {\n278 |           await reporter.reportProgress(\n279 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n280 |               phase: .processing,\n281 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupErrorMapper.swift:43:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n41 | \n42 |     // Handle NSError types\n43 |     if let nsError=error as? NSError {\n   |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n44 |       switch nsError.domain {\n45 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:76:22: error: extra arguments at positions #2, #3 in call\n 74 | \n 75 |     // Log the start of the operation\n 76 |     await logger.info(\n    |                      `- error: extra arguments at positions #2, #3 in call\n 77 |       \"Starting backup operation: \\(parameters.operationType)\",\n 78 |       metadata: nil,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:77:63: error: missing argument for parameter 'context' in call\n 75 |     // Log the start of the operation\n 76 |     await logger.info(\n 77 |       \"Starting backup operation: \\(parameters.operationType)\",\n    |                                                               `- error: missing argument for parameter 'context' in call\n 78 |       metadata: nil,\n 79 |       source: logContext.getSource()\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:78:17: error: 'nil' requires a contextual type\n 76 |     await logger.info(\n 77 |       \"Starting backup operation: \\(parameters.operationType)\",\n 78 |       metadata: nil,\n    |                 `- error: 'nil' requires a contextual type\n 79 |       source: logContext.getSource()\n 80 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:108:24: error: extra arguments at positions #2, #3 in call\n106 | \n107 |       // Log the completion of the operation\n108 |       await logger.info(\n    |                        `- error: extra arguments at positions #2, #3 in call\n109 |         \"Completed backup operation: \\(parameters.operationType)\",\n110 |         metadata: nil,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:109:66: error: missing argument for parameter 'context' in call\n107 |       // Log the completion of the operation\n108 |       await logger.info(\n109 |         \"Completed backup operation: \\(parameters.operationType)\",\n    |                                                                  `- error: missing argument for parameter 'context' in call\n110 |         metadata: nil,\n111 |         source: logContext.getSource()\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:110:19: error: 'nil' requires a contextual type\n108 |       await logger.info(\n109 |         \"Completed backup operation: \\(parameters.operationType)\",\n110 |         metadata: nil,\n    |                   `- error: 'nil' requires a contextual type\n111 |         source: logContext.getSource()\n112 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:124:24: error: extra arguments at positions #2, #3 in call\n122 | \n123 |       // Log the cancellation of the operation\n124 |       await logger.info(\n    |                        `- error: extra arguments at positions #2, #3 in call\n125 |         \"Cancelled backup operation: \\(parameters.operationType)\",\n126 |         metadata: nil,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:125:66: error: missing argument for parameter 'context' in call\n123 |       // Log the cancellation of the operation\n124 |       await logger.info(\n125 |         \"Cancelled backup operation: \\(parameters.operationType)\",\n    |                                                                  `- error: missing argument for parameter 'context' in call\n126 |         metadata: nil,\n127 |         source: logContext.getSource()\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:126:19: error: 'nil' requires a contextual type\n124 |       await logger.info(\n125 |         \"Cancelled backup operation: \\(parameters.operationType)\",\n126 |         metadata: nil,\n    |                   `- error: 'nil' requires a contextual type\n127 |         source: logContext.getSource()\n128 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:145:25: error: extra arguments at positions #2, #3 in call\n143 | \n144 |       // Log the failure of the operation\n145 |       await logger.error(\n    |                         `- error: extra arguments at positions #2, #3 in call\n146 |         \"Failed backup operation: \\(parameters.operationType) - \\(error.localizedDescription)\",\n147 |         metadata: nil,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: 'error(_:context:)' declared here\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: 'error(_:context:)' declared here\n 50 | \n 51 |   /// Log a critical message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:146:95: error: missing argument for parameter 'context' in call\n144 |       // Log the failure of the operation\n145 |       await logger.error(\n146 |         \"Failed backup operation: \\(parameters.operationType) - \\(error.localizedDescription)\",\n    |                                                                                               `- error: missing argument for parameter 'context' in call\n147 |         metadata: nil,\n148 |         source: logContext.getSource()\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: 'error(_:context:)' declared here\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: 'error(_:context:)' declared here\n 50 | \n 51 |   /// Log a critical message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:147:19: error: 'nil' requires a contextual type\n145 |       await logger.error(\n146 |         \"Failed backup operation: \\(parameters.operationType) - \\(error.localizedDescription)\",\n147 |         metadata: nil,\n    |                   `- error: 'nil' requires a contextual type\n148 |         source: logContext.getSource()\n149 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:18:15: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cAny, Error\u003e]=[:]\n    |               `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 19 | \n 20 |   /// Storage for active cancellation tokens\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               |                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               `- warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationHandlerProtocol.swift:52:8: note: a function type must be marked '@Sendable' to conform to 'Sendable'\n50 |    * - Throws: Error if the operation fails or is cancelled\n51 |    */\n52 |   func withCancellationSupport\u003cT\u003e(\n   |        `- note: a function type must be marked '@Sendable' to conform to 'Sendable'\n53 |     _ operation: @escaping () async throws -\u003e T,\n54 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:37:36: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 35 |   public func registerOperation(id: String, operation: Task\u003csome Any, Error\u003e) {\n 36 |     // Store the task as Task\u003cAny, Error\u003e for type erasure\n 37 |     activeOperations[id]=operation as? Task\u003cAny, Error\u003e\n    |                                    `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 38 |   }\n 39 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:77:17: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 75 |     // Try to cancel a task-based operation\n 76 |     if let operation=activeOperations[id] {\n 77 |       operation.cancel()\n    |                 `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 78 |       activeOperations[id]=nil\n 79 |       cancelled=true\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:128:12: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n126 |     // Cancel all task-based operations\n127 |     for (_, task) in activeOperations {\n128 |       task.cancel()\n    |            `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n129 |     }\n130 |     activeOperations.removeAll()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:201:14: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n199 | \n200 |     // Transform the operation into a Task\n201 |     let task=Task\u003cT, Error\u003e {\n    |              `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n202 |       do {\n203 |         let result=try await operation()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:201:27: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n199 | \n200 |     // Transform the operation into a Task\n201 |     let task=Task\u003cT, Error\u003e {\n    |                           `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n202 |       do {\n203 |         let result=try await operation()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:213:5: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n211 | \n212 |     // Register the task for cancellation with proper generic type\n213 |     registerOperation(id: operationID, operation: task)\n    |     `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n214 | \n215 |     // If we have a cancellation token, set up a callback\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:232:23: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n230 |           guard let self else { return }\n231 | \n232 |           while !task.isCancelled {\n    |                       `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n233 |             if await isOperationActive(id: operationID) {\n234 |               if await token.isCancelled {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:248:29: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n246 | \n247 |     do {\n248 |       return try await task.value\n    |                             `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n249 |     } catch is CancellationError {\n250 |       throw CancellationError()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:203:30: warning: non-sendable result type 'T' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n201 |     let task=Task\u003cT, Error\u003e {\n202 |       do {\n203 |         let result=try await operation()\n    |                              `- warning: non-sendable result type 'T' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n204 |         operationCompleted(id: operationID)\n205 |         return result\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:248:24: warning: non-sendable type 'Task\u003cT, any Error\u003e' cannot exit actor-isolated context in call to nonisolated property 'value'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n246 | \n247 |     do {\n248 |       return try await task.value\n    |                        `- warning: non-sendable type 'Task\u003cT, any Error\u003e' cannot exit actor-isolated context in call to nonisolated property 'value'; this is an error in the Swift 6 language mode\n249 |     } catch is CancellationError {\n250 |       throw CancellationError()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:248:29: warning: non-sendable type 'T' of nonisolated property 'value' cannot be sent to actor-isolated context; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n246 | \n247 |     do {\n248 |       return try await task.value\n    |                             `- warning: non-sendable type 'T' of nonisolated property 'value' cannot be sent to actor-isolated context; this is an error in the Swift 6 language mode\n249 |     } catch is CancellationError {\n250 |       throw CancellationError()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorMapper.swift:35:21: error: type 'BackupError' has no member 'configurationError'\n 33 | \n 34 |       case let .executableNotFound(path):\n 35 |         BackupError.configurationError(\n    |                     `- error: type 'BackupError' has no member 'configurationError'\n 36 |           details: \"Restic executable not found at path: \\(path)\"\n 37 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:101:18: error: no exact matches in call to instance method 'info'\n 99 | \n100 |     // Log operation start\n101 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n102 |       \"Starting snapshot operation: \\(operationType.rawValue)\",\n103 |       metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:110:27: error: extra arguments at positions #3, #8 in call\n108 |     if let reporter=progressReporter {\n109 |       await reporter.reportProgress(\n110 |         BackupProgressInfo(\n    |                           `- error: extra arguments at positions #3, #8 in call\n111 |           phase: .initialising,\n112 |           percentComplete: 0.0,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:140:29: error: extra arguments at positions #3, #8 in call\n138 |       if let reporter=progressReporter {\n139 |         await reporter.reportProgress(\n140 |           BackupProgressInfo(\n    |                             `- error: extra arguments at positions #3, #8 in call\n141 |             phase: .completed,\n142 |             percentComplete: 1.0,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:160:20: error: no exact matches in call to instance method 'info'\n158 |                                                           privacy: .public)\n159 | \n160 |       await logger.info(\n    |                    `- error: no exact matches in call to instance method 'info'\n161 |         \"Completed snapshot operation: \\(operationType.rawValue)\",\n162 |         metadata: completionMetadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:184:29: error: extra arguments at positions #3, #8 in call\n182 |       if let reporter=progressReporter {\n183 |         await reporter.reportProgress(\n184 |           BackupProgressInfo(\n    |                             `- error: extra arguments at positions #3, #8 in call\n185 |             phase: .failed,\n186 |             percentComplete: 1.0,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:207:25: error: extra arguments at positions #2, #3 in call\n205 | \n206 |       // Log error with privacy-aware context\n207 |       await logger.error(\n    |                         `- error: extra arguments at positions #2, #3 in call\n208 |         \"Failed snapshot operation: \\(operationType.rawValue)\",\n209 |         metadata: errorContext.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: 'error(_:context:)' declared here\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: 'error(_:context:)' declared here\n 50 | \n 51 |   /// Log a critical message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:208:63: error: missing argument for parameter 'context' in call\n206 |       // Log error with privacy-aware context\n207 |       await logger.error(\n208 |         \"Failed snapshot operation: \\(operationType.rawValue)\",\n    |                                                               `- error: missing argument for parameter 'context' in call\n209 |         metadata: errorContext.toPrivacyMetadata(),\n210 |         source: source\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: 'error(_:context:)' declared here\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: 'error(_:context:)' declared here\n 50 | \n 51 |   /// Log a critical message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:130:48: warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to instance method 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n 75 |    * - Throws: BackupOperationError if the operation fails\n 76 |    */\n 77 |   public func execute\u003cP: SnapshotOperationParameters, R\u003e(\n    |                                                       `- note: consider making generic parameter 'R' conform to the 'Sendable' protocol\n 78 |     parameters: P,\n 79 |     progressReporter: BackupProgressReporter?,\n    :\n128 | \n129 |       // Execute the operation with cancellation support\n130 |       let result=try await cancellationHandler.withCancellationSupport({\n    |                                                `- warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to instance method 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n131 |         try await operation(parameters, progressReporter, cancellationToken)\n132 |       }, cancellationToken: cancellationToken)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:39:18: error: no exact matches in call to instance method 'info'\n 37 |     let defaultMessage=\"Starting snapshot operation: \\(logContext.operation)\"\n 38 | \n 39 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n 40 |       message ?? defaultMessage,\n 41 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:59:18: error: no exact matches in call to instance method 'info'\n 57 |     let defaultMessage=\"Completed snapshot operation: \\(logContext.operation)\"\n 58 | \n 59 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n 60 |       message ?? defaultMessage,\n 61 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:81:18: error: no exact matches in call to instance method 'error'\n 79 |     let defaultMessage=\"Error during snapshot operation: \\(logContext.operation)\"\n 80 | \n 81 |     await logger.error(\n    |                  `- error: no exact matches in call to instance method 'error'\n 82 |       message ?? defaultMessage,\n 83 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 50 | \n 51 |   /// Log a critical message\n    :\n 85 |   }\n 86 | \n 87 |   public func error(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 88 |     await log(.error, message, context: context)\n 89 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:110:18: error: no exact matches in call to instance method 'error'\n108 |     )\n109 | \n110 |     await logger.error(\n    |                  `- error: no exact matches in call to instance method 'error'\n111 |       message,\n112 |       metadata: metadataCollection.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 50 | \n 51 |   /// Log a critical message\n    :\n 85 |   }\n 86 | \n 87 |   public func error(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 88 |     await log(.error, message, context: context)\n 89 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:130:18: error: no exact matches in call to instance method 'info'\n128 |     let defaultMessage=\"Operation completed successfully\"\n129 | \n130 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n131 |       message ?? defaultMessage,\n132 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:170:18: error: no exact matches in call to instance method 'info'\n168 |     }\n169 | \n170 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n171 |       \"Starting snapshot operation: \\(operation)\",\n172 |       metadata: metadataCollection.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:219:18: error: no exact matches in call to instance method 'info'\n217 |     }\n218 | \n219 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n220 |       \"Snapshot operation completed: \\(operation)\",\n221 |       metadata: metadataCollection.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:269:18: error: no exact matches in call to instance method 'error'\n267 |     }\n268 | \n269 |     await logger.error(\n    |                  `- error: no exact matches in call to instance method 'error'\n270 |       \"Error during snapshot operation: \\(operation)\",\n271 |       metadata: metadataCollection.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 50 | \n 51 |   /// Log a critical message\n    :\n 85 |   }\n 86 | \n 87 |   public func error(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 88 |     await log(.error, message, context: context)\n 89 |   }\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:424:40: error: cannot find type 'SnapshotFileType' in scope\n422 | \n423 |   // Convert SnapshotFileType to BackupFileType\n424 |   private func convertFileType(_ type: SnapshotFileType?) -\u003e BackupFileType {\n    |                                        `- error: cannot find type 'SnapshotFileType' in scope\n425 |     guard let type else { return .file }\n426 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:406:75: warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n404 |   // Helper function to calculate total size of changes\n405 |   private func calculateTotalChangeSize(_ difference: BackupSnapshotDifference) -\u003e UInt64 {\n406 |     let addedSize=(difference.addedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n    |                                                                           `- warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n407 |     let modifiedSize=(difference.modifiedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n408 |     return addedSize + modifiedSize\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:407:81: warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n405 |   private func calculateTotalChangeSize(_ difference: BackupSnapshotDifference) -\u003e UInt64 {\n406 |     let addedSize=(difference.addedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n407 |     let modifiedSize=(difference.modifiedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n    |                                                                                 `- warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n408 |     return addedSize + modifiedSize\n409 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:417:28: error: value of type 'SnapshotFile' has no member 'modificationDate'\n415 |         path: file.path,\n416 |         size: file.size ?? 0,\n417 |         lastModified: file.modificationDate ?? Date(),\n    |                            `- error: value of type 'SnapshotFile' has no member 'modificationDate'\n418 |         type: convertFileType(file.type)\n419 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:418:36: error: value of type 'SnapshotFile' has no member 'type'\n416 |         size: file.size ?? 0,\n417 |         lastModified: file.modificationDate ?? Date(),\n418 |         type: convertFileType(file.type)\n    |                                    `- error: value of type 'SnapshotFile' has no member 'type'\n419 |       )\n420 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:417:45: error: extra argument 'lastModified' in call\n415 |         path: file.path,\n416 |         size: file.size ?? 0,\n417 |         lastModified: file.modificationDate ?? Date(),\n    |                                             `- error: extra argument 'lastModified' in call\n418 |         type: convertFileType(file.type)\n419 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:416:29: error: missing argument for parameter 'modifiedTime' in call\n414 |       BackupFile(\n415 |         path: file.path,\n416 |         size: file.size ?? 0,\n    |                             `- error: missing argument for parameter 'modifiedTime' in call\n417 |         lastModified: file.modificationDate ?? Date(),\n418 |         type: convertFileType(file.type)\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupFile.swift:44:10: note: 'init(path:size:modifiedTime:type:permissions:ownerName:groupName:)' declared here\n42 |    *   - groupName: Optional file group name\n43 |    */\n44 |   public init(\n   |          `- note: 'init(path:size:modifiedTime:type:permissions:ownerName:groupName:)' declared here\n45 |     path: String,\n46 |     size: UInt64,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:507:11: warning: initialization of immutable value 'unchangedFiles' was never used; consider replacing with assignment to '_' or removing it\n505 | \n506 |       // Process unchanged files\n507 |       let unchangedFiles=diffResult.unchanged?.map { file in\n    |           `- warning: initialization of immutable value 'unchangedFiles' was never used; consider replacing with assignment to '_' or removing it\n508 |         SnapshotFileEntry(\n509 |           path: file.path ?? \"\",\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:81:11: warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n 79 |     if let loggableError=error as? LoggableErrorProtocol {\n 80 |       // Handle loggable errors with enriched metadata\n 81 |       let errorMetadata=loggableError.createMetadataCollection()\n    |           `- warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n 82 |       let formattedMessage=\"[\\(domainName)] \\(loggableError.getLogMessage())\"\n 83 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:83:11: warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n 81 |       let errorMetadata=loggableError.createMetadataCollection()\n 82 |       let formattedMessage=\"[\\(domainName)] \\(loggableError.getLogMessage())\"\n 83 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n    |           `- warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n 84 | \n 85 |       // Create a new context with error information\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:124:11: warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n122 |     if let loggableError=error as? LoggableErrorProtocol {\n123 |       // Handle loggable errors with enriched metadata\n124 |       let errorMetadata=loggableError.createMetadataCollection()\n    |           `- warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n125 |       let formattedMessage=message ?? \"[\\(domainName)] \\(loggableError.getLogMessage())\"\n126 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:126:11: warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n124 |       let errorMetadata=loggableError.createMetadataCollection()\n125 |       let formattedMessage=message ?? \"[\\(domainName)] \\(loggableError.getLogMessage())\"\n126 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n    |           `- warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n127 | \n128 |       // Create a new context with error information\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:332:47: error: cannot find type 'BackupCreationParameters' in scope\n330 | extension BackupCreateParameters {\n331 |   /// Convert to BackupInterfaces.BackupCreationParameters\n332 |   public func toBackupCreationParameters() -\u003e BackupCreationParameters {\n    |                                               `- error: cannot find type 'BackupCreationParameters' in scope\n333 |     BackupCreationParameters(\n334 |       sources: sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:342:39: error: cannot find type 'BackupCreationParameters' in scope\n340 | \n341 |   /// Create from BackupInterfaces.BackupCreationParameters\n342 |   public static func from(parameters: BackupCreationParameters) -\u003e BackupCreateParameters {\n    |                                       `- error: cannot find type 'BackupCreationParameters' in scope\n343 |     BackupCreateParameters(\n344 |       sources: parameters.sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:354:63: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n352 | extension BackupRestoreParameters {\n353 |   /// Convert to BackupInterfaces.BackupRestoreParameters\n354 |   public func toBackupRestoreParameters() -\u003e BackupInterfaces.BackupRestoreParameters {\n    |                                                               `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n355 |     BackupInterfaces.BackupRestoreParameters(\n356 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:368:8: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n366 |   public static func from(\n367 |     parameters: BackupInterfaces\n368 |       .BackupRestoreParameters\n    |        `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n369 |   ) -\u003e BackupRestoreParameters {\n370 |     BackupRestoreParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:382:60: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n380 | extension BackupListParameters {\n381 |   /// Convert to BackupInterfaces.BackupListParameters\n382 |   public func toBackupListParameters() -\u003e BackupInterfaces.BackupListParameters {\n    |                                                            `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n383 |     BackupInterfaces.BackupListParameters(\n384 |       tags: tags,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:396:8: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n394 |   public static func from(\n395 |     parameters: BackupInterfaces\n396 |       .BackupListParameters\n    |        `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n397 |   ) -\u003e BackupListParameters {\n398 |     BackupListParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:413:35: error: extra arguments at positions #2, #3, #4 in call\n411 |   /// Convert to BackupInterfaces.BackupOptions\n412 |   public func toBackupOptions() -\u003e BackupInterfaces.BackupOptions {\n413 |     BackupInterfaces.BackupOptions(\n    |                                   `- error: extra arguments at positions #2, #3, #4 in call\n414 |       compressionLevel: 0,\n415 |       deduplicate: false,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:27:10: note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 25 |   ///   - useParallelisation: Whether to use parallel operations\n 26 |   ///   - priority: Priority of the backup operation\n 27 |   public init(\n    |          `- note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 28 |     compressionLevel: Int?=nil,\n 29 |     maxSize: UInt64?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:423:18: error: extra arguments at positions #2, #3, #4 in call\n421 |   /// Create from BackupInterfaces.BackupOptions\n422 |   public static func from(options: BackupInterfaces.BackupOptions) -\u003e BackupOptions {\n423 |     BackupOptions(\n    |                  `- error: extra arguments at positions #2, #3, #4 in call\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:27:10: note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 25 |   ///   - useParallelisation: Whether to use parallel operations\n 26 |   ///   - priority: Priority of the backup operation\n 27 |   public init(\n    |          `- note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 28 |     compressionLevel: Int?=nil,\n 29 |     maxSize: UInt64?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:425:28: error: value of type 'BackupOptions' has no member 'deduplicate'\n423 |     BackupOptions(\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n    |                            `- error: value of type 'BackupOptions' has no member 'deduplicate'\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n427 |       metadata: options.metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:426:36: error: value of type 'BackupOptions' has no member 'encryptionAlgorithm'\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n    |                                    `- error: value of type 'BackupOptions' has no member 'encryptionAlgorithm'\n427 |       metadata: options.metadata\n428 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:427:25: error: value of type 'BackupOptions' has no member 'metadata'\n425 |       deduplicate: options.deduplicate,\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n427 |       metadata: options.metadata\n    |                         `- error: value of type 'BackupOptions' has no member 'metadata'\n428 |     )\n429 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:435:36: error: extra arguments at positions #2, #3, #4, #5 in call\n433 |   /// Convert to BackupInterfaces.RestoreOptions\n434 |   public func toRestoreOptions() -\u003e BackupInterfaces.RestoreOptions {\n435 |     BackupInterfaces.RestoreOptions(\n    |                                    `- error: extra arguments at positions #2, #3, #4, #5 in call\n436 |       preservePermissions: false,\n437 |       preserveOwnership: false,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:66:10: note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 64 |   ///   - useParallelisation: Whether to use parallel operations\n 65 |   ///   - priority: Priority of the restore operation\n 66 |   public init(\n    |          `- note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 67 |     overwriteExisting: Bool=false,\n 68 |     restorePermissions: Bool=true,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:446:19: error: extra arguments at positions #2, #3, #4, #5 in call\n444 |   /// Create from BackupInterfaces.RestoreOptions\n445 |   public static func from(options: BackupInterfaces.RestoreOptions) -\u003e RestoreOptions {\n446 |     RestoreOptions(\n    |                   `- error: extra arguments at positions #2, #3, #4, #5 in call\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:66:10: note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 64 |   ///   - useParallelisation: Whether to use parallel operations\n 65 |   ///   - priority: Priority of the restore operation\n 66 |   public init(\n    |          `- note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 67 |     overwriteExisting: Bool=false,\n 68 |     restorePermissions: Bool=true,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:447:36: error: value of type 'RestoreOptions' has no member 'preservePermissions'\n445 |   public static func from(options: BackupInterfaces.RestoreOptions) -\u003e RestoreOptions {\n446 |     RestoreOptions(\n447 |       preservePermissions: options.preservePermissions,\n    |                                    `- error: value of type 'RestoreOptions' has no member 'preservePermissions'\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:448:34: error: value of type 'RestoreOptions' has no member 'preserveOwnership'\n446 |     RestoreOptions(\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n    |                                  `- error: value of type 'RestoreOptions' has no member 'preserveOwnership'\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:449:30: error: value of type 'RestoreOptions' has no member 'preserveTimes'\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n    |                              `- error: value of type 'RestoreOptions' has no member 'preserveTimes'\n450 |       skipExisting: options.skipExisting,\n451 |       metadata: options.metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:450:29: error: value of type 'RestoreOptions' has no member 'skipExisting'\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n    |                             `- error: value of type 'RestoreOptions' has no member 'skipExisting'\n451 |       metadata: options.metadata\n452 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:451:25: error: value of type 'RestoreOptions' has no member 'metadata'\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n451 |       metadata: options.metadata\n    |                         `- error: value of type 'RestoreOptions' has no member 'metadata'\n452 |     )\n453 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:217:41: error: cannot find type 'VerificationResult' in scope\n215 | extension BackupVerificationResultDTO {\n216 |   /// Convert this DTO to a BackupInterfaces.VerificationResult\n217 |   public func toVerificationResult() -\u003e VerificationResult {\n    |                                         `- error: cannot find type 'VerificationResult' in scope\n218 |     VerificationResult(\n219 |       verified: verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:231:47: error: cannot find type 'VerificationResult' in scope\n229 | \n230 |   /// Create a BackupVerificationResultDTO from a BackupInterfaces.VerificationResult\n231 |   public static func from(verificationResult: VerificationResult) -\u003e BackupVerificationResultDTO {\n    |                                               `- error: cannot find type 'VerificationResult' in scope\n232 |     BackupVerificationResultDTO(\n233 |       verified: verificationResult.verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:245:39: error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n243 | }\n244 | \n245 | extension BackupVerificationResultDTO.VerificationIssue {\n    |                                       `- error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n246 |   /// Convert this DTO to a BackupInterfaces.VerificationIssue\n247 |   public func toVerificationIssue() -\u003e VerificationResult.VerificationIssue {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:271:39: error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n269 | }\n270 | \n271 | extension BackupVerificationResultDTO.RepairSummary {\n    |                                       `- error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n272 |   /// Convert this DTO to a BackupInterfaces.RepairSummary\n273 |   public func toRepairSummary() -\u003e VerificationResult.RepairSummary {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:294:39: error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n292 | }\n293 | \n294 | extension BackupVerificationResultDTO.RepairAction {\n    |                                       `- error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n295 |   /// Convert this DTO to a BackupInterfaces.RepairAction\n296 |   public func toRepairAction() -\u003e VerificationResult.RepairAction {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:237:65: error: type 'VerificationIssue' has no member 'from'\n235 |       bytesVerified: verificationResult.bytesVerified,\n236 |       errorCount: verificationResult.errorCount,\n237 |       issues: verificationResult.issues.map { VerificationIssue.from(issue: $0) },\n    |                                                                 `- error: type 'VerificationIssue' has no member 'from'\n238 |       repairSummary: verificationResult.repairSummary.map { RepairSummary.from(summary: $0) },\n239 |       snapshotID: verificationResult.snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:238:75: error: type 'RepairSummary' has no member 'from'\n236 |       errorCount: verificationResult.errorCount,\n237 |       issues: verificationResult.issues.map { VerificationIssue.from(issue: $0) },\n238 |       repairSummary: verificationResult.repairSummary.map { RepairSummary.from(summary: $0) },\n    |                                                                           `- error: type 'RepairSummary' has no member 'from'\n239 |       snapshotID: verificationResult.snapshotID,\n240 |       verificationTime: verificationResult.verificationTime\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:27:15: warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n25 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken {\n26 |   private let token: BackupOperationCancellationToken\n27 |   private var _isCancelled: Bool=false\n   |               `- warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n28 | \n29 |   init(token: BackupOperationCancellationToken) {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:92:16: error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n 90 |       .with(\n 91 |         key: \"repositoryID\",\n 92 |         value: repositoryID,\n    |                |- error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n    |                |- note: coalesce using '??' to provide a default when the optional value contains 'nil'\n    |                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n 93 |         privacy: LoggingTypes.PrivacyClassification.public\n 94 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:97:16: error: value of optional type '[String]?' must be unwrapped to refer to member 'joined' of wrapped base type '[String]'\n 95 |       .with(\n 96 |         key: \"tags\",\n 97 |         value: tags.joined(separator: \", \"),\n    |                |- error: value of optional type '[String]?' must be unwrapped to refer to member 'joined' of wrapped base type '[String]'\n    |                |- note: chain the optional using '?' to access member 'joined' only for non-'nil' base values\n    |                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n 98 |         privacy: LoggingTypes.PrivacyClassification.public\n 99 |       )\nTarget //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator failed to build\nINFO: Elapsed time: 1.557s, Critical Path: 1.43s\nINFO: 2 processes: 30 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BackupServices:BackupServices",
    "success": false,
    "start_time": "2025-04-08T00:57:23.848315+01:00",
    "end_time": "2025-04-08T00:57:26.041631+01:00",
    "duration": "2.193305042s",
    "output": "INFO: Invocation ID: 50f65a0e-aa83-4f05-9b19-c5e92be7fecb\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupServices:BackupServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupServices:BackupServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BackupServices:BackupServices (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/BackupServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/BackupServices:BackupServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/BackupServices/BackupServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:712:45: error: cannot find type 'VerificationResult' in scope\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n713 |     // Create a log context\n714 |     let logContext=BackupLogContext()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:710:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n708 |     snapshotID: String?,\n709 |     verifyData: Bool=true,\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n    |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:60:65: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                 `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:59:26: error: cannot find type 'CancellationToken' in scope\n 57 |     parameters: BackupCreateParameters,\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:129:66: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:128:26: error: cannot find type 'CancellationToken' in scope\n126 |     parameters: BackupRestoreParameters,\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:193:26: error: cannot find type 'CancellationToken' in scope\n191 |   public func listBackups(\n192 |     parameters: BackupListParameters,\n193 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n194 |   ) async throws -\u003e [BackupSnapshot] {\n195 |     // Create the list command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:250:21: error: cannot find type 'DeleteResult' in scope\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n250 |   ) async throws -\u003e DeleteResult {\n    |                     `- error: cannot find type 'DeleteResult' in scope\n251 |     // Create the delete command\n252 |     var command=ResticCommandImpl(arguments: [\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:249:26: error: cannot find type 'CancellationToken' in scope\n247 |   public func deleteBackup(\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n250 |   ) async throws -\u003e DeleteResult {\n251 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:296:26: error: cannot find type 'CancellationToken' in scope\n294 |     pattern: String?=nil,\n295 |     progressReporter _: BackupProgressReporter?,\n296 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n297 |   ) async throws -\u003e [SnapshotFileEntry] {\n298 |     // Create the find command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:664:80: error: cannot find type 'DeleteResult' in scope\n662 |    * Parse delete result from JSON output.\n663 |    */\n664 |   private func parseDeleteResult(output: String, snapshotID: String) throws -\u003e DeleteResult {\n    |                                                                                `- error: cannot find type 'DeleteResult' in scope\n665 |     guard let data=output.data(using: .utf8) else {\n666 |       throw BackupOperationError.parsingFailure(\"Could not convert output to data\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:707:70: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                      `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:706:26: error: cannot find type 'CancellationToken' in scope\n704 |     parameters: BackupMaintenanceParameters,\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:218:31: error: extra arguments at positions #3, #8 in call\n216 |         if let progressReporter=reporter {\n217 |           await progressReporter.reportProgress(\n218 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n219 |               phase: .processing,\n220 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:376:31: error: extra arguments at positions #3, #8 in call\n374 |         if let reporter {\n375 |           await reporter.reportProgress(\n376 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n377 |               phase: .processing,\n378 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:279:31: error: extra arguments at positions #3, #8 in call\n277 |         if let reporter {\n278 |           await reporter.reportProgress(\n279 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n280 |               phase: .processing,\n281 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:65:45: error: cannot find type 'CancellationToken' in scope\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n    |                                             `- error: cannot find type 'CancellationToken' in scope\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:67:24: error: cannot find type 'CancellationToken' in scope\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 68 |   ) async throws -\u003e R {\n 69 |     // Create a log context for this operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:18:15: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cAny, Error\u003e]=[:]\n    |               `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 19 | \n 20 |   /// Storage for active cancellation tokens\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               |                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               `- warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationHandlerProtocol.swift:52:8: note: a function type must be marked '@Sendable' to conform to 'Sendable'\n50 |    * - Throws: Error if the operation fails or is cancelled\n51 |    */\n52 |   func withCancellationSupport\u003cT\u003e(\n   |        `- note: a function type must be marked '@Sendable' to conform to 'Sendable'\n53 |     _ operation: @escaping () async throws -\u003e T,\n54 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:424:40: error: cannot find type 'SnapshotFileType' in scope\n422 | \n423 |   // Convert SnapshotFileType to BackupFileType\n424 |   private func convertFileType(_ type: SnapshotFileType?) -\u003e BackupFileType {\n    |                                        `- error: cannot find type 'SnapshotFileType' in scope\n425 |     guard let type else { return .file }\n426 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:332:47: error: cannot find type 'BackupCreationParameters' in scope\n330 | extension BackupCreateParameters {\n331 |   /// Convert to BackupInterfaces.BackupCreationParameters\n332 |   public func toBackupCreationParameters() -\u003e BackupCreationParameters {\n    |                                               `- error: cannot find type 'BackupCreationParameters' in scope\n333 |     BackupCreationParameters(\n334 |       sources: sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:342:39: error: cannot find type 'BackupCreationParameters' in scope\n340 | \n341 |   /// Create from BackupInterfaces.BackupCreationParameters\n342 |   public static func from(parameters: BackupCreationParameters) -\u003e BackupCreateParameters {\n    |                                       `- error: cannot find type 'BackupCreationParameters' in scope\n343 |     BackupCreateParameters(\n344 |       sources: parameters.sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:354:63: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n352 | extension BackupRestoreParameters {\n353 |   /// Convert to BackupInterfaces.BackupRestoreParameters\n354 |   public func toBackupRestoreParameters() -\u003e BackupInterfaces.BackupRestoreParameters {\n    |                                                               `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n355 |     BackupInterfaces.BackupRestoreParameters(\n356 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:368:8: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n366 |   public static func from(\n367 |     parameters: BackupInterfaces\n368 |       .BackupRestoreParameters\n    |        `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n369 |   ) -\u003e BackupRestoreParameters {\n370 |     BackupRestoreParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:382:60: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n380 | extension BackupListParameters {\n381 |   /// Convert to BackupInterfaces.BackupListParameters\n382 |   public func toBackupListParameters() -\u003e BackupInterfaces.BackupListParameters {\n    |                                                            `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n383 |     BackupInterfaces.BackupListParameters(\n384 |       tags: tags,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:396:8: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n394 |   public static func from(\n395 |     parameters: BackupInterfaces\n396 |       .BackupListParameters\n    |        `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n397 |   ) -\u003e BackupListParameters {\n398 |     BackupListParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:217:41: error: cannot find type 'VerificationResult' in scope\n215 | extension BackupVerificationResultDTO {\n216 |   /// Convert this DTO to a BackupInterfaces.VerificationResult\n217 |   public func toVerificationResult() -\u003e VerificationResult {\n    |                                         `- error: cannot find type 'VerificationResult' in scope\n218 |     VerificationResult(\n219 |       verified: verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:231:47: error: cannot find type 'VerificationResult' in scope\n229 | \n230 |   /// Create a BackupVerificationResultDTO from a BackupInterfaces.VerificationResult\n231 |   public static func from(verificationResult: VerificationResult) -\u003e BackupVerificationResultDTO {\n    |                                               `- error: cannot find type 'VerificationResult' in scope\n232 |     BackupVerificationResultDTO(\n233 |       verified: verificationResult.verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:245:39: error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n243 | }\n244 | \n245 | extension BackupVerificationResultDTO.VerificationIssue {\n    |                                       `- error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n246 |   /// Convert this DTO to a BackupInterfaces.VerificationIssue\n247 |   public func toVerificationIssue() -\u003e VerificationResult.VerificationIssue {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:271:39: error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n269 | }\n270 | \n271 | extension BackupVerificationResultDTO.RepairSummary {\n    |                                       `- error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n272 |   /// Convert this DTO to a BackupInterfaces.RepairSummary\n273 |   public func toRepairSummary() -\u003e VerificationResult.RepairSummary {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:294:39: error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n292 | }\n293 | \n294 | extension BackupVerificationResultDTO.RepairAction {\n    |                                       `- error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n295 |   /// Convert this DTO to a BackupInterfaces.RepairAction\n296 |   public func toRepairAction() -\u003e VerificationResult.RepairAction {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:27:15: warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n25 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken {\n26 |   private let token: BackupOperationCancellationToken\n27 |   private var _isCancelled: Bool=false\n   |               `- warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n28 | \n29 |   init(token: BackupOperationCancellationToken) {\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:39:9: warning: initialization of immutable value 'operationsService' was never used; consider replacing with assignment to '_' or removing it\n 37 | \n 38 |     // Create operations service\n 39 |     let operationsService=BackupOperationsService(\n    |         `- warning: initialization of immutable value 'operationsService' was never used; consider replacing with assignment to '_' or removing it\n 40 |       resticService: resticService,\n 41 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:47:9: warning: initialization of immutable value 'operationExecutor' was never used; consider replacing with assignment to '_' or removing it\n 45 | \n 46 |     // Create operation executor\n 47 |     let operationExecutor=BackupOperationExecutor(\n    |         `- warning: initialization of immutable value 'operationExecutor' was never used; consider replacing with assignment to '_' or removing it\n 48 |       logger: logger,\n 49 |       cancellationHandler: cancellationHandler,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:43:22: error: extra arguments at positions #2, #3 in call\n 41 |     let defaultMessage=\"Starting backup operation: \\(operation)\"\n 42 | \n 43 |     await logger.info(\n    |                      `- error: extra arguments at positions #2, #3 in call\n 44 |       message ?? defaultMessage,\n 45 |       metadata: logContext.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:44:32: error: missing argument for parameter 'context' in call\n 42 | \n 43 |     await logger.info(\n 44 |       message ?? defaultMessage,\n    |                                `- error: missing argument for parameter 'context' in call\n 45 |       metadata: logContext.toPrivacyMetadata(),\n 46 |       source: \"BackupService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:67:18: error: no exact matches in call to instance method 'info'\n 65 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"success\", privacy: .public)\n 66 | \n 67 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n 68 |       message ?? defaultMessage,\n 69 |       metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:91:18: error: no exact matches in call to instance method 'info'\n 89 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n 90 | \n 91 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n 92 |       message ?? defaultMessage,\n 93 |       metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:119:88: error: value of type 'BackupError' has no member 'code'\n117 |     // Add error details with appropriate privacy levels\n118 |     if let backupError=error as? BackupError {\n119 |       metadata[\"errorCode\"]=PrivacyMetadataValue(value: String(describing: backupError.code),\n    |                                                                                        `- error: value of type 'BackupError' has no member 'code'\n120 |                                                  privacy: .public)\n121 |       metadata[\"errorMessage\"]=PrivacyMetadataValue(value: backupError.localizedDescription,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:125:39: error: value of type 'BackupError' has no member 'context'\n123 | \n124 |       // Add structured error context if available\n125 |       if let errorContext=backupError.context {\n    |                                       `- error: value of type 'BackupError' has no member 'context'\n126 |         for (key, value) in errorContext {\n127 |           metadata[\"error_\\(key)\"]=PrivacyMetadataValue(value: value, privacy: .private)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:137:18: error: no exact matches in call to instance method 'error'\n135 |     }\n136 | \n137 |     await logger.error(\n    |                  `- error: no exact matches in call to instance method 'error'\n138 |       message ?? defaultMessage,\n139 |       metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 50 | \n 51 |   /// Log a critical message\n    :\n 85 |   }\n 86 | \n 87 |   public func error(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 88 |     await log(.error, message, context: context)\n 89 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:166:22: error: no exact matches in call to instance method 'info'\n164 |         metadata[\"description\"]=PrivacyMetadataValue(value: description, privacy: .public)\n165 | \n166 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n167 |           \"Initialising backup operation: \\(operation)\",\n168 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:179:22: error: no exact matches in call to instance method 'info'\n177 |                                                          privacy: .public)\n178 | \n179 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n180 |           \"Processing backup operation: \\(operation) - \\(phase) (\\(String(format: \"%.1f%%\", percentComplete * 100)))\",\n181 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:188:22: error: no exact matches in call to instance method 'info'\n186 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"completed\", privacy: .public)\n187 | \n188 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n189 |           \"Completed backup operation: \\(operation)\",\n190 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:197:22: error: no exact matches in call to instance method 'info'\n195 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n196 | \n197 |         await logger.info(\n    |                      `- error: no exact matches in call to instance method 'info'\n198 |           \"Cancelled backup operation: \\(operation)\",\n199 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:218:22: error: no exact matches in call to instance method 'error'\n216 |         }\n217 | \n218 |         await logger.error(\n    |                      `- error: no exact matches in call to instance method 'error'\n219 |           \"Failed backup operation: \\(operation)\",\n220 |           metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 50 | \n 51 |   /// Log a critical message\n    :\n 85 |   }\n 86 | \n 87 |   public func error(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 88 |     await log(.error, message, context: context)\n 89 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupCommandFactory.swift:178:9: warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n176 |   ) throws -\u003e ResticCommand {\n177 |     // Determine base command from maintenance type\n178 |     var baseCommand=switch type {\n    |         `- warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n179 |       case .check:\n180 |         \"check\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:712:45: error: cannot find type 'VerificationResult' in scope\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n713 |     // Create a log context\n714 |     let logContext=BackupLogContext()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:710:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n708 |     snapshotID: String?,\n709 |     verifyData: Bool=true,\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n    |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:65:45: error: cannot find type 'CancellationToken' in scope\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n    |                                             `- error: cannot find type 'CancellationToken' in scope\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:67:24: error: cannot find type 'CancellationToken' in scope\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 68 |   ) async throws -\u003e R {\n 69 |     // Create a log context for this operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:60:65: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                 `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:59:26: error: cannot find type 'CancellationToken' in scope\n 57 |     parameters: BackupCreateParameters,\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:210:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n208 |         value: result,\n209 |         progressStream: progressReporter.stream,\n210 |         metadata: metadata\n    |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n211 |       )\n212 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:226:26: error: generic parameter 'some Sendable' could not be inferred\n224 | \n225 |       // Log success\n226 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n227 |         context: enhancedContext,\n228 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:129:66: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:128:26: error: cannot find type 'CancellationToken' in scope\n126 |     parameters: BackupRestoreParameters,\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:364:26: error: generic parameter 'some Sendable' could not be inferred\n362 | \n363 |       // Log success\n364 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n365 |         context: enhancedContext,\n366 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:440:20: error: extra argument 'listOptions' in call\n438 |       before: before,\n439 |       after: after,\n440 |       listOptions: listOptions\n    |                    `- error: extra argument 'listOptions' in call\n441 |     )\n442 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:445:49: error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n443 |     do {\n444 |       // Execute the operation\n445 |       let snapshots=try await operationsService.listSnapshots(parameters: parameters)\n    |                                                 `- error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n446 | \n447 |       // Record the end time\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:460:26: error: generic parameter 'some Sendable' could not be inferred\n458 | \n459 |       // Log success\n460 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n461 |         context: enhancedContext,\n462 |         result: snapshots\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:513:40: error: value of type 'DeleteOptions' has no member 'prune'\n511 |     let parameters=BackupDeleteParameters(\n512 |       snapshotID: snapshotID,\n513 |       pruneAfterDelete: deleteOptions?.prune ?? false\n    |                                        `- error: value of type 'DeleteOptions' has no member 'prune'\n514 |     )\n515 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:250:21: error: cannot find type 'DeleteResult' in scope\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n250 |   ) async throws -\u003e DeleteResult {\n    |                     `- error: cannot find type 'DeleteResult' in scope\n251 |     // Create the delete command\n252 |     var command=ResticCommandImpl(arguments: [\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:249:26: error: cannot find type 'CancellationToken' in scope\n247 |   public func deleteBackup(\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n250 |   ) async throws -\u003e DeleteResult {\n251 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:567:26: error: generic parameter 'some Sendable' could not be inferred\n565 | \n566 |       // Log success\n567 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n568 |         context: enhancedContext,\n569 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:707:70: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                      `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:706:26: error: cannot find type 'CancellationToken' in scope\n704 |     parameters: BackupMaintenanceParameters,\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:660:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n658 |         value: result,\n659 |         progressStream: progressReporter.stream,\n660 |         metadata: metadata\n    |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n661 |       )\n662 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:670:26: error: generic parameter 'some Sendable' could not be inferred\n668 | \n669 |       // Log success\n670 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n671 |         context: enhancedContext,\n672 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:734:19: error: type 'BackupOperation' has no member 'verifyBackup'\n732 |     let token=BackupOperationToken(\n733 |       id: UUID(),\n734 |       operation: .verifyBackup,\n    |                   `- error: type 'BackupOperation' has no member 'verifyBackup'\n735 |       cancellable: true\n736 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:747:30: error: type 'BackupVerifyParameters' has no member 'RepairMode'\n745 |     // Create DTO parameters for the operation using adapter pattern\n746 |     let localRepairMode=repairMode.map {\n747 |       BackupVerifyParameters.RepairMode(rawValue: $0.rawValue) ?? .reportOnly\n    |                              `- error: type 'BackupVerifyParameters' has no member 'RepairMode'\n748 |     }\n749 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:750:50: error: type 'VerifyOptions' has no member 'from'\n748 |     }\n749 | \n750 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n    |                                                  `- error: type 'VerifyOptions' has no member 'from'\n751 | \n752 |     let parameters=BackupVerifyParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:752:42: error: extra arguments at positions #2, #3, #4 in call\n750 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n751 | \n752 |     let parameters=BackupVerifyParameters(\n    |                                          `- error: extra arguments at positions #2, #3, #4 in call\n753 |       snapshotID: snapshotID,\n754 |       verifyData: verifyData,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:753:29: error: missing argument for parameter 'verifyOptions' in call\n751 | \n752 |     let parameters=BackupVerifyParameters(\n753 |       snapshotID: snapshotID,\n    |                             `- error: missing argument for parameter 'verifyOptions' in call\n754 |       verifyData: verifyData,\n755 |       repairMode: localRepairMode,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:761:61: error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n759 |     do {\n760 |       // Execute the operation\n761 |       let verificationResultDTO=try await operationExecutor.executeVerifyOperation(\n    |                                                             `- error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n762 |         parameters: parameters,\n763 |         progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:774:19: error: extra argument 'duration' in call\n772 |       await backupLogger.logOperationSuccess(\n773 |         context: enhancedContext,\n774 |         duration: duration\n    |                   `- error: extra argument 'duration' in call\n775 |       )\n776 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:772:26: error: generic parameter 'some Sendable' could not be inferred\n770 | \n771 |       // Log operation success\n772 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n773 |         context: enhancedContext,\n774 |         duration: duration\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:792:29: error: value of type 'any Error' has no member 'asBackupOperationError'\n790 |     } catch {\n791 |       // Map error\n792 |       let backupError=error.asBackupOperationError\n    |                             `- error: value of type 'any Error' has no member 'asBackupOperationError'\n793 | \n794 |       // Log error\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:831:37: error: extra argument 'error' in call\n829 |       await backupLogger.logOperationFailure(\n830 |         context: logContext,\n831 |         error: BackupOperationError.operationNotFound(\"Operation with ID \\(operationID) not found\")\n    |                                     `- error: extra argument 'error' in call\n832 |       )\n833 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:831:37: error: type 'BackupOperationError' has no member 'operationNotFound'\n829 |       await backupLogger.logOperationFailure(\n830 |         context: logContext,\n831 |         error: BackupOperationError.operationNotFound(\"Operation with ID \\(operationID) not found\")\n    |                                     `- error: type 'BackupOperationError' has no member 'operationNotFound'\n832 |       )\n833 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:842:12: error: extra argument 'error' in call\n840 |         context: logContext,\n841 |         error: BackupOperationError\n842 |           .operationNotCancellable(\"Operation \\(token.operation) cannot be cancelled\")\n    |            `- error: extra argument 'error' in call\n843 |       )\n844 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:842:12: error: type 'BackupOperationError' has no member 'operationNotCancellable'\n840 |         context: logContext,\n841 |         error: BackupOperationError\n842 |           .operationNotCancellable(\"Operation \\(token.operation) cannot be cancelled\")\n    |            `- error: type 'BackupOperationError' has no member 'operationNotCancellable'\n843 |       )\n844 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:852:26: error: generic parameter 'some Sendable' could not be inferred\n850 | \n851 |       // Log success\n852 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n853 |         context: logContext,\n854 |         message: \"Operation cancelled successfully\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:862:16: error: extra argument 'error' in call\n860 |       await backupLogger.logOperationFailure(\n861 |         context: logContext,\n862 |         error: error\n    |                `- error: extra argument 'error' in call\n863 |       )\n864 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:877:11: error: cannot assign to property: 'cancelled' setter is inaccessible\n875 |   private func cancelOperationImpl(token: BackupOperationToken) async throws {\n876 |     // Signal cancellation to the operation\n877 |     token.cancelled=true\n    |           `- error: cannot assign to property: 'cancelled' setter is inaccessible\n878 | \n879 |     // Remove from active operations\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:888:24: error: value of type 'BackupLogger' has no member 'logInfo'\n886 |       .withPublic(key: \"operationType\", value: String(describing: token.operation))\n887 | \n888 |     await backupLogger.logInfo(\n    |                        `- error: value of type 'BackupLogger' has no member 'logInfo'\n889 |       context: logContext,\n890 |       message: \"Operation cancellation complete\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:907:45: error: cannot find type 'RepositoryError' in scope\n905 |     } else if error is CancellationError {\n906 |       .operationCancelled(\"Operation was cancelled\")\n907 |     } else if let repositoryError=error as? RepositoryError {\n    |                                             `- error: cannot find type 'RepositoryError' in scope\n908 |       .repositoryError(repositoryError)\n909 |     } else if let timeout=error as? TimeoutError {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:930:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n928 | \n929 |     // Map known error types\n930 |     if let nsError=error as? NSError {\n    |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n931 |       switch nsError.domain {\n932 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:935:19: error: type 'BackupOperationError' has no member 'fileSystemError'\n933 |           return .networkError(\"Network error: \\(nsError.localizedDescription)\")\n934 |         case NSCocoaErrorDomain:\n935 |           return .fileSystemError(\"File system error: \\(nsError.localizedDescription)\")\n    |                   `- error: type 'BackupOperationError' has no member 'fileSystemError'\n936 |         default:\n937 |           break\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:942:13: error: type 'BackupOperationError' has no member 'unknownError'\n940 | \n941 |     // Default to unknown error with the original description\n942 |     return .unknownError(\"Operation failed: \\(error.localizedDescription)\")\n    |             `- error: type 'BackupOperationError' has no member 'unknownError'\n943 |   }\n944 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:954:13: warning: result of call to 'cancelOperation(id:)' is unused\n952 | \n953 |     for (id, _) in activeOperationsCancellationTokens {\n954 |       await cancelOperation(id: id)\n    |             `- warning: result of call to 'cancelOperation(id:)' is unused\n955 |     }\n956 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:974:49: error: value of type 'String' has no member 'uuidString'\n972 |     let logContext=BackupLogContext()\n973 |       .withOperation(\"cancelOperation\")\n974 |       .withPublic(key: \"operationID\", value: id.uuidString)\n    |                                                 `- error: value of type 'String' has no member 'uuidString'\n975 | \n976 |     // Log cancellation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:980:29: error: value of type 'BackupOperationExecutor' has no member 'cancelOperation'\n978 | \n979 |     // Cancel the operation\n980 |     await operationExecutor.cancelOperation(id: token.id)\n    |                             `- error: value of type 'BackupOperationExecutor' has no member 'cancelOperation'\n981 | \n982 |     // Remove the token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:193:26: error: cannot find type 'CancellationToken' in scope\n191 |   public func listBackups(\n192 |     parameters: BackupListParameters,\n193 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n194 |   ) async throws -\u003e [BackupSnapshot] {\n195 |     // Create the list command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:296:26: error: cannot find type 'CancellationToken' in scope\n294 |     pattern: String?=nil,\n295 |     progressReporter _: BackupProgressReporter?,\n296 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n297 |   ) async throws -\u003e [SnapshotFileEntry] {\n298 |     // Create the find command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:664:80: error: cannot find type 'DeleteResult' in scope\n662 |    * Parse delete result from JSON output.\n663 |    */\n664 |   private func parseDeleteResult(output: String, snapshotID: String) throws -\u003e DeleteResult {\n    |                                                                                `- error: cannot find type 'DeleteResult' in scope\n665 |     guard let data=output.data(using: .utf8) else {\n666 |       throw BackupOperationError.parsingFailure(\"Could not convert output to data\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:62:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n 64 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:63:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 64 |       progressContinuation=continuation\n 65 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:63:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n 64 |       progressContinuation=continuation\n 65 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:69:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 67 |     // Create a progress handler that forwards to both the reporter and the stream\n 68 |     let progressHandler={ [progressReporter, progressContinuation] (\n 69 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 70 |     ) async in\n 71 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:96:25: error: no exact matches in call to instance method 'append'\n 94 |     if let excludePaths = parameters.excludePaths, !excludePaths.isEmpty {\n 95 |       command.arguments.append(\"--exclude\")\n 96 |       command.arguments.append(contentsOf: excludePaths)\n    |                         `- error: no exact matches in call to instance method 'append'\n 97 |     }\n 98 | \n\nSwift.Array.append:2:33: note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Element' == 'S.Element')\n1 | generic struct Array {\n2 | @inlinable public mutating func append\u003cS\u003e(contentsOf newElements: __owned S) where Element == S.Element, S : Sequence}\n  |                                 `- note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Element' == 'S.Element')\n3 | \n\nSwift.RangeReplaceableCollection.append:2:33: note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n1 | protocol RangeReplaceableCollection {\n2 | @inlinable public mutating func append\u003cS\u003e(contentsOf newElements: __owned S) where S : Sequence, Self.Element == S.Element}\n  |                                 `- note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:109:71: error: missing argument for parameter 'sources' in call\n107 | \n108 |     // Parse the result\n109 |     let backupResult=try resultParser.parseBackupResult(output: output)\n    |                                                                       `- error: missing argument for parameter 'sources' in call\n110 | \n111 |     // Return the result and the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:16:15: note: 'parseBackupResult(output:sources:)' declared here\n 14 |   /// - Returns: A backup result with details about the operation\n 15 |   /// - Throws: BackupError if parsing fails\n 16 |   public func parseBackupResult(output: String, sources: [URL]) throws -\u003e BackupResult {\n    |               `- note: 'parseBackupResult(output:sources:)' declared here\n 17 |     guard !output.isEmpty else {\n 18 |       throw BackupError.parsingError(details: \"Empty output from backup command\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:131:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n133 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:132:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n133 |       progressContinuation=continuation\n134 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:132:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n133 |       progressContinuation=continuation\n134 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:138:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n136 |     // Create a progress handler that forwards to both the reporter and the stream\n137 |     let progressHandler={ [progressReporter, progressContinuation] (\n138 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n139 |     ) async in\n140 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:157:18: error: cannot convert value of type 'URL' to expected element type 'Array\u003cString\u003e.ArrayLiteralElement' (aka 'String')\n155 |       parameters.snapshotID,\n156 |       \"--target\",\n157 |       parameters.targetPath\n    |                  `- error: cannot convert value of type 'URL' to expected element type 'Array\u003cString\u003e.ArrayLiteralElement' (aka 'String')\n158 |     ])\n159 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:176:73: error: missing argument for parameter 'targetPath' in call\n174 | \n175 |     // Parse the result\n176 |     let restoreResult=try resultParser.parseRestoreResult(output: output)\n    |                                                                         `- error: missing argument for parameter 'targetPath' in call\n177 | \n178 |     // Return the result and the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:63:15: note: 'parseRestoreResult(output:targetPath:)' declared here\n 61 |   /// - Returns: A RestoreResult object\n 62 |   /// - Throws: BackupError if parsing fails\n 63 |   public func parseRestoreResult(output: String, targetPath: URL) throws -\u003e RestoreResult {\n    |               `- note: 'parseRestoreResult(output:targetPath:)' declared here\n 64 |     // Simple parsing - look for file restoration lines\n 65 |     let lines=output.components(separatedBy: .newlines)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:353:55: error: type 'BackupOperation' has no member 'verifyBackup'\n351 |       // Forward to the progress reporter if provided\n352 |       if let reporter=progressReporter {\n353 |         await reporter.reportProgress(progress, for: .verifyBackup)\n    |                                                       `- error: type 'BackupOperation' has no member 'verifyBackup'\n354 |       }\n355 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:376:11: error: cannot find 'snapshotService' in scope\n374 |       let snapshot=try await (\n375 |         snapshotID != nil ?\n376 |           snapshotService.getSnapshot(id: snapshotID!) :\n    |           `- error: cannot find 'snapshotService' in scope\n377 |           snapshotService.getLatestSnapshot()\n378 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:377:11: error: cannot find 'snapshotService' in scope\n375 |         snapshotID != nil ?\n376 |           snapshotService.getSnapshot(id: snapshotID!) :\n377 |           snapshotService.getLatestSnapshot()\n    |           `- error: cannot find 'snapshotService' in scope\n378 |       )\n379 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:382:36: error: type 'BackupOperationError' has no member 'snapshotNotFound'\n380 |       // Early exit if no snapshot found\n381 |       guard let snapshot else {\n382 |         throw BackupOperationError.snapshotNotFound(\n    |                                    `- error: type 'BackupOperationError' has no member 'snapshotNotFound'\n383 |           \"No snapshot found to verify\" + (snapshotID != nil ? \" with ID \\(snapshotID!)\" : \"\")\n384 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:388:7: error: cannot find 'logger' in scope\n386 | \n387 |       // Log verification start\n388 |       logger.info(\n    |       `- error: cannot find 'logger' in scope\n389 |         context: backupLogContext.withOperation(\"verifyBackup\")\n390 |           .withPublic(key: \"snapshotID\", value: snapshot.id)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:389:18: error: cannot find 'backupLogContext' in scope\n387 |       // Log verification start\n388 |       logger.info(\n389 |         context: backupLogContext.withOperation(\"verifyBackup\")\n    |                  `- error: cannot find 'backupLogContext' in scope\n390 |           .withPublic(key: \"snapshotID\", value: snapshot.id)\n391 |           .withPublic(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:407:23: error: extra argument 'transferRate' in call\n405 |         totalBytes: 0,\n406 |         estimatedTimeRemaining: nil,\n407 |         transferRate: nil,\n    |                       `- error: extra argument 'transferRate' in call\n408 |         details: \"Analysing snapshot structure\"\n409 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:407:23: error: 'nil' requires a contextual type\n405 |         totalBytes: 0,\n406 |         estimatedTimeRemaining: nil,\n407 |         transferRate: nil,\n    |                       `- error: 'nil' requires a contextual type\n408 |         details: \"Analysing snapshot structure\"\n409 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:412:40: error: cannot find 'snapshotService' in scope\n410 | \n411 |       // Use snapshot service to perform actual verification\n412 |       let verificationResult=try await snapshotService.verifySnapshot(\n    |                                        `- error: cannot find 'snapshotService' in scope\n413 |         id: snapshot.id,\n414 |         fullVerification: verifyOptions?.fullVerification ?? false,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:434:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n432 |         itemsProcessed: Int(Double(totalItems) * 0.25),\n433 |         totalItems: totalItems,\n434 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.25),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n435 |         totalBytes: UInt64(snapshot.stats.totalSize)\n436 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:450:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n448 |         itemsProcessed: Int(Double(totalItems) * 0.5),\n449 |         totalItems: totalItems,\n450 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.5),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n451 |         totalBytes: UInt64(snapshot.stats.totalSize)\n452 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:466:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n464 |         itemsProcessed: Int(Double(totalItems) * 0.75),\n465 |         totalItems: totalItems,\n466 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.75),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n467 |         totalBytes: UInt64(snapshot.stats.totalSize)\n468 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:709:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n711 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n711 |       progressContinuation=continuation\n712 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n711 |       progressContinuation=continuation\n712 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:716:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n714 |     // Create a progress handler that forwards to both the reporter and the stream\n715 |     let progressHandler={ [progressReporter, progressContinuation] (\n716 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n717 |     ) async in\n718 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:758:7: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n756 |     // Report progress\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n    |       `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n759 |         phase: .processing,\n760 |         percentComplete: 0.1,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:758:21: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n756 |     // Report progress\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n    |                     `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n759 |         phase: .processing,\n760 |         percentComplete: 0.1,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:759:9: error: missing argument for parameter 'from' in call\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n759 |         phase: .processing,\n    |         `- error: missing argument for parameter 'from' in call\n760 |         percentComplete: 0.1,\n761 |         currentItem: \"Starting maintenance\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:759:17: error: cannot infer contextual base in reference to member 'processing'\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n759 |         phase: .processing,\n    |                 `- error: cannot infer contextual base in reference to member 'processing'\n760 |         percentComplete: 0.1,\n761 |         currentItem: \"Starting maintenance\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:766:33: error: 'nil' requires a contextual type\n764 |         processedBytes: 0,\n765 |         totalBytes: 0,\n766 |         estimatedTimeRemaining: nil,\n    |                                 `- error: 'nil' requires a contextual type\n767 |         bytesPerSecond: nil,\n768 |         error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:767:25: error: 'nil' requires a contextual type\n765 |         totalBytes: 0,\n766 |         estimatedTimeRemaining: nil,\n767 |         bytesPerSecond: nil,\n    |                         `- error: 'nil' requires a contextual type\n768 |         error: nil\n769 |       ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:768:16: error: 'nil' requires a contextual type\n766 |         estimatedTimeRemaining: nil,\n767 |         bytesPerSecond: nil,\n768 |         error: nil\n    |                `- error: 'nil' requires a contextual type\n769 |       ),\n770 |       for: .maintenance\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:773:46: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n771 |     )\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n    |                                              `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n774 |       phase: .processing,\n775 |       percentComplete: 0.1,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:774:7: error: missing argument for parameter 'from' in call\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n774 |       phase: .processing,\n    |       `- error: missing argument for parameter 'from' in call\n775 |       percentComplete: 0.1,\n776 |       currentItem: \"Starting maintenance\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:774:15: error: cannot infer contextual base in reference to member 'processing'\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n774 |       phase: .processing,\n    |               `- error: cannot infer contextual base in reference to member 'processing'\n775 |       percentComplete: 0.1,\n776 |       currentItem: \"Starting maintenance\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:781:31: error: 'nil' requires a contextual type\n779 |       processedBytes: 0,\n780 |       totalBytes: 0,\n781 |       estimatedTimeRemaining: nil,\n    |                               `- error: 'nil' requires a contextual type\n782 |       bytesPerSecond: nil,\n783 |       error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:782:23: error: 'nil' requires a contextual type\n780 |       totalBytes: 0,\n781 |       estimatedTimeRemaining: nil,\n782 |       bytesPerSecond: nil,\n    |                       `- error: 'nil' requires a contextual type\n783 |       error: nil\n784 |     ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:783:14: error: 'nil' requires a contextual type\n781 |       estimatedTimeRemaining: nil,\n782 |       bytesPerSecond: nil,\n783 |       error: nil\n    |              `- error: 'nil' requires a contextual type\n784 |     ))\n785 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:791:7: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n789 |     // Report completion\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n    |       `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n792 |         phase: .completed,\n793 |         percentComplete: 1.0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:791:21: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n789 |     // Report completion\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n    |                     `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n792 |         phase: .completed,\n793 |         percentComplete: 1.0,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:792:9: error: missing argument for parameter 'from' in call\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n792 |         phase: .completed,\n    |         `- error: missing argument for parameter 'from' in call\n793 |         percentComplete: 1.0,\n794 |         currentItem: \"Maintenance completed\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:792:17: error: cannot infer contextual base in reference to member 'completed'\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n792 |         phase: .completed,\n    |                 `- error: cannot infer contextual base in reference to member 'completed'\n793 |         percentComplete: 1.0,\n794 |         currentItem: \"Maintenance completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:799:33: error: 'nil' requires a contextual type\n797 |         processedBytes: 0,\n798 |         totalBytes: 0,\n799 |         estimatedTimeRemaining: nil,\n    |                                 `- error: 'nil' requires a contextual type\n800 |         bytesPerSecond: nil,\n801 |         error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:800:25: error: 'nil' requires a contextual type\n798 |         totalBytes: 0,\n799 |         estimatedTimeRemaining: nil,\n800 |         bytesPerSecond: nil,\n    |                         `- error: 'nil' requires a contextual type\n801 |         error: nil\n802 |       ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:801:16: error: 'nil' requires a contextual type\n799 |         estimatedTimeRemaining: nil,\n800 |         bytesPerSecond: nil,\n801 |         error: nil\n    |                `- error: 'nil' requires a contextual type\n802 |       ),\n803 |       for: .maintenance\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:806:46: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n804 |     )\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n    |                                              `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n807 |       phase: .completed,\n808 |       percentComplete: 1.0,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:807:7: error: missing argument for parameter 'from' in call\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n807 |       phase: .completed,\n    |       `- error: missing argument for parameter 'from' in call\n808 |       percentComplete: 1.0,\n809 |       currentItem: \"Maintenance completed\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:807:15: error: cannot infer contextual base in reference to member 'completed'\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n807 |       phase: .completed,\n    |               `- error: cannot infer contextual base in reference to member 'completed'\n808 |       percentComplete: 1.0,\n809 |       currentItem: \"Maintenance completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:814:31: error: 'nil' requires a contextual type\n812 |       processedBytes: 0,\n813 |       totalBytes: 0,\n814 |       estimatedTimeRemaining: nil,\n    |                               `- error: 'nil' requires a contextual type\n815 |       bytesPerSecond: nil,\n816 |       error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:815:23: error: 'nil' requires a contextual type\n813 |       totalBytes: 0,\n814 |       estimatedTimeRemaining: nil,\n815 |       bytesPerSecond: nil,\n    |                       `- error: 'nil' requires a contextual type\n816 |       error: nil\n817 |     ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:816:14: error: 'nil' requires a contextual type\n814 |       estimatedTimeRemaining: nil,\n815 |       bytesPerSecond: nil,\n816 |       error: nil\n    |              `- error: 'nil' requires a contextual type\n817 |     ))\n818 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:71:14: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 69 |     if\n 70 |       error is CancellationError ||\n 71 |       (error as? NSError)?.domain == NSURLErrorDomain \u0026\u0026\n    |              `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 72 |       (error as? NSError)?.code == NSURLErrorCancelled\n 73 |     {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:72:14: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 70 |       error is CancellationError ||\n 71 |       (error as? NSError)?.domain == NSURLErrorDomain \u0026\u0026\n 72 |       (error as? NSError)?.code == NSURLErrorCancelled\n    |              `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 73 |     {\n 74 |       return BackupOperationError.operationCancelled(\"Operation was cancelled by the user\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:85:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 83 | \n 84 |     // Map NSError\n 85 |     if let nsError=error as? NSError {\n    |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 86 |       switch nsError.domain {\n 87 |         case NSPOSIXErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:83:40: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n 81 |           // Update progress\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n    |                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n 84 |               phase: .processing,\n 85 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:84:15: error: missing argument for parameter 'from' in call\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n 84 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n 85 |               percentComplete: 0.3,\n 86 |               currentItem: \"Updating snapshot tags\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:84:23: error: cannot infer contextual base in reference to member 'processing'\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n 84 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n 85 |               percentComplete: 0.3,\n 86 |               currentItem: \"Updating snapshot tags\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:91:39: error: 'nil' requires a contextual type\n 89 |               processedBytes: 0,\n 90 |               totalBytes: 0,\n 91 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n 92 |               bytesPerSecond: nil,\n 93 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:92:31: error: 'nil' requires a contextual type\n 90 |               totalBytes: 0,\n 91 |               estimatedTimeRemaining: nil,\n 92 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n 93 |               error: nil\n 94 |             )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:93:22: error: 'nil' requires a contextual type\n 91 |               estimatedTimeRemaining: nil,\n 92 |               bytesPerSecond: nil,\n 93 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n 94 |             )\n 95 |             await reporter.reportProgress(progress, for: .updateTags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:152:40: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n150 |           // Update progress\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n    |                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n153 |               phase: .processing,\n154 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:153:15: error: missing argument for parameter 'from' in call\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n153 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n154 |               percentComplete: 0.3,\n155 |               currentItem: \"Updating snapshot description\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:153:23: error: cannot infer contextual base in reference to member 'processing'\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n153 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n154 |               percentComplete: 0.3,\n155 |               currentItem: \"Updating snapshot description\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:160:39: error: 'nil' requires a contextual type\n158 |               processedBytes: 0,\n159 |               totalBytes: 0,\n160 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n161 |               bytesPerSecond: nil,\n162 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:161:31: error: 'nil' requires a contextual type\n159 |               totalBytes: 0,\n160 |               estimatedTimeRemaining: nil,\n161 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n162 |               error: nil\n163 |             )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:162:22: error: 'nil' requires a contextual type\n160 |               estimatedTimeRemaining: nil,\n161 |               bytesPerSecond: nil,\n162 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n163 |             )\n164 |             await reporter.reportProgress(progress, for: .updateTags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:80:31: error: extra arguments at positions #3, #8 in call\n 78 |         if let progressReporter=reporter {\n 79 |           await progressReporter.reportProgress(\n 80 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n 81 |               phase: .processing,\n 82 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:134:31: error: extra arguments at positions #3, #8 in call\n132 |         if let progressReporter=reporter {\n133 |           await progressReporter.reportProgress(\n134 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n135 |               phase: .processing,\n136 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:218:31: error: extra arguments at positions #3, #8 in call\n216 |         if let progressReporter=reporter {\n217 |           await progressReporter.reportProgress(\n218 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n219 |               phase: .processing,\n220 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:267:9: error: type of expression is ambiguous without a type annotation\n265 |     cancellationToken: BackupCancellationToken?\n266 |   ) async throws -\u003e BackupSnapshotComparisonResult {\n267 |     try await operationExecutor.execute(\n    |         `- error: type of expression is ambiguous without a type annotation\n268 |       parameters: parameters,\n269 |       progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:376:31: error: extra arguments at positions #3, #8 in call\n374 |         if let reporter {\n375 |           await reporter.reportProgress(\n376 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n377 |               phase: .processing,\n378 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:494:31: error: extra arguments at positions #3, #8 in call\n492 |         if let progressReporter=reporter {\n493 |           await progressReporter.reportProgress(\n494 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n495 |               phase: .processing,\n496 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:73:31: error: extra arguments at positions #3, #8 in call\n 71 |         if let progressReporter=reporter {\n 72 |           await progressReporter.reportProgress(\n 73 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n 74 |               phase: .processing,\n 75 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:132:31: error: extra arguments at positions #3, #8 in call\n130 |         if let reporter=progressReporter {\n131 |           await reporter.reportProgress(\n132 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n133 |               phase: .processing,\n134 |               percentComplete: progress,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:157:26: error: cannot call value of non-function type 'Bool'\n155 |         // Check for cancellation in a loop\n156 |         while !Task.isCancelled {\n157 |           if await token.isCancelled() {\n    |                          `- error: cannot call value of non-function type 'Bool'\n158 |             executionTask.cancel()\n159 |             progressTask.cancel()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:279:31: error: extra arguments at positions #3, #8 in call\n277 |         if let reporter {\n278 |           await reporter.reportProgress(\n279 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n280 |               phase: .processing,\n281 |               percentComplete: 0.3,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupErrorMapper.swift:43:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n41 | \n42 |     // Handle NSError types\n43 |     if let nsError=error as? NSError {\n   |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n44 |       switch nsError.domain {\n45 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:76:22: error: extra arguments at positions #2, #3 in call\n 74 | \n 75 |     // Log the start of the operation\n 76 |     await logger.info(\n    |                      `- error: extra arguments at positions #2, #3 in call\n 77 |       \"Starting backup operation: \\(parameters.operationType)\",\n 78 |       metadata: nil,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:77:63: error: missing argument for parameter 'context' in call\n 75 |     // Log the start of the operation\n 76 |     await logger.info(\n 77 |       \"Starting backup operation: \\(parameters.operationType)\",\n    |                                                               `- error: missing argument for parameter 'context' in call\n 78 |       metadata: nil,\n 79 |       source: logContext.getSource()\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:78:17: error: 'nil' requires a contextual type\n 76 |     await logger.info(\n 77 |       \"Starting backup operation: \\(parameters.operationType)\",\n 78 |       metadata: nil,\n    |                 `- error: 'nil' requires a contextual type\n 79 |       source: logContext.getSource()\n 80 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:108:24: error: extra arguments at positions #2, #3 in call\n106 | \n107 |       // Log the completion of the operation\n108 |       await logger.info(\n    |                        `- error: extra arguments at positions #2, #3 in call\n109 |         \"Completed backup operation: \\(parameters.operationType)\",\n110 |         metadata: nil,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:109:66: error: missing argument for parameter 'context' in call\n107 |       // Log the completion of the operation\n108 |       await logger.info(\n109 |         \"Completed backup operation: \\(parameters.operationType)\",\n    |                                                                  `- error: missing argument for parameter 'context' in call\n110 |         metadata: nil,\n111 |         source: logContext.getSource()\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:110:19: error: 'nil' requires a contextual type\n108 |       await logger.info(\n109 |         \"Completed backup operation: \\(parameters.operationType)\",\n110 |         metadata: nil,\n    |                   `- error: 'nil' requires a contextual type\n111 |         source: logContext.getSource()\n112 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:124:24: error: extra arguments at positions #2, #3 in call\n122 | \n123 |       // Log the cancellation of the operation\n124 |       await logger.info(\n    |                        `- error: extra arguments at positions #2, #3 in call\n125 |         \"Cancelled backup operation: \\(parameters.operationType)\",\n126 |         metadata: nil,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:125:66: error: missing argument for parameter 'context' in call\n123 |       // Log the cancellation of the operation\n124 |       await logger.info(\n125 |         \"Cancelled backup operation: \\(parameters.operationType)\",\n    |                                                                  `- error: missing argument for parameter 'context' in call\n126 |         metadata: nil,\n127 |         source: logContext.getSource()\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: 'info(_:context:)' declared here\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: 'info(_:context:)' declared here\n 38 | \n 39 |   /// Log a notice message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:126:19: error: 'nil' requires a contextual type\n124 |       await logger.info(\n125 |         \"Cancelled backup operation: \\(parameters.operationType)\",\n126 |         metadata: nil,\n    |                   `- error: 'nil' requires a contextual type\n127 |         source: logContext.getSource()\n128 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:145:25: error: extra arguments at positions #2, #3 in call\n143 | \n144 |       // Log the failure of the operation\n145 |       await logger.error(\n    |                         `- error: extra arguments at positions #2, #3 in call\n146 |         \"Failed backup operation: \\(parameters.operationType) - \\(error.localizedDescription)\",\n147 |         metadata: nil,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: 'error(_:context:)' declared here\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: 'error(_:context:)' declared here\n 50 | \n 51 |   /// Log a critical message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:146:95: error: missing argument for parameter 'context' in call\n144 |       // Log the failure of the operation\n145 |       await logger.error(\n146 |         \"Failed backup operation: \\(parameters.operationType) - \\(error.localizedDescription)\",\n    |                                                                                               `- error: missing argument for parameter 'context' in call\n147 |         metadata: nil,\n148 |         source: logContext.getSource()\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: 'error(_:context:)' declared here\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: 'error(_:context:)' declared here\n 50 | \n 51 |   /// Log a critical message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:147:19: error: 'nil' requires a contextual type\n145 |       await logger.error(\n146 |         \"Failed backup operation: \\(parameters.operationType) - \\(error.localizedDescription)\",\n147 |         metadata: nil,\n    |                   `- error: 'nil' requires a contextual type\n148 |         source: logContext.getSource()\n149 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:18:15: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cAny, Error\u003e]=[:]\n    |               `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 19 | \n 20 |   /// Storage for active cancellation tokens\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               |                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               `- warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationHandlerProtocol.swift:52:8: note: a function type must be marked '@Sendable' to conform to 'Sendable'\n50 |    * - Throws: Error if the operation fails or is cancelled\n51 |    */\n52 |   func withCancellationSupport\u003cT\u003e(\n   |        `- note: a function type must be marked '@Sendable' to conform to 'Sendable'\n53 |     _ operation: @escaping () async throws -\u003e T,\n54 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:37:36: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 35 |   public func registerOperation(id: String, operation: Task\u003csome Any, Error\u003e) {\n 36 |     // Store the task as Task\u003cAny, Error\u003e for type erasure\n 37 |     activeOperations[id]=operation as? Task\u003cAny, Error\u003e\n    |                                    `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 38 |   }\n 39 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:77:17: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 75 |     // Try to cancel a task-based operation\n 76 |     if let operation=activeOperations[id] {\n 77 |       operation.cancel()\n    |                 `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 78 |       activeOperations[id]=nil\n 79 |       cancelled=true\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:128:12: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n126 |     // Cancel all task-based operations\n127 |     for (_, task) in activeOperations {\n128 |       task.cancel()\n    |            `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n129 |     }\n130 |     activeOperations.removeAll()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:201:14: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n199 | \n200 |     // Transform the operation into a Task\n201 |     let task=Task\u003cT, Error\u003e {\n    |              `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n202 |       do {\n203 |         let result=try await operation()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:201:27: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n199 | \n200 |     // Transform the operation into a Task\n201 |     let task=Task\u003cT, Error\u003e {\n    |                           `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n202 |       do {\n203 |         let result=try await operation()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:213:5: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n211 | \n212 |     // Register the task for cancellation with proper generic type\n213 |     registerOperation(id: operationID, operation: task)\n    |     `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n214 | \n215 |     // If we have a cancellation token, set up a callback\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:232:23: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n230 |           guard let self else { return }\n231 | \n232 |           while !task.isCancelled {\n    |                       `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n233 |             if await isOperationActive(id: operationID) {\n234 |               if await token.isCancelled {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:248:29: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n246 | \n247 |     do {\n248 |       return try await task.value\n    |                             `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n249 |     } catch is CancellationError {\n250 |       throw CancellationError()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:203:30: warning: non-sendable result type 'T' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n201 |     let task=Task\u003cT, Error\u003e {\n202 |       do {\n203 |         let result=try await operation()\n    |                              `- warning: non-sendable result type 'T' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n204 |         operationCompleted(id: operationID)\n205 |         return result\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:248:24: warning: non-sendable type 'Task\u003cT, any Error\u003e' cannot exit actor-isolated context in call to nonisolated property 'value'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n246 | \n247 |     do {\n248 |       return try await task.value\n    |                        `- warning: non-sendable type 'Task\u003cT, any Error\u003e' cannot exit actor-isolated context in call to nonisolated property 'value'; this is an error in the Swift 6 language mode\n249 |     } catch is CancellationError {\n250 |       throw CancellationError()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:248:29: warning: non-sendable type 'T' of nonisolated property 'value' cannot be sent to actor-isolated context; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n246 | \n247 |     do {\n248 |       return try await task.value\n    |                             `- warning: non-sendable type 'T' of nonisolated property 'value' cannot be sent to actor-isolated context; this is an error in the Swift 6 language mode\n249 |     } catch is CancellationError {\n250 |       throw CancellationError()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorMapper.swift:35:21: error: type 'BackupError' has no member 'configurationError'\n 33 | \n 34 |       case let .executableNotFound(path):\n 35 |         BackupError.configurationError(\n    |                     `- error: type 'BackupError' has no member 'configurationError'\n 36 |           details: \"Restic executable not found at path: \\(path)\"\n 37 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:101:18: error: no exact matches in call to instance method 'info'\n 99 | \n100 |     // Log operation start\n101 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n102 |       \"Starting snapshot operation: \\(operationType.rawValue)\",\n103 |       metadata: metadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:110:27: error: extra arguments at positions #3, #8 in call\n108 |     if let reporter=progressReporter {\n109 |       await reporter.reportProgress(\n110 |         BackupProgressInfo(\n    |                           `- error: extra arguments at positions #3, #8 in call\n111 |           phase: .initialising,\n112 |           percentComplete: 0.0,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:140:29: error: extra arguments at positions #3, #8 in call\n138 |       if let reporter=progressReporter {\n139 |         await reporter.reportProgress(\n140 |           BackupProgressInfo(\n    |                             `- error: extra arguments at positions #3, #8 in call\n141 |             phase: .completed,\n142 |             percentComplete: 1.0,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:160:20: error: no exact matches in call to instance method 'info'\n158 |                                                           privacy: .public)\n159 | \n160 |       await logger.info(\n    |                    `- error: no exact matches in call to instance method 'info'\n161 |         \"Completed snapshot operation: \\(operationType.rawValue)\",\n162 |         metadata: completionMetadata,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:184:29: error: extra arguments at positions #3, #8 in call\n182 |       if let reporter=progressReporter {\n183 |         await reporter.reportProgress(\n184 |           BackupProgressInfo(\n    |                             `- error: extra arguments at positions #3, #8 in call\n185 |             phase: .failed,\n186 |             percentComplete: 1.0,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/ProgressReporting.swift:137:10: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n135 | \n136 |   /// Creates a new progress info\n137 |   public init(\n    |          `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n138 |     phase: Phase,\n139 |     percentComplete: Double,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:207:25: error: extra arguments at positions #2, #3 in call\n205 | \n206 |       // Log error with privacy-aware context\n207 |       await logger.error(\n    |                         `- error: extra arguments at positions #2, #3 in call\n208 |         \"Failed snapshot operation: \\(operationType.rawValue)\",\n209 |         metadata: errorContext.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: 'error(_:context:)' declared here\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: 'error(_:context:)' declared here\n 50 | \n 51 |   /// Log a critical message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:208:63: error: missing argument for parameter 'context' in call\n206 |       // Log error with privacy-aware context\n207 |       await logger.error(\n208 |         \"Failed snapshot operation: \\(operationType.rawValue)\",\n    |                                                               `- error: missing argument for parameter 'context' in call\n209 |         metadata: errorContext.toPrivacyMetadata(),\n210 |         source: source\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: 'error(_:context:)' declared here\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: 'error(_:context:)' declared here\n 50 | \n 51 |   /// Log a critical message\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:130:48: warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to instance method 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n 75 |    * - Throws: BackupOperationError if the operation fails\n 76 |    */\n 77 |   public func execute\u003cP: SnapshotOperationParameters, R\u003e(\n    |                                                       `- note: consider making generic parameter 'R' conform to the 'Sendable' protocol\n 78 |     parameters: P,\n 79 |     progressReporter: BackupProgressReporter?,\n    :\n128 | \n129 |       // Execute the operation with cancellation support\n130 |       let result=try await cancellationHandler.withCancellationSupport({\n    |                                                `- warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to instance method 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n131 |         try await operation(parameters, progressReporter, cancellationToken)\n132 |       }, cancellationToken: cancellationToken)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:39:18: error: no exact matches in call to instance method 'info'\n 37 |     let defaultMessage=\"Starting snapshot operation: \\(logContext.operation)\"\n 38 | \n 39 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n 40 |       message ?? defaultMessage,\n 41 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:59:18: error: no exact matches in call to instance method 'info'\n 57 |     let defaultMessage=\"Completed snapshot operation: \\(logContext.operation)\"\n 58 | \n 59 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n 60 |       message ?? defaultMessage,\n 61 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:81:18: error: no exact matches in call to instance method 'error'\n 79 |     let defaultMessage=\"Error during snapshot operation: \\(logContext.operation)\"\n 80 | \n 81 |     await logger.error(\n    |                  `- error: no exact matches in call to instance method 'error'\n 82 |       message ?? defaultMessage,\n 83 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 50 | \n 51 |   /// Log a critical message\n    :\n 85 |   }\n 86 | \n 87 |   public func error(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 88 |     await log(.error, message, context: context)\n 89 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:110:18: error: no exact matches in call to instance method 'error'\n108 |     )\n109 | \n110 |     await logger.error(\n    |                  `- error: no exact matches in call to instance method 'error'\n111 |       message,\n112 |       metadata: metadataCollection.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 50 | \n 51 |   /// Log a critical message\n    :\n 85 |   }\n 86 | \n 87 |   public func error(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 88 |     await log(.error, message, context: context)\n 89 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:130:18: error: no exact matches in call to instance method 'info'\n128 |     let defaultMessage=\"Operation completed successfully\"\n129 | \n130 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n131 |       message ?? defaultMessage,\n132 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:170:18: error: no exact matches in call to instance method 'info'\n168 |     }\n169 | \n170 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n171 |       \"Starting snapshot operation: \\(operation)\",\n172 |       metadata: metadataCollection.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:219:18: error: no exact matches in call to instance method 'info'\n217 |     }\n218 | \n219 |     await logger.info(\n    |                  `- error: no exact matches in call to instance method 'info'\n220 |       \"Snapshot operation completed: \\(operation)\",\n221 |       metadata: metadataCollection.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:37:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 35 |   ///   - message: The message to log\n 36 |   ///   - context: The logging context DTO containing metadata and source\n 37 |   func info(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 38 | \n 39 |   /// Log a notice message\n    :\n 72 |   }\n 73 | \n 74 |   public func info(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 75 |     await log(.info, message, context: context)\n 76 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:269:18: error: no exact matches in call to instance method 'error'\n267 |     }\n268 | \n269 |     await logger.error(\n    |                  `- error: no exact matches in call to instance method 'error'\n270 |       \"Error during snapshot operation: \\(operation)\",\n271 |       metadata: metadataCollection.toPrivacyMetadata(),\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:49:8: note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 47 |   ///   - message: The message to log\n 48 |   ///   - context: The logging context DTO containing metadata and source\n 49 |   func error(_ message: String, context: LogContextDTO) async\n    |        `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 50 | \n 51 |   /// Log a critical message\n    :\n 85 |   }\n 86 | \n 87 |   public func error(_ message: String, context: LogContextDTO) async {\n    |               `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 88 |     await log(.error, message, context: context)\n 89 |   }\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:424:40: error: cannot find type 'SnapshotFileType' in scope\n422 | \n423 |   // Convert SnapshotFileType to BackupFileType\n424 |   private func convertFileType(_ type: SnapshotFileType?) -\u003e BackupFileType {\n    |                                        `- error: cannot find type 'SnapshotFileType' in scope\n425 |     guard let type else { return .file }\n426 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:406:75: warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n404 |   // Helper function to calculate total size of changes\n405 |   private func calculateTotalChangeSize(_ difference: BackupSnapshotDifference) -\u003e UInt64 {\n406 |     let addedSize=(difference.addedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n    |                                                                           `- warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n407 |     let modifiedSize=(difference.modifiedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n408 |     return addedSize + modifiedSize\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:407:81: warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n405 |   private func calculateTotalChangeSize(_ difference: BackupSnapshotDifference) -\u003e UInt64 {\n406 |     let addedSize=(difference.addedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n407 |     let modifiedSize=(difference.modifiedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n    |                                                                                 `- warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n408 |     return addedSize + modifiedSize\n409 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:417:28: error: value of type 'SnapshotFile' has no member 'modificationDate'\n415 |         path: file.path,\n416 |         size: file.size ?? 0,\n417 |         lastModified: file.modificationDate ?? Date(),\n    |                            `- error: value of type 'SnapshotFile' has no member 'modificationDate'\n418 |         type: convertFileType(file.type)\n419 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:418:36: error: value of type 'SnapshotFile' has no member 'type'\n416 |         size: file.size ?? 0,\n417 |         lastModified: file.modificationDate ?? Date(),\n418 |         type: convertFileType(file.type)\n    |                                    `- error: value of type 'SnapshotFile' has no member 'type'\n419 |       )\n420 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:417:45: error: extra argument 'lastModified' in call\n415 |         path: file.path,\n416 |         size: file.size ?? 0,\n417 |         lastModified: file.modificationDate ?? Date(),\n    |                                             `- error: extra argument 'lastModified' in call\n418 |         type: convertFileType(file.type)\n419 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:416:29: error: missing argument for parameter 'modifiedTime' in call\n414 |       BackupFile(\n415 |         path: file.path,\n416 |         size: file.size ?? 0,\n    |                             `- error: missing argument for parameter 'modifiedTime' in call\n417 |         lastModified: file.modificationDate ?? Date(),\n418 |         type: convertFileType(file.type)\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupFile.swift:44:10: note: 'init(path:size:modifiedTime:type:permissions:ownerName:groupName:)' declared here\n42 |    *   - groupName: Optional file group name\n43 |    */\n44 |   public init(\n   |          `- note: 'init(path:size:modifiedTime:type:permissions:ownerName:groupName:)' declared here\n45 |     path: String,\n46 |     size: UInt64,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:507:11: warning: initialization of immutable value 'unchangedFiles' was never used; consider replacing with assignment to '_' or removing it\n505 | \n506 |       // Process unchanged files\n507 |       let unchangedFiles=diffResult.unchanged?.map { file in\n    |           `- warning: initialization of immutable value 'unchangedFiles' was never used; consider replacing with assignment to '_' or removing it\n508 |         SnapshotFileEntry(\n509 |           path: file.path ?? \"\",\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:81:11: warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n 79 |     if let loggableError=error as? LoggableErrorProtocol {\n 80 |       // Handle loggable errors with enriched metadata\n 81 |       let errorMetadata=loggableError.createMetadataCollection()\n    |           `- warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n 82 |       let formattedMessage=\"[\\(domainName)] \\(loggableError.getLogMessage())\"\n 83 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:83:11: warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n 81 |       let errorMetadata=loggableError.createMetadataCollection()\n 82 |       let formattedMessage=\"[\\(domainName)] \\(loggableError.getLogMessage())\"\n 83 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n    |           `- warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n 84 | \n 85 |       // Create a new context with error information\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:124:11: warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n122 |     if let loggableError=error as? LoggableErrorProtocol {\n123 |       // Handle loggable errors with enriched metadata\n124 |       let errorMetadata=loggableError.createMetadataCollection()\n    |           `- warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n125 |       let formattedMessage=message ?? \"[\\(domainName)] \\(loggableError.getLogMessage())\"\n126 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:126:11: warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n124 |       let errorMetadata=loggableError.createMetadataCollection()\n125 |       let formattedMessage=message ?? \"[\\(domainName)] \\(loggableError.getLogMessage())\"\n126 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n    |           `- warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n127 | \n128 |       // Create a new context with error information\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:332:47: error: cannot find type 'BackupCreationParameters' in scope\n330 | extension BackupCreateParameters {\n331 |   /// Convert to BackupInterfaces.BackupCreationParameters\n332 |   public func toBackupCreationParameters() -\u003e BackupCreationParameters {\n    |                                               `- error: cannot find type 'BackupCreationParameters' in scope\n333 |     BackupCreationParameters(\n334 |       sources: sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:342:39: error: cannot find type 'BackupCreationParameters' in scope\n340 | \n341 |   /// Create from BackupInterfaces.BackupCreationParameters\n342 |   public static func from(parameters: BackupCreationParameters) -\u003e BackupCreateParameters {\n    |                                       `- error: cannot find type 'BackupCreationParameters' in scope\n343 |     BackupCreateParameters(\n344 |       sources: parameters.sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:354:63: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n352 | extension BackupRestoreParameters {\n353 |   /// Convert to BackupInterfaces.BackupRestoreParameters\n354 |   public func toBackupRestoreParameters() -\u003e BackupInterfaces.BackupRestoreParameters {\n    |                                                               `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n355 |     BackupInterfaces.BackupRestoreParameters(\n356 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:368:8: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n366 |   public static func from(\n367 |     parameters: BackupInterfaces\n368 |       .BackupRestoreParameters\n    |        `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n369 |   ) -\u003e BackupRestoreParameters {\n370 |     BackupRestoreParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:382:60: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n380 | extension BackupListParameters {\n381 |   /// Convert to BackupInterfaces.BackupListParameters\n382 |   public func toBackupListParameters() -\u003e BackupInterfaces.BackupListParameters {\n    |                                                            `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n383 |     BackupInterfaces.BackupListParameters(\n384 |       tags: tags,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:396:8: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n394 |   public static func from(\n395 |     parameters: BackupInterfaces\n396 |       .BackupListParameters\n    |        `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n397 |   ) -\u003e BackupListParameters {\n398 |     BackupListParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:413:35: error: extra arguments at positions #2, #3, #4 in call\n411 |   /// Convert to BackupInterfaces.BackupOptions\n412 |   public func toBackupOptions() -\u003e BackupInterfaces.BackupOptions {\n413 |     BackupInterfaces.BackupOptions(\n    |                                   `- error: extra arguments at positions #2, #3, #4 in call\n414 |       compressionLevel: 0,\n415 |       deduplicate: false,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:27:10: note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 25 |   ///   - useParallelisation: Whether to use parallel operations\n 26 |   ///   - priority: Priority of the backup operation\n 27 |   public init(\n    |          `- note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 28 |     compressionLevel: Int?=nil,\n 29 |     maxSize: UInt64?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:423:18: error: extra arguments at positions #2, #3, #4 in call\n421 |   /// Create from BackupInterfaces.BackupOptions\n422 |   public static func from(options: BackupInterfaces.BackupOptions) -\u003e BackupOptions {\n423 |     BackupOptions(\n    |                  `- error: extra arguments at positions #2, #3, #4 in call\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:27:10: note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 25 |   ///   - useParallelisation: Whether to use parallel operations\n 26 |   ///   - priority: Priority of the backup operation\n 27 |   public init(\n    |          `- note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n 28 |     compressionLevel: Int?=nil,\n 29 |     maxSize: UInt64?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:425:28: error: value of type 'BackupOptions' has no member 'deduplicate'\n423 |     BackupOptions(\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n    |                            `- error: value of type 'BackupOptions' has no member 'deduplicate'\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n427 |       metadata: options.metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:426:36: error: value of type 'BackupOptions' has no member 'encryptionAlgorithm'\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n    |                                    `- error: value of type 'BackupOptions' has no member 'encryptionAlgorithm'\n427 |       metadata: options.metadata\n428 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:427:25: error: value of type 'BackupOptions' has no member 'metadata'\n425 |       deduplicate: options.deduplicate,\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n427 |       metadata: options.metadata\n    |                         `- error: value of type 'BackupOptions' has no member 'metadata'\n428 |     )\n429 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:435:36: error: extra arguments at positions #2, #3, #4, #5 in call\n433 |   /// Convert to BackupInterfaces.RestoreOptions\n434 |   public func toRestoreOptions() -\u003e BackupInterfaces.RestoreOptions {\n435 |     BackupInterfaces.RestoreOptions(\n    |                                    `- error: extra arguments at positions #2, #3, #4, #5 in call\n436 |       preservePermissions: false,\n437 |       preserveOwnership: false,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:66:10: note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 64 |   ///   - useParallelisation: Whether to use parallel operations\n 65 |   ///   - priority: Priority of the restore operation\n 66 |   public init(\n    |          `- note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 67 |     overwriteExisting: Bool=false,\n 68 |     restorePermissions: Bool=true,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:446:19: error: extra arguments at positions #2, #3, #4, #5 in call\n444 |   /// Create from BackupInterfaces.RestoreOptions\n445 |   public static func from(options: BackupInterfaces.RestoreOptions) -\u003e RestoreOptions {\n446 |     RestoreOptions(\n    |                   `- error: extra arguments at positions #2, #3, #4, #5 in call\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/BackupInterfaces/Types/BackupTypes.swift:66:10: note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 64 |   ///   - useParallelisation: Whether to use parallel operations\n 65 |   ///   - priority: Priority of the restore operation\n 66 |   public init(\n    |          `- note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n 67 |     overwriteExisting: Bool=false,\n 68 |     restorePermissions: Bool=true,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:447:36: error: value of type 'RestoreOptions' has no member 'preservePermissions'\n445 |   public static func from(options: BackupInterfaces.RestoreOptions) -\u003e RestoreOptions {\n446 |     RestoreOptions(\n447 |       preservePermissions: options.preservePermissions,\n    |                                    `- error: value of type 'RestoreOptions' has no member 'preservePermissions'\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:448:34: error: value of type 'RestoreOptions' has no member 'preserveOwnership'\n446 |     RestoreOptions(\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n    |                                  `- error: value of type 'RestoreOptions' has no member 'preserveOwnership'\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:449:30: error: value of type 'RestoreOptions' has no member 'preserveTimes'\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n    |                              `- error: value of type 'RestoreOptions' has no member 'preserveTimes'\n450 |       skipExisting: options.skipExisting,\n451 |       metadata: options.metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:450:29: error: value of type 'RestoreOptions' has no member 'skipExisting'\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n    |                             `- error: value of type 'RestoreOptions' has no member 'skipExisting'\n451 |       metadata: options.metadata\n452 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:451:25: error: value of type 'RestoreOptions' has no member 'metadata'\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n451 |       metadata: options.metadata\n    |                         `- error: value of type 'RestoreOptions' has no member 'metadata'\n452 |     )\n453 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:217:41: error: cannot find type 'VerificationResult' in scope\n215 | extension BackupVerificationResultDTO {\n216 |   /// Convert this DTO to a BackupInterfaces.VerificationResult\n217 |   public func toVerificationResult() -\u003e VerificationResult {\n    |                                         `- error: cannot find type 'VerificationResult' in scope\n218 |     VerificationResult(\n219 |       verified: verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:231:47: error: cannot find type 'VerificationResult' in scope\n229 | \n230 |   /// Create a BackupVerificationResultDTO from a BackupInterfaces.VerificationResult\n231 |   public static func from(verificationResult: VerificationResult) -\u003e BackupVerificationResultDTO {\n    |                                               `- error: cannot find type 'VerificationResult' in scope\n232 |     BackupVerificationResultDTO(\n233 |       verified: verificationResult.verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:245:39: error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n243 | }\n244 | \n245 | extension BackupVerificationResultDTO.VerificationIssue {\n    |                                       `- error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n246 |   /// Convert this DTO to a BackupInterfaces.VerificationIssue\n247 |   public func toVerificationIssue() -\u003e VerificationResult.VerificationIssue {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:271:39: error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n269 | }\n270 | \n271 | extension BackupVerificationResultDTO.RepairSummary {\n    |                                       `- error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n272 |   /// Convert this DTO to a BackupInterfaces.RepairSummary\n273 |   public func toRepairSummary() -\u003e VerificationResult.RepairSummary {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:294:39: error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n292 | }\n293 | \n294 | extension BackupVerificationResultDTO.RepairAction {\n    |                                       `- error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n295 |   /// Convert this DTO to a BackupInterfaces.RepairAction\n296 |   public func toRepairAction() -\u003e VerificationResult.RepairAction {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:237:65: error: type 'VerificationIssue' has no member 'from'\n235 |       bytesVerified: verificationResult.bytesVerified,\n236 |       errorCount: verificationResult.errorCount,\n237 |       issues: verificationResult.issues.map { VerificationIssue.from(issue: $0) },\n    |                                                                 `- error: type 'VerificationIssue' has no member 'from'\n238 |       repairSummary: verificationResult.repairSummary.map { RepairSummary.from(summary: $0) },\n239 |       snapshotID: verificationResult.snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:238:75: error: type 'RepairSummary' has no member 'from'\n236 |       errorCount: verificationResult.errorCount,\n237 |       issues: verificationResult.issues.map { VerificationIssue.from(issue: $0) },\n238 |       repairSummary: verificationResult.repairSummary.map { RepairSummary.from(summary: $0) },\n    |                                                                           `- error: type 'RepairSummary' has no member 'from'\n239 |       snapshotID: verificationResult.snapshotID,\n240 |       verificationTime: verificationResult.verificationTime\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:27:15: warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n25 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken {\n26 |   private let token: BackupOperationCancellationToken\n27 |   private var _isCancelled: Bool=false\n   |               `- warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n28 | \n29 |   init(token: BackupOperationCancellationToken) {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:92:16: error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n 90 |       .with(\n 91 |         key: \"repositoryID\",\n 92 |         value: repositoryID,\n    |                |- error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n    |                |- note: coalesce using '??' to provide a default when the optional value contains 'nil'\n    |                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n 93 |         privacy: LoggingTypes.PrivacyClassification.public\n 94 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:97:16: error: value of optional type '[String]?' must be unwrapped to refer to member 'joined' of wrapped base type '[String]'\n 95 |       .with(\n 96 |         key: \"tags\",\n 97 |         value: tags.joined(separator: \", \"),\n    |                |- error: value of optional type '[String]?' must be unwrapped to refer to member 'joined' of wrapped base type '[String]'\n    |                |- note: chain the optional using '?' to access member 'joined' only for non-'nil' base values\n    |                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n 98 |         privacy: LoggingTypes.PrivacyClassification.public\n 99 |       )\nTarget //packages/UmbraImplementations/Sources/BackupServices:BackupServices failed to build\nINFO: Elapsed time: 1.508s, Critical Path: 1.42s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices",
    "success": true,
    "start_time": "2025-04-08T00:57:26.041661+01:00",
    "end_time": "2025-04-08T00:57:27.125688+01:00",
    "duration": "1.084021542s",
    "output": "INFO: Invocation ID: 51ef33bd-1c76-4d4d-bdfb-a6b22d8df403\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices (3 packages loaded, 8 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/BookmarkServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/BookmarkServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/BookmarkServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/libBookmarkServices.a\nINFO: Elapsed time: 0.089s, Critical Path: 0.00s\nINFO: 1 process: 7 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger",
    "success": true,
    "start_time": "2025-04-08T00:57:27.125707+01:00",
    "end_time": "2025-04-08T00:57:27.973718+01:00",
    "duration": "848.006625ms",
    "output": "INFO: Invocation ID: 37da5c93-c50b-4cff-9a2d-6432de475bc7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/BookmarkLogger.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/BookmarkLogger.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/BookmarkLogger.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/libBookmarkLogger.a\nINFO: Elapsed time: 0.089s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel",
    "success": true,
    "start_time": "2025-04-08T00:57:27.973753+01:00",
    "end_time": "2025-04-08T00:57:28.738443+01:00",
    "duration": "764.6865ms",
    "output": "INFO: Invocation ID: f5244ce4-58b2-44d2-bad2-18d23c6df5cd\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/BookmarkModel.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/BookmarkModel.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/BookmarkModel.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/libBookmarkModel.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices",
    "success": true,
    "start_time": "2025-04-08T00:57:28.738451+01:00",
    "end_time": "2025-04-08T00:57:29.566699+01:00",
    "duration": "828.243167ms",
    "output": "INFO: Invocation ID: d0bd5473-4cc8-4ef2-96f6-a2010b1676ad\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices (2 packages loaded, 12 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/libConfigServices.a\nINFO: Elapsed time: 0.093s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CoreServices:CoreServices",
    "success": false,
    "start_time": "2025-04-08T00:57:29.566721+01:00",
    "end_time": "2025-04-08T00:57:31.252459+01:00",
    "duration": "1.685729166s",
    "output": "INFO: Invocation ID: ea216719-20cf-4391-b69f-daead745a1ec\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CoreServices:CoreServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CoreServices:CoreServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CoreServices:CoreServices (3 packages loaded, 41 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\nTarget //packages/UmbraImplementations/Sources/CoreServices:CoreServices failed to build\nINFO: Elapsed time: 0.992s, Critical Path: 0.90s\nINFO: 2 processes: 4 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices",
    "success": false,
    "start_time": "2025-04-08T00:57:31.25247+01:00",
    "end_time": "2025-04-08T00:57:33.00689+01:00",
    "duration": "1.7544115s",
    "output": "INFO: Invocation ID: 34ee5994-d2c7-4d4a-8f20-9808be78e7da\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\nTarget //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed to build\nINFO: Elapsed time: 0.975s, Critical Path: 0.89s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger",
    "success": true,
    "start_time": "2025-04-08T00:57:33.006901+01:00",
    "end_time": "2025-04-08T00:57:33.803402+01:00",
    "duration": "796.497959ms",
    "output": "INFO: Invocation ID: 5cb4d34e-6430-4e15-8a7b-8ff0094101ed\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/CryptoLogger.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/CryptoLogger.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/CryptoLogger.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/libCryptoLogger.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices",
    "success": true,
    "start_time": "2025-04-08T00:57:33.803418+01:00",
    "end_time": "2025-04-08T00:57:34.604946+01:00",
    "duration": "801.524292ms",
    "output": "INFO: Invocation ID: b286b95f-3c86-4293-8ab9-5ce7f45682f7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/libCryptoXPCServices.a\nINFO: Elapsed time: 0.082s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices",
    "success": true,
    "start_time": "2025-04-08T00:57:34.604956+01:00",
    "end_time": "2025-04-08T00:57:35.390246+01:00",
    "duration": "785.286875ms",
    "output": "INFO: Invocation ID: 45f51ad6-73b1-4970-8cc3-c1f7c8c5bc74\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices (2 packages loaded, 5 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/DateTimeServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/DateTimeServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/DateTimeServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/libDateTimeServices.a\nINFO: Elapsed time: 0.085s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl",
    "success": true,
    "start_time": "2025-04-08T00:57:35.390253+01:00",
    "end_time": "2025-04-08T00:57:36.231709+01:00",
    "duration": "841.452084ms",
    "output": "INFO: Invocation ID: a8141cff-0604-47f0-89e1-c5fa3228fadf\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/ErrorDomainsImpl.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/ErrorDomainsImpl.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/ErrorDomainsImpl.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/libErrorDomainsImpl.a\nINFO: Elapsed time: 0.076s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl",
    "success": true,
    "start_time": "2025-04-08T00:57:36.231715+01:00",
    "end_time": "2025-04-08T00:57:37.009942+01:00",
    "duration": "778.22325ms",
    "output": "INFO: Invocation ID: 31c91793-84a7-472c-98f3-72e34dc0c0b6\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/ErrorHandlingImpl.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/ErrorHandlingImpl.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/ErrorHandlingImpl.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/libErrorHandlingImpl.a\nINFO: Elapsed time: 0.088s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices",
    "success": true,
    "start_time": "2025-04-08T00:57:37.009948+01:00",
    "end_time": "2025-04-08T00:57:37.800566+01:00",
    "duration": "790.614459ms",
    "output": "INFO: Invocation ID: 236d2515-bf7a-4871-bc8c-5ba06176f17d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices (2 packages loaded, 8 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/ErrorLoggingServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/ErrorLoggingServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/ErrorLoggingServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/libErrorLoggingServices.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices",
    "success": true,
    "start_time": "2025-04-08T00:57:37.800572+01:00",
    "end_time": "2025-04-08T00:57:38.597757+01:00",
    "duration": "797.180459ms",
    "output": "INFO: Invocation ID: e4f598cb-5be8-4a7f-b633-aa0fa8f1e6c7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices (3 packages loaded, 43 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/FileSystemServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/FileSystemServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/FileSystemServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/libFileSystemServices.a\nINFO: Elapsed time: 0.092s, Critical Path: 0.00s\nINFO: 1 process: 7 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices",
    "success": true,
    "start_time": "2025-04-08T00:57:38.597764+01:00",
    "end_time": "2025-04-08T00:57:39.394244+01:00",
    "duration": "796.476334ms",
    "output": "INFO: Invocation ID: 79066866-8ff7-4617-9797-a97e53de4d44\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/KeychainServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/KeychainServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/KeychainServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/libKeychainServices.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor",
    "success": true,
    "start_time": "2025-04-08T00:57:39.394269+01:00",
    "end_time": "2025-04-08T00:57:40.168456+01:00",
    "duration": "774.183334ms",
    "output": "INFO: Invocation ID: 353bccc8-c750-4ec1-9d68-4c0b0e08d345\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/KeychainSecurityActor.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/KeychainSecurityActor.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/KeychainSecurityActor.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/libKeychainSecurityActor.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor",
    "success": true,
    "start_time": "2025-04-08T00:57:40.168463+01:00",
    "end_time": "2025-04-08T00:57:40.928975+01:00",
    "duration": "760.50875ms",
    "output": "INFO: Invocation ID: 87508cda-a107-498b-81c1-a0b54fe811ef\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/KeychainSecurityActor.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/KeychainSecurityActor.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/KeychainSecurityActor.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/libKeychainSecurityActor.a\nINFO: Elapsed time: 0.082s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks",
    "success": true,
    "start_time": "2025-04-08T00:57:40.928997+01:00",
    "end_time": "2025-04-08T00:57:41.694183+01:00",
    "duration": "765.182042ms",
    "output": "INFO: Invocation ID: 6983a95a-656a-4503-9613-a264b77133fc\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/Fallbacks.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/Fallbacks.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/Fallbacks.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/libFallbacks.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger",
    "success": true,
    "start_time": "2025-04-08T00:57:41.694193+01:00",
    "end_time": "2025-04-08T00:57:42.527711+01:00",
    "duration": "833.513ms",
    "output": "INFO: Invocation ID: 76b5cd7d-fc5d-4dae-9b73-35866287cb4f\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/KeychainLogger.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/KeychainLogger.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/KeychainLogger.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/libKeychainLogger.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters",
    "success": true,
    "start_time": "2025-04-08T00:57:42.52772+01:00",
    "end_time": "2025-04-08T00:57:43.476506+01:00",
    "duration": "948.781208ms",
    "output": "INFO: Invocation ID: 91e3d33d-595c-47fb-b51c-22ac7167a99c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/libLoggingAdapters.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices",
    "success": true,
    "start_time": "2025-04-08T00:57:43.476516+01:00",
    "end_time": "2025-04-08T00:57:44.399159+01:00",
    "duration": "922.63825ms",
    "output": "INFO: Invocation ID: 6b2363e5-80c5-4ea7-a414-ad593fd0179d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/LoggingServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/LoggingServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/LoggingServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/libLoggingServices.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices",
    "success": true,
    "start_time": "2025-04-08T00:57:44.399185+01:00",
    "end_time": "2025-04-08T00:57:45.15839+01:00",
    "duration": "759.201458ms",
    "output": "INFO: Invocation ID: 8e8b184d-1537-4094-940b-1bdc61e73e41\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/LoggingWrapperServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/LoggingWrapperServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/LoggingWrapperServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/libLoggingWrapperServices.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices",
    "success": true,
    "start_time": "2025-04-08T00:57:45.158404+01:00",
    "end_time": "2025-04-08T00:57:45.929665+01:00",
    "duration": "771.256958ms",
    "output": "INFO: Invocation ID: be4e5b30-bfd7-42ff-9089-e9d037143c22\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/NetworkServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/NetworkServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/NetworkServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/libNetworkServices.a\nINFO: Elapsed time: 0.082s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices",
    "success": true,
    "start_time": "2025-04-08T00:57:45.929676+01:00",
    "end_time": "2025-04-08T00:57:46.681205+01:00",
    "duration": "751.525292ms",
    "output": "INFO: Invocation ID: a7bf2516-bc24-482d-a992-e78b3a1d6c3d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices (1 packages loaded, 7 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/RepositoryServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/RepositoryServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/RepositoryServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/libRepositoryServices.a\nINFO: Elapsed time: 0.084s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ResticServices:ResticServices",
    "success": true,
    "start_time": "2025-04-08T00:57:46.681215+01:00",
    "end_time": "2025-04-08T00:57:47.495615+01:00",
    "duration": "814.396084ms",
    "output": "INFO: Invocation ID: 65e999b9-4ccb-4806-a903-a196774cf25a\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ResticServices:ResticServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ResticServices:ResticServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ResticServices:ResticServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ResticServices:ResticServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/libResticServices.a\nINFO: Elapsed time: 0.085s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore",
    "success": true,
    "start_time": "2025-04-08T00:57:47.495635+01:00",
    "end_time": "2025-04-08T00:57:48.279299+01:00",
    "duration": "783.660125ms",
    "output": "INFO: Invocation ID: 6cfdc50f-b01b-4d07-8b8a-9e1016eab2ee\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/SecurityCore.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/SecurityCore.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/SecurityCore.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/libSecurityCore.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices",
    "success": false,
    "start_time": "2025-04-08T00:57:48.279304+01:00",
    "end_time": "2025-04-08T00:57:49.97552+01:00",
    "duration": "1.696206791s",
    "output": "INFO: Invocation ID: 6d0aa780-b54f-4df2-a118-1c978f3479de\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices (7 packages loaded, 55 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\nTarget //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices failed to build\nINFO: Elapsed time: 1.008s, Critical Path: 0.90s\nINFO: 2 processes: 10 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations",
    "success": false,
    "start_time": "2025-04-08T00:57:49.97553+01:00",
    "end_time": "2025-04-08T00:57:51.683371+01:00",
    "duration": "1.707832583s",
    "output": "INFO: Invocation ID: 11a1d00c-e413-489a-9046-86d8f574b637\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\nTarget //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations failed to build\nINFO: Elapsed time: 0.982s, Critical Path: 0.90s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories",
    "success": false,
    "start_time": "2025-04-08T00:57:51.683378+01:00",
    "end_time": "2025-04-08T00:57:53.440493+01:00",
    "duration": "1.757106583s",
    "output": "INFO: Invocation ID: 5a99c1e8-7d99-4e26-aff1-57d4d3e6bb25\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\nTarget //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories failed to build\nINFO: Elapsed time: 1.031s, Critical Path: 0.95s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation",
    "success": false,
    "start_time": "2025-04-08T00:57:53.4405+01:00",
    "end_time": "2025-04-08T00:57:55.14386+01:00",
    "duration": "1.703351292s",
    "output": "INFO: Invocation ID: 36700734-53f6-4e25-b898-143cfb03dad0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:11:8: error: no such module 'SecurityProviderRegistryInterfaces'\n  9 | import LoggingServices\n 10 | import SecurityInterfaces\n 11 | import SecurityProviderRegistryInterfaces\n    |        `- error: no such module 'SecurityProviderRegistryInterfaces'\n 12 | import SecurityProviders\n 13 | import SecureStorageImplementations\nTarget //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation failed to build\nINFO: Elapsed time: 0.983s, Critical Path: 0.89s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement",
    "success": true,
    "start_time": "2025-04-08T00:57:55.143866+01:00",
    "end_time": "2025-04-08T00:57:55.926226+01:00",
    "duration": "782.356542ms",
    "output": "INFO: Invocation ID: 9fce332f-fac2-4f3e-820e-3f0f77ddcadd\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/SecurityKeyManagement.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/SecurityKeyManagement.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/SecurityKeyManagement.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/libSecurityKeyManagement.a\nINFO: Elapsed time: 0.076s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor",
    "success": true,
    "start_time": "2025-04-08T00:57:55.926235+01:00",
    "end_time": "2025-04-08T00:57:56.762049+01:00",
    "duration": "835.809042ms",
    "output": "INFO: Invocation ID: 06127a32-b0bf-4f33-b28f-f182c16fc65b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor (2 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/KeyManagementActor.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/KeyManagementActor.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/KeyManagementActor.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/libKeyManagementActor.a\nINFO: Elapsed time: 0.096s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes",
    "success": true,
    "start_time": "2025-04-08T00:57:56.762059+01:00",
    "end_time": "2025-04-08T00:57:57.529203+01:00",
    "duration": "767.140458ms",
    "output": "INFO: Invocation ID: 6a066774-c846-430e-9f51-9141f980dff9\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/KeyManagementActorTypes.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/KeyManagementActorTypes.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/KeyManagementActorTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/libKeyManagementActorTypes.a\nINFO: Elapsed time: 0.071s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage",
    "success": true,
    "start_time": "2025-04-08T00:57:57.52921+01:00",
    "end_time": "2025-04-08T00:57:58.345672+01:00",
    "duration": "816.457833ms",
    "output": "INFO: Invocation ID: 3dcc2578-1432-41b0-bed2-ffe47ab7dc73\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/KeyStorage.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/KeyStorage.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/KeyStorage.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/libKeyStorage.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes",
    "success": true,
    "start_time": "2025-04-08T00:57:58.345685+01:00",
    "end_time": "2025-04-08T00:57:59.10447+01:00",
    "duration": "758.782125ms",
    "output": "INFO: Invocation ID: 80785e62-0215-43df-a347-0f303c5ee153\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/SecurityKeyTypes.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/SecurityKeyTypes.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/SecurityKeyTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/libSecurityKeyTypes.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders",
    "success": true,
    "start_time": "2025-04-08T00:57:59.104479+01:00",
    "end_time": "2025-04-08T00:57:59.877558+01:00",
    "duration": "773.075125ms",
    "output": "INFO: Invocation ID: 1af792d1-7572-43ed-b78f-4c69e1609704\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/SecurityProviders.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/SecurityProviders.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/SecurityProviders.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/libSecurityProviders.a\nINFO: Elapsed time: 0.088s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils",
    "success": true,
    "start_time": "2025-04-08T00:57:59.877566+01:00",
    "end_time": "2025-04-08T00:58:00.636138+01:00",
    "duration": "758.56825ms",
    "output": "INFO: Invocation ID: bf535573-f3c3-41cb-a5c5-e4064c1295c0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/libSecurityUtils.a\nINFO: Elapsed time: 0.084s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/XPCServices:XPCServices",
    "success": true,
    "start_time": "2025-04-08T00:58:00.636144+01:00",
    "end_time": "2025-04-08T00:58:01.449925+01:00",
    "duration": "813.777333ms",
    "output": "INFO: Invocation ID: 4901f4d2-2e78-48f1-8a23-80352a5ae71d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/XPCServices:XPCServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/XPCServices:XPCServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/XPCServices:XPCServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/XPCServices:XPCServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/XPCServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/XPCServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/XPCServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/libXPCServices.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:01.44993+01:00",
    "end_time": "2025-04-08T00:58:02.214104+01:00",
    "duration": "764.169708ms",
    "output": "INFO: Invocation ID: 063dba6e-ef58-48e3-b465-0c186eb77c86\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/APIInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/APIInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/APIInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/libAPIInterfaces.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:02.214111+01:00",
    "end_time": "2025-04-08T00:58:03.006524+01:00",
    "duration": "792.4095ms",
    "output": "INFO: Invocation ID: 50b22563-e5af-424f-a388-17ee6c52a139\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/BackupInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/BackupInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/BackupInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/libBackupInterfaces.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:03.006536+01:00",
    "end_time": "2025-04-08T00:58:03.874292+01:00",
    "duration": "867.75125ms",
    "output": "INFO: Invocation ID: d2fb7c94-6b3f-4213-87a6-b10f4edc4f36\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/CoreInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/CoreInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/CoreInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/libCoreInterfaces.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:03.874318+01:00",
    "end_time": "2025-04-08T00:58:04.640455+01:00",
    "duration": "766.133125ms",
    "output": "INFO: Invocation ID: b19bea1d-43b8-45cb-9dfe-9cc030504ba7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/CryptoInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/CryptoInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/CryptoInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/libCryptoInterfaces.a\nINFO: Elapsed time: 0.084s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:04.640462+01:00",
    "end_time": "2025-04-08T00:58:05.386012+01:00",
    "duration": "745.546541ms",
    "output": "INFO: Invocation ID: abca60b6-3ed4-4e6a-8c87-2f336658861c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/DateTimeInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/DateTimeInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/DateTimeInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/libDateTimeInterfaces.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:05.386021+01:00",
    "end_time": "2025-04-08T00:58:06.167271+01:00",
    "duration": "781.245833ms",
    "output": "INFO: Invocation ID: 04994339-ad14-46c0-a349-7ee11d72e8e6\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/ErrorHandlingInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/ErrorHandlingInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/ErrorHandlingInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/libErrorHandlingInterfaces.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:06.167303+01:00",
    "end_time": "2025-04-08T00:58:06.93543+01:00",
    "duration": "768.123375ms",
    "output": "INFO: Invocation ID: 390f12e4-0ae9-407f-ba76-927f7ff58828\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/ErrorLoggingInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/ErrorLoggingInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/ErrorLoggingInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/libErrorLoggingInterfaces.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:06.935439+01:00",
    "end_time": "2025-04-08T00:58:07.735525+01:00",
    "duration": "800.081834ms",
    "output": "INFO: Invocation ID: 8e6cf917-6956-4b7d-9313-35e92287291b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/libFileSystemInterfaces.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:07.735539+01:00",
    "end_time": "2025-04-08T00:58:08.507894+01:00",
    "duration": "772.350792ms",
    "output": "INFO: Invocation ID: 4066b9e7-2c9d-46a1-ad51-5193cf67d9f8\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/KeychainInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/KeychainInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/KeychainInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/libKeychainInterfaces.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:08.507901+01:00",
    "end_time": "2025-04-08T00:58:09.299597+01:00",
    "duration": "791.692166ms",
    "output": "INFO: Invocation ID: 47068161-3ec6-4453-a6a1-0348af0fbe3c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/libLoggingInterfaces.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:09.299605+01:00",
    "end_time": "2025-04-08T00:58:10.092917+01:00",
    "duration": "793.308333ms",
    "output": "INFO: Invocation ID: 1451fac2-a2d8-42b8-9601-993f37d1dfc7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/LoggingWrapperInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/LoggingWrapperInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/LoggingWrapperInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/libLoggingWrapperInterfaces.a\nINFO: Elapsed time: 0.066s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:10.092925+01:00",
    "end_time": "2025-04-08T00:58:10.861325+01:00",
    "duration": "768.396125ms",
    "output": "INFO: Invocation ID: 9ea6de5a-4a11-4d9f-af8d-2d3ed106afc5\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/NetworkInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/NetworkInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/NetworkInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/libNetworkInterfaces.a\nINFO: Elapsed time: 0.076s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:10.86136+01:00",
    "end_time": "2025-04-08T00:58:11.611507+01:00",
    "duration": "750.142959ms",
    "output": "INFO: Invocation ID: d6713216-505b-4992-a7cf-01a08669590d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/RepositoryInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/RepositoryInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/RepositoryInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/libRepositoryInterfaces.a\nINFO: Elapsed time: 0.073s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:11.611515+01:00",
    "end_time": "2025-04-08T00:58:12.376298+01:00",
    "duration": "764.779958ms",
    "output": "INFO: Invocation ID: ed640485-7d07-4cb2-abc8-777907283b2e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/libResticInterfaces.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:12.376312+01:00",
    "end_time": "2025-04-08T00:58:13.143838+01:00",
    "duration": "767.521625ms",
    "output": "INFO: Invocation ID: 426deef1-3985-4535-95d4-4fa62647e2a3\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityCoreInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityCoreInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityCoreInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/libSecurityCoreInterfaces.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:58:13.143845+01:00",
    "end_time": "2025-04-08T00:58:13.881848+01:00",
    "duration": "737.999167ms",
    "output": "INFO: Invocation ID: 11ab7928-d3ae-4fe4-8961-cb394fa1b032\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/SecurityInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/SecurityInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/SecurityInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/libSecurityInterfaces.a\nINFO: Elapsed time: 0.074s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore",
    "success": true,
    "start_time": "2025-04-08T00:58:13.881856+01:00",
    "end_time": "2025-04-08T00:58:14.688936+01:00",
    "duration": "807.076375ms",
    "output": "INFO: Invocation ID: 11d14fc8-8c9a-4ba2-a12b-1bfac31f947b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/XPCProtocolsCore.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/XPCProtocolsCore.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/XPCProtocolsCore.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/libXPCProtocolsCore.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraServices/Sources/LoggingServices:LoggingServices",
    "success": true,
    "start_time": "2025-04-08T00:58:14.688944+01:00",
    "end_time": "2025-04-08T00:58:15.488147+01:00",
    "duration": "799.198458ms",
    "output": "INFO: Invocation ID: 2ecc5c83-794b-43bf-af88-aa6edd3e73f1\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraServices/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraServices/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraServices/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraServices/Sources/LoggingServices:LoggingServices up-to-date:\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/LoggingServices.swiftdoc\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/LoggingServices.swiftmodule\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/LoggingServices.swiftsourceinfo\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/libLoggingServices.a\nINFO: Elapsed time: 0.074s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  }
]