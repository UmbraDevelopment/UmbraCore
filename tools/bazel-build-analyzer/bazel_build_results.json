[
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:43:35.810953+01:00",
    "end_time": "2025-04-08T00:43:38.869018+01:00",
    "duration": "3.058059291s",
    "output": "INFO: Invocation ID: 56cdc455-789c-45dc-9764-e7e084070210\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (1 packages loaded)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (4 packages loaded, 7 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (4 packages loaded, 7 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces (106 packages loaded, 2797 targets configured).\n[61 / 63] [Prepa] Compiling Swift module //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/APIInterfaces:APIInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/APIInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/APIInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/APIInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/APIInterfaces/libAPIInterfaces.a\nINFO: Elapsed time: 2.346s, Critical Path: 0.14s\nINFO: 20 processes: 44 action cache hit, 19 disk cache hit, 1 internal.\nINFO: Build completed successfully, 20 total actions\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:43:38.869042+01:00",
    "end_time": "2025-04-08T00:43:39.755346+01:00",
    "duration": "886.302875ms",
    "output": "INFO: Invocation ID: 39d01e39-5128-4e47-ad80-0618e8a2eb3c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces (1 packages loaded, 6 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/ConfigInterfaces:ConfigInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/ConfigInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/ConfigInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/ConfigInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/ConfigInterfaces/libConfigInterfaces.a\nINFO: Elapsed time: 0.122s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs",
    "success": true,
    "start_time": "2025-04-08T00:43:39.755352+01:00",
    "end_time": "2025-04-08T00:43:40.618836+01:00",
    "duration": "863.481959ms",
    "output": "INFO: Invocation ID: 9f5e9aea-af30-4e7f-a680-eb0a784b0f72\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/libCoreDTOs.a\nINFO: Elapsed time: 0.100s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests",
    "success": true,
    "start_time": "2025-04-08T00:43:40.618839+01:00",
    "end_time": "2025-04-08T00:43:41.390968+01:00",
    "duration": "772.127375ms",
    "output": "INFO: Invocation ID: bef2969e-1faf-4e32-bc79-35db2192113f\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests (0 packages loaded, 1 target configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreDTOs:CoreDTOsTests up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOsTests.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOsTests.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/CoreDTOsTests.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreDTOs/libCoreDTOsTests.a\nINFO: Elapsed time: 0.099s, Critical Path: 0.01s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:43:41.390972+01:00",
    "end_time": "2025-04-08T00:43:42.156618+01:00",
    "duration": "765.644ms",
    "output": "INFO: Invocation ID: 8e8b3b79-4f63-4ea1-be57-57abd158cf16\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces (1 packages loaded, 8 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreInterfaces:CoreInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/CoreInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/CoreInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/CoreInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreInterfaces/libCoreInterfaces.a\nINFO: Elapsed time: 0.090s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes",
    "success": true,
    "start_time": "2025-04-08T00:43:42.156623+01:00",
    "end_time": "2025-04-08T00:43:42.938323+01:00",
    "duration": "781.698542ms",
    "output": "INFO: Invocation ID: 8be9b12b-0cc4-4514-b992-ff6b839164d2\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CoreSecurityTypes:CoreSecurityTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/libCoreSecurityTypes.a\nINFO: Elapsed time: 0.087s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:43:42.938329+01:00",
    "end_time": "2025-04-08T00:43:43.996183+01:00",
    "duration": "1.057852208s",
    "output": "INFO: Invocation ID: 41c77610-94a4-4307-8547-0f937342f445\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces (2 packages loaded, 15 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CryptoInterfaces:CryptoInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/CryptoInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/CryptoInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/CryptoInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoInterfaces/libCryptoInterfaces.a\nINFO: Elapsed time: 0.100s, Critical Path: 0.01s\nINFO: 2 processes: 4 action cache hit, 1 disk cache hit, 1 internal.\nINFO: Build completed successfully, 2 total actions\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes",
    "success": true,
    "start_time": "2025-04-08T00:43:43.996188+01:00",
    "end_time": "2025-04-08T00:43:44.77185+01:00",
    "duration": "775.66025ms",
    "output": "INFO: Invocation ID: 7c3ecb1d-d1c4-41c0-81a3-89f3d438bc6c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/CryptoTypes:CryptoTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/CryptoTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/CryptoTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/CryptoTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/CryptoTypes/libCryptoTypes.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes",
    "success": true,
    "start_time": "2025-04-08T00:43:44.771857+01:00",
    "end_time": "2025-04-08T00:43:45.546353+01:00",
    "duration": "774.49425ms",
    "output": "INFO: Invocation ID: bc56cfd9-a7b9-4ff2-b1de-3869b5ceedf9\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/DateTimeTypes:DateTimeTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/DateTimeTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/DateTimeTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/DateTimeTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/DateTimeTypes/libDateTimeTypes.a\nINFO: Elapsed time: 0.073s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes",
    "success": true,
    "start_time": "2025-04-08T00:43:45.546363+01:00",
    "end_time": "2025-04-08T00:43:46.333946+01:00",
    "duration": "787.582ms",
    "output": "INFO: Invocation ID: fbfb45d7-7177-4ed9-b95e-f911eae71328\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/DomainSecurityTypes:DomainSecurityTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/DomainSecurityTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/DomainSecurityTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/DomainSecurityTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/DomainSecurityTypes/libDomainSecurityTypes.a\nINFO: Elapsed time: 0.088s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes",
    "success": true,
    "start_time": "2025-04-08T00:43:46.333966+01:00",
    "end_time": "2025-04-08T00:43:47.119672+01:00",
    "duration": "785.704958ms",
    "output": "INFO: Invocation ID: 93ff2165-08b3-42d0-b468-f85cb75dead2\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/ErrorCoreTypes:ErrorCoreTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/ErrorCoreTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/ErrorCoreTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/ErrorCoreTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/ErrorCoreTypes/libErrorCoreTypes.a\nINFO: Elapsed time: 0.099s, Critical Path: 0.01s\nINFO: 2 processes: 2 action cache hit, 1 disk cache hit, 1 internal.\nINFO: Build completed successfully, 2 total actions\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes",
    "success": true,
    "start_time": "2025-04-08T00:43:47.119679+01:00",
    "end_time": "2025-04-08T00:43:47.857946+01:00",
    "duration": "738.265834ms",
    "output": "INFO: Invocation ID: a06aa153-7411-43fe-86ae-c2822136d004\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/FileSystemTypes:FileSystemTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/FileSystemTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/FileSystemTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/FileSystemTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/FileSystemTypes/libFileSystemTypes.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes",
    "success": true,
    "start_time": "2025-04-08T00:43:47.857952+01:00",
    "end_time": "2025-04-08T00:43:48.683684+01:00",
    "duration": "825.73075ms",
    "output": "INFO: Invocation ID: 15c8ab09-cc2e-4be9-99be-2da472d51f64\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes (3 packages loaded, 24 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/libKeyManagementTypes.a\nINFO: Elapsed time: 0.128s, Critical Path: 0.03s\nINFO: 4 processes: 4 action cache hit, 3 disk cache hit, 1 internal.\nINFO: Build completed successfully, 4 total actions\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests",
    "success": true,
    "start_time": "2025-04-08T00:43:48.68369+01:00",
    "end_time": "2025-04-08T00:43:49.467921+01:00",
    "duration": "784.229584ms",
    "output": "INFO: Invocation ID: fcc6767c-179e-4480-bf45-4ef4ee725b58\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests (0 packages loaded, 1 target configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/KeyManagementTypes:KeyManagementTypesTests up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypesTests.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypesTests.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/KeyManagementTypesTests.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeyManagementTypes/libKeyManagementTypesTests.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes",
    "success": true,
    "start_time": "2025-04-08T00:43:49.467926+01:00",
    "end_time": "2025-04-08T00:43:50.236341+01:00",
    "duration": "768.414333ms",
    "output": "INFO: Invocation ID: e158a7be-1191-41a7-a52e-07d96f3646d3\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes (2 packages loaded, 9 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/KeychainTypes:KeychainTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/KeychainTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/KeychainTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/KeychainTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/KeychainTypes/libKeychainTypes.a\nINFO: Elapsed time: 0.096s, Critical Path: 0.01s\nINFO: 2 processes: 4 action cache hit, 1 disk cache hit, 1 internal.\nINFO: Build completed successfully, 2 total actions\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes",
    "success": true,
    "start_time": "2025-04-08T00:43:50.236346+01:00",
    "end_time": "2025-04-08T00:43:50.991817+01:00",
    "duration": "755.469541ms",
    "output": "INFO: Invocation ID: 72bbe69c-ee97-475b-96e1-ce9b0ec54e6c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/LoggingTypes:LoggingTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/LoggingTypes/libLoggingTypes.a\nINFO: Elapsed time: 0.073s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/Notification:Notification",
    "success": true,
    "start_time": "2025-04-08T00:43:50.991843+01:00",
    "end_time": "2025-04-08T00:43:51.861653+01:00",
    "duration": "869.807917ms",
    "output": "INFO: Invocation ID: 10070db5-c020-40ef-9fb0-1fdafa4e4505\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Notification:Notification (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Notification:Notification (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/Notification:Notification (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/Notification:Notification up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/Notification.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/Notification.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/Notification.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/Notification/libNotification.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling",
    "success": true,
    "start_time": "2025-04-08T00:43:51.861658+01:00",
    "end_time": "2025-04-08T00:43:52.645807+01:00",
    "duration": "784.147458ms",
    "output": "INFO: Invocation ID: ef9a452c-92da-4c2a-90c0-89a1b53840ed\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/Scheduling:Scheduling up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/Scheduling.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/Scheduling.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/Scheduling.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/Scheduling/libScheduling.a\nINFO: Elapsed time: 0.082s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:43:52.645813+01:00",
    "end_time": "2025-04-08T00:43:53.465412+01:00",
    "duration": "819.5975ms",
    "output": "INFO: Invocation ID: 5968fa53-2a1f-4782-a959-223fa66f9882\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces:SecurityInterfaces up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/SecurityInterfaces.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/SecurityInterfaces.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/SecurityInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/libSecurityInterfaces.a\nINFO: Elapsed time: 0.088s, Critical Path: 0.01s\nINFO: 2 processes: 2 action cache hit, 1 disk cache hit, 1 internal.\nINFO: Build completed successfully, 2 total actions\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters",
    "success": true,
    "start_time": "2025-04-08T00:43:53.465437+01:00",
    "end_time": "2025-04-08T00:43:54.264949+01:00",
    "duration": "799.510542ms",
    "output": "INFO: Invocation ID: 58389c09-7625-4d34-b6e3-7174a76c7af1\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters (3 packages loaded, 17 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters:SecurityInterfacesAdapters up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/SecurityInterfacesAdapters.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/SecurityInterfacesAdapters.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/SecurityInterfacesAdapters.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Adapters/libSecurityInterfacesAdapters.a\nINFO: Elapsed time: 0.114s, Critical Path: 0.02s\nINFO: 3 processes: 5 action cache hit, 2 disk cache hit, 1 internal.\nINFO: Build completed successfully, 3 total actions\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs",
    "success": true,
    "start_time": "2025-04-08T00:43:54.264955+01:00",
    "end_time": "2025-04-08T00:43:54.997689+01:00",
    "duration": "732.732ms",
    "output": "INFO: Invocation ID: 981c54d3-53f1-47a1-aae3-8dad44302f3b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs:SecurityInterfacesDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/SecurityInterfacesDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/SecurityInterfacesDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/SecurityInterfacesDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/DTOs/libSecurityInterfacesDTOs.a\nINFO: Elapsed time: 0.071s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels",
    "success": true,
    "start_time": "2025-04-08T00:43:54.997695+01:00",
    "end_time": "2025-04-08T00:43:55.751996+01:00",
    "duration": "754.298917ms",
    "output": "INFO: Invocation ID: e2cf5ce4-f657-4287-ac30-1fe929c9b265\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models:SecurityInterfacesModels up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/SecurityInterfacesModels.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/SecurityInterfacesModels.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/SecurityInterfacesModels.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Models/libSecurityInterfacesModels.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols",
    "success": true,
    "start_time": "2025-04-08T00:43:55.752003+01:00",
    "end_time": "2025-04-08T00:43:56.483264+01:00",
    "duration": "731.26ms",
    "output": "INFO: Invocation ID: dfbf04ea-4f20-4920-a239-56f1d32cdc8d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/libSecurityInterfacesProtocols.a\nINFO: Elapsed time: 0.072s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes",
    "success": true,
    "start_time": "2025-04-08T00:43:56.48327+01:00",
    "end_time": "2025-04-08T00:43:57.224867+01:00",
    "duration": "741.595375ms",
    "output": "INFO: Invocation ID: 804ef601-8ddb-4e66-bbe4-2d75bf7adfe7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types:SecurityInterfacesTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/SecurityInterfacesTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/SecurityInterfacesTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/SecurityInterfacesTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Types/libSecurityInterfacesTypes.a\nINFO: Elapsed time: 0.068s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC",
    "success": true,
    "start_time": "2025-04-08T00:43:57.224873+01:00",
    "end_time": "2025-04-08T00:43:58.102993+01:00",
    "duration": "878.118708ms",
    "output": "INFO: Invocation ID: a7c77cde-3e2f-4a3f-a7af-da4496105ea0\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC:SecurityInterfacesXPC up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/SecurityInterfacesXPC.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/SecurityInterfacesXPC.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/SecurityInterfacesXPC.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/XPC/libSecurityInterfacesXPC.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes",
    "success": true,
    "start_time": "2025-04-08T00:43:58.103+01:00",
    "end_time": "2025-04-08T00:43:58.890011+01:00",
    "duration": "787.009333ms",
    "output": "INFO: Invocation ID: 852bda29-ff4d-4df9-ae30-112d51c68af6\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes (1 packages loaded, 3 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/SecurityKeyTypes:SecurityKeyTypes up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/SecurityKeyTypes.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/SecurityKeyTypes.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/SecurityKeyTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/SecurityKeyTypes/libSecurityKeyTypes.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors",
    "success": true,
    "start_time": "2025-04-08T00:43:58.890016+01:00",
    "end_time": "2025-04-08T00:43:59.689775+01:00",
    "duration": "799.757459ms",
    "output": "INFO: Invocation ID: 7e9ac30f-d378-4179-9a28-f3d8cfed978a\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors:UmbraErrors up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/UmbraErrors.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/UmbraErrors.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/UmbraErrors.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/libUmbraErrors.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore",
    "success": true,
    "start_time": "2025-04-08T00:43:59.68978+01:00",
    "end_time": "2025-04-08T00:44:00.456384+01:00",
    "duration": "766.603166ms",
    "output": "INFO: Invocation ID: e344cf04-016f-4a91-b5d0-caa17fd50373\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/Core:UmbraErrorsCore up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/UmbraErrorsCore.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/UmbraErrorsCore.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/UmbraErrorsCore.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Core/libUmbraErrorsCore.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs",
    "success": true,
    "start_time": "2025-04-08T00:44:00.456389+01:00",
    "end_time": "2025-04-08T00:44:01.270353+01:00",
    "duration": "813.963042ms",
    "output": "INFO: Invocation ID: f247278c-944f-4644-be44-285824c5e4b7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs:UmbraErrorsDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/UmbraErrorsDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/UmbraErrorsDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/UmbraErrorsDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/DTOs/libUmbraErrorsDTOs.a\nINFO: Elapsed time: 0.075s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains",
    "success": true,
    "start_time": "2025-04-08T00:44:01.270358+01:00",
    "end_time": "2025-04-08T00:44:02.046848+01:00",
    "duration": "776.489375ms",
    "output": "INFO: Invocation ID: a2a51fc9-8839-417d-be12-d51018ab255a\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/Domains:UmbraErrorsDomains up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/UmbraErrorsDomains.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/UmbraErrorsDomains.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/UmbraErrorsDomains.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Domains/libUmbraErrorsDomains.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping",
    "success": true,
    "start_time": "2025-04-08T00:44:02.046858+01:00",
    "end_time": "2025-04-08T00:44:02.810707+01:00",
    "duration": "763.847583ms",
    "output": "INFO: Invocation ID: 90132215-92f1-42ed-a34b-7849d5f6f26b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping:UmbraErrorsMapping up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/UmbraErrorsMapping.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/UmbraErrorsMapping.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/UmbraErrorsMapping.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UmbraErrors/Mapping/libUmbraErrorsMapping.a\nINFO: Elapsed time: 0.074s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults",
    "success": true,
    "start_time": "2025-04-08T00:44:02.810732+01:00",
    "end_time": "2025-04-08T00:44:03.571013+01:00",
    "duration": "760.279125ms",
    "output": "INFO: Invocation ID: 2ceed381-6032-4e30-aeaa-10c4ff2db481\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UserDefaults:UserDefaults up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/UserDefaults.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/UserDefaults.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/UserDefaults.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/libUserDefaults.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters",
    "success": true,
    "start_time": "2025-04-08T00:44:03.571017+01:00",
    "end_time": "2025-04-08T00:44:04.346467+01:00",
    "duration": "775.448666ms",
    "output": "INFO: Invocation ID: e544e38e-4810-4888-85b0-74fb9654ee0e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UserDefaults/Adapters:UserDefaultsAdapters up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/UserDefaultsAdapters.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/UserDefaultsAdapters.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/UserDefaultsAdapters.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/Adapters/libUserDefaultsAdapters.a\nINFO: Elapsed time: 0.074s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs",
    "success": true,
    "start_time": "2025-04-08T00:44:04.346473+01:00",
    "end_time": "2025-04-08T00:44:05.088848+01:00",
    "duration": "742.373416ms",
    "output": "INFO: Invocation ID: a7345492-064a-46ba-beed-1024ffb57442\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraCoreTypes/Sources/UserDefaults/DTOs:UserDefaultsDTOs up-to-date:\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/UserDefaultsDTOs.swiftdoc\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/UserDefaultsDTOs.swiftmodule\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/UserDefaultsDTOs.swiftsourceinfo\n  bazel-bin/packages/UmbraCoreTypes/Sources/UserDefaults/DTOs/libUserDefaultsDTOs.a\nINFO: Elapsed time: 0.082s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/APIServices:APIServices",
    "success": false,
    "start_time": "2025-04-08T00:44:05.088852+01:00",
    "end_time": "2025-04-08T00:44:06.710318+01:00",
    "duration": "1.621462375s",
    "output": "INFO: Invocation ID: 5a534378-df89-4987-a3dd-c58b10d20852\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/APIServices:APIServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/APIServices:APIServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/APIServices:APIServices (11 packages loaded, 110 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/APIServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/APIServices:APIServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/APIServices:APIServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/APIServices/APIServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:33:59: error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 31 | \n 32 |   /// The security bookmark service for managing security-scoped bookmarks\n 33 |   private let securityBookmarkService: SecurityInterfaces.SecurityBookmarkProtocol\n    |                                                           `- error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 34 | \n 35 |   /// Event continuations for streaming events\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:48:49: error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 46 |     configuration: APIConfigurationDTO,\n 47 |     logger: LoggingProtocol,\n 48 |     securityBookmarkService: SecurityInterfaces.SecurityBookmarkProtocol\n    |                                                 `- error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 49 |   ) {\n 50 |     self.configuration = configuration\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:23:14: error: type 'APIServiceActor' does not conform to protocol 'APIServiceProtocol'\n 21 | /// All mutable state is properly isolated within the actor.\n 22 | /// All methods use Swift's structured concurrency for safe asynchronous operations.\n 23 | public actor APIServiceActor: APIServiceProtocol {\n    |              |- error: type 'APIServiceActor' does not conform to protocol 'APIServiceProtocol'\n    |              `- note: add stubs for conformance\n 24 |   // MARK: - Private Properties\n 25 | \n    :\n 58 |   /// - Parameter configuration: The configuration to use for initialisation\n 59 |   /// - Throws: APIError if initialisation fails\n 60 |   public func initialise(configuration: APIConfigurationDTO) async throws {\n    |               `- note: candidate has non-matching type '(APIConfigurationDTO) async throws -\u003e ()'\n 61 |     // Log the initialisation attempt with privacy-aware logging\n 62 |     await logger.info(\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/APIInterfaces/Protocols/APIServiceProtocol.swift:24:8: note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n22 |   /// - Parameter configuration: The configuration to use for initialisation\n23 |   /// - Throws: UmbraErrors.APIError if initialisation fails\n24 |   func initialise(configuration: APIConfigurationDTO) async throws\n   |        `- note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n25 | \n26 |   /// Creates an encrypted security-scoped bookmark for the specified URL\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:30:15: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 28 | \n 29 |   /// Active operations tracking\n 30 |   private var activeOperations: [String: Task\u003cAny, Error\u003e] = [:]\n    |               `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 31 | \n 32 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:166:16: error: cannot find type 'APIConfigurationOptions' in scope\n164 |   public func execute\u003cT: APIOperation\u003e(\n165 |     _ operation: T,\n166 |     options _: APIConfigurationOptions? = nil\n    |                `- error: cannot find type 'APIConfigurationOptions' in scope\n167 |   ) async throws -\u003e T.OperationResult {\n168 |     let operationID = UUID().uuidString\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:167:23: error: 'OperationResult' is not a member type of type 'T'\n165 |     _ operation: T,\n166 |     options _: APIConfigurationOptions? = nil\n167 |   ) async throws -\u003e T.OperationResult {\n    |                       `- error: 'OperationResult' is not a member type of type 'T'\n168 |     let operationID = UUID().uuidString\n169 |     let operationMetadata = LogMetadataDTOCollection()\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:270:14: error: cannot find type 'APIConfigurationOptions' in scope\n268 |   public func tryExecute\u003cT: APIOperation\u003e(\n269 |     _ operation: T,\n270 |     options: APIConfigurationOptions? = nil\n    |              `- error: cannot find type 'APIConfigurationOptions' in scope\n271 |   ) async -\u003e APIResult\u003cT.OperationResult\u003e {\n272 |     do {\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:271:14: error: cannot find type 'APIResult' in scope\n269 |     _ operation: T,\n270 |     options: APIConfigurationOptions? = nil\n271 |   ) async -\u003e APIResult\u003cT.OperationResult\u003e {\n    |              `- error: cannot find type 'APIResult' in scope\n272 |     do {\n273 |       let result = try await execute(operation, options: options)\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:14:14: error: type 'AlphaAPIService' does not conform to protocol 'APIServiceProtocol'\n 12 |  and requirements, with consistent error handling.\n 13 |  */\n 14 | public actor AlphaAPIService: APIServiceProtocol {\n    |              |- error: type 'AlphaAPIService' does not conform to protocol 'APIServiceProtocol'\n    |              `- note: add stubs for conformance\n 15 |   // MARK: - Private Properties\n 16 | \n    :\n 58 |    - Throws: APIError if initialization fails\n 59 |    */\n 60 |   public func initialise(configuration: APIConfigurationDTO) async throws {\n    |               `- note: candidate has non-matching type '(APIConfigurationDTO) async throws -\u003e ()'\n 61 |     self.configuration = configuration\n 62 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/APIInterfaces/Protocols/APIServiceProtocol.swift:24:8: note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n22 |   /// - Parameter configuration: The configuration to use for initialisation\n23 |   /// - Throws: UmbraErrors.APIError if initialisation fails\n24 |   func initialise(configuration: APIConfigurationDTO) async throws\n   |        `- note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n25 | \n26 |   /// Creates an encrypted security-scoped bookmark for the specified URL\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:333:38: error: cannot find type 'SecurityConfigOptions' in scope\n331 |   }\n332 | \n333 |   func createSecureConfig(options _: SecurityConfigOptions) async -\u003e SecurityConfigDTO {\n    |                                      `- error: cannot find type 'SecurityConfigOptions' in scope\n334 |     fatalError(\"Not implemented in placeholder\")\n335 |   }\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:33:59: error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 31 | \n 32 |   /// The security bookmark service for managing security-scoped bookmarks\n 33 |   private let securityBookmarkService: SecurityInterfaces.SecurityBookmarkProtocol\n    |                                                           `- error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 34 | \n 35 |   /// Event continuations for streaming events\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:48:49: error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 46 |     configuration: APIConfigurationDTO,\n 47 |     logger: LoggingProtocol,\n 48 |     securityBookmarkService: SecurityInterfaces.SecurityBookmarkProtocol\n    |                                                 `- error: no type named 'SecurityBookmarkProtocol' in module 'SecurityInterfaces'\n 49 |   ) {\n 50 |     self.configuration = configuration\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:23:14: error: type 'APIServiceActor' does not conform to protocol 'APIServiceProtocol'\n 21 | /// All mutable state is properly isolated within the actor.\n 22 | /// All methods use Swift's structured concurrency for safe asynchronous operations.\n 23 | public actor APIServiceActor: APIServiceProtocol {\n    |              |- error: type 'APIServiceActor' does not conform to protocol 'APIServiceProtocol'\n    |              `- note: add stubs for conformance\n 24 |   // MARK: - Private Properties\n 25 | \n    :\n 58 |   /// - Parameter configuration: The configuration to use for initialisation\n 59 |   /// - Throws: APIError if initialisation fails\n 60 |   public func initialise(configuration: APIConfigurationDTO) async throws {\n    |               `- note: candidate has non-matching type '(APIConfigurationDTO) async throws -\u003e ()'\n 61 |     // Log the initialisation attempt with privacy-aware logging\n 62 |     await logger.info(\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/APIInterfaces/Protocols/APIServiceProtocol.swift:24:8: note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n22 |   /// - Parameter configuration: The configuration to use for initialisation\n23 |   /// - Throws: UmbraErrors.APIError if initialisation fails\n24 |   func initialise(configuration: APIConfigurationDTO) async throws\n   |        `- note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n25 | \n26 |   /// Creates an encrypted security-scoped bookmark for the specified URL\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:64:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 62 |     await logger.info(\n 63 |       \"Initialising API service\",\n 64 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 65 |         domainName: \"APIService\",\n 66 |         source: \"initialise\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:96:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 94 |     await logger.debug(\n 95 |       \"Creating encrypted bookmark\",\n 96 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 97 |         domainName: \"APIService\",\n 98 |         source: \"createEncryptedBookmark\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:130:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n128 |     await logger.debug(\n129 |       \"Resolving encrypted bookmark\",\n130 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n131 |         domainName: \"APIService\",\n132 |         source: \"resolveEncryptedBookmark\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:157:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n155 |       await logger.error(\n156 |         \"Failed to resolve bookmark\",\n157 |         context: LogContextDTO(\n    |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n158 |           domainName: \"APIService\",\n159 |           source: \"resolveEncryptedBookmark\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:179:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n177 |     await logger.debug(\n178 |       \"Deleting encrypted bookmark\",\n179 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n180 |         domainName: \"APIService\",\n181 |         source: \"deleteEncryptedBookmark\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:193:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n191 |       await logger.info(\n192 |         \"Encrypted bookmark deleted\",\n193 |         context: LogContextDTO(\n    |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n194 |           domainName: \"APIService\",\n195 |           source: \"deleteEncryptedBookmark\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:214:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n212 |       await logger.error(\n213 |         \"Failed to delete bookmark\",\n214 |         context: LogContextDTO(\n    |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n215 |           domainName: \"APIService\",\n216 |           source: \"deleteEncryptedBookmark\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:242:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n240 |     await logger.debug(\n241 |       \"Returning API version information\",\n242 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n243 |         domainName: \"APIService\",\n244 |         source: \"getVersion\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:265:22: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n263 |           await logger.debug(\n264 |             \"Subscribing to API events\",\n265 |             context: LogContextDTO(\n    |                      `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n266 |               domainName: \"APIService\",\n267 |               source: \"subscribeToEvents\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:313:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n311 |     await logger.debug(\n312 |       \"Event subscription removed\",\n313 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n314 |         domainName: \"APIService\",\n315 |         source: \"removeEventContinuation\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:333:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n331 |       await logger.trace(\n332 |         \"Published event to subscriber\",\n333 |         context: LogContextDTO(\n    |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n334 |           domainName: \"APIService\",\n335 |           source: \"publishEvent\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:353:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n351 |     await logger.info(\n352 |       \"Registered event subscriber\",\n353 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n354 |         domainName: \"APIService\",\n355 |         source: \"registerEventSubscriber\",\n\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:371:65: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n369 |     // In a real implementation, we would unregister this continuation from an event bus\n370 |     // For now, we'll just log that it was called\n371 |     await logger.info(\"Unregistered event subscriber\", context: LogContextDTO(domainName: \"APIService\", source: \"unregisterEventSubscriber\", metadata: LogMetadataDTOCollection()))\n    |                                                                 `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n372 | \n373 |     // Remove the continuation from our collection by comparing continuation IDs\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:30:15: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 28 | \n 29 |   /// Active operations tracking\n 30 |   private var activeOperations: [String: Task\u003cAny, Error\u003e] = [:]\n    |               `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 31 | \n 32 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:166:16: error: cannot find type 'APIConfigurationOptions' in scope\n164 |   public func execute\u003cT: APIOperation\u003e(\n165 |     _ operation: T,\n166 |     options _: APIConfigurationOptions? = nil\n    |                `- error: cannot find type 'APIConfigurationOptions' in scope\n167 |   ) async throws -\u003e T.OperationResult {\n168 |     let operationID = UUID().uuidString\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:167:23: error: 'OperationResult' is not a member type of type 'T'\n165 |     _ operation: T,\n166 |     options _: APIConfigurationOptions? = nil\n167 |   ) async throws -\u003e T.OperationResult {\n    |                       `- error: 'OperationResult' is not a member type of type 'T'\n168 |     let operationID = UUID().uuidString\n169 |     let operationMetadata = LogMetadataDTOCollection()\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:270:14: error: cannot find type 'APIConfigurationOptions' in scope\n268 |   public func tryExecute\u003cT: APIOperation\u003e(\n269 |     _ operation: T,\n270 |     options: APIConfigurationOptions? = nil\n    |              `- error: cannot find type 'APIConfigurationOptions' in scope\n271 |   ) async -\u003e APIResult\u003cT.OperationResult\u003e {\n272 |     do {\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:271:14: error: cannot find type 'APIResult' in scope\n269 |     _ operation: T,\n270 |     options: APIConfigurationOptions? = nil\n271 |   ) async -\u003e APIResult\u003cT.OperationResult\u003e {\n    |              `- error: cannot find type 'APIResult' in scope\n272 |     do {\n273 |       let result = try await execute(operation, options: options)\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:14:14: error: type 'AlphaAPIService' does not conform to protocol 'APIServiceProtocol'\n 12 |  and requirements, with consistent error handling.\n 13 |  */\n 14 | public actor AlphaAPIService: APIServiceProtocol {\n    |              |- error: type 'AlphaAPIService' does not conform to protocol 'APIServiceProtocol'\n    |              `- note: add stubs for conformance\n 15 |   // MARK: - Private Properties\n 16 | \n    :\n 58 |    - Throws: APIError if initialization fails\n 59 |    */\n 60 |   public func initialise(configuration: APIConfigurationDTO) async throws {\n    |               `- note: candidate has non-matching type '(APIConfigurationDTO) async throws -\u003e ()'\n 61 |     self.configuration = configuration\n 62 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/APIInterfaces/Protocols/APIServiceProtocol.swift:24:8: note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n22 |   /// - Parameter configuration: The configuration to use for initialisation\n23 |   /// - Throws: UmbraErrors.APIError if initialisation fails\n24 |   func initialise(configuration: APIConfigurationDTO) async throws\n   |        `- note: protocol requires function 'initialise(configuration:)' with type '(APIConfigurationDTO) async throws -\u003e ()'\n25 | \n26 |   /// Creates an encrypted security-scoped bookmark for the specified URL\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:66:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 64 |     await logger.info(\n 65 |       \"API service initialized\",\n 66 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n 67 |         domainName: \"APIService\",\n 68 |         source: \"initialise\",\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:176:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n174 |     await logger.info(\n175 |       \"Executing operation \\(String(describing: type(of: operation)))\",\n176 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n177 |         domainName: \"APIService\",\n178 |         source: \"execute\",\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:198:90: error: 'OperationResult' is not a member type of type 'T'\n196 | \n197 |         // Check if the handler can handle this type of operation\n198 |         guard let result = try await handler.handleOperation(operation: operation) as? T.OperationResult else {\n    |                                                                                          `- error: 'OperationResult' is not a member type of type 'T'\n199 |           throw APIError.operationFailed(\n200 |             message: \"Operation \\(type(of: operation)) not supported by handler for domain \\(domain)\",\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:198:46: error: value of type 'any DomainHandler' has no member 'handleOperation'\n196 | \n197 |         // Check if the handler can handle this type of operation\n198 |         guard let result = try await handler.handleOperation(operation: operation) as? T.OperationResult else {\n    |                                              `- error: value of type 'any DomainHandler' has no member 'handleOperation'\n199 |           throw APIError.operationFailed(\n200 |             message: \"Operation \\(type(of: operation)) not supported by handler for domain \\(domain)\",\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:244:47: error: 'OperationResult' is not a member type of type 'T'\n242 |     do {\n243 |       // Await the task result\n244 |       let result = try await task.value as! T.OperationResult\n    |                                               `- error: 'OperationResult' is not a member type of type 'T'\n245 | \n246 |       // Remove the task from active operations\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:294:18: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n292 |       await logger.warning(\n293 |         \"Operation not found for cancellation\",\n294 |         context: LogContextDTO(\n    |                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n295 |           domainName: \"APIService\",\n296 |           source: \"cancelOperation\",\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:307:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n305 |     await logger.info(\n306 |       \"Cancelling operation\",\n307 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n308 |         domainName: \"APIService\",\n309 |         source: \"cancelOperation\",\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:316:10: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n314 | \n315 |     // Cancel the task\n316 |     task.cancel()\n    |          `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n317 | \n318 |     // Remove from active operations\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:354:28: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n352 | \n353 |     // Handle NSError\n354 |     if let nsError = error as? NSError {\n    |                            `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n355 |       switch nsError.domain {\n356 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:387:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n385 |     await logger.info(\n386 |       \"Registered event subscriber\",\n387 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n388 |         domainName: \"APIService\",\n389 |         source: \"registerEventSubscriber\",\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:411:16: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n409 |     await logger.info(\n410 |       \"Unregistered event subscriber\",\n411 |       context: LogContextDTO(\n    |                `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n412 |         domainName: \"APIService\",\n413 |         source: \"unregisterEventSubscriber\",\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIService.swift:446:9: warning: variable 'result' was never mutated; consider changing to 'let' constant\n444 |    */\n445 |   func mergeWith(_: LogMetadataDTOCollection) -\u003e LogMetadataDTOCollection {\n446 |     var result = self\n    |         `- warning: variable 'result' was never mutated; consider changing to 'let' constant\n447 | \n448 |     // Since we don't have direct access to the underlying storage,\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:333:38: error: cannot find type 'SecurityConfigOptions' in scope\n331 |   }\n332 | \n333 |   func createSecureConfig(options _: SecurityConfigOptions) async -\u003e SecurityConfigDTO {\n    |                                      `- error: cannot find type 'SecurityConfigOptions' in scope\n334 |     fatalError(\"Not implemented in placeholder\")\n335 |   }\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:171:5: error: module 'LoggingServices' has no member named 'createLogger'\n169 |   private static func createDefaultLogger() -\u003e LoggingProtocol {\n170 |     // In a real implementation, this would use proper logging configuration\n171 |     LoggingServices.createLogger(\n    |     `- error: module 'LoggingServices' has no member named 'createLogger'\n172 |       domain: \"APIService\",\n173 |       category: \"Service\"\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:183:5: error: module 'LoggingServices' has no member named 'createLogger'\n181 |    */\n182 |   private static func createProductionLogger() -\u003e LoggingProtocol {\n183 |     LoggingServices.createLogger(\n    |     `- error: module 'LoggingServices' has no member named 'createLogger'\n184 |       domain: \"APIService\",\n185 |       category: \"Service\"\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:195:5: error: module 'LoggingServices' has no member named 'createLogger'\n193 |    */\n194 |   private static func createTestingLogger() -\u003e LoggingProtocol {\n195 |     LoggingServices.createLogger(\n    |     `- error: module 'LoggingServices' has no member named 'createLogger'\n196 |       domain: \"APIServiceTest\",\n197 |       category: \"Test\"\n\npackages/UmbraImplementations/Sources/APIServices/AlphaAPIServiceFactory.swift:443:27: error: module 'LoggingServices' has no member named 'createLogger'\n441 |   /// - Parameter logger: Logger to use for this handler\n442 |   init(logger: LoggingProtocol?) {\n443 |     self.logger=logger ?? LoggingServices.createLogger(domain: \"SystemDomainMock\", category: \"Test\")\n    |                           `- error: module 'LoggingServices' has no member named 'createLogger'\n444 |   }\n445 | \n\npackages/UmbraImplementations/Sources/APIServices/Domains/BackupDomainHandler.swift:179:19: error: type '_ErrorCodeProtocol' has no member 'repositoryNotFound'\n177 |             identifier: id\n178 |           )\n179 |         case let .repositoryNotFound(id):\n    |                   `- error: type '_ErrorCodeProtocol' has no member 'repositoryNotFound'\n180 |           return APIError.resourceNotFound(\n181 |             message: \"Repository not found: \\(id)\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/BackupDomainHandler.swift:184:19: error: type '_ErrorCodeProtocol' has no member 'backupFailed'\n182 |             identifier: id\n183 |           )\n184 |         case let .backupFailed(message):\n    |                   `- error: type '_ErrorCodeProtocol' has no member 'backupFailed'\n185 |           return APIError.operationFailed(\n186 |             message: message,\n\npackages/UmbraImplementations/Sources/APIServices/Domains/BackupDomainHandler.swift:190:19: error: type '_ErrorCodeProtocol' has no member 'pathNotFound'\n188 |             underlyingError: backupError\n189 |           )\n190 |         case let .pathNotFound(path):\n    |                   `- error: type '_ErrorCodeProtocol' has no member 'pathNotFound'\n191 |           return APIError.resourceNotFound(\n192 |             message: \"Backup path not found: \\(path)\",\n\npackages/UmbraImplementations/Sources/APIServices/Domains/BackupDomainHandler.swift:195:19: error: type '_ErrorCodeProtocol' has no member 'permissionDenied'\n193 |             identifier: path\n194 |           )\n195 |         case let .permissionDenied(message):\n    |                   `- error: type '_ErrorCodeProtocol' has no member 'permissionDenied'\n196 |           return APIError.permissionDenied(\n197 |             message: message,\n\npackages/UmbraImplementations/Sources/APIServices/Domains/BackupDomainHandler.swift:200:19: error: type '_ErrorCodeProtocol' has no member 'invalidOperation'\n198 |             code: \"BACKUP_PERMISSION_DENIED\"\n199 |           )\n200 |         case let .invalidOperation(message):\n    |                   `- error: type '_ErrorCodeProtocol' has no member 'invalidOperation'\n201 |           return APIError.validationFailed(\n202 |             message: message,\n\npackages/UmbraImplementations/Sources/APIServices/Domains/BackupDomainHandler.swift:733:55: error: missing argument for parameter 'filesRestored' in call\n731 |       fileCount: result.fileCount,\n732 |       duration: result.duration,\n733 |       targetPath: operation.parameters.targetDirectory\n    |                                                       `- error: missing argument for parameter 'filesRestored' in call\n734 |     )\n735 | \n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:382:10: note: 'init(snapshotID:restoreTime:totalSize:fileCount:duration:targetPath:filesRestored:)' declared here\n380 |   public let filesRestored: Int\n381 | \n382 |   public init(\n    |          `- note: 'init(snapshotID:restoreTime:totalSize:fileCount:duration:targetPath:filesRestored:)' declared here\n383 |     snapshotID: String,\n384 |     restoreTime: Date,\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:310:28: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n308 |         RepositoryInfo(\n309 |           id: id,\n310 |           name: repository.getName() ?? repository.identifier,\n    |                            `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n311 |           status: mapStatus(Task.detached { repository.state }.value),\n312 |           creationDate: repository.getCreationDate() ?? Date(),\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:312:36: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n310 |           name: repository.getName() ?? repository.identifier,\n311 |           status: mapStatus(Task.detached { repository.state }.value),\n312 |           creationDate: repository.getCreationDate() ?? Date(),\n    |                                    `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n313 |           lastAccessDate: repository.getLastAccessDate() ?? Date()\n314 |         )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:313:38: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n311 |           status: mapStatus(Task.detached { repository.state }.value),\n312 |           creationDate: repository.getCreationDate() ?? Date(),\n313 |           lastAccessDate: repository.getLastAccessDate() ?? Date()\n    |                                      `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n314 |         )\n315 |       )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:359:24: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n357 |     let details=try await RepositoryDetails(\n358 |       id: repository.identifier,\n359 |       name: repository.getName() ?? repository.identifier,\n    |                        `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n360 |       status: mapStatus(Task.detached { repository.state }.value),\n361 |       creationDate: repository.getCreationDate() ?? Date(),\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:361:32: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n359 |       name: repository.getName() ?? repository.identifier,\n360 |       status: mapStatus(Task.detached { repository.state }.value),\n361 |       creationDate: repository.getCreationDate() ?? Date(),\n    |                                `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n362 |       lastAccessDate: repository.getLastAccessDate() ?? Date(),\n363 |       snapshotCount: Int(stats.snapshotCount),\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:362:34: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n360 |       status: mapStatus(Task.detached { repository.state }.value),\n361 |       creationDate: repository.getCreationDate() ?? Date(),\n362 |       lastAccessDate: repository.getLastAccessDate() ?? Date(),\n    |                                  `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n363 |       snapshotCount: Int(stats.snapshotCount),\n364 |       totalSize: Int(stats.totalSize),\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:399:26: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'setName'\n397 | \n398 |     // Apply name and other metadata if needed\n399 |     try await repository.setName(params.name)\n    |                          `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'setName'\n400 |     try await repository.setMetadata([\n401 |       \"creation_date\": Date().description\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:400:26: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'setMetadata'\n398 |     // Apply name and other metadata if needed\n399 |     try await repository.setName(params.name)\n400 |     try await repository.setMetadata([\n    |                          `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'setMetadata'\n401 |       \"creation_date\": Date().description\n402 |     ])\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:407:24: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n405 |     let info=try await RepositoryInfo(\n406 |       id: repository.identifier,\n407 |       name: repository.getName() ?? repository.identifier,\n    |                        `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n408 |       status: mapStatus(Task.detached { repository.state }.value),\n409 |       creationDate: repository.getCreationDate() ?? Date(),\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:409:32: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n407 |       name: repository.getName() ?? repository.identifier,\n408 |       status: mapStatus(Task.detached { repository.state }.value),\n409 |       creationDate: repository.getCreationDate() ?? Date(),\n    |                                `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n410 |       lastAccessDate: repository.getLastAccessDate() ?? Date()\n411 |     )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:410:34: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n408 |       status: mapStatus(Task.detached { repository.state }.value),\n409 |       creationDate: repository.getCreationDate() ?? Date(),\n410 |       lastAccessDate: repository.getLastAccessDate() ?? Date()\n    |                                  `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n411 |     )\n412 | \n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:420:65: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'name'\n418 |           .withPublic(key: \"operation\", value: \"createRepository\")\n419 |           .withPublic(key: \"repository_id\", value: repository.identifier)\n420 |           .withPublic(key: \"repository_name\", value: repository.name)\n    |                                                                 `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'name'\n421 |       )\n422 |     )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:456:27: error: value of type 'UpdateRepositoryOperation' has no member 'name'\n454 | \n455 |     // Update the repository metadata\n456 |     if let name=operation.name {\n    |                           `- error: value of type 'UpdateRepositoryOperation' has no member 'name'\n457 |       try await repository.setName(name)\n458 |     }\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:457:28: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'setName'\n455 |     // Update the repository metadata\n456 |     if let name=operation.name {\n457 |       try await repository.setName(name)\n    |                            `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'setName'\n458 |     }\n459 | \n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:463:24: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n461 |     let updatedInfo=try await RepositoryInfo(\n462 |       id: repository.identifier,\n463 |       name: repository.getName() ?? repository.identifier,\n    |                        `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getName'\n464 |       status: mapStatus(Task.detached { repository.state }.value),\n465 |       creationDate: repository.getCreationDate() ?? Date(),\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:465:32: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n463 |       name: repository.getName() ?? repository.identifier,\n464 |       status: mapStatus(Task.detached { repository.state }.value),\n465 |       creationDate: repository.getCreationDate() ?? Date(),\n    |                                `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getCreationDate'\n466 |       lastAccessDate: repository.getLastAccessDate() ?? Date()\n467 |     )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/RepositoryDomainHandler.swift:466:34: error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n464 |       status: mapStatus(Task.detached { repository.state }.value),\n465 |       creationDate: repository.getCreationDate() ?? Date(),\n466 |       lastAccessDate: repository.getLastAccessDate() ?? Date()\n    |                                  `- error: value of type 'any RepositoryProtocol' (aka 'any RepositoryLockingProtocol \u0026 RepositoryMaintenanceProtocol \u0026 RepositoryStatsProviderProtocol') has no member 'getLastAccessDate'\n467 |     )\n468 | \n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:127:18: error: extra argument 'error' in call\n 125 |           source: \"SecurityDomainHandler\",\n 126 |           metadata: errorMetadata,\n 127 |           error: error\n     |                  `- error: extra argument 'error' in call\n 128 |         )\n 129 |       )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:557:38: error: value of type 'any SecurityProviderProtocol' has no member 'hashData'\n 555 | \n 556 |     // Compute the hash\n 557 |     return try await securityService.hashData(\n     |                                      `- error: value of type 'any SecurityProviderProtocol' has no member 'hashData'\n 558 |       data: operation.data,\n 559 |       algorithm: algorithm\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:666:32: error: value of type 'RetrieveKey' has no member 'keyType'\n 664 |           \"operation\": \"retrieveKey\",\n 665 |           \"keyIdentifier\": operation.identifier,\n 666 |           \"keyType\": operation.keyType ?? \"symmetric\"\n     |                                `- error: value of type 'RetrieveKey' has no member 'keyType'\n 667 |         ]\n 668 |       )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:703:18: error: extra argument 'error' in call\n 701 |             .with(key: \"key_id\", value: operation.identifier, privacyLevel: .private)\n 702 |             .with(key: \"error\", value: error.localizedDescription, privacyLevel: .private),\n 703 |           error: error\n     |                  `- error: extra argument 'error' in call\n 704 |         )\n 705 |       )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:745:31: error: value of type 'DeleteKey' has no member 'forced'\n 743 |           \"operation\": \"deleteKey\",\n 744 |           \"keyIdentifier\": operation.identifier,\n 745 |           \"forced\": operation.forced ? \"true\" : \"false\"\n     |                               `- error: value of type 'DeleteKey' has no member 'forced'\n 746 |         ]\n 747 |       )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:798:44: error: value of type 'any SecurityProviderProtocol' has no member 'saveSecret'\n 796 | \n 797 |     // Store the secret with the provided identifier or generate a new one\n 798 |     let secretID=try await securityService.saveSecret(\n     |                                            `- error: value of type 'any SecurityProviderProtocol' has no member 'saveSecret'\n 799 |       secret: operation.secret,\n 800 |       identifier: operation.identifier\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:845:44: error: value of type 'any SecurityProviderProtocol' has no member 'getSecret'\n 843 |     // Retrieve secret\n 844 |     do {\n 845 |       let result=try await securityService.getSecret(\n     |                                            `- error: value of type 'any SecurityProviderProtocol' has no member 'getSecret'\n 846 |         identifier: operation.identifier\n 847 |       )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:870:18: error: extra argument 'error' in call\n 868 |             .with(key: \"secret_id\", value: operation.identifier, privacyLevel: .private)\n 869 |             .with(key: \"error\", value: error.localizedDescription, privacyLevel: .private),\n 870 |           error: error\n     |                  `- error: extra argument 'error' in call\n 871 |         )\n 872 |       )\n\npackages/UmbraImplementations/Sources/APIServices/Domains/SecurityDomainHandler.swift:904:33: error: value of type 'any SecurityProviderProtocol' has no member 'removeSecret'\n 902 | \n 903 |     // Delete the secret\n 904 |     _=try await securityService.removeSecret(\n     |                                 `- error: value of type 'any SecurityProviderProtocol' has no member 'removeSecret'\n 905 |       identifier: operation.identifier\n 906 |     )\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:437:36: error: type 'BackupOperationError' has no member 'snapshotNotFound'\n435 |           return snapshot\n436 |         }\n437 |         throw BackupOperationError.snapshotNotFound(id: id)\n    |                                    `- error: type 'BackupOperationError' has no member 'snapshotNotFound'\n438 |       case let .failure(error):\n439 |         throw error\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:434:25: warning: no calls to throwing functions occur within 'try' expression\n432 |     switch result {\n433 |       case let .success(snapshots):\n434 |         if let snapshot=try? snapshots.first(where: { $0.id == id }) {\n    |                         `- warning: no calls to throwing functions occur within 'try' expression\n435 |           return snapshot\n436 |         }\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:479:52: error: binary operator '??' cannot be applied to operands of type '[String : Data]?' and '[String : Data]'\n477 |       paths: paths.map(\\.path),\n478 |       tags: config.tags,\n479 |       metadata: config.metadata as? [String: Data] ?? [:]\n    |                                                    `- error: binary operator '??' cannot be applied to operands of type '[String : Data]?' and '[String : Data]'\n480 |     )\n481 | \n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:539:22: error: value of type 'SnapshotFile' has no member 'id'\n537 |         return files.map { file in\n538 |           FileEntry(\n539 |             id: file.id, // Using our extension property\n    |                      `- error: value of type 'SnapshotFile' has no member 'id'\n540 |             path: file.path,\n541 |             size: file.size,\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:542:36: error: value of type 'SnapshotFile' has no member 'modificationDate'\n540 |             path: file.path,\n541 |             size: file.size,\n542 |             modificationDate: file.modificationDate ?? Date(), // Using our extension property\n    |                                    `- error: value of type 'SnapshotFile' has no member 'modificationDate'\n543 |             isDirectory: file.type == .directory, // Using our extension property\n544 |             hash: file.hash // Using our extension property\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:543:31: error: value of type 'SnapshotFile' has no member 'type'\n541 |             size: file.size,\n542 |             modificationDate: file.modificationDate ?? Date(), // Using our extension property\n543 |             isDirectory: file.type == .directory, // Using our extension property\n    |                               `- error: value of type 'SnapshotFile' has no member 'type'\n544 |             hash: file.hash // Using our extension property\n545 |           )\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:544:24: error: value of type 'SnapshotFile' has no member 'hash'\n542 |             modificationDate: file.modificationDate ?? Date(), // Using our extension property\n543 |             isDirectory: file.type == .directory, // Using our extension property\n544 |             hash: file.hash // Using our extension property\n    |                        `- error: value of type 'SnapshotFile' has no member 'hash'\n545 |           )\n546 |         }\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:543:40: error: cannot infer contextual base in reference to member 'directory'\n541 |             size: file.size,\n542 |             modificationDate: file.modificationDate ?? Date(), // Using our extension property\n543 |             isDirectory: file.type == .directory, // Using our extension property\n    |                                        `- error: cannot infer contextual base in reference to member 'directory'\n544 |             hash: file.hash // Using our extension property\n545 |           )\n\npackages/UmbraImplementations/Sources/APIServices/Types/BackupAPIOperations.swift:578:9: warning: initialization of immutable value 'snapshot' was never used; consider replacing with assignment to '_' or removing it\n576 |   ) async throws -\u003e RestoreResultDTO {\n577 |     // Get the snapshot\n578 |     let snapshot=try await getSnapshot(id: id, fromRepository: repositoryID)\n    |         `- warning: initialization of immutable value 'snapshot' was never used; consider replacing with assignment to '_' or removing it\n579 | \n580 |     // Start restore\nTarget //packages/UmbraImplementations/Sources/APIServices:APIServices failed to build\nINFO: Elapsed time: 0.920s, Critical Path: 0.79s\nINFO: 12 processes: 11 action cache hit, 10 disk cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator",
    "success": false,
    "start_time": "2025-04-08T00:44:06.71034+01:00",
    "end_time": "2025-04-08T00:44:08.996131+01:00",
    "duration": "2.28578675s",
    "output": "INFO: Invocation ID: 389b1309-829c-4859-aa1c-773243bc7038\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator (16 packages loaded, 135 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/BackupServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/BackupServices:BackupServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/BackupServices/BackupServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:712:45: error: cannot find type 'VerificationResult' in scope\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n713 |     // Create a log context\n714 |     let logContext=BackupLogContext()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:710:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n708 |     snapshotID: String?,\n709 |     verifyData: Bool=true,\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n    |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:60:65: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                 `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:59:26: error: cannot find type 'CancellationToken' in scope\n 57 |     parameters: BackupCreateParameters,\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:129:66: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:128:26: error: cannot find type 'CancellationToken' in scope\n126 |     parameters: BackupRestoreParameters,\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:193:26: error: cannot find type 'CancellationToken' in scope\n191 |   public func listBackups(\n192 |     parameters: BackupListParameters,\n193 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n194 |   ) async throws -\u003e [BackupSnapshot] {\n195 |     // Create the list command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:250:21: error: cannot find type 'DeleteResult' in scope\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n250 |   ) async throws -\u003e DeleteResult {\n    |                     `- error: cannot find type 'DeleteResult' in scope\n251 |     // Create the delete command\n252 |     var command=ResticCommandImpl(arguments: [\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:249:26: error: cannot find type 'CancellationToken' in scope\n247 |   public func deleteBackup(\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n250 |   ) async throws -\u003e DeleteResult {\n251 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:296:26: error: cannot find type 'CancellationToken' in scope\n294 |     pattern: String?=nil,\n295 |     progressReporter _: BackupProgressReporter?,\n296 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n297 |   ) async throws -\u003e [SnapshotFileEntry] {\n298 |     // Create the find command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:664:80: error: cannot find type 'DeleteResult' in scope\n662 |    * Parse delete result from JSON output.\n663 |    */\n664 |   private func parseDeleteResult(output: String, snapshotID: String) throws -\u003e DeleteResult {\n    |                                                                                `- error: cannot find type 'DeleteResult' in scope\n665 |     guard let data=output.data(using: .utf8) else {\n666 |       throw BackupOperationError.parsingFailure(\"Could not convert output to data\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:707:70: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                      `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:706:26: error: cannot find type 'CancellationToken' in scope\n704 |     parameters: BackupMaintenanceParameters,\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:218:31: error: extra arguments at positions #3, #8 in call\n216 |         if let progressReporter=reporter {\n217 |           await progressReporter.reportProgress(\n218 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n219 |               phase: .processing,\n220 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:376:31: error: extra arguments at positions #3, #8 in call\n374 |         if let reporter {\n375 |           await reporter.reportProgress(\n376 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n377 |               phase: .processing,\n378 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:279:31: error: extra arguments at positions #3, #8 in call\n277 |         if let reporter {\n278 |           await reporter.reportProgress(\n279 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n280 |               phase: .processing,\n281 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:65:45: error: cannot find type 'CancellationToken' in scope\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n    |                                             `- error: cannot find type 'CancellationToken' in scope\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:67:24: error: cannot find type 'CancellationToken' in scope\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 68 |   ) async throws -\u003e R {\n 69 |     // Create a log context for this operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:18:15: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cAny, Error\u003e]=[:]\n    |               `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 19 | \n 20 |   /// Storage for active cancellation tokens\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               |                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               `- warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationHandlerProtocol.swift:52:8: note: a function type must be marked '@Sendable' to conform to 'Sendable'\n50 |    * - Throws: Error if the operation fails or is cancelled\n51 |    */\n52 |   func withCancellationSupport\u003cT\u003e(\n   |        `- note: a function type must be marked '@Sendable' to conform to 'Sendable'\n53 |     _ operation: @escaping () async throws -\u003e T,\n54 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:424:40: error: cannot find type 'SnapshotFileType' in scope\n422 | \n423 |   // Convert SnapshotFileType to BackupFileType\n424 |   private func convertFileType(_ type: SnapshotFileType?) -\u003e BackupFileType {\n    |                                        `- error: cannot find type 'SnapshotFileType' in scope\n425 |     guard let type else { return .file }\n426 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:332:47: error: cannot find type 'BackupCreationParameters' in scope\n330 | extension BackupCreateParameters {\n331 |   /// Convert to BackupInterfaces.BackupCreationParameters\n332 |   public func toBackupCreationParameters() -\u003e BackupCreationParameters {\n    |                                               `- error: cannot find type 'BackupCreationParameters' in scope\n333 |     BackupCreationParameters(\n334 |       sources: sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:342:39: error: cannot find type 'BackupCreationParameters' in scope\n340 | \n341 |   /// Create from BackupInterfaces.BackupCreationParameters\n342 |   public static func from(parameters: BackupCreationParameters) -\u003e BackupCreateParameters {\n    |                                       `- error: cannot find type 'BackupCreationParameters' in scope\n343 |     BackupCreateParameters(\n344 |       sources: parameters.sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:354:63: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n352 | extension BackupRestoreParameters {\n353 |   /// Convert to BackupInterfaces.BackupRestoreParameters\n354 |   public func toBackupRestoreParameters() -\u003e BackupInterfaces.BackupRestoreParameters {\n    |                                                               `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n355 |     BackupInterfaces.BackupRestoreParameters(\n356 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:368:8: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n366 |   public static func from(\n367 |     parameters: BackupInterfaces\n368 |       .BackupRestoreParameters\n    |        `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n369 |   ) -\u003e BackupRestoreParameters {\n370 |     BackupRestoreParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:382:60: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n380 | extension BackupListParameters {\n381 |   /// Convert to BackupInterfaces.BackupListParameters\n382 |   public func toBackupListParameters() -\u003e BackupInterfaces.BackupListParameters {\n    |                                                            `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n383 |     BackupInterfaces.BackupListParameters(\n384 |       tags: tags,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:396:8: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n394 |   public static func from(\n395 |     parameters: BackupInterfaces\n396 |       .BackupListParameters\n    |        `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n397 |   ) -\u003e BackupListParameters {\n398 |     BackupListParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:217:41: error: cannot find type 'VerificationResult' in scope\n215 | extension BackupVerificationResultDTO {\n216 |   /// Convert this DTO to a BackupInterfaces.VerificationResult\n217 |   public func toVerificationResult() -\u003e VerificationResult {\n    |                                         `- error: cannot find type 'VerificationResult' in scope\n218 |     VerificationResult(\n219 |       verified: verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:231:47: error: cannot find type 'VerificationResult' in scope\n229 | \n230 |   /// Create a BackupVerificationResultDTO from a BackupInterfaces.VerificationResult\n231 |   public static func from(verificationResult: VerificationResult) -\u003e BackupVerificationResultDTO {\n    |                                               `- error: cannot find type 'VerificationResult' in scope\n232 |     BackupVerificationResultDTO(\n233 |       verified: verificationResult.verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:245:39: error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n243 | }\n244 | \n245 | extension BackupVerificationResultDTO.VerificationIssue {\n    |                                       `- error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n246 |   /// Convert this DTO to a BackupInterfaces.VerificationIssue\n247 |   public func toVerificationIssue() -\u003e VerificationResult.VerificationIssue {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:271:39: error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n269 | }\n270 | \n271 | extension BackupVerificationResultDTO.RepairSummary {\n    |                                       `- error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n272 |   /// Convert this DTO to a BackupInterfaces.RepairSummary\n273 |   public func toRepairSummary() -\u003e VerificationResult.RepairSummary {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:294:39: error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n292 | }\n293 | \n294 | extension BackupVerificationResultDTO.RepairAction {\n    |                                       `- error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n295 |   /// Convert this DTO to a BackupInterfaces.RepairAction\n296 |   public func toRepairAction() -\u003e VerificationResult.RepairAction {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:27:15: warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n25 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken {\n26 |   private let token: BackupOperationCancellationToken\n27 |   private var _isCancelled: Bool=false\n   |               `- warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n28 | \n29 |   init(token: BackupOperationCancellationToken) {\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:39:9: warning: initialization of immutable value 'operationsService' was never used; consider replacing with assignment to '_' or removing it\n 37 | \n 38 |     // Create operations service\n 39 |     let operationsService=BackupOperationsService(\n    |         `- warning: initialization of immutable value 'operationsService' was never used; consider replacing with assignment to '_' or removing it\n 40 |       resticService: resticService,\n 41 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:47:9: warning: initialization of immutable value 'operationExecutor' was never used; consider replacing with assignment to '_' or removing it\n 45 | \n 46 |     // Create operation executor\n 47 |     let operationExecutor=BackupOperationExecutor(\n    |         `- warning: initialization of immutable value 'operationExecutor' was never used; consider replacing with assignment to '_' or removing it\n 48 |       logger: logger,\n 49 |       cancellationHandler: cancellationHandler,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:43:22: error: extra arguments at positions #2, #3 in call\n 41 |     let defaultMessage=\"Starting backup operation: \\(operation)\"\n 42 | \n 43 |     await logger.info(\n    |                      `- error: extra arguments at positions #2, #3 in call\n 44 |       message ?? defaultMessage,\n 45 |       metadata: logContext.toPrivacyMetadata(),\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:44:32: error: missing argument for parameter 'context' in call\n 42 | \n 43 |     await logger.info(\n 44 |       message ?? defaultMessage,\n    |                                `- error: missing argument for parameter 'context' in call\n 45 |       metadata: logContext.toPrivacyMetadata(),\n 46 |       source: \"BackupService\"\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:67:18: error: no exact matches in call to instance method 'info'\n 65 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"success\", privacy: .public)\n 66 | \n 67 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 68 |       message ?? defaultMessage,\n 69 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:91:18: error: no exact matches in call to instance method 'info'\n 89 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n 90 | \n 91 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 92 |       message ?? defaultMessage,\n 93 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:119:88: error: value of type 'BackupError' has no member 'code'\n117 |     // Add error details with appropriate privacy levels\n118 |     if let backupError=error as? BackupError {\n119 |       metadata[\"errorCode\"]=PrivacyMetadataValue(value: String(describing: backupError.code),\n    |                                                                                        `- error: value of type 'BackupError' has no member 'code'\n120 |                                                  privacy: .public)\n121 |       metadata[\"errorMessage\"]=PrivacyMetadataValue(value: backupError.localizedDescription,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:125:39: error: value of type 'BackupError' has no member 'context'\n123 | \n124 |       // Add structured error context if available\n125 |       if let errorContext=backupError.context {\n    |                                       `- error: value of type 'BackupError' has no member 'context'\n126 |         for (key, value) in errorContext {\n127 |           metadata[\"error_\\(key)\"]=PrivacyMetadataValue(value: value, privacy: .private)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:137:18: error: no exact matches in call to instance method 'error'\n135 |     }\n136 | \n137 |     await logger.error(\n    |                  |- error: no exact matches in call to instance method 'error'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n138 |       message ?? defaultMessage,\n139 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:166:22: error: no exact matches in call to instance method 'info'\n164 |         metadata[\"description\"]=PrivacyMetadataValue(value: description, privacy: .public)\n165 | \n166 |         await logger.info(\n    |                      |- error: no exact matches in call to instance method 'info'\n    |                      |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                      `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n167 |           \"Initialising backup operation: \\(operation)\",\n168 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:179:22: error: no exact matches in call to instance method 'info'\n177 |                                                          privacy: .public)\n178 | \n179 |         await logger.info(\n    |                      |- error: no exact matches in call to instance method 'info'\n    |                      |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                      `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n180 |           \"Processing backup operation: \\(operation) - \\(phase) (\\(String(format: \"%.1f%%\", percentComplete * 100)))\",\n181 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:188:22: error: no exact matches in call to instance method 'info'\n186 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"completed\", privacy: .public)\n187 | \n188 |         await logger.info(\n    |                      |- error: no exact matches in call to instance method 'info'\n    |                      |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                      `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n189 |           \"Completed backup operation: \\(operation)\",\n190 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:197:22: error: no exact matches in call to instance method 'info'\n195 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n196 | \n197 |         await logger.info(\n    |                      |- error: no exact matches in call to instance method 'info'\n    |                      |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                      `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n198 |           \"Cancelled backup operation: \\(operation)\",\n199 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:218:22: error: no exact matches in call to instance method 'error'\n216 |         }\n217 | \n218 |         await logger.error(\n    |                      |- error: no exact matches in call to instance method 'error'\n    |                      |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                      `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n219 |           \"Failed backup operation: \\(operation)\",\n220 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupCommandFactory.swift:178:9: warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n176 |   ) throws -\u003e ResticCommand {\n177 |     // Determine base command from maintenance type\n178 |     var baseCommand=switch type {\n    |         `- warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n179 |       case .check:\n180 |         \"check\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:712:45: error: cannot find type 'VerificationResult' in scope\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n713 |     // Create a log context\n714 |     let logContext=BackupLogContext()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:710:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n708 |     snapshotID: String?,\n709 |     verifyData: Bool=true,\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n    |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:65:45: error: cannot find type 'CancellationToken' in scope\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n    |                                             `- error: cannot find type 'CancellationToken' in scope\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:67:24: error: cannot find type 'CancellationToken' in scope\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 68 |   ) async throws -\u003e R {\n 69 |     // Create a log context for this operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:60:65: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                 `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:59:26: error: cannot find type 'CancellationToken' in scope\n 57 |     parameters: BackupCreateParameters,\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:210:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n208 |         value: result,\n209 |         progressStream: progressReporter.stream,\n210 |         metadata: metadata\n    |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n211 |       )\n212 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:226:26: error: generic parameter 'some Sendable' could not be inferred\n224 | \n225 |       // Log success\n226 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n227 |         context: enhancedContext,\n228 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:129:66: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:128:26: error: cannot find type 'CancellationToken' in scope\n126 |     parameters: BackupRestoreParameters,\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:364:26: error: generic parameter 'some Sendable' could not be inferred\n362 | \n363 |       // Log success\n364 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n365 |         context: enhancedContext,\n366 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:440:20: error: extra argument 'listOptions' in call\n438 |       before: before,\n439 |       after: after,\n440 |       listOptions: listOptions\n    |                    `- error: extra argument 'listOptions' in call\n441 |     )\n442 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:445:49: error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n443 |     do {\n444 |       // Execute the operation\n445 |       let snapshots=try await operationsService.listSnapshots(parameters: parameters)\n    |                                                 `- error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n446 | \n447 |       // Record the end time\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:460:26: error: generic parameter 'some Sendable' could not be inferred\n458 | \n459 |       // Log success\n460 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n461 |         context: enhancedContext,\n462 |         result: snapshots\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:513:40: error: value of type 'DeleteOptions' has no member 'prune'\n511 |     let parameters=BackupDeleteParameters(\n512 |       snapshotID: snapshotID,\n513 |       pruneAfterDelete: deleteOptions?.prune ?? false\n    |                                        `- error: value of type 'DeleteOptions' has no member 'prune'\n514 |     )\n515 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:250:21: error: cannot find type 'DeleteResult' in scope\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n250 |   ) async throws -\u003e DeleteResult {\n    |                     `- error: cannot find type 'DeleteResult' in scope\n251 |     // Create the delete command\n252 |     var command=ResticCommandImpl(arguments: [\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:249:26: error: cannot find type 'CancellationToken' in scope\n247 |   public func deleteBackup(\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n250 |   ) async throws -\u003e DeleteResult {\n251 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:567:26: error: generic parameter 'some Sendable' could not be inferred\n565 | \n566 |       // Log success\n567 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n568 |         context: enhancedContext,\n569 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:707:70: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                      `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:706:26: error: cannot find type 'CancellationToken' in scope\n704 |     parameters: BackupMaintenanceParameters,\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:660:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n658 |         value: result,\n659 |         progressStream: progressReporter.stream,\n660 |         metadata: metadata\n    |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n661 |       )\n662 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:670:26: error: generic parameter 'some Sendable' could not be inferred\n668 | \n669 |       // Log success\n670 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n671 |         context: enhancedContext,\n672 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:734:19: error: type 'BackupOperation' has no member 'verifyBackup'\n732 |     let token=BackupOperationToken(\n733 |       id: UUID(),\n734 |       operation: .verifyBackup,\n    |                   `- error: type 'BackupOperation' has no member 'verifyBackup'\n735 |       cancellable: true\n736 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:747:30: error: type 'BackupVerifyParameters' has no member 'RepairMode'\n745 |     // Create DTO parameters for the operation using adapter pattern\n746 |     let localRepairMode=repairMode.map {\n747 |       BackupVerifyParameters.RepairMode(rawValue: $0.rawValue) ?? .reportOnly\n    |                              `- error: type 'BackupVerifyParameters' has no member 'RepairMode'\n748 |     }\n749 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:750:50: error: type 'VerifyOptions' has no member 'from'\n748 |     }\n749 | \n750 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n    |                                                  `- error: type 'VerifyOptions' has no member 'from'\n751 | \n752 |     let parameters=BackupVerifyParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:752:42: error: extra arguments at positions #2, #3, #4 in call\n750 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n751 | \n752 |     let parameters=BackupVerifyParameters(\n    |                                          `- error: extra arguments at positions #2, #3, #4 in call\n753 |       snapshotID: snapshotID,\n754 |       verifyData: verifyData,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:753:29: error: missing argument for parameter 'verifyOptions' in call\n751 | \n752 |     let parameters=BackupVerifyParameters(\n753 |       snapshotID: snapshotID,\n    |                             `- error: missing argument for parameter 'verifyOptions' in call\n754 |       verifyData: verifyData,\n755 |       repairMode: localRepairMode,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:761:61: error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n759 |     do {\n760 |       // Execute the operation\n761 |       let verificationResultDTO=try await operationExecutor.executeVerifyOperation(\n    |                                                             `- error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n762 |         parameters: parameters,\n763 |         progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:772:26: error: generic parameter 'some Sendable' could not be inferred\n770 | \n771 |       // Log operation success\n772 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n773 |         context: enhancedContext,\n774 |         duration: duration\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:774:19: error: extra argument 'duration' in call\n772 |       await backupLogger.logOperationSuccess(\n773 |         context: enhancedContext,\n774 |         duration: duration\n    |                   `- error: extra argument 'duration' in call\n775 |       )\n776 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:792:29: error: value of type 'any Error' has no member 'asBackupOperationError'\n790 |     } catch {\n791 |       // Map error\n792 |       let backupError=error.asBackupOperationError\n    |                             `- error: value of type 'any Error' has no member 'asBackupOperationError'\n793 | \n794 |       // Log error\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:831:37: error: extra argument 'error' in call\n829 |       await backupLogger.logOperationFailure(\n830 |         context: logContext,\n831 |         error: BackupOperationError.operationNotFound(\"Operation with ID \\(operationID) not found\")\n    |                                     `- error: extra argument 'error' in call\n832 |       )\n833 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:831:37: error: type 'BackupOperationError' has no member 'operationNotFound'\n829 |       await backupLogger.logOperationFailure(\n830 |         context: logContext,\n831 |         error: BackupOperationError.operationNotFound(\"Operation with ID \\(operationID) not found\")\n    |                                     `- error: type 'BackupOperationError' has no member 'operationNotFound'\n832 |       )\n833 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:842:12: error: extra argument 'error' in call\n840 |         context: logContext,\n841 |         error: BackupOperationError\n842 |           .operationNotCancellable(\"Operation \\(token.operation) cannot be cancelled\")\n    |            `- error: extra argument 'error' in call\n843 |       )\n844 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:842:12: error: type 'BackupOperationError' has no member 'operationNotCancellable'\n840 |         context: logContext,\n841 |         error: BackupOperationError\n842 |           .operationNotCancellable(\"Operation \\(token.operation) cannot be cancelled\")\n    |            `- error: type 'BackupOperationError' has no member 'operationNotCancellable'\n843 |       )\n844 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:852:26: error: generic parameter 'some Sendable' could not be inferred\n850 | \n851 |       // Log success\n852 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n853 |         context: logContext,\n854 |         message: \"Operation cancelled successfully\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:862:16: error: extra argument 'error' in call\n860 |       await backupLogger.logOperationFailure(\n861 |         context: logContext,\n862 |         error: error\n    |                `- error: extra argument 'error' in call\n863 |       )\n864 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:877:11: error: cannot assign to property: 'cancelled' setter is inaccessible\n875 |   private func cancelOperationImpl(token: BackupOperationToken) async throws {\n876 |     // Signal cancellation to the operation\n877 |     token.cancelled=true\n    |           `- error: cannot assign to property: 'cancelled' setter is inaccessible\n878 | \n879 |     // Remove from active operations\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:888:24: error: value of type 'BackupLogger' has no member 'logInfo'\n886 |       .withPublic(key: \"operationType\", value: String(describing: token.operation))\n887 | \n888 |     await backupLogger.logInfo(\n    |                        `- error: value of type 'BackupLogger' has no member 'logInfo'\n889 |       context: logContext,\n890 |       message: \"Operation cancellation complete\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:907:45: error: cannot find type 'RepositoryError' in scope\n905 |     } else if error is CancellationError {\n906 |       .operationCancelled(\"Operation was cancelled\")\n907 |     } else if let repositoryError=error as? RepositoryError {\n    |                                             `- error: cannot find type 'RepositoryError' in scope\n908 |       .repositoryError(repositoryError)\n909 |     } else if let timeout=error as? TimeoutError {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:930:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n928 | \n929 |     // Map known error types\n930 |     if let nsError=error as? NSError {\n    |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n931 |       switch nsError.domain {\n932 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:935:19: error: type 'BackupOperationError' has no member 'fileSystemError'\n933 |           return .networkError(\"Network error: \\(nsError.localizedDescription)\")\n934 |         case NSCocoaErrorDomain:\n935 |           return .fileSystemError(\"File system error: \\(nsError.localizedDescription)\")\n    |                   `- error: type 'BackupOperationError' has no member 'fileSystemError'\n936 |         default:\n937 |           break\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:942:13: error: type 'BackupOperationError' has no member 'unknownError'\n940 | \n941 |     // Default to unknown error with the original description\n942 |     return .unknownError(\"Operation failed: \\(error.localizedDescription)\")\n    |             `- error: type 'BackupOperationError' has no member 'unknownError'\n943 |   }\n944 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:954:13: warning: result of call to 'cancelOperation(id:)' is unused\n952 | \n953 |     for (id, _) in activeOperationsCancellationTokens {\n954 |       await cancelOperation(id: id)\n    |             `- warning: result of call to 'cancelOperation(id:)' is unused\n955 |     }\n956 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:974:49: error: value of type 'String' has no member 'uuidString'\n972 |     let logContext=BackupLogContext()\n973 |       .withOperation(\"cancelOperation\")\n974 |       .withPublic(key: \"operationID\", value: id.uuidString)\n    |                                                 `- error: value of type 'String' has no member 'uuidString'\n975 | \n976 |     // Log cancellation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:980:29: error: value of type 'BackupOperationExecutor' has no member 'cancelOperation'\n978 | \n979 |     // Cancel the operation\n980 |     await operationExecutor.cancelOperation(id: token.id)\n    |                             `- error: value of type 'BackupOperationExecutor' has no member 'cancelOperation'\n981 | \n982 |     // Remove the token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:193:26: error: cannot find type 'CancellationToken' in scope\n191 |   public func listBackups(\n192 |     parameters: BackupListParameters,\n193 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n194 |   ) async throws -\u003e [BackupSnapshot] {\n195 |     // Create the list command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:296:26: error: cannot find type 'CancellationToken' in scope\n294 |     pattern: String?=nil,\n295 |     progressReporter _: BackupProgressReporter?,\n296 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n297 |   ) async throws -\u003e [SnapshotFileEntry] {\n298 |     // Create the find command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:664:80: error: cannot find type 'DeleteResult' in scope\n662 |    * Parse delete result from JSON output.\n663 |    */\n664 |   private func parseDeleteResult(output: String, snapshotID: String) throws -\u003e DeleteResult {\n    |                                                                                `- error: cannot find type 'DeleteResult' in scope\n665 |     guard let data=output.data(using: .utf8) else {\n666 |       throw BackupOperationError.parsingFailure(\"Could not convert output to data\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:62:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n 64 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:63:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 64 |       progressContinuation=continuation\n 65 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:63:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n 64 |       progressContinuation=continuation\n 65 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:69:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 67 |     // Create a progress handler that forwards to both the reporter and the stream\n 68 |     let progressHandler={ [progressReporter, progressContinuation] (\n 69 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 70 |     ) async in\n 71 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:96:25: error: no exact matches in call to instance method 'append'\n 94 |     if let excludePaths = parameters.excludePaths, !excludePaths.isEmpty {\n 95 |       command.arguments.append(\"--exclude\")\n 96 |       command.arguments.append(contentsOf: excludePaths)\n    |                         `- error: no exact matches in call to instance method 'append'\n 97 |     }\n 98 | \n\nSwift.Array.append:2:33: note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Element' == 'S.Element')\n1 | generic struct Array {\n2 | @inlinable public mutating func append\u003cS\u003e(contentsOf newElements: __owned S) where Element == S.Element, S : Sequence}\n  |                                 `- note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Element' == 'S.Element')\n3 | \n\nSwift.RangeReplaceableCollection.append:2:33: note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n1 | protocol RangeReplaceableCollection {\n2 | @inlinable public mutating func append\u003cS\u003e(contentsOf newElements: __owned S) where S : Sequence, Self.Element == S.Element}\n  |                                 `- note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:109:71: error: missing argument for parameter 'sources' in call\n107 | \n108 |     // Parse the result\n109 |     let backupResult=try resultParser.parseBackupResult(output: output)\n    |                                                                       `- error: missing argument for parameter 'sources' in call\n110 | \n111 |     // Return the result and the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:16:15: note: 'parseBackupResult(output:sources:)' declared here\n 14 |   /// - Returns: A backup result with details about the operation\n 15 |   /// - Throws: BackupError if parsing fails\n 16 |   public func parseBackupResult(output: String, sources: [URL]) throws -\u003e BackupResult {\n    |               `- note: 'parseBackupResult(output:sources:)' declared here\n 17 |     guard !output.isEmpty else {\n 18 |       throw BackupError.parsingError(details: \"Empty output from backup command\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:131:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n133 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:132:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n133 |       progressContinuation=continuation\n134 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:132:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n133 |       progressContinuation=continuation\n134 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:138:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n136 |     // Create a progress handler that forwards to both the reporter and the stream\n137 |     let progressHandler={ [progressReporter, progressContinuation] (\n138 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n139 |     ) async in\n140 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:157:18: error: cannot convert value of type 'URL' to expected element type 'Array\u003cString\u003e.ArrayLiteralElement' (aka 'String')\n155 |       parameters.snapshotID,\n156 |       \"--target\",\n157 |       parameters.targetPath\n    |                  `- error: cannot convert value of type 'URL' to expected element type 'Array\u003cString\u003e.ArrayLiteralElement' (aka 'String')\n158 |     ])\n159 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:176:73: error: missing argument for parameter 'targetPath' in call\n174 | \n175 |     // Parse the result\n176 |     let restoreResult=try resultParser.parseRestoreResult(output: output)\n    |                                                                         `- error: missing argument for parameter 'targetPath' in call\n177 | \n178 |     // Return the result and the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:63:15: note: 'parseRestoreResult(output:targetPath:)' declared here\n 61 |   /// - Returns: A RestoreResult object\n 62 |   /// - Throws: BackupError if parsing fails\n 63 |   public func parseRestoreResult(output: String, targetPath: URL) throws -\u003e RestoreResult {\n    |               `- note: 'parseRestoreResult(output:targetPath:)' declared here\n 64 |     // Simple parsing - look for file restoration lines\n 65 |     let lines=output.components(separatedBy: .newlines)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:353:55: error: type 'BackupOperation' has no member 'verifyBackup'\n351 |       // Forward to the progress reporter if provided\n352 |       if let reporter=progressReporter {\n353 |         await reporter.reportProgress(progress, for: .verifyBackup)\n    |                                                       `- error: type 'BackupOperation' has no member 'verifyBackup'\n354 |       }\n355 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:376:11: error: cannot find 'snapshotService' in scope\n374 |       let snapshot=try await (\n375 |         snapshotID != nil ?\n376 |           snapshotService.getSnapshot(id: snapshotID!) :\n    |           `- error: cannot find 'snapshotService' in scope\n377 |           snapshotService.getLatestSnapshot()\n378 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:377:11: error: cannot find 'snapshotService' in scope\n375 |         snapshotID != nil ?\n376 |           snapshotService.getSnapshot(id: snapshotID!) :\n377 |           snapshotService.getLatestSnapshot()\n    |           `- error: cannot find 'snapshotService' in scope\n378 |       )\n379 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:382:36: error: type 'BackupOperationError' has no member 'snapshotNotFound'\n380 |       // Early exit if no snapshot found\n381 |       guard let snapshot else {\n382 |         throw BackupOperationError.snapshotNotFound(\n    |                                    `- error: type 'BackupOperationError' has no member 'snapshotNotFound'\n383 |           \"No snapshot found to verify\" + (snapshotID != nil ? \" with ID \\(snapshotID!)\" : \"\")\n384 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:388:7: error: cannot find 'logger' in scope\n386 | \n387 |       // Log verification start\n388 |       logger.info(\n    |       `- error: cannot find 'logger' in scope\n389 |         context: backupLogContext.withOperation(\"verifyBackup\")\n390 |           .withPublic(key: \"snapshotID\", value: snapshot.id)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:389:18: error: cannot find 'backupLogContext' in scope\n387 |       // Log verification start\n388 |       logger.info(\n389 |         context: backupLogContext.withOperation(\"verifyBackup\")\n    |                  `- error: cannot find 'backupLogContext' in scope\n390 |           .withPublic(key: \"snapshotID\", value: snapshot.id)\n391 |           .withPublic(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:407:23: error: extra argument 'transferRate' in call\n405 |         totalBytes: 0,\n406 |         estimatedTimeRemaining: nil,\n407 |         transferRate: nil,\n    |                       `- error: extra argument 'transferRate' in call\n408 |         details: \"Analysing snapshot structure\"\n409 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:407:23: error: 'nil' requires a contextual type\n405 |         totalBytes: 0,\n406 |         estimatedTimeRemaining: nil,\n407 |         transferRate: nil,\n    |                       `- error: 'nil' requires a contextual type\n408 |         details: \"Analysing snapshot structure\"\n409 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:412:40: error: cannot find 'snapshotService' in scope\n410 | \n411 |       // Use snapshot service to perform actual verification\n412 |       let verificationResult=try await snapshotService.verifySnapshot(\n    |                                        `- error: cannot find 'snapshotService' in scope\n413 |         id: snapshot.id,\n414 |         fullVerification: verifyOptions?.fullVerification ?? false,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:434:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n432 |         itemsProcessed: Int(Double(totalItems) * 0.25),\n433 |         totalItems: totalItems,\n434 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.25),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n435 |         totalBytes: UInt64(snapshot.stats.totalSize)\n436 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:450:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n448 |         itemsProcessed: Int(Double(totalItems) * 0.5),\n449 |         totalItems: totalItems,\n450 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.5),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n451 |         totalBytes: UInt64(snapshot.stats.totalSize)\n452 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:466:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n464 |         itemsProcessed: Int(Double(totalItems) * 0.75),\n465 |         totalItems: totalItems,\n466 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.75),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n467 |         totalBytes: UInt64(snapshot.stats.totalSize)\n468 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:709:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n711 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n711 |       progressContinuation=continuation\n712 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n711 |       progressContinuation=continuation\n712 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:716:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n714 |     // Create a progress handler that forwards to both the reporter and the stream\n715 |     let progressHandler={ [progressReporter, progressContinuation] (\n716 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n717 |     ) async in\n718 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:758:7: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n756 |     // Report progress\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n    |       `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n759 |         phase: .processing,\n760 |         percentComplete: 0.1,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:758:21: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n756 |     // Report progress\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n    |                     `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n759 |         phase: .processing,\n760 |         percentComplete: 0.1,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:759:9: error: missing argument for parameter 'from' in call\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n759 |         phase: .processing,\n    |         `- error: missing argument for parameter 'from' in call\n760 |         percentComplete: 0.1,\n761 |         currentItem: \"Starting maintenance\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:759:17: error: cannot infer contextual base in reference to member 'processing'\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n759 |         phase: .processing,\n    |                 `- error: cannot infer contextual base in reference to member 'processing'\n760 |         percentComplete: 0.1,\n761 |         currentItem: \"Starting maintenance\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:766:33: error: 'nil' requires a contextual type\n764 |         processedBytes: 0,\n765 |         totalBytes: 0,\n766 |         estimatedTimeRemaining: nil,\n    |                                 `- error: 'nil' requires a contextual type\n767 |         bytesPerSecond: nil,\n768 |         error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:767:25: error: 'nil' requires a contextual type\n765 |         totalBytes: 0,\n766 |         estimatedTimeRemaining: nil,\n767 |         bytesPerSecond: nil,\n    |                         `- error: 'nil' requires a contextual type\n768 |         error: nil\n769 |       ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:768:16: error: 'nil' requires a contextual type\n766 |         estimatedTimeRemaining: nil,\n767 |         bytesPerSecond: nil,\n768 |         error: nil\n    |                `- error: 'nil' requires a contextual type\n769 |       ),\n770 |       for: .maintenance\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:773:46: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n771 |     )\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n    |                                              `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n774 |       phase: .processing,\n775 |       percentComplete: 0.1,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:774:7: error: missing argument for parameter 'from' in call\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n774 |       phase: .processing,\n    |       `- error: missing argument for parameter 'from' in call\n775 |       percentComplete: 0.1,\n776 |       currentItem: \"Starting maintenance\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:774:15: error: cannot infer contextual base in reference to member 'processing'\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n774 |       phase: .processing,\n    |               `- error: cannot infer contextual base in reference to member 'processing'\n775 |       percentComplete: 0.1,\n776 |       currentItem: \"Starting maintenance\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:781:31: error: 'nil' requires a contextual type\n779 |       processedBytes: 0,\n780 |       totalBytes: 0,\n781 |       estimatedTimeRemaining: nil,\n    |                               `- error: 'nil' requires a contextual type\n782 |       bytesPerSecond: nil,\n783 |       error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:782:23: error: 'nil' requires a contextual type\n780 |       totalBytes: 0,\n781 |       estimatedTimeRemaining: nil,\n782 |       bytesPerSecond: nil,\n    |                       `- error: 'nil' requires a contextual type\n783 |       error: nil\n784 |     ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:783:14: error: 'nil' requires a contextual type\n781 |       estimatedTimeRemaining: nil,\n782 |       bytesPerSecond: nil,\n783 |       error: nil\n    |              `- error: 'nil' requires a contextual type\n784 |     ))\n785 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:791:7: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n789 |     // Report completion\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n    |       `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n792 |         phase: .completed,\n793 |         percentComplete: 1.0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:791:21: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n789 |     // Report completion\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n    |                     `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n792 |         phase: .completed,\n793 |         percentComplete: 1.0,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:792:9: error: missing argument for parameter 'from' in call\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n792 |         phase: .completed,\n    |         `- error: missing argument for parameter 'from' in call\n793 |         percentComplete: 1.0,\n794 |         currentItem: \"Maintenance completed\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:792:17: error: cannot infer contextual base in reference to member 'completed'\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n792 |         phase: .completed,\n    |                 `- error: cannot infer contextual base in reference to member 'completed'\n793 |         percentComplete: 1.0,\n794 |         currentItem: \"Maintenance completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:799:33: error: 'nil' requires a contextual type\n797 |         processedBytes: 0,\n798 |         totalBytes: 0,\n799 |         estimatedTimeRemaining: nil,\n    |                                 `- error: 'nil' requires a contextual type\n800 |         bytesPerSecond: nil,\n801 |         error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:800:25: error: 'nil' requires a contextual type\n798 |         totalBytes: 0,\n799 |         estimatedTimeRemaining: nil,\n800 |         bytesPerSecond: nil,\n    |                         `- error: 'nil' requires a contextual type\n801 |         error: nil\n802 |       ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:801:16: error: 'nil' requires a contextual type\n799 |         estimatedTimeRemaining: nil,\n800 |         bytesPerSecond: nil,\n801 |         error: nil\n    |                `- error: 'nil' requires a contextual type\n802 |       ),\n803 |       for: .maintenance\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:806:46: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n804 |     )\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n    |                                              `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n807 |       phase: .completed,\n808 |       percentComplete: 1.0,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:807:7: error: missing argument for parameter 'from' in call\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n807 |       phase: .completed,\n    |       `- error: missing argument for parameter 'from' in call\n808 |       percentComplete: 1.0,\n809 |       currentItem: \"Maintenance completed\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:807:15: error: cannot infer contextual base in reference to member 'completed'\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n807 |       phase: .completed,\n    |               `- error: cannot infer contextual base in reference to member 'completed'\n808 |       percentComplete: 1.0,\n809 |       currentItem: \"Maintenance completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:814:31: error: 'nil' requires a contextual type\n812 |       processedBytes: 0,\n813 |       totalBytes: 0,\n814 |       estimatedTimeRemaining: nil,\n    |                               `- error: 'nil' requires a contextual type\n815 |       bytesPerSecond: nil,\n816 |       error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:815:23: error: 'nil' requires a contextual type\n813 |       totalBytes: 0,\n814 |       estimatedTimeRemaining: nil,\n815 |       bytesPerSecond: nil,\n    |                       `- error: 'nil' requires a contextual type\n816 |       error: nil\n817 |     ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:816:14: error: 'nil' requires a contextual type\n814 |       estimatedTimeRemaining: nil,\n815 |       bytesPerSecond: nil,\n816 |       error: nil\n    |              `- error: 'nil' requires a contextual type\n817 |     ))\n818 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:71:14: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 69 |     if\n 70 |       error is CancellationError ||\n 71 |       (error as? NSError)?.domain == NSURLErrorDomain \u0026\u0026\n    |              `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 72 |       (error as? NSError)?.code == NSURLErrorCancelled\n 73 |     {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:72:14: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 70 |       error is CancellationError ||\n 71 |       (error as? NSError)?.domain == NSURLErrorDomain \u0026\u0026\n 72 |       (error as? NSError)?.code == NSURLErrorCancelled\n    |              `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 73 |     {\n 74 |       return BackupOperationError.operationCancelled(\"Operation was cancelled by the user\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:85:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 83 | \n 84 |     // Map NSError\n 85 |     if let nsError=error as? NSError {\n    |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 86 |       switch nsError.domain {\n 87 |         case NSPOSIXErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:83:40: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n 81 |           // Update progress\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n    |                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n 84 |               phase: .processing,\n 85 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:84:15: error: missing argument for parameter 'from' in call\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n 84 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n 85 |               percentComplete: 0.3,\n 86 |               currentItem: \"Updating snapshot tags\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:84:23: error: cannot infer contextual base in reference to member 'processing'\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n 84 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n 85 |               percentComplete: 0.3,\n 86 |               currentItem: \"Updating snapshot tags\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:91:39: error: 'nil' requires a contextual type\n 89 |               processedBytes: 0,\n 90 |               totalBytes: 0,\n 91 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n 92 |               bytesPerSecond: nil,\n 93 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:92:31: error: 'nil' requires a contextual type\n 90 |               totalBytes: 0,\n 91 |               estimatedTimeRemaining: nil,\n 92 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n 93 |               error: nil\n 94 |             )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:93:22: error: 'nil' requires a contextual type\n 91 |               estimatedTimeRemaining: nil,\n 92 |               bytesPerSecond: nil,\n 93 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n 94 |             )\n 95 |             await reporter.reportProgress(progress, for: .updateTags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:152:40: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n150 |           // Update progress\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n    |                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n153 |               phase: .processing,\n154 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:153:15: error: missing argument for parameter 'from' in call\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n153 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n154 |               percentComplete: 0.3,\n155 |               currentItem: \"Updating snapshot description\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:153:23: error: cannot infer contextual base in reference to member 'processing'\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n153 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n154 |               percentComplete: 0.3,\n155 |               currentItem: \"Updating snapshot description\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:160:39: error: 'nil' requires a contextual type\n158 |               processedBytes: 0,\n159 |               totalBytes: 0,\n160 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n161 |               bytesPerSecond: nil,\n162 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:161:31: error: 'nil' requires a contextual type\n159 |               totalBytes: 0,\n160 |               estimatedTimeRemaining: nil,\n161 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n162 |               error: nil\n163 |             )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:162:22: error: 'nil' requires a contextual type\n160 |               estimatedTimeRemaining: nil,\n161 |               bytesPerSecond: nil,\n162 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n163 |             )\n164 |             await reporter.reportProgress(progress, for: .updateTags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:80:31: error: extra arguments at positions #3, #8 in call\n 78 |         if let progressReporter=reporter {\n 79 |           await progressReporter.reportProgress(\n 80 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n 81 |               phase: .processing,\n 82 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:134:31: error: extra arguments at positions #3, #8 in call\n132 |         if let progressReporter=reporter {\n133 |           await progressReporter.reportProgress(\n134 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n135 |               phase: .processing,\n136 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:218:31: error: extra arguments at positions #3, #8 in call\n216 |         if let progressReporter=reporter {\n217 |           await progressReporter.reportProgress(\n218 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n219 |               phase: .processing,\n220 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:267:9: error: type of expression is ambiguous without a type annotation\n265 |     cancellationToken: BackupCancellationToken?\n266 |   ) async throws -\u003e BackupSnapshotComparisonResult {\n267 |     try await operationExecutor.execute(\n    |         `- error: type of expression is ambiguous without a type annotation\n268 |       parameters: parameters,\n269 |       progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:376:31: error: extra arguments at positions #3, #8 in call\n374 |         if let reporter {\n375 |           await reporter.reportProgress(\n376 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n377 |               phase: .processing,\n378 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:494:31: error: extra arguments at positions #3, #8 in call\n492 |         if let progressReporter=reporter {\n493 |           await progressReporter.reportProgress(\n494 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n495 |               phase: .processing,\n496 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:73:31: error: extra arguments at positions #3, #8 in call\n 71 |         if let progressReporter=reporter {\n 72 |           await progressReporter.reportProgress(\n 73 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n 74 |               phase: .processing,\n 75 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:132:31: error: extra arguments at positions #3, #8 in call\n130 |         if let reporter=progressReporter {\n131 |           await reporter.reportProgress(\n132 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n133 |               phase: .processing,\n134 |               percentComplete: progress,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:157:26: error: cannot call value of non-function type 'Bool'\n155 |         // Check for cancellation in a loop\n156 |         while !Task.isCancelled {\n157 |           if await token.isCancelled() {\n    |                          `- error: cannot call value of non-function type 'Bool'\n158 |             executionTask.cancel()\n159 |             progressTask.cancel()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:279:31: error: extra arguments at positions #3, #8 in call\n277 |         if let reporter {\n278 |           await reporter.reportProgress(\n279 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n280 |               phase: .processing,\n281 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupErrorMapper.swift:43:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n41 | \n42 |     // Handle NSError types\n43 |     if let nsError=error as? NSError {\n   |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n44 |       switch nsError.domain {\n45 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:76:22: error: extra arguments at positions #2, #3 in call\n 74 | \n 75 |     // Log the start of the operation\n 76 |     await logger.info(\n    |                      `- error: extra arguments at positions #2, #3 in call\n 77 |       \"Starting backup operation: \\(parameters.operationType)\",\n 78 |       metadata: nil,\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:77:63: error: missing argument for parameter 'context' in call\n 75 |     // Log the start of the operation\n 76 |     await logger.info(\n 77 |       \"Starting backup operation: \\(parameters.operationType)\",\n    |                                                               `- error: missing argument for parameter 'context' in call\n 78 |       metadata: nil,\n 79 |       source: logContext.getSource()\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:78:17: error: 'nil' requires a contextual type\n 76 |     await logger.info(\n 77 |       \"Starting backup operation: \\(parameters.operationType)\",\n 78 |       metadata: nil,\n    |                 `- error: 'nil' requires a contextual type\n 79 |       source: logContext.getSource()\n 80 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:108:24: error: extra arguments at positions #2, #3 in call\n106 | \n107 |       // Log the completion of the operation\n108 |       await logger.info(\n    |                        `- error: extra arguments at positions #2, #3 in call\n109 |         \"Completed backup operation: \\(parameters.operationType)\",\n110 |         metadata: nil,\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:109:66: error: missing argument for parameter 'context' in call\n107 |       // Log the completion of the operation\n108 |       await logger.info(\n109 |         \"Completed backup operation: \\(parameters.operationType)\",\n    |                                                                  `- error: missing argument for parameter 'context' in call\n110 |         metadata: nil,\n111 |         source: logContext.getSource()\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:110:19: error: 'nil' requires a contextual type\n108 |       await logger.info(\n109 |         \"Completed backup operation: \\(parameters.operationType)\",\n110 |         metadata: nil,\n    |                   `- error: 'nil' requires a contextual type\n111 |         source: logContext.getSource()\n112 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:124:24: error: extra arguments at positions #2, #3 in call\n122 | \n123 |       // Log the cancellation of the operation\n124 |       await logger.info(\n    |                        `- error: extra arguments at positions #2, #3 in call\n125 |         \"Cancelled backup operation: \\(parameters.operationType)\",\n126 |         metadata: nil,\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:125:66: error: missing argument for parameter 'context' in call\n123 |       // Log the cancellation of the operation\n124 |       await logger.info(\n125 |         \"Cancelled backup operation: \\(parameters.operationType)\",\n    |                                                                  `- error: missing argument for parameter 'context' in call\n126 |         metadata: nil,\n127 |         source: logContext.getSource()\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:126:19: error: 'nil' requires a contextual type\n124 |       await logger.info(\n125 |         \"Cancelled backup operation: \\(parameters.operationType)\",\n126 |         metadata: nil,\n    |                   `- error: 'nil' requires a contextual type\n127 |         source: logContext.getSource()\n128 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:145:25: error: extra arguments at positions #2, #3 in call\n143 | \n144 |       // Log the failure of the operation\n145 |       await logger.error(\n    |                         `- error: extra arguments at positions #2, #3 in call\n146 |         \"Failed backup operation: \\(parameters.operationType) - \\(error.localizedDescription)\",\n147 |         metadata: nil,\n\nLoggingInterfaces.LoggingProtocol.error:2:6: note: 'error(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func error(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'error(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:146:95: error: missing argument for parameter 'context' in call\n144 |       // Log the failure of the operation\n145 |       await logger.error(\n146 |         \"Failed backup operation: \\(parameters.operationType) - \\(error.localizedDescription)\",\n    |                                                                                               `- error: missing argument for parameter 'context' in call\n147 |         metadata: nil,\n148 |         source: logContext.getSource()\n\nLoggingInterfaces.LoggingProtocol.error:2:6: note: 'error(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func error(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'error(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:147:19: error: 'nil' requires a contextual type\n145 |       await logger.error(\n146 |         \"Failed backup operation: \\(parameters.operationType) - \\(error.localizedDescription)\",\n147 |         metadata: nil,\n    |                   `- error: 'nil' requires a contextual type\n148 |         source: logContext.getSource()\n149 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:18:15: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cAny, Error\u003e]=[:]\n    |               `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 19 | \n 20 |   /// Storage for active cancellation tokens\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               |                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               `- warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationHandlerProtocol.swift:52:8: note: a function type must be marked '@Sendable' to conform to 'Sendable'\n50 |    * - Throws: Error if the operation fails or is cancelled\n51 |    */\n52 |   func withCancellationSupport\u003cT\u003e(\n   |        `- note: a function type must be marked '@Sendable' to conform to 'Sendable'\n53 |     _ operation: @escaping () async throws -\u003e T,\n54 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:37:36: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 35 |   public func registerOperation(id: String, operation: Task\u003csome Any, Error\u003e) {\n 36 |     // Store the task as Task\u003cAny, Error\u003e for type erasure\n 37 |     activeOperations[id]=operation as? Task\u003cAny, Error\u003e\n    |                                    `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 38 |   }\n 39 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:77:17: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 75 |     // Try to cancel a task-based operation\n 76 |     if let operation=activeOperations[id] {\n 77 |       operation.cancel()\n    |                 `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 78 |       activeOperations[id]=nil\n 79 |       cancelled=true\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:128:12: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n126 |     // Cancel all task-based operations\n127 |     for (_, task) in activeOperations {\n128 |       task.cancel()\n    |            `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n129 |     }\n130 |     activeOperations.removeAll()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:201:14: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n199 | \n200 |     // Transform the operation into a Task\n201 |     let task=Task\u003cT, Error\u003e {\n    |              `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n202 |       do {\n203 |         let result=try await operation()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:201:27: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n199 | \n200 |     // Transform the operation into a Task\n201 |     let task=Task\u003cT, Error\u003e {\n    |                           `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n202 |       do {\n203 |         let result=try await operation()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:213:5: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n211 | \n212 |     // Register the task for cancellation with proper generic type\n213 |     registerOperation(id: operationID, operation: task)\n    |     `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n214 | \n215 |     // If we have a cancellation token, set up a callback\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:232:23: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n230 |           guard let self else { return }\n231 | \n232 |           while !task.isCancelled {\n    |                       `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n233 |             if await isOperationActive(id: operationID) {\n234 |               if await token.isCancelled {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:248:29: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n246 | \n247 |     do {\n248 |       return try await task.value\n    |                             `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n249 |     } catch is CancellationError {\n250 |       throw CancellationError()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:203:30: warning: non-sendable result type 'T' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n201 |     let task=Task\u003cT, Error\u003e {\n202 |       do {\n203 |         let result=try await operation()\n    |                              `- warning: non-sendable result type 'T' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n204 |         operationCompleted(id: operationID)\n205 |         return result\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:248:24: warning: non-sendable type 'Task\u003cT, any Error\u003e' cannot exit actor-isolated context in call to nonisolated property 'value'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n246 | \n247 |     do {\n248 |       return try await task.value\n    |                        `- warning: non-sendable type 'Task\u003cT, any Error\u003e' cannot exit actor-isolated context in call to nonisolated property 'value'; this is an error in the Swift 6 language mode\n249 |     } catch is CancellationError {\n250 |       throw CancellationError()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:248:29: warning: non-sendable type 'T' of nonisolated property 'value' cannot be sent to actor-isolated context; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n246 | \n247 |     do {\n248 |       return try await task.value\n    |                             `- warning: non-sendable type 'T' of nonisolated property 'value' cannot be sent to actor-isolated context; this is an error in the Swift 6 language mode\n249 |     } catch is CancellationError {\n250 |       throw CancellationError()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorMapper.swift:35:21: error: type 'BackupError' has no member 'configurationError'\n 33 | \n 34 |       case let .executableNotFound(path):\n 35 |         BackupError.configurationError(\n    |                     `- error: type 'BackupError' has no member 'configurationError'\n 36 |           details: \"Restic executable not found at path: \\(path)\"\n 37 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:101:18: error: no exact matches in call to instance method 'info'\n 99 | \n100 |     // Log operation start\n101 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n102 |       \"Starting snapshot operation: \\(operationType.rawValue)\",\n103 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:110:27: error: extra arguments at positions #3, #8 in call\n108 |     if let reporter=progressReporter {\n109 |       await reporter.reportProgress(\n110 |         BackupProgressInfo(\n    |                           `- error: extra arguments at positions #3, #8 in call\n111 |           phase: .initialising,\n112 |           percentComplete: 0.0,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:140:29: error: extra arguments at positions #3, #8 in call\n138 |       if let reporter=progressReporter {\n139 |         await reporter.reportProgress(\n140 |           BackupProgressInfo(\n    |                             `- error: extra arguments at positions #3, #8 in call\n141 |             phase: .completed,\n142 |             percentComplete: 1.0,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:160:20: error: no exact matches in call to instance method 'info'\n158 |                                                           privacy: .public)\n159 | \n160 |       await logger.info(\n    |                    |- error: no exact matches in call to instance method 'info'\n    |                    |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                    `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n161 |         \"Completed snapshot operation: \\(operationType.rawValue)\",\n162 |         metadata: completionMetadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:184:29: error: extra arguments at positions #3, #8 in call\n182 |       if let reporter=progressReporter {\n183 |         await reporter.reportProgress(\n184 |           BackupProgressInfo(\n    |                             `- error: extra arguments at positions #3, #8 in call\n185 |             phase: .failed,\n186 |             percentComplete: 1.0,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:207:25: error: extra arguments at positions #2, #3 in call\n205 | \n206 |       // Log error with privacy-aware context\n207 |       await logger.error(\n    |                         `- error: extra arguments at positions #2, #3 in call\n208 |         \"Failed snapshot operation: \\(operationType.rawValue)\",\n209 |         metadata: errorContext.toPrivacyMetadata(),\n\nLoggingInterfaces.LoggingProtocol.error:2:6: note: 'error(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func error(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'error(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:208:63: error: missing argument for parameter 'context' in call\n206 |       // Log error with privacy-aware context\n207 |       await logger.error(\n208 |         \"Failed snapshot operation: \\(operationType.rawValue)\",\n    |                                                               `- error: missing argument for parameter 'context' in call\n209 |         metadata: errorContext.toPrivacyMetadata(),\n210 |         source: source\n\nLoggingInterfaces.LoggingProtocol.error:2:6: note: 'error(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func error(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'error(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:130:48: warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to instance method 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n 75 |    * - Throws: BackupOperationError if the operation fails\n 76 |    */\n 77 |   public func execute\u003cP: SnapshotOperationParameters, R\u003e(\n    |                                                       `- note: consider making generic parameter 'R' conform to the 'Sendable' protocol\n 78 |     parameters: P,\n 79 |     progressReporter: BackupProgressReporter?,\n    :\n128 | \n129 |       // Execute the operation with cancellation support\n130 |       let result=try await cancellationHandler.withCancellationSupport({\n    |                                                `- warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to instance method 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n131 |         try await operation(parameters, progressReporter, cancellationToken)\n132 |       }, cancellationToken: cancellationToken)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:39:18: error: no exact matches in call to instance method 'info'\n 37 |     let defaultMessage=\"Starting snapshot operation: \\(logContext.operation)\"\n 38 | \n 39 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 40 |       message ?? defaultMessage,\n 41 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:59:18: error: no exact matches in call to instance method 'info'\n 57 |     let defaultMessage=\"Completed snapshot operation: \\(logContext.operation)\"\n 58 | \n 59 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 60 |       message ?? defaultMessage,\n 61 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:81:18: error: no exact matches in call to instance method 'error'\n 79 |     let defaultMessage=\"Error during snapshot operation: \\(logContext.operation)\"\n 80 | \n 81 |     await logger.error(\n    |                  |- error: no exact matches in call to instance method 'error'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 82 |       message ?? defaultMessage,\n 83 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:110:18: error: no exact matches in call to instance method 'error'\n108 |     )\n109 | \n110 |     await logger.error(\n    |                  |- error: no exact matches in call to instance method 'error'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n111 |       message,\n112 |       metadata: metadataCollection.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:130:18: error: no exact matches in call to instance method 'info'\n128 |     let defaultMessage=\"Operation completed successfully\"\n129 | \n130 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n131 |       message ?? defaultMessage,\n132 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:170:18: error: no exact matches in call to instance method 'info'\n168 |     }\n169 | \n170 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n171 |       \"Starting snapshot operation: \\(operation)\",\n172 |       metadata: metadataCollection.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:219:18: error: no exact matches in call to instance method 'info'\n217 |     }\n218 | \n219 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n220 |       \"Snapshot operation completed: \\(operation)\",\n221 |       metadata: metadataCollection.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:269:18: error: no exact matches in call to instance method 'error'\n267 |     }\n268 | \n269 |     await logger.error(\n    |                  |- error: no exact matches in call to instance method 'error'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n270 |       \"Error during snapshot operation: \\(operation)\",\n271 |       metadata: metadataCollection.toPrivacyMetadata(),\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:424:40: error: cannot find type 'SnapshotFileType' in scope\n422 | \n423 |   // Convert SnapshotFileType to BackupFileType\n424 |   private func convertFileType(_ type: SnapshotFileType?) -\u003e BackupFileType {\n    |                                        `- error: cannot find type 'SnapshotFileType' in scope\n425 |     guard let type else { return .file }\n426 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:406:75: warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n404 |   // Helper function to calculate total size of changes\n405 |   private func calculateTotalChangeSize(_ difference: BackupSnapshotDifference) -\u003e UInt64 {\n406 |     let addedSize=(difference.addedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n    |                                                                           `- warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n407 |     let modifiedSize=(difference.modifiedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n408 |     return addedSize + modifiedSize\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:407:81: warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n405 |   private func calculateTotalChangeSize(_ difference: BackupSnapshotDifference) -\u003e UInt64 {\n406 |     let addedSize=(difference.addedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n407 |     let modifiedSize=(difference.modifiedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n    |                                                                                 `- warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n408 |     return addedSize + modifiedSize\n409 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:417:28: error: value of type 'SnapshotFile' has no member 'modificationDate'\n415 |         path: file.path,\n416 |         size: file.size ?? 0,\n417 |         lastModified: file.modificationDate ?? Date(),\n    |                            `- error: value of type 'SnapshotFile' has no member 'modificationDate'\n418 |         type: convertFileType(file.type)\n419 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:418:36: error: value of type 'SnapshotFile' has no member 'type'\n416 |         size: file.size ?? 0,\n417 |         lastModified: file.modificationDate ?? Date(),\n418 |         type: convertFileType(file.type)\n    |                                    `- error: value of type 'SnapshotFile' has no member 'type'\n419 |       )\n420 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:417:45: error: extra argument 'lastModified' in call\n415 |         path: file.path,\n416 |         size: file.size ?? 0,\n417 |         lastModified: file.modificationDate ?? Date(),\n    |                                             `- error: extra argument 'lastModified' in call\n418 |         type: convertFileType(file.type)\n419 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:416:29: error: missing argument for parameter 'modifiedTime' in call\n414 |       BackupFile(\n415 |         path: file.path,\n416 |         size: file.size ?? 0,\n    |                             `- error: missing argument for parameter 'modifiedTime' in call\n417 |         lastModified: file.modificationDate ?? Date(),\n418 |         type: convertFileType(file.type)\n\nBackupInterfaces.BackupFile.init:2:8: note: 'init(path:size:modifiedTime:type:permissions:ownerName:groupName:)' declared here\n1 | struct BackupFile {\n2 | public init(path: String, size: UInt64, modifiedTime: Date, type: BackupInterfaces.BackupFileType, permissions: String? = nil, ownerName: String? = nil, groupName: String? = nil)}\n  |        `- note: 'init(path:size:modifiedTime:type:permissions:ownerName:groupName:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:507:11: warning: initialization of immutable value 'unchangedFiles' was never used; consider replacing with assignment to '_' or removing it\n505 | \n506 |       // Process unchanged files\n507 |       let unchangedFiles=diffResult.unchanged?.map { file in\n    |           `- warning: initialization of immutable value 'unchangedFiles' was never used; consider replacing with assignment to '_' or removing it\n508 |         SnapshotFileEntry(\n509 |           path: file.path ?? \"\",\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:81:11: warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n 79 |     if let loggableError=error as? LoggableErrorProtocol {\n 80 |       // Handle loggable errors with enriched metadata\n 81 |       let errorMetadata=loggableError.createMetadataCollection()\n    |           `- warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n 82 |       let formattedMessage=\"[\\(domainName)] \\(loggableError.getLogMessage())\"\n 83 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:83:11: warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n 81 |       let errorMetadata=loggableError.createMetadataCollection()\n 82 |       let formattedMessage=\"[\\(domainName)] \\(loggableError.getLogMessage())\"\n 83 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n    |           `- warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n 84 | \n 85 |       // Create a new context with error information\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:124:11: warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n122 |     if let loggableError=error as? LoggableErrorProtocol {\n123 |       // Handle loggable errors with enriched metadata\n124 |       let errorMetadata=loggableError.createMetadataCollection()\n    |           `- warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n125 |       let formattedMessage=message ?? \"[\\(domainName)] \\(loggableError.getLogMessage())\"\n126 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:126:11: warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n124 |       let errorMetadata=loggableError.createMetadataCollection()\n125 |       let formattedMessage=message ?? \"[\\(domainName)] \\(loggableError.getLogMessage())\"\n126 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n    |           `- warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n127 | \n128 |       // Create a new context with error information\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:332:47: error: cannot find type 'BackupCreationParameters' in scope\n330 | extension BackupCreateParameters {\n331 |   /// Convert to BackupInterfaces.BackupCreationParameters\n332 |   public func toBackupCreationParameters() -\u003e BackupCreationParameters {\n    |                                               `- error: cannot find type 'BackupCreationParameters' in scope\n333 |     BackupCreationParameters(\n334 |       sources: sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:342:39: error: cannot find type 'BackupCreationParameters' in scope\n340 | \n341 |   /// Create from BackupInterfaces.BackupCreationParameters\n342 |   public static func from(parameters: BackupCreationParameters) -\u003e BackupCreateParameters {\n    |                                       `- error: cannot find type 'BackupCreationParameters' in scope\n343 |     BackupCreateParameters(\n344 |       sources: parameters.sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:354:63: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n352 | extension BackupRestoreParameters {\n353 |   /// Convert to BackupInterfaces.BackupRestoreParameters\n354 |   public func toBackupRestoreParameters() -\u003e BackupInterfaces.BackupRestoreParameters {\n    |                                                               `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n355 |     BackupInterfaces.BackupRestoreParameters(\n356 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:368:8: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n366 |   public static func from(\n367 |     parameters: BackupInterfaces\n368 |       .BackupRestoreParameters\n    |        `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n369 |   ) -\u003e BackupRestoreParameters {\n370 |     BackupRestoreParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:382:60: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n380 | extension BackupListParameters {\n381 |   /// Convert to BackupInterfaces.BackupListParameters\n382 |   public func toBackupListParameters() -\u003e BackupInterfaces.BackupListParameters {\n    |                                                            `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n383 |     BackupInterfaces.BackupListParameters(\n384 |       tags: tags,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:396:8: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n394 |   public static func from(\n395 |     parameters: BackupInterfaces\n396 |       .BackupListParameters\n    |        `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n397 |   ) -\u003e BackupListParameters {\n398 |     BackupListParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:413:35: error: extra arguments at positions #2, #3, #4 in call\n411 |   /// Convert to BackupInterfaces.BackupOptions\n412 |   public func toBackupOptions() -\u003e BackupInterfaces.BackupOptions {\n413 |     BackupInterfaces.BackupOptions(\n    |                                   `- error: extra arguments at positions #2, #3, #4 in call\n414 |       compressionLevel: 0,\n415 |       deduplicate: false,\n\nBackupInterfaces.BackupOptions.init:2:8: note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n1 | struct BackupOptions {\n2 | public init(compressionLevel: Int? = nil, maxSize: UInt64? = nil, verifyAfterBackup: Bool = true, useParallelisation: Bool = true, priority: BackupInterfaces.BackupPriority = .normal)}\n  |        `- note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:423:18: error: extra arguments at positions #2, #3, #4 in call\n421 |   /// Create from BackupInterfaces.BackupOptions\n422 |   public static func from(options: BackupInterfaces.BackupOptions) -\u003e BackupOptions {\n423 |     BackupOptions(\n    |                  `- error: extra arguments at positions #2, #3, #4 in call\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n\nBackupInterfaces.BackupOptions.init:2:8: note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n1 | struct BackupOptions {\n2 | public init(compressionLevel: Int? = nil, maxSize: UInt64? = nil, verifyAfterBackup: Bool = true, useParallelisation: Bool = true, priority: BackupInterfaces.BackupPriority = .normal)}\n  |        `- note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:425:28: error: value of type 'BackupOptions' has no member 'deduplicate'\n423 |     BackupOptions(\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n    |                            `- error: value of type 'BackupOptions' has no member 'deduplicate'\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n427 |       metadata: options.metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:426:36: error: value of type 'BackupOptions' has no member 'encryptionAlgorithm'\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n    |                                    `- error: value of type 'BackupOptions' has no member 'encryptionAlgorithm'\n427 |       metadata: options.metadata\n428 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:427:25: error: value of type 'BackupOptions' has no member 'metadata'\n425 |       deduplicate: options.deduplicate,\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n427 |       metadata: options.metadata\n    |                         `- error: value of type 'BackupOptions' has no member 'metadata'\n428 |     )\n429 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:435:36: error: extra arguments at positions #2, #3, #4, #5 in call\n433 |   /// Convert to BackupInterfaces.RestoreOptions\n434 |   public func toRestoreOptions() -\u003e BackupInterfaces.RestoreOptions {\n435 |     BackupInterfaces.RestoreOptions(\n    |                                    `- error: extra arguments at positions #2, #3, #4, #5 in call\n436 |       preservePermissions: false,\n437 |       preserveOwnership: false,\n\nBackupInterfaces.RestoreOptions.init:2:8: note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n1 | struct RestoreOptions {\n2 | public init(overwriteExisting: Bool = false, restorePermissions: Bool = true, verifyAfterRestore: Bool = true, useParallelisation: Bool = true, priority: BackupInterfaces.BackupPriority = .normal)}\n  |        `- note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:446:19: error: extra arguments at positions #2, #3, #4, #5 in call\n444 |   /// Create from BackupInterfaces.RestoreOptions\n445 |   public static func from(options: BackupInterfaces.RestoreOptions) -\u003e RestoreOptions {\n446 |     RestoreOptions(\n    |                   `- error: extra arguments at positions #2, #3, #4, #5 in call\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n\nBackupInterfaces.RestoreOptions.init:2:8: note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n1 | struct RestoreOptions {\n2 | public init(overwriteExisting: Bool = false, restorePermissions: Bool = true, verifyAfterRestore: Bool = true, useParallelisation: Bool = true, priority: BackupInterfaces.BackupPriority = .normal)}\n  |        `- note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:447:36: error: value of type 'RestoreOptions' has no member 'preservePermissions'\n445 |   public static func from(options: BackupInterfaces.RestoreOptions) -\u003e RestoreOptions {\n446 |     RestoreOptions(\n447 |       preservePermissions: options.preservePermissions,\n    |                                    `- error: value of type 'RestoreOptions' has no member 'preservePermissions'\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:448:34: error: value of type 'RestoreOptions' has no member 'preserveOwnership'\n446 |     RestoreOptions(\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n    |                                  `- error: value of type 'RestoreOptions' has no member 'preserveOwnership'\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:449:30: error: value of type 'RestoreOptions' has no member 'preserveTimes'\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n    |                              `- error: value of type 'RestoreOptions' has no member 'preserveTimes'\n450 |       skipExisting: options.skipExisting,\n451 |       metadata: options.metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:450:29: error: value of type 'RestoreOptions' has no member 'skipExisting'\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n    |                             `- error: value of type 'RestoreOptions' has no member 'skipExisting'\n451 |       metadata: options.metadata\n452 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:451:25: error: value of type 'RestoreOptions' has no member 'metadata'\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n451 |       metadata: options.metadata\n    |                         `- error: value of type 'RestoreOptions' has no member 'metadata'\n452 |     )\n453 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:217:41: error: cannot find type 'VerificationResult' in scope\n215 | extension BackupVerificationResultDTO {\n216 |   /// Convert this DTO to a BackupInterfaces.VerificationResult\n217 |   public func toVerificationResult() -\u003e VerificationResult {\n    |                                         `- error: cannot find type 'VerificationResult' in scope\n218 |     VerificationResult(\n219 |       verified: verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:231:47: error: cannot find type 'VerificationResult' in scope\n229 | \n230 |   /// Create a BackupVerificationResultDTO from a BackupInterfaces.VerificationResult\n231 |   public static func from(verificationResult: VerificationResult) -\u003e BackupVerificationResultDTO {\n    |                                               `- error: cannot find type 'VerificationResult' in scope\n232 |     BackupVerificationResultDTO(\n233 |       verified: verificationResult.verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:245:39: error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n243 | }\n244 | \n245 | extension BackupVerificationResultDTO.VerificationIssue {\n    |                                       `- error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n246 |   /// Convert this DTO to a BackupInterfaces.VerificationIssue\n247 |   public func toVerificationIssue() -\u003e VerificationResult.VerificationIssue {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:271:39: error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n269 | }\n270 | \n271 | extension BackupVerificationResultDTO.RepairSummary {\n    |                                       `- error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n272 |   /// Convert this DTO to a BackupInterfaces.RepairSummary\n273 |   public func toRepairSummary() -\u003e VerificationResult.RepairSummary {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:294:39: error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n292 | }\n293 | \n294 | extension BackupVerificationResultDTO.RepairAction {\n    |                                       `- error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n295 |   /// Convert this DTO to a BackupInterfaces.RepairAction\n296 |   public func toRepairAction() -\u003e VerificationResult.RepairAction {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:237:65: error: type 'VerificationIssue' has no member 'from'\n235 |       bytesVerified: verificationResult.bytesVerified,\n236 |       errorCount: verificationResult.errorCount,\n237 |       issues: verificationResult.issues.map { VerificationIssue.from(issue: $0) },\n    |                                                                 `- error: type 'VerificationIssue' has no member 'from'\n238 |       repairSummary: verificationResult.repairSummary.map { RepairSummary.from(summary: $0) },\n239 |       snapshotID: verificationResult.snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:238:75: error: type 'RepairSummary' has no member 'from'\n236 |       errorCount: verificationResult.errorCount,\n237 |       issues: verificationResult.issues.map { VerificationIssue.from(issue: $0) },\n238 |       repairSummary: verificationResult.repairSummary.map { RepairSummary.from(summary: $0) },\n    |                                                                           `- error: type 'RepairSummary' has no member 'from'\n239 |       snapshotID: verificationResult.snapshotID,\n240 |       verificationTime: verificationResult.verificationTime\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:27:15: warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n25 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken {\n26 |   private let token: BackupOperationCancellationToken\n27 |   private var _isCancelled: Bool=false\n   |               `- warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n28 | \n29 |   init(token: BackupOperationCancellationToken) {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:92:16: error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n 90 |       .with(\n 91 |         key: \"repositoryID\",\n 92 |         value: repositoryID,\n    |                |- error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n    |                |- note: coalesce using '??' to provide a default when the optional value contains 'nil'\n    |                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n 93 |         privacy: LoggingTypes.PrivacyClassification.public\n 94 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:97:16: error: value of optional type '[String]?' must be unwrapped to refer to member 'joined' of wrapped base type '[String]'\n 95 |       .with(\n 96 |         key: \"tags\",\n 97 |         value: tags.joined(separator: \", \"),\n    |                |- error: value of optional type '[String]?' must be unwrapped to refer to member 'joined' of wrapped base type '[String]'\n    |                |- note: chain the optional using '?' to access member 'joined' only for non-'nil' base values\n    |                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n 98 |         privacy: LoggingTypes.PrivacyClassification.public\n 99 |       )\nTarget //packages/UmbraImplementations/Sources/BackupCoordinator:BackupCoordinator failed to build\nINFO: Elapsed time: 1.615s, Critical Path: 1.46s\nINFO: 2 processes: 30 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BackupServices:BackupServices",
    "success": false,
    "start_time": "2025-04-08T00:44:08.996157+01:00",
    "end_time": "2025-04-08T00:44:11.177238+01:00",
    "duration": "2.181076792s",
    "output": "INFO: Invocation ID: 5a06272e-524a-457c-b770-4f297c2b9561\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupServices:BackupServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BackupServices:BackupServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BackupServices:BackupServices (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/BackupServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/BackupServices:BackupServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/BackupServices:BackupServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/BackupServices/BackupServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:712:45: error: cannot find type 'VerificationResult' in scope\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n713 |     // Create a log context\n714 |     let logContext=BackupLogContext()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:710:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n708 |     snapshotID: String?,\n709 |     verifyData: Bool=true,\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n    |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:60:65: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                 `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:59:26: error: cannot find type 'CancellationToken' in scope\n 57 |     parameters: BackupCreateParameters,\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:129:66: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:128:26: error: cannot find type 'CancellationToken' in scope\n126 |     parameters: BackupRestoreParameters,\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:193:26: error: cannot find type 'CancellationToken' in scope\n191 |   public func listBackups(\n192 |     parameters: BackupListParameters,\n193 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n194 |   ) async throws -\u003e [BackupSnapshot] {\n195 |     // Create the list command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:250:21: error: cannot find type 'DeleteResult' in scope\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n250 |   ) async throws -\u003e DeleteResult {\n    |                     `- error: cannot find type 'DeleteResult' in scope\n251 |     // Create the delete command\n252 |     var command=ResticCommandImpl(arguments: [\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:249:26: error: cannot find type 'CancellationToken' in scope\n247 |   public func deleteBackup(\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n250 |   ) async throws -\u003e DeleteResult {\n251 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:296:26: error: cannot find type 'CancellationToken' in scope\n294 |     pattern: String?=nil,\n295 |     progressReporter _: BackupProgressReporter?,\n296 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n297 |   ) async throws -\u003e [SnapshotFileEntry] {\n298 |     // Create the find command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:664:80: error: cannot find type 'DeleteResult' in scope\n662 |    * Parse delete result from JSON output.\n663 |    */\n664 |   private func parseDeleteResult(output: String, snapshotID: String) throws -\u003e DeleteResult {\n    |                                                                                `- error: cannot find type 'DeleteResult' in scope\n665 |     guard let data=output.data(using: .utf8) else {\n666 |       throw BackupOperationError.parsingFailure(\"Could not convert output to data\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:707:70: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                      `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:706:26: error: cannot find type 'CancellationToken' in scope\n704 |     parameters: BackupMaintenanceParameters,\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:218:31: error: extra arguments at positions #3, #8 in call\n216 |         if let progressReporter=reporter {\n217 |           await progressReporter.reportProgress(\n218 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n219 |               phase: .processing,\n220 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:376:31: error: extra arguments at positions #3, #8 in call\n374 |         if let reporter {\n375 |           await reporter.reportProgress(\n376 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n377 |               phase: .processing,\n378 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:279:31: error: extra arguments at positions #3, #8 in call\n277 |         if let reporter {\n278 |           await reporter.reportProgress(\n279 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n280 |               phase: .processing,\n281 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:65:45: error: cannot find type 'CancellationToken' in scope\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n    |                                             `- error: cannot find type 'CancellationToken' in scope\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:67:24: error: cannot find type 'CancellationToken' in scope\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 68 |   ) async throws -\u003e R {\n 69 |     // Create a log context for this operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:18:15: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cAny, Error\u003e]=[:]\n    |               `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 19 | \n 20 |   /// Storage for active cancellation tokens\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               |                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               `- warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationHandlerProtocol.swift:52:8: note: a function type must be marked '@Sendable' to conform to 'Sendable'\n50 |    * - Throws: Error if the operation fails or is cancelled\n51 |    */\n52 |   func withCancellationSupport\u003cT\u003e(\n   |        `- note: a function type must be marked '@Sendable' to conform to 'Sendable'\n53 |     _ operation: @escaping () async throws -\u003e T,\n54 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:424:40: error: cannot find type 'SnapshotFileType' in scope\n422 | \n423 |   // Convert SnapshotFileType to BackupFileType\n424 |   private func convertFileType(_ type: SnapshotFileType?) -\u003e BackupFileType {\n    |                                        `- error: cannot find type 'SnapshotFileType' in scope\n425 |     guard let type else { return .file }\n426 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:332:47: error: cannot find type 'BackupCreationParameters' in scope\n330 | extension BackupCreateParameters {\n331 |   /// Convert to BackupInterfaces.BackupCreationParameters\n332 |   public func toBackupCreationParameters() -\u003e BackupCreationParameters {\n    |                                               `- error: cannot find type 'BackupCreationParameters' in scope\n333 |     BackupCreationParameters(\n334 |       sources: sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:342:39: error: cannot find type 'BackupCreationParameters' in scope\n340 | \n341 |   /// Create from BackupInterfaces.BackupCreationParameters\n342 |   public static func from(parameters: BackupCreationParameters) -\u003e BackupCreateParameters {\n    |                                       `- error: cannot find type 'BackupCreationParameters' in scope\n343 |     BackupCreateParameters(\n344 |       sources: parameters.sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:354:63: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n352 | extension BackupRestoreParameters {\n353 |   /// Convert to BackupInterfaces.BackupRestoreParameters\n354 |   public func toBackupRestoreParameters() -\u003e BackupInterfaces.BackupRestoreParameters {\n    |                                                               `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n355 |     BackupInterfaces.BackupRestoreParameters(\n356 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:368:8: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n366 |   public static func from(\n367 |     parameters: BackupInterfaces\n368 |       .BackupRestoreParameters\n    |        `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n369 |   ) -\u003e BackupRestoreParameters {\n370 |     BackupRestoreParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:382:60: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n380 | extension BackupListParameters {\n381 |   /// Convert to BackupInterfaces.BackupListParameters\n382 |   public func toBackupListParameters() -\u003e BackupInterfaces.BackupListParameters {\n    |                                                            `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n383 |     BackupInterfaces.BackupListParameters(\n384 |       tags: tags,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:396:8: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n394 |   public static func from(\n395 |     parameters: BackupInterfaces\n396 |       .BackupListParameters\n    |        `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n397 |   ) -\u003e BackupListParameters {\n398 |     BackupListParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:217:41: error: cannot find type 'VerificationResult' in scope\n215 | extension BackupVerificationResultDTO {\n216 |   /// Convert this DTO to a BackupInterfaces.VerificationResult\n217 |   public func toVerificationResult() -\u003e VerificationResult {\n    |                                         `- error: cannot find type 'VerificationResult' in scope\n218 |     VerificationResult(\n219 |       verified: verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:231:47: error: cannot find type 'VerificationResult' in scope\n229 | \n230 |   /// Create a BackupVerificationResultDTO from a BackupInterfaces.VerificationResult\n231 |   public static func from(verificationResult: VerificationResult) -\u003e BackupVerificationResultDTO {\n    |                                               `- error: cannot find type 'VerificationResult' in scope\n232 |     BackupVerificationResultDTO(\n233 |       verified: verificationResult.verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:245:39: error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n243 | }\n244 | \n245 | extension BackupVerificationResultDTO.VerificationIssue {\n    |                                       `- error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n246 |   /// Convert this DTO to a BackupInterfaces.VerificationIssue\n247 |   public func toVerificationIssue() -\u003e VerificationResult.VerificationIssue {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:271:39: error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n269 | }\n270 | \n271 | extension BackupVerificationResultDTO.RepairSummary {\n    |                                       `- error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n272 |   /// Convert this DTO to a BackupInterfaces.RepairSummary\n273 |   public func toRepairSummary() -\u003e VerificationResult.RepairSummary {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:294:39: error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n292 | }\n293 | \n294 | extension BackupVerificationResultDTO.RepairAction {\n    |                                       `- error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n295 |   /// Convert this DTO to a BackupInterfaces.RepairAction\n296 |   public func toRepairAction() -\u003e VerificationResult.RepairAction {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:27:15: warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n25 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken {\n26 |   private let token: BackupOperationCancellationToken\n27 |   private var _isCancelled: Bool=false\n   |               `- warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n28 | \n29 |   init(token: BackupOperationCancellationToken) {\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:39:9: warning: initialization of immutable value 'operationsService' was never used; consider replacing with assignment to '_' or removing it\n 37 | \n 38 |     // Create operations service\n 39 |     let operationsService=BackupOperationsService(\n    |         `- warning: initialization of immutable value 'operationsService' was never used; consider replacing with assignment to '_' or removing it\n 40 |       resticService: resticService,\n 41 |       repositoryInfo: repositoryInfo,\n\npackages/UmbraImplementations/Sources/BackupServices/Factory/BackupServiceFactory.swift:47:9: warning: initialization of immutable value 'operationExecutor' was never used; consider replacing with assignment to '_' or removing it\n 45 | \n 46 |     // Create operation executor\n 47 |     let operationExecutor=BackupOperationExecutor(\n    |         `- warning: initialization of immutable value 'operationExecutor' was never used; consider replacing with assignment to '_' or removing it\n 48 |       logger: logger,\n 49 |       cancellationHandler: cancellationHandler,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:153:17: error: cannot find type 'BackupProgress' in scope\n151 |    */\n152 |   public func logProgressUpdate(\n153 |     _ progress: BackupProgress,\n    |                 `- error: cannot find type 'BackupProgress' in scope\n154 |     for operation: BackupOperation,\n155 |     logContext: BackupLogContext?=nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:43:22: error: extra arguments at positions #2, #3 in call\n 41 |     let defaultMessage=\"Starting backup operation: \\(operation)\"\n 42 | \n 43 |     await logger.info(\n    |                      `- error: extra arguments at positions #2, #3 in call\n 44 |       message ?? defaultMessage,\n 45 |       metadata: logContext.toPrivacyMetadata(),\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:44:32: error: missing argument for parameter 'context' in call\n 42 | \n 43 |     await logger.info(\n 44 |       message ?? defaultMessage,\n    |                                `- error: missing argument for parameter 'context' in call\n 45 |       metadata: logContext.toPrivacyMetadata(),\n 46 |       source: \"BackupService\"\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:67:18: error: no exact matches in call to instance method 'info'\n 65 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"success\", privacy: .public)\n 66 | \n 67 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 68 |       message ?? defaultMessage,\n 69 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:91:18: error: no exact matches in call to instance method 'info'\n 89 |     metadata[\"status\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n 90 | \n 91 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 92 |       message ?? defaultMessage,\n 93 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:119:88: error: value of type 'BackupError' has no member 'code'\n117 |     // Add error details with appropriate privacy levels\n118 |     if let backupError=error as? BackupError {\n119 |       metadata[\"errorCode\"]=PrivacyMetadataValue(value: String(describing: backupError.code),\n    |                                                                                        `- error: value of type 'BackupError' has no member 'code'\n120 |                                                  privacy: .public)\n121 |       metadata[\"errorMessage\"]=PrivacyMetadataValue(value: backupError.localizedDescription,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:125:39: error: value of type 'BackupError' has no member 'context'\n123 | \n124 |       // Add structured error context if available\n125 |       if let errorContext=backupError.context {\n    |                                       `- error: value of type 'BackupError' has no member 'context'\n126 |         for (key, value) in errorContext {\n127 |           metadata[\"error_\\(key)\"]=PrivacyMetadataValue(value: value, privacy: .private)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:137:18: error: no exact matches in call to instance method 'error'\n135 |     }\n136 | \n137 |     await logger.error(\n    |                  |- error: no exact matches in call to instance method 'error'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n138 |       message ?? defaultMessage,\n139 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:166:22: error: no exact matches in call to instance method 'info'\n164 |         metadata[\"description\"]=PrivacyMetadataValue(value: description, privacy: .public)\n165 | \n166 |         await logger.info(\n    |                      |- error: no exact matches in call to instance method 'info'\n    |                      |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                      `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n167 |           \"Initialising backup operation: \\(operation)\",\n168 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:179:22: error: no exact matches in call to instance method 'info'\n177 |                                                          privacy: .public)\n178 | \n179 |         await logger.info(\n    |                      |- error: no exact matches in call to instance method 'info'\n    |                      |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                      `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n180 |           \"Processing backup operation: \\(operation) - \\(phase) (\\(String(format: \"%.1f%%\", percentComplete * 100)))\",\n181 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:188:22: error: no exact matches in call to instance method 'info'\n186 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"completed\", privacy: .public)\n187 | \n188 |         await logger.info(\n    |                      |- error: no exact matches in call to instance method 'info'\n    |                      |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                      `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n189 |           \"Completed backup operation: \\(operation)\",\n190 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:197:22: error: no exact matches in call to instance method 'info'\n195 |         metadata[\"progressPhase\"]=PrivacyMetadataValue(value: \"cancelled\", privacy: .public)\n196 | \n197 |         await logger.info(\n    |                      |- error: no exact matches in call to instance method 'info'\n    |                      |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                      `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n198 |           \"Cancelled backup operation: \\(operation)\",\n199 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupLoggingAdapter.swift:218:22: error: no exact matches in call to instance method 'error'\n216 |         }\n217 | \n218 |         await logger.error(\n    |                      |- error: no exact matches in call to instance method 'error'\n    |                      |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                      `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n219 |           \"Failed backup operation: \\(operation)\",\n220 |           metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupCommandFactory.swift:178:9: warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n176 |   ) throws -\u003e ResticCommand {\n177 |     // Determine base command from maintenance type\n178 |     var baseCommand=switch type {\n    |         `- warning: variable 'baseCommand' was never mutated; consider changing to 'let' constant\n179 |       case .check:\n180 |         \"check\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:712:45: error: cannot find type 'VerificationResult' in scope\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n    |                                             `- error: cannot find type 'VerificationResult' in scope\n713 |     // Create a log context\n714 |     let logContext=BackupLogContext()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:710:34: error: no type named 'RepairMode' in module 'BackupInterfaces'\n708 |     snapshotID: String?,\n709 |     verifyData: Bool=true,\n710 |     repairMode: BackupInterfaces.RepairMode?=nil,\n    |                                  `- error: no type named 'RepairMode' in module 'BackupInterfaces'\n711 |     options: BackupInterfaces.VerifyOptions?=nil\n712 |   ) async -\u003e Result\u003cBackupOperationResponse\u003cVerificationResult\u003e, BackupOperationError\u003e {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:65:45: error: cannot find type 'CancellationToken' in scope\n 63 |   public func execute\u003cP: BackupOperationParameters, R\u003e(\n 64 |     parameters: P,\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n    |                                             `- error: cannot find type 'CancellationToken' in scope\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:67:24: error: cannot find type 'CancellationToken' in scope\n 65 |     operation: (P, BackupProgressReporter?, CancellationToken?) async throws -\u003e R,\n 66 |     progressReporter: BackupProgressReporter?,\n 67 |     cancellationToken: CancellationToken?\n    |                        `- error: cannot find type 'CancellationToken' in scope\n 68 |   ) async throws -\u003e R {\n 69 |     // Create a log context for this operation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:60:65: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                 `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:59:26: error: cannot find type 'CancellationToken' in scope\n 57 |     parameters: BackupCreateParameters,\n 58 |     progressReporter: BackupProgressReporter?,\n 59 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:210:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n208 |         value: result,\n209 |         progressStream: progressReporter.stream,\n210 |         metadata: metadata\n    |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n211 |       )\n212 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:226:26: error: generic parameter 'some Sendable' could not be inferred\n224 | \n225 |       // Log success\n226 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n227 |         context: enhancedContext,\n228 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:129:66: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:128:26: error: cannot find type 'CancellationToken' in scope\n126 |     parameters: BackupRestoreParameters,\n127 |     progressReporter: BackupProgressReporter?,\n128 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:364:26: error: generic parameter 'some Sendable' could not be inferred\n362 | \n363 |       // Log success\n364 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n365 |         context: enhancedContext,\n366 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:440:20: error: extra argument 'listOptions' in call\n438 |       before: before,\n439 |       after: after,\n440 |       listOptions: listOptions\n    |                    `- error: extra argument 'listOptions' in call\n441 |     )\n442 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:445:49: error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n443 |     do {\n444 |       // Execute the operation\n445 |       let snapshots=try await operationsService.listSnapshots(parameters: parameters)\n    |                                                 `- error: value of type 'BackupOperationsService' has no member 'listSnapshots'\n446 | \n447 |       // Record the end time\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:460:26: error: generic parameter 'some Sendable' could not be inferred\n458 | \n459 |       // Log success\n460 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n461 |         context: enhancedContext,\n462 |         result: snapshots\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:513:40: error: value of type 'DeleteOptions' has no member 'prune'\n511 |     let parameters=BackupDeleteParameters(\n512 |       snapshotID: snapshotID,\n513 |       pruneAfterDelete: deleteOptions?.prune ?? false\n    |                                        `- error: value of type 'DeleteOptions' has no member 'prune'\n514 |     )\n515 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:250:21: error: cannot find type 'DeleteResult' in scope\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n250 |   ) async throws -\u003e DeleteResult {\n    |                     `- error: cannot find type 'DeleteResult' in scope\n251 |     // Create the delete command\n252 |     var command=ResticCommandImpl(arguments: [\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:249:26: error: cannot find type 'CancellationToken' in scope\n247 |   public func deleteBackup(\n248 |     parameters: BackupDeleteParameters,\n249 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n250 |   ) async throws -\u003e DeleteResult {\n251 |     // Create the delete command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:567:26: error: generic parameter 'some Sendable' could not be inferred\n565 | \n566 |       // Log success\n567 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n568 |         context: enhancedContext,\n569 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:707:70: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n    |                                                                      `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:706:26: error: cannot find type 'CancellationToken' in scope\n704 |     parameters: BackupMaintenanceParameters,\n705 |     progressReporter: BackupProgressReporter?,\n706 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:660:19: error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n658 |         value: result,\n659 |         progressStream: progressReporter.stream,\n660 |         metadata: metadata\n    |                   `- error: cannot convert value of type 'BackupOperationMetadata' to expected argument type 'BackupOperationResultMetadata'\n661 |       )\n662 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:670:26: error: generic parameter 'some Sendable' could not be inferred\n668 | \n669 |       // Log success\n670 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n671 |         context: enhancedContext,\n672 |         result: result\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:734:19: error: type 'BackupOperation' has no member 'verifyBackup'\n732 |     let token=BackupOperationToken(\n733 |       id: UUID(),\n734 |       operation: .verifyBackup,\n    |                   `- error: type 'BackupOperation' has no member 'verifyBackup'\n735 |       cancellable: true\n736 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:747:30: error: type 'BackupVerifyParameters' has no member 'RepairMode'\n745 |     // Create DTO parameters for the operation using adapter pattern\n746 |     let localRepairMode=repairMode.map {\n747 |       BackupVerifyParameters.RepairMode(rawValue: $0.rawValue) ?? .reportOnly\n    |                              `- error: type 'BackupVerifyParameters' has no member 'RepairMode'\n748 |     }\n749 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:750:50: error: type 'VerifyOptions' has no member 'from'\n748 |     }\n749 | \n750 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n    |                                                  `- error: type 'VerifyOptions' has no member 'from'\n751 | \n752 |     let parameters=BackupVerifyParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:752:42: error: extra arguments at positions #2, #3, #4 in call\n750 |     let localOptions=options.map { VerifyOptions.from(options: $0) }\n751 | \n752 |     let parameters=BackupVerifyParameters(\n    |                                          `- error: extra arguments at positions #2, #3, #4 in call\n753 |       snapshotID: snapshotID,\n754 |       verifyData: verifyData,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:753:29: error: missing argument for parameter 'verifyOptions' in call\n751 | \n752 |     let parameters=BackupVerifyParameters(\n753 |       snapshotID: snapshotID,\n    |                             `- error: missing argument for parameter 'verifyOptions' in call\n754 |       verifyData: verifyData,\n755 |       repairMode: localRepairMode,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupParameters.swift:24:10: note: 'init(snapshotID:verifyOptions:)' declared here\n22 |    *   - verifyOptions: Options for the verification process\n23 |    */\n24 |   public init(\n   |          `- note: 'init(snapshotID:verifyOptions:)' declared here\n25 |     snapshotID: String?,\n26 |     verifyOptions: VerifyOptions?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:761:61: error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n759 |     do {\n760 |       // Execute the operation\n761 |       let verificationResultDTO=try await operationExecutor.executeVerifyOperation(\n    |                                                             `- error: value of type 'BackupOperationExecutor' has no member 'executeVerifyOperation'\n762 |         parameters: parameters,\n763 |         progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:774:19: error: extra argument 'duration' in call\n772 |       await backupLogger.logOperationSuccess(\n773 |         context: enhancedContext,\n774 |         duration: duration\n    |                   `- error: extra argument 'duration' in call\n775 |       )\n776 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:772:26: error: generic parameter 'some Sendable' could not be inferred\n770 | \n771 |       // Log operation success\n772 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n773 |         context: enhancedContext,\n774 |         duration: duration\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:792:29: error: value of type 'any Error' has no member 'asBackupOperationError'\n790 |     } catch {\n791 |       // Map error\n792 |       let backupError=error.asBackupOperationError\n    |                             `- error: value of type 'any Error' has no member 'asBackupOperationError'\n793 | \n794 |       // Log error\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:831:37: error: extra argument 'error' in call\n829 |       await backupLogger.logOperationFailure(\n830 |         context: logContext,\n831 |         error: BackupOperationError.operationNotFound(\"Operation with ID \\(operationID) not found\")\n    |                                     `- error: extra argument 'error' in call\n832 |       )\n833 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:831:37: error: type 'BackupOperationError' has no member 'operationNotFound'\n829 |       await backupLogger.logOperationFailure(\n830 |         context: logContext,\n831 |         error: BackupOperationError.operationNotFound(\"Operation with ID \\(operationID) not found\")\n    |                                     `- error: type 'BackupOperationError' has no member 'operationNotFound'\n832 |       )\n833 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:842:12: error: extra argument 'error' in call\n840 |         context: logContext,\n841 |         error: BackupOperationError\n842 |           .operationNotCancellable(\"Operation \\(token.operation) cannot be cancelled\")\n    |            `- error: extra argument 'error' in call\n843 |       )\n844 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:842:12: error: type 'BackupOperationError' has no member 'operationNotCancellable'\n840 |         context: logContext,\n841 |         error: BackupOperationError\n842 |           .operationNotCancellable(\"Operation \\(token.operation) cannot be cancelled\")\n    |            `- error: type 'BackupOperationError' has no member 'operationNotCancellable'\n843 |       )\n844 |       return false\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:852:26: error: generic parameter 'some Sendable' could not be inferred\n850 | \n851 |       // Log success\n852 |       await backupLogger.logOperationSuccess(\n    |                          `- error: generic parameter 'some Sendable' could not be inferred\n853 |         context: logContext,\n854 |         message: \"Operation cancelled successfully\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:245:15: note: in call to function 'logOperationSuccess(context:result:message:)'\n243 |    *   - message: Optional custom message\n244 |    */\n245 |   public func logOperationSuccess(\n    |               `- note: in call to function 'logOperationSuccess(context:result:message:)'\n246 |     context: LogContextDTO,\n247 |     result: (some Sendable)?=nil,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:862:16: error: extra argument 'error' in call\n860 |       await backupLogger.logOperationFailure(\n861 |         context: logContext,\n862 |         error: error\n    |                `- error: extra argument 'error' in call\n863 |       )\n864 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:877:11: error: cannot assign to property: 'cancelled' setter is inaccessible\n875 |   private func cancelOperationImpl(token: BackupOperationToken) async throws {\n876 |     // Signal cancellation to the operation\n877 |     token.cancelled=true\n    |           `- error: cannot assign to property: 'cancelled' setter is inaccessible\n878 | \n879 |     // Remove from active operations\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:888:24: error: value of type 'BackupLogger' has no member 'logInfo'\n886 |       .withPublic(key: \"operationType\", value: String(describing: token.operation))\n887 | \n888 |     await backupLogger.logInfo(\n    |                        `- error: value of type 'BackupLogger' has no member 'logInfo'\n889 |       context: logContext,\n890 |       message: \"Operation cancellation complete\"\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:907:45: error: cannot find type 'RepositoryError' in scope\n905 |     } else if error is CancellationError {\n906 |       .operationCancelled(\"Operation was cancelled\")\n907 |     } else if let repositoryError=error as? RepositoryError {\n    |                                             `- error: cannot find type 'RepositoryError' in scope\n908 |       .repositoryError(repositoryError)\n909 |     } else if let timeout=error as? TimeoutError {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:930:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n928 | \n929 |     // Map known error types\n930 |     if let nsError=error as? NSError {\n    |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n931 |       switch nsError.domain {\n932 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:935:19: error: type 'BackupOperationError' has no member 'fileSystemError'\n933 |           return .networkError(\"Network error: \\(nsError.localizedDescription)\")\n934 |         case NSCocoaErrorDomain:\n935 |           return .fileSystemError(\"File system error: \\(nsError.localizedDescription)\")\n    |                   `- error: type 'BackupOperationError' has no member 'fileSystemError'\n936 |         default:\n937 |           break\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:942:13: error: type 'BackupOperationError' has no member 'unknownError'\n940 | \n941 |     // Default to unknown error with the original description\n942 |     return .unknownError(\"Operation failed: \\(error.localizedDescription)\")\n    |             `- error: type 'BackupOperationError' has no member 'unknownError'\n943 |   }\n944 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:954:13: warning: result of call to 'cancelOperation(id:)' is unused\n952 | \n953 |     for (id, _) in activeOperationsCancellationTokens {\n954 |       await cancelOperation(id: id)\n    |             `- warning: result of call to 'cancelOperation(id:)' is unused\n955 |     }\n956 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:974:49: error: value of type 'String' has no member 'uuidString'\n972 |     let logContext=BackupLogContext()\n973 |       .withOperation(\"cancelOperation\")\n974 |       .withPublic(key: \"operationID\", value: id.uuidString)\n    |                                                 `- error: value of type 'String' has no member 'uuidString'\n975 | \n976 |     // Log cancellation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupServicesActor.swift:980:29: error: value of type 'BackupOperationExecutor' has no member 'cancelOperation'\n978 | \n979 |     // Cancel the operation\n980 |     await operationExecutor.cancelOperation(id: token.id)\n    |                             `- error: value of type 'BackupOperationExecutor' has no member 'cancelOperation'\n981 | \n982 |     // Remove the token\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:193:26: error: cannot find type 'CancellationToken' in scope\n191 |   public func listBackups(\n192 |     parameters: BackupListParameters,\n193 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n194 |   ) async throws -\u003e [BackupSnapshot] {\n195 |     // Create the list command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:296:26: error: cannot find type 'CancellationToken' in scope\n294 |     pattern: String?=nil,\n295 |     progressReporter _: BackupProgressReporter?,\n296 |     cancellationToken _: CancellationToken?\n    |                          `- error: cannot find type 'CancellationToken' in scope\n297 |   ) async throws -\u003e [SnapshotFileEntry] {\n298 |     // Create the find command\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:664:80: error: cannot find type 'DeleteResult' in scope\n662 |    * Parse delete result from JSON output.\n663 |    */\n664 |   private func parseDeleteResult(output: String, snapshotID: String) throws -\u003e DeleteResult {\n    |                                                                                `- error: cannot find type 'DeleteResult' in scope\n665 |     guard let data=output.data(using: .utf8) else {\n666 |       throw BackupOperationError.parsingFailure(\"Could not convert output to data\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:62:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 60 |   ) async throws -\u003e (BackupResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n 64 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:63:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 64 |       progressContinuation=continuation\n 65 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:63:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n 61 |     // Create the progress stream\n 62 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n 63 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n 64 |       progressContinuation=continuation\n 65 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:69:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 67 |     // Create a progress handler that forwards to both the reporter and the stream\n 68 |     let progressHandler={ [progressReporter, progressContinuation] (\n 69 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n 70 |     ) async in\n 71 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:96:25: error: no exact matches in call to instance method 'append'\n 94 |     if let excludePaths = parameters.excludePaths, !excludePaths.isEmpty {\n 95 |       command.arguments.append(\"--exclude\")\n 96 |       command.arguments.append(contentsOf: excludePaths)\n    |                         `- error: no exact matches in call to instance method 'append'\n 97 |     }\n 98 | \n\nSwift.Array.append:2:33: note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Element' == 'S.Element')\n1 | generic struct Array {\n2 | @inlinable public mutating func append\u003cS\u003e(contentsOf newElements: __owned S) where Element == S.Element, S : Sequence}\n  |                                 `- note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Element' == 'S.Element')\n3 | \n\nSwift.RangeReplaceableCollection.append:2:33: note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n1 | protocol RangeReplaceableCollection {\n2 | @inlinable public mutating func append\u003cS\u003e(contentsOf newElements: __owned S) where S : Sequence, Self.Element == S.Element}\n  |                                 `- note: candidate requires that the types 'String' and 'URL' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:109:71: error: missing argument for parameter 'sources' in call\n107 | \n108 |     // Parse the result\n109 |     let backupResult=try resultParser.parseBackupResult(output: output)\n    |                                                                       `- error: missing argument for parameter 'sources' in call\n110 | \n111 |     // Return the result and the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:16:15: note: 'parseBackupResult(output:sources:)' declared here\n 14 |   /// - Returns: A backup result with details about the operation\n 15 |   /// - Throws: BackupError if parsing fails\n 16 |   public func parseBackupResult(output: String, sources: [URL]) throws -\u003e BackupResult {\n    |               `- note: 'parseBackupResult(output:sources:)' declared here\n 17 |     guard !output.isEmpty else {\n 18 |       throw BackupError.parsingError(details: \"Empty output from backup command\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:131:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n129 |   ) async throws -\u003e (RestoreResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n133 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:132:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n133 |       progressContinuation=continuation\n134 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:132:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n130 |     // Create the progress stream\n131 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n132 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n133 |       progressContinuation=continuation\n134 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:138:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n136 |     // Create a progress handler that forwards to both the reporter and the stream\n137 |     let progressHandler={ [progressReporter, progressContinuation] (\n138 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n139 |     ) async in\n140 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:157:18: error: cannot convert value of type 'URL' to expected element type 'Array\u003cString\u003e.ArrayLiteralElement' (aka 'String')\n155 |       parameters.snapshotID,\n156 |       \"--target\",\n157 |       parameters.targetPath\n    |                  `- error: cannot convert value of type 'URL' to expected element type 'Array\u003cString\u003e.ArrayLiteralElement' (aka 'String')\n158 |     ])\n159 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:176:73: error: missing argument for parameter 'targetPath' in call\n174 | \n175 |     // Parse the result\n176 |     let restoreResult=try resultParser.parseRestoreResult(output: output)\n    |                                                                         `- error: missing argument for parameter 'targetPath' in call\n177 | \n178 |     // Return the result and the progress stream\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/BackupService/BackupResultParser.swift:63:15: note: 'parseRestoreResult(output:targetPath:)' declared here\n 61 |   /// - Returns: A RestoreResult object\n 62 |   /// - Throws: BackupError if parsing fails\n 63 |   public func parseRestoreResult(output: String, targetPath: URL) throws -\u003e RestoreResult {\n    |               `- note: 'parseRestoreResult(output:targetPath:)' declared here\n 64 |     // Simple parsing - look for file restoration lines\n 65 |     let lines=output.components(separatedBy: .newlines)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:353:55: error: type 'BackupOperation' has no member 'verifyBackup'\n351 |       // Forward to the progress reporter if provided\n352 |       if let reporter=progressReporter {\n353 |         await reporter.reportProgress(progress, for: .verifyBackup)\n    |                                                       `- error: type 'BackupOperation' has no member 'verifyBackup'\n354 |       }\n355 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:376:11: error: cannot find 'snapshotService' in scope\n374 |       let snapshot=try await (\n375 |         snapshotID != nil ?\n376 |           snapshotService.getSnapshot(id: snapshotID!) :\n    |           `- error: cannot find 'snapshotService' in scope\n377 |           snapshotService.getLatestSnapshot()\n378 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:377:11: error: cannot find 'snapshotService' in scope\n375 |         snapshotID != nil ?\n376 |           snapshotService.getSnapshot(id: snapshotID!) :\n377 |           snapshotService.getLatestSnapshot()\n    |           `- error: cannot find 'snapshotService' in scope\n378 |       )\n379 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:382:36: error: type 'BackupOperationError' has no member 'snapshotNotFound'\n380 |       // Early exit if no snapshot found\n381 |       guard let snapshot else {\n382 |         throw BackupOperationError.snapshotNotFound(\n    |                                    `- error: type 'BackupOperationError' has no member 'snapshotNotFound'\n383 |           \"No snapshot found to verify\" + (snapshotID != nil ? \" with ID \\(snapshotID!)\" : \"\")\n384 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:388:7: error: cannot find 'logger' in scope\n386 | \n387 |       // Log verification start\n388 |       logger.info(\n    |       `- error: cannot find 'logger' in scope\n389 |         context: backupLogContext.withOperation(\"verifyBackup\")\n390 |           .withPublic(key: \"snapshotID\", value: snapshot.id)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:389:18: error: cannot find 'backupLogContext' in scope\n387 |       // Log verification start\n388 |       logger.info(\n389 |         context: backupLogContext.withOperation(\"verifyBackup\")\n    |                  `- error: cannot find 'backupLogContext' in scope\n390 |           .withPublic(key: \"snapshotID\", value: snapshot.id)\n391 |           .withPublic(\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:407:23: error: extra argument 'transferRate' in call\n405 |         totalBytes: 0,\n406 |         estimatedTimeRemaining: nil,\n407 |         transferRate: nil,\n    |                       `- error: extra argument 'transferRate' in call\n408 |         details: \"Analysing snapshot structure\"\n409 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:407:23: error: 'nil' requires a contextual type\n405 |         totalBytes: 0,\n406 |         estimatedTimeRemaining: nil,\n407 |         transferRate: nil,\n    |                       `- error: 'nil' requires a contextual type\n408 |         details: \"Analysing snapshot structure\"\n409 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:412:40: error: cannot find 'snapshotService' in scope\n410 | \n411 |       // Use snapshot service to perform actual verification\n412 |       let verificationResult=try await snapshotService.verifySnapshot(\n    |                                        `- error: cannot find 'snapshotService' in scope\n413 |         id: snapshot.id,\n414 |         fullVerification: verifyOptions?.fullVerification ?? false,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:434:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n432 |         itemsProcessed: Int(Double(totalItems) * 0.25),\n433 |         totalItems: totalItems,\n434 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.25),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n435 |         totalBytes: UInt64(snapshot.stats.totalSize)\n436 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:450:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n448 |         itemsProcessed: Int(Double(totalItems) * 0.5),\n449 |         totalItems: totalItems,\n450 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.5),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n451 |         totalBytes: UInt64(snapshot.stats.totalSize)\n452 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:466:25: error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n464 |         itemsProcessed: Int(Double(totalItems) * 0.75),\n465 |         totalItems: totalItems,\n466 |         bytesProcessed: UInt64(Double(snapshot.stats.totalSize) * 0.75),\n    |                         `- error: cannot convert value of type 'UInt64' to expected argument type 'Int64'\n467 |         totalBytes: UInt64(snapshot.stats.totalSize)\n468 |       ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:709:60: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n707 |   ) async throws -\u003e (MaintenanceResult, AsyncStream\u003cBackupInterfaces.BackupProgress\u003e) {\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n    |                                                            `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n711 |       progressContinuation=continuation\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:53: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                     `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n711 |       progressContinuation=continuation\n712 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:710:71: error: cannot infer type of closure parameter 'continuation' without a type annotation\n708 |     // Create the progress stream\n709 |     var progressContinuation: AsyncStream\u003cBackupInterfaces.BackupProgress\u003e.Continuation!\n710 |     let progressStream=AsyncStream\u003cBackupInterfaces.BackupProgress\u003e { continuation in\n    |                                                                       `- error: cannot infer type of closure parameter 'continuation' without a type annotation\n711 |       progressContinuation=continuation\n712 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:716:34: error: no type named 'BackupProgress' in module 'BackupInterfaces'\n714 |     // Create a progress handler that forwards to both the reporter and the stream\n715 |     let progressHandler={ [progressReporter, progressContinuation] (\n716 |       progress: BackupInterfaces.BackupProgress\n    |                                  `- error: no type named 'BackupProgress' in module 'BackupInterfaces'\n717 |     ) async in\n718 |       if let reporter=progressReporter {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:758:7: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n756 |     // Report progress\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n    |       `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n759 |         phase: .processing,\n760 |         percentComplete: 0.1,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:758:21: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n756 |     // Report progress\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n    |                     `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n759 |         phase: .processing,\n760 |         percentComplete: 0.1,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:759:9: error: missing argument for parameter 'from' in call\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n759 |         phase: .processing,\n    |         `- error: missing argument for parameter 'from' in call\n760 |         percentComplete: 0.1,\n761 |         currentItem: \"Starting maintenance\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:759:17: error: cannot infer contextual base in reference to member 'processing'\n757 |     await progressReporter?.reportProgress(\n758 |       BackupProgress(\n759 |         phase: .processing,\n    |                 `- error: cannot infer contextual base in reference to member 'processing'\n760 |         percentComplete: 0.1,\n761 |         currentItem: \"Starting maintenance\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:766:33: error: 'nil' requires a contextual type\n764 |         processedBytes: 0,\n765 |         totalBytes: 0,\n766 |         estimatedTimeRemaining: nil,\n    |                                 `- error: 'nil' requires a contextual type\n767 |         bytesPerSecond: nil,\n768 |         error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:767:25: error: 'nil' requires a contextual type\n765 |         totalBytes: 0,\n766 |         estimatedTimeRemaining: nil,\n767 |         bytesPerSecond: nil,\n    |                         `- error: 'nil' requires a contextual type\n768 |         error: nil\n769 |       ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:768:16: error: 'nil' requires a contextual type\n766 |         estimatedTimeRemaining: nil,\n767 |         bytesPerSecond: nil,\n768 |         error: nil\n    |                `- error: 'nil' requires a contextual type\n769 |       ),\n770 |       for: .maintenance\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:773:46: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n771 |     )\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n    |                                              `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n774 |       phase: .processing,\n775 |       percentComplete: 0.1,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:774:7: error: missing argument for parameter 'from' in call\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n774 |       phase: .processing,\n    |       `- error: missing argument for parameter 'from' in call\n775 |       percentComplete: 0.1,\n776 |       currentItem: \"Starting maintenance\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:774:15: error: cannot infer contextual base in reference to member 'processing'\n772 | \n773 |     progressContinuation.yield(BackupProgress(\n774 |       phase: .processing,\n    |               `- error: cannot infer contextual base in reference to member 'processing'\n775 |       percentComplete: 0.1,\n776 |       currentItem: \"Starting maintenance\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:781:31: error: 'nil' requires a contextual type\n779 |       processedBytes: 0,\n780 |       totalBytes: 0,\n781 |       estimatedTimeRemaining: nil,\n    |                               `- error: 'nil' requires a contextual type\n782 |       bytesPerSecond: nil,\n783 |       error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:782:23: error: 'nil' requires a contextual type\n780 |       totalBytes: 0,\n781 |       estimatedTimeRemaining: nil,\n782 |       bytesPerSecond: nil,\n    |                       `- error: 'nil' requires a contextual type\n783 |       error: nil\n784 |     ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:783:14: error: 'nil' requires a contextual type\n781 |       estimatedTimeRemaining: nil,\n782 |       bytesPerSecond: nil,\n783 |       error: nil\n    |              `- error: 'nil' requires a contextual type\n784 |     ))\n785 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:791:7: error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n789 |     // Report completion\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n    |       `- error: cannot convert value of type 'BackupProgress' to expected argument type 'BackupProgressInfo'\n792 |         phase: .completed,\n793 |         percentComplete: 1.0,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:791:21: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n789 |     // Report completion\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n    |                     `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n792 |         phase: .completed,\n793 |         percentComplete: 1.0,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:792:9: error: missing argument for parameter 'from' in call\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n792 |         phase: .completed,\n    |         `- error: missing argument for parameter 'from' in call\n793 |         percentComplete: 1.0,\n794 |         currentItem: \"Maintenance completed\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:792:17: error: cannot infer contextual base in reference to member 'completed'\n790 |     await progressReporter?.reportProgress(\n791 |       BackupProgress(\n792 |         phase: .completed,\n    |                 `- error: cannot infer contextual base in reference to member 'completed'\n793 |         percentComplete: 1.0,\n794 |         currentItem: \"Maintenance completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:799:33: error: 'nil' requires a contextual type\n797 |         processedBytes: 0,\n798 |         totalBytes: 0,\n799 |         estimatedTimeRemaining: nil,\n    |                                 `- error: 'nil' requires a contextual type\n800 |         bytesPerSecond: nil,\n801 |         error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:800:25: error: 'nil' requires a contextual type\n798 |         totalBytes: 0,\n799 |         estimatedTimeRemaining: nil,\n800 |         bytesPerSecond: nil,\n    |                         `- error: 'nil' requires a contextual type\n801 |         error: nil\n802 |       ),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:801:16: error: 'nil' requires a contextual type\n799 |         estimatedTimeRemaining: nil,\n800 |         bytesPerSecond: nil,\n801 |         error: nil\n    |                `- error: 'nil' requires a contextual type\n802 |       ),\n803 |       for: .maintenance\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:806:46: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n804 |     )\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n    |                                              `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n807 |       phase: .completed,\n808 |       percentComplete: 1.0,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:807:7: error: missing argument for parameter 'from' in call\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n807 |       phase: .completed,\n    |       `- error: missing argument for parameter 'from' in call\n808 |       percentComplete: 1.0,\n809 |       currentItem: \"Maintenance completed\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:807:15: error: cannot infer contextual base in reference to member 'completed'\n805 | \n806 |     progressContinuation.yield(BackupProgress(\n807 |       phase: .completed,\n    |               `- error: cannot infer contextual base in reference to member 'completed'\n808 |       percentComplete: 1.0,\n809 |       currentItem: \"Maintenance completed\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:814:31: error: 'nil' requires a contextual type\n812 |       processedBytes: 0,\n813 |       totalBytes: 0,\n814 |       estimatedTimeRemaining: nil,\n    |                               `- error: 'nil' requires a contextual type\n815 |       bytesPerSecond: nil,\n816 |       error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:815:23: error: 'nil' requires a contextual type\n813 |       totalBytes: 0,\n814 |       estimatedTimeRemaining: nil,\n815 |       bytesPerSecond: nil,\n    |                       `- error: 'nil' requires a contextual type\n816 |       error: nil\n817 |     ))\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Components/BackupOperationsService.swift:816:14: error: 'nil' requires a contextual type\n814 |       estimatedTimeRemaining: nil,\n815 |       bytesPerSecond: nil,\n816 |       error: nil\n    |              `- error: 'nil' requires a contextual type\n817 |     ))\n818 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:71:14: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 69 |     if\n 70 |       error is CancellationError ||\n 71 |       (error as? NSError)?.domain == NSURLErrorDomain \u0026\u0026\n    |              `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 72 |       (error as? NSError)?.code == NSURLErrorCancelled\n 73 |     {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:72:14: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 70 |       error is CancellationError ||\n 71 |       (error as? NSError)?.domain == NSURLErrorDomain \u0026\u0026\n 72 |       (error as? NSError)?.code == NSURLErrorCancelled\n    |              `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 73 |     {\n 74 |       return BackupOperationError.operationCancelled(\"Operation was cancelled by the user\")\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/ErrorLogContextMapper.swift:85:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 83 | \n 84 |     // Map NSError\n 85 |     if let nsError=error as? NSError {\n    |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n 86 |       switch nsError.domain {\n 87 |         case NSPOSIXErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:83:40: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n 81 |           // Update progress\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n    |                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n 84 |               phase: .processing,\n 85 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:84:15: error: missing argument for parameter 'from' in call\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n 84 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n 85 |               percentComplete: 0.3,\n 86 |               currentItem: \"Updating snapshot tags\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:84:23: error: cannot infer contextual base in reference to member 'processing'\n 82 |           if let reporter {\n 83 |             let progress=BackupProgress(\n 84 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n 85 |               percentComplete: 0.3,\n 86 |               currentItem: \"Updating snapshot tags\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:91:39: error: 'nil' requires a contextual type\n 89 |               processedBytes: 0,\n 90 |               totalBytes: 0,\n 91 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n 92 |               bytesPerSecond: nil,\n 93 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:92:31: error: 'nil' requires a contextual type\n 90 |               totalBytes: 0,\n 91 |               estimatedTimeRemaining: nil,\n 92 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n 93 |               error: nil\n 94 |             )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:93:22: error: 'nil' requires a contextual type\n 91 |               estimatedTimeRemaining: nil,\n 92 |               bytesPerSecond: nil,\n 93 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n 94 |             )\n 95 |             await reporter.reportProgress(progress, for: .updateTags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:152:40: error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n150 |           // Update progress\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n    |                                        `- error: extra arguments at positions #1, #2, #3, #4, #5, #6, #7, #8, #9, #10 in call\n153 |               phase: .processing,\n154 |               percentComplete: 0.3,\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:153:15: error: missing argument for parameter 'from' in call\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n153 |               phase: .processing,\n    |               `- error: missing argument for parameter 'from' in call\n154 |               percentComplete: 0.3,\n155 |               currentItem: \"Updating snapshot description\",\n\nResticInterfaces.BackupProgress.init:2:8: note: 'init(from:)' declared here\n1 | struct BackupProgress {\n2 | public init(from decoder: any Decoder) throws}\n  |        `- note: 'init(from:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:153:23: error: cannot infer contextual base in reference to member 'processing'\n151 |           if let reporter {\n152 |             let progress=BackupProgress(\n153 |               phase: .processing,\n    |                       `- error: cannot infer contextual base in reference to member 'processing'\n154 |               percentComplete: 0.3,\n155 |               currentItem: \"Updating snapshot description\",\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:160:39: error: 'nil' requires a contextual type\n158 |               processedBytes: 0,\n159 |               totalBytes: 0,\n160 |               estimatedTimeRemaining: nil,\n    |                                       `- error: 'nil' requires a contextual type\n161 |               bytesPerSecond: nil,\n162 |               error: nil\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:161:31: error: 'nil' requires a contextual type\n159 |               totalBytes: 0,\n160 |               estimatedTimeRemaining: nil,\n161 |               bytesPerSecond: nil,\n    |                               `- error: 'nil' requires a contextual type\n162 |               error: nil\n163 |             )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotManagementService.swift:162:22: error: 'nil' requires a contextual type\n160 |               estimatedTimeRemaining: nil,\n161 |               bytesPerSecond: nil,\n162 |               error: nil\n    |                      `- error: 'nil' requires a contextual type\n163 |             )\n164 |             await reporter.reportProgress(progress, for: .updateTags)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:80:31: error: extra arguments at positions #3, #8 in call\n 78 |         if let progressReporter=reporter {\n 79 |           await progressReporter.reportProgress(\n 80 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n 81 |               phase: .processing,\n 82 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:134:31: error: extra arguments at positions #3, #8 in call\n132 |         if let progressReporter=reporter {\n133 |           await progressReporter.reportProgress(\n134 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n135 |               phase: .processing,\n136 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:218:31: error: extra arguments at positions #3, #8 in call\n216 |         if let progressReporter=reporter {\n217 |           await progressReporter.reportProgress(\n218 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n219 |               phase: .processing,\n220 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:267:9: error: type of expression is ambiguous without a type annotation\n265 |     cancellationToken: BackupCancellationToken?\n266 |   ) async throws -\u003e BackupSnapshotComparisonResult {\n267 |     try await operationExecutor.execute(\n    |         `- error: type of expression is ambiguous without a type annotation\n268 |       parameters: parameters,\n269 |       progressReporter: progressReporter,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:376:31: error: extra arguments at positions #3, #8 in call\n374 |         if let reporter {\n375 |           await reporter.reportProgress(\n376 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n377 |               phase: .processing,\n378 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotOperationsService.swift:494:31: error: extra arguments at positions #3, #8 in call\n492 |         if let progressReporter=reporter {\n493 |           await progressReporter.reportProgress(\n494 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n495 |               phase: .processing,\n496 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:73:31: error: extra arguments at positions #3, #8 in call\n 71 |         if let progressReporter=reporter {\n 72 |           await progressReporter.reportProgress(\n 73 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n 74 |               phase: .processing,\n 75 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:132:31: error: extra arguments at positions #3, #8 in call\n130 |         if let reporter=progressReporter {\n131 |           await reporter.reportProgress(\n132 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n133 |               phase: .processing,\n134 |               percentComplete: progress,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:157:26: error: cannot call value of non-function type 'Bool'\n155 |         // Check for cancellation in a loop\n156 |         while !Task.isCancelled {\n157 |           if await token.isCancelled() {\n    |                          `- error: cannot call value of non-function type 'Bool'\n158 |             executionTask.cancel()\n159 |             progressTask.cancel()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Services/SnapshotRestoreService.swift:279:31: error: extra arguments at positions #3, #8 in call\n277 |         if let reporter {\n278 |           await reporter.reportProgress(\n279 |             BackupProgressInfo(\n    |                               `- error: extra arguments at positions #3, #8 in call\n280 |               phase: .processing,\n281 |               percentComplete: 0.3,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupErrorMapper.swift:43:26: warning: conditional cast from 'any Error' to 'NSError' always succeeds\n41 | \n42 |     // Handle NSError types\n43 |     if let nsError=error as? NSError {\n   |                          `- warning: conditional cast from 'any Error' to 'NSError' always succeeds\n44 |       switch nsError.domain {\n45 |         case NSURLErrorDomain:\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:76:22: error: extra arguments at positions #2, #3 in call\n 74 | \n 75 |     // Log the start of the operation\n 76 |     await logger.info(\n    |                      `- error: extra arguments at positions #2, #3 in call\n 77 |       \"Starting backup operation: \\(parameters.operationType)\",\n 78 |       metadata: nil,\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:77:63: error: missing argument for parameter 'context' in call\n 75 |     // Log the start of the operation\n 76 |     await logger.info(\n 77 |       \"Starting backup operation: \\(parameters.operationType)\",\n    |                                                               `- error: missing argument for parameter 'context' in call\n 78 |       metadata: nil,\n 79 |       source: logContext.getSource()\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:78:17: error: 'nil' requires a contextual type\n 76 |     await logger.info(\n 77 |       \"Starting backup operation: \\(parameters.operationType)\",\n 78 |       metadata: nil,\n    |                 `- error: 'nil' requires a contextual type\n 79 |       source: logContext.getSource()\n 80 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:108:24: error: extra arguments at positions #2, #3 in call\n106 | \n107 |       // Log the completion of the operation\n108 |       await logger.info(\n    |                        `- error: extra arguments at positions #2, #3 in call\n109 |         \"Completed backup operation: \\(parameters.operationType)\",\n110 |         metadata: nil,\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:109:66: error: missing argument for parameter 'context' in call\n107 |       // Log the completion of the operation\n108 |       await logger.info(\n109 |         \"Completed backup operation: \\(parameters.operationType)\",\n    |                                                                  `- error: missing argument for parameter 'context' in call\n110 |         metadata: nil,\n111 |         source: logContext.getSource()\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:110:19: error: 'nil' requires a contextual type\n108 |       await logger.info(\n109 |         \"Completed backup operation: \\(parameters.operationType)\",\n110 |         metadata: nil,\n    |                   `- error: 'nil' requires a contextual type\n111 |         source: logContext.getSource()\n112 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:124:24: error: extra arguments at positions #2, #3 in call\n122 | \n123 |       // Log the cancellation of the operation\n124 |       await logger.info(\n    |                        `- error: extra arguments at positions #2, #3 in call\n125 |         \"Cancelled backup operation: \\(parameters.operationType)\",\n126 |         metadata: nil,\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:125:66: error: missing argument for parameter 'context' in call\n123 |       // Log the cancellation of the operation\n124 |       await logger.info(\n125 |         \"Cancelled backup operation: \\(parameters.operationType)\",\n    |                                                                  `- error: missing argument for parameter 'context' in call\n126 |         metadata: nil,\n127 |         source: logContext.getSource()\n\nLoggingInterfaces.LoggingProtocol.info:2:6: note: 'info(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func info(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'info(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:126:19: error: 'nil' requires a contextual type\n124 |       await logger.info(\n125 |         \"Cancelled backup operation: \\(parameters.operationType)\",\n126 |         metadata: nil,\n    |                   `- error: 'nil' requires a contextual type\n127 |         source: logContext.getSource()\n128 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:145:25: error: extra arguments at positions #2, #3 in call\n143 | \n144 |       // Log the failure of the operation\n145 |       await logger.error(\n    |                         `- error: extra arguments at positions #2, #3 in call\n146 |         \"Failed backup operation: \\(parameters.operationType) - \\(error.localizedDescription)\",\n147 |         metadata: nil,\n\nLoggingInterfaces.LoggingProtocol.error:2:6: note: 'error(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func error(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'error(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:146:95: error: missing argument for parameter 'context' in call\n144 |       // Log the failure of the operation\n145 |       await logger.error(\n146 |         \"Failed backup operation: \\(parameters.operationType) - \\(error.localizedDescription)\",\n    |                                                                                               `- error: missing argument for parameter 'context' in call\n147 |         metadata: nil,\n148 |         source: logContext.getSource()\n\nLoggingInterfaces.LoggingProtocol.error:2:6: note: 'error(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func error(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'error(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/BackupOperationExecutor.swift:147:19: error: 'nil' requires a contextual type\n145 |       await logger.error(\n146 |         \"Failed backup operation: \\(parameters.operationType) - \\(error.localizedDescription)\",\n147 |         metadata: nil,\n    |                   `- error: 'nil' requires a contextual type\n148 |         source: logContext.getSource()\n149 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:18:15: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 16 | public actor CancellationHandler: CancellationHandlerProtocol {\n 17 |   /// Storage for active operations that can be cancelled\n 18 |   private var activeOperations: [String: Task\u003cAny, Error\u003e]=[:]\n    |               `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 19 | \n 20 |   /// Storage for active cancellation tokens\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               |                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n    |               `- warning: non-sendable type 'T' cannot be returned from actor-isolated implementation to caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:188:15: warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |               `- warning: non-sendable parameter type '() async throws -\u003e T' cannot be sent from caller of protocol requirement 'withCancellationSupport(_:cancellationToken:)' into actor-isolated implementation; this is an error in the Swift 6 language mode\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationHandlerProtocol.swift:52:8: note: a function type must be marked '@Sendable' to conform to 'Sendable'\n50 |    * - Throws: Error if the operation fails or is cancelled\n51 |    */\n52 |   func withCancellationSupport\u003cT\u003e(\n   |        `- note: a function type must be marked '@Sendable' to conform to 'Sendable'\n53 |     _ operation: @escaping () async throws -\u003e T,\n54 |     cancellationToken: BackupCancellationToken?\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:37:36: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 35 |   public func registerOperation(id: String, operation: Task\u003csome Any, Error\u003e) {\n 36 |     // Store the task as Task\u003cAny, Error\u003e for type erasure\n 37 |     activeOperations[id]=operation as? Task\u003cAny, Error\u003e\n    |                                    `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 38 |   }\n 39 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:77:17: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 75 |     // Try to cancel a task-based operation\n 76 |     if let operation=activeOperations[id] {\n 77 |       operation.cancel()\n    |                 `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n 78 |       activeOperations[id]=nil\n 79 |       cancelled=true\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:128:12: warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n126 |     // Cancel all task-based operations\n127 |     for (_, task) in activeOperations {\n128 |       task.cancel()\n    |            `- warning: type 'Any' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n129 |     }\n130 |     activeOperations.removeAll()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:201:14: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n199 | \n200 |     // Transform the operation into a Task\n201 |     let task=Task\u003cT, Error\u003e {\n    |              `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n202 |       do {\n203 |         let result=try await operation()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:201:27: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n199 | \n200 |     // Transform the operation into a Task\n201 |     let task=Task\u003cT, Error\u003e {\n    |                           `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n202 |       do {\n203 |         let result=try await operation()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:213:5: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n211 | \n212 |     // Register the task for cancellation with proper generic type\n213 |     registerOperation(id: operationID, operation: task)\n    |     `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n214 | \n215 |     // If we have a cancellation token, set up a callback\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:232:23: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n230 |           guard let self else { return }\n231 | \n232 |           while !task.isCancelled {\n    |                       `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n233 |             if await isOperationActive(id: operationID) {\n234 |               if await token.isCancelled {\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:248:29: warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n246 | \n247 |     do {\n248 |       return try await task.value\n    |                             `- warning: type 'T' does not conform to the 'Sendable' protocol; this is an error in the Swift 6 language mode\n249 |     } catch is CancellationError {\n250 |       throw CancellationError()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:203:30: warning: non-sendable result type 'T' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n201 |     let task=Task\u003cT, Error\u003e {\n202 |       do {\n203 |         let result=try await operation()\n    |                              `- warning: non-sendable result type 'T' cannot be sent from nonisolated context in call to parameter 'operation'; this is an error in the Swift 6 language mode\n204 |         operationCompleted(id: operationID)\n205 |         return result\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:248:24: warning: non-sendable type 'Task\u003cT, any Error\u003e' cannot exit actor-isolated context in call to nonisolated property 'value'; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n246 | \n247 |     do {\n248 |       return try await task.value\n    |                        `- warning: non-sendable type 'Task\u003cT, any Error\u003e' cannot exit actor-isolated context in call to nonisolated property 'value'; this is an error in the Swift 6 language mode\n249 |     } catch is CancellationError {\n250 |       throw CancellationError()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/CancellationHandler.swift:248:29: warning: non-sendable type 'T' of nonisolated property 'value' cannot be sent to actor-isolated context; this is an error in the Swift 6 language mode\n186 |    * - Throws: CancellationError if the operation is cancelled\n187 |    */\n188 |   public func withCancellationSupport\u003cT\u003e(\n    |                                       `- note: consider making generic parameter 'T' conform to the 'Sendable' protocol\n189 |     _ operation: @escaping () async throws -\u003e T,\n190 |     cancellationToken: BackupCancellationToken?\n    :\n246 | \n247 |     do {\n248 |       return try await task.value\n    |                             `- warning: non-sendable type 'T' of nonisolated property 'value' cannot be sent to actor-isolated context; this is an error in the Swift 6 language mode\n249 |     } catch is CancellationError {\n250 |       throw CancellationError()\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/ErrorMapper.swift:35:21: error: type 'BackupError' has no member 'configurationError'\n 33 | \n 34 |       case let .executableNotFound(path):\n 35 |         BackupError.configurationError(\n    |                     `- error: type 'BackupError' has no member 'configurationError'\n 36 |           details: \"Restic executable not found at path: \\(path)\"\n 37 |         )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:101:18: error: no exact matches in call to instance method 'info'\n 99 | \n100 |     // Log operation start\n101 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n102 |       \"Starting snapshot operation: \\(operationType.rawValue)\",\n103 |       metadata: metadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:110:27: error: extra arguments at positions #3, #8 in call\n108 |     if let reporter=progressReporter {\n109 |       await reporter.reportProgress(\n110 |         BackupProgressInfo(\n    |                           `- error: extra arguments at positions #3, #8 in call\n111 |           phase: .initialising,\n112 |           percentComplete: 0.0,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:140:29: error: extra arguments at positions #3, #8 in call\n138 |       if let reporter=progressReporter {\n139 |         await reporter.reportProgress(\n140 |           BackupProgressInfo(\n    |                             `- error: extra arguments at positions #3, #8 in call\n141 |             phase: .completed,\n142 |             percentComplete: 1.0,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:160:20: error: no exact matches in call to instance method 'info'\n158 |                                                           privacy: .public)\n159 | \n160 |       await logger.info(\n    |                    |- error: no exact matches in call to instance method 'info'\n    |                    |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                    `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n161 |         \"Completed snapshot operation: \\(operationType.rawValue)\",\n162 |         metadata: completionMetadata,\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:184:29: error: extra arguments at positions #3, #8 in call\n182 |       if let reporter=progressReporter {\n183 |         await reporter.reportProgress(\n184 |           BackupProgressInfo(\n    |                             `- error: extra arguments at positions #3, #8 in call\n185 |             phase: .failed,\n186 |             percentComplete: 1.0,\n\nBackupInterfaces.BackupProgressInfo.init:2:8: note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n1 | struct BackupProgressInfo {\n2 | public init(phase: BackupInterfaces.BackupProgressInfo.Phase, percentComplete: Double, itemsProcessed: Int, totalItems: Int, bytesProcessed: Int64, totalBytes: Int64, estimatedTimeRemaining: TimeInterval? = nil, error: (any Error)? = nil, details: String? = nil, isCancellable: Bool = true)}\n  |        `- note: 'init(phase:percentComplete:itemsProcessed:totalItems:bytesProcessed:totalBytes:estimatedTimeRemaining:error:details:isCancellable:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:207:25: error: extra arguments at positions #2, #3 in call\n205 | \n206 |       // Log error with privacy-aware context\n207 |       await logger.error(\n    |                         `- error: extra arguments at positions #2, #3 in call\n208 |         \"Failed snapshot operation: \\(operationType.rawValue)\",\n209 |         metadata: errorContext.toPrivacyMetadata(),\n\nLoggingInterfaces.LoggingProtocol.error:2:6: note: 'error(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func error(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'error(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:208:63: error: missing argument for parameter 'context' in call\n206 |       // Log error with privacy-aware context\n207 |       await logger.error(\n208 |         \"Failed snapshot operation: \\(operationType.rawValue)\",\n    |                                                               `- error: missing argument for parameter 'context' in call\n209 |         metadata: errorContext.toPrivacyMetadata(),\n210 |         source: source\n\nLoggingInterfaces.LoggingProtocol.error:2:6: note: 'error(_:context:)' declared here\n1 | protocol LoggingProtocol {\n2 | func error(_ message: String, context: any LoggingTypes.LogContextDTO) async}\n  |      `- note: 'error(_:context:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/Shared/SnapshotOperationExecutor.swift:130:48: warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to instance method 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n 75 |    * - Throws: BackupOperationError if the operation fails\n 76 |    */\n 77 |   public func execute\u003cP: SnapshotOperationParameters, R\u003e(\n    |                                                       `- note: consider making generic parameter 'R' conform to the 'Sendable' protocol\n 78 |     parameters: P,\n 79 |     progressReporter: BackupProgressReporter?,\n    :\n128 | \n129 |       // Execute the operation with cancellation support\n130 |       let result=try await cancellationHandler.withCancellationSupport({\n    |                                                `- warning: non-sendable result type 'R' cannot be sent from nonisolated context in call to instance method 'withCancellationSupport(_:cancellationToken:)'; this is an error in the Swift 6 language mode\n131 |         try await operation(parameters, progressReporter, cancellationToken)\n132 |       }, cancellationToken: cancellationToken)\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:39:18: error: no exact matches in call to instance method 'info'\n 37 |     let defaultMessage=\"Starting snapshot operation: \\(logContext.operation)\"\n 38 | \n 39 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 40 |       message ?? defaultMessage,\n 41 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:59:18: error: no exact matches in call to instance method 'info'\n 57 |     let defaultMessage=\"Completed snapshot operation: \\(logContext.operation)\"\n 58 | \n 59 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 60 |       message ?? defaultMessage,\n 61 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:81:18: error: no exact matches in call to instance method 'error'\n 79 |     let defaultMessage=\"Error during snapshot operation: \\(logContext.operation)\"\n 80 | \n 81 |     await logger.error(\n    |                  |- error: no exact matches in call to instance method 'error'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n 82 |       message ?? defaultMessage,\n 83 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:110:18: error: no exact matches in call to instance method 'error'\n108 |     )\n109 | \n110 |     await logger.error(\n    |                  |- error: no exact matches in call to instance method 'error'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n111 |       message,\n112 |       metadata: metadataCollection.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:130:18: error: no exact matches in call to instance method 'info'\n128 |     let defaultMessage=\"Operation completed successfully\"\n129 | \n130 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n131 |       message ?? defaultMessage,\n132 |       metadata: logContext.metadata.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:170:18: error: no exact matches in call to instance method 'info'\n168 |     }\n169 | \n170 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n171 |       \"Starting snapshot operation: \\(operation)\",\n172 |       metadata: metadataCollection.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:219:18: error: no exact matches in call to instance method 'info'\n217 |     }\n218 | \n219 |     await logger.info(\n    |                  |- error: no exact matches in call to instance method 'info'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n220 |       \"Snapshot operation completed: \\(operation)\",\n221 |       metadata: metadataCollection.toPrivacyMetadata(),\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotLoggingAdapter.swift:269:18: error: no exact matches in call to instance method 'error'\n267 |     }\n268 | \n269 |     await logger.error(\n    |                  |- error: no exact matches in call to instance method 'error'\n    |                  |- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n    |                  `- note: candidate has partially matching parameter list (String, context: any LogContextDTO)\n270 |       \"Error during snapshot operation: \\(operation)\",\n271 |       metadata: metadataCollection.toPrivacyMetadata(),\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:424:40: error: cannot find type 'SnapshotFileType' in scope\n422 | \n423 |   // Convert SnapshotFileType to BackupFileType\n424 |   private func convertFileType(_ type: SnapshotFileType?) -\u003e BackupFileType {\n    |                                        `- error: cannot find type 'SnapshotFileType' in scope\n425 |     guard let type else { return .file }\n426 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:406:75: warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n404 |   // Helper function to calculate total size of changes\n405 |   private func calculateTotalChangeSize(_ difference: BackupSnapshotDifference) -\u003e UInt64 {\n406 |     let addedSize=(difference.addedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n    |                                                                           `- warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n407 |     let modifiedSize=(difference.modifiedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n408 |     return addedSize + modifiedSize\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:407:81: warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n405 |   private func calculateTotalChangeSize(_ difference: BackupSnapshotDifference) -\u003e UInt64 {\n406 |     let addedSize=(difference.addedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n407 |     let modifiedSize=(difference.modifiedFiles ?? []).reduce(0) { $0 + ($1.size ?? 0) }\n    |                                                                                 `- warning: left side of nil coalescing operator '??' has non-optional type 'UInt64', so the right side is never used\n408 |     return addedSize + modifiedSize\n409 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:417:28: error: value of type 'SnapshotFile' has no member 'modificationDate'\n415 |         path: file.path,\n416 |         size: file.size ?? 0,\n417 |         lastModified: file.modificationDate ?? Date(),\n    |                            `- error: value of type 'SnapshotFile' has no member 'modificationDate'\n418 |         type: convertFileType(file.type)\n419 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:418:36: error: value of type 'SnapshotFile' has no member 'type'\n416 |         size: file.size ?? 0,\n417 |         lastModified: file.modificationDate ?? Date(),\n418 |         type: convertFileType(file.type)\n    |                                    `- error: value of type 'SnapshotFile' has no member 'type'\n419 |       )\n420 |     }\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:417:45: error: extra argument 'lastModified' in call\n415 |         path: file.path,\n416 |         size: file.size ?? 0,\n417 |         lastModified: file.modificationDate ?? Date(),\n    |                                             `- error: extra argument 'lastModified' in call\n418 |         type: convertFileType(file.type)\n419 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:416:29: error: missing argument for parameter 'modifiedTime' in call\n414 |       BackupFile(\n415 |         path: file.path,\n416 |         size: file.size ?? 0,\n    |                             `- error: missing argument for parameter 'modifiedTime' in call\n417 |         lastModified: file.modificationDate ?? Date(),\n418 |         type: convertFileType(file.type)\n\nBackupInterfaces.BackupFile.init:2:8: note: 'init(path:size:modifiedTime:type:permissions:ownerName:groupName:)' declared here\n1 | struct BackupFile {\n2 | public init(path: String, size: UInt64, modifiedTime: Date, type: BackupInterfaces.BackupFileType, permissions: String? = nil, ownerName: String? = nil, groupName: String? = nil)}\n  |        `- note: 'init(path:size:modifiedTime:type:permissions:ownerName:groupName:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Implementation/SnapshotService/SnapshotResultParser.swift:507:11: warning: initialization of immutable value 'unchangedFiles' was never used; consider replacing with assignment to '_' or removing it\n505 | \n506 |       // Process unchanged files\n507 |       let unchangedFiles=diffResult.unchanged?.map { file in\n    |           `- warning: initialization of immutable value 'unchangedFiles' was never used; consider replacing with assignment to '_' or removing it\n508 |         SnapshotFileEntry(\n509 |           path: file.path ?? \"\",\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:81:11: warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n 79 |     if let loggableError=error as? LoggableErrorProtocol {\n 80 |       // Handle loggable errors with enriched metadata\n 81 |       let errorMetadata=loggableError.createMetadataCollection()\n    |           `- warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n 82 |       let formattedMessage=\"[\\(domainName)] \\(loggableError.getLogMessage())\"\n 83 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:83:11: warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n 81 |       let errorMetadata=loggableError.createMetadataCollection()\n 82 |       let formattedMessage=\"[\\(domainName)] \\(loggableError.getLogMessage())\"\n 83 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n    |           `- warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n 84 | \n 85 |       // Create a new context with error information\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:124:11: warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n122 |     if let loggableError=error as? LoggableErrorProtocol {\n123 |       // Handle loggable errors with enriched metadata\n124 |       let errorMetadata=loggableError.createMetadataCollection()\n    |           `- warning: initialization of immutable value 'errorMetadata' was never used; consider replacing with assignment to '_' or removing it\n125 |       let formattedMessage=message ?? \"[\\(domainName)] \\(loggableError.getLogMessage())\"\n126 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n\npackages/UmbraImplementations/Sources/BackupServices/Logging/BackupLogger.swift:126:11: warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n124 |       let errorMetadata=loggableError.createMetadataCollection()\n125 |       let formattedMessage=message ?? \"[\\(domainName)] \\(loggableError.getLogMessage())\"\n126 |       let source=\"\\(loggableError.getSource()) via \\(domainName)\"\n    |           `- warning: initialization of immutable value 'source' was never used; consider replacing with assignment to '_' or removing it\n127 | \n128 |       // Create a new context with error information\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:332:47: error: cannot find type 'BackupCreationParameters' in scope\n330 | extension BackupCreateParameters {\n331 |   /// Convert to BackupInterfaces.BackupCreationParameters\n332 |   public func toBackupCreationParameters() -\u003e BackupCreationParameters {\n    |                                               `- error: cannot find type 'BackupCreationParameters' in scope\n333 |     BackupCreationParameters(\n334 |       sources: sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:342:39: error: cannot find type 'BackupCreationParameters' in scope\n340 | \n341 |   /// Create from BackupInterfaces.BackupCreationParameters\n342 |   public static func from(parameters: BackupCreationParameters) -\u003e BackupCreateParameters {\n    |                                       `- error: cannot find type 'BackupCreationParameters' in scope\n343 |     BackupCreateParameters(\n344 |       sources: parameters.sources,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:354:63: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n352 | extension BackupRestoreParameters {\n353 |   /// Convert to BackupInterfaces.BackupRestoreParameters\n354 |   public func toBackupRestoreParameters() -\u003e BackupInterfaces.BackupRestoreParameters {\n    |                                                               `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n355 |     BackupInterfaces.BackupRestoreParameters(\n356 |       snapshotID: snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:368:8: error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n366 |   public static func from(\n367 |     parameters: BackupInterfaces\n368 |       .BackupRestoreParameters\n    |        `- error: no type named 'BackupRestoreParameters' in module 'BackupInterfaces'\n369 |   ) -\u003e BackupRestoreParameters {\n370 |     BackupRestoreParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:382:60: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n380 | extension BackupListParameters {\n381 |   /// Convert to BackupInterfaces.BackupListParameters\n382 |   public func toBackupListParameters() -\u003e BackupInterfaces.BackupListParameters {\n    |                                                            `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n383 |     BackupInterfaces.BackupListParameters(\n384 |       tags: tags,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:396:8: error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n394 |   public static func from(\n395 |     parameters: BackupInterfaces\n396 |       .BackupListParameters\n    |        `- error: no type named 'BackupListParameters' in module 'BackupInterfaces'\n397 |   ) -\u003e BackupListParameters {\n398 |     BackupListParameters(\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:413:35: error: extra arguments at positions #2, #3, #4 in call\n411 |   /// Convert to BackupInterfaces.BackupOptions\n412 |   public func toBackupOptions() -\u003e BackupInterfaces.BackupOptions {\n413 |     BackupInterfaces.BackupOptions(\n    |                                   `- error: extra arguments at positions #2, #3, #4 in call\n414 |       compressionLevel: 0,\n415 |       deduplicate: false,\n\nBackupInterfaces.BackupOptions.init:2:8: note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n1 | struct BackupOptions {\n2 | public init(compressionLevel: Int? = nil, maxSize: UInt64? = nil, verifyAfterBackup: Bool = true, useParallelisation: Bool = true, priority: BackupInterfaces.BackupPriority = .normal)}\n  |        `- note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:423:18: error: extra arguments at positions #2, #3, #4 in call\n421 |   /// Create from BackupInterfaces.BackupOptions\n422 |   public static func from(options: BackupInterfaces.BackupOptions) -\u003e BackupOptions {\n423 |     BackupOptions(\n    |                  `- error: extra arguments at positions #2, #3, #4 in call\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n\nBackupInterfaces.BackupOptions.init:2:8: note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n1 | struct BackupOptions {\n2 | public init(compressionLevel: Int? = nil, maxSize: UInt64? = nil, verifyAfterBackup: Bool = true, useParallelisation: Bool = true, priority: BackupInterfaces.BackupPriority = .normal)}\n  |        `- note: 'init(compressionLevel:maxSize:verifyAfterBackup:useParallelisation:priority:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:425:28: error: value of type 'BackupOptions' has no member 'deduplicate'\n423 |     BackupOptions(\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n    |                            `- error: value of type 'BackupOptions' has no member 'deduplicate'\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n427 |       metadata: options.metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:426:36: error: value of type 'BackupOptions' has no member 'encryptionAlgorithm'\n424 |       compressionLevel: options.compressionLevel,\n425 |       deduplicate: options.deduplicate,\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n    |                                    `- error: value of type 'BackupOptions' has no member 'encryptionAlgorithm'\n427 |       metadata: options.metadata\n428 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:427:25: error: value of type 'BackupOptions' has no member 'metadata'\n425 |       deduplicate: options.deduplicate,\n426 |       encryptionAlgorithm: options.encryptionAlgorithm,\n427 |       metadata: options.metadata\n    |                         `- error: value of type 'BackupOptions' has no member 'metadata'\n428 |     )\n429 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:435:36: error: extra arguments at positions #2, #3, #4, #5 in call\n433 |   /// Convert to BackupInterfaces.RestoreOptions\n434 |   public func toRestoreOptions() -\u003e BackupInterfaces.RestoreOptions {\n435 |     BackupInterfaces.RestoreOptions(\n    |                                    `- error: extra arguments at positions #2, #3, #4, #5 in call\n436 |       preservePermissions: false,\n437 |       preserveOwnership: false,\n\nBackupInterfaces.RestoreOptions.init:2:8: note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n1 | struct RestoreOptions {\n2 | public init(overwriteExisting: Bool = false, restorePermissions: Bool = true, verifyAfterRestore: Bool = true, useParallelisation: Bool = true, priority: BackupInterfaces.BackupPriority = .normal)}\n  |        `- note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:446:19: error: extra arguments at positions #2, #3, #4, #5 in call\n444 |   /// Create from BackupInterfaces.RestoreOptions\n445 |   public static func from(options: BackupInterfaces.RestoreOptions) -\u003e RestoreOptions {\n446 |     RestoreOptions(\n    |                   `- error: extra arguments at positions #2, #3, #4, #5 in call\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n\nBackupInterfaces.RestoreOptions.init:2:8: note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n1 | struct RestoreOptions {\n2 | public init(overwriteExisting: Bool = false, restorePermissions: Bool = true, verifyAfterRestore: Bool = true, useParallelisation: Bool = true, priority: BackupInterfaces.BackupPriority = .normal)}\n  |        `- note: 'init(overwriteExisting:restorePermissions:verifyAfterRestore:useParallelisation:priority:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:447:36: error: value of type 'RestoreOptions' has no member 'preservePermissions'\n445 |   public static func from(options: BackupInterfaces.RestoreOptions) -\u003e RestoreOptions {\n446 |     RestoreOptions(\n447 |       preservePermissions: options.preservePermissions,\n    |                                    `- error: value of type 'RestoreOptions' has no member 'preservePermissions'\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:448:34: error: value of type 'RestoreOptions' has no member 'preserveOwnership'\n446 |     RestoreOptions(\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n    |                                  `- error: value of type 'RestoreOptions' has no member 'preserveOwnership'\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:449:30: error: value of type 'RestoreOptions' has no member 'preserveTimes'\n447 |       preservePermissions: options.preservePermissions,\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n    |                              `- error: value of type 'RestoreOptions' has no member 'preserveTimes'\n450 |       skipExisting: options.skipExisting,\n451 |       metadata: options.metadata\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:450:29: error: value of type 'RestoreOptions' has no member 'skipExisting'\n448 |       preserveOwnership: options.preserveOwnership,\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n    |                             `- error: value of type 'RestoreOptions' has no member 'skipExisting'\n451 |       metadata: options.metadata\n452 |     )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupOperationDTO.swift:451:25: error: value of type 'RestoreOptions' has no member 'metadata'\n449 |       preserveTimes: options.preserveTimes,\n450 |       skipExisting: options.skipExisting,\n451 |       metadata: options.metadata\n    |                         `- error: value of type 'RestoreOptions' has no member 'metadata'\n452 |     )\n453 |   }\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:217:41: error: cannot find type 'VerificationResult' in scope\n215 | extension BackupVerificationResultDTO {\n216 |   /// Convert this DTO to a BackupInterfaces.VerificationResult\n217 |   public func toVerificationResult() -\u003e VerificationResult {\n    |                                         `- error: cannot find type 'VerificationResult' in scope\n218 |     VerificationResult(\n219 |       verified: verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:231:47: error: cannot find type 'VerificationResult' in scope\n229 | \n230 |   /// Create a BackupVerificationResultDTO from a BackupInterfaces.VerificationResult\n231 |   public static func from(verificationResult: VerificationResult) -\u003e BackupVerificationResultDTO {\n    |                                               `- error: cannot find type 'VerificationResult' in scope\n232 |     BackupVerificationResultDTO(\n233 |       verified: verificationResult.verified,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:245:39: error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n243 | }\n244 | \n245 | extension BackupVerificationResultDTO.VerificationIssue {\n    |                                       `- error: 'VerificationIssue' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n246 |   /// Convert this DTO to a BackupInterfaces.VerificationIssue\n247 |   public func toVerificationIssue() -\u003e VerificationResult.VerificationIssue {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:271:39: error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n269 | }\n270 | \n271 | extension BackupVerificationResultDTO.RepairSummary {\n    |                                       `- error: 'RepairSummary' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n272 |   /// Convert this DTO to a BackupInterfaces.RepairSummary\n273 |   public func toRepairSummary() -\u003e VerificationResult.RepairSummary {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:294:39: error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n  8 |  * including any issues found during verification.\n  9 |  */\n 10 | public struct BackupVerificationResultDTO: Sendable, Equatable {\n    |               `- note: 'BackupVerificationResultDTO' declared here\n 11 |   /// Whether the verification completed successfully\n 12 |   public let verified: Bool\n    :\n292 | }\n293 | \n294 | extension BackupVerificationResultDTO.RepairAction {\n    |                                       `- error: 'RepairAction' is not a member type of struct 'BackupServices.BackupVerificationResultDTO'\n295 |   /// Convert this DTO to a BackupInterfaces.RepairAction\n296 |   public func toRepairAction() -\u003e VerificationResult.RepairAction {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:237:65: error: type 'VerificationIssue' has no member 'from'\n235 |       bytesVerified: verificationResult.bytesVerified,\n236 |       errorCount: verificationResult.errorCount,\n237 |       issues: verificationResult.issues.map { VerificationIssue.from(issue: $0) },\n    |                                                                 `- error: type 'VerificationIssue' has no member 'from'\n238 |       repairSummary: verificationResult.repairSummary.map { RepairSummary.from(summary: $0) },\n239 |       snapshotID: verificationResult.snapshotID,\n\npackages/UmbraImplementations/Sources/BackupServices/Types/BackupVerificationResultDTO.swift:238:75: error: type 'RepairSummary' has no member 'from'\n236 |       errorCount: verificationResult.errorCount,\n237 |       issues: verificationResult.issues.map { VerificationIssue.from(issue: $0) },\n238 |       repairSummary: verificationResult.repairSummary.map { RepairSummary.from(summary: $0) },\n    |                                                                           `- error: type 'RepairSummary' has no member 'from'\n239 |       snapshotID: verificationResult.snapshotID,\n240 |       verificationTime: verificationResult.verificationTime\n\npackages/UmbraImplementations/Sources/BackupServices/Types/CancellationTokenAdapter.swift:27:15: warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n25 | private final class ProgressCancellationTokenAdapter: ProgressCancellationToken {\n26 |   private let token: BackupOperationCancellationToken\n27 |   private var _isCancelled: Bool=false\n   |               `- warning: stored property '_isCancelled' of 'Sendable'-conforming class 'ProgressCancellationTokenAdapter' is mutable; this is an error in the Swift 6 language mode\n28 | \n29 |   init(token: BackupOperationCancellationToken) {\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:92:16: error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n 90 |       .with(\n 91 |         key: \"repositoryID\",\n 92 |         value: repositoryID,\n    |                |- error: value of optional type 'String?' must be unwrapped to a value of type 'String'\n    |                |- note: coalesce using '??' to provide a default when the optional value contains 'nil'\n    |                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n 93 |         privacy: LoggingTypes.PrivacyClassification.public\n 94 |       )\n\npackages/UmbraImplementations/Sources/BackupServices/Types/SnapshotOperationDTO.swift:97:16: error: value of optional type '[String]?' must be unwrapped to refer to member 'joined' of wrapped base type '[String]'\n 95 |       .with(\n 96 |         key: \"tags\",\n 97 |         value: tags.joined(separator: \", \"),\n    |                |- error: value of optional type '[String]?' must be unwrapped to refer to member 'joined' of wrapped base type '[String]'\n    |                |- note: chain the optional using '?' to access member 'joined' only for non-'nil' base values\n    |                `- note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n 98 |         privacy: LoggingTypes.PrivacyClassification.public\n 99 |       )\nTarget //packages/UmbraImplementations/Sources/BackupServices:BackupServices failed to build\nINFO: Elapsed time: 1.518s, Critical Path: 1.44s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices",
    "success": true,
    "start_time": "2025-04-08T00:44:11.177297+01:00",
    "end_time": "2025-04-08T00:44:12.164149+01:00",
    "duration": "986.850625ms",
    "output": "INFO: Invocation ID: bd844406-913d-41cc-841b-e0e320d6439f\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices (3 packages loaded, 8 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/BookmarkServices:BookmarkServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/BookmarkServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/BookmarkServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/BookmarkServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/libBookmarkServices.a\nINFO: Elapsed time: 0.100s, Critical Path: 0.00s\nINFO: 1 process: 7 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger",
    "success": true,
    "start_time": "2025-04-08T00:44:12.164156+01:00",
    "end_time": "2025-04-08T00:44:12.952451+01:00",
    "duration": "788.293625ms",
    "output": "INFO: Invocation ID: 54173cdf-3419-4a18-a406-2df406df1b15\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/BookmarkServices/Logging:BookmarkLogger up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/BookmarkLogger.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/BookmarkLogger.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/BookmarkLogger.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Logging/libBookmarkLogger.a\nINFO: Elapsed time: 0.084s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel",
    "success": true,
    "start_time": "2025-04-08T00:44:12.952457+01:00",
    "end_time": "2025-04-08T00:44:13.812599+01:00",
    "duration": "860.1405ms",
    "output": "INFO: Invocation ID: 740ae4ae-bb51-4209-9aba-4e0b26af551e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/BookmarkServices/Model:BookmarkModel up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/BookmarkModel.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/BookmarkModel.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/BookmarkModel.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/BookmarkServices/Model/libBookmarkModel.a\nINFO: Elapsed time: 0.075s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices",
    "success": true,
    "start_time": "2025-04-08T00:44:13.812615+01:00",
    "end_time": "2025-04-08T00:44:14.763021+01:00",
    "duration": "950.403709ms",
    "output": "INFO: Invocation ID: 69df09b8-dab9-4370-a7fa-e67255031a6a\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices (2 packages loaded, 12 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ConfigServices/libConfigServices.a\nINFO: Elapsed time: 0.096s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CoreServices:CoreServices",
    "success": false,
    "start_time": "2025-04-08T00:44:14.763027+01:00",
    "end_time": "2025-04-08T00:44:16.547139+01:00",
    "duration": "1.784109s",
    "output": "INFO: Invocation ID: e0e0c92a-8e3b-44be-a16e-af14a5892c56\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CoreServices:CoreServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CoreServices:CoreServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CoreServices:CoreServices (3 packages loaded, 41 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:227:18: error: cannot find type 'DeploymentEnvironment' in scope\n225 |     secureStorage: SecureStorageProtocol?=nil,\n226 |     logger: LoggingProtocol?=nil,\n227 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:344:14: error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n342 |   public static func createProviderRegistry(\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n    |              `- error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n346 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:407:22: error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n405 |    - Returns: A mock CryptoServiceProtocol implementation\n406 |    */\n407 |   public static func createMock(\n    |                      `- error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n408 |     configuration: MockCryptoServiceImpl.Configuration = .init(),\n409 |     logger: LoggingProtocol? = nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:14:20: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n 12 |  as a fallback implementation for various security operations.\n 13 |  */\n 14 | public final class BasicSecurityProvider: SecurityProviderProtocol, AsyncServiceInitializable {\n    |                    |- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n    |                    `- note: add stubs for conformance\n 15 |   // MARK: - Properties (Placeholder - Dependencies likely needed)\n 16 | \n    :\n178 | \n179 |   /// Creates a standard security configuration DTO for this basic provider.\n180 |   public func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions? = nil) -\u003e CoreSecurityTypes.SecurityConfigDTO {\n    |               `- note: candidate has non-matching type '(SecurityConfigOptions?) -\u003e SecurityConfigDTO'\n181 |     print(\"BasicSecurityProvider createSecureConfig called (stub)\")\n182 |     return CoreSecurityTypes.SecurityConfigDTO(\n\nSecurityCoreInterfaces.SecurityProviderProtocol.createSecureConfig:2:6: note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n1 | protocol SecurityProviderProtocol {\n2 | func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions) async -\u003e CoreSecurityTypes.SecurityConfigDTO}\n  |      `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:479:15: error: invalid redeclaration of 'storeData(data:identifier:)'\n477 |   // They expect `Data` instead of `[UInt8]` for storage operations.\n478 | \n479 |   public func storeData(\n    |               `- error: invalid redeclaration of 'storeData(data:identifier:)'\n480 |     data: Data, // Protocol expects Data\n481 |     identifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:506:15: error: invalid redeclaration of 'retrieveData(identifier:)'\n504 |   }\n505 | \n506 |   public func retrieveData(\n    |               `- error: invalid redeclaration of 'retrieveData(identifier:)'\n507 |     identifier: String\n508 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e { // Protocol expects Data\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:530:15: error: invalid redeclaration of 'deleteData(identifier:)'\n528 |   }\n529 | \n530 |   public func deleteData(\n    |               `- error: invalid redeclaration of 'deleteData(identifier:)'\n531 |     identifier: String\n532 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:550:15: error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n548 | \n549 |   // Ensure generateHash signature matches protocol\n550 |   public func generateHash(\n    |               `- error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n551 |     dataIdentifier: String,\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:559:15: error: invalid redeclaration of 'importData(_:customIdentifier:)'\n557 |   // Keep the existing importData signature expecting [UInt8]\n558 |   // but also add the one expecting Data to satisfy the protocol.\n559 |   public func importData(\n    |               `- error: invalid redeclaration of 'importData(_:customIdentifier:)'\n560 |     _ data: Data, // Protocol expects Data\n561 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:160:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n158 |     encryptedDataIdentifier: String,\n159 |     keyIdentifier _: String,\n160 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n    |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n161 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n162 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:326:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n324 |   public func generateKey(\n325 |     length: Int,\n326 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n    |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n327 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n328 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:221:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 219 |     encryptedDataIdentifier: String,\n 220 |     keyIdentifier: String,\n 221 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n     |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 222 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 223 |     let context=CryptoLogContext(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:632:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 630 |   public func generateKey(\n 631 |     length: Int,\n 632 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n     |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 633 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 634 |     do {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n266 |    - Returns: Result containing array of identifiers or error details\n267 |    */\n268 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n269 |     await logger.warning(\n270 |       \"List data identifiers operation not supported\",\n\nSecurityCoreInterfaces.SecureStorageProtocol.storeData:2:6: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func storeData(_ data: [UInt8], withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.retrieveData:2:6: note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func retrieveData(withIdentifier identifier: String) async -\u003e Result\u003c[UInt8], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.deleteData:2:6: note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func deleteData(withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.listDataIdentifiers:2:6: note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:67:15: error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 65 | extension CoreSecurityTypes.DecryptionOptions {\n 66 |   /// Convert to CryptoOperationOptionsDTO for use with internal APIs\n 67 |   public func toCryptoOperationOptionsDTO() -\u003e CryptoOperationOptionsDTO {\n    |               `- error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 68 |     // Map the algorithm and mode\n 69 |     let cryptoMode: CryptoMode=switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:87:15: error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 85 | \n 86 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n 87 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n    |               `- error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 88 |   -\u003e SecurityConfigDTO {\n 89 |     var configOptions=SecurityConfigOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:109:15: error: invalid redeclaration of 'toInterfaceOptions()'\n107 | \n108 |   /// Convert to interface DecryptionOptions (used when adapting options)\n109 |   public func toInterfaceOptions() -\u003e CoreSecurityTypes.DecryptionOptions {\n    |               `- error: invalid redeclaration of 'toInterfaceOptions()'\n110 |     // This is a no-op since we're already using the correct type\n111 |     self\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:118:34: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n116 | \n117 | /// Extension to adapt between various key generation options types\n118 | extension SecurityCoreInterfaces.KeyGenerationOptions {\n    |                                  `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n119 |   /// Convert to KeyGenerationOptionsDTO for internal use\n120 |   public func toKeyGenerationOptionsDTO(keySize: Int) -\u003e KeyGenerationOptionsDTO {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:34: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n199 | \n200 | /// Extension to adapt between SecurityCoreInterfaces.HashingOptions and various format options\n201 | extension SecurityCoreInterfaces.HashingOptions {\n    |                                  `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n202 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n203 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:333:68: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n331 | \n332 |   /// Extract key generation options from the configuration\n333 |   public var extractedKeyGenerationOptions: SecurityCoreInterfaces.KeyGenerationOptions? {\n    |                                                                    `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n334 |     nil // Simplified until we have the proper members\n335 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:338:62: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n336 | \n337 |   /// Extract hashing options from the configuration\n338 |   public var extractedHashingOptions: SecurityCoreInterfaces.HashingOptions? {\n    |                                                              `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n339 |     nil // Simplified until we have the proper members\n340 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:21:23: error: cannot find type 'PaddingMode' in scope\n19 | \n20 |   /// Padding mode to use for block ciphers\n21 |   public let padding: PaddingMode?\n   |                       `- error: cannot find type 'PaddingMode' in scope\n22 | \n23 |   /**\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:34:14: error: cannot find type 'PaddingMode' in scope\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n34 |     padding: PaddingMode? = .pkcs7\n   |              `- error: cannot find type 'PaddingMode' in scope\n35 |   ) {\n36 |     self.algorithm=algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/UnifiedTypes/UnifiedTypes.swift:129:54: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n127 | \n128 |     /// Convert from SecurityCoreInterfaces.DecryptionOptions if available\n129 |     public init(from options: SecurityCoreInterfaces.DecryptionOptions?) {\n    |                                                      `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n130 |       // Default values if options is nil\n131 |       if let options {\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:117:79: error: value of type 'HashingOptions' has no member 'salt'\n115 |     guard let options else { return nil }\n116 | \n117 |     return LocalHashingOptions(algorithm: options.algorithm, useSalt: options.salt != nil)\n    |                                                                               `- error: value of type 'HashingOptions' has no member 'salt'\n118 |   }\n119 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:130:97: error: extra argument 'salt' in call\n128 |     guard let options else { return nil }\n129 | \n130 |     return CoreSecurityTypes.HashingOptions(algorithm: options.algorithm, salt: options.useSalt ? [0x01, 0x02, 0x03, 0x04] : nil)\n    |                                                                                                 `- error: extra argument 'salt' in call\n131 |   }\n132 | }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:24: error: value of type 'KeyGenerationOptions' has no member 'options'\n151 |       useSecureEnclave: options.useSecureEnclave,\n152 |       isExtractable: options.isExtractable,\n153 |       options: options.options\n    |                        `- error: value of type 'KeyGenerationOptions' has no member 'options'\n154 |     )\n155 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:172:24: error: extra argument 'options' in call\n170 |       useSecureEnclave: options.useSecureEnclave,\n171 |       isExtractable: options.isExtractable,\n172 |       options: options.options\n    |                        `- error: extra argument 'options' in call\n173 |     )\n174 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:31: error: missing argument for parameter 'keySizeInBits' in call\n167 | \n168 |     return CoreSecurityTypes.KeyGenerationOptions(\n169 |       keyType: options.keyType,\n    |                               `- error: missing argument for parameter 'keySizeInBits' in call\n170 |       useSecureEnclave: options.useSecureEnclave,\n171 |       isExtractable: options.isExtractable,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:147:10: note: 'init(keyType:keySizeInBits:isExtractable:useSecureEnclave:)' declared here\n145 |   public let useSecureEnclave: Bool // Hint to use hardware security module if available\n146 | \n147 |   public init(\n    |          `- note: 'init(keyType:keySizeInBits:isExtractable:useSecureEnclave:)' declared here\n148 |     keyType: KeyType,\n149 |     keySizeInBits: Int,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:227:18: error: cannot find type 'DeploymentEnvironment' in scope\n225 |     secureStorage: SecureStorageProtocol?=nil,\n226 |     logger: LoggingProtocol?=nil,\n227 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:344:14: error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n342 |   public static func createProviderRegistry(\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n    |              `- error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n346 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:407:22: error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n405 |    - Returns: A mock CryptoServiceProtocol implementation\n406 |    */\n407 |   public static func createMock(\n    |                      `- error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n408 |     configuration: MockCryptoServiceImpl.Configuration = .init(),\n409 |     logger: LoggingProtocol? = nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:100:48: error: type of expression is ambiguous without a type annotation\n 98 |     logger: LoggingProtocol? = nil\n 99 |   ) async -\u003e CryptoServiceProtocol {\n100 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n101 | \n102 |     return await DefaultCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:103:39: error: 'await' cannot appear to the right of a non-assignment operator\n101 | \n102 |     return await DefaultCryptoServiceImpl(\n103 |       secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                       `- error: 'await' cannot appear to the right of a non-assignment operator\n104 |       logger: actualLogger,\n105 |       options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:105:16: error: extra argument 'options' in call\n103 |       secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n104 |       logger: actualLogger,\n105 |       options: FactoryCryptoOptions()\n    |                `- error: extra argument 'options' in call\n106 |     )\n107 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:121:48: error: type of expression is ambiguous without a type annotation\n119 |     logger: LoggingProtocol?=nil\n120 |   ) async -\u003e CryptoServiceProtocol {\n121 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n122 | \n123 |     return await LoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:125:41: error: 'await' cannot appear to the right of a non-assignment operator\n123 |     return await LoggingCryptoServiceImpl(\n124 |       wrapped: DefaultCryptoServiceImpl(\n125 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n126 |         logger: actualLogger,\n127 |         options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:127:18: error: extra argument 'options' in call\n125 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n126 |         logger: actualLogger,\n127 |         options: FactoryCryptoOptions()\n    |                  `- error: extra argument 'options' in call\n128 |       ),\n129 |       logger: actualLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:145:48: error: type of expression is ambiguous without a type annotation\n143 |     logger: LoggingProtocol?=nil\n144 |   ) async -\u003e CryptoServiceProtocol {\n145 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n146 | \n147 |     return await EnhancedLoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:149:41: error: 'await' cannot appear to the right of a non-assignment operator\n147 |     return await EnhancedLoggingCryptoServiceImpl(\n148 |       wrapped: DefaultCryptoServiceImpl(\n149 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:152:8: error: missing argument for parameter 'secureStorage' in call\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n152 |       ),\n    |        `- error: missing argument for parameter 'secureStorage' in call\n153 |       logger: actualLogger\n154 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:31:10: note: 'init(wrapped:secureStorage:logger:)' declared here\n 29 |      - logger: The privacy-aware logger to use for logging.\n 30 |    */\n 31 |   public init(\n    |          `- note: 'init(wrapped:secureStorage:logger:)' declared here\n 32 |     wrapped: CryptoServiceProtocol,\n 33 |     secureStorage: SecureStorageProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:153:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n151 |         options: FactoryCryptoOptions()\n152 |       ),\n153 |       logger: actualLogger\n    |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n154 |     )\n155 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:151:18: error: extra argument 'options' in call\n149 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n    |                  `- error: extra argument 'options' in call\n152 |       ),\n153 |       logger: actualLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:169:48: error: type of expression is ambiguous without a type annotation\n167 |     logger: LoggingProtocol?=nil\n168 |   ) async -\u003e CryptoServiceProtocol {\n169 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n170 | \n171 |     // Create secure service with enhanced parameters\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:174:41: error: 'await' cannot appear to the right of a non-assignment operator\n172 |     let service = await EnhancedSecureCryptoServiceImpl(\n173 |       wrapped: DefaultCryptoServiceImpl(\n174 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n175 |         logger: actualLogger,\n176 |         options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:181:16: error: extra argument 'storage' in call\n179 |         )\n180 |       ),\n181 |       storage: await createSecureStorage(),\n    |                `- error: extra argument 'storage' in call\n182 |       logger: actualLogger\n183 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:181:43: error: missing argument for parameter 'rateLimiter' in call\n179 |         )\n180 |       ),\n181 |       storage: await createSecureStorage(),\n    |                                           `- error: missing argument for parameter 'rateLimiter' in call\n182 |       logger: actualLogger\n183 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:44:10: note: 'init(wrapped:logger:rateLimiter:)' declared here\n 42 |      - rateLimiter: Rate limiter for security operations\n 43 |    */\n 44 |   public init(\n    |          `- note: 'init(wrapped:logger:rateLimiter:)' declared here\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:182:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n180 |       ),\n181 |       storage: await createSecureStorage(),\n182 |       logger: actualLogger\n    |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n183 |     )\n184 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:176:18: error: extra argument 'options' in call\n174 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n175 |         logger: actualLogger,\n176 |         options: FactoryCryptoOptions(\n    |                  `- error: extra argument 'options' in call\n177 |           defaultIterations: 10000, // Higher iteration count for PBKDF2\n178 |           enforceStrongKeys: true\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:205:48: error: type of expression is ambiguous without a type annotation\n203 |     secureStorage: SecureStorageProtocol? = nil\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n207 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:206:48: error: 'await' cannot appear to the right of a non-assignment operator\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n207 |     \n208 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:206:54: error: 'async' call in an autoclosure that does not support concurrency\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n207 |     \n208 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:208:12: warning: no 'async' operations occur within 'await' expression\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n207 |     \n208 |     return await MockCryptoServiceImpl(\n    |            `- warning: no 'async' operations occur within 'await' expression\n209 |       configuration: configuration,\n210 |       logger: actualLogger,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:229:48: error: type of expression is ambiguous without a type annotation\n227 |     environment: DeploymentEnvironment = .production\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n230 | \n231 |     switch environment {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:234:43: error: 'await' cannot appear to the right of a non-assignment operator\n232 |       case .development:\n233 |         return await DefaultCryptoServiceImpl(\n234 |           secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                           `- error: 'await' cannot appear to the right of a non-assignment operator\n235 |           logger: actualLogger,\n236 |           options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:236:20: error: extra argument 'options' in call\n234 |           secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n235 |           logger: actualLogger,\n236 |           options: FactoryCryptoOptions(\n    |                    `- error: extra argument 'options' in call\n237 |             defaultIterations: 1000, // Lower for development speed\n238 |             enforceStrongKeys: false // More lenient for development\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:244:26: error: cannot find 'MockCryptoConfiguration' in scope\n242 |       case .testing:\n243 |         return await MockCryptoServiceImpl(\n244 |           configuration: MockCryptoConfiguration(\n    |                          `- error: cannot find 'MockCryptoConfiguration' in scope\n245 |             encryptionSucceeds: true,\n246 |             decryptionSucceeds: true,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:260:45: error: 'await' cannot appear to the right of a non-assignment operator\n258 |         return await EnhancedLoggingCryptoServiceImpl(\n259 |           wrapped: DefaultCryptoServiceImpl(\n260 |             secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                             `- error: 'await' cannot appear to the right of a non-assignment operator\n261 |             logger: actualLogger,\n262 |             options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:266:12: error: missing argument for parameter 'secureStorage' in call\n264 |               enforceStrongKeys: true\n265 |             )\n266 |           ),\n    |            `- error: missing argument for parameter 'secureStorage' in call\n267 |           logger: actualLogger\n268 |         )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:31:10: note: 'init(wrapped:secureStorage:logger:)' declared here\n 29 |      - logger: The privacy-aware logger to use for logging.\n 30 |    */\n 31 |   public init(\n    |          `- note: 'init(wrapped:secureStorage:logger:)' declared here\n 32 |     wrapped: CryptoServiceProtocol,\n 33 |     secureStorage: SecureStorageProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:267:19: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n265 |             )\n266 |           ),\n267 |           logger: actualLogger\n    |                   `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n268 |         )\n269 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:262:22: error: extra argument 'options' in call\n260 |             secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n261 |             logger: actualLogger,\n262 |             options: FactoryCryptoOptions(\n    |                      `- error: extra argument 'options' in call\n263 |               defaultIterations: 5000, // Medium strength for staging\n264 |               enforceStrongKeys: true\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:295:48: error: type of expression is ambiguous without a type annotation\n293 |     logger: LoggingProtocol? = nil\n294 |   ) async -\u003e CryptoServiceProtocol {\n295 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n296 |     \n297 |     // Create the provider\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:322:48: error: type of expression is ambiguous without a type annotation\n320 |     logger: LoggingProtocol? = nil\n321 |   ) async -\u003e CryptoServiceProtocol {\n322 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n323 | \n324 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:325:48: error: 'await' cannot appear to the right of a non-assignment operator\n323 | \n324 |     // Use the provided secure storage or create a default one\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:327:18: error: cannot find 'DefaultCryptoServiceWithProviderImpl' in scope\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n    |                  `- error: cannot find 'DefaultCryptoServiceWithProviderImpl' in scope\n328 |       provider: provider,\n329 |       secureStorage: actualSecureStorage,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:325:54: error: 'async' call in an autoclosure that does not support concurrency\n323 | \n324 |     // Use the provided secure storage or create a default one\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:345:31: error: type of expression is ambiguous without a type annotation\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                               `- error: type of expression is ambiguous without a type annotation\n346 |     \n347 |     return await DefaultSecurityProviderRegistry(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:368:31: error: type of expression is ambiguous without a type annotation\n366 |     logger: LoggingProtocol? = nil\n367 |   ) async -\u003e SecureStorageProtocol {\n368 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                               `- error: type of expression is ambiguous without a type annotation\n369 |     \n370 |     // Create default provider if none provided\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:376:61: error: cannot infer contextual base in reference to member 'default'\n374 |     } else {\n375 |       let registry = await createProviderRegistry(logger: actualLogger)\n376 |       actualProvider = await registry.createProvider(type: .default)\n    |                                                             `- error: cannot infer contextual base in reference to member 'default'\n377 |     }\n378 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:379:18: error: cannot find 'DefaultSecureStorageImpl' in scope\n377 |     }\n378 |     \n379 |     return await DefaultSecureStorageImpl(\n    |                  `- error: cannot find 'DefaultSecureStorageImpl' in scope\n380 |       provider: actualProvider,\n381 |       storageURL: storageURL,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:412:48: error: type of expression is ambiguous without a type annotation\n410 |     secureStorage: SecureStorageProtocol? = nil\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n414 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:413:48: error: 'await' cannot appear to the right of a non-assignment operator\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n414 |     \n415 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:413:54: error: 'async' call in an autoclosure that does not support concurrency\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n414 |     \n415 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:415:12: warning: no 'async' operations occur within 'await' expression\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n414 |     \n415 |     return await MockCryptoServiceImpl(\n    |            `- warning: no 'async' operations occur within 'await' expression\n416 |       configuration: configuration,\n417 |       logger: actualLogger,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:14:20: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n 12 |  as a fallback implementation for various security operations.\n 13 |  */\n 14 | public final class BasicSecurityProvider: SecurityProviderProtocol, AsyncServiceInitializable {\n    |                    |- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n    |                    `- note: add stubs for conformance\n 15 |   // MARK: - Properties (Placeholder - Dependencies likely needed)\n 16 | \n    :\n178 | \n179 |   /// Creates a standard security configuration DTO for this basic provider.\n180 |   public func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions? = nil) -\u003e CoreSecurityTypes.SecurityConfigDTO {\n    |               `- note: candidate has non-matching type '(SecurityConfigOptions?) -\u003e SecurityConfigDTO'\n181 |     print(\"BasicSecurityProvider createSecureConfig called (stub)\")\n182 |     return CoreSecurityTypes.SecurityConfigDTO(\n\nSecurityCoreInterfaces.SecurityProviderProtocol.createSecureConfig:2:6: note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n1 | protocol SecurityProviderProtocol {\n2 | func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions) async -\u003e CoreSecurityTypes.SecurityConfigDTO}\n  |      `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:479:15: error: invalid redeclaration of 'storeData(data:identifier:)'\n477 |   // They expect `Data` instead of `[UInt8]` for storage operations.\n478 | \n479 |   public func storeData(\n    |               `- error: invalid redeclaration of 'storeData(data:identifier:)'\n480 |     data: Data, // Protocol expects Data\n481 |     identifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:506:15: error: invalid redeclaration of 'retrieveData(identifier:)'\n504 |   }\n505 | \n506 |   public func retrieveData(\n    |               `- error: invalid redeclaration of 'retrieveData(identifier:)'\n507 |     identifier: String\n508 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e { // Protocol expects Data\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:530:15: error: invalid redeclaration of 'deleteData(identifier:)'\n528 |   }\n529 | \n530 |   public func deleteData(\n    |               `- error: invalid redeclaration of 'deleteData(identifier:)'\n531 |     identifier: String\n532 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:550:15: error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n548 | \n549 |   // Ensure generateHash signature matches protocol\n550 |   public func generateHash(\n    |               `- error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n551 |     dataIdentifier: String,\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:559:15: error: invalid redeclaration of 'importData(_:customIdentifier:)'\n557 |   // Keep the existing importData signature expecting [UInt8]\n558 |   // but also add the one expecting Data to satisfy the protocol.\n559 |   public func importData(\n    |               `- error: invalid redeclaration of 'importData(_:customIdentifier:)'\n560 |     _ data: Data, // Protocol expects Data\n561 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:340:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n338 |     customIdentifier: String\n339 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n340 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n341 |     await logger?.debug(\"Importing raw data with custom identifier: \\(customIdentifier)\", context: context)\n342 |     // Store the raw data using the secure storage protocol\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:358:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n356 |     customIdentifier: String?\n357 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n358 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n359 |     await logger?.debug(\"Importing [UInt8] data...\", context: context)\n360 |     // Convert [UInt8] to Data for storage\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:384:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n382 |     identifier: String\n383 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n384 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Export\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n385 |     await logger?.debug(\"Exporting data with identifier: \\(identifier)\", context: context)\n386 |     let result = await secureStorage.retrieveData(withIdentifier: identifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:411:21: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n409 |     } else {\n410 |       // Fallback or handle error appropriately\n411 |       let context = LogContextDTO(subsystem: \"CryptoService\", category: \"Randomness\")\n    |                     `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n412 |       await logger?.error(\"Failed to generate secure random bytes, status: \\(status)\", context: context)\n413 |       // Returning non-secure bytes as a fallback - consider throwing an error instead\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:425:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n423 |     options _: CoreSecurityTypes.HashingOptions? = nil\n424 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n425 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Hashing\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n426 |     await logger?.debug(\n427 |       \"Verifying hash for data \\(dataIdentifier) against hash \\(hashIdentifier)\", context: context\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:433:34: error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n431 |     guard case .success(let originalData) = dataResult else {\n432 |       await logger?.error(\"Failed to retrieve original data for hash verification\", context: context)\n433 |       return .failure(dataResult.error ?? .dataNotFound(identifier: dataIdentifier))\n    |                                  `- error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n434 |     }\n435 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:433:44: error: enum case 'dataNotFound' has no associated values\n431 |     guard case .success(let originalData) = dataResult else {\n432 |       await logger?.error(\"Failed to retrieve original data for hash verification\", context: context)\n433 |       return .failure(dataResult.error ?? .dataNotFound(identifier: dataIdentifier))\n    |                                            `- error: enum case 'dataNotFound' has no associated values\n434 |     }\n435 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:440:34: error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n438 |     guard case .success(let storedHash) = hashResult else {\n439 |       await logger?.error(\"Failed to retrieve stored hash for verification\", context: context)\n440 |       return .failure(hashResult.error ?? .dataNotFound(identifier: hashIdentifier))\n    |                                  `- error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n441 |     }\n442 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:440:44: error: enum case 'dataNotFound' has no associated values\n438 |     guard case .success(let storedHash) = hashResult else {\n439 |       await logger?.error(\"Failed to retrieve stored hash for verification\", context: context)\n440 |       return .failure(hashResult.error ?? .dataNotFound(identifier: hashIdentifier))\n    |                                            `- error: enum case 'dataNotFound' has no associated values\n441 |     }\n442 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:444:25: error: cannot find 'sha256' in scope\n442 | \n443 |     // 3. Generate hash of original data (using a basic SHA256 for this stub)\n444 |     let generatedHash = sha256(data: originalData)\n    |                         `- error: cannot find 'sha256' in scope\n445 | \n446 |     // 4. Compare hashes\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:457:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n455 |     options _: CoreSecurityTypes.KeyGenerationOptions? = nil\n456 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n457 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"KeyManagement\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n458 |     await logger?.debug(\"Generating key of length \\(length)...\", context: context)\n459 |     let keyData = generateRandomBytes(count: length)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:554:66: error: cannot find 'options' in scope\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n553 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n554 |       return await hash(dataIdentifier: dataIdentifier, options: options)\n    |                                                                  `- error: cannot find 'options' in scope\n555 |   }\n556 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:563:36: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n561 |     customIdentifier: String\n562 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n563 |       let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n564 |       await logger?.debug(\"Importing Data with custom identifier: \\(customIdentifier)\", context: context)\n565 |       // Store the raw data using the secure storage protocol, converting Data to [UInt8]\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:459:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n457 |       identifier: customIdentifier\n458 |     )\n459 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n460 |     return await wrapped.importData(data, customIdentifier: customIdentifier)\n461 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:480:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n478 |       identifier: customIdentifier\n479 |     )\n480 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n481 |     return await wrapped.importData(data, customIdentifier: customIdentifier)\n482 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:501:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n499 |       identifier: dataIdentifier\n500 |     )\n501 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n502 |     return await wrapped.generateHash(dataIdentifier: dataIdentifier, options: options)\n503 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:522:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n520 |       identifier: identifier\n521 |     )\n522 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n523 |     return await wrapped.storeData(data: data, identifier: identifier)\n524 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:540:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n538 |       identifier: identifier\n539 |     )\n540 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n541 |     return await wrapped.retrieveData(identifier: identifier)\n542 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:558:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n556 |       identifier: identifier\n557 |     )\n558 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n559 |     return await wrapped.deleteData(identifier: identifier)\n560 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:160:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n158 |     encryptedDataIdentifier: String,\n159 |     keyIdentifier _: String,\n160 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n    |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n161 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n162 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:326:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n324 |   public func generateKey(\n325 |     length: Int,\n326 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n    |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n327 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n328 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:51:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 49 |                 return .failure(error)\n 50 |             }\n 51 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 52 |             return .failure(error)\n 53 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:75:26: error: missing argument for parameter 'source' in call\n 73 |         await logger.debug(\n 74 |             \"Encrypting data using algorithm: \\(algorithm.rawValue)\",\n 75 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n 76 |         )\n 77 |         \n\nLoggingServices.LoggingProtocol.debug:3:15: note: 'debug(_:metadata:source:)' declared here\n1 | protocol LoggingProtocol {\n2 | @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n3 |   public func debug(_ message: String, metadata: LoggingTypes.PrivacyMetadata?, source: String) async}\n  |               `- note: 'debug(_:metadata:source:)' declared here\n4 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:83:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 81 |             // Actual implementation would use CommonCrypto or CryptoKit\n 82 |             return .success(data) // Placeholder response\n 83 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 84 |             return .failure(error)\n 85 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:107:26: error: missing argument for parameter 'source' in call\n105 |         await logger.debug(\n106 |             \"Decrypting data using algorithm: \\(algorithm.rawValue)\",\n107 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n108 |         )\n109 |         \n\nLoggingServices.LoggingProtocol.debug:3:15: note: 'debug(_:metadata:source:)' declared here\n1 | protocol LoggingProtocol {\n2 | @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n3 |   public func debug(_ message: String, metadata: LoggingTypes.PrivacyMetadata?, source: String) async}\n  |               `- note: 'debug(_:metadata:source:)' declared here\n4 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:115:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n113 |             // Actual implementation would use CommonCrypto or CryptoKit\n114 |             return .success(data) // Placeholder response\n115 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n116 |             return .failure(error)\n117 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:134:26: error: missing argument for parameter 'source' in call\n132 |         await logger.debug(\n133 |             \"Hashing data using algorithm: \\(algorithm.rawValue)\",\n134 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n135 |         )\n136 |         \n\nLoggingServices.LoggingProtocol.debug:3:15: note: 'debug(_:metadata:source:)' declared here\n1 | protocol LoggingProtocol {\n2 | @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n3 |   public func debug(_ message: String, metadata: LoggingTypes.PrivacyMetadata?, source: String) async}\n  |               `- note: 'debug(_:metadata:source:)' declared here\n4 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:142:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n140 |             // Actual implementation would use CommonCrypto or CryptoKit\n141 |             return .success(data) // Placeholder response\n142 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n143 |             return .failure(error)\n144 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:161:26: error: missing argument for parameter 'source' in call\n159 |         await logger.debug(\n160 |             \"Generating \\(keyType.rawValue) key of size: \\(keySize) bits\",\n161 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n162 |         )\n163 |         \n\nLoggingServices.LoggingProtocol.debug:3:15: note: 'debug(_:metadata:source:)' declared here\n1 | protocol LoggingProtocol {\n2 | @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n3 |   public func debug(_ message: String, metadata: LoggingTypes.PrivacyMetadata?, source: String) async}\n  |               `- note: 'debug(_:metadata:source:)' declared here\n4 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:221:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 219 |     encryptedDataIdentifier: String,\n 220 |     keyIdentifier: String,\n 221 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n     |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 222 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 223 |     let context=CryptoLogContext(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:632:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 630 |   public func generateKey(\n 631 |     length: Int,\n 632 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n     |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 633 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 634 |     do {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:78: error: missing argument for parameter 'options' in call\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                              `- error: missing argument for parameter 'options' in call\n 146 | \n 147 |       // Store the encrypted data\n\nCryptoInterfaces.CryptoProviderProtocol.encrypt:2:6: note: 'encrypt(data:key:options:)' declared here\n1 | protocol CryptoProviderProtocol {\n2 | func encrypt(data: Data, key: Data, options: CoreSecurityTypes.EncryptionOptions?) async -\u003e Result\u003cData, any Error\u003e}\n  |      `- note: 'encrypt(data:key:options:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:64: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 146 | \n 147 |       // Store the encrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:75: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                           `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 146 | \n 147 |       // Store the encrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:87: error: missing argument for parameter 'options' in call\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                                       `- error: missing argument for parameter 'options' in call\n 287 | \n 288 |       // Store the decrypted data\n\nCryptoInterfaces.CryptoProviderProtocol.decrypt:2:6: note: 'decrypt(data:key:options:)' declared here\n1 | protocol CryptoProviderProtocol {\n2 | func decrypt(data: Data, key: Data, options: CoreSecurityTypes.EncryptionOptions?) async -\u003e Result\u003cData, any Error\u003e}\n  |      `- note: 'decrypt(data:key:options:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:64: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 287 | \n 288 |       // Store the decrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:84: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                                    `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 287 | \n 288 |       // Store the decrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:641:53: error: cannot convert value of type 'Result\u003cData, any Error\u003e' to expected argument type '[UInt8]'\n 639 | \n 640 |       // Store the key in secure storage\n 641 |       let storeResult=await secureStorage.storeData(keyData, withIdentifier: keyIdentifier)\n     |                                                     `- error: cannot convert value of type 'Result\u003cData, any Error\u003e' to expected argument type '[UInt8]'\n 642 | \n 643 |       guard case .success=storeResult else {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:638:19: warning: no calls to throwing functions occur within 'try' expression\n 636 | \n 637 |       // Generate random key data\n 638 |       let keyData=try await cryptoProvider.generateRandomData(length: length)\n     |                   `- warning: no calls to throwing functions occur within 'try' expression\n 639 | \n 640 |       // Store the key in secure storage\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoStorage.swift:417:31: error: cannot find 'getSecureStorage' in scope\n415 |     // Currently we just attempt to retrieve the data and check if it exists\n416 |     // This could be optimized in a real implementation to avoid loading the data\n417 |     let secureStore=try await getSecureStorage()\n    |                               `- error: cannot find 'getSecureStorage' in scope\n418 |     return secureStore.hasKey(identifier)\n419 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n266 |    - Returns: Result containing array of identifiers or error details\n267 |    */\n268 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n269 |     await logger.warning(\n270 |       \"List data identifiers operation not supported\",\n\nSecurityCoreInterfaces.SecureStorageProtocol.storeData:2:6: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func storeData(_ data: [UInt8], withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.retrieveData:2:6: note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func retrieveData(withIdentifier identifier: String) async -\u003e Result\u003c[UInt8], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.deleteData:2:6: note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func deleteData(withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.listDataIdentifiers:2:6: note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:158:61: error: type '_ErrorCodeProtocol' has no member 'notFound'\n156 |       )\n157 | \n158 |       if let storageError=error as? StorageCoreError, case .notFound=storageError {\n    |                                                             `- error: type '_ErrorCodeProtocol' has no member 'notFound'\n159 |         return .failure(.dataNotFound)\n160 |       }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:67:15: error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 65 | extension CoreSecurityTypes.DecryptionOptions {\n 66 |   /// Convert to CryptoOperationOptionsDTO for use with internal APIs\n 67 |   public func toCryptoOperationOptionsDTO() -\u003e CryptoOperationOptionsDTO {\n    |               `- error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 68 |     // Map the algorithm and mode\n 69 |     let cryptoMode: CryptoMode=switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:87:15: error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 85 | \n 86 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n 87 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n    |               `- error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 88 |   -\u003e SecurityConfigDTO {\n 89 |     var configOptions=SecurityConfigOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:109:15: error: invalid redeclaration of 'toInterfaceOptions()'\n107 | \n108 |   /// Convert to interface DecryptionOptions (used when adapting options)\n109 |   public func toInterfaceOptions() -\u003e CoreSecurityTypes.DecryptionOptions {\n    |               `- error: invalid redeclaration of 'toInterfaceOptions()'\n110 |     // This is a no-op since we're already using the correct type\n111 |     self\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:118:34: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n116 | \n117 | /// Extension to adapt between various key generation options types\n118 | extension SecurityCoreInterfaces.KeyGenerationOptions {\n    |                                  `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n119 |   /// Convert to KeyGenerationOptionsDTO for internal use\n120 |   public func toKeyGenerationOptionsDTO(keySize: Int) -\u003e KeyGenerationOptionsDTO {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:34: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n199 | \n200 | /// Extension to adapt between SecurityCoreInterfaces.HashingOptions and various format options\n201 | extension SecurityCoreInterfaces.HashingOptions {\n    |                                  `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n202 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n203 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:333:68: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n331 | \n332 |   /// Extract key generation options from the configuration\n333 |   public var extractedKeyGenerationOptions: SecurityCoreInterfaces.KeyGenerationOptions? {\n    |                                                                    `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n334 |     nil // Simplified until we have the proper members\n335 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:338:62: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n336 | \n337 |   /// Extract hashing options from the configuration\n338 |   public var extractedHashingOptions: SecurityCoreInterfaces.HashingOptions? {\n    |                                                              `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n339 |     nil // Simplified until we have the proper members\n340 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:21:23: error: cannot find type 'PaddingMode' in scope\n19 | \n20 |   /// Padding mode to use for block ciphers\n21 |   public let padding: PaddingMode?\n   |                       `- error: cannot find type 'PaddingMode' in scope\n22 | \n23 |   /**\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:34:14: error: cannot find type 'PaddingMode' in scope\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n34 |     padding: PaddingMode? = .pkcs7\n   |              `- error: cannot find type 'PaddingMode' in scope\n35 |   ) {\n36 |     self.algorithm=algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/UnifiedTypes/UnifiedTypes.swift:129:54: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n127 | \n128 |     /// Convert from SecurityCoreInterfaces.DecryptionOptions if available\n129 |     public init(from options: SecurityCoreInterfaces.DecryptionOptions?) {\n    |                                                      `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n130 |       // Default values if options is nil\n131 |       if let options {\nTarget //packages/UmbraImplementations/Sources/CoreServices:CoreServices failed to build\nINFO: Elapsed time: 1.085s, Critical Path: 0.98s\nINFO: 2 processes: 4 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices",
    "success": false,
    "start_time": "2025-04-08T00:44:16.547155+01:00",
    "end_time": "2025-04-08T00:44:18.323311+01:00",
    "duration": "1.776152125s",
    "output": "INFO: Invocation ID: 13c47e13-377d-48af-b6c7-3820d495f995\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:227:18: error: cannot find type 'DeploymentEnvironment' in scope\n225 |     secureStorage: SecureStorageProtocol?=nil,\n226 |     logger: LoggingProtocol?=nil,\n227 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:344:14: error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n342 |   public static func createProviderRegistry(\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n    |              `- error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n346 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:407:22: error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n405 |    - Returns: A mock CryptoServiceProtocol implementation\n406 |    */\n407 |   public static func createMock(\n    |                      `- error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n408 |     configuration: MockCryptoServiceImpl.Configuration = .init(),\n409 |     logger: LoggingProtocol? = nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:14:20: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n 12 |  as a fallback implementation for various security operations.\n 13 |  */\n 14 | public final class BasicSecurityProvider: SecurityProviderProtocol, AsyncServiceInitializable {\n    |                    |- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n    |                    `- note: add stubs for conformance\n 15 |   // MARK: - Properties (Placeholder - Dependencies likely needed)\n 16 | \n    :\n178 | \n179 |   /// Creates a standard security configuration DTO for this basic provider.\n180 |   public func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions? = nil) -\u003e CoreSecurityTypes.SecurityConfigDTO {\n    |               `- note: candidate has non-matching type '(SecurityConfigOptions?) -\u003e SecurityConfigDTO'\n181 |     print(\"BasicSecurityProvider createSecureConfig called (stub)\")\n182 |     return CoreSecurityTypes.SecurityConfigDTO(\n\nSecurityCoreInterfaces.SecurityProviderProtocol.createSecureConfig:2:6: note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n1 | protocol SecurityProviderProtocol {\n2 | func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions) async -\u003e CoreSecurityTypes.SecurityConfigDTO}\n  |      `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:479:15: error: invalid redeclaration of 'storeData(data:identifier:)'\n477 |   // They expect `Data` instead of `[UInt8]` for storage operations.\n478 | \n479 |   public func storeData(\n    |               `- error: invalid redeclaration of 'storeData(data:identifier:)'\n480 |     data: Data, // Protocol expects Data\n481 |     identifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:506:15: error: invalid redeclaration of 'retrieveData(identifier:)'\n504 |   }\n505 | \n506 |   public func retrieveData(\n    |               `- error: invalid redeclaration of 'retrieveData(identifier:)'\n507 |     identifier: String\n508 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e { // Protocol expects Data\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:530:15: error: invalid redeclaration of 'deleteData(identifier:)'\n528 |   }\n529 | \n530 |   public func deleteData(\n    |               `- error: invalid redeclaration of 'deleteData(identifier:)'\n531 |     identifier: String\n532 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:550:15: error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n548 | \n549 |   // Ensure generateHash signature matches protocol\n550 |   public func generateHash(\n    |               `- error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n551 |     dataIdentifier: String,\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:559:15: error: invalid redeclaration of 'importData(_:customIdentifier:)'\n557 |   // Keep the existing importData signature expecting [UInt8]\n558 |   // but also add the one expecting Data to satisfy the protocol.\n559 |   public func importData(\n    |               `- error: invalid redeclaration of 'importData(_:customIdentifier:)'\n560 |     _ data: Data, // Protocol expects Data\n561 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:160:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n158 |     encryptedDataIdentifier: String,\n159 |     keyIdentifier _: String,\n160 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n    |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n161 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n162 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:326:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n324 |   public func generateKey(\n325 |     length: Int,\n326 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n    |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n327 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n328 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:221:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 219 |     encryptedDataIdentifier: String,\n 220 |     keyIdentifier: String,\n 221 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n     |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 222 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 223 |     let context=CryptoLogContext(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:632:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 630 |   public func generateKey(\n 631 |     length: Int,\n 632 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n     |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 633 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 634 |     do {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n266 |    - Returns: Result containing array of identifiers or error details\n267 |    */\n268 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n269 |     await logger.warning(\n270 |       \"List data identifiers operation not supported\",\n\nSecurityCoreInterfaces.SecureStorageProtocol.storeData:2:6: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func storeData(_ data: [UInt8], withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.retrieveData:2:6: note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func retrieveData(withIdentifier identifier: String) async -\u003e Result\u003c[UInt8], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.deleteData:2:6: note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func deleteData(withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.listDataIdentifiers:2:6: note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:67:15: error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 65 | extension CoreSecurityTypes.DecryptionOptions {\n 66 |   /// Convert to CryptoOperationOptionsDTO for use with internal APIs\n 67 |   public func toCryptoOperationOptionsDTO() -\u003e CryptoOperationOptionsDTO {\n    |               `- error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 68 |     // Map the algorithm and mode\n 69 |     let cryptoMode: CryptoMode=switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:87:15: error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 85 | \n 86 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n 87 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n    |               `- error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 88 |   -\u003e SecurityConfigDTO {\n 89 |     var configOptions=SecurityConfigOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:109:15: error: invalid redeclaration of 'toInterfaceOptions()'\n107 | \n108 |   /// Convert to interface DecryptionOptions (used when adapting options)\n109 |   public func toInterfaceOptions() -\u003e CoreSecurityTypes.DecryptionOptions {\n    |               `- error: invalid redeclaration of 'toInterfaceOptions()'\n110 |     // This is a no-op since we're already using the correct type\n111 |     self\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:118:34: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n116 | \n117 | /// Extension to adapt between various key generation options types\n118 | extension SecurityCoreInterfaces.KeyGenerationOptions {\n    |                                  `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n119 |   /// Convert to KeyGenerationOptionsDTO for internal use\n120 |   public func toKeyGenerationOptionsDTO(keySize: Int) -\u003e KeyGenerationOptionsDTO {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:34: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n199 | \n200 | /// Extension to adapt between SecurityCoreInterfaces.HashingOptions and various format options\n201 | extension SecurityCoreInterfaces.HashingOptions {\n    |                                  `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n202 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n203 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:333:68: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n331 | \n332 |   /// Extract key generation options from the configuration\n333 |   public var extractedKeyGenerationOptions: SecurityCoreInterfaces.KeyGenerationOptions? {\n    |                                                                    `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n334 |     nil // Simplified until we have the proper members\n335 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:338:62: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n336 | \n337 |   /// Extract hashing options from the configuration\n338 |   public var extractedHashingOptions: SecurityCoreInterfaces.HashingOptions? {\n    |                                                              `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n339 |     nil // Simplified until we have the proper members\n340 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:21:23: error: cannot find type 'PaddingMode' in scope\n19 | \n20 |   /// Padding mode to use for block ciphers\n21 |   public let padding: PaddingMode?\n   |                       `- error: cannot find type 'PaddingMode' in scope\n22 | \n23 |   /**\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:34:14: error: cannot find type 'PaddingMode' in scope\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n34 |     padding: PaddingMode? = .pkcs7\n   |              `- error: cannot find type 'PaddingMode' in scope\n35 |   ) {\n36 |     self.algorithm=algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/UnifiedTypes/UnifiedTypes.swift:129:54: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n127 | \n128 |     /// Convert from SecurityCoreInterfaces.DecryptionOptions if available\n129 |     public init(from options: SecurityCoreInterfaces.DecryptionOptions?) {\n    |                                                      `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n130 |       // Default values if options is nil\n131 |       if let options {\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:117:79: error: value of type 'HashingOptions' has no member 'salt'\n115 |     guard let options else { return nil }\n116 | \n117 |     return LocalHashingOptions(algorithm: options.algorithm, useSalt: options.salt != nil)\n    |                                                                               `- error: value of type 'HashingOptions' has no member 'salt'\n118 |   }\n119 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:130:97: error: extra argument 'salt' in call\n128 |     guard let options else { return nil }\n129 | \n130 |     return CoreSecurityTypes.HashingOptions(algorithm: options.algorithm, salt: options.useSalt ? [0x01, 0x02, 0x03, 0x04] : nil)\n    |                                                                                                 `- error: extra argument 'salt' in call\n131 |   }\n132 | }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:24: error: value of type 'KeyGenerationOptions' has no member 'options'\n151 |       useSecureEnclave: options.useSecureEnclave,\n152 |       isExtractable: options.isExtractable,\n153 |       options: options.options\n    |                        `- error: value of type 'KeyGenerationOptions' has no member 'options'\n154 |     )\n155 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:172:24: error: extra argument 'options' in call\n170 |       useSecureEnclave: options.useSecureEnclave,\n171 |       isExtractable: options.isExtractable,\n172 |       options: options.options\n    |                        `- error: extra argument 'options' in call\n173 |     )\n174 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:31: error: missing argument for parameter 'keySizeInBits' in call\n167 | \n168 |     return CoreSecurityTypes.KeyGenerationOptions(\n169 |       keyType: options.keyType,\n    |                               `- error: missing argument for parameter 'keySizeInBits' in call\n170 |       useSecureEnclave: options.useSecureEnclave,\n171 |       isExtractable: options.isExtractable,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:147:10: note: 'init(keyType:keySizeInBits:isExtractable:useSecureEnclave:)' declared here\n145 |   public let useSecureEnclave: Bool // Hint to use hardware security module if available\n146 | \n147 |   public init(\n    |          `- note: 'init(keyType:keySizeInBits:isExtractable:useSecureEnclave:)' declared here\n148 |     keyType: KeyType,\n149 |     keySizeInBits: Int,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:227:18: error: cannot find type 'DeploymentEnvironment' in scope\n225 |     secureStorage: SecureStorageProtocol?=nil,\n226 |     logger: LoggingProtocol?=nil,\n227 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:344:14: error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n342 |   public static func createProviderRegistry(\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n    |              `- error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n346 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:407:22: error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n405 |    - Returns: A mock CryptoServiceProtocol implementation\n406 |    */\n407 |   public static func createMock(\n    |                      `- error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n408 |     configuration: MockCryptoServiceImpl.Configuration = .init(),\n409 |     logger: LoggingProtocol? = nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:100:48: error: type of expression is ambiguous without a type annotation\n 98 |     logger: LoggingProtocol? = nil\n 99 |   ) async -\u003e CryptoServiceProtocol {\n100 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n101 | \n102 |     return await DefaultCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:103:39: error: 'await' cannot appear to the right of a non-assignment operator\n101 | \n102 |     return await DefaultCryptoServiceImpl(\n103 |       secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                       `- error: 'await' cannot appear to the right of a non-assignment operator\n104 |       logger: actualLogger,\n105 |       options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:105:16: error: extra argument 'options' in call\n103 |       secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n104 |       logger: actualLogger,\n105 |       options: FactoryCryptoOptions()\n    |                `- error: extra argument 'options' in call\n106 |     )\n107 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:121:48: error: type of expression is ambiguous without a type annotation\n119 |     logger: LoggingProtocol?=nil\n120 |   ) async -\u003e CryptoServiceProtocol {\n121 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n122 | \n123 |     return await LoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:125:41: error: 'await' cannot appear to the right of a non-assignment operator\n123 |     return await LoggingCryptoServiceImpl(\n124 |       wrapped: DefaultCryptoServiceImpl(\n125 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n126 |         logger: actualLogger,\n127 |         options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:127:18: error: extra argument 'options' in call\n125 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n126 |         logger: actualLogger,\n127 |         options: FactoryCryptoOptions()\n    |                  `- error: extra argument 'options' in call\n128 |       ),\n129 |       logger: actualLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:145:48: error: type of expression is ambiguous without a type annotation\n143 |     logger: LoggingProtocol?=nil\n144 |   ) async -\u003e CryptoServiceProtocol {\n145 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n146 | \n147 |     return await EnhancedLoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:149:41: error: 'await' cannot appear to the right of a non-assignment operator\n147 |     return await EnhancedLoggingCryptoServiceImpl(\n148 |       wrapped: DefaultCryptoServiceImpl(\n149 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:152:8: error: missing argument for parameter 'secureStorage' in call\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n152 |       ),\n    |        `- error: missing argument for parameter 'secureStorage' in call\n153 |       logger: actualLogger\n154 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:31:10: note: 'init(wrapped:secureStorage:logger:)' declared here\n 29 |      - logger: The privacy-aware logger to use for logging.\n 30 |    */\n 31 |   public init(\n    |          `- note: 'init(wrapped:secureStorage:logger:)' declared here\n 32 |     wrapped: CryptoServiceProtocol,\n 33 |     secureStorage: SecureStorageProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:153:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n151 |         options: FactoryCryptoOptions()\n152 |       ),\n153 |       logger: actualLogger\n    |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n154 |     )\n155 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:151:18: error: extra argument 'options' in call\n149 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n    |                  `- error: extra argument 'options' in call\n152 |       ),\n153 |       logger: actualLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:169:48: error: type of expression is ambiguous without a type annotation\n167 |     logger: LoggingProtocol?=nil\n168 |   ) async -\u003e CryptoServiceProtocol {\n169 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n170 | \n171 |     // Create secure service with enhanced parameters\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:174:41: error: 'await' cannot appear to the right of a non-assignment operator\n172 |     let service = await EnhancedSecureCryptoServiceImpl(\n173 |       wrapped: DefaultCryptoServiceImpl(\n174 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n175 |         logger: actualLogger,\n176 |         options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:181:16: error: extra argument 'storage' in call\n179 |         )\n180 |       ),\n181 |       storage: await createSecureStorage(),\n    |                `- error: extra argument 'storage' in call\n182 |       logger: actualLogger\n183 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:181:43: error: missing argument for parameter 'rateLimiter' in call\n179 |         )\n180 |       ),\n181 |       storage: await createSecureStorage(),\n    |                                           `- error: missing argument for parameter 'rateLimiter' in call\n182 |       logger: actualLogger\n183 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:44:10: note: 'init(wrapped:logger:rateLimiter:)' declared here\n 42 |      - rateLimiter: Rate limiter for security operations\n 43 |    */\n 44 |   public init(\n    |          `- note: 'init(wrapped:logger:rateLimiter:)' declared here\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:182:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n180 |       ),\n181 |       storage: await createSecureStorage(),\n182 |       logger: actualLogger\n    |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n183 |     )\n184 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:176:18: error: extra argument 'options' in call\n174 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n175 |         logger: actualLogger,\n176 |         options: FactoryCryptoOptions(\n    |                  `- error: extra argument 'options' in call\n177 |           defaultIterations: 10000, // Higher iteration count for PBKDF2\n178 |           enforceStrongKeys: true\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:205:48: error: type of expression is ambiguous without a type annotation\n203 |     secureStorage: SecureStorageProtocol? = nil\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n207 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:206:48: error: 'await' cannot appear to the right of a non-assignment operator\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n207 |     \n208 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:206:54: error: 'async' call in an autoclosure that does not support concurrency\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n207 |     \n208 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:208:12: warning: no 'async' operations occur within 'await' expression\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n207 |     \n208 |     return await MockCryptoServiceImpl(\n    |            `- warning: no 'async' operations occur within 'await' expression\n209 |       configuration: configuration,\n210 |       logger: actualLogger,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:229:48: error: type of expression is ambiguous without a type annotation\n227 |     environment: DeploymentEnvironment = .production\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n230 | \n231 |     switch environment {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:234:43: error: 'await' cannot appear to the right of a non-assignment operator\n232 |       case .development:\n233 |         return await DefaultCryptoServiceImpl(\n234 |           secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                           `- error: 'await' cannot appear to the right of a non-assignment operator\n235 |           logger: actualLogger,\n236 |           options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:236:20: error: extra argument 'options' in call\n234 |           secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n235 |           logger: actualLogger,\n236 |           options: FactoryCryptoOptions(\n    |                    `- error: extra argument 'options' in call\n237 |             defaultIterations: 1000, // Lower for development speed\n238 |             enforceStrongKeys: false // More lenient for development\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:244:26: error: cannot find 'MockCryptoConfiguration' in scope\n242 |       case .testing:\n243 |         return await MockCryptoServiceImpl(\n244 |           configuration: MockCryptoConfiguration(\n    |                          `- error: cannot find 'MockCryptoConfiguration' in scope\n245 |             encryptionSucceeds: true,\n246 |             decryptionSucceeds: true,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:260:45: error: 'await' cannot appear to the right of a non-assignment operator\n258 |         return await EnhancedLoggingCryptoServiceImpl(\n259 |           wrapped: DefaultCryptoServiceImpl(\n260 |             secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                             `- error: 'await' cannot appear to the right of a non-assignment operator\n261 |             logger: actualLogger,\n262 |             options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:266:12: error: missing argument for parameter 'secureStorage' in call\n264 |               enforceStrongKeys: true\n265 |             )\n266 |           ),\n    |            `- error: missing argument for parameter 'secureStorage' in call\n267 |           logger: actualLogger\n268 |         )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:31:10: note: 'init(wrapped:secureStorage:logger:)' declared here\n 29 |      - logger: The privacy-aware logger to use for logging.\n 30 |    */\n 31 |   public init(\n    |          `- note: 'init(wrapped:secureStorage:logger:)' declared here\n 32 |     wrapped: CryptoServiceProtocol,\n 33 |     secureStorage: SecureStorageProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:267:19: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n265 |             )\n266 |           ),\n267 |           logger: actualLogger\n    |                   `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n268 |         )\n269 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:262:22: error: extra argument 'options' in call\n260 |             secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n261 |             logger: actualLogger,\n262 |             options: FactoryCryptoOptions(\n    |                      `- error: extra argument 'options' in call\n263 |               defaultIterations: 5000, // Medium strength for staging\n264 |               enforceStrongKeys: true\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:295:48: error: type of expression is ambiguous without a type annotation\n293 |     logger: LoggingProtocol? = nil\n294 |   ) async -\u003e CryptoServiceProtocol {\n295 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n296 |     \n297 |     // Create the provider\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:322:48: error: type of expression is ambiguous without a type annotation\n320 |     logger: LoggingProtocol? = nil\n321 |   ) async -\u003e CryptoServiceProtocol {\n322 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n323 | \n324 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:325:48: error: 'await' cannot appear to the right of a non-assignment operator\n323 | \n324 |     // Use the provided secure storage or create a default one\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:327:18: error: cannot find 'DefaultCryptoServiceWithProviderImpl' in scope\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n    |                  `- error: cannot find 'DefaultCryptoServiceWithProviderImpl' in scope\n328 |       provider: provider,\n329 |       secureStorage: actualSecureStorage,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:325:54: error: 'async' call in an autoclosure that does not support concurrency\n323 | \n324 |     // Use the provided secure storage or create a default one\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:345:31: error: type of expression is ambiguous without a type annotation\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                               `- error: type of expression is ambiguous without a type annotation\n346 |     \n347 |     return await DefaultSecurityProviderRegistry(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:368:31: error: type of expression is ambiguous without a type annotation\n366 |     logger: LoggingProtocol? = nil\n367 |   ) async -\u003e SecureStorageProtocol {\n368 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                               `- error: type of expression is ambiguous without a type annotation\n369 |     \n370 |     // Create default provider if none provided\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:376:61: error: cannot infer contextual base in reference to member 'default'\n374 |     } else {\n375 |       let registry = await createProviderRegistry(logger: actualLogger)\n376 |       actualProvider = await registry.createProvider(type: .default)\n    |                                                             `- error: cannot infer contextual base in reference to member 'default'\n377 |     }\n378 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:379:18: error: cannot find 'DefaultSecureStorageImpl' in scope\n377 |     }\n378 |     \n379 |     return await DefaultSecureStorageImpl(\n    |                  `- error: cannot find 'DefaultSecureStorageImpl' in scope\n380 |       provider: actualProvider,\n381 |       storageURL: storageURL,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:412:48: error: type of expression is ambiguous without a type annotation\n410 |     secureStorage: SecureStorageProtocol? = nil\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n414 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:413:48: error: 'await' cannot appear to the right of a non-assignment operator\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n414 |     \n415 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:413:54: error: 'async' call in an autoclosure that does not support concurrency\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n414 |     \n415 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:415:12: warning: no 'async' operations occur within 'await' expression\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n414 |     \n415 |     return await MockCryptoServiceImpl(\n    |            `- warning: no 'async' operations occur within 'await' expression\n416 |       configuration: configuration,\n417 |       logger: actualLogger,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:14:20: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n 12 |  as a fallback implementation for various security operations.\n 13 |  */\n 14 | public final class BasicSecurityProvider: SecurityProviderProtocol, AsyncServiceInitializable {\n    |                    |- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n    |                    `- note: add stubs for conformance\n 15 |   // MARK: - Properties (Placeholder - Dependencies likely needed)\n 16 | \n    :\n178 | \n179 |   /// Creates a standard security configuration DTO for this basic provider.\n180 |   public func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions? = nil) -\u003e CoreSecurityTypes.SecurityConfigDTO {\n    |               `- note: candidate has non-matching type '(SecurityConfigOptions?) -\u003e SecurityConfigDTO'\n181 |     print(\"BasicSecurityProvider createSecureConfig called (stub)\")\n182 |     return CoreSecurityTypes.SecurityConfigDTO(\n\nSecurityCoreInterfaces.SecurityProviderProtocol.createSecureConfig:2:6: note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n1 | protocol SecurityProviderProtocol {\n2 | func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions) async -\u003e CoreSecurityTypes.SecurityConfigDTO}\n  |      `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:479:15: error: invalid redeclaration of 'storeData(data:identifier:)'\n477 |   // They expect `Data` instead of `[UInt8]` for storage operations.\n478 | \n479 |   public func storeData(\n    |               `- error: invalid redeclaration of 'storeData(data:identifier:)'\n480 |     data: Data, // Protocol expects Data\n481 |     identifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:506:15: error: invalid redeclaration of 'retrieveData(identifier:)'\n504 |   }\n505 | \n506 |   public func retrieveData(\n    |               `- error: invalid redeclaration of 'retrieveData(identifier:)'\n507 |     identifier: String\n508 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e { // Protocol expects Data\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:530:15: error: invalid redeclaration of 'deleteData(identifier:)'\n528 |   }\n529 | \n530 |   public func deleteData(\n    |               `- error: invalid redeclaration of 'deleteData(identifier:)'\n531 |     identifier: String\n532 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:550:15: error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n548 | \n549 |   // Ensure generateHash signature matches protocol\n550 |   public func generateHash(\n    |               `- error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n551 |     dataIdentifier: String,\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:559:15: error: invalid redeclaration of 'importData(_:customIdentifier:)'\n557 |   // Keep the existing importData signature expecting [UInt8]\n558 |   // but also add the one expecting Data to satisfy the protocol.\n559 |   public func importData(\n    |               `- error: invalid redeclaration of 'importData(_:customIdentifier:)'\n560 |     _ data: Data, // Protocol expects Data\n561 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:340:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n338 |     customIdentifier: String\n339 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n340 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n341 |     await logger?.debug(\"Importing raw data with custom identifier: \\(customIdentifier)\", context: context)\n342 |     // Store the raw data using the secure storage protocol\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:358:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n356 |     customIdentifier: String?\n357 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n358 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n359 |     await logger?.debug(\"Importing [UInt8] data...\", context: context)\n360 |     // Convert [UInt8] to Data for storage\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:384:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n382 |     identifier: String\n383 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n384 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Export\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n385 |     await logger?.debug(\"Exporting data with identifier: \\(identifier)\", context: context)\n386 |     let result = await secureStorage.retrieveData(withIdentifier: identifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:411:21: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n409 |     } else {\n410 |       // Fallback or handle error appropriately\n411 |       let context = LogContextDTO(subsystem: \"CryptoService\", category: \"Randomness\")\n    |                     `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n412 |       await logger?.error(\"Failed to generate secure random bytes, status: \\(status)\", context: context)\n413 |       // Returning non-secure bytes as a fallback - consider throwing an error instead\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:425:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n423 |     options _: CoreSecurityTypes.HashingOptions? = nil\n424 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n425 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Hashing\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n426 |     await logger?.debug(\n427 |       \"Verifying hash for data \\(dataIdentifier) against hash \\(hashIdentifier)\", context: context\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:433:34: error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n431 |     guard case .success(let originalData) = dataResult else {\n432 |       await logger?.error(\"Failed to retrieve original data for hash verification\", context: context)\n433 |       return .failure(dataResult.error ?? .dataNotFound(identifier: dataIdentifier))\n    |                                  `- error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n434 |     }\n435 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:433:44: error: enum case 'dataNotFound' has no associated values\n431 |     guard case .success(let originalData) = dataResult else {\n432 |       await logger?.error(\"Failed to retrieve original data for hash verification\", context: context)\n433 |       return .failure(dataResult.error ?? .dataNotFound(identifier: dataIdentifier))\n    |                                            `- error: enum case 'dataNotFound' has no associated values\n434 |     }\n435 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:440:34: error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n438 |     guard case .success(let storedHash) = hashResult else {\n439 |       await logger?.error(\"Failed to retrieve stored hash for verification\", context: context)\n440 |       return .failure(hashResult.error ?? .dataNotFound(identifier: hashIdentifier))\n    |                                  `- error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n441 |     }\n442 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:440:44: error: enum case 'dataNotFound' has no associated values\n438 |     guard case .success(let storedHash) = hashResult else {\n439 |       await logger?.error(\"Failed to retrieve stored hash for verification\", context: context)\n440 |       return .failure(hashResult.error ?? .dataNotFound(identifier: hashIdentifier))\n    |                                            `- error: enum case 'dataNotFound' has no associated values\n441 |     }\n442 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:444:25: error: cannot find 'sha256' in scope\n442 | \n443 |     // 3. Generate hash of original data (using a basic SHA256 for this stub)\n444 |     let generatedHash = sha256(data: originalData)\n    |                         `- error: cannot find 'sha256' in scope\n445 | \n446 |     // 4. Compare hashes\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:457:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n455 |     options _: CoreSecurityTypes.KeyGenerationOptions? = nil\n456 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n457 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"KeyManagement\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n458 |     await logger?.debug(\"Generating key of length \\(length)...\", context: context)\n459 |     let keyData = generateRandomBytes(count: length)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:554:66: error: cannot find 'options' in scope\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n553 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n554 |       return await hash(dataIdentifier: dataIdentifier, options: options)\n    |                                                                  `- error: cannot find 'options' in scope\n555 |   }\n556 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:563:36: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n561 |     customIdentifier: String\n562 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n563 |       let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n564 |       await logger?.debug(\"Importing Data with custom identifier: \\(customIdentifier)\", context: context)\n565 |       // Store the raw data using the secure storage protocol, converting Data to [UInt8]\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:459:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n457 |       identifier: customIdentifier\n458 |     )\n459 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n460 |     return await wrapped.importData(data, customIdentifier: customIdentifier)\n461 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:480:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n478 |       identifier: customIdentifier\n479 |     )\n480 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n481 |     return await wrapped.importData(data, customIdentifier: customIdentifier)\n482 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:501:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n499 |       identifier: dataIdentifier\n500 |     )\n501 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n502 |     return await wrapped.generateHash(dataIdentifier: dataIdentifier, options: options)\n503 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:522:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n520 |       identifier: identifier\n521 |     )\n522 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n523 |     return await wrapped.storeData(data: data, identifier: identifier)\n524 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:540:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n538 |       identifier: identifier\n539 |     )\n540 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n541 |     return await wrapped.retrieveData(identifier: identifier)\n542 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:558:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n556 |       identifier: identifier\n557 |     )\n558 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n559 |     return await wrapped.deleteData(identifier: identifier)\n560 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:160:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n158 |     encryptedDataIdentifier: String,\n159 |     keyIdentifier _: String,\n160 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n    |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n161 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n162 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:326:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n324 |   public func generateKey(\n325 |     length: Int,\n326 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n    |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n327 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n328 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:51:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 49 |                 return .failure(error)\n 50 |             }\n 51 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 52 |             return .failure(error)\n 53 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:75:26: error: missing argument for parameter 'source' in call\n 73 |         await logger.debug(\n 74 |             \"Encrypting data using algorithm: \\(algorithm.rawValue)\",\n 75 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n 76 |         )\n 77 |         \n\nLoggingServices.LoggingProtocol.debug:3:15: note: 'debug(_:metadata:source:)' declared here\n1 | protocol LoggingProtocol {\n2 | @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n3 |   public func debug(_ message: String, metadata: LoggingTypes.PrivacyMetadata?, source: String) async}\n  |               `- note: 'debug(_:metadata:source:)' declared here\n4 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:83:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 81 |             // Actual implementation would use CommonCrypto or CryptoKit\n 82 |             return .success(data) // Placeholder response\n 83 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 84 |             return .failure(error)\n 85 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:107:26: error: missing argument for parameter 'source' in call\n105 |         await logger.debug(\n106 |             \"Decrypting data using algorithm: \\(algorithm.rawValue)\",\n107 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n108 |         )\n109 |         \n\nLoggingServices.LoggingProtocol.debug:3:15: note: 'debug(_:metadata:source:)' declared here\n1 | protocol LoggingProtocol {\n2 | @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n3 |   public func debug(_ message: String, metadata: LoggingTypes.PrivacyMetadata?, source: String) async}\n  |               `- note: 'debug(_:metadata:source:)' declared here\n4 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:115:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n113 |             // Actual implementation would use CommonCrypto or CryptoKit\n114 |             return .success(data) // Placeholder response\n115 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n116 |             return .failure(error)\n117 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:134:26: error: missing argument for parameter 'source' in call\n132 |         await logger.debug(\n133 |             \"Hashing data using algorithm: \\(algorithm.rawValue)\",\n134 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n135 |         )\n136 |         \n\nLoggingServices.LoggingProtocol.debug:3:15: note: 'debug(_:metadata:source:)' declared here\n1 | protocol LoggingProtocol {\n2 | @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n3 |   public func debug(_ message: String, metadata: LoggingTypes.PrivacyMetadata?, source: String) async}\n  |               `- note: 'debug(_:metadata:source:)' declared here\n4 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:142:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n140 |             // Actual implementation would use CommonCrypto or CryptoKit\n141 |             return .success(data) // Placeholder response\n142 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n143 |             return .failure(error)\n144 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:161:26: error: missing argument for parameter 'source' in call\n159 |         await logger.debug(\n160 |             \"Generating \\(keyType.rawValue) key of size: \\(keySize) bits\",\n161 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n162 |         )\n163 |         \n\nLoggingServices.LoggingProtocol.debug:3:15: note: 'debug(_:metadata:source:)' declared here\n1 | protocol LoggingProtocol {\n2 | @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n3 |   public func debug(_ message: String, metadata: LoggingTypes.PrivacyMetadata?, source: String) async}\n  |               `- note: 'debug(_:metadata:source:)' declared here\n4 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:221:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 219 |     encryptedDataIdentifier: String,\n 220 |     keyIdentifier: String,\n 221 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n     |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 222 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 223 |     let context=CryptoLogContext(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:632:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 630 |   public func generateKey(\n 631 |     length: Int,\n 632 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n     |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 633 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 634 |     do {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:78: error: missing argument for parameter 'options' in call\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                              `- error: missing argument for parameter 'options' in call\n 146 | \n 147 |       // Store the encrypted data\n\nCryptoInterfaces.CryptoProviderProtocol.encrypt:2:6: note: 'encrypt(data:key:options:)' declared here\n1 | protocol CryptoProviderProtocol {\n2 | func encrypt(data: Data, key: Data, options: CoreSecurityTypes.EncryptionOptions?) async -\u003e Result\u003cData, any Error\u003e}\n  |      `- note: 'encrypt(data:key:options:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:64: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 146 | \n 147 |       // Store the encrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:75: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                           `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 146 | \n 147 |       // Store the encrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:87: error: missing argument for parameter 'options' in call\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                                       `- error: missing argument for parameter 'options' in call\n 287 | \n 288 |       // Store the decrypted data\n\nCryptoInterfaces.CryptoProviderProtocol.decrypt:2:6: note: 'decrypt(data:key:options:)' declared here\n1 | protocol CryptoProviderProtocol {\n2 | func decrypt(data: Data, key: Data, options: CoreSecurityTypes.EncryptionOptions?) async -\u003e Result\u003cData, any Error\u003e}\n  |      `- note: 'decrypt(data:key:options:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:64: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 287 | \n 288 |       // Store the decrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:84: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                                    `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 287 | \n 288 |       // Store the decrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:641:53: error: cannot convert value of type 'Result\u003cData, any Error\u003e' to expected argument type '[UInt8]'\n 639 | \n 640 |       // Store the key in secure storage\n 641 |       let storeResult=await secureStorage.storeData(keyData, withIdentifier: keyIdentifier)\n     |                                                     `- error: cannot convert value of type 'Result\u003cData, any Error\u003e' to expected argument type '[UInt8]'\n 642 | \n 643 |       guard case .success=storeResult else {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:638:19: warning: no calls to throwing functions occur within 'try' expression\n 636 | \n 637 |       // Generate random key data\n 638 |       let keyData=try await cryptoProvider.generateRandomData(length: length)\n     |                   `- warning: no calls to throwing functions occur within 'try' expression\n 639 | \n 640 |       // Store the key in secure storage\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoStorage.swift:417:31: error: cannot find 'getSecureStorage' in scope\n415 |     // Currently we just attempt to retrieve the data and check if it exists\n416 |     // This could be optimized in a real implementation to avoid loading the data\n417 |     let secureStore=try await getSecureStorage()\n    |                               `- error: cannot find 'getSecureStorage' in scope\n418 |     return secureStore.hasKey(identifier)\n419 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n266 |    - Returns: Result containing array of identifiers or error details\n267 |    */\n268 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n269 |     await logger.warning(\n270 |       \"List data identifiers operation not supported\",\n\nSecurityCoreInterfaces.SecureStorageProtocol.storeData:2:6: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func storeData(_ data: [UInt8], withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.retrieveData:2:6: note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func retrieveData(withIdentifier identifier: String) async -\u003e Result\u003c[UInt8], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.deleteData:2:6: note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func deleteData(withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.listDataIdentifiers:2:6: note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:158:61: error: type '_ErrorCodeProtocol' has no member 'notFound'\n156 |       )\n157 | \n158 |       if let storageError=error as? StorageCoreError, case .notFound=storageError {\n    |                                                             `- error: type '_ErrorCodeProtocol' has no member 'notFound'\n159 |         return .failure(.dataNotFound)\n160 |       }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:67:15: error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 65 | extension CoreSecurityTypes.DecryptionOptions {\n 66 |   /// Convert to CryptoOperationOptionsDTO for use with internal APIs\n 67 |   public func toCryptoOperationOptionsDTO() -\u003e CryptoOperationOptionsDTO {\n    |               `- error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 68 |     // Map the algorithm and mode\n 69 |     let cryptoMode: CryptoMode=switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:87:15: error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 85 | \n 86 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n 87 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n    |               `- error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 88 |   -\u003e SecurityConfigDTO {\n 89 |     var configOptions=SecurityConfigOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:109:15: error: invalid redeclaration of 'toInterfaceOptions()'\n107 | \n108 |   /// Convert to interface DecryptionOptions (used when adapting options)\n109 |   public func toInterfaceOptions() -\u003e CoreSecurityTypes.DecryptionOptions {\n    |               `- error: invalid redeclaration of 'toInterfaceOptions()'\n110 |     // This is a no-op since we're already using the correct type\n111 |     self\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:118:34: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n116 | \n117 | /// Extension to adapt between various key generation options types\n118 | extension SecurityCoreInterfaces.KeyGenerationOptions {\n    |                                  `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n119 |   /// Convert to KeyGenerationOptionsDTO for internal use\n120 |   public func toKeyGenerationOptionsDTO(keySize: Int) -\u003e KeyGenerationOptionsDTO {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:34: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n199 | \n200 | /// Extension to adapt between SecurityCoreInterfaces.HashingOptions and various format options\n201 | extension SecurityCoreInterfaces.HashingOptions {\n    |                                  `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n202 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n203 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:333:68: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n331 | \n332 |   /// Extract key generation options from the configuration\n333 |   public var extractedKeyGenerationOptions: SecurityCoreInterfaces.KeyGenerationOptions? {\n    |                                                                    `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n334 |     nil // Simplified until we have the proper members\n335 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:338:62: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n336 | \n337 |   /// Extract hashing options from the configuration\n338 |   public var extractedHashingOptions: SecurityCoreInterfaces.HashingOptions? {\n    |                                                              `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n339 |     nil // Simplified until we have the proper members\n340 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:21:23: error: cannot find type 'PaddingMode' in scope\n19 | \n20 |   /// Padding mode to use for block ciphers\n21 |   public let padding: PaddingMode?\n   |                       `- error: cannot find type 'PaddingMode' in scope\n22 | \n23 |   /**\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:34:14: error: cannot find type 'PaddingMode' in scope\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n34 |     padding: PaddingMode? = .pkcs7\n   |              `- error: cannot find type 'PaddingMode' in scope\n35 |   ) {\n36 |     self.algorithm=algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/UnifiedTypes/UnifiedTypes.swift:129:54: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n127 | \n128 |     /// Convert from SecurityCoreInterfaces.DecryptionOptions if available\n129 |     public init(from options: SecurityCoreInterfaces.DecryptionOptions?) {\n    |                                                      `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n130 |       // Default values if options is nil\n131 |       if let options {\nTarget //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed to build\nINFO: Elapsed time: 1.056s, Critical Path: 0.98s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger",
    "success": true,
    "start_time": "2025-04-08T00:44:18.323323+01:00",
    "end_time": "2025-04-08T00:44:19.094705+01:00",
    "duration": "771.379792ms",
    "output": "INFO: Invocation ID: c936b4bc-934e-47c3-817b-afe3e0fb6a2f\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/CryptoLogger.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/CryptoLogger.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/CryptoLogger.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoServices/Logging/libCryptoLogger.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices",
    "success": true,
    "start_time": "2025-04-08T00:44:19.094715+01:00",
    "end_time": "2025-04-08T00:44:19.854445+01:00",
    "duration": "759.728291ms",
    "output": "INFO: Invocation ID: b97e62c5-ae31-43fc-8393-0968f17eb855\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/CryptoXPCServices/libCryptoXPCServices.a\nINFO: Elapsed time: 0.089s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices",
    "success": true,
    "start_time": "2025-04-08T00:44:19.85445+01:00",
    "end_time": "2025-04-08T00:44:20.662554+01:00",
    "duration": "808.101958ms",
    "output": "INFO: Invocation ID: ff753f1e-5813-494c-bb35-7efeb2f776fb\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices (2 packages loaded, 5 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/DateTimeServices:DateTimeServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/DateTimeServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/DateTimeServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/DateTimeServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/DateTimeServices/libDateTimeServices.a\nINFO: Elapsed time: 0.085s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl",
    "success": true,
    "start_time": "2025-04-08T00:44:20.662569+01:00",
    "end_time": "2025-04-08T00:44:21.446508+01:00",
    "duration": "783.93775ms",
    "output": "INFO: Invocation ID: 582c41ba-1dc6-420e-b2ae-4be3a3455748\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ErrorDomainsImpl:ErrorDomainsImpl up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/ErrorDomainsImpl.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/ErrorDomainsImpl.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/ErrorDomainsImpl.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorDomainsImpl/libErrorDomainsImpl.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl",
    "success": true,
    "start_time": "2025-04-08T00:44:21.446513+01:00",
    "end_time": "2025-04-08T00:44:22.236165+01:00",
    "duration": "789.649625ms",
    "output": "INFO: Invocation ID: 956cc049-76f0-427f-9f64-10ba48dcba35\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ErrorHandlingImpl:ErrorHandlingImpl up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/ErrorHandlingImpl.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/ErrorHandlingImpl.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/ErrorHandlingImpl.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorHandlingImpl/libErrorHandlingImpl.a\nINFO: Elapsed time: 0.088s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices",
    "success": true,
    "start_time": "2025-04-08T00:44:22.236177+01:00",
    "end_time": "2025-04-08T00:44:22.995374+01:00",
    "duration": "759.195667ms",
    "output": "INFO: Invocation ID: 8748b00e-6d0a-4e61-a1c9-b36d0d9f2e76\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices (2 packages loaded, 8 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ErrorLoggingServices:ErrorLoggingServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/ErrorLoggingServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/ErrorLoggingServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/ErrorLoggingServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ErrorLoggingServices/libErrorLoggingServices.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices",
    "success": true,
    "start_time": "2025-04-08T00:44:22.995384+01:00",
    "end_time": "2025-04-08T00:44:23.765668+01:00",
    "duration": "770.282375ms",
    "output": "INFO: Invocation ID: d6e5c960-a34c-4fef-85c5-53bd471ec40b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices (3 packages loaded, 43 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/FileSystemServices:FileSystemServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/FileSystemServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/FileSystemServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/FileSystemServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/FileSystemServices/libFileSystemServices.a\nINFO: Elapsed time: 0.087s, Critical Path: 0.00s\nINFO: 1 process: 7 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices",
    "success": true,
    "start_time": "2025-04-08T00:44:23.765674+01:00",
    "end_time": "2025-04-08T00:44:24.659477+01:00",
    "duration": "893.801458ms",
    "output": "INFO: Invocation ID: ee58d843-884d-4922-8941-7bc13a7e4e59\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices:KeychainServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/KeychainServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/KeychainServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/KeychainServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/libKeychainServices.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor",
    "success": true,
    "start_time": "2025-04-08T00:44:24.659488+01:00",
    "end_time": "2025-04-08T00:44:25.393597+01:00",
    "duration": "734.107333ms",
    "output": "INFO: Invocation ID: a63fcdba-e87c-4d6b-964f-059ef42ec4e7\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor (1 packages loaded, 2 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/Actor:KeychainSecurityActor up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/KeychainSecurityActor.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/KeychainSecurityActor.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/KeychainSecurityActor.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Actor/libKeychainSecurityActor.a\nINFO: Elapsed time: 0.082s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor",
    "success": true,
    "start_time": "2025-04-08T00:44:25.393603+01:00",
    "end_time": "2025-04-08T00:44:26.190259+01:00",
    "duration": "796.654375ms",
    "output": "INFO: Invocation ID: f629582d-d6b6-473d-aa3e-dc8804f6396a\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/ActorTypes:KeychainSecurityActor up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/KeychainSecurityActor.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/KeychainSecurityActor.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/KeychainSecurityActor.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/ActorTypes/libKeychainSecurityActor.a\nINFO: Elapsed time: 0.084s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks",
    "success": true,
    "start_time": "2025-04-08T00:44:26.190268+01:00",
    "end_time": "2025-04-08T00:44:26.995987+01:00",
    "duration": "805.71725ms",
    "output": "INFO: Invocation ID: df4cdca8-4d9c-4766-ba57-ad7f17e48d32\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/Fallbacks:Fallbacks up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/Fallbacks.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/Fallbacks.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/Fallbacks.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Fallbacks/libFallbacks.a\nINFO: Elapsed time: 0.100s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger",
    "success": true,
    "start_time": "2025-04-08T00:44:26.995993+01:00",
    "end_time": "2025-04-08T00:44:27.851958+01:00",
    "duration": "855.963917ms",
    "output": "INFO: Invocation ID: 52367c16-1375-4360-b4ad-1c27d4f6d340\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/KeychainServices/Logging:KeychainLogger up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/KeychainLogger.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/KeychainLogger.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/KeychainLogger.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/KeychainServices/Logging/libKeychainLogger.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters",
    "success": true,
    "start_time": "2025-04-08T00:44:27.851964+01:00",
    "end_time": "2025-04-08T00:44:28.732489+01:00",
    "duration": "880.523667ms",
    "output": "INFO: Invocation ID: c6705211-0519-4d5a-8a0b-2f46b9c3d647\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingAdapters/libLoggingAdapters.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices",
    "success": true,
    "start_time": "2025-04-08T00:44:28.732503+01:00",
    "end_time": "2025-04-08T00:44:29.479704+01:00",
    "duration": "747.199625ms",
    "output": "INFO: Invocation ID: 757fc6c1-fd47-4fc0-ad95-e6aa790dfabd\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/LoggingServices:LoggingServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/LoggingServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/LoggingServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/LoggingServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingServices/libLoggingServices.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices",
    "success": true,
    "start_time": "2025-04-08T00:44:29.479708+01:00",
    "end_time": "2025-04-08T00:44:30.242032+01:00",
    "duration": "762.323458ms",
    "output": "INFO: Invocation ID: c625475b-4392-4fdd-a47c-ec4d292f0ca5\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/LoggingWrapperServices:LoggingWrapperServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/LoggingWrapperServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/LoggingWrapperServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/LoggingWrapperServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/LoggingWrapperServices/libLoggingWrapperServices.a\nINFO: Elapsed time: 0.071s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices",
    "success": true,
    "start_time": "2025-04-08T00:44:30.242036+01:00",
    "end_time": "2025-04-08T00:44:31.01999+01:00",
    "duration": "777.951875ms",
    "output": "INFO: Invocation ID: 00975812-7dc4-45c3-8063-c7f5b6f90e1e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices (1 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/NetworkServices:NetworkServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/NetworkServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/NetworkServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/NetworkServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/NetworkServices/libNetworkServices.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices",
    "success": true,
    "start_time": "2025-04-08T00:44:31.019995+01:00",
    "end_time": "2025-04-08T00:44:31.789911+01:00",
    "duration": "769.914542ms",
    "output": "INFO: Invocation ID: b215627d-a8f1-4aba-a55b-7eb1fe0c062d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices (1 packages loaded, 7 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/RepositoryServices:RepositoryServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/RepositoryServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/RepositoryServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/RepositoryServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/RepositoryServices/libRepositoryServices.a\nINFO: Elapsed time: 0.085s, Critical Path: 0.00s\nINFO: 1 process: 3 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/ResticServices:ResticServices",
    "success": true,
    "start_time": "2025-04-08T00:44:31.789917+01:00",
    "end_time": "2025-04-08T00:44:32.576977+01:00",
    "duration": "787.057959ms",
    "output": "INFO: Invocation ID: 304c7a43-4e6e-4f81-9507-48dc3f630f2c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/ResticServices:ResticServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/ResticServices:ResticServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/ResticServices:ResticServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/ResticServices:ResticServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/ResticServices/libResticServices.a\nINFO: Elapsed time: 0.090s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore",
    "success": true,
    "start_time": "2025-04-08T00:44:32.576987+01:00",
    "end_time": "2025-04-08T00:44:33.358917+01:00",
    "duration": "781.9285ms",
    "output": "INFO: Invocation ID: ee2a6e66-0e63-4766-946a-5a7b0a20265d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityCore:SecurityCore up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/SecurityCore.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/SecurityCore.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/SecurityCore.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityCore/libSecurityCore.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices",
    "success": false,
    "start_time": "2025-04-08T00:44:33.358923+01:00",
    "end_time": "2025-04-08T00:44:35.106058+01:00",
    "duration": "1.74713125s",
    "output": "INFO: Invocation ID: a6a8d2dd-c45a-4f7f-86fe-40ec3ae04619\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices (7 packages loaded, 55 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:227:18: error: cannot find type 'DeploymentEnvironment' in scope\n225 |     secureStorage: SecureStorageProtocol?=nil,\n226 |     logger: LoggingProtocol?=nil,\n227 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:344:14: error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n342 |   public static func createProviderRegistry(\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n    |              `- error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n346 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:407:22: error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n405 |    - Returns: A mock CryptoServiceProtocol implementation\n406 |    */\n407 |   public static func createMock(\n    |                      `- error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n408 |     configuration: MockCryptoServiceImpl.Configuration = .init(),\n409 |     logger: LoggingProtocol? = nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:14:20: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n 12 |  as a fallback implementation for various security operations.\n 13 |  */\n 14 | public final class BasicSecurityProvider: SecurityProviderProtocol, AsyncServiceInitializable {\n    |                    |- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n    |                    `- note: add stubs for conformance\n 15 |   // MARK: - Properties (Placeholder - Dependencies likely needed)\n 16 | \n    :\n178 | \n179 |   /// Creates a standard security configuration DTO for this basic provider.\n180 |   public func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions? = nil) -\u003e CoreSecurityTypes.SecurityConfigDTO {\n    |               `- note: candidate has non-matching type '(SecurityConfigOptions?) -\u003e SecurityConfigDTO'\n181 |     print(\"BasicSecurityProvider createSecureConfig called (stub)\")\n182 |     return CoreSecurityTypes.SecurityConfigDTO(\n\nSecurityCoreInterfaces.SecurityProviderProtocol.createSecureConfig:2:6: note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n1 | protocol SecurityProviderProtocol {\n2 | func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions) async -\u003e CoreSecurityTypes.SecurityConfigDTO}\n  |      `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:479:15: error: invalid redeclaration of 'storeData(data:identifier:)'\n477 |   // They expect `Data` instead of `[UInt8]` for storage operations.\n478 | \n479 |   public func storeData(\n    |               `- error: invalid redeclaration of 'storeData(data:identifier:)'\n480 |     data: Data, // Protocol expects Data\n481 |     identifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:506:15: error: invalid redeclaration of 'retrieveData(identifier:)'\n504 |   }\n505 | \n506 |   public func retrieveData(\n    |               `- error: invalid redeclaration of 'retrieveData(identifier:)'\n507 |     identifier: String\n508 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e { // Protocol expects Data\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:530:15: error: invalid redeclaration of 'deleteData(identifier:)'\n528 |   }\n529 | \n530 |   public func deleteData(\n    |               `- error: invalid redeclaration of 'deleteData(identifier:)'\n531 |     identifier: String\n532 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:550:15: error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n548 | \n549 |   // Ensure generateHash signature matches protocol\n550 |   public func generateHash(\n    |               `- error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n551 |     dataIdentifier: String,\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:559:15: error: invalid redeclaration of 'importData(_:customIdentifier:)'\n557 |   // Keep the existing importData signature expecting [UInt8]\n558 |   // but also add the one expecting Data to satisfy the protocol.\n559 |   public func importData(\n    |               `- error: invalid redeclaration of 'importData(_:customIdentifier:)'\n560 |     _ data: Data, // Protocol expects Data\n561 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:160:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n158 |     encryptedDataIdentifier: String,\n159 |     keyIdentifier _: String,\n160 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n    |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n161 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n162 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:326:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n324 |   public func generateKey(\n325 |     length: Int,\n326 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n    |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n327 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n328 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:221:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 219 |     encryptedDataIdentifier: String,\n 220 |     keyIdentifier: String,\n 221 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n     |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 222 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 223 |     let context=CryptoLogContext(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:632:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 630 |   public func generateKey(\n 631 |     length: Int,\n 632 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n     |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 633 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 634 |     do {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n266 |    - Returns: Result containing array of identifiers or error details\n267 |    */\n268 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n269 |     await logger.warning(\n270 |       \"List data identifiers operation not supported\",\n\nSecurityCoreInterfaces.SecureStorageProtocol.storeData:2:6: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func storeData(_ data: [UInt8], withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.retrieveData:2:6: note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func retrieveData(withIdentifier identifier: String) async -\u003e Result\u003c[UInt8], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.deleteData:2:6: note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func deleteData(withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.listDataIdentifiers:2:6: note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:67:15: error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 65 | extension CoreSecurityTypes.DecryptionOptions {\n 66 |   /// Convert to CryptoOperationOptionsDTO for use with internal APIs\n 67 |   public func toCryptoOperationOptionsDTO() -\u003e CryptoOperationOptionsDTO {\n    |               `- error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 68 |     // Map the algorithm and mode\n 69 |     let cryptoMode: CryptoMode=switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:87:15: error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 85 | \n 86 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n 87 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n    |               `- error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 88 |   -\u003e SecurityConfigDTO {\n 89 |     var configOptions=SecurityConfigOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:109:15: error: invalid redeclaration of 'toInterfaceOptions()'\n107 | \n108 |   /// Convert to interface DecryptionOptions (used when adapting options)\n109 |   public func toInterfaceOptions() -\u003e CoreSecurityTypes.DecryptionOptions {\n    |               `- error: invalid redeclaration of 'toInterfaceOptions()'\n110 |     // This is a no-op since we're already using the correct type\n111 |     self\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:118:34: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n116 | \n117 | /// Extension to adapt between various key generation options types\n118 | extension SecurityCoreInterfaces.KeyGenerationOptions {\n    |                                  `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n119 |   /// Convert to KeyGenerationOptionsDTO for internal use\n120 |   public func toKeyGenerationOptionsDTO(keySize: Int) -\u003e KeyGenerationOptionsDTO {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:34: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n199 | \n200 | /// Extension to adapt between SecurityCoreInterfaces.HashingOptions and various format options\n201 | extension SecurityCoreInterfaces.HashingOptions {\n    |                                  `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n202 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n203 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:333:68: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n331 | \n332 |   /// Extract key generation options from the configuration\n333 |   public var extractedKeyGenerationOptions: SecurityCoreInterfaces.KeyGenerationOptions? {\n    |                                                                    `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n334 |     nil // Simplified until we have the proper members\n335 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:338:62: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n336 | \n337 |   /// Extract hashing options from the configuration\n338 |   public var extractedHashingOptions: SecurityCoreInterfaces.HashingOptions? {\n    |                                                              `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n339 |     nil // Simplified until we have the proper members\n340 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:21:23: error: cannot find type 'PaddingMode' in scope\n19 | \n20 |   /// Padding mode to use for block ciphers\n21 |   public let padding: PaddingMode?\n   |                       `- error: cannot find type 'PaddingMode' in scope\n22 | \n23 |   /**\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:34:14: error: cannot find type 'PaddingMode' in scope\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n34 |     padding: PaddingMode? = .pkcs7\n   |              `- error: cannot find type 'PaddingMode' in scope\n35 |   ) {\n36 |     self.algorithm=algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/UnifiedTypes/UnifiedTypes.swift:129:54: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n127 | \n128 |     /// Convert from SecurityCoreInterfaces.DecryptionOptions if available\n129 |     public init(from options: SecurityCoreInterfaces.DecryptionOptions?) {\n    |                                                      `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n130 |       // Default values if options is nil\n131 |       if let options {\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:117:79: error: value of type 'HashingOptions' has no member 'salt'\n115 |     guard let options else { return nil }\n116 | \n117 |     return LocalHashingOptions(algorithm: options.algorithm, useSalt: options.salt != nil)\n    |                                                                               `- error: value of type 'HashingOptions' has no member 'salt'\n118 |   }\n119 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:130:97: error: extra argument 'salt' in call\n128 |     guard let options else { return nil }\n129 | \n130 |     return CoreSecurityTypes.HashingOptions(algorithm: options.algorithm, salt: options.useSalt ? [0x01, 0x02, 0x03, 0x04] : nil)\n    |                                                                                                 `- error: extra argument 'salt' in call\n131 |   }\n132 | }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:24: error: value of type 'KeyGenerationOptions' has no member 'options'\n151 |       useSecureEnclave: options.useSecureEnclave,\n152 |       isExtractable: options.isExtractable,\n153 |       options: options.options\n    |                        `- error: value of type 'KeyGenerationOptions' has no member 'options'\n154 |     )\n155 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:172:24: error: extra argument 'options' in call\n170 |       useSecureEnclave: options.useSecureEnclave,\n171 |       isExtractable: options.isExtractable,\n172 |       options: options.options\n    |                        `- error: extra argument 'options' in call\n173 |     )\n174 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:31: error: missing argument for parameter 'keySizeInBits' in call\n167 | \n168 |     return CoreSecurityTypes.KeyGenerationOptions(\n169 |       keyType: options.keyType,\n    |                               `- error: missing argument for parameter 'keySizeInBits' in call\n170 |       useSecureEnclave: options.useSecureEnclave,\n171 |       isExtractable: options.isExtractable,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:147:10: note: 'init(keyType:keySizeInBits:isExtractable:useSecureEnclave:)' declared here\n145 |   public let useSecureEnclave: Bool // Hint to use hardware security module if available\n146 | \n147 |   public init(\n    |          `- note: 'init(keyType:keySizeInBits:isExtractable:useSecureEnclave:)' declared here\n148 |     keyType: KeyType,\n149 |     keySizeInBits: Int,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:227:18: error: cannot find type 'DeploymentEnvironment' in scope\n225 |     secureStorage: SecureStorageProtocol?=nil,\n226 |     logger: LoggingProtocol?=nil,\n227 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:344:14: error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n342 |   public static func createProviderRegistry(\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n    |              `- error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n346 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:407:22: error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n405 |    - Returns: A mock CryptoServiceProtocol implementation\n406 |    */\n407 |   public static func createMock(\n    |                      `- error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n408 |     configuration: MockCryptoServiceImpl.Configuration = .init(),\n409 |     logger: LoggingProtocol? = nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:100:48: error: type of expression is ambiguous without a type annotation\n 98 |     logger: LoggingProtocol? = nil\n 99 |   ) async -\u003e CryptoServiceProtocol {\n100 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n101 | \n102 |     return await DefaultCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:103:39: error: 'await' cannot appear to the right of a non-assignment operator\n101 | \n102 |     return await DefaultCryptoServiceImpl(\n103 |       secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                       `- error: 'await' cannot appear to the right of a non-assignment operator\n104 |       logger: actualLogger,\n105 |       options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:105:16: error: extra argument 'options' in call\n103 |       secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n104 |       logger: actualLogger,\n105 |       options: FactoryCryptoOptions()\n    |                `- error: extra argument 'options' in call\n106 |     )\n107 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:121:48: error: type of expression is ambiguous without a type annotation\n119 |     logger: LoggingProtocol?=nil\n120 |   ) async -\u003e CryptoServiceProtocol {\n121 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n122 | \n123 |     return await LoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:125:41: error: 'await' cannot appear to the right of a non-assignment operator\n123 |     return await LoggingCryptoServiceImpl(\n124 |       wrapped: DefaultCryptoServiceImpl(\n125 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n126 |         logger: actualLogger,\n127 |         options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:127:18: error: extra argument 'options' in call\n125 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n126 |         logger: actualLogger,\n127 |         options: FactoryCryptoOptions()\n    |                  `- error: extra argument 'options' in call\n128 |       ),\n129 |       logger: actualLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:145:48: error: type of expression is ambiguous without a type annotation\n143 |     logger: LoggingProtocol?=nil\n144 |   ) async -\u003e CryptoServiceProtocol {\n145 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n146 | \n147 |     return await EnhancedLoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:149:41: error: 'await' cannot appear to the right of a non-assignment operator\n147 |     return await EnhancedLoggingCryptoServiceImpl(\n148 |       wrapped: DefaultCryptoServiceImpl(\n149 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:152:8: error: missing argument for parameter 'secureStorage' in call\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n152 |       ),\n    |        `- error: missing argument for parameter 'secureStorage' in call\n153 |       logger: actualLogger\n154 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:31:10: note: 'init(wrapped:secureStorage:logger:)' declared here\n 29 |      - logger: The privacy-aware logger to use for logging.\n 30 |    */\n 31 |   public init(\n    |          `- note: 'init(wrapped:secureStorage:logger:)' declared here\n 32 |     wrapped: CryptoServiceProtocol,\n 33 |     secureStorage: SecureStorageProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:153:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n151 |         options: FactoryCryptoOptions()\n152 |       ),\n153 |       logger: actualLogger\n    |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n154 |     )\n155 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:151:18: error: extra argument 'options' in call\n149 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n    |                  `- error: extra argument 'options' in call\n152 |       ),\n153 |       logger: actualLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:169:48: error: type of expression is ambiguous without a type annotation\n167 |     logger: LoggingProtocol?=nil\n168 |   ) async -\u003e CryptoServiceProtocol {\n169 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n170 | \n171 |     // Create secure service with enhanced parameters\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:174:41: error: 'await' cannot appear to the right of a non-assignment operator\n172 |     let service = await EnhancedSecureCryptoServiceImpl(\n173 |       wrapped: DefaultCryptoServiceImpl(\n174 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n175 |         logger: actualLogger,\n176 |         options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:181:16: error: extra argument 'storage' in call\n179 |         )\n180 |       ),\n181 |       storage: await createSecureStorage(),\n    |                `- error: extra argument 'storage' in call\n182 |       logger: actualLogger\n183 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:181:43: error: missing argument for parameter 'rateLimiter' in call\n179 |         )\n180 |       ),\n181 |       storage: await createSecureStorage(),\n    |                                           `- error: missing argument for parameter 'rateLimiter' in call\n182 |       logger: actualLogger\n183 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:44:10: note: 'init(wrapped:logger:rateLimiter:)' declared here\n 42 |      - rateLimiter: Rate limiter for security operations\n 43 |    */\n 44 |   public init(\n    |          `- note: 'init(wrapped:logger:rateLimiter:)' declared here\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:182:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n180 |       ),\n181 |       storage: await createSecureStorage(),\n182 |       logger: actualLogger\n    |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n183 |     )\n184 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:176:18: error: extra argument 'options' in call\n174 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n175 |         logger: actualLogger,\n176 |         options: FactoryCryptoOptions(\n    |                  `- error: extra argument 'options' in call\n177 |           defaultIterations: 10000, // Higher iteration count for PBKDF2\n178 |           enforceStrongKeys: true\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:205:48: error: type of expression is ambiguous without a type annotation\n203 |     secureStorage: SecureStorageProtocol? = nil\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n207 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:206:48: error: 'await' cannot appear to the right of a non-assignment operator\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n207 |     \n208 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:206:54: error: 'async' call in an autoclosure that does not support concurrency\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n207 |     \n208 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:208:12: warning: no 'async' operations occur within 'await' expression\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n207 |     \n208 |     return await MockCryptoServiceImpl(\n    |            `- warning: no 'async' operations occur within 'await' expression\n209 |       configuration: configuration,\n210 |       logger: actualLogger,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:229:48: error: type of expression is ambiguous without a type annotation\n227 |     environment: DeploymentEnvironment = .production\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n230 | \n231 |     switch environment {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:234:43: error: 'await' cannot appear to the right of a non-assignment operator\n232 |       case .development:\n233 |         return await DefaultCryptoServiceImpl(\n234 |           secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                           `- error: 'await' cannot appear to the right of a non-assignment operator\n235 |           logger: actualLogger,\n236 |           options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:236:20: error: extra argument 'options' in call\n234 |           secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n235 |           logger: actualLogger,\n236 |           options: FactoryCryptoOptions(\n    |                    `- error: extra argument 'options' in call\n237 |             defaultIterations: 1000, // Lower for development speed\n238 |             enforceStrongKeys: false // More lenient for development\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:244:26: error: cannot find 'MockCryptoConfiguration' in scope\n242 |       case .testing:\n243 |         return await MockCryptoServiceImpl(\n244 |           configuration: MockCryptoConfiguration(\n    |                          `- error: cannot find 'MockCryptoConfiguration' in scope\n245 |             encryptionSucceeds: true,\n246 |             decryptionSucceeds: true,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:260:45: error: 'await' cannot appear to the right of a non-assignment operator\n258 |         return await EnhancedLoggingCryptoServiceImpl(\n259 |           wrapped: DefaultCryptoServiceImpl(\n260 |             secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                             `- error: 'await' cannot appear to the right of a non-assignment operator\n261 |             logger: actualLogger,\n262 |             options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:266:12: error: missing argument for parameter 'secureStorage' in call\n264 |               enforceStrongKeys: true\n265 |             )\n266 |           ),\n    |            `- error: missing argument for parameter 'secureStorage' in call\n267 |           logger: actualLogger\n268 |         )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:31:10: note: 'init(wrapped:secureStorage:logger:)' declared here\n 29 |      - logger: The privacy-aware logger to use for logging.\n 30 |    */\n 31 |   public init(\n    |          `- note: 'init(wrapped:secureStorage:logger:)' declared here\n 32 |     wrapped: CryptoServiceProtocol,\n 33 |     secureStorage: SecureStorageProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:267:19: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n265 |             )\n266 |           ),\n267 |           logger: actualLogger\n    |                   `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n268 |         )\n269 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:262:22: error: extra argument 'options' in call\n260 |             secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n261 |             logger: actualLogger,\n262 |             options: FactoryCryptoOptions(\n    |                      `- error: extra argument 'options' in call\n263 |               defaultIterations: 5000, // Medium strength for staging\n264 |               enforceStrongKeys: true\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:295:48: error: type of expression is ambiguous without a type annotation\n293 |     logger: LoggingProtocol? = nil\n294 |   ) async -\u003e CryptoServiceProtocol {\n295 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n296 |     \n297 |     // Create the provider\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:322:48: error: type of expression is ambiguous without a type annotation\n320 |     logger: LoggingProtocol? = nil\n321 |   ) async -\u003e CryptoServiceProtocol {\n322 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n323 | \n324 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:325:48: error: 'await' cannot appear to the right of a non-assignment operator\n323 | \n324 |     // Use the provided secure storage or create a default one\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:327:18: error: cannot find 'DefaultCryptoServiceWithProviderImpl' in scope\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n    |                  `- error: cannot find 'DefaultCryptoServiceWithProviderImpl' in scope\n328 |       provider: provider,\n329 |       secureStorage: actualSecureStorage,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:325:54: error: 'async' call in an autoclosure that does not support concurrency\n323 | \n324 |     // Use the provided secure storage or create a default one\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:345:31: error: type of expression is ambiguous without a type annotation\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                               `- error: type of expression is ambiguous without a type annotation\n346 |     \n347 |     return await DefaultSecurityProviderRegistry(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:368:31: error: type of expression is ambiguous without a type annotation\n366 |     logger: LoggingProtocol? = nil\n367 |   ) async -\u003e SecureStorageProtocol {\n368 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                               `- error: type of expression is ambiguous without a type annotation\n369 |     \n370 |     // Create default provider if none provided\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:376:61: error: cannot infer contextual base in reference to member 'default'\n374 |     } else {\n375 |       let registry = await createProviderRegistry(logger: actualLogger)\n376 |       actualProvider = await registry.createProvider(type: .default)\n    |                                                             `- error: cannot infer contextual base in reference to member 'default'\n377 |     }\n378 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:379:18: error: cannot find 'DefaultSecureStorageImpl' in scope\n377 |     }\n378 |     \n379 |     return await DefaultSecureStorageImpl(\n    |                  `- error: cannot find 'DefaultSecureStorageImpl' in scope\n380 |       provider: actualProvider,\n381 |       storageURL: storageURL,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:412:48: error: type of expression is ambiguous without a type annotation\n410 |     secureStorage: SecureStorageProtocol? = nil\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n414 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:413:48: error: 'await' cannot appear to the right of a non-assignment operator\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n414 |     \n415 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:413:54: error: 'async' call in an autoclosure that does not support concurrency\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n414 |     \n415 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:415:12: warning: no 'async' operations occur within 'await' expression\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n414 |     \n415 |     return await MockCryptoServiceImpl(\n    |            `- warning: no 'async' operations occur within 'await' expression\n416 |       configuration: configuration,\n417 |       logger: actualLogger,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:14:20: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n 12 |  as a fallback implementation for various security operations.\n 13 |  */\n 14 | public final class BasicSecurityProvider: SecurityProviderProtocol, AsyncServiceInitializable {\n    |                    |- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n    |                    `- note: add stubs for conformance\n 15 |   // MARK: - Properties (Placeholder - Dependencies likely needed)\n 16 | \n    :\n178 | \n179 |   /// Creates a standard security configuration DTO for this basic provider.\n180 |   public func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions? = nil) -\u003e CoreSecurityTypes.SecurityConfigDTO {\n    |               `- note: candidate has non-matching type '(SecurityConfigOptions?) -\u003e SecurityConfigDTO'\n181 |     print(\"BasicSecurityProvider createSecureConfig called (stub)\")\n182 |     return CoreSecurityTypes.SecurityConfigDTO(\n\nSecurityCoreInterfaces.SecurityProviderProtocol.createSecureConfig:2:6: note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n1 | protocol SecurityProviderProtocol {\n2 | func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions) async -\u003e CoreSecurityTypes.SecurityConfigDTO}\n  |      `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:479:15: error: invalid redeclaration of 'storeData(data:identifier:)'\n477 |   // They expect `Data` instead of `[UInt8]` for storage operations.\n478 | \n479 |   public func storeData(\n    |               `- error: invalid redeclaration of 'storeData(data:identifier:)'\n480 |     data: Data, // Protocol expects Data\n481 |     identifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:506:15: error: invalid redeclaration of 'retrieveData(identifier:)'\n504 |   }\n505 | \n506 |   public func retrieveData(\n    |               `- error: invalid redeclaration of 'retrieveData(identifier:)'\n507 |     identifier: String\n508 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e { // Protocol expects Data\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:530:15: error: invalid redeclaration of 'deleteData(identifier:)'\n528 |   }\n529 | \n530 |   public func deleteData(\n    |               `- error: invalid redeclaration of 'deleteData(identifier:)'\n531 |     identifier: String\n532 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:550:15: error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n548 | \n549 |   // Ensure generateHash signature matches protocol\n550 |   public func generateHash(\n    |               `- error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n551 |     dataIdentifier: String,\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:559:15: error: invalid redeclaration of 'importData(_:customIdentifier:)'\n557 |   // Keep the existing importData signature expecting [UInt8]\n558 |   // but also add the one expecting Data to satisfy the protocol.\n559 |   public func importData(\n    |               `- error: invalid redeclaration of 'importData(_:customIdentifier:)'\n560 |     _ data: Data, // Protocol expects Data\n561 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:340:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n338 |     customIdentifier: String\n339 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n340 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n341 |     await logger?.debug(\"Importing raw data with custom identifier: \\(customIdentifier)\", context: context)\n342 |     // Store the raw data using the secure storage protocol\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:358:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n356 |     customIdentifier: String?\n357 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n358 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n359 |     await logger?.debug(\"Importing [UInt8] data...\", context: context)\n360 |     // Convert [UInt8] to Data for storage\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:384:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n382 |     identifier: String\n383 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n384 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Export\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n385 |     await logger?.debug(\"Exporting data with identifier: \\(identifier)\", context: context)\n386 |     let result = await secureStorage.retrieveData(withIdentifier: identifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:411:21: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n409 |     } else {\n410 |       // Fallback or handle error appropriately\n411 |       let context = LogContextDTO(subsystem: \"CryptoService\", category: \"Randomness\")\n    |                     `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n412 |       await logger?.error(\"Failed to generate secure random bytes, status: \\(status)\", context: context)\n413 |       // Returning non-secure bytes as a fallback - consider throwing an error instead\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:425:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n423 |     options _: CoreSecurityTypes.HashingOptions? = nil\n424 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n425 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Hashing\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n426 |     await logger?.debug(\n427 |       \"Verifying hash for data \\(dataIdentifier) against hash \\(hashIdentifier)\", context: context\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:433:34: error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n431 |     guard case .success(let originalData) = dataResult else {\n432 |       await logger?.error(\"Failed to retrieve original data for hash verification\", context: context)\n433 |       return .failure(dataResult.error ?? .dataNotFound(identifier: dataIdentifier))\n    |                                  `- error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n434 |     }\n435 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:433:44: error: enum case 'dataNotFound' has no associated values\n431 |     guard case .success(let originalData) = dataResult else {\n432 |       await logger?.error(\"Failed to retrieve original data for hash verification\", context: context)\n433 |       return .failure(dataResult.error ?? .dataNotFound(identifier: dataIdentifier))\n    |                                            `- error: enum case 'dataNotFound' has no associated values\n434 |     }\n435 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:440:34: error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n438 |     guard case .success(let storedHash) = hashResult else {\n439 |       await logger?.error(\"Failed to retrieve stored hash for verification\", context: context)\n440 |       return .failure(hashResult.error ?? .dataNotFound(identifier: hashIdentifier))\n    |                                  `- error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n441 |     }\n442 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:440:44: error: enum case 'dataNotFound' has no associated values\n438 |     guard case .success(let storedHash) = hashResult else {\n439 |       await logger?.error(\"Failed to retrieve stored hash for verification\", context: context)\n440 |       return .failure(hashResult.error ?? .dataNotFound(identifier: hashIdentifier))\n    |                                            `- error: enum case 'dataNotFound' has no associated values\n441 |     }\n442 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:444:25: error: cannot find 'sha256' in scope\n442 | \n443 |     // 3. Generate hash of original data (using a basic SHA256 for this stub)\n444 |     let generatedHash = sha256(data: originalData)\n    |                         `- error: cannot find 'sha256' in scope\n445 | \n446 |     // 4. Compare hashes\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:457:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n455 |     options _: CoreSecurityTypes.KeyGenerationOptions? = nil\n456 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n457 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"KeyManagement\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n458 |     await logger?.debug(\"Generating key of length \\(length)...\", context: context)\n459 |     let keyData = generateRandomBytes(count: length)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:554:66: error: cannot find 'options' in scope\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n553 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n554 |       return await hash(dataIdentifier: dataIdentifier, options: options)\n    |                                                                  `- error: cannot find 'options' in scope\n555 |   }\n556 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:563:36: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n561 |     customIdentifier: String\n562 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n563 |       let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n564 |       await logger?.debug(\"Importing Data with custom identifier: \\(customIdentifier)\", context: context)\n565 |       // Store the raw data using the secure storage protocol, converting Data to [UInt8]\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:459:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n457 |       identifier: customIdentifier\n458 |     )\n459 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n460 |     return await wrapped.importData(data, customIdentifier: customIdentifier)\n461 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:480:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n478 |       identifier: customIdentifier\n479 |     )\n480 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n481 |     return await wrapped.importData(data, customIdentifier: customIdentifier)\n482 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:501:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n499 |       identifier: dataIdentifier\n500 |     )\n501 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n502 |     return await wrapped.generateHash(dataIdentifier: dataIdentifier, options: options)\n503 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:522:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n520 |       identifier: identifier\n521 |     )\n522 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n523 |     return await wrapped.storeData(data: data, identifier: identifier)\n524 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:540:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n538 |       identifier: identifier\n539 |     )\n540 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n541 |     return await wrapped.retrieveData(identifier: identifier)\n542 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:558:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n556 |       identifier: identifier\n557 |     )\n558 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n559 |     return await wrapped.deleteData(identifier: identifier)\n560 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:160:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n158 |     encryptedDataIdentifier: String,\n159 |     keyIdentifier _: String,\n160 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n    |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n161 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n162 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:326:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n324 |   public func generateKey(\n325 |     length: Int,\n326 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n    |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n327 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n328 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:51:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 49 |                 return .failure(error)\n 50 |             }\n 51 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 52 |             return .failure(error)\n 53 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:75:26: error: missing argument for parameter 'source' in call\n 73 |         await logger.debug(\n 74 |             \"Encrypting data using algorithm: \\(algorithm.rawValue)\",\n 75 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n 76 |         )\n 77 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:83:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 81 |             // Actual implementation would use CommonCrypto or CryptoKit\n 82 |             return .success(data) // Placeholder response\n 83 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 84 |             return .failure(error)\n 85 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:107:26: error: missing argument for parameter 'source' in call\n105 |         await logger.debug(\n106 |             \"Decrypting data using algorithm: \\(algorithm.rawValue)\",\n107 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n108 |         )\n109 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:115:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n113 |             // Actual implementation would use CommonCrypto or CryptoKit\n114 |             return .success(data) // Placeholder response\n115 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n116 |             return .failure(error)\n117 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:134:26: error: missing argument for parameter 'source' in call\n132 |         await logger.debug(\n133 |             \"Hashing data using algorithm: \\(algorithm.rawValue)\",\n134 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n135 |         )\n136 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:142:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n140 |             // Actual implementation would use CommonCrypto or CryptoKit\n141 |             return .success(data) // Placeholder response\n142 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n143 |             return .failure(error)\n144 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:161:26: error: missing argument for parameter 'source' in call\n159 |         await logger.debug(\n160 |             \"Generating \\(keyType.rawValue) key of size: \\(keySize) bits\",\n161 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n162 |         )\n163 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:221:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 219 |     encryptedDataIdentifier: String,\n 220 |     keyIdentifier: String,\n 221 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n     |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 222 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 223 |     let context=CryptoLogContext(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:632:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 630 |   public func generateKey(\n 631 |     length: Int,\n 632 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n     |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 633 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 634 |     do {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:78: error: missing argument for parameter 'options' in call\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                              `- error: missing argument for parameter 'options' in call\n 146 | \n 147 |       // Store the encrypted data\n\nCryptoInterfaces.CryptoProviderProtocol.encrypt:2:6: note: 'encrypt(data:key:options:)' declared here\n1 | protocol CryptoProviderProtocol {\n2 | func encrypt(data: Data, key: Data, options: CoreSecurityTypes.EncryptionOptions?) async -\u003e Result\u003cData, any Error\u003e}\n  |      `- note: 'encrypt(data:key:options:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:64: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 146 | \n 147 |       // Store the encrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:75: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                           `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 146 | \n 147 |       // Store the encrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:87: error: missing argument for parameter 'options' in call\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                                       `- error: missing argument for parameter 'options' in call\n 287 | \n 288 |       // Store the decrypted data\n\nCryptoInterfaces.CryptoProviderProtocol.decrypt:2:6: note: 'decrypt(data:key:options:)' declared here\n1 | protocol CryptoProviderProtocol {\n2 | func decrypt(data: Data, key: Data, options: CoreSecurityTypes.EncryptionOptions?) async -\u003e Result\u003cData, any Error\u003e}\n  |      `- note: 'decrypt(data:key:options:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:64: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 287 | \n 288 |       // Store the decrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:84: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                                    `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 287 | \n 288 |       // Store the decrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:641:53: error: cannot convert value of type 'Result\u003cData, any Error\u003e' to expected argument type '[UInt8]'\n 639 | \n 640 |       // Store the key in secure storage\n 641 |       let storeResult=await secureStorage.storeData(keyData, withIdentifier: keyIdentifier)\n     |                                                     `- error: cannot convert value of type 'Result\u003cData, any Error\u003e' to expected argument type '[UInt8]'\n 642 | \n 643 |       guard case .success=storeResult else {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:638:19: warning: no calls to throwing functions occur within 'try' expression\n 636 | \n 637 |       // Generate random key data\n 638 |       let keyData=try await cryptoProvider.generateRandomData(length: length)\n     |                   `- warning: no calls to throwing functions occur within 'try' expression\n 639 | \n 640 |       // Store the key in secure storage\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoStorage.swift:417:31: error: cannot find 'getSecureStorage' in scope\n415 |     // Currently we just attempt to retrieve the data and check if it exists\n416 |     // This could be optimized in a real implementation to avoid loading the data\n417 |     let secureStore=try await getSecureStorage()\n    |                               `- error: cannot find 'getSecureStorage' in scope\n418 |     return secureStore.hasKey(identifier)\n419 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n266 |    - Returns: Result containing array of identifiers or error details\n267 |    */\n268 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n269 |     await logger.warning(\n270 |       \"List data identifiers operation not supported\",\n\nSecurityCoreInterfaces.SecureStorageProtocol.storeData:2:6: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func storeData(_ data: [UInt8], withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.retrieveData:2:6: note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func retrieveData(withIdentifier identifier: String) async -\u003e Result\u003c[UInt8], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.deleteData:2:6: note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func deleteData(withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.listDataIdentifiers:2:6: note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:158:61: error: type '_ErrorCodeProtocol' has no member 'notFound'\n156 |       )\n157 | \n158 |       if let storageError=error as? StorageCoreError, case .notFound=storageError {\n    |                                                             `- error: type '_ErrorCodeProtocol' has no member 'notFound'\n159 |         return .failure(.dataNotFound)\n160 |       }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:67:15: error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 65 | extension CoreSecurityTypes.DecryptionOptions {\n 66 |   /// Convert to CryptoOperationOptionsDTO for use with internal APIs\n 67 |   public func toCryptoOperationOptionsDTO() -\u003e CryptoOperationOptionsDTO {\n    |               `- error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 68 |     // Map the algorithm and mode\n 69 |     let cryptoMode: CryptoMode=switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:87:15: error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 85 | \n 86 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n 87 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n    |               `- error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 88 |   -\u003e SecurityConfigDTO {\n 89 |     var configOptions=SecurityConfigOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:109:15: error: invalid redeclaration of 'toInterfaceOptions()'\n107 | \n108 |   /// Convert to interface DecryptionOptions (used when adapting options)\n109 |   public func toInterfaceOptions() -\u003e CoreSecurityTypes.DecryptionOptions {\n    |               `- error: invalid redeclaration of 'toInterfaceOptions()'\n110 |     // This is a no-op since we're already using the correct type\n111 |     self\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:118:34: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n116 | \n117 | /// Extension to adapt between various key generation options types\n118 | extension SecurityCoreInterfaces.KeyGenerationOptions {\n    |                                  `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n119 |   /// Convert to KeyGenerationOptionsDTO for internal use\n120 |   public func toKeyGenerationOptionsDTO(keySize: Int) -\u003e KeyGenerationOptionsDTO {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:34: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n199 | \n200 | /// Extension to adapt between SecurityCoreInterfaces.HashingOptions and various format options\n201 | extension SecurityCoreInterfaces.HashingOptions {\n    |                                  `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n202 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n203 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:333:68: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n331 | \n332 |   /// Extract key generation options from the configuration\n333 |   public var extractedKeyGenerationOptions: SecurityCoreInterfaces.KeyGenerationOptions? {\n    |                                                                    `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n334 |     nil // Simplified until we have the proper members\n335 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:338:62: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n336 | \n337 |   /// Extract hashing options from the configuration\n338 |   public var extractedHashingOptions: SecurityCoreInterfaces.HashingOptions? {\n    |                                                              `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n339 |     nil // Simplified until we have the proper members\n340 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:21:23: error: cannot find type 'PaddingMode' in scope\n19 | \n20 |   /// Padding mode to use for block ciphers\n21 |   public let padding: PaddingMode?\n   |                       `- error: cannot find type 'PaddingMode' in scope\n22 | \n23 |   /**\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:34:14: error: cannot find type 'PaddingMode' in scope\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n34 |     padding: PaddingMode? = .pkcs7\n   |              `- error: cannot find type 'PaddingMode' in scope\n35 |   ) {\n36 |     self.algorithm=algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/UnifiedTypes/UnifiedTypes.swift:129:54: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n127 | \n128 |     /// Convert from SecurityCoreInterfaces.DecryptionOptions if available\n129 |     public init(from options: SecurityCoreInterfaces.DecryptionOptions?) {\n    |                                                      `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n130 |       // Default values if options is nil\n131 |       if let options {\nTarget //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices failed to build\nINFO: Elapsed time: 1.056s, Critical Path: 0.95s\nINFO: 2 processes: 10 action cache hit, 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations",
    "success": false,
    "start_time": "2025-04-08T00:44:35.106078+01:00",
    "end_time": "2025-04-08T00:44:36.883164+01:00",
    "duration": "1.777082667s",
    "output": "INFO: Invocation ID: ea8cdc1f-3d46-4680-b0cb-8003a6fd2f5b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:227:18: error: cannot find type 'DeploymentEnvironment' in scope\n225 |     secureStorage: SecureStorageProtocol?=nil,\n226 |     logger: LoggingProtocol?=nil,\n227 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:344:14: error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n342 |   public static func createProviderRegistry(\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n    |              `- error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n346 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:407:22: error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n405 |    - Returns: A mock CryptoServiceProtocol implementation\n406 |    */\n407 |   public static func createMock(\n    |                      `- error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n408 |     configuration: MockCryptoServiceImpl.Configuration = .init(),\n409 |     logger: LoggingProtocol? = nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:14:20: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n 12 |  as a fallback implementation for various security operations.\n 13 |  */\n 14 | public final class BasicSecurityProvider: SecurityProviderProtocol, AsyncServiceInitializable {\n    |                    |- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n    |                    `- note: add stubs for conformance\n 15 |   // MARK: - Properties (Placeholder - Dependencies likely needed)\n 16 | \n    :\n178 | \n179 |   /// Creates a standard security configuration DTO for this basic provider.\n180 |   public func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions? = nil) -\u003e CoreSecurityTypes.SecurityConfigDTO {\n    |               `- note: candidate has non-matching type '(SecurityConfigOptions?) -\u003e SecurityConfigDTO'\n181 |     print(\"BasicSecurityProvider createSecureConfig called (stub)\")\n182 |     return CoreSecurityTypes.SecurityConfigDTO(\n\nSecurityCoreInterfaces.SecurityProviderProtocol.createSecureConfig:2:6: note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n1 | protocol SecurityProviderProtocol {\n2 | func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions) async -\u003e CoreSecurityTypes.SecurityConfigDTO}\n  |      `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:479:15: error: invalid redeclaration of 'storeData(data:identifier:)'\n477 |   // They expect `Data` instead of `[UInt8]` for storage operations.\n478 | \n479 |   public func storeData(\n    |               `- error: invalid redeclaration of 'storeData(data:identifier:)'\n480 |     data: Data, // Protocol expects Data\n481 |     identifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:506:15: error: invalid redeclaration of 'retrieveData(identifier:)'\n504 |   }\n505 | \n506 |   public func retrieveData(\n    |               `- error: invalid redeclaration of 'retrieveData(identifier:)'\n507 |     identifier: String\n508 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e { // Protocol expects Data\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:530:15: error: invalid redeclaration of 'deleteData(identifier:)'\n528 |   }\n529 | \n530 |   public func deleteData(\n    |               `- error: invalid redeclaration of 'deleteData(identifier:)'\n531 |     identifier: String\n532 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:550:15: error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n548 | \n549 |   // Ensure generateHash signature matches protocol\n550 |   public func generateHash(\n    |               `- error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n551 |     dataIdentifier: String,\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:559:15: error: invalid redeclaration of 'importData(_:customIdentifier:)'\n557 |   // Keep the existing importData signature expecting [UInt8]\n558 |   // but also add the one expecting Data to satisfy the protocol.\n559 |   public func importData(\n    |               `- error: invalid redeclaration of 'importData(_:customIdentifier:)'\n560 |     _ data: Data, // Protocol expects Data\n561 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:160:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n158 |     encryptedDataIdentifier: String,\n159 |     keyIdentifier _: String,\n160 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n    |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n161 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n162 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:326:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n324 |   public func generateKey(\n325 |     length: Int,\n326 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n    |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n327 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n328 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:221:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 219 |     encryptedDataIdentifier: String,\n 220 |     keyIdentifier: String,\n 221 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n     |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 222 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 223 |     let context=CryptoLogContext(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:632:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 630 |   public func generateKey(\n 631 |     length: Int,\n 632 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n     |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 633 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 634 |     do {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n266 |    - Returns: Result containing array of identifiers or error details\n267 |    */\n268 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n269 |     await logger.warning(\n270 |       \"List data identifiers operation not supported\",\n\nSecurityCoreInterfaces.SecureStorageProtocol.storeData:2:6: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func storeData(_ data: [UInt8], withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.retrieveData:2:6: note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func retrieveData(withIdentifier identifier: String) async -\u003e Result\u003c[UInt8], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.deleteData:2:6: note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func deleteData(withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.listDataIdentifiers:2:6: note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:67:15: error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 65 | extension CoreSecurityTypes.DecryptionOptions {\n 66 |   /// Convert to CryptoOperationOptionsDTO for use with internal APIs\n 67 |   public func toCryptoOperationOptionsDTO() -\u003e CryptoOperationOptionsDTO {\n    |               `- error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 68 |     // Map the algorithm and mode\n 69 |     let cryptoMode: CryptoMode=switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:87:15: error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 85 | \n 86 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n 87 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n    |               `- error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 88 |   -\u003e SecurityConfigDTO {\n 89 |     var configOptions=SecurityConfigOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:109:15: error: invalid redeclaration of 'toInterfaceOptions()'\n107 | \n108 |   /// Convert to interface DecryptionOptions (used when adapting options)\n109 |   public func toInterfaceOptions() -\u003e CoreSecurityTypes.DecryptionOptions {\n    |               `- error: invalid redeclaration of 'toInterfaceOptions()'\n110 |     // This is a no-op since we're already using the correct type\n111 |     self\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:118:34: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n116 | \n117 | /// Extension to adapt between various key generation options types\n118 | extension SecurityCoreInterfaces.KeyGenerationOptions {\n    |                                  `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n119 |   /// Convert to KeyGenerationOptionsDTO for internal use\n120 |   public func toKeyGenerationOptionsDTO(keySize: Int) -\u003e KeyGenerationOptionsDTO {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:34: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n199 | \n200 | /// Extension to adapt between SecurityCoreInterfaces.HashingOptions and various format options\n201 | extension SecurityCoreInterfaces.HashingOptions {\n    |                                  `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n202 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n203 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:333:68: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n331 | \n332 |   /// Extract key generation options from the configuration\n333 |   public var extractedKeyGenerationOptions: SecurityCoreInterfaces.KeyGenerationOptions? {\n    |                                                                    `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n334 |     nil // Simplified until we have the proper members\n335 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:338:62: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n336 | \n337 |   /// Extract hashing options from the configuration\n338 |   public var extractedHashingOptions: SecurityCoreInterfaces.HashingOptions? {\n    |                                                              `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n339 |     nil // Simplified until we have the proper members\n340 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:21:23: error: cannot find type 'PaddingMode' in scope\n19 | \n20 |   /// Padding mode to use for block ciphers\n21 |   public let padding: PaddingMode?\n   |                       `- error: cannot find type 'PaddingMode' in scope\n22 | \n23 |   /**\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:34:14: error: cannot find type 'PaddingMode' in scope\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n34 |     padding: PaddingMode? = .pkcs7\n   |              `- error: cannot find type 'PaddingMode' in scope\n35 |   ) {\n36 |     self.algorithm=algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/UnifiedTypes/UnifiedTypes.swift:129:54: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n127 | \n128 |     /// Convert from SecurityCoreInterfaces.DecryptionOptions if available\n129 |     public init(from options: SecurityCoreInterfaces.DecryptionOptions?) {\n    |                                                      `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n130 |       // Default values if options is nil\n131 |       if let options {\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:117:79: error: value of type 'HashingOptions' has no member 'salt'\n115 |     guard let options else { return nil }\n116 | \n117 |     return LocalHashingOptions(algorithm: options.algorithm, useSalt: options.salt != nil)\n    |                                                                               `- error: value of type 'HashingOptions' has no member 'salt'\n118 |   }\n119 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:130:97: error: extra argument 'salt' in call\n128 |     guard let options else { return nil }\n129 | \n130 |     return CoreSecurityTypes.HashingOptions(algorithm: options.algorithm, salt: options.useSalt ? [0x01, 0x02, 0x03, 0x04] : nil)\n    |                                                                                                 `- error: extra argument 'salt' in call\n131 |   }\n132 | }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:24: error: value of type 'KeyGenerationOptions' has no member 'options'\n151 |       useSecureEnclave: options.useSecureEnclave,\n152 |       isExtractable: options.isExtractable,\n153 |       options: options.options\n    |                        `- error: value of type 'KeyGenerationOptions' has no member 'options'\n154 |     )\n155 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:172:24: error: extra argument 'options' in call\n170 |       useSecureEnclave: options.useSecureEnclave,\n171 |       isExtractable: options.isExtractable,\n172 |       options: options.options\n    |                        `- error: extra argument 'options' in call\n173 |     )\n174 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:31: error: missing argument for parameter 'keySizeInBits' in call\n167 | \n168 |     return CoreSecurityTypes.KeyGenerationOptions(\n169 |       keyType: options.keyType,\n    |                               `- error: missing argument for parameter 'keySizeInBits' in call\n170 |       useSecureEnclave: options.useSecureEnclave,\n171 |       isExtractable: options.isExtractable,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:147:10: note: 'init(keyType:keySizeInBits:isExtractable:useSecureEnclave:)' declared here\n145 |   public let useSecureEnclave: Bool // Hint to use hardware security module if available\n146 | \n147 |   public init(\n    |          `- note: 'init(keyType:keySizeInBits:isExtractable:useSecureEnclave:)' declared here\n148 |     keyType: KeyType,\n149 |     keySizeInBits: Int,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:227:18: error: cannot find type 'DeploymentEnvironment' in scope\n225 |     secureStorage: SecureStorageProtocol?=nil,\n226 |     logger: LoggingProtocol?=nil,\n227 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:344:14: error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n342 |   public static func createProviderRegistry(\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n    |              `- error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n346 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:407:22: error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n405 |    - Returns: A mock CryptoServiceProtocol implementation\n406 |    */\n407 |   public static func createMock(\n    |                      `- error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n408 |     configuration: MockCryptoServiceImpl.Configuration = .init(),\n409 |     logger: LoggingProtocol? = nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:100:48: error: type of expression is ambiguous without a type annotation\n 98 |     logger: LoggingProtocol? = nil\n 99 |   ) async -\u003e CryptoServiceProtocol {\n100 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n101 | \n102 |     return await DefaultCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:103:39: error: 'await' cannot appear to the right of a non-assignment operator\n101 | \n102 |     return await DefaultCryptoServiceImpl(\n103 |       secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                       `- error: 'await' cannot appear to the right of a non-assignment operator\n104 |       logger: actualLogger,\n105 |       options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:105:16: error: extra argument 'options' in call\n103 |       secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n104 |       logger: actualLogger,\n105 |       options: FactoryCryptoOptions()\n    |                `- error: extra argument 'options' in call\n106 |     )\n107 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:121:48: error: type of expression is ambiguous without a type annotation\n119 |     logger: LoggingProtocol?=nil\n120 |   ) async -\u003e CryptoServiceProtocol {\n121 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n122 | \n123 |     return await LoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:125:41: error: 'await' cannot appear to the right of a non-assignment operator\n123 |     return await LoggingCryptoServiceImpl(\n124 |       wrapped: DefaultCryptoServiceImpl(\n125 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n126 |         logger: actualLogger,\n127 |         options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:127:18: error: extra argument 'options' in call\n125 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n126 |         logger: actualLogger,\n127 |         options: FactoryCryptoOptions()\n    |                  `- error: extra argument 'options' in call\n128 |       ),\n129 |       logger: actualLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:145:48: error: type of expression is ambiguous without a type annotation\n143 |     logger: LoggingProtocol?=nil\n144 |   ) async -\u003e CryptoServiceProtocol {\n145 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n146 | \n147 |     return await EnhancedLoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:149:41: error: 'await' cannot appear to the right of a non-assignment operator\n147 |     return await EnhancedLoggingCryptoServiceImpl(\n148 |       wrapped: DefaultCryptoServiceImpl(\n149 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:152:8: error: missing argument for parameter 'secureStorage' in call\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n152 |       ),\n    |        `- error: missing argument for parameter 'secureStorage' in call\n153 |       logger: actualLogger\n154 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:31:10: note: 'init(wrapped:secureStorage:logger:)' declared here\n 29 |      - logger: The privacy-aware logger to use for logging.\n 30 |    */\n 31 |   public init(\n    |          `- note: 'init(wrapped:secureStorage:logger:)' declared here\n 32 |     wrapped: CryptoServiceProtocol,\n 33 |     secureStorage: SecureStorageProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:153:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n151 |         options: FactoryCryptoOptions()\n152 |       ),\n153 |       logger: actualLogger\n    |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n154 |     )\n155 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:151:18: error: extra argument 'options' in call\n149 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n    |                  `- error: extra argument 'options' in call\n152 |       ),\n153 |       logger: actualLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:169:48: error: type of expression is ambiguous without a type annotation\n167 |     logger: LoggingProtocol?=nil\n168 |   ) async -\u003e CryptoServiceProtocol {\n169 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n170 | \n171 |     // Create secure service with enhanced parameters\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:174:41: error: 'await' cannot appear to the right of a non-assignment operator\n172 |     let service = await EnhancedSecureCryptoServiceImpl(\n173 |       wrapped: DefaultCryptoServiceImpl(\n174 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n175 |         logger: actualLogger,\n176 |         options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:181:16: error: extra argument 'storage' in call\n179 |         )\n180 |       ),\n181 |       storage: await createSecureStorage(),\n    |                `- error: extra argument 'storage' in call\n182 |       logger: actualLogger\n183 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:181:43: error: missing argument for parameter 'rateLimiter' in call\n179 |         )\n180 |       ),\n181 |       storage: await createSecureStorage(),\n    |                                           `- error: missing argument for parameter 'rateLimiter' in call\n182 |       logger: actualLogger\n183 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:44:10: note: 'init(wrapped:logger:rateLimiter:)' declared here\n 42 |      - rateLimiter: Rate limiter for security operations\n 43 |    */\n 44 |   public init(\n    |          `- note: 'init(wrapped:logger:rateLimiter:)' declared here\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:182:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n180 |       ),\n181 |       storage: await createSecureStorage(),\n182 |       logger: actualLogger\n    |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n183 |     )\n184 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:176:18: error: extra argument 'options' in call\n174 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n175 |         logger: actualLogger,\n176 |         options: FactoryCryptoOptions(\n    |                  `- error: extra argument 'options' in call\n177 |           defaultIterations: 10000, // Higher iteration count for PBKDF2\n178 |           enforceStrongKeys: true\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:205:48: error: type of expression is ambiguous without a type annotation\n203 |     secureStorage: SecureStorageProtocol? = nil\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n207 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:206:48: error: 'await' cannot appear to the right of a non-assignment operator\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n207 |     \n208 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:206:54: error: 'async' call in an autoclosure that does not support concurrency\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n207 |     \n208 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:208:12: warning: no 'async' operations occur within 'await' expression\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n207 |     \n208 |     return await MockCryptoServiceImpl(\n    |            `- warning: no 'async' operations occur within 'await' expression\n209 |       configuration: configuration,\n210 |       logger: actualLogger,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:229:48: error: type of expression is ambiguous without a type annotation\n227 |     environment: DeploymentEnvironment = .production\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n230 | \n231 |     switch environment {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:234:43: error: 'await' cannot appear to the right of a non-assignment operator\n232 |       case .development:\n233 |         return await DefaultCryptoServiceImpl(\n234 |           secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                           `- error: 'await' cannot appear to the right of a non-assignment operator\n235 |           logger: actualLogger,\n236 |           options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:236:20: error: extra argument 'options' in call\n234 |           secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n235 |           logger: actualLogger,\n236 |           options: FactoryCryptoOptions(\n    |                    `- error: extra argument 'options' in call\n237 |             defaultIterations: 1000, // Lower for development speed\n238 |             enforceStrongKeys: false // More lenient for development\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:244:26: error: cannot find 'MockCryptoConfiguration' in scope\n242 |       case .testing:\n243 |         return await MockCryptoServiceImpl(\n244 |           configuration: MockCryptoConfiguration(\n    |                          `- error: cannot find 'MockCryptoConfiguration' in scope\n245 |             encryptionSucceeds: true,\n246 |             decryptionSucceeds: true,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:260:45: error: 'await' cannot appear to the right of a non-assignment operator\n258 |         return await EnhancedLoggingCryptoServiceImpl(\n259 |           wrapped: DefaultCryptoServiceImpl(\n260 |             secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                             `- error: 'await' cannot appear to the right of a non-assignment operator\n261 |             logger: actualLogger,\n262 |             options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:266:12: error: missing argument for parameter 'secureStorage' in call\n264 |               enforceStrongKeys: true\n265 |             )\n266 |           ),\n    |            `- error: missing argument for parameter 'secureStorage' in call\n267 |           logger: actualLogger\n268 |         )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:31:10: note: 'init(wrapped:secureStorage:logger:)' declared here\n 29 |      - logger: The privacy-aware logger to use for logging.\n 30 |    */\n 31 |   public init(\n    |          `- note: 'init(wrapped:secureStorage:logger:)' declared here\n 32 |     wrapped: CryptoServiceProtocol,\n 33 |     secureStorage: SecureStorageProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:267:19: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n265 |             )\n266 |           ),\n267 |           logger: actualLogger\n    |                   `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n268 |         )\n269 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:262:22: error: extra argument 'options' in call\n260 |             secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n261 |             logger: actualLogger,\n262 |             options: FactoryCryptoOptions(\n    |                      `- error: extra argument 'options' in call\n263 |               defaultIterations: 5000, // Medium strength for staging\n264 |               enforceStrongKeys: true\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:295:48: error: type of expression is ambiguous without a type annotation\n293 |     logger: LoggingProtocol? = nil\n294 |   ) async -\u003e CryptoServiceProtocol {\n295 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n296 |     \n297 |     // Create the provider\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:322:48: error: type of expression is ambiguous without a type annotation\n320 |     logger: LoggingProtocol? = nil\n321 |   ) async -\u003e CryptoServiceProtocol {\n322 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n323 | \n324 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:325:48: error: 'await' cannot appear to the right of a non-assignment operator\n323 | \n324 |     // Use the provided secure storage or create a default one\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:327:18: error: cannot find 'DefaultCryptoServiceWithProviderImpl' in scope\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n    |                  `- error: cannot find 'DefaultCryptoServiceWithProviderImpl' in scope\n328 |       provider: provider,\n329 |       secureStorage: actualSecureStorage,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:325:54: error: 'async' call in an autoclosure that does not support concurrency\n323 | \n324 |     // Use the provided secure storage or create a default one\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:345:31: error: type of expression is ambiguous without a type annotation\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                               `- error: type of expression is ambiguous without a type annotation\n346 |     \n347 |     return await DefaultSecurityProviderRegistry(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:368:31: error: type of expression is ambiguous without a type annotation\n366 |     logger: LoggingProtocol? = nil\n367 |   ) async -\u003e SecureStorageProtocol {\n368 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                               `- error: type of expression is ambiguous without a type annotation\n369 |     \n370 |     // Create default provider if none provided\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:376:61: error: cannot infer contextual base in reference to member 'default'\n374 |     } else {\n375 |       let registry = await createProviderRegistry(logger: actualLogger)\n376 |       actualProvider = await registry.createProvider(type: .default)\n    |                                                             `- error: cannot infer contextual base in reference to member 'default'\n377 |     }\n378 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:379:18: error: cannot find 'DefaultSecureStorageImpl' in scope\n377 |     }\n378 |     \n379 |     return await DefaultSecureStorageImpl(\n    |                  `- error: cannot find 'DefaultSecureStorageImpl' in scope\n380 |       provider: actualProvider,\n381 |       storageURL: storageURL,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:412:48: error: type of expression is ambiguous without a type annotation\n410 |     secureStorage: SecureStorageProtocol? = nil\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n414 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:413:48: error: 'await' cannot appear to the right of a non-assignment operator\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n414 |     \n415 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:413:54: error: 'async' call in an autoclosure that does not support concurrency\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n414 |     \n415 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:415:12: warning: no 'async' operations occur within 'await' expression\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n414 |     \n415 |     return await MockCryptoServiceImpl(\n    |            `- warning: no 'async' operations occur within 'await' expression\n416 |       configuration: configuration,\n417 |       logger: actualLogger,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:14:20: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n 12 |  as a fallback implementation for various security operations.\n 13 |  */\n 14 | public final class BasicSecurityProvider: SecurityProviderProtocol, AsyncServiceInitializable {\n    |                    |- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n    |                    `- note: add stubs for conformance\n 15 |   // MARK: - Properties (Placeholder - Dependencies likely needed)\n 16 | \n    :\n178 | \n179 |   /// Creates a standard security configuration DTO for this basic provider.\n180 |   public func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions? = nil) -\u003e CoreSecurityTypes.SecurityConfigDTO {\n    |               `- note: candidate has non-matching type '(SecurityConfigOptions?) -\u003e SecurityConfigDTO'\n181 |     print(\"BasicSecurityProvider createSecureConfig called (stub)\")\n182 |     return CoreSecurityTypes.SecurityConfigDTO(\n\nSecurityCoreInterfaces.SecurityProviderProtocol.createSecureConfig:2:6: note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n1 | protocol SecurityProviderProtocol {\n2 | func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions) async -\u003e CoreSecurityTypes.SecurityConfigDTO}\n  |      `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:479:15: error: invalid redeclaration of 'storeData(data:identifier:)'\n477 |   // They expect `Data` instead of `[UInt8]` for storage operations.\n478 | \n479 |   public func storeData(\n    |               `- error: invalid redeclaration of 'storeData(data:identifier:)'\n480 |     data: Data, // Protocol expects Data\n481 |     identifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:506:15: error: invalid redeclaration of 'retrieveData(identifier:)'\n504 |   }\n505 | \n506 |   public func retrieveData(\n    |               `- error: invalid redeclaration of 'retrieveData(identifier:)'\n507 |     identifier: String\n508 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e { // Protocol expects Data\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:530:15: error: invalid redeclaration of 'deleteData(identifier:)'\n528 |   }\n529 | \n530 |   public func deleteData(\n    |               `- error: invalid redeclaration of 'deleteData(identifier:)'\n531 |     identifier: String\n532 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:550:15: error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n548 | \n549 |   // Ensure generateHash signature matches protocol\n550 |   public func generateHash(\n    |               `- error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n551 |     dataIdentifier: String,\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:559:15: error: invalid redeclaration of 'importData(_:customIdentifier:)'\n557 |   // Keep the existing importData signature expecting [UInt8]\n558 |   // but also add the one expecting Data to satisfy the protocol.\n559 |   public func importData(\n    |               `- error: invalid redeclaration of 'importData(_:customIdentifier:)'\n560 |     _ data: Data, // Protocol expects Data\n561 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:340:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n338 |     customIdentifier: String\n339 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n340 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n341 |     await logger?.debug(\"Importing raw data with custom identifier: \\(customIdentifier)\", context: context)\n342 |     // Store the raw data using the secure storage protocol\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:358:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n356 |     customIdentifier: String?\n357 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n358 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n359 |     await logger?.debug(\"Importing [UInt8] data...\", context: context)\n360 |     // Convert [UInt8] to Data for storage\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:384:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n382 |     identifier: String\n383 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n384 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Export\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n385 |     await logger?.debug(\"Exporting data with identifier: \\(identifier)\", context: context)\n386 |     let result = await secureStorage.retrieveData(withIdentifier: identifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:411:21: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n409 |     } else {\n410 |       // Fallback or handle error appropriately\n411 |       let context = LogContextDTO(subsystem: \"CryptoService\", category: \"Randomness\")\n    |                     `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n412 |       await logger?.error(\"Failed to generate secure random bytes, status: \\(status)\", context: context)\n413 |       // Returning non-secure bytes as a fallback - consider throwing an error instead\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:425:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n423 |     options _: CoreSecurityTypes.HashingOptions? = nil\n424 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n425 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Hashing\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n426 |     await logger?.debug(\n427 |       \"Verifying hash for data \\(dataIdentifier) against hash \\(hashIdentifier)\", context: context\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:433:34: error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n431 |     guard case .success(let originalData) = dataResult else {\n432 |       await logger?.error(\"Failed to retrieve original data for hash verification\", context: context)\n433 |       return .failure(dataResult.error ?? .dataNotFound(identifier: dataIdentifier))\n    |                                  `- error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n434 |     }\n435 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:433:44: error: enum case 'dataNotFound' has no associated values\n431 |     guard case .success(let originalData) = dataResult else {\n432 |       await logger?.error(\"Failed to retrieve original data for hash verification\", context: context)\n433 |       return .failure(dataResult.error ?? .dataNotFound(identifier: dataIdentifier))\n    |                                            `- error: enum case 'dataNotFound' has no associated values\n434 |     }\n435 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:440:34: error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n438 |     guard case .success(let storedHash) = hashResult else {\n439 |       await logger?.error(\"Failed to retrieve stored hash for verification\", context: context)\n440 |       return .failure(hashResult.error ?? .dataNotFound(identifier: hashIdentifier))\n    |                                  `- error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n441 |     }\n442 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:440:44: error: enum case 'dataNotFound' has no associated values\n438 |     guard case .success(let storedHash) = hashResult else {\n439 |       await logger?.error(\"Failed to retrieve stored hash for verification\", context: context)\n440 |       return .failure(hashResult.error ?? .dataNotFound(identifier: hashIdentifier))\n    |                                            `- error: enum case 'dataNotFound' has no associated values\n441 |     }\n442 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:444:25: error: cannot find 'sha256' in scope\n442 | \n443 |     // 3. Generate hash of original data (using a basic SHA256 for this stub)\n444 |     let generatedHash = sha256(data: originalData)\n    |                         `- error: cannot find 'sha256' in scope\n445 | \n446 |     // 4. Compare hashes\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:457:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n455 |     options _: CoreSecurityTypes.KeyGenerationOptions? = nil\n456 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n457 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"KeyManagement\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n458 |     await logger?.debug(\"Generating key of length \\(length)...\", context: context)\n459 |     let keyData = generateRandomBytes(count: length)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:554:66: error: cannot find 'options' in scope\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n553 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n554 |       return await hash(dataIdentifier: dataIdentifier, options: options)\n    |                                                                  `- error: cannot find 'options' in scope\n555 |   }\n556 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:563:36: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n561 |     customIdentifier: String\n562 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n563 |       let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n564 |       await logger?.debug(\"Importing Data with custom identifier: \\(customIdentifier)\", context: context)\n565 |       // Store the raw data using the secure storage protocol, converting Data to [UInt8]\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:459:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n457 |       identifier: customIdentifier\n458 |     )\n459 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n460 |     return await wrapped.importData(data, customIdentifier: customIdentifier)\n461 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:480:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n478 |       identifier: customIdentifier\n479 |     )\n480 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n481 |     return await wrapped.importData(data, customIdentifier: customIdentifier)\n482 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:501:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n499 |       identifier: dataIdentifier\n500 |     )\n501 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n502 |     return await wrapped.generateHash(dataIdentifier: dataIdentifier, options: options)\n503 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:522:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n520 |       identifier: identifier\n521 |     )\n522 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n523 |     return await wrapped.storeData(data: data, identifier: identifier)\n524 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:540:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n538 |       identifier: identifier\n539 |     )\n540 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n541 |     return await wrapped.retrieveData(identifier: identifier)\n542 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:558:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n556 |       identifier: identifier\n557 |     )\n558 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n559 |     return await wrapped.deleteData(identifier: identifier)\n560 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:160:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n158 |     encryptedDataIdentifier: String,\n159 |     keyIdentifier _: String,\n160 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n    |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n161 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n162 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:326:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n324 |   public func generateKey(\n325 |     length: Int,\n326 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n    |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n327 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n328 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:51:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 49 |                 return .failure(error)\n 50 |             }\n 51 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 52 |             return .failure(error)\n 53 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:75:26: error: missing argument for parameter 'source' in call\n 73 |         await logger.debug(\n 74 |             \"Encrypting data using algorithm: \\(algorithm.rawValue)\",\n 75 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n 76 |         )\n 77 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:83:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 81 |             // Actual implementation would use CommonCrypto or CryptoKit\n 82 |             return .success(data) // Placeholder response\n 83 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 84 |             return .failure(error)\n 85 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:107:26: error: missing argument for parameter 'source' in call\n105 |         await logger.debug(\n106 |             \"Decrypting data using algorithm: \\(algorithm.rawValue)\",\n107 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n108 |         )\n109 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:115:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n113 |             // Actual implementation would use CommonCrypto or CryptoKit\n114 |             return .success(data) // Placeholder response\n115 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n116 |             return .failure(error)\n117 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:134:26: error: missing argument for parameter 'source' in call\n132 |         await logger.debug(\n133 |             \"Hashing data using algorithm: \\(algorithm.rawValue)\",\n134 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n135 |         )\n136 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:142:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n140 |             // Actual implementation would use CommonCrypto or CryptoKit\n141 |             return .success(data) // Placeholder response\n142 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n143 |             return .failure(error)\n144 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:161:26: error: missing argument for parameter 'source' in call\n159 |         await logger.debug(\n160 |             \"Generating \\(keyType.rawValue) key of size: \\(keySize) bits\",\n161 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n162 |         )\n163 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:221:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 219 |     encryptedDataIdentifier: String,\n 220 |     keyIdentifier: String,\n 221 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n     |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 222 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 223 |     let context=CryptoLogContext(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:632:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 630 |   public func generateKey(\n 631 |     length: Int,\n 632 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n     |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 633 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 634 |     do {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:78: error: missing argument for parameter 'options' in call\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                              `- error: missing argument for parameter 'options' in call\n 146 | \n 147 |       // Store the encrypted data\n\nCryptoInterfaces.CryptoProviderProtocol.encrypt:2:6: note: 'encrypt(data:key:options:)' declared here\n1 | protocol CryptoProviderProtocol {\n2 | func encrypt(data: Data, key: Data, options: CoreSecurityTypes.EncryptionOptions?) async -\u003e Result\u003cData, any Error\u003e}\n  |      `- note: 'encrypt(data:key:options:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:64: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 146 | \n 147 |       // Store the encrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:75: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                           `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 146 | \n 147 |       // Store the encrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:87: error: missing argument for parameter 'options' in call\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                                       `- error: missing argument for parameter 'options' in call\n 287 | \n 288 |       // Store the decrypted data\n\nCryptoInterfaces.CryptoProviderProtocol.decrypt:2:6: note: 'decrypt(data:key:options:)' declared here\n1 | protocol CryptoProviderProtocol {\n2 | func decrypt(data: Data, key: Data, options: CoreSecurityTypes.EncryptionOptions?) async -\u003e Result\u003cData, any Error\u003e}\n  |      `- note: 'decrypt(data:key:options:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:64: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 287 | \n 288 |       // Store the decrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:84: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                                    `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 287 | \n 288 |       // Store the decrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:641:53: error: cannot convert value of type 'Result\u003cData, any Error\u003e' to expected argument type '[UInt8]'\n 639 | \n 640 |       // Store the key in secure storage\n 641 |       let storeResult=await secureStorage.storeData(keyData, withIdentifier: keyIdentifier)\n     |                                                     `- error: cannot convert value of type 'Result\u003cData, any Error\u003e' to expected argument type '[UInt8]'\n 642 | \n 643 |       guard case .success=storeResult else {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:638:19: warning: no calls to throwing functions occur within 'try' expression\n 636 | \n 637 |       // Generate random key data\n 638 |       let keyData=try await cryptoProvider.generateRandomData(length: length)\n     |                   `- warning: no calls to throwing functions occur within 'try' expression\n 639 | \n 640 |       // Store the key in secure storage\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoStorage.swift:417:31: error: cannot find 'getSecureStorage' in scope\n415 |     // Currently we just attempt to retrieve the data and check if it exists\n416 |     // This could be optimized in a real implementation to avoid loading the data\n417 |     let secureStore=try await getSecureStorage()\n    |                               `- error: cannot find 'getSecureStorage' in scope\n418 |     return secureStore.hasKey(identifier)\n419 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n266 |    - Returns: Result containing array of identifiers or error details\n267 |    */\n268 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n269 |     await logger.warning(\n270 |       \"List data identifiers operation not supported\",\n\nSecurityCoreInterfaces.SecureStorageProtocol.storeData:2:6: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func storeData(_ data: [UInt8], withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.retrieveData:2:6: note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func retrieveData(withIdentifier identifier: String) async -\u003e Result\u003c[UInt8], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.deleteData:2:6: note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func deleteData(withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.listDataIdentifiers:2:6: note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:158:61: error: type '_ErrorCodeProtocol' has no member 'notFound'\n156 |       )\n157 | \n158 |       if let storageError=error as? StorageCoreError, case .notFound=storageError {\n    |                                                             `- error: type '_ErrorCodeProtocol' has no member 'notFound'\n159 |         return .failure(.dataNotFound)\n160 |       }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:67:15: error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 65 | extension CoreSecurityTypes.DecryptionOptions {\n 66 |   /// Convert to CryptoOperationOptionsDTO for use with internal APIs\n 67 |   public func toCryptoOperationOptionsDTO() -\u003e CryptoOperationOptionsDTO {\n    |               `- error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 68 |     // Map the algorithm and mode\n 69 |     let cryptoMode: CryptoMode=switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:87:15: error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 85 | \n 86 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n 87 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n    |               `- error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 88 |   -\u003e SecurityConfigDTO {\n 89 |     var configOptions=SecurityConfigOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:109:15: error: invalid redeclaration of 'toInterfaceOptions()'\n107 | \n108 |   /// Convert to interface DecryptionOptions (used when adapting options)\n109 |   public func toInterfaceOptions() -\u003e CoreSecurityTypes.DecryptionOptions {\n    |               `- error: invalid redeclaration of 'toInterfaceOptions()'\n110 |     // This is a no-op since we're already using the correct type\n111 |     self\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:118:34: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n116 | \n117 | /// Extension to adapt between various key generation options types\n118 | extension SecurityCoreInterfaces.KeyGenerationOptions {\n    |                                  `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n119 |   /// Convert to KeyGenerationOptionsDTO for internal use\n120 |   public func toKeyGenerationOptionsDTO(keySize: Int) -\u003e KeyGenerationOptionsDTO {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:34: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n199 | \n200 | /// Extension to adapt between SecurityCoreInterfaces.HashingOptions and various format options\n201 | extension SecurityCoreInterfaces.HashingOptions {\n    |                                  `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n202 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n203 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:333:68: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n331 | \n332 |   /// Extract key generation options from the configuration\n333 |   public var extractedKeyGenerationOptions: SecurityCoreInterfaces.KeyGenerationOptions? {\n    |                                                                    `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n334 |     nil // Simplified until we have the proper members\n335 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:338:62: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n336 | \n337 |   /// Extract hashing options from the configuration\n338 |   public var extractedHashingOptions: SecurityCoreInterfaces.HashingOptions? {\n    |                                                              `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n339 |     nil // Simplified until we have the proper members\n340 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:21:23: error: cannot find type 'PaddingMode' in scope\n19 | \n20 |   /// Padding mode to use for block ciphers\n21 |   public let padding: PaddingMode?\n   |                       `- error: cannot find type 'PaddingMode' in scope\n22 | \n23 |   /**\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:34:14: error: cannot find type 'PaddingMode' in scope\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n34 |     padding: PaddingMode? = .pkcs7\n   |              `- error: cannot find type 'PaddingMode' in scope\n35 |   ) {\n36 |     self.algorithm=algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/UnifiedTypes/UnifiedTypes.swift:129:54: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n127 | \n128 |     /// Convert from SecurityCoreInterfaces.DecryptionOptions if available\n129 |     public init(from options: SecurityCoreInterfaces.DecryptionOptions?) {\n    |                                                      `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n130 |       // Default values if options is nil\n131 |       if let options {\nTarget //packages/UmbraImplementations/Sources/SecurityCryptoServices/ActorTypes:CryptoActorImplementations failed to build\nINFO: Elapsed time: 1.087s, Critical Path: 0.97s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories",
    "success": false,
    "start_time": "2025-04-08T00:44:36.883179+01:00",
    "end_time": "2025-04-08T00:44:38.587168+01:00",
    "duration": "1.703985916s",
    "output": "INFO: Invocation ID: fb8367b8-4b7d-4e32-9ff6-f9f7c9aa74c2\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:227:18: error: cannot find type 'DeploymentEnvironment' in scope\n225 |     secureStorage: SecureStorageProtocol?=nil,\n226 |     logger: LoggingProtocol?=nil,\n227 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:344:14: error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n342 |   public static func createProviderRegistry(\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n    |              `- error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n346 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:407:22: error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n405 |    - Returns: A mock CryptoServiceProtocol implementation\n406 |    */\n407 |   public static func createMock(\n    |                      `- error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n408 |     configuration: MockCryptoServiceImpl.Configuration = .init(),\n409 |     logger: LoggingProtocol? = nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:14:20: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n 12 |  as a fallback implementation for various security operations.\n 13 |  */\n 14 | public final class BasicSecurityProvider: SecurityProviderProtocol, AsyncServiceInitializable {\n    |                    |- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n    |                    `- note: add stubs for conformance\n 15 |   // MARK: - Properties (Placeholder - Dependencies likely needed)\n 16 | \n    :\n178 | \n179 |   /// Creates a standard security configuration DTO for this basic provider.\n180 |   public func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions? = nil) -\u003e CoreSecurityTypes.SecurityConfigDTO {\n    |               `- note: candidate has non-matching type '(SecurityConfigOptions?) -\u003e SecurityConfigDTO'\n181 |     print(\"BasicSecurityProvider createSecureConfig called (stub)\")\n182 |     return CoreSecurityTypes.SecurityConfigDTO(\n\nSecurityCoreInterfaces.SecurityProviderProtocol.createSecureConfig:2:6: note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n1 | protocol SecurityProviderProtocol {\n2 | func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions) async -\u003e CoreSecurityTypes.SecurityConfigDTO}\n  |      `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:479:15: error: invalid redeclaration of 'storeData(data:identifier:)'\n477 |   // They expect `Data` instead of `[UInt8]` for storage operations.\n478 | \n479 |   public func storeData(\n    |               `- error: invalid redeclaration of 'storeData(data:identifier:)'\n480 |     data: Data, // Protocol expects Data\n481 |     identifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:506:15: error: invalid redeclaration of 'retrieveData(identifier:)'\n504 |   }\n505 | \n506 |   public func retrieveData(\n    |               `- error: invalid redeclaration of 'retrieveData(identifier:)'\n507 |     identifier: String\n508 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e { // Protocol expects Data\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:530:15: error: invalid redeclaration of 'deleteData(identifier:)'\n528 |   }\n529 | \n530 |   public func deleteData(\n    |               `- error: invalid redeclaration of 'deleteData(identifier:)'\n531 |     identifier: String\n532 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:550:15: error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n548 | \n549 |   // Ensure generateHash signature matches protocol\n550 |   public func generateHash(\n    |               `- error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n551 |     dataIdentifier: String,\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:559:15: error: invalid redeclaration of 'importData(_:customIdentifier:)'\n557 |   // Keep the existing importData signature expecting [UInt8]\n558 |   // but also add the one expecting Data to satisfy the protocol.\n559 |   public func importData(\n    |               `- error: invalid redeclaration of 'importData(_:customIdentifier:)'\n560 |     _ data: Data, // Protocol expects Data\n561 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:160:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n158 |     encryptedDataIdentifier: String,\n159 |     keyIdentifier _: String,\n160 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n    |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n161 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n162 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:326:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n324 |   public func generateKey(\n325 |     length: Int,\n326 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n    |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n327 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n328 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:221:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 219 |     encryptedDataIdentifier: String,\n 220 |     keyIdentifier: String,\n 221 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n     |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 222 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 223 |     let context=CryptoLogContext(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:632:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 630 |   public func generateKey(\n 631 |     length: Int,\n 632 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n     |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 633 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 634 |     do {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n266 |    - Returns: Result containing array of identifiers or error details\n267 |    */\n268 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n269 |     await logger.warning(\n270 |       \"List data identifiers operation not supported\",\n\nSecurityCoreInterfaces.SecureStorageProtocol.storeData:2:6: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func storeData(_ data: [UInt8], withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.retrieveData:2:6: note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func retrieveData(withIdentifier identifier: String) async -\u003e Result\u003c[UInt8], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.deleteData:2:6: note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func deleteData(withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.listDataIdentifiers:2:6: note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:67:15: error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 65 | extension CoreSecurityTypes.DecryptionOptions {\n 66 |   /// Convert to CryptoOperationOptionsDTO for use with internal APIs\n 67 |   public func toCryptoOperationOptionsDTO() -\u003e CryptoOperationOptionsDTO {\n    |               `- error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 68 |     // Map the algorithm and mode\n 69 |     let cryptoMode: CryptoMode=switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:87:15: error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 85 | \n 86 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n 87 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n    |               `- error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 88 |   -\u003e SecurityConfigDTO {\n 89 |     var configOptions=SecurityConfigOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:109:15: error: invalid redeclaration of 'toInterfaceOptions()'\n107 | \n108 |   /// Convert to interface DecryptionOptions (used when adapting options)\n109 |   public func toInterfaceOptions() -\u003e CoreSecurityTypes.DecryptionOptions {\n    |               `- error: invalid redeclaration of 'toInterfaceOptions()'\n110 |     // This is a no-op since we're already using the correct type\n111 |     self\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:118:34: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n116 | \n117 | /// Extension to adapt between various key generation options types\n118 | extension SecurityCoreInterfaces.KeyGenerationOptions {\n    |                                  `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n119 |   /// Convert to KeyGenerationOptionsDTO for internal use\n120 |   public func toKeyGenerationOptionsDTO(keySize: Int) -\u003e KeyGenerationOptionsDTO {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:34: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n199 | \n200 | /// Extension to adapt between SecurityCoreInterfaces.HashingOptions and various format options\n201 | extension SecurityCoreInterfaces.HashingOptions {\n    |                                  `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n202 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n203 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:333:68: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n331 | \n332 |   /// Extract key generation options from the configuration\n333 |   public var extractedKeyGenerationOptions: SecurityCoreInterfaces.KeyGenerationOptions? {\n    |                                                                    `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n334 |     nil // Simplified until we have the proper members\n335 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:338:62: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n336 | \n337 |   /// Extract hashing options from the configuration\n338 |   public var extractedHashingOptions: SecurityCoreInterfaces.HashingOptions? {\n    |                                                              `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n339 |     nil // Simplified until we have the proper members\n340 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:21:23: error: cannot find type 'PaddingMode' in scope\n19 | \n20 |   /// Padding mode to use for block ciphers\n21 |   public let padding: PaddingMode?\n   |                       `- error: cannot find type 'PaddingMode' in scope\n22 | \n23 |   /**\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:34:14: error: cannot find type 'PaddingMode' in scope\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n34 |     padding: PaddingMode? = .pkcs7\n   |              `- error: cannot find type 'PaddingMode' in scope\n35 |   ) {\n36 |     self.algorithm=algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/UnifiedTypes/UnifiedTypes.swift:129:54: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n127 | \n128 |     /// Convert from SecurityCoreInterfaces.DecryptionOptions if available\n129 |     public init(from options: SecurityCoreInterfaces.DecryptionOptions?) {\n    |                                                      `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n130 |       // Default values if options is nil\n131 |       if let options {\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:117:79: error: value of type 'HashingOptions' has no member 'salt'\n115 |     guard let options else { return nil }\n116 | \n117 |     return LocalHashingOptions(algorithm: options.algorithm, useSalt: options.salt != nil)\n    |                                                                               `- error: value of type 'HashingOptions' has no member 'salt'\n118 |   }\n119 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:130:97: error: extra argument 'salt' in call\n128 |     guard let options else { return nil }\n129 | \n130 |     return CoreSecurityTypes.HashingOptions(algorithm: options.algorithm, salt: options.useSalt ? [0x01, 0x02, 0x03, 0x04] : nil)\n    |                                                                                                 `- error: extra argument 'salt' in call\n131 |   }\n132 | }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:24: error: value of type 'KeyGenerationOptions' has no member 'options'\n151 |       useSecureEnclave: options.useSecureEnclave,\n152 |       isExtractable: options.isExtractable,\n153 |       options: options.options\n    |                        `- error: value of type 'KeyGenerationOptions' has no member 'options'\n154 |     )\n155 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:172:24: error: extra argument 'options' in call\n170 |       useSecureEnclave: options.useSecureEnclave,\n171 |       isExtractable: options.isExtractable,\n172 |       options: options.options\n    |                        `- error: extra argument 'options' in call\n173 |     )\n174 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:31: error: missing argument for parameter 'keySizeInBits' in call\n167 | \n168 |     return CoreSecurityTypes.KeyGenerationOptions(\n169 |       keyType: options.keyType,\n    |                               `- error: missing argument for parameter 'keySizeInBits' in call\n170 |       useSecureEnclave: options.useSecureEnclave,\n171 |       isExtractable: options.isExtractable,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:147:10: note: 'init(keyType:keySizeInBits:isExtractable:useSecureEnclave:)' declared here\n145 |   public let useSecureEnclave: Bool // Hint to use hardware security module if available\n146 | \n147 |   public init(\n    |          `- note: 'init(keyType:keySizeInBits:isExtractable:useSecureEnclave:)' declared here\n148 |     keyType: KeyType,\n149 |     keySizeInBits: Int,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:227:18: error: cannot find type 'DeploymentEnvironment' in scope\n225 |     secureStorage: SecureStorageProtocol?=nil,\n226 |     logger: LoggingProtocol?=nil,\n227 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:344:14: error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n342 |   public static func createProviderRegistry(\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n    |              `- error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n346 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:407:22: error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n405 |    - Returns: A mock CryptoServiceProtocol implementation\n406 |    */\n407 |   public static func createMock(\n    |                      `- error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n408 |     configuration: MockCryptoServiceImpl.Configuration = .init(),\n409 |     logger: LoggingProtocol? = nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:100:48: error: type of expression is ambiguous without a type annotation\n 98 |     logger: LoggingProtocol? = nil\n 99 |   ) async -\u003e CryptoServiceProtocol {\n100 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n101 | \n102 |     return await DefaultCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:103:39: error: 'await' cannot appear to the right of a non-assignment operator\n101 | \n102 |     return await DefaultCryptoServiceImpl(\n103 |       secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                       `- error: 'await' cannot appear to the right of a non-assignment operator\n104 |       logger: actualLogger,\n105 |       options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:105:16: error: extra argument 'options' in call\n103 |       secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n104 |       logger: actualLogger,\n105 |       options: FactoryCryptoOptions()\n    |                `- error: extra argument 'options' in call\n106 |     )\n107 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:121:48: error: type of expression is ambiguous without a type annotation\n119 |     logger: LoggingProtocol?=nil\n120 |   ) async -\u003e CryptoServiceProtocol {\n121 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n122 | \n123 |     return await LoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:125:41: error: 'await' cannot appear to the right of a non-assignment operator\n123 |     return await LoggingCryptoServiceImpl(\n124 |       wrapped: DefaultCryptoServiceImpl(\n125 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n126 |         logger: actualLogger,\n127 |         options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:127:18: error: extra argument 'options' in call\n125 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n126 |         logger: actualLogger,\n127 |         options: FactoryCryptoOptions()\n    |                  `- error: extra argument 'options' in call\n128 |       ),\n129 |       logger: actualLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:145:48: error: type of expression is ambiguous without a type annotation\n143 |     logger: LoggingProtocol?=nil\n144 |   ) async -\u003e CryptoServiceProtocol {\n145 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n146 | \n147 |     return await EnhancedLoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:149:41: error: 'await' cannot appear to the right of a non-assignment operator\n147 |     return await EnhancedLoggingCryptoServiceImpl(\n148 |       wrapped: DefaultCryptoServiceImpl(\n149 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:152:8: error: missing argument for parameter 'secureStorage' in call\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n152 |       ),\n    |        `- error: missing argument for parameter 'secureStorage' in call\n153 |       logger: actualLogger\n154 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:31:10: note: 'init(wrapped:secureStorage:logger:)' declared here\n 29 |      - logger: The privacy-aware logger to use for logging.\n 30 |    */\n 31 |   public init(\n    |          `- note: 'init(wrapped:secureStorage:logger:)' declared here\n 32 |     wrapped: CryptoServiceProtocol,\n 33 |     secureStorage: SecureStorageProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:153:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n151 |         options: FactoryCryptoOptions()\n152 |       ),\n153 |       logger: actualLogger\n    |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n154 |     )\n155 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:151:18: error: extra argument 'options' in call\n149 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n    |                  `- error: extra argument 'options' in call\n152 |       ),\n153 |       logger: actualLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:169:48: error: type of expression is ambiguous without a type annotation\n167 |     logger: LoggingProtocol?=nil\n168 |   ) async -\u003e CryptoServiceProtocol {\n169 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n170 | \n171 |     // Create secure service with enhanced parameters\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:174:41: error: 'await' cannot appear to the right of a non-assignment operator\n172 |     let service = await EnhancedSecureCryptoServiceImpl(\n173 |       wrapped: DefaultCryptoServiceImpl(\n174 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n175 |         logger: actualLogger,\n176 |         options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:181:16: error: extra argument 'storage' in call\n179 |         )\n180 |       ),\n181 |       storage: await createSecureStorage(),\n    |                `- error: extra argument 'storage' in call\n182 |       logger: actualLogger\n183 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:181:43: error: missing argument for parameter 'rateLimiter' in call\n179 |         )\n180 |       ),\n181 |       storage: await createSecureStorage(),\n    |                                           `- error: missing argument for parameter 'rateLimiter' in call\n182 |       logger: actualLogger\n183 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:44:10: note: 'init(wrapped:logger:rateLimiter:)' declared here\n 42 |      - rateLimiter: Rate limiter for security operations\n 43 |    */\n 44 |   public init(\n    |          `- note: 'init(wrapped:logger:rateLimiter:)' declared here\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:182:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n180 |       ),\n181 |       storage: await createSecureStorage(),\n182 |       logger: actualLogger\n    |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n183 |     )\n184 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:176:18: error: extra argument 'options' in call\n174 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n175 |         logger: actualLogger,\n176 |         options: FactoryCryptoOptions(\n    |                  `- error: extra argument 'options' in call\n177 |           defaultIterations: 10000, // Higher iteration count for PBKDF2\n178 |           enforceStrongKeys: true\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:205:48: error: type of expression is ambiguous without a type annotation\n203 |     secureStorage: SecureStorageProtocol? = nil\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n207 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:206:48: error: 'await' cannot appear to the right of a non-assignment operator\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n207 |     \n208 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:206:54: error: 'async' call in an autoclosure that does not support concurrency\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n207 |     \n208 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:208:12: warning: no 'async' operations occur within 'await' expression\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n207 |     \n208 |     return await MockCryptoServiceImpl(\n    |            `- warning: no 'async' operations occur within 'await' expression\n209 |       configuration: configuration,\n210 |       logger: actualLogger,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:229:48: error: type of expression is ambiguous without a type annotation\n227 |     environment: DeploymentEnvironment = .production\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n230 | \n231 |     switch environment {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:234:43: error: 'await' cannot appear to the right of a non-assignment operator\n232 |       case .development:\n233 |         return await DefaultCryptoServiceImpl(\n234 |           secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                           `- error: 'await' cannot appear to the right of a non-assignment operator\n235 |           logger: actualLogger,\n236 |           options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:236:20: error: extra argument 'options' in call\n234 |           secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n235 |           logger: actualLogger,\n236 |           options: FactoryCryptoOptions(\n    |                    `- error: extra argument 'options' in call\n237 |             defaultIterations: 1000, // Lower for development speed\n238 |             enforceStrongKeys: false // More lenient for development\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:244:26: error: cannot find 'MockCryptoConfiguration' in scope\n242 |       case .testing:\n243 |         return await MockCryptoServiceImpl(\n244 |           configuration: MockCryptoConfiguration(\n    |                          `- error: cannot find 'MockCryptoConfiguration' in scope\n245 |             encryptionSucceeds: true,\n246 |             decryptionSucceeds: true,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:260:45: error: 'await' cannot appear to the right of a non-assignment operator\n258 |         return await EnhancedLoggingCryptoServiceImpl(\n259 |           wrapped: DefaultCryptoServiceImpl(\n260 |             secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                             `- error: 'await' cannot appear to the right of a non-assignment operator\n261 |             logger: actualLogger,\n262 |             options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:266:12: error: missing argument for parameter 'secureStorage' in call\n264 |               enforceStrongKeys: true\n265 |             )\n266 |           ),\n    |            `- error: missing argument for parameter 'secureStorage' in call\n267 |           logger: actualLogger\n268 |         )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:31:10: note: 'init(wrapped:secureStorage:logger:)' declared here\n 29 |      - logger: The privacy-aware logger to use for logging.\n 30 |    */\n 31 |   public init(\n    |          `- note: 'init(wrapped:secureStorage:logger:)' declared here\n 32 |     wrapped: CryptoServiceProtocol,\n 33 |     secureStorage: SecureStorageProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:267:19: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n265 |             )\n266 |           ),\n267 |           logger: actualLogger\n    |                   `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n268 |         )\n269 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:262:22: error: extra argument 'options' in call\n260 |             secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n261 |             logger: actualLogger,\n262 |             options: FactoryCryptoOptions(\n    |                      `- error: extra argument 'options' in call\n263 |               defaultIterations: 5000, // Medium strength for staging\n264 |               enforceStrongKeys: true\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:295:48: error: type of expression is ambiguous without a type annotation\n293 |     logger: LoggingProtocol? = nil\n294 |   ) async -\u003e CryptoServiceProtocol {\n295 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n296 |     \n297 |     // Create the provider\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:322:48: error: type of expression is ambiguous without a type annotation\n320 |     logger: LoggingProtocol? = nil\n321 |   ) async -\u003e CryptoServiceProtocol {\n322 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n323 | \n324 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:325:48: error: 'await' cannot appear to the right of a non-assignment operator\n323 | \n324 |     // Use the provided secure storage or create a default one\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:327:18: error: cannot find 'DefaultCryptoServiceWithProviderImpl' in scope\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n    |                  `- error: cannot find 'DefaultCryptoServiceWithProviderImpl' in scope\n328 |       provider: provider,\n329 |       secureStorage: actualSecureStorage,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:325:54: error: 'async' call in an autoclosure that does not support concurrency\n323 | \n324 |     // Use the provided secure storage or create a default one\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:345:31: error: type of expression is ambiguous without a type annotation\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                               `- error: type of expression is ambiguous without a type annotation\n346 |     \n347 |     return await DefaultSecurityProviderRegistry(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:368:31: error: type of expression is ambiguous without a type annotation\n366 |     logger: LoggingProtocol? = nil\n367 |   ) async -\u003e SecureStorageProtocol {\n368 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                               `- error: type of expression is ambiguous without a type annotation\n369 |     \n370 |     // Create default provider if none provided\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:376:61: error: cannot infer contextual base in reference to member 'default'\n374 |     } else {\n375 |       let registry = await createProviderRegistry(logger: actualLogger)\n376 |       actualProvider = await registry.createProvider(type: .default)\n    |                                                             `- error: cannot infer contextual base in reference to member 'default'\n377 |     }\n378 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:379:18: error: cannot find 'DefaultSecureStorageImpl' in scope\n377 |     }\n378 |     \n379 |     return await DefaultSecureStorageImpl(\n    |                  `- error: cannot find 'DefaultSecureStorageImpl' in scope\n380 |       provider: actualProvider,\n381 |       storageURL: storageURL,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:412:48: error: type of expression is ambiguous without a type annotation\n410 |     secureStorage: SecureStorageProtocol? = nil\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n414 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:413:48: error: 'await' cannot appear to the right of a non-assignment operator\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n414 |     \n415 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:413:54: error: 'async' call in an autoclosure that does not support concurrency\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n414 |     \n415 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:415:12: warning: no 'async' operations occur within 'await' expression\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n414 |     \n415 |     return await MockCryptoServiceImpl(\n    |            `- warning: no 'async' operations occur within 'await' expression\n416 |       configuration: configuration,\n417 |       logger: actualLogger,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:14:20: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n 12 |  as a fallback implementation for various security operations.\n 13 |  */\n 14 | public final class BasicSecurityProvider: SecurityProviderProtocol, AsyncServiceInitializable {\n    |                    |- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n    |                    `- note: add stubs for conformance\n 15 |   // MARK: - Properties (Placeholder - Dependencies likely needed)\n 16 | \n    :\n178 | \n179 |   /// Creates a standard security configuration DTO for this basic provider.\n180 |   public func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions? = nil) -\u003e CoreSecurityTypes.SecurityConfigDTO {\n    |               `- note: candidate has non-matching type '(SecurityConfigOptions?) -\u003e SecurityConfigDTO'\n181 |     print(\"BasicSecurityProvider createSecureConfig called (stub)\")\n182 |     return CoreSecurityTypes.SecurityConfigDTO(\n\nSecurityCoreInterfaces.SecurityProviderProtocol.createSecureConfig:2:6: note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n1 | protocol SecurityProviderProtocol {\n2 | func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions) async -\u003e CoreSecurityTypes.SecurityConfigDTO}\n  |      `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:479:15: error: invalid redeclaration of 'storeData(data:identifier:)'\n477 |   // They expect `Data` instead of `[UInt8]` for storage operations.\n478 | \n479 |   public func storeData(\n    |               `- error: invalid redeclaration of 'storeData(data:identifier:)'\n480 |     data: Data, // Protocol expects Data\n481 |     identifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:506:15: error: invalid redeclaration of 'retrieveData(identifier:)'\n504 |   }\n505 | \n506 |   public func retrieveData(\n    |               `- error: invalid redeclaration of 'retrieveData(identifier:)'\n507 |     identifier: String\n508 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e { // Protocol expects Data\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:530:15: error: invalid redeclaration of 'deleteData(identifier:)'\n528 |   }\n529 | \n530 |   public func deleteData(\n    |               `- error: invalid redeclaration of 'deleteData(identifier:)'\n531 |     identifier: String\n532 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:550:15: error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n548 | \n549 |   // Ensure generateHash signature matches protocol\n550 |   public func generateHash(\n    |               `- error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n551 |     dataIdentifier: String,\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:559:15: error: invalid redeclaration of 'importData(_:customIdentifier:)'\n557 |   // Keep the existing importData signature expecting [UInt8]\n558 |   // but also add the one expecting Data to satisfy the protocol.\n559 |   public func importData(\n    |               `- error: invalid redeclaration of 'importData(_:customIdentifier:)'\n560 |     _ data: Data, // Protocol expects Data\n561 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:340:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n338 |     customIdentifier: String\n339 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n340 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n341 |     await logger?.debug(\"Importing raw data with custom identifier: \\(customIdentifier)\", context: context)\n342 |     // Store the raw data using the secure storage protocol\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:358:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n356 |     customIdentifier: String?\n357 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n358 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n359 |     await logger?.debug(\"Importing [UInt8] data...\", context: context)\n360 |     // Convert [UInt8] to Data for storage\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:384:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n382 |     identifier: String\n383 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n384 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Export\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n385 |     await logger?.debug(\"Exporting data with identifier: \\(identifier)\", context: context)\n386 |     let result = await secureStorage.retrieveData(withIdentifier: identifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:411:21: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n409 |     } else {\n410 |       // Fallback or handle error appropriately\n411 |       let context = LogContextDTO(subsystem: \"CryptoService\", category: \"Randomness\")\n    |                     `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n412 |       await logger?.error(\"Failed to generate secure random bytes, status: \\(status)\", context: context)\n413 |       // Returning non-secure bytes as a fallback - consider throwing an error instead\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:425:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n423 |     options _: CoreSecurityTypes.HashingOptions? = nil\n424 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n425 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Hashing\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n426 |     await logger?.debug(\n427 |       \"Verifying hash for data \\(dataIdentifier) against hash \\(hashIdentifier)\", context: context\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:433:34: error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n431 |     guard case .success(let originalData) = dataResult else {\n432 |       await logger?.error(\"Failed to retrieve original data for hash verification\", context: context)\n433 |       return .failure(dataResult.error ?? .dataNotFound(identifier: dataIdentifier))\n    |                                  `- error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n434 |     }\n435 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:433:44: error: enum case 'dataNotFound' has no associated values\n431 |     guard case .success(let originalData) = dataResult else {\n432 |       await logger?.error(\"Failed to retrieve original data for hash verification\", context: context)\n433 |       return .failure(dataResult.error ?? .dataNotFound(identifier: dataIdentifier))\n    |                                            `- error: enum case 'dataNotFound' has no associated values\n434 |     }\n435 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:440:34: error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n438 |     guard case .success(let storedHash) = hashResult else {\n439 |       await logger?.error(\"Failed to retrieve stored hash for verification\", context: context)\n440 |       return .failure(hashResult.error ?? .dataNotFound(identifier: hashIdentifier))\n    |                                  `- error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n441 |     }\n442 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:440:44: error: enum case 'dataNotFound' has no associated values\n438 |     guard case .success(let storedHash) = hashResult else {\n439 |       await logger?.error(\"Failed to retrieve stored hash for verification\", context: context)\n440 |       return .failure(hashResult.error ?? .dataNotFound(identifier: hashIdentifier))\n    |                                            `- error: enum case 'dataNotFound' has no associated values\n441 |     }\n442 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:444:25: error: cannot find 'sha256' in scope\n442 | \n443 |     // 3. Generate hash of original data (using a basic SHA256 for this stub)\n444 |     let generatedHash = sha256(data: originalData)\n    |                         `- error: cannot find 'sha256' in scope\n445 | \n446 |     // 4. Compare hashes\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:457:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n455 |     options _: CoreSecurityTypes.KeyGenerationOptions? = nil\n456 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n457 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"KeyManagement\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n458 |     await logger?.debug(\"Generating key of length \\(length)...\", context: context)\n459 |     let keyData = generateRandomBytes(count: length)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:554:66: error: cannot find 'options' in scope\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n553 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n554 |       return await hash(dataIdentifier: dataIdentifier, options: options)\n    |                                                                  `- error: cannot find 'options' in scope\n555 |   }\n556 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:563:36: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n561 |     customIdentifier: String\n562 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n563 |       let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n564 |       await logger?.debug(\"Importing Data with custom identifier: \\(customIdentifier)\", context: context)\n565 |       // Store the raw data using the secure storage protocol, converting Data to [UInt8]\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:459:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n457 |       identifier: customIdentifier\n458 |     )\n459 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n460 |     return await wrapped.importData(data, customIdentifier: customIdentifier)\n461 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:480:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n478 |       identifier: customIdentifier\n479 |     )\n480 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n481 |     return await wrapped.importData(data, customIdentifier: customIdentifier)\n482 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:501:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n499 |       identifier: dataIdentifier\n500 |     )\n501 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n502 |     return await wrapped.generateHash(dataIdentifier: dataIdentifier, options: options)\n503 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:522:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n520 |       identifier: identifier\n521 |     )\n522 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n523 |     return await wrapped.storeData(data: data, identifier: identifier)\n524 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:540:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n538 |       identifier: identifier\n539 |     )\n540 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n541 |     return await wrapped.retrieveData(identifier: identifier)\n542 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:558:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n556 |       identifier: identifier\n557 |     )\n558 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n559 |     return await wrapped.deleteData(identifier: identifier)\n560 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:160:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n158 |     encryptedDataIdentifier: String,\n159 |     keyIdentifier _: String,\n160 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n    |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n161 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n162 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:326:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n324 |   public func generateKey(\n325 |     length: Int,\n326 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n    |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n327 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n328 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:51:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 49 |                 return .failure(error)\n 50 |             }\n 51 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 52 |             return .failure(error)\n 53 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:75:26: error: missing argument for parameter 'source' in call\n 73 |         await logger.debug(\n 74 |             \"Encrypting data using algorithm: \\(algorithm.rawValue)\",\n 75 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n 76 |         )\n 77 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:83:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 81 |             // Actual implementation would use CommonCrypto or CryptoKit\n 82 |             return .success(data) // Placeholder response\n 83 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 84 |             return .failure(error)\n 85 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:107:26: error: missing argument for parameter 'source' in call\n105 |         await logger.debug(\n106 |             \"Decrypting data using algorithm: \\(algorithm.rawValue)\",\n107 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n108 |         )\n109 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:115:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n113 |             // Actual implementation would use CommonCrypto or CryptoKit\n114 |             return .success(data) // Placeholder response\n115 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n116 |             return .failure(error)\n117 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:134:26: error: missing argument for parameter 'source' in call\n132 |         await logger.debug(\n133 |             \"Hashing data using algorithm: \\(algorithm.rawValue)\",\n134 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n135 |         )\n136 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:142:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n140 |             // Actual implementation would use CommonCrypto or CryptoKit\n141 |             return .success(data) // Placeholder response\n142 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n143 |             return .failure(error)\n144 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:161:26: error: missing argument for parameter 'source' in call\n159 |         await logger.debug(\n160 |             \"Generating \\(keyType.rawValue) key of size: \\(keySize) bits\",\n161 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n162 |         )\n163 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:221:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 219 |     encryptedDataIdentifier: String,\n 220 |     keyIdentifier: String,\n 221 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n     |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 222 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 223 |     let context=CryptoLogContext(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:632:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 630 |   public func generateKey(\n 631 |     length: Int,\n 632 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n     |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 633 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 634 |     do {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:78: error: missing argument for parameter 'options' in call\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                              `- error: missing argument for parameter 'options' in call\n 146 | \n 147 |       // Store the encrypted data\n\nCryptoInterfaces.CryptoProviderProtocol.encrypt:2:6: note: 'encrypt(data:key:options:)' declared here\n1 | protocol CryptoProviderProtocol {\n2 | func encrypt(data: Data, key: Data, options: CoreSecurityTypes.EncryptionOptions?) async -\u003e Result\u003cData, any Error\u003e}\n  |      `- note: 'encrypt(data:key:options:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:64: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 146 | \n 147 |       // Store the encrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:75: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                           `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 146 | \n 147 |       // Store the encrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:87: error: missing argument for parameter 'options' in call\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                                       `- error: missing argument for parameter 'options' in call\n 287 | \n 288 |       // Store the decrypted data\n\nCryptoInterfaces.CryptoProviderProtocol.decrypt:2:6: note: 'decrypt(data:key:options:)' declared here\n1 | protocol CryptoProviderProtocol {\n2 | func decrypt(data: Data, key: Data, options: CoreSecurityTypes.EncryptionOptions?) async -\u003e Result\u003cData, any Error\u003e}\n  |      `- note: 'decrypt(data:key:options:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:64: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 287 | \n 288 |       // Store the decrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:84: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                                    `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 287 | \n 288 |       // Store the decrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:641:53: error: cannot convert value of type 'Result\u003cData, any Error\u003e' to expected argument type '[UInt8]'\n 639 | \n 640 |       // Store the key in secure storage\n 641 |       let storeResult=await secureStorage.storeData(keyData, withIdentifier: keyIdentifier)\n     |                                                     `- error: cannot convert value of type 'Result\u003cData, any Error\u003e' to expected argument type '[UInt8]'\n 642 | \n 643 |       guard case .success=storeResult else {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:638:19: warning: no calls to throwing functions occur within 'try' expression\n 636 | \n 637 |       // Generate random key data\n 638 |       let keyData=try await cryptoProvider.generateRandomData(length: length)\n     |                   `- warning: no calls to throwing functions occur within 'try' expression\n 639 | \n 640 |       // Store the key in secure storage\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoStorage.swift:417:31: error: cannot find 'getSecureStorage' in scope\n415 |     // Currently we just attempt to retrieve the data and check if it exists\n416 |     // This could be optimized in a real implementation to avoid loading the data\n417 |     let secureStore=try await getSecureStorage()\n    |                               `- error: cannot find 'getSecureStorage' in scope\n418 |     return secureStore.hasKey(identifier)\n419 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n266 |    - Returns: Result containing array of identifiers or error details\n267 |    */\n268 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n269 |     await logger.warning(\n270 |       \"List data identifiers operation not supported\",\n\nSecurityCoreInterfaces.SecureStorageProtocol.storeData:2:6: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func storeData(_ data: [UInt8], withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.retrieveData:2:6: note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func retrieveData(withIdentifier identifier: String) async -\u003e Result\u003c[UInt8], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.deleteData:2:6: note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func deleteData(withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.listDataIdentifiers:2:6: note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:158:61: error: type '_ErrorCodeProtocol' has no member 'notFound'\n156 |       )\n157 | \n158 |       if let storageError=error as? StorageCoreError, case .notFound=storageError {\n    |                                                             `- error: type '_ErrorCodeProtocol' has no member 'notFound'\n159 |         return .failure(.dataNotFound)\n160 |       }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:67:15: error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 65 | extension CoreSecurityTypes.DecryptionOptions {\n 66 |   /// Convert to CryptoOperationOptionsDTO for use with internal APIs\n 67 |   public func toCryptoOperationOptionsDTO() -\u003e CryptoOperationOptionsDTO {\n    |               `- error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 68 |     // Map the algorithm and mode\n 69 |     let cryptoMode: CryptoMode=switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:87:15: error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 85 | \n 86 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n 87 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n    |               `- error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 88 |   -\u003e SecurityConfigDTO {\n 89 |     var configOptions=SecurityConfigOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:109:15: error: invalid redeclaration of 'toInterfaceOptions()'\n107 | \n108 |   /// Convert to interface DecryptionOptions (used when adapting options)\n109 |   public func toInterfaceOptions() -\u003e CoreSecurityTypes.DecryptionOptions {\n    |               `- error: invalid redeclaration of 'toInterfaceOptions()'\n110 |     // This is a no-op since we're already using the correct type\n111 |     self\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:118:34: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n116 | \n117 | /// Extension to adapt between various key generation options types\n118 | extension SecurityCoreInterfaces.KeyGenerationOptions {\n    |                                  `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n119 |   /// Convert to KeyGenerationOptionsDTO for internal use\n120 |   public func toKeyGenerationOptionsDTO(keySize: Int) -\u003e KeyGenerationOptionsDTO {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:34: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n199 | \n200 | /// Extension to adapt between SecurityCoreInterfaces.HashingOptions and various format options\n201 | extension SecurityCoreInterfaces.HashingOptions {\n    |                                  `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n202 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n203 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:333:68: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n331 | \n332 |   /// Extract key generation options from the configuration\n333 |   public var extractedKeyGenerationOptions: SecurityCoreInterfaces.KeyGenerationOptions? {\n    |                                                                    `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n334 |     nil // Simplified until we have the proper members\n335 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:338:62: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n336 | \n337 |   /// Extract hashing options from the configuration\n338 |   public var extractedHashingOptions: SecurityCoreInterfaces.HashingOptions? {\n    |                                                              `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n339 |     nil // Simplified until we have the proper members\n340 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:21:23: error: cannot find type 'PaddingMode' in scope\n19 | \n20 |   /// Padding mode to use for block ciphers\n21 |   public let padding: PaddingMode?\n   |                       `- error: cannot find type 'PaddingMode' in scope\n22 | \n23 |   /**\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:34:14: error: cannot find type 'PaddingMode' in scope\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n34 |     padding: PaddingMode? = .pkcs7\n   |              `- error: cannot find type 'PaddingMode' in scope\n35 |   ) {\n36 |     self.algorithm=algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/UnifiedTypes/UnifiedTypes.swift:129:54: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n127 | \n128 |     /// Convert from SecurityCoreInterfaces.DecryptionOptions if available\n129 |     public init(from options: SecurityCoreInterfaces.DecryptionOptions?) {\n    |                                                      `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n130 |       // Default values if options is nil\n131 |       if let options {\nTarget //packages/UmbraImplementations/Sources/SecurityCryptoServices/ProviderFactories:ProviderFactories failed to build\nINFO: Elapsed time: 1.028s, Critical Path: 0.95s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation",
    "success": false,
    "start_time": "2025-04-08T00:44:38.587184+01:00",
    "end_time": "2025-04-08T00:44:40.337278+01:00",
    "duration": "1.750090667s",
    "output": "INFO: Invocation ID: de5d1bcc-2771-46b2-a3ec-bdcf94ddaa43\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoServices:CryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main \u0026\u0026 \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/.windsurf/extensions/ms-python.debugpy-2025.6.0-darwin-arm64/bundled/scripts/noConfigScripts:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoServices/CryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:227:18: error: cannot find type 'DeploymentEnvironment' in scope\n225 |     secureStorage: SecureStorageProtocol?=nil,\n226 |     logger: LoggingProtocol?=nil,\n227 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:344:14: error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n342 |   public static func createProviderRegistry(\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n    |              `- error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n346 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:407:22: error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n405 |    - Returns: A mock CryptoServiceProtocol implementation\n406 |    */\n407 |   public static func createMock(\n    |                      `- error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n408 |     configuration: MockCryptoServiceImpl.Configuration = .init(),\n409 |     logger: LoggingProtocol? = nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:14:20: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n 12 |  as a fallback implementation for various security operations.\n 13 |  */\n 14 | public final class BasicSecurityProvider: SecurityProviderProtocol, AsyncServiceInitializable {\n    |                    |- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n    |                    `- note: add stubs for conformance\n 15 |   // MARK: - Properties (Placeholder - Dependencies likely needed)\n 16 | \n    :\n178 | \n179 |   /// Creates a standard security configuration DTO for this basic provider.\n180 |   public func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions? = nil) -\u003e CoreSecurityTypes.SecurityConfigDTO {\n    |               `- note: candidate has non-matching type '(SecurityConfigOptions?) -\u003e SecurityConfigDTO'\n181 |     print(\"BasicSecurityProvider createSecureConfig called (stub)\")\n182 |     return CoreSecurityTypes.SecurityConfigDTO(\n\nSecurityCoreInterfaces.SecurityProviderProtocol.createSecureConfig:2:6: note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n1 | protocol SecurityProviderProtocol {\n2 | func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions) async -\u003e CoreSecurityTypes.SecurityConfigDTO}\n  |      `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:479:15: error: invalid redeclaration of 'storeData(data:identifier:)'\n477 |   // They expect `Data` instead of `[UInt8]` for storage operations.\n478 | \n479 |   public func storeData(\n    |               `- error: invalid redeclaration of 'storeData(data:identifier:)'\n480 |     data: Data, // Protocol expects Data\n481 |     identifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:506:15: error: invalid redeclaration of 'retrieveData(identifier:)'\n504 |   }\n505 | \n506 |   public func retrieveData(\n    |               `- error: invalid redeclaration of 'retrieveData(identifier:)'\n507 |     identifier: String\n508 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e { // Protocol expects Data\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:530:15: error: invalid redeclaration of 'deleteData(identifier:)'\n528 |   }\n529 | \n530 |   public func deleteData(\n    |               `- error: invalid redeclaration of 'deleteData(identifier:)'\n531 |     identifier: String\n532 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:550:15: error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n548 | \n549 |   // Ensure generateHash signature matches protocol\n550 |   public func generateHash(\n    |               `- error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n551 |     dataIdentifier: String,\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:559:15: error: invalid redeclaration of 'importData(_:customIdentifier:)'\n557 |   // Keep the existing importData signature expecting [UInt8]\n558 |   // but also add the one expecting Data to satisfy the protocol.\n559 |   public func importData(\n    |               `- error: invalid redeclaration of 'importData(_:customIdentifier:)'\n560 |     _ data: Data, // Protocol expects Data\n561 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:160:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n158 |     encryptedDataIdentifier: String,\n159 |     keyIdentifier _: String,\n160 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n    |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n161 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n162 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:326:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n324 |   public func generateKey(\n325 |     length: Int,\n326 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n    |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n327 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n328 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:221:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 219 |     encryptedDataIdentifier: String,\n 220 |     keyIdentifier: String,\n 221 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n     |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 222 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 223 |     let context=CryptoLogContext(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:632:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 630 |   public func generateKey(\n 631 |     length: Int,\n 632 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n     |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 633 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 634 |     do {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n266 |    - Returns: Result containing array of identifiers or error details\n267 |    */\n268 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n269 |     await logger.warning(\n270 |       \"List data identifiers operation not supported\",\n\nSecurityCoreInterfaces.SecureStorageProtocol.storeData:2:6: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func storeData(_ data: [UInt8], withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.retrieveData:2:6: note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func retrieveData(withIdentifier identifier: String) async -\u003e Result\u003c[UInt8], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.deleteData:2:6: note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func deleteData(withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.listDataIdentifiers:2:6: note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:67:15: error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 65 | extension CoreSecurityTypes.DecryptionOptions {\n 66 |   /// Convert to CryptoOperationOptionsDTO for use with internal APIs\n 67 |   public func toCryptoOperationOptionsDTO() -\u003e CryptoOperationOptionsDTO {\n    |               `- error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 68 |     // Map the algorithm and mode\n 69 |     let cryptoMode: CryptoMode=switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:87:15: error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 85 | \n 86 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n 87 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n    |               `- error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 88 |   -\u003e SecurityConfigDTO {\n 89 |     var configOptions=SecurityConfigOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:109:15: error: invalid redeclaration of 'toInterfaceOptions()'\n107 | \n108 |   /// Convert to interface DecryptionOptions (used when adapting options)\n109 |   public func toInterfaceOptions() -\u003e CoreSecurityTypes.DecryptionOptions {\n    |               `- error: invalid redeclaration of 'toInterfaceOptions()'\n110 |     // This is a no-op since we're already using the correct type\n111 |     self\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:118:34: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n116 | \n117 | /// Extension to adapt between various key generation options types\n118 | extension SecurityCoreInterfaces.KeyGenerationOptions {\n    |                                  `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n119 |   /// Convert to KeyGenerationOptionsDTO for internal use\n120 |   public func toKeyGenerationOptionsDTO(keySize: Int) -\u003e KeyGenerationOptionsDTO {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:34: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n199 | \n200 | /// Extension to adapt between SecurityCoreInterfaces.HashingOptions and various format options\n201 | extension SecurityCoreInterfaces.HashingOptions {\n    |                                  `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n202 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n203 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:333:68: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n331 | \n332 |   /// Extract key generation options from the configuration\n333 |   public var extractedKeyGenerationOptions: SecurityCoreInterfaces.KeyGenerationOptions? {\n    |                                                                    `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n334 |     nil // Simplified until we have the proper members\n335 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:338:62: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n336 | \n337 |   /// Extract hashing options from the configuration\n338 |   public var extractedHashingOptions: SecurityCoreInterfaces.HashingOptions? {\n    |                                                              `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n339 |     nil // Simplified until we have the proper members\n340 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:21:23: error: cannot find type 'PaddingMode' in scope\n19 | \n20 |   /// Padding mode to use for block ciphers\n21 |   public let padding: PaddingMode?\n   |                       `- error: cannot find type 'PaddingMode' in scope\n22 | \n23 |   /**\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:34:14: error: cannot find type 'PaddingMode' in scope\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n34 |     padding: PaddingMode? = .pkcs7\n   |              `- error: cannot find type 'PaddingMode' in scope\n35 |   ) {\n36 |     self.algorithm=algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/UnifiedTypes/UnifiedTypes.swift:129:54: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n127 | \n128 |     /// Convert from SecurityCoreInterfaces.DecryptionOptions if available\n129 |     public init(from options: SecurityCoreInterfaces.DecryptionOptions?) {\n    |                                                      `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n130 |       // Default values if options is nil\n131 |       if let options {\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:117:79: error: value of type 'HashingOptions' has no member 'salt'\n115 |     guard let options else { return nil }\n116 | \n117 |     return LocalHashingOptions(algorithm: options.algorithm, useSalt: options.salt != nil)\n    |                                                                               `- error: value of type 'HashingOptions' has no member 'salt'\n118 |   }\n119 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:130:97: error: extra argument 'salt' in call\n128 |     guard let options else { return nil }\n129 | \n130 |     return CoreSecurityTypes.HashingOptions(algorithm: options.algorithm, salt: options.useSalt ? [0x01, 0x02, 0x03, 0x04] : nil)\n    |                                                                                                 `- error: extra argument 'salt' in call\n131 |   }\n132 | }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:153:24: error: value of type 'KeyGenerationOptions' has no member 'options'\n151 |       useSecureEnclave: options.useSecureEnclave,\n152 |       isExtractable: options.isExtractable,\n153 |       options: options.options\n    |                        `- error: value of type 'KeyGenerationOptions' has no member 'options'\n154 |     )\n155 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:172:24: error: extra argument 'options' in call\n170 |       useSecureEnclave: options.useSecureEnclave,\n171 |       isExtractable: options.isExtractable,\n172 |       options: options.options\n    |                        `- error: extra argument 'options' in call\n173 |     )\n174 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Adapters/SecurityTypeAdapters.swift:169:31: error: missing argument for parameter 'keySizeInBits' in call\n167 | \n168 |     return CoreSecurityTypes.KeyGenerationOptions(\n169 |       keyType: options.keyType,\n    |                               `- error: missing argument for parameter 'keySizeInBits' in call\n170 |       useSecureEnclave: options.useSecureEnclave,\n171 |       isExtractable: options.isExtractable,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/CoreSecurityTypes.swift:147:10: note: 'init(keyType:keySizeInBits:isExtractable:useSecureEnclave:)' declared here\n145 |   public let useSecureEnclave: Bool // Hint to use hardware security module if available\n146 | \n147 |   public init(\n    |          `- note: 'init(keyType:keySizeInBits:isExtractable:useSecureEnclave:)' declared here\n148 |     keyType: KeyType,\n149 |     keySizeInBits: Int,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:227:18: error: cannot find type 'DeploymentEnvironment' in scope\n225 |     secureStorage: SecureStorageProtocol?=nil,\n226 |     logger: LoggingProtocol?=nil,\n227 |     environment: DeploymentEnvironment = .production\n    |                  `- error: cannot find type 'DeploymentEnvironment' in scope\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:344:14: error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n342 |   public static func createProviderRegistry(\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n    |              `- error: cannot find type 'SecurityProviderRegistryProtocol' in scope\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n346 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:407:22: error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n405 |    - Returns: A mock CryptoServiceProtocol implementation\n406 |    */\n407 |   public static func createMock(\n    |                      `- error: invalid redeclaration of 'createMock(configuration:logger:secureStorage:)'\n408 |     configuration: MockCryptoServiceImpl.Configuration = .init(),\n409 |     logger: LoggingProtocol? = nil,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:100:48: error: type of expression is ambiguous without a type annotation\n 98 |     logger: LoggingProtocol? = nil\n 99 |   ) async -\u003e CryptoServiceProtocol {\n100 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n101 | \n102 |     return await DefaultCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:103:39: error: 'await' cannot appear to the right of a non-assignment operator\n101 | \n102 |     return await DefaultCryptoServiceImpl(\n103 |       secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                       `- error: 'await' cannot appear to the right of a non-assignment operator\n104 |       logger: actualLogger,\n105 |       options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:105:16: error: extra argument 'options' in call\n103 |       secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n104 |       logger: actualLogger,\n105 |       options: FactoryCryptoOptions()\n    |                `- error: extra argument 'options' in call\n106 |     )\n107 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:121:48: error: type of expression is ambiguous without a type annotation\n119 |     logger: LoggingProtocol?=nil\n120 |   ) async -\u003e CryptoServiceProtocol {\n121 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n122 | \n123 |     return await LoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:125:41: error: 'await' cannot appear to the right of a non-assignment operator\n123 |     return await LoggingCryptoServiceImpl(\n124 |       wrapped: DefaultCryptoServiceImpl(\n125 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n126 |         logger: actualLogger,\n127 |         options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:127:18: error: extra argument 'options' in call\n125 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n126 |         logger: actualLogger,\n127 |         options: FactoryCryptoOptions()\n    |                  `- error: extra argument 'options' in call\n128 |       ),\n129 |       logger: actualLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:145:48: error: type of expression is ambiguous without a type annotation\n143 |     logger: LoggingProtocol?=nil\n144 |   ) async -\u003e CryptoServiceProtocol {\n145 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n146 | \n147 |     return await EnhancedLoggingCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:149:41: error: 'await' cannot appear to the right of a non-assignment operator\n147 |     return await EnhancedLoggingCryptoServiceImpl(\n148 |       wrapped: DefaultCryptoServiceImpl(\n149 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:152:8: error: missing argument for parameter 'secureStorage' in call\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n152 |       ),\n    |        `- error: missing argument for parameter 'secureStorage' in call\n153 |       logger: actualLogger\n154 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:31:10: note: 'init(wrapped:secureStorage:logger:)' declared here\n 29 |      - logger: The privacy-aware logger to use for logging.\n 30 |    */\n 31 |   public init(\n    |          `- note: 'init(wrapped:secureStorage:logger:)' declared here\n 32 |     wrapped: CryptoServiceProtocol,\n 33 |     secureStorage: SecureStorageProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:153:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n151 |         options: FactoryCryptoOptions()\n152 |       ),\n153 |       logger: actualLogger\n    |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n154 |     )\n155 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:151:18: error: extra argument 'options' in call\n149 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n150 |         logger: actualLogger,\n151 |         options: FactoryCryptoOptions()\n    |                  `- error: extra argument 'options' in call\n152 |       ),\n153 |       logger: actualLogger\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:169:48: error: type of expression is ambiguous without a type annotation\n167 |     logger: LoggingProtocol?=nil\n168 |   ) async -\u003e CryptoServiceProtocol {\n169 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n170 | \n171 |     // Create secure service with enhanced parameters\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:174:41: error: 'await' cannot appear to the right of a non-assignment operator\n172 |     let service = await EnhancedSecureCryptoServiceImpl(\n173 |       wrapped: DefaultCryptoServiceImpl(\n174 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                         `- error: 'await' cannot appear to the right of a non-assignment operator\n175 |         logger: actualLogger,\n176 |         options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:181:16: error: extra argument 'storage' in call\n179 |         )\n180 |       ),\n181 |       storage: await createSecureStorage(),\n    |                `- error: extra argument 'storage' in call\n182 |       logger: actualLogger\n183 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:181:43: error: missing argument for parameter 'rateLimiter' in call\n179 |         )\n180 |       ),\n181 |       storage: await createSecureStorage(),\n    |                                           `- error: missing argument for parameter 'rateLimiter' in call\n182 |       logger: actualLogger\n183 |     )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:44:10: note: 'init(wrapped:logger:rateLimiter:)' declared here\n 42 |      - rateLimiter: Rate limiter for security operations\n 43 |    */\n 44 |   public init(\n    |          `- note: 'init(wrapped:logger:rateLimiter:)' declared here\n 45 |     wrapped: CryptoServiceProtocol,\n 46 |     logger: PrivacyAwareLoggingProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:182:15: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n180 |       ),\n181 |       storage: await createSecureStorage(),\n182 |       logger: actualLogger\n    |               `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n183 |     )\n184 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:176:18: error: extra argument 'options' in call\n174 |         secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n175 |         logger: actualLogger,\n176 |         options: FactoryCryptoOptions(\n    |                  `- error: extra argument 'options' in call\n177 |           defaultIterations: 10000, // Higher iteration count for PBKDF2\n178 |           enforceStrongKeys: true\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:205:48: error: type of expression is ambiguous without a type annotation\n203 |     secureStorage: SecureStorageProtocol? = nil\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n207 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:206:48: error: 'await' cannot appear to the right of a non-assignment operator\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n207 |     \n208 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:206:54: error: 'async' call in an autoclosure that does not support concurrency\n204 |   ) async -\u003e CryptoServiceProtocol {\n205 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n207 |     \n208 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:208:12: warning: no 'async' operations occur within 'await' expression\n206 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n207 |     \n208 |     return await MockCryptoServiceImpl(\n    |            `- warning: no 'async' operations occur within 'await' expression\n209 |       configuration: configuration,\n210 |       logger: actualLogger,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:229:48: error: type of expression is ambiguous without a type annotation\n227 |     environment: DeploymentEnvironment = .production\n228 |   ) async -\u003e CryptoServiceProtocol {\n229 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n230 | \n231 |     switch environment {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:234:43: error: 'await' cannot appear to the right of a non-assignment operator\n232 |       case .development:\n233 |         return await DefaultCryptoServiceImpl(\n234 |           secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                           `- error: 'await' cannot appear to the right of a non-assignment operator\n235 |           logger: actualLogger,\n236 |           options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:236:20: error: extra argument 'options' in call\n234 |           secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n235 |           logger: actualLogger,\n236 |           options: FactoryCryptoOptions(\n    |                    `- error: extra argument 'options' in call\n237 |             defaultIterations: 1000, // Lower for development speed\n238 |             enforceStrongKeys: false // More lenient for development\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:244:26: error: cannot find 'MockCryptoConfiguration' in scope\n242 |       case .testing:\n243 |         return await MockCryptoServiceImpl(\n244 |           configuration: MockCryptoConfiguration(\n    |                          `- error: cannot find 'MockCryptoConfiguration' in scope\n245 |             encryptionSucceeds: true,\n246 |             decryptionSucceeds: true,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:260:45: error: 'await' cannot appear to the right of a non-assignment operator\n258 |         return await EnhancedLoggingCryptoServiceImpl(\n259 |           wrapped: DefaultCryptoServiceImpl(\n260 |             secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n    |                                             `- error: 'await' cannot appear to the right of a non-assignment operator\n261 |             logger: actualLogger,\n262 |             options: FactoryCryptoOptions(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:266:12: error: missing argument for parameter 'secureStorage' in call\n264 |               enforceStrongKeys: true\n265 |             )\n266 |           ),\n    |            `- error: missing argument for parameter 'secureStorage' in call\n267 |           logger: actualLogger\n268 |         )\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedLoggingCryptoServiceImpl.swift:31:10: note: 'init(wrapped:secureStorage:logger:)' declared here\n 29 |      - logger: The privacy-aware logger to use for logging.\n 30 |    */\n 31 |   public init(\n    |          `- note: 'init(wrapped:secureStorage:logger:)' declared here\n 32 |     wrapped: CryptoServiceProtocol,\n 33 |     secureStorage: SecureStorageProtocol,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:267:19: error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n265 |             )\n266 |           ),\n267 |           logger: actualLogger\n    |                   `- error: argument type 'any LoggingProtocol' does not conform to expected type 'PrivacyAwareLoggingProtocol'\n268 |         )\n269 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:262:22: error: extra argument 'options' in call\n260 |             secureStorage: secureStorage ?? await createLocalSecureStorage(logger: actualLogger),\n261 |             logger: actualLogger,\n262 |             options: FactoryCryptoOptions(\n    |                      `- error: extra argument 'options' in call\n263 |               defaultIterations: 5000, // Medium strength for staging\n264 |               enforceStrongKeys: true\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:295:48: error: type of expression is ambiguous without a type annotation\n293 |     logger: LoggingProtocol? = nil\n294 |   ) async -\u003e CryptoServiceProtocol {\n295 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n296 |     \n297 |     // Create the provider\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:322:48: error: type of expression is ambiguous without a type annotation\n320 |     logger: LoggingProtocol? = nil\n321 |   ) async -\u003e CryptoServiceProtocol {\n322 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n323 | \n324 |     // Use the provided secure storage or create a default one\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:325:48: error: 'await' cannot appear to the right of a non-assignment operator\n323 | \n324 |     // Use the provided secure storage or create a default one\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:327:18: error: cannot find 'DefaultCryptoServiceWithProviderImpl' in scope\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n    |                  `- error: cannot find 'DefaultCryptoServiceWithProviderImpl' in scope\n328 |       provider: provider,\n329 |       secureStorage: actualSecureStorage,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:325:54: error: 'async' call in an autoclosure that does not support concurrency\n323 | \n324 |     // Use the provided secure storage or create a default one\n325 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n326 |     \n327 |     return await DefaultCryptoServiceWithProviderImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:345:31: error: type of expression is ambiguous without a type annotation\n343 |     logger: LoggingProtocol? = nil\n344 |   ) async -\u003e SecurityProviderRegistryProtocol {\n345 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                               `- error: type of expression is ambiguous without a type annotation\n346 |     \n347 |     return await DefaultSecurityProviderRegistry(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:368:31: error: type of expression is ambiguous without a type annotation\n366 |     logger: LoggingProtocol? = nil\n367 |   ) async -\u003e SecureStorageProtocol {\n368 |     let actualLogger = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                               `- error: type of expression is ambiguous without a type annotation\n369 |     \n370 |     // Create default provider if none provided\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:376:61: error: cannot infer contextual base in reference to member 'default'\n374 |     } else {\n375 |       let registry = await createProviderRegistry(logger: actualLogger)\n376 |       actualProvider = await registry.createProvider(type: .default)\n    |                                                             `- error: cannot infer contextual base in reference to member 'default'\n377 |     }\n378 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:379:18: error: cannot find 'DefaultSecureStorageImpl' in scope\n377 |     }\n378 |     \n379 |     return await DefaultSecureStorageImpl(\n    |                  `- error: cannot find 'DefaultSecureStorageImpl' in scope\n380 |       provider: actualProvider,\n381 |       storageURL: storageURL,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:412:48: error: type of expression is ambiguous without a type annotation\n410 |     secureStorage: SecureStorageProtocol? = nil\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n    |                                                `- error: type of expression is ambiguous without a type annotation\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n414 |     \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:413:48: error: 'await' cannot appear to the right of a non-assignment operator\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                `- error: 'await' cannot appear to the right of a non-assignment operator\n414 |     \n415 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:413:54: error: 'async' call in an autoclosure that does not support concurrency\n411 |   ) async -\u003e CryptoServiceProtocol {\n412 |     let actualLogger: LoggingProtocol = logger ?? LoggingServiceFactory.createStandardLogger()\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n    |                                                      `- error: 'async' call in an autoclosure that does not support concurrency\n414 |     \n415 |     return await MockCryptoServiceImpl(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/CryptoServiceFactory.swift:415:12: warning: no 'async' operations occur within 'await' expression\n413 |     let actualSecureStorage = secureStorage ?? await createLocalSecureStorage(logger: actualLogger)\n414 |     \n415 |     return await MockCryptoServiceImpl(\n    |            `- warning: no 'async' operations occur within 'await' expression\n416 |       configuration: configuration,\n417 |       logger: actualLogger,\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/BasicSecurityProvider.swift:14:20: error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n 12 |  as a fallback implementation for various security operations.\n 13 |  */\n 14 | public final class BasicSecurityProvider: SecurityProviderProtocol, AsyncServiceInitializable {\n    |                    |- error: type 'BasicSecurityProvider' does not conform to protocol 'SecurityProviderProtocol'\n    |                    `- note: add stubs for conformance\n 15 |   // MARK: - Properties (Placeholder - Dependencies likely needed)\n 16 | \n    :\n178 | \n179 |   /// Creates a standard security configuration DTO for this basic provider.\n180 |   public func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions? = nil) -\u003e CoreSecurityTypes.SecurityConfigDTO {\n    |               `- note: candidate has non-matching type '(SecurityConfigOptions?) -\u003e SecurityConfigDTO'\n181 |     print(\"BasicSecurityProvider createSecureConfig called (stub)\")\n182 |     return CoreSecurityTypes.SecurityConfigDTO(\n\nSecurityCoreInterfaces.SecurityProviderProtocol.createSecureConfig:2:6: note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n1 | protocol SecurityProviderProtocol {\n2 | func createSecureConfig(options: CoreSecurityTypes.SecurityConfigOptions) async -\u003e CoreSecurityTypes.SecurityConfigDTO}\n  |      `- note: protocol requires function 'createSecureConfig(options:)' with type '(SecurityConfigOptions) async -\u003e SecurityConfigDTO'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:479:15: error: invalid redeclaration of 'storeData(data:identifier:)'\n477 |   // They expect `Data` instead of `[UInt8]` for storage operations.\n478 | \n479 |   public func storeData(\n    |               `- error: invalid redeclaration of 'storeData(data:identifier:)'\n480 |     data: Data, // Protocol expects Data\n481 |     identifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:506:15: error: invalid redeclaration of 'retrieveData(identifier:)'\n504 |   }\n505 | \n506 |   public func retrieveData(\n    |               `- error: invalid redeclaration of 'retrieveData(identifier:)'\n507 |     identifier: String\n508 |   ) async -\u003e Result\u003cData, SecurityStorageError\u003e { // Protocol expects Data\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:530:15: error: invalid redeclaration of 'deleteData(identifier:)'\n528 |   }\n529 | \n530 |   public func deleteData(\n    |               `- error: invalid redeclaration of 'deleteData(identifier:)'\n531 |     identifier: String\n532 |   ) async -\u003e Result\u003cVoid, SecurityStorageError\u003e {\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:550:15: error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n548 | \n549 |   // Ensure generateHash signature matches protocol\n550 |   public func generateHash(\n    |               `- error: invalid redeclaration of 'generateHash(dataIdentifier:options:)'\n551 |     dataIdentifier: String,\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:559:15: error: invalid redeclaration of 'importData(_:customIdentifier:)'\n557 |   // Keep the existing importData signature expecting [UInt8]\n558 |   // but also add the one expecting Data to satisfy the protocol.\n559 |   public func importData(\n    |               `- error: invalid redeclaration of 'importData(_:customIdentifier:)'\n560 |     _ data: Data, // Protocol expects Data\n561 |     customIdentifier: String\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:340:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n338 |     customIdentifier: String\n339 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n340 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n341 |     await logger?.debug(\"Importing raw data with custom identifier: \\(customIdentifier)\", context: context)\n342 |     // Store the raw data using the secure storage protocol\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:358:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n356 |     customIdentifier: String?\n357 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n358 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n359 |     await logger?.debug(\"Importing [UInt8] data...\", context: context)\n360 |     // Convert [UInt8] to Data for storage\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:384:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n382 |     identifier: String\n383 |   ) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e {\n384 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Export\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n385 |     await logger?.debug(\"Exporting data with identifier: \\(identifier)\", context: context)\n386 |     let result = await secureStorage.retrieveData(withIdentifier: identifier)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:411:21: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n409 |     } else {\n410 |       // Fallback or handle error appropriately\n411 |       let context = LogContextDTO(subsystem: \"CryptoService\", category: \"Randomness\")\n    |                     `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n412 |       await logger?.error(\"Failed to generate secure random bytes, status: \\(status)\", context: context)\n413 |       // Returning non-secure bytes as a fallback - consider throwing an error instead\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:425:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n423 |     options _: CoreSecurityTypes.HashingOptions? = nil\n424 |   ) async -\u003e Result\u003cBool, SecurityStorageError\u003e {\n425 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Hashing\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n426 |     await logger?.debug(\n427 |       \"Verifying hash for data \\(dataIdentifier) against hash \\(hashIdentifier)\", context: context\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:433:34: error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n431 |     guard case .success(let originalData) = dataResult else {\n432 |       await logger?.error(\"Failed to retrieve original data for hash verification\", context: context)\n433 |       return .failure(dataResult.error ?? .dataNotFound(identifier: dataIdentifier))\n    |                                  `- error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n434 |     }\n435 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:433:44: error: enum case 'dataNotFound' has no associated values\n431 |     guard case .success(let originalData) = dataResult else {\n432 |       await logger?.error(\"Failed to retrieve original data for hash verification\", context: context)\n433 |       return .failure(dataResult.error ?? .dataNotFound(identifier: dataIdentifier))\n    |                                            `- error: enum case 'dataNotFound' has no associated values\n434 |     }\n435 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:440:34: error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n438 |     guard case .success(let storedHash) = hashResult else {\n439 |       await logger?.error(\"Failed to retrieve stored hash for verification\", context: context)\n440 |       return .failure(hashResult.error ?? .dataNotFound(identifier: hashIdentifier))\n    |                                  `- error: value of type 'Result\u003c[UInt8], SecurityStorageError\u003e' has no member 'error'\n441 |     }\n442 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:440:44: error: enum case 'dataNotFound' has no associated values\n438 |     guard case .success(let storedHash) = hashResult else {\n439 |       await logger?.error(\"Failed to retrieve stored hash for verification\", context: context)\n440 |       return .failure(hashResult.error ?? .dataNotFound(identifier: hashIdentifier))\n    |                                            `- error: enum case 'dataNotFound' has no associated values\n441 |     }\n442 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:444:25: error: cannot find 'sha256' in scope\n442 | \n443 |     // 3. Generate hash of original data (using a basic SHA256 for this stub)\n444 |     let generatedHash = sha256(data: originalData)\n    |                         `- error: cannot find 'sha256' in scope\n445 | \n446 |     // 4. Compare hashes\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:457:34: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n455 |     options _: CoreSecurityTypes.KeyGenerationOptions? = nil\n456 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n457 |     let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"KeyManagement\")\n    |                                  `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n458 |     await logger?.debug(\"Generating key of length \\(length)...\", context: context)\n459 |     let keyData = generateRandomBytes(count: length)\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:554:66: error: cannot find 'options' in scope\n552 |     options _: CoreSecurityTypes.HashingOptions? = nil // Add options parameter\n553 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n554 |       return await hash(dataIdentifier: dataIdentifier, options: options)\n    |                                                                  `- error: cannot find 'options' in scope\n555 |   }\n556 | \n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/DefaultCryptoServiceImpl.swift:563:36: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n561 |     customIdentifier: String\n562 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n563 |       let context: LogContextDTO = LogContextDTO(subsystem: \"CryptoService\", category: \"Import\")\n    |                                    `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n564 |       await logger?.debug(\"Importing Data with custom identifier: \\(customIdentifier)\", context: context)\n565 |       // Store the raw data using the secure storage protocol, converting Data to [UInt8]\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:459:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n457 |       identifier: customIdentifier\n458 |     )\n459 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n460 |     return await wrapped.importData(data, customIdentifier: customIdentifier)\n461 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:480:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n478 |       identifier: customIdentifier\n479 |     )\n480 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n481 |     return await wrapped.importData(data, customIdentifier: customIdentifier)\n482 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:501:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n499 |       identifier: dataIdentifier\n500 |     )\n501 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n502 |     return await wrapped.generateHash(dataIdentifier: dataIdentifier, options: options)\n503 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:522:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n520 |       identifier: identifier\n521 |     )\n522 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n523 |     return await wrapped.storeData(data: data, identifier: identifier)\n524 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:540:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n538 |       identifier: identifier\n539 |     )\n540 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n541 |     return await wrapped.retrieveData(identifier: identifier)\n542 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/EnhancedSecureCryptoServiceImpl.swift:558:18: error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n556 |       identifier: identifier\n557 |     )\n558 |     await logger.logSensitiveOperationStart(context: context)\n    |                  `- error: value of type 'any PrivacyAwareLoggingProtocol' has no member 'logSensitiveOperationStart'\n559 |     return await wrapped.deleteData(identifier: identifier)\n560 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:160:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n158 |     encryptedDataIdentifier: String,\n159 |     keyIdentifier _: String,\n160 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n    |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n161 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n162 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Factory/Implementations/MockCryptoServiceImpl.swift:326:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n324 |   public func generateKey(\n325 |     length: Int,\n326 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n    |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n327 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n328 |     await logger.debug(\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:51:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 49 |                 return .failure(error)\n 50 |             }\n 51 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 52 |             return .failure(error)\n 53 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:75:26: error: missing argument for parameter 'source' in call\n 73 |         await logger.debug(\n 74 |             \"Encrypting data using algorithm: \\(algorithm.rawValue)\",\n 75 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n 76 |         )\n 77 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:83:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 81 |             // Actual implementation would use CommonCrypto or CryptoKit\n 82 |             return .success(data) // Placeholder response\n 83 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n 84 |             return .failure(error)\n 85 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:107:26: error: missing argument for parameter 'source' in call\n105 |         await logger.debug(\n106 |             \"Decrypting data using algorithm: \\(algorithm.rawValue)\",\n107 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n108 |         )\n109 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:115:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n113 |             // Actual implementation would use CommonCrypto or CryptoKit\n114 |             return .success(data) // Placeholder response\n115 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n116 |             return .failure(error)\n117 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:134:26: error: missing argument for parameter 'source' in call\n132 |         await logger.debug(\n133 |             \"Hashing data using algorithm: \\(algorithm.rawValue)\",\n134 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n135 |         )\n136 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:142:11: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n140 |             // Actual implementation would use CommonCrypto or CryptoKit\n141 |             return .success(data) // Placeholder response\n142 |         } catch {\n    |           `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n143 |             return .failure(error)\n144 |         }\n\npackages/UmbraImplementations/Sources/CryptoServices/Provider/DefaultCryptoProvider.swift:161:26: error: missing argument for parameter 'source' in call\n159 |         await logger.debug(\n160 |             \"Generating \\(keyType.rawValue) key of size: \\(keySize) bits\",\n161 |             metadata: nil\n    |                          `- error: missing argument for parameter 'source' in call\n162 |         )\n163 |         \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraImplementations/Sources/LoggingServices/LoggingHelpers.swift:44:15: note: 'debug(_:metadata:source:)' declared here\n 42 |   ///   - source: The source of the log\n 43 |   @available(*, deprecated, message: \"Use debug(_:context:) instead\")\n 44 |   public func debug(\n    |               `- note: 'debug(_:metadata:source:)' declared here\n 45 |     _ message: String,\n 46 |     metadata: PrivacyMetadata?,\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:221:39: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 219 |     encryptedDataIdentifier: String,\n 220 |     keyIdentifier: String,\n 221 |     options _: SecurityCoreInterfaces.DecryptionOptions?\n     |                                       `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n 222 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 223 |     let context=CryptoLogContext(\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:632:39: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 630 |   public func generateKey(\n 631 |     length: Int,\n 632 |     options _: SecurityCoreInterfaces.KeyGenerationOptions?\n     |                                       `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n 633 |   ) async -\u003e Result\u003cString, SecurityStorageError\u003e {\n 634 |     do {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:78: error: missing argument for parameter 'options' in call\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                              `- error: missing argument for parameter 'options' in call\n 146 | \n 147 |       // Store the encrypted data\n\nCryptoInterfaces.CryptoProviderProtocol.encrypt:2:6: note: 'encrypt(data:key:options:)' declared here\n1 | protocol CryptoProviderProtocol {\n2 | func encrypt(data: Data, key: Data, options: CoreSecurityTypes.EncryptionOptions?) async -\u003e Result\u003cData, any Error\u003e}\n  |      `- note: 'encrypt(data:key:options:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:64: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 146 | \n 147 |       // Store the encrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:145:75: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 143 |     do {\n 144 |       // Perform the encryption\n 145 |       let encryptedData=try await cryptoProvider.encrypt(data: data, key: key)\n     |                                                                           `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 146 | \n 147 |       // Store the encrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:87: error: missing argument for parameter 'options' in call\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                                       `- error: missing argument for parameter 'options' in call\n 287 | \n 288 |       // Store the decrypted data\n\nCryptoInterfaces.CryptoProviderProtocol.decrypt:2:6: note: 'decrypt(data:key:options:)' declared here\n1 | protocol CryptoProviderProtocol {\n2 | func decrypt(data: Data, key: Data, options: CoreSecurityTypes.EncryptionOptions?) async -\u003e Result\u003cData, any Error\u003e}\n  |      `- note: 'decrypt(data:key:options:)' declared here\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:64: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 287 | \n 288 |       // Store the decrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:286:84: error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 284 |     do {\n 285 |       // Perform the decryption\n 286 |       let decryptedData=try await cryptoProvider.decrypt(data: encryptedData, key: key)\n     |                                                                                    `- error: cannot convert value of type '[UInt8]' to expected argument type 'Data'\n 287 | \n 288 |       // Store the decrypted data\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:641:53: error: cannot convert value of type 'Result\u003cData, any Error\u003e' to expected argument type '[UInt8]'\n 639 | \n 640 |       // Store the key in secure storage\n 641 |       let storeResult=await secureStorage.storeData(keyData, withIdentifier: keyIdentifier)\n     |                                                     `- error: cannot convert value of type 'Result\u003cData, any Error\u003e' to expected argument type '[UInt8]'\n 642 | \n 643 |       guard case .success=storeResult else {\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoServiceImpl.swift:638:19: warning: no calls to throwing functions occur within 'try' expression\n 636 | \n 637 |       // Generate random key data\n 638 |       let keyData=try await cryptoProvider.generateRandomData(length: length)\n     |                   `- warning: no calls to throwing functions occur within 'try' expression\n 639 | \n 640 |       // Store the key in secure storage\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureCryptoStorage.swift:417:31: error: cannot find 'getSecureStorage' in scope\n415 |     // Currently we just attempt to retrieve the data and check if it exists\n416 |     // This could be optimized in a real implementation to avoid loading the data\n417 |     let secureStore=try await getSecureStorage()\n    |                               `- error: cannot find 'getSecureStorage' in scope\n418 |     return secureStore.hasKey(identifier)\n419 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:27:20: error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n 25 |  SecureStorageProtocol interface, providing a clean abstraction for secure storage operations.\n 26 |  */\n 27 | public final class SecureStorageAdapter: SecureStorageProtocol {\n    |                    |- error: type 'SecureStorageAdapter' does not conform to protocol 'SecureStorageProtocol'\n    |                    `- note: add stubs for conformance\n 28 |   /// The underlying secure storage implementation\n 29 |   private let storage: SecureCryptoStorage\n    :\n 53 |    - Returns: Result indicating success or failure with error details\n 54 |    */\n 55 |   public func storeData(\n    |               `- note: candidate has non-matching type '([UInt8], String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n 56 |     _ data: [UInt8],\n 57 |     withIdentifier identifier: String\n    :\n110 |    - Returns: Result containing the retrieved data or error details\n111 |    */\n112 |   public func retrieveData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e'\n113 |     withIdentifier identifier: String\n114 |   ) async -\u003e Result\u003c[UInt8], StorageCoreError\u003e {\n    :\n171 |    - Returns: Result indicating success or failure with error details\n172 |    */\n173 |   public func deleteData(\n    |               `- note: candidate has non-matching type '(String) async -\u003e Result\u003cVoid, StorageCoreError\u003e'\n174 |     withIdentifier identifier: String\n175 |   ) async -\u003e Result\u003cVoid, StorageCoreError\u003e {\n    :\n266 |    - Returns: Result containing array of identifiers or error details\n267 |    */\n268 |   public func listDataIdentifiers() async -\u003e Result\u003c[String], StorageCoreError\u003e {\n    |               `- note: candidate has non-matching type '() async -\u003e Result\u003c[String], StorageCoreError\u003e'\n269 |     await logger.warning(\n270 |       \"List data identifiers operation not supported\",\n\nSecurityCoreInterfaces.SecureStorageProtocol.storeData:2:6: note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func storeData(_ data: [UInt8], withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'storeData(_:withIdentifier:)' with type '([UInt8], String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.retrieveData:2:6: note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func retrieveData(withIdentifier identifier: String) async -\u003e Result\u003c[UInt8], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'retrieveData(withIdentifier:)' with type '(String) async -\u003e Result\u003c[UInt8], SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.deleteData:2:6: note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func deleteData(withIdentifier identifier: String) async -\u003e Result\u003cVoid, SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'deleteData(withIdentifier:)' with type '(String) async -\u003e Result\u003cVoid, SecurityStorageError\u003e'\n3 | \n\nSecurityCoreInterfaces.SecureStorageProtocol.listDataIdentifiers:2:6: note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n1 | protocol SecureStorageProtocol {\n2 | func listDataIdentifiers() async -\u003e Result\u003c[String], SecurityCoreInterfaces.SecurityStorageError\u003e}\n  |      `- note: protocol requires function 'listDataIdentifiers()' with type '() async -\u003e Result\u003c[String], SecurityStorageError\u003e'\n3 | \n\npackages/UmbraImplementations/Sources/CryptoServices/SecureStorage/SecureStorageAdapter.swift:158:61: error: type '_ErrorCodeProtocol' has no member 'notFound'\n156 |       )\n157 | \n158 |       if let storageError=error as? StorageCoreError, case .notFound=storageError {\n    |                                                             `- error: type '_ErrorCodeProtocol' has no member 'notFound'\n159 |         return .failure(.dataNotFound)\n160 |       }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:67:15: error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 65 | extension CoreSecurityTypes.DecryptionOptions {\n 66 |   /// Convert to CryptoOperationOptionsDTO for use with internal APIs\n 67 |   public func toCryptoOperationOptionsDTO() -\u003e CryptoOperationOptionsDTO {\n    |               `- error: invalid redeclaration of 'toCryptoOperationOptionsDTO()'\n 68 |     // Map the algorithm and mode\n 69 |     let cryptoMode: CryptoMode=switch algorithm {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:87:15: error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 85 | \n 86 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n 87 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n    |               `- error: invalid redeclaration of 'toSecurityConfigDTO(withMetadata:)'\n 88 |   -\u003e SecurityConfigDTO {\n 89 |     var configOptions=SecurityConfigOptions()\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:109:15: error: invalid redeclaration of 'toInterfaceOptions()'\n107 | \n108 |   /// Convert to interface DecryptionOptions (used when adapting options)\n109 |   public func toInterfaceOptions() -\u003e CoreSecurityTypes.DecryptionOptions {\n    |               `- error: invalid redeclaration of 'toInterfaceOptions()'\n110 |     // This is a no-op since we're already using the correct type\n111 |     self\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:118:34: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n116 | \n117 | /// Extension to adapt between various key generation options types\n118 | extension SecurityCoreInterfaces.KeyGenerationOptions {\n    |                                  `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n119 |   /// Convert to KeyGenerationOptionsDTO for internal use\n120 |   public func toKeyGenerationOptionsDTO(keySize: Int) -\u003e KeyGenerationOptionsDTO {\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:201:34: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n199 | \n200 | /// Extension to adapt between SecurityCoreInterfaces.HashingOptions and various format options\n201 | extension SecurityCoreInterfaces.HashingOptions {\n    |                                  `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n202 |   /// Convert to SecurityConfigDTO for use with SecurityProvider\n203 |   public func toSecurityConfigDTO(withMetadata metadata: [String: String]?=nil)\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:333:68: error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n331 | \n332 |   /// Extract key generation options from the configuration\n333 |   public var extractedKeyGenerationOptions: SecurityCoreInterfaces.KeyGenerationOptions? {\n    |                                                                    `- error: no type named 'KeyGenerationOptions' in module 'SecurityCoreInterfaces'\n334 |     nil // Simplified until we have the proper members\n335 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/CryptoOptionAdapters.swift:338:62: error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n336 | \n337 |   /// Extract hashing options from the configuration\n338 |   public var extractedHashingOptions: SecurityCoreInterfaces.HashingOptions? {\n    |                                                              `- error: no type named 'HashingOptions' in module 'SecurityCoreInterfaces'\n339 |     nil // Simplified until we have the proper members\n340 |   }\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:21:23: error: cannot find type 'PaddingMode' in scope\n19 | \n20 |   /// Padding mode to use for block ciphers\n21 |   public let padding: PaddingMode?\n   |                       `- error: cannot find type 'PaddingMode' in scope\n22 | \n23 |   /**\n\npackages/UmbraImplementations/Sources/CryptoServices/Types/DecryptionOptions.swift:34:14: error: cannot find type 'PaddingMode' in scope\n32 |     algorithm: CoreSecurityTypes.EncryptionAlgorithm = .aes256CBC,\n33 |     authenticatedData: [UInt8]?=nil,\n34 |     padding: PaddingMode? = .pkcs7\n   |              `- error: cannot find type 'PaddingMode' in scope\n35 |   ) {\n36 |     self.algorithm=algorithm\n\npackages/UmbraImplementations/Sources/CryptoServices/UnifiedTypes/UnifiedTypes.swift:129:54: error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n127 | \n128 |     /// Convert from SecurityCoreInterfaces.DecryptionOptions if available\n129 |     public init(from options: SecurityCoreInterfaces.DecryptionOptions?) {\n    |                                                      `- error: no type named 'DecryptionOptions' in module 'SecurityCoreInterfaces'\n130 |       // Default values if options is nil\n131 |       if let options {\nTarget //packages/UmbraImplementations/Sources/SecurityImplementation:SecurityImplementation failed to build\nINFO: Elapsed time: 1.044s, Critical Path: 0.96s\nINFO: 2 processes: 2 internal.\nERROR: Build did NOT complete successfully\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement",
    "success": true,
    "start_time": "2025-04-08T00:44:40.337292+01:00",
    "end_time": "2025-04-08T00:44:41.162952+01:00",
    "duration": "825.658583ms",
    "output": "INFO: Invocation ID: b439e20e-4287-4da7-ad35-b7dfc5445fa5\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement:SecurityKeyManagement up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/SecurityKeyManagement.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/SecurityKeyManagement.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/SecurityKeyManagement.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/libSecurityKeyManagement.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor",
    "success": true,
    "start_time": "2025-04-08T00:44:41.162964+01:00",
    "end_time": "2025-04-08T00:44:41.942824+01:00",
    "duration": "779.859042ms",
    "output": "INFO: Invocation ID: f1f6db4d-a302-4ef2-8436-9c2bb20b5fda\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor (1 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor (1 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor (2 packages loaded, 4 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor:KeyManagementActor up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/KeyManagementActor.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/KeyManagementActor.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/KeyManagementActor.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Actor/libKeyManagementActor.a\nINFO: Elapsed time: 0.093s, Critical Path: 0.00s\nINFO: 1 process: 5 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes",
    "success": true,
    "start_time": "2025-04-08T00:44:41.94284+01:00",
    "end_time": "2025-04-08T00:44:42.709738+01:00",
    "duration": "766.896ms",
    "output": "INFO: Invocation ID: dfe179eb-1725-4e79-9dd0-787d2929547a\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes:KeyManagementActorTypes up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/KeyManagementActorTypes.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/KeyManagementActorTypes.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/KeyManagementActorTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/ActorTypes/libKeyManagementActorTypes.a\nINFO: Elapsed time: 0.079s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage",
    "success": true,
    "start_time": "2025-04-08T00:44:42.709743+01:00",
    "end_time": "2025-04-08T00:44:43.479633+01:00",
    "duration": "769.888042ms",
    "output": "INFO: Invocation ID: fca3b7ac-45ac-4474-b492-60b418214748\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage:KeyStorage up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/KeyStorage.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/KeyStorage.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/KeyStorage.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Storage/libKeyStorage.a\nINFO: Elapsed time: 0.074s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes",
    "success": true,
    "start_time": "2025-04-08T00:44:43.47964+01:00",
    "end_time": "2025-04-08T00:44:44.339188+01:00",
    "duration": "859.545625ms",
    "output": "INFO: Invocation ID: d38743bd-4f6f-4da7-9987-54a4ccb850c8\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityKeyManagement/Types:SecurityKeyTypes up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/SecurityKeyTypes.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/SecurityKeyTypes.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/SecurityKeyTypes.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityKeyManagement/Types/libSecurityKeyTypes.a\nINFO: Elapsed time: 0.074s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders",
    "success": true,
    "start_time": "2025-04-08T00:44:44.339289+01:00",
    "end_time": "2025-04-08T00:44:45.157981+01:00",
    "duration": "818.691ms",
    "output": "INFO: Invocation ID: d36df8e0-f1d6-4e72-bd31-64394552ff93\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityProviders:SecurityProviders up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/SecurityProviders.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/SecurityProviders.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/SecurityProviders.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityProviders/libSecurityProviders.a\nINFO: Elapsed time: 0.091s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils",
    "success": true,
    "start_time": "2025-04-08T00:44:45.157995+01:00",
    "end_time": "2025-04-08T00:44:45.92837+01:00",
    "duration": "770.373334ms",
    "output": "INFO: Invocation ID: 68745c4c-a344-4c79-be43-da9d223cdc70\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/SecurityUtils:SecurityUtils up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/SecurityUtils.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/SecurityUtils/libSecurityUtils.a\nINFO: Elapsed time: 0.072s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraImplementations/Sources/XPCServices:XPCServices",
    "success": true,
    "start_time": "2025-04-08T00:44:45.928395+01:00",
    "end_time": "2025-04-08T00:44:46.686071+01:00",
    "duration": "757.674834ms",
    "output": "INFO: Invocation ID: 89a919ab-9d25-4532-81d2-7360f3d927f1\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraImplementations/Sources/XPCServices:XPCServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraImplementations/Sources/XPCServices:XPCServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraImplementations/Sources/XPCServices:XPCServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraImplementations/Sources/XPCServices:XPCServices up-to-date:\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/XPCServices.swiftdoc\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/XPCServices.swiftmodule\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/XPCServices.swiftsourceinfo\n  bazel-bin/packages/UmbraImplementations/Sources/XPCServices/libXPCServices.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:46.686083+01:00",
    "end_time": "2025-04-08T00:44:47.480447+01:00",
    "duration": "794.363041ms",
    "output": "INFO: Invocation ID: 13bea527-c7a5-41fc-aa79-f829081187b5\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/APIInterfaces:APIInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/APIInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/APIInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/APIInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/APIInterfaces/libAPIInterfaces.a\nINFO: Elapsed time: 0.069s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:47.480462+01:00",
    "end_time": "2025-04-08T00:44:48.289145+01:00",
    "duration": "808.681583ms",
    "output": "INFO: Invocation ID: a6529698-799b-4fcf-8a65-3c495a9dc0ff\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/BackupInterfaces:BackupInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/BackupInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/BackupInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/BackupInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/BackupInterfaces/libBackupInterfaces.a\nINFO: Elapsed time: 0.075s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:48.289155+01:00",
    "end_time": "2025-04-08T00:44:49.109547+01:00",
    "duration": "820.390625ms",
    "output": "INFO: Invocation ID: ce6f7f83-5876-4014-aea5-e30af1f273e9\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/CoreInterfaces:CoreInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/CoreInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/CoreInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/CoreInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/CoreInterfaces/libCoreInterfaces.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:49.109573+01:00",
    "end_time": "2025-04-08T00:44:49.877775+01:00",
    "duration": "768.199959ms",
    "output": "INFO: Invocation ID: df31c051-09c1-42ab-8e91-bad71bb61e9c\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/CryptoInterfaces:CryptoInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/CryptoInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/CryptoInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/CryptoInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/CryptoInterfaces/libCryptoInterfaces.a\nINFO: Elapsed time: 0.069s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:49.877783+01:00",
    "end_time": "2025-04-08T00:44:50.671095+01:00",
    "duration": "793.310583ms",
    "output": "INFO: Invocation ID: a0558523-cc05-4626-a804-a8d7d3c70e7b\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/DateTimeInterfaces:DateTimeInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/DateTimeInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/DateTimeInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/DateTimeInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/DateTimeInterfaces/libDateTimeInterfaces.a\nINFO: Elapsed time: 0.084s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:50.67112+01:00",
    "end_time": "2025-04-08T00:44:51.48423+01:00",
    "duration": "813.1085ms",
    "output": "INFO: Invocation ID: 907495b9-f7fb-4d2a-98bb-59555ccd9e15\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces:ErrorHandlingInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/ErrorHandlingInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/ErrorHandlingInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/ErrorHandlingInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorHandlingInterfaces/libErrorHandlingInterfaces.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:51.484239+01:00",
    "end_time": "2025-04-08T00:44:52.25169+01:00",
    "duration": "767.449459ms",
    "output": "INFO: Invocation ID: e9f1bf42-0c58-48d6-b971-dc225f57fea6\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces:ErrorLoggingInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/ErrorLoggingInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/ErrorLoggingInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/ErrorLoggingInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/ErrorLoggingInterfaces/libErrorLoggingInterfaces.a\nINFO: Elapsed time: 0.068s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:52.2517+01:00",
    "end_time": "2025-04-08T00:44:53.042551+01:00",
    "duration": "790.849ms",
    "output": "INFO: Invocation ID: 42dd175c-e5da-4203-962c-6854d86555ba\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/libFileSystemInterfaces.a\nINFO: Elapsed time: 0.083s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:53.042573+01:00",
    "end_time": "2025-04-08T00:44:53.812928+01:00",
    "duration": "770.352792ms",
    "output": "INFO: Invocation ID: 4435599a-91a1-4604-9958-169c0d4d0666\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/KeychainInterfaces:KeychainInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/KeychainInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/KeychainInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/KeychainInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/KeychainInterfaces/libKeychainInterfaces.a\nINFO: Elapsed time: 0.075s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:53.812944+01:00",
    "end_time": "2025-04-08T00:44:54.572118+01:00",
    "duration": "759.172583ms",
    "output": "INFO: Invocation ID: 7538fd7c-0306-413d-ade3-8d6d389a4b1d\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/LoggingInterfaces:LoggingInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingInterfaces/libLoggingInterfaces.a\nINFO: Elapsed time: 0.070s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:54.572132+01:00",
    "end_time": "2025-04-08T00:44:55.339074+01:00",
    "duration": "766.940666ms",
    "output": "INFO: Invocation ID: 81f2868d-9211-4df7-bea7-148aa20ee4f5\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces:LoggingWrapperInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/LoggingWrapperInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/LoggingWrapperInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/LoggingWrapperInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/LoggingWrapperInterfaces/libLoggingWrapperInterfaces.a\nINFO: Elapsed time: 0.070s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:55.339092+01:00",
    "end_time": "2025-04-08T00:44:56.344545+01:00",
    "duration": "1.005451583s",
    "output": "INFO: Invocation ID: d945c6b6-3ee1-4eb5-a6a3-c54158509cc4\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/NetworkInterfaces:NetworkInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/NetworkInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/NetworkInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/NetworkInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/NetworkInterfaces/libNetworkInterfaces.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:56.344572+01:00",
    "end_time": "2025-04-08T00:44:57.128397+01:00",
    "duration": "783.82425ms",
    "output": "INFO: Invocation ID: 4ea297f2-a0e6-4c57-b666-01730850b351\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/RepositoryInterfaces:RepositoryInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/RepositoryInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/RepositoryInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/RepositoryInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/RepositoryInterfaces/libRepositoryInterfaces.a\nINFO: Elapsed time: 0.077s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:57.128425+01:00",
    "end_time": "2025-04-08T00:44:57.938472+01:00",
    "duration": "810.044625ms",
    "output": "INFO: Invocation ID: f41c642a-ed08-4aab-9d37-cd0c7b03b696\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/ResticInterfaces:ResticInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/ResticInterfaces/libResticInterfaces.a\nINFO: Elapsed time: 0.081s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:57.93851+01:00",
    "end_time": "2025-04-08T00:44:58.709589+01:00",
    "duration": "771.077458ms",
    "output": "INFO: Invocation ID: c9142025-322a-4d82-ba36-05e7a09ce1b2\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/SecurityCoreInterfaces:SecurityCoreInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityCoreInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityCoreInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/SecurityCoreInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/libSecurityCoreInterfaces.a\nINFO: Elapsed time: 0.080s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces",
    "success": true,
    "start_time": "2025-04-08T00:44:58.709624+01:00",
    "end_time": "2025-04-08T00:44:59.465476+01:00",
    "duration": "755.850583ms",
    "output": "INFO: Invocation ID: 5abecedc-5f27-44a7-9836-084daad9be8e\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/SecurityInterfaces:SecurityInterfaces up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/SecurityInterfaces.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/SecurityInterfaces.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/SecurityInterfaces.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/SecurityInterfaces/libSecurityInterfaces.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore",
    "success": true,
    "start_time": "2025-04-08T00:44:59.46549+01:00",
    "end_time": "2025-04-08T00:45:00.242102+01:00",
    "duration": "776.610083ms",
    "output": "INFO: Invocation ID: b60e2775-40ba-4b87-86cc-91680c0475cc\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraInterfaces/Sources/XPCProtocolsCore:XPCProtocolsCore up-to-date:\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/XPCProtocolsCore.swiftdoc\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/XPCProtocolsCore.swiftmodule\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/XPCProtocolsCore.swiftsourceinfo\n  bazel-bin/packages/UmbraInterfaces/Sources/XPCProtocolsCore/libXPCProtocolsCore.a\nINFO: Elapsed time: 0.086s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  },
  {
    "target": "rule //packages/UmbraServices/Sources/LoggingServices:LoggingServices",
    "success": true,
    "start_time": "2025-04-08T00:45:00.242112+01:00",
    "end_time": "2025-04-08T00:45:01.014531+01:00",
    "duration": "772.417292ms",
    "output": "INFO: Invocation ID: f432efee-09c8-44d6-82ea-84b3072f0947\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: target //packages/UmbraServices/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\nAnalyzing: target //packages/UmbraServices/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed target //packages/UmbraServices/Sources/LoggingServices:LoggingServices (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //packages/UmbraServices/Sources/LoggingServices:LoggingServices up-to-date:\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/LoggingServices.swiftdoc\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/LoggingServices.swiftmodule\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/LoggingServices.swiftsourceinfo\n  bazel-bin/packages/UmbraServices/Sources/LoggingServices/libLoggingServices.a\nINFO: Elapsed time: 0.078s, Critical Path: 0.00s\nINFO: 1 process: 1 action cache hit, 1 internal.\nINFO: Build completed successfully, 1 total action\n"
  }
]