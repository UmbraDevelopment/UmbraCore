#!/bin/bash
# Script to run the security module removal tool

set -e

CYAN='\033[0;36m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"

# Show banner
echo -e "${CYAN}╔══════════════════════════════════════════════════════╗${NC}"
echo -e "${CYAN}║      UmbraCore Security Module Removal Script        ║${NC}"
echo -e "${CYAN}╚══════════════════════════════════════════════════════╝${NC}"
echo ""

# Check if Go is installed
if ! command -v go &> /dev/null; then
    echo -e "${RED}Error: Go is not installed. Please install Go before running this script.${NC}"
    exit 1
fi

# Compile the removal tool
echo -e "${GREEN}Compiling security module removal tool...${NC}"
cd "${SCRIPT_DIR}"
go build -o security_module_removal security_module_removal.go

if [ $? -ne 0 ]; then
    echo -e "${RED}Error: Failed to compile security_module_removal.go${NC}"
    exit 1
fi

# Check if the tool was built successfully
if [ ! -f "${SCRIPT_DIR}/security_module_removal" ]; then
    echo -e "${RED}Error: security_module_removal binary not found after compilation${NC}"
    exit 1
fi

# Make the binary executable
chmod +x "${SCRIPT_DIR}/security_module_removal"

# Run the tool with the provided arguments
echo -e "${GREEN}Running security module removal tool...${NC}"
echo -e "${YELLOW}NOTE: By default, this runs in dry-run mode. Add --dry-run=false to actually remove modules${NC}"
echo ""

"${SCRIPT_DIR}/security_module_removal" --project-root="${PROJECT_ROOT}" "$@"

# Check exit status of the tool
if [ $? -ne 0 ]; then
    echo -e "${RED}Error: security_module_removal tool failed${NC}"
    exit 1
fi

echo ""
echo -e "${GREEN}Security module removal script completed.${NC}"
echo -e "${GREEN}To view detailed logs, check the log file generated by the tool.${NC}"
