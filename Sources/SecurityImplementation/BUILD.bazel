load("//tools/build_defs:umbracore_module.bzl", "umbracore_foundation_free_module", "umbracore_module_test")
load("@build_bazel_rules_swift//swift:swift.bzl", "swift_test")

umbracore_foundation_free_module(
    name = "SecurityImplementation",
    visibility = ["//visibility:public"],
    deps = [
        "//Sources/SecurityProtocolsCore",
        "//Sources/SecureBytes",
        "//Sources/CryptoSwiftFoundationIndependent",
        "//Sources/CoreErrors",
        "//Sources/ErrorHandling/Domains:ErrorHandlingDomains",
        "//Sources/UmbraCoreTypes",
    ],
    copts = [
        "-target", "arm64-apple-macos14.7.4",
        "-swift-version", "6",
        "-g",
        "-O", # Enable optimizations
        "-cross-module-optimization", # Enable cross-module optimization
    ],
    srcs = glob(
        [
            "Sources/*.swift",
            "Sources/CryptoService/*.swift",
            "Sources/CryptoServices/Core/*.swift",
            "Sources/CryptoServices/Asymmetric/*.swift",
            "Sources/CryptoServices/Symmetric/*.swift",
            "Sources/CryptoServices/Hashing/*.swift",
            "Sources/Provider/*.swift",
            "Sources/KeyManagement/*.swift",
            "Sources/Utils/*.swift",
        ],
        # Exclude the top-level duplicates in favor of the organized structure
        exclude = [
            "Sources/CryptoServices/*.swift",
        ],
    ),
)

umbracore_module_test(
    name = "SecurityImplementationTests",
    deps = [
        ":SecurityImplementation",
        "//Sources/SecurityProtocolsCore",
        "//Sources/SecureBytes",
    ],
    copts = [
        "-target", "arm64-apple-macos14.7.4",
        "-swift-version", "6",
        "-g",
    ],
)

swift_test(
    name = "SecurityImplementationTests_runner",
    deps = [":SecurityImplementationTests"],
    visibility = ["//visibility:public"],
)
