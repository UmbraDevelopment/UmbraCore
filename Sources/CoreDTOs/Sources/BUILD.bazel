load("//bazel:swift_rules.bzl", "umbra_swift_library")

umbra_swift_library(
    name = "CoreDTOs",
    srcs = glob(
        [
            "*.swift",
            "**/*.swift",
        ],
        allow_empty = False,
        exclude = [
            "**/Tests/**",
            "**/*Test.swift",
            "**/*.generated.swift",
        ],
        exclude_directories = 1,
    ),
    visibility = ["//visibility:public"],
    deps = [
        # Removed dependency on deleted module
        # "//Sources/DTOFoundationConverters"
        # Removing circular dependency
        # "//Sources/SecurityInterfaces"
        # Removing circular dependency
        # "//Sources/UmbraSecurityBridge"
        "//Sources/CoreDTOs/Sources/Configuration",
        "//Sources/CoreDTOs/Sources/Converters",
        "//Sources/CoreDTOs/Sources/DateTime",
        "//Sources/CoreDTOs/Sources/FileSystem",
        "//Sources/CoreDTOs/Sources/Network",
        "//Sources/CoreDTOs/Sources/Notification",
        "//Sources/CoreDTOs/Sources/Operations",
        "//Sources/CoreDTOs/Sources/Progress",
        "//Sources/CoreDTOs/Sources/RepositoryManagement",
        "//Sources/CoreDTOs/Sources/Scheduling",
        "//Sources/CoreDTOs/Sources/Security",
        "//Sources/CoreDTOs/Sources/UserDefaults",
        "//Sources/ErrorHandling",
        "//Sources/ErrorHandlingDomains",
        "//Sources/ErrorHandlingInterfaces",
        "//Sources/FileSystemTypes",
        "//Sources/SecurityProtocolsCore",
        "//Sources/SecurityTypes",
        "//Sources/UmbraErrors",
        "//Sources/UmbraLogging",
    ],
)

# Uncomment if documentation generation is needed
# load("@build_bazel_rules_swift//swift:swift.bzl", "swift_library")
# load("@build_bazel_rules_swift//swift:swift.bzl", "swift_library")
# load("@rules_swift_package_manager//swiftpkg:defs.bzl", "swift_package")
# load("@rules_swift_package_manager//swiftpkg:defs.bzl", "swift_package")
# swift_package(
#     name = "docc_documentation"
