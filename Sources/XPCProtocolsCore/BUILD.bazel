load("//tools/build_defs:umbracore_module.bzl", "umbracore_foundation_free_module")
load("@build_bazel_rules_swift//swift:swift.bzl", "swift_test")
load("//:bazel/macros/swift.bzl", "umbra_swift_test")

umbracore_foundation_free_module(
    name = "XPCProtocolsCore",
    srcs = [
        # Core module definition
        "Sources/XPCProtocolsCore.swift",
        
        # Protocol hierarchy
        "Sources/XPCServiceProtocolBasic.swift",
        "Sources/XPCServiceProtocolStandard.swift",
        "Sources/XPCServiceProtocolComplete.swift",
        
        # Error handling and utilities
        "Sources/XPCErrorHandling.swift",
        "Sources/XPCProtocolTypeDefs.swift",
        "Sources/XPCProtocolExtensions.swift",
        
        # Adapters
        "Sources/Adapters/CryptoXPCServiceAdapter.swift",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//Sources/UmbraCoreTypes",
        "//Sources/CoreErrors",           # Required for error handling
        "//Sources/ErrorHandling",        # Required for error handling
    ],
    copts = [
        "-target", "arm64-apple-macos15.4",
        # Enabling library evolution for binary compatibility
        "-Xfrontend", "-enable-library-evolution",
        "-g",
        "-swift-version", "5",
    ],
)

umbra_swift_test(
    name = "XPCProtocolsCoreTests",
    srcs = glob(["Tests/**/*.swift"]),
    module_name = "XPCProtocolsCoreTests",
    deps = [
        ":XPCProtocolsCore",
        "//Sources/UmbraCoreTypes",  # Using SecureBytes from UmbraCoreTypes, not the standalone module
        "//Sources/SecurityInterfaces",
        "//Sources/SecurityInterfacesBase",
        "//Sources/SecurityInterfacesProtocols",
    ],
)
