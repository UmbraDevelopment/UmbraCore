# Error handling improvements:
# This module has been updated to use fully qualified error types instead of typealiases.
# All error mapping should follow the UmbraErrors.* canonical hierarchy.
# Ensure proper error propagation and mapping when adding new code.

load("//bazel:swift_rules.bzl", "umbra_swift_library")

umbra_swift_library(
    name = "CryptoTypes",
    srcs = glob(
        [
            "*.swift",
            "**/*.swift"
        ],
        allow_empty = False,
        exclude = [
            "**/Tests/**",
            "**/*Test.swift",
            "**/*.generated.swift"
        ],
        exclude_directories = 1,
    ),
    deps = [
        # Removed direct dependency on XPCProtocolsCore to break circular dependency
        # "//Sources/XPCProtocolsCore"
        # Other possible dependencies based on other files in this module:
        # "//Sources/CoreDTOs"
        "//Sources/Security/Core/Types/Bridge:SecurityBridgeTypes",
        "//Sources/UmbraSecurityBridge",
        "//Sources/SecurityProtocolsCore/Sources:SecurityProtocolsCore",
        "//Sources/UmbraCoreTypes/Sources:UmbraCoreTypes",
        "//Sources/UmbraErrors/Core:UmbraErrorsCore",  # Only depend on UmbraErrorsCore
        "//Sources/UmbraLogging"
    ],
)

# Create a forward declaration interface target that just declares the protocols/types needed from XPC
umbra_swift_library(
    name = "CryptoTypesInterfaces",
    srcs = ["Interfaces/XPCInterfaces.swift"],
    visibility = ["//visibility:public"],
)

# Uncomment if documentation generation is needed
# load("@build_bazel_rules_swift//swift:swift.bzl", "swift_library")
# load("@build_bazel_rules_swift//swift:swift.bzl", "swift_library")
# load("@rules_swift_package_manager//swiftpkg:defs.bzl", "swift_package")
# load("@rules_swift_package_manager//swiftpkg:defs.bzl", "swift_package")
# swift_package(
#     name = "docc_documentation"
#     srcs = glob([
#     srcs = glob([
#         "**/*.swift"
#         "**/*.docc/**"
#     ])
#     ])
# deps = [
#     # Dependencies would go here"//Sources/CryptoTypes"]
# deps = [
#     # Dependencies would go here"//Sources/CryptoTypes"]
# deps = [
#     # Dependencies would go here"//Sources/CryptoTypes"]
# deps = [
#     # Dependencies would go here"//Sources/CryptoTypes"]
# )
