load("//bazel:swift_rules.bzl", "umbra_swift_library")

umbra_swift_library(
    name = "DTOs",
    srcs = glob(
        [
            "*.swift",
            "**/*.swift"
        ],
        allow_empty = False,
        exclude = [
            "**/Tests/**",
            "**/*Test.swift",
            "**/*.generated.swift"
        ],
        exclude_directories = 1,
    ),
    visibility = ["//visibility:public"],
    deps = [
        "//Sources/CoreDTOs",
        "//Sources/SecurityTypes",
        "//Sources/UmbraErrors/Core:UmbraErrorsCore"
    ],
)

# Create an alias that makes this module available for imports
alias(
    name = "UmbraErrorsDTOs",
    actual = ":DTOs",
    visibility = ["//visibility:public"],
)

# Uncomment if documentation generation is needed
# load("@build_bazel_rules_swift//swift:swift.bzl", "swift_library")
# load("@build_bazel_rules_swift//swift:swift.bzl", "swift_library")
# load("@rules_swift_package_manager//swiftpkg:defs.bzl", "swift_package")
# load("@rules_swift_package_manager//swiftpkg:defs.bzl", "swift_package")
# swift_package(
#     name = "docc_documentation",
#     srcs = glob([
#     srcs = glob([
#         "**/*.swift",
#         "**/*.docc/**",
#     ]),
#     ]),
# deps = [
#     # Dependencies would go here"//Sources/UmbraErrors/DTOs"],
# deps = [
#     # Dependencies would go here"//Sources/UmbraErrors/DTOs"],
# deps = [
#     # Dependencies would go here"//Sources/UmbraErrors/DTOs"],
# deps = [
#     # Dependencies would go here"//Sources/UmbraErrors/DTOs"],
# )
