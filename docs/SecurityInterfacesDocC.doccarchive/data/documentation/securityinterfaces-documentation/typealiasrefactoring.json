{"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/dev.mpy.SecurityInterfaces\/documentation\/SecurityInterfaces-Documentation\/TypealiasRefactoring"},"hierarchy":{"paths":[["doc:\/\/dev.mpy.SecurityInterfaces\/documentation\/SecurityInterfaces-Documentation"]]},"abstract":[{"text":"Learn how to refactor typealiases in the SecurityInterfaces module to improve type clarity.","type":"text"}],"seeAlsoSections":[{"identifiers":["doc:\/\/dev.mpy.SecurityInterfaces\/documentation\/SecurityInterfaces-Documentation\/ErrorHandlingGuide"],"title":"Related Documentation","anchor":"Related-Documentation"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"UmbraCore is undergoing a typealias refactoring initiative to improve code clarity and maintainability. This guide explains how to properly refactor typealiases in the SecurityInterfaces module."}]},{"anchor":"Identifying-Typealiases","level":2,"type":"heading","text":"Identifying Typealiases"},{"type":"paragraph","inlineContent":[{"type":"text","text":"SecurityInterfaces may contain several types of typealiases:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Simple aliasing"}]},{"type":"text","text":" - Basic renaming of types"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Cross-module references","type":"text"}]},{"type":"text","text":" - Aliasing types from other modules"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Generic specializations"}]},{"type":"text","text":" - Creating specific versions of generic types"}]}]}]},{"anchor":"Refactoring-Process","level":2,"type":"heading","text":"Refactoring Process"},{"anchor":"Step-1-Identify-Typealiases","level":3,"type":"heading","text":"Step 1: Identify Typealiases"},{"type":"paragraph","inlineContent":[{"text":"Find typealiases in the module using grep:","type":"text"}]},{"syntax":"bash","type":"codeListing","code":["grep -r \"typealias\" Sources\/SecurityInterfaces"]},{"anchor":"Step-2-Evaluate-Each-Typealias","level":3,"type":"heading","text":"Step 2: Evaluate Each Typealias"},{"type":"paragraph","inlineContent":[{"text":"For each typealias, determine if it:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Serves a necessary purpose (e.g., bridging external APIs)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Could be replaced with direct references","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Requires a deprecation path","type":"text"}]}]}]},{"anchor":"Step-3-Direct-Replacement","level":3,"type":"heading","text":"Step 3: Direct Replacement"},{"type":"paragraph","inlineContent":[{"text":"Replace typealiases with direct references to the original types:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Before","public typealias SecurityResult = Result<Void, SecurityInterfacesError>","","\/\/ After - use the full type directly","func performOperation() -> Result<Void, SecurityInterfacesError> {","    \/\/ Implementation","}"]},{"anchor":"Step-4-Import-Management","level":3,"type":"heading","text":"Step 4: Import Management"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure proper imports are included when replacing typealiases:"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ May need to add imports that were previously hidden by typealiases","import UmbraCoreTypes"]},{"anchor":"Step-5-Documentation","level":3,"type":"heading","text":"Step 5: Documentation"},{"type":"paragraph","inlineContent":[{"text":"Update documentation to reference actual types:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/\/ Performs security validation","\/\/\/ - Returns: A `Result<Void, SecurityInterfacesError>` indicating success or failure","func validate() -> Result<Void, SecurityInterfacesError>"]},{"anchor":"Example-XPC-Error-Handling","level":2,"type":"heading","text":"Example: XPC Error Handling"},{"anchor":"Before-Refactoring","level":3,"type":"heading","text":"Before Refactoring"},{"syntax":"swift","type":"codeListing","code":["\/\/ In some file","public typealias XPCSecurityError = UmbraCoreTypes.CESecurityError","","\/\/ In usage","func handleError(_ error: XPCSecurityError) {","    \/\/ Implementation","}"]},{"anchor":"After-Refactoring","level":3,"type":"heading","text":"After Refactoring"},{"syntax":"swift","type":"codeListing","code":["\/\/ Remove typealias entirely","","\/\/ In usage - use the direct type","import UmbraCoreTypes","","func handleError(_ error: UmbraCoreTypes.CESecurityError) {","    \/\/ Implementation","}"]}]}],"metadata":{"roleHeading":"Article","role":"article","title":"Typealias Refactoring Guide"},"references":{"doc://dev.mpy.SecurityInterfaces/documentation/SecurityInterfaces-Documentation":{"url":"\/documentation\/securityinterfaces-documentation","identifier":"doc:\/\/dev.mpy.SecurityInterfaces\/documentation\/SecurityInterfaces-Documentation","type":"topic","role":"collection","title":"SecurityInterfaces Documentation","kind":"article","abstract":[]},"doc://dev.mpy.SecurityInterfaces/documentation/SecurityInterfaces-Documentation/ErrorHandlingGuide":{"type":"topic","role":"article","url":"\/documentation\/securityinterfaces-documentation\/errorhandlingguide","abstract":[{"text":"Learn how to properly handle errors in the SecurityInterfaces module.","type":"text"}],"kind":"article","identifier":"doc:\/\/dev.mpy.SecurityInterfaces\/documentation\/SecurityInterfaces-Documentation\/ErrorHandlingGuide","title":"Handling Security Errors"}}}