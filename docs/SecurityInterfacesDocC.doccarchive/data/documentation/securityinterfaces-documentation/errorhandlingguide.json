{"kind":"article","hierarchy":{"paths":[["doc:\/\/dev.mpy.SecurityInterfaces\/documentation\/SecurityInterfaces-Documentation"]]},"metadata":{"roleHeading":"Article","title":"Handling Security Errors","role":"article"},"abstract":[{"text":"Learn how to properly handle errors in the SecurityInterfaces module.","type":"text"}],"sections":[],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/dev.mpy.SecurityInterfaces\/documentation\/SecurityInterfaces-Documentation\/SecurityErrorMigration"],"anchor":"Related-Documentation"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The SecurityInterfaces module uses a structured approach to error handling with the "},{"type":"codeVoice","code":"SecurityInterfacesError"},{"type":"text","text":" type. This guide will help you understand how to handle these errors properly in your code."}]},{"anchor":"Error-Types","type":"heading","level":2,"text":"Error Types"},{"type":"paragraph","inlineContent":[{"text":"The module uses several error types in different contexts:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"code":"SecurityInterfacesError","type":"codeVoice"},{"text":": For module-level security errors","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"UmbraErrors.Security.Core","type":"codeVoice"},{"text":": For core security errors defined in UmbraCoreTypes","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"XPCError","type":"codeVoice"},{"text":": For XPC communication errors","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Error-Conversion-Flow","type":"heading","level":2,"text":"Error Conversion Flow"},{"code":["UmbraErrors.Security.Core <---> SecurityInterfacesError ---> LocalizedError (for user-facing messages)"],"syntax":null,"type":"codeListing"},{"anchor":"Best-Practices","type":"heading","level":2,"text":"Best Practices"},{"anchor":"Converting-Between-Error-Types","type":"heading","level":3,"text":"Converting Between Error Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When working with security components that use different error types, convert between them using the appropriate methods:"}]},{"code":["\/\/ Converting from core error to interface error","let coreError: UmbraErrors.Security.Core = .authenticationFailed","let interfaceError = SecurityInterfacesError(from: coreError)","","\/\/ Converting back to core error if possible","if let convertedCoreError = interfaceError.toCoreError() {","    \/\/ Handle core error","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Categorizing-Errors","type":"heading","level":3,"text":"Categorizing Errors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When catching errors, itâ€™s helpful to categorize them based on their type:"}]},{"code":["do {","    try securityProvider.authenticate(user: username, password: password)","} catch let error as SecurityInterfacesError {","    switch error {","    case .authenticationFailed, .authorizationFailed:","        \/\/ Handle authentication errors","    case .encryptionFailed, .decryptionFailed:","        \/\/ Handle cryptographic errors","    case let .wrapped(coreError):","        \/\/ Handle wrapped core errors","    default:","        \/\/ Handle other errors","    }","} catch {","    \/\/ Handle non-security errors","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Error-Reporting","type":"heading","level":3,"text":"Error Reporting"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For logging and analytics, include enough context to understand the error without exposing sensitive information:"}]},{"code":["func handleSecurityError(_ error: SecurityInterfacesError) {","    \/\/ Log appropriate context but not sensitive data","    switch error {","    case .bookmarkCreationFailed(let path):","        log.error(\"Failed to create bookmark for path: \\(path.lastPathComponent)\")","    case .encryptionFailed(let reason):","        log.error(\"Encryption failed: \\(reason)\")","    default:","        log.error(\"Security error: \\(error.localizedDescription)\")","    }","}"],"syntax":"swift","type":"codeListing"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/dev.mpy.SecurityInterfaces\/documentation\/SecurityInterfaces-Documentation\/ErrorHandlingGuide"},"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://dev.mpy.SecurityInterfaces/documentation/SecurityInterfaces-Documentation":{"url":"\/documentation\/securityinterfaces-documentation","identifier":"doc:\/\/dev.mpy.SecurityInterfaces\/documentation\/SecurityInterfaces-Documentation","type":"topic","role":"collection","title":"SecurityInterfaces Documentation","kind":"article","abstract":[]},"doc://dev.mpy.SecurityInterfaces/documentation/SecurityInterfaces-Documentation/SecurityErrorMigration":{"title":"Security Error Migration Guide","kind":"article","url":"\/documentation\/securityinterfaces-documentation\/securityerrormigration","abstract":[{"text":"Learn how to migrate between different error types in the UmbraCore security stack.","type":"text"}],"role":"article","type":"topic","identifier":"doc:\/\/dev.mpy.SecurityInterfaces\/documentation\/SecurityInterfaces-Documentation\/SecurityErrorMigration"}}}