import Foundation

final class KeychainXPCConnection {
    private var connection: NSXPCConnection?
    private let queue = DispatchQueue(label: "com.umbracore.keychain.connection",
                                    qos: .userInitiated)
    private let semaphore = DispatchSemaphore(value: 1)
    
    func connect() throws -> any KeychainXPCProtocol {
        semaphore.wait()
        defer { semaphore.signal() }
        
        // Check existing connection
        if let existingConnection = connection,
           let proxy = existingConnection.remoteObjectProxy as? any KeychainXPCProtocol {
            return proxy
        }
        
        // Create new connection
        let newConnection = NSXPCConnection(serviceName: "com.umbracore.keychain")
        newConnection.remoteObjectInterface = NSXPCInterface(with: KeychainXPCProtocol.self)
        
        // Set up error handling
        newConnection.invalidationHandler = { [weak self] in
            self?.handleConnectionError()
        }
        
        newConnection.interruptionHandler = { [weak self] in
            self?.handleConnectionError()
        }
        
        // Start the connection
        newConnection.resume()
        
        guard let proxy = newConnection.remoteObjectProxy as? any KeychainXPCProtocol else {
            throw KeychainError.xpcConnectionFailed
        }
        
        connection = newConnection
        return proxy
    }
    
    private func handleConnectionError() {
        semaphore.wait()
        defer { semaphore.signal() }
        
        if let connection = connection {
            connection.invalidate()
        }
        connection = nil
    }
    
    func disconnect() {
        semaphore.wait()
        defer { semaphore.signal() }
        
        if let connection = connection {
            connection.invalidate()
        }
        connection = nil
    }
    
    deinit {
        disconnect()
    }
}

// MARK: - Async Extensions
extension KeychainXPCProtocol {
    func addItem(_ data: Data,
                 account: String,
                 service: String,
                 accessGroup: String?,
                 accessibility: String,
                 flags: Int) async throws {
        return try await withCheckedThrowingContinuation { (continuation: CheckedContinuation<Void, Error>) in
            self.addItem(data,
                        account: account,
                        service: service,
                        accessGroup: accessGroup,
                        accessibility: accessibility,
                        flags: flags) { error in
                if let error = error {
                    continuation.resume(throwing: error)
                } else {
                    continuation.resume()
                }
            }
        }
    }
    
    func readItem(account: String,
                  service: String,
                  accessGroup: String?) async throws -> Data {
        return try await withCheckedThrowingContinuation { (continuation: CheckedContinuation<Data, Error>) in
            self.readItem(account: account,
                         service: service,
                         accessGroup: accessGroup) { data, error in
                if let error = error {
                    continuation.resume(throwing: error)
                } else if let data = data {
                    continuation.resume(returning: data)
                } else {
                    continuation.resume(throwing: KeychainError.itemNotFound)
                }
            }
        }
    }
    
    func updateItem(_ data: Data,
                    account: String,
                    service: String,
                    accessGroup: String?) async throws {
        return try await withCheckedThrowingContinuation { (continuation: CheckedContinuation<Void, Error>) in
            self.updateItem(data,
                          account: account,
                          service: service,
                          accessGroup: accessGroup) { error in
                if let error = error {
                    continuation.resume(throwing: error)
                } else {
                    continuation.resume()
                }
            }
        }
    }
    
    func deleteItem(account: String,
                    service: String,
                    accessGroup: String?) async throws {
        return try await withCheckedThrowingContinuation { (continuation: CheckedContinuation<Void, Error>) in
            self.deleteItem(account: account,
                          service: service,
                          accessGroup: accessGroup) { error in
                if let error = error {
                    continuation.resume(throwing: error)
                } else {
                    continuation.resume()
                }
            }
        }
    }
    
    func containsItem(account: String,
                      service: String,
                      accessGroup: String?) async throws -> Bool {
        return try await withCheckedThrowingContinuation { (continuation: CheckedContinuation<Bool, Error>) in
            self.containsItem(account: account,
                            service: service,
                            accessGroup: accessGroup) { exists, error in
                if let error = error {
                    continuation.resume(throwing: error)
                } else {
                    continuation.resume(returning: exists)
                }
            }
        }
    }
}
