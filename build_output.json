{
  "timestamp": "2025-04-03T00:04:36.485291",
  "return_code": 1,
  "success": false,
  "output_lines": [
    "INFO: Invocation ID: 2a5b9f59-0975-4fd9-b911-cce9936600bf",
    "Computing main repo mapping: ",
    "Loading: ",
    "Loading: 0 packages loaded",
    "Analyzing: 92 targets (0 packages loaded, 0 targets configured)",
    "Analyzing: 92 targets (0 packages loaded, 0 targets configured)",
    "",
    "INFO: Analyzed 92 targets (0 packages loaded, 0 targets configured).",
    "ERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols) ",
    "  (cd /Users/mpy/.bazel/execroot/_main && \\",
    "  exec env - \\",
    "    APPLE_SDK_PLATFORM=MacOSX \\",
    "    APPLE_SDK_VERSION_OVERRIDE=15.4 \\",
    "    CC=clang \\",
    "    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\",
    "    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\",
    "  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftmodule-0.params)",
    "# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa",
    "# Execution platform: @@platforms//host:host",
    "error: emit-module command failed with exit code 1 (use -v to see invocation)",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/RandomDataServiceProtocol.swift:11:34: error: cannot find type 'RandomizationOptionsDTO' in scope",
    " 9 |   /// - Parameter configuration: Configuration options for random data generation",
    "10 |   /// - Throws: SecurityError if initialisation fails",
    "11 |   func initialise(configuration: RandomizationOptionsDTO) async throws",
    "   |                                  `- error: cannot find type 'RandomizationOptionsDTO' in scope",
    "12 | ",
    "13 |   /// Generates a random double value between 0.0 and 1.0",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:32:46: error: no type named 'Security' in module 'UmbraErrors'",
    " 30 |     for url: URL,",
    " 31 |     readOnly: Bool",
    " 32 |   ) async -> Result<SecureBytes, UmbraErrors.Security.Bookmark>",
    "    |                                              `- error: no type named 'Security' in module 'UmbraErrors'",
    " 33 | ",
    " 34 |   /**",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:43:46: error: no type named 'Security' in module 'UmbraErrors'",
    " 41 |   func resolveBookmark(",
    " 42 |     _ bookmarkData: SecureBytes",
    " 43 |   ) async -> Result<(URL, Bool), UmbraErrors.Security.Bookmark>",
    "    |                                              `- error: no type named 'Security' in module 'UmbraErrors'",
    " 44 | ",
    " 45 |   /**",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:42:21: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    " 40 |    */",
    " 41 |   func resolveBookmark(",
    " 42 |     _ bookmarkData: SecureBytes",
    "    |                     `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    " 43 |   ) async -> Result<(URL, Bool), UmbraErrors.Security.Bookmark>",
    " 44 | ",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:54:39: error: no type named 'Security' in module 'UmbraErrors'",
    " 52 |   func startAccessing(",
    " 53 |     _ url: URL",
    " 54 |   ) async -> Result<Bool, UmbraErrors.Security.Bookmark>",
    "    |                                       `- error: no type named 'Security' in module 'UmbraErrors'",
    " 55 | ",
    " 56 |   /**",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:65:38: error: no type named 'Security' in module 'UmbraErrors'",
    " 63 |   func stopAccessing(",
    " 64 |     _ url: URL",
    " 65 |   ) async -> Result<Int, UmbraErrors.Security.Bookmark>",
    "    |                                      `- error: no type named 'Security' in module 'UmbraErrors'",
    " 66 | ",
    " 67 |   /**",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:82:21: error: cannot find type 'BookmarkValidationResultDTO' in scope",
    " 80 |     _ bookmarkData: SecureBytes,",
    " 81 |     recreateIfStale: Bool",
    " 82 |   ) async -> Result<BookmarkValidationResultDTO, UmbraErrors.Security.Bookmark>",
    "    |                     `- error: cannot find type 'BookmarkValidationResultDTO' in scope",
    " 83 | ",
    " 84 |   /**",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:80:21: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    " 78 |    */",
    " 79 |   func validateBookmark(",
    " 80 |     _ bookmarkData: SecureBytes,",
    "    |                     `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    " 81 |     recreateIfStale: Bool",
    " 82 |   ) async -> Result<BookmarkValidationResultDTO, UmbraErrors.Security.Bookmark>",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:15:44: error: cannot find type 'SecurityErrorDTO' in scope",
    "13 |   /// - Returns: True if the provider is available, false otherwise",
    "14 |   /// - Throws: SecurityError if the check fails",
    "15 |   func isAvailable() async -> Result<Bool, SecurityErrorDTO>",
    "   |                                            `- error: cannot find type 'SecurityErrorDTO' in scope",
    "16 | ",
    "17 |   /// Get the provider's version information",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:30:51: error: cannot find type 'SecurityErrorDTO' in scope",
    "28 | ",
    "29 |   /// Default implementation that assumes the provider is available",
    "30 |   public func isAvailable() async -> Result<Bool, SecurityErrorDTO> {",
    "   |                                                   `- error: cannot find type 'SecurityErrorDTO' in scope",
    "31 |     .success(true)",
    "32 |   }",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:42:29: error: cannot find type 'SecurityProviderProtocol' in scope",
    "40 | /// Adapter class to convert between SecurityProviderProtocol and SecurityProviderBase",
    "41 | public final class SecurityProviderBaseAdapter: SecurityProviderBase {",
    "42 |   private let provider: any SecurityProviderProtocol",
    "   |                             `- error: cannot find type 'SecurityProviderProtocol' in scope",
    "43 | ",
    "44 |   /// Initialise with a security provider",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:46:29: error: cannot find type 'SecurityProviderProtocol' in scope",
    "44 |   /// Initialise with a security provider",
    "45 |   /// - Parameter provider: The provider to adapt",
    "46 |   public init(provider: any SecurityProviderProtocol) {",
    "   |                             `- error: cannot find type 'SecurityProviderProtocol' in scope",
    "47 |     self.provider=provider",
    "48 |   }",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:54:51: error: cannot find type 'SecurityErrorDTO' in scope",
    "52 |   }",
    "53 | ",
    "54 |   public func isAvailable() async -> Result<Bool, SecurityErrorDTO> {",
    "   |                                                   `- error: cannot find type 'SecurityErrorDTO' in scope",
    "55 |     // Simply return success as the underlying provider is assumed to be available",
    "56 |     .success(true)",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:13:34: error: cannot find type 'SecurityConfigurationDTO' in scope",
    "11 |   /// - Parameter configuration: Configuration options for the security service",
    "12 |   /// - Throws: SecurityError if initialisation fails",
    "13 |   func initialise(configuration: SecurityConfigurationDTO) async throws",
    "   |                                  `- error: cannot find type 'SecurityConfigurationDTO' in scope",
    "14 | ",
    "15 |   /// Secures data according to the security policy defined in the security context",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:21:53: error: cannot find type 'SecurityContextDTO' in scope",
    "19 |   /// - Returns: The secured data",
    "20 |   /// - Throws: SecurityError if the operation fails",
    "21 |   func secureData(_ data: [UInt8], securityContext: SecurityContextDTO) async throws -> [UInt8]",
    "   |                                                     `- error: cannot find type 'SecurityContextDTO' in scope",
    "22 | ",
    "23 |   /// Retrieves secured data according to the security policy defined in the security context",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:31:22: error: cannot find type 'SecurityContextDTO' in scope",
    "29 |   func retrieveSecuredData(",
    "30 |     _ securedData: [UInt8],",
    "31 |     securityContext: SecurityContextDTO",
    "   |                      `- error: cannot find type 'SecurityContextDTO' in scope",
    "32 |   ) async throws -> [UInt8]",
    "33 | ",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:57:14: error: cannot find type 'SecurityContextDTO' in scope",
    "55 |     _ data: [UInt8],",
    "56 |     verification: [UInt8],",
    "57 |     context: SecurityContextDTO",
    "   |              `- error: cannot find type 'SecurityContextDTO' in scope",
    "58 |   ) async throws -> Bool",
    "59 | ",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:62:30: error: cannot find type 'SecurityVersionDTO' in scope",
    "60 |   /// Returns version information about the security service",
    "61 |   /// - Returns: Version information as a DTO",
    "62 |   func getVersion() async -> SecurityVersionDTO",
    "   |                              `- error: cannot find type 'SecurityVersionDTO' in scope",
    "63 | ",
    "64 |   /// Subscribes to security events matching the given filter",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:67:73: error: cannot find type 'SecurityEventDTO' in scope",
    "65 |   /// - Parameter filter: Filter criteria for events",
    "66 |   /// - Returns: An async stream of security events",
    "67 |   func subscribeToEvents(filter: SecurityEventFilterDTO) -> AsyncStream<SecurityEventDTO>",
    "   |                                                                         `- error: cannot find type 'SecurityEventDTO' in scope",
    "68 | }",
    "69 | ",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:67:34: error: cannot find type 'SecurityEventFilterDTO' in scope",
    "65 |   /// - Parameter filter: Filter criteria for events",
    "66 |   /// - Returns: An async stream of security events",
    "67 |   func subscribeToEvents(filter: SecurityEventFilterDTO) -> AsyncStream<SecurityEventDTO>",
    "   |                                  `- error: cannot find type 'SecurityEventFilterDTO' in scope",
    "68 | }",
    "69 | ",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/RandomDataServiceProtocol.swift:11:34: error: cannot find type 'RandomizationOptionsDTO' in scope",
    " 9 |   /// - Parameter configuration: Configuration options for random data generation",
    "10 |   /// - Throws: SecurityError if initialisation fails",
    "11 |   func initialise(configuration: RandomizationOptionsDTO) async throws",
    "   |                                  `- error: cannot find type 'RandomizationOptionsDTO' in scope",
    "12 | ",
    "13 |   /// Generates a random double value between 0.0 and 1.0",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:32:46: error: no type named 'Security' in module 'UmbraErrors'",
    " 30 |     for url: URL,",
    " 31 |     readOnly: Bool",
    " 32 |   ) async -> Result<SecureBytes, UmbraErrors.Security.Bookmark>",
    "    |                                              `- error: no type named 'Security' in module 'UmbraErrors'",
    " 33 | ",
    " 34 |   /**",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:43:46: error: no type named 'Security' in module 'UmbraErrors'",
    " 41 |   func resolveBookmark(",
    " 42 |     _ bookmarkData: SecureBytes",
    " 43 |   ) async -> Result<(URL, Bool), UmbraErrors.Security.Bookmark>",
    "    |                                              `- error: no type named 'Security' in module 'UmbraErrors'",
    " 44 | ",
    " 45 |   /**",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:42:21: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    " 40 |    */",
    " 41 |   func resolveBookmark(",
    " 42 |     _ bookmarkData: SecureBytes",
    "    |                     `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    " 43 |   ) async -> Result<(URL, Bool), UmbraErrors.Security.Bookmark>",
    " 44 | ",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:54:39: error: no type named 'Security' in module 'UmbraErrors'",
    " 52 |   func startAccessing(",
    " 53 |     _ url: URL",
    " 54 |   ) async -> Result<Bool, UmbraErrors.Security.Bookmark>",
    "    |                                       `- error: no type named 'Security' in module 'UmbraErrors'",
    " 55 | ",
    " 56 |   /**",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:65:38: error: no type named 'Security' in module 'UmbraErrors'",
    " 63 |   func stopAccessing(",
    " 64 |     _ url: URL",
    " 65 |   ) async -> Result<Int, UmbraErrors.Security.Bookmark>",
    "    |                                      `- error: no type named 'Security' in module 'UmbraErrors'",
    " 66 | ",
    " 67 |   /**",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:82:21: error: cannot find type 'BookmarkValidationResultDTO' in scope",
    " 80 |     _ bookmarkData: SecureBytes,",
    " 81 |     recreateIfStale: Bool",
    " 82 |   ) async -> Result<BookmarkValidationResultDTO, UmbraErrors.Security.Bookmark>",
    "    |                     `- error: cannot find type 'BookmarkValidationResultDTO' in scope",
    " 83 | ",
    " 84 |   /**",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:80:21: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    " 78 |    */",
    " 79 |   func validateBookmark(",
    " 80 |     _ bookmarkData: SecureBytes,",
    "    |                     `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    " 81 |     recreateIfStale: Bool",
    " 82 |   ) async -> Result<BookmarkValidationResultDTO, UmbraErrors.Security.Bookmark>",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:15:44: error: cannot find type 'SecurityErrorDTO' in scope",
    "13 |   /// - Returns: True if the provider is available, false otherwise",
    "14 |   /// - Throws: SecurityError if the check fails",
    "15 |   func isAvailable() async -> Result<Bool, SecurityErrorDTO>",
    "   |                                            `- error: cannot find type 'SecurityErrorDTO' in scope",
    "16 | ",
    "17 |   /// Get the provider's version information",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:30:51: error: cannot find type 'SecurityErrorDTO' in scope",
    "28 | ",
    "29 |   /// Default implementation that assumes the provider is available",
    "30 |   public func isAvailable() async -> Result<Bool, SecurityErrorDTO> {",
    "   |                                                   `- error: cannot find type 'SecurityErrorDTO' in scope",
    "31 |     .success(true)",
    "32 |   }",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:42:29: error: cannot find type 'SecurityProviderProtocol' in scope",
    "40 | /// Adapter class to convert between SecurityProviderProtocol and SecurityProviderBase",
    "41 | public final class SecurityProviderBaseAdapter: SecurityProviderBase {",
    "42 |   private let provider: any SecurityProviderProtocol",
    "   |                             `- error: cannot find type 'SecurityProviderProtocol' in scope",
    "43 | ",
    "44 |   /// Initialise with a security provider",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:46:29: error: cannot find type 'SecurityProviderProtocol' in scope",
    "44 |   /// Initialise with a security provider",
    "45 |   /// - Parameter provider: The provider to adapt",
    "46 |   public init(provider: any SecurityProviderProtocol) {",
    "   |                             `- error: cannot find type 'SecurityProviderProtocol' in scope",
    "47 |     self.provider=provider",
    "48 |   }",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:54:51: error: cannot find type 'SecurityErrorDTO' in scope",
    "52 |   }",
    "53 | ",
    "54 |   public func isAvailable() async -> Result<Bool, SecurityErrorDTO> {",
    "   |                                                   `- error: cannot find type 'SecurityErrorDTO' in scope",
    "55 |     // Simply return success as the underlying provider is assumed to be available",
    "56 |     .success(true)",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:13:34: error: cannot find type 'SecurityConfigurationDTO' in scope",
    "11 |   /// - Parameter configuration: Configuration options for the security service",
    "12 |   /// - Throws: SecurityError if initialisation fails",
    "13 |   func initialise(configuration: SecurityConfigurationDTO) async throws",
    "   |                                  `- error: cannot find type 'SecurityConfigurationDTO' in scope",
    "14 | ",
    "15 |   /// Secures data according to the security policy defined in the security context",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:21:53: error: cannot find type 'SecurityContextDTO' in scope",
    "19 |   /// - Returns: The secured data",
    "20 |   /// - Throws: SecurityError if the operation fails",
    "21 |   func secureData(_ data: [UInt8], securityContext: SecurityContextDTO) async throws -> [UInt8]",
    "   |                                                     `- error: cannot find type 'SecurityContextDTO' in scope",
    "22 | ",
    "23 |   /// Retrieves secured data according to the security policy defined in the security context",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:31:22: error: cannot find type 'SecurityContextDTO' in scope",
    "29 |   func retrieveSecuredData(",
    "30 |     _ securedData: [UInt8],",
    "31 |     securityContext: SecurityContextDTO",
    "   |                      `- error: cannot find type 'SecurityContextDTO' in scope",
    "32 |   ) async throws -> [UInt8]",
    "33 | ",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:57:14: error: cannot find type 'SecurityContextDTO' in scope",
    "55 |     _ data: [UInt8],",
    "56 |     verification: [UInt8],",
    "57 |     context: SecurityContextDTO",
    "   |              `- error: cannot find type 'SecurityContextDTO' in scope",
    "58 |   ) async throws -> Bool",
    "59 | ",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:62:30: error: cannot find type 'SecurityVersionDTO' in scope",
    "60 |   /// Returns version information about the security service",
    "61 |   /// - Returns: Version information as a DTO",
    "62 |   func getVersion() async -> SecurityVersionDTO",
    "   |                              `- error: cannot find type 'SecurityVersionDTO' in scope",
    "63 | ",
    "64 |   /// Subscribes to security events matching the given filter",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:67:73: error: cannot find type 'SecurityEventDTO' in scope",
    "65 |   /// - Parameter filter: Filter criteria for events",
    "66 |   /// - Returns: An async stream of security events",
    "67 |   func subscribeToEvents(filter: SecurityEventFilterDTO) -> AsyncStream<SecurityEventDTO>",
    "   |                                                                         `- error: cannot find type 'SecurityEventDTO' in scope",
    "68 | }",
    "69 | ",
    "",
    "packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:67:34: error: cannot find type 'SecurityEventFilterDTO' in scope",
    "65 |   /// - Parameter filter: Filter criteria for events",
    "66 |   /// - Returns: An async stream of security events",
    "67 |   func subscribeToEvents(filter: SecurityEventFilterDTO) -> AsyncStream<SecurityEventDTO>",
    "   |                                  `- error: cannot find type 'SecurityEventFilterDTO' in scope",
    "68 | }",
    "69 | ",
    "ERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/LoggingAdapters/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters) ",
    "  (cd /Users/mpy/.bazel/execroot/_main && \\",
    "  exec env - \\",
    "    APPLE_SDK_PLATFORM=MacOSX \\",
    "    APPLE_SDK_VERSION_OVERRIDE=15.4 \\",
    "    CC=clang \\",
    "    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\",
    "    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\",
    "  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftmodule-0.params)",
    "# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa",
    "# Execution platform: @@platforms//host:host",
    "error: emit-module command failed with exit code 1 (use -v to see invocation)",
    "packages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:44:14: error: type 'SecurityLogger' does not conform to protocol 'DomainLoggerProtocol'",
    " 42 |  ```",
    " 43 |  */",
    " 44 | public actor SecurityLogger: DomainLoggerProtocol {",
    "    |              |- error: type 'SecurityLogger' does not conform to protocol 'DomainLoggerProtocol'",
    "    |              `- note: add stubs for conformance",
    " 45 |   /// The domain name for this logger",
    " 46 |   public let domainName: String=\"Security\"",
    "",
    "packages/UmbraImplementations/Sources/LoggingAdapters/BaseDomainLogger.swift:32:8: note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'",
    " 30 | ",
    " 31 |   /// Log an error with context",
    " 32 |   func logError(_ error: Error, context: LogContextDTO, privacyLevel: PrivacyClassification) async",
    "    |        `- note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'",
    " 33 | ",
    " 34 |   /// Log a message with the specified context",
    "packages/UmbraImplementations/Sources/LoggingAdapters/CryptoLogger.swift:112:9: warning: variable 'context' was never mutated; consider changing to 'let' constant",
    "110 |     level: LogLevel = .info",
    "111 |   ) async {",
    "112 |     var context=CryptoLogContext(",
    "    |         `- warning: variable 'context' was never mutated; consider changing to 'let' constant",
    "113 |       operation: operation,",
    "114 |       algorithm: algorithm",
    "",
    "packages/UmbraImplementations/Sources/LoggingAdapters/LoggingServiceAdapter.swift:172:31: warning: left side of nil coalescing operator '??' has non-optional type 'String', so the right side is never used",
    "170 |   public func logMessage(_ level: LogLevel, _ message: String, context: LogContext) async {",
    "171 |     let privacyMetadata=context.metadata",
    "172 |     let source=context.source ?? defaultSource",
    "    |                               `- warning: left side of nil coalescing operator '??' has non-optional type 'String', so the right side is never used",
    "173 | ",
    "174 |     // Use the appropriate level-specific method",
    "",
    "packages/UmbraImplementations/Sources/LoggingAdapters/LoggingServiceAdapter.swift:195:31: warning: left side of nil coalescing operator '??' has non-optional type 'String', so the right side is never used",
    "193 |     // Convert PrivacyString to a plain String",
    "194 |     let stringMessage=message.processForLogging()",
    "195 |     let source=context.source ?? defaultSource",
    "    |                               `- warning: left side of nil coalescing operator '??' has non-optional type 'String', so the right side is never used",
    "196 | ",
    "197 |     // If the underlying logger supports privacy-aware logging, use it",
    "",
    "packages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:44:14: error: type 'SecurityLogger' does not conform to protocol 'DomainLoggerProtocol'",
    " 42 |  ```",
    " 43 |  */",
    " 44 | public actor SecurityLogger: DomainLoggerProtocol {",
    "    |              |- error: type 'SecurityLogger' does not conform to protocol 'DomainLoggerProtocol'",
    "    |              `- note: add stubs for conformance",
    " 45 |   /// The domain name for this logger",
    " 46 |   public let domainName: String=\"Security\"",
    "",
    "packages/UmbraImplementations/Sources/LoggingAdapters/BaseDomainLogger.swift:32:8: note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'",
    " 30 | ",
    " 31 |   /// Log an error with context",
    " 32 |   func logError(_ error: Error, context: LogContextDTO, privacyLevel: PrivacyClassification) async",
    "    |        `- note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'",
    " 33 | ",
    " 34 |   /// Log a message with the specified context",
    "",
    "packages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:177:33: error: value of type 'any LogContextDTO' has no member 'parameters'",
    "175 |     // Convert to privacy-tagged metadata",
    "176 |     var privacyMetadata: [String: PrivacyTaggedValue]=[:]",
    "177 |     for (key, value) in context.parameters {",
    "    |                                 `- error: value of type 'any LogContextDTO' has no member 'parameters'",
    "178 |       // Apply privacy tag based on key naming conventions",
    "179 |       let privacyLevel: LogPrivacyLevel=if",
    "",
    "packages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:209:17: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers",
    "207 |     details: String?=nil",
    "208 |   ) async {",
    "209 |     var context=LogContextDTO()",
    "    |                 `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers",
    "210 |     context.parameters[\"keyId\"]=keyIdentifier",
    "211 |     context.parameters[\"operation\"]=operation",
    "",
    "packages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:227:44: error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'",
    "225 |       resource: keyIdentifier,",
    "226 |       additionalMetadata: [",
    "227 |         \"phase\": PrivacyTaggedValue(value: \"start\", privacyLevel: .public),",
    "    |                                            `- error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'",
    "228 |         \"details\": PrivacyTaggedValue(value: details ?? \"N/A\", privacyLevel: .public)",
    "229 |       ]",
    "",
    "packages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:228:54: error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'",
    "226 |       additionalMetadata: [",
    "227 |         \"phase\": PrivacyTaggedValue(value: \"start\", privacyLevel: .public),",
    "228 |         \"details\": PrivacyTaggedValue(value: details ?? \"N/A\", privacyLevel: .public)",
    "    |                                                      `- error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'",
    "229 |       ]",
    "230 |     )",
    "",
    "packages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:246:17: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers",
    "244 |     details: String?=nil",
    "245 |   ) async {",
    "246 |     var context=LogContextDTO()",
    "    |                 `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers",
    "247 |     context.parameters[\"keyId\"]=keyIdentifier",
    "248 |     context.parameters[\"operation\"]=operation",
    "",
    "packages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:265:44: error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'",
    "263 |       resource: keyIdentifier,",
    "264 |       additionalMetadata: [",
    "265 |         \"phase\": PrivacyTaggedValue(value: \"complete\", privacyLevel: .public),",
    "    |                                            `- error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'",
    "266 |         \"details\": PrivacyTaggedValue(value: details ?? \"N/A\", privacyLevel: .public)",
    "267 |       ]",
    "",
    "packages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:266:54: error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'",
    "264 |       additionalMetadata: [",
    "265 |         \"phase\": PrivacyTaggedValue(value: \"complete\", privacyLevel: .public),",
    "266 |         \"details\": PrivacyTaggedValue(value: details ?? \"N/A\", privacyLevel: .public)",
    "    |                                                      `- error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'",
    "267 |       ]",
    "268 |     )",
    "",
    "packages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:286:17: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers",
    "284 |     details: String?=nil",
    "285 |   ) async {",
    "286 |     var context=LogContextDTO()",
    "    |                 `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers",
    "287 |     context.parameters[\"keyId\"]=keyIdentifier",
    "288 |     context.parameters[\"operation\"]=operation",
    "",
    "packages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:310:61: error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'",
    "308 |       resource: keyIdentifier,",
    "309 |       additionalMetadata: [",
    "310 |         \"errorDescription\": PrivacyTaggedValue(value: error.localizedDescription,",
    "    |                                                             `- error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'",
    "311 |                                                privacyLevel: .public),",
    "312 |         \"details\": PrivacyTaggedValue(value: details ?? \"N/A\", privacyLevel: .public)",
    "",
    "packages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:312:54: error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'",
    "310 |         \"errorDescription\": PrivacyTaggedValue(value: error.localizedDescription,",
    "311 |                                                privacyLevel: .public),",
    "312 |         \"details\": PrivacyTaggedValue(value: details ?? \"N/A\", privacyLevel: .public)",
    "    |                                                      `- error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'",
    "313 |       ]",
    "314 |     )",
    "ERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CoreServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CoreServices:CoreServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CoreServices:CoreServices) ",
    "  (cd /Users/mpy/.bazel/execroot/_main && \\",
    "  exec env - \\",
    "    APPLE_SDK_PLATFORM=MacOSX \\",
    "    APPLE_SDK_VERSION_OVERRIDE=15.4 \\",
    "    CC=clang \\",
    "    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\",
    "    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\",
    "  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CoreServices/CoreServices.swiftmodule-0.params)",
    "# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa",
    "# Execution platform: @@platforms//host:host",
    "error: emit-module command failed with exit code 1 (use -v to see invocation)",
    "packages/UmbraImplementations/Sources/CoreServices/Factory/CoreServiceFactory.swift:4:8: error: no such module 'LoggingServices'",
    " 2 | import Foundation",
    " 3 | import LoggingInterfaces",
    " 4 | import LoggingServices",
    "   |        `- error: no such module 'LoggingServices'",
    " 5 | import SecurityCoreInterfaces",
    " 6 | ",
    "packages/UmbraImplementations/Sources/CoreServices/Factory/CoreServiceFactory.swift:4:8: error: no such module 'LoggingServices'",
    " 2 | import Foundation",
    " 3 | import LoggingInterfaces",
    " 4 | import LoggingServices",
    "   |        `- error: no such module 'LoggingServices'",
    " 5 | import SecurityCoreInterfaces",
    " 6 | ",
    "ERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/SecurityCryptoServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices) ",
    "  (cd /Users/mpy/.bazel/execroot/_main && \\",
    "  exec env - \\",
    "    APPLE_SDK_PLATFORM=MacOSX \\",
    "    APPLE_SDK_VERSION_OVERRIDE=15.4 \\",
    "    CC=clang \\",
    "    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\",
    "    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\",
    "  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/SecurityCryptoServices/SecurityCryptoServices.swiftmodule-0.params)",
    "# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa",
    "# Execution platform: @@platforms//host:host",
    "error: emit-module command failed with exit code 1 (use -v to see invocation)",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/CryptoActorIntegration.swift:12:66: error: no type named 'CryptoServiceActor' in module 'SecurityCryptoServices'",
    "10 | public enum CryptoActorImplementations {",
    "11 |     // Re-export the actor types from the implementation files",
    "12 |     public typealias CryptoServiceActor = SecurityCryptoServices.CryptoServiceActor",
    "   |                                                                  `- error: no type named 'CryptoServiceActor' in module 'SecurityCryptoServices'",
    "13 |     public typealias ProviderRegistryActor = SecurityCryptoServices.ProviderRegistryActor",
    "14 |     public typealias SecureStorageActor = SecurityCryptoServices.SecureStorageActor",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/CryptoActorIntegration.swift:13:69: error: no type named 'ProviderRegistryActor' in module 'SecurityCryptoServices'",
    "11 |     // Re-export the actor types from the implementation files",
    "12 |     public typealias CryptoServiceActor = SecurityCryptoServices.CryptoServiceActor",
    "13 |     public typealias ProviderRegistryActor = SecurityCryptoServices.ProviderRegistryActor",
    "   |                                                                     `- error: no type named 'ProviderRegistryActor' in module 'SecurityCryptoServices'",
    "14 |     public typealias SecureStorageActor = SecurityCryptoServices.SecureStorageActor",
    "15 | }",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/CryptoActorIntegration.swift:14:66: error: no type named 'SecureStorageActor' in module 'SecurityCryptoServices'",
    "12 |     public typealias CryptoServiceActor = SecurityCryptoServices.CryptoServiceActor",
    "13 |     public typealias ProviderRegistryActor = SecurityCryptoServices.ProviderRegistryActor",
    "14 |     public typealias SecureStorageActor = SecurityCryptoServices.SecureStorageActor",
    "   |                                                                  `- error: no type named 'SecureStorageActor' in module 'SecurityCryptoServices'",
    "15 | }",
    "16 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:34:16: error: type 'AppleSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'",
    " 32 |    - watchOS 6.0+",
    " 33 |    */",
    " 34 |   public actor AppleSecurityProvider: CryptoServiceProtocol, AsyncServiceInitializable {",
    "    |                |- error: type 'AppleSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'",
    "    |                `- note: add stubs for conformance",
    " 35 |     /// The type of provider implementation (accessible from any actor context)",
    " 36 |     public nonisolated let providerType: SecurityProviderType = .cryptoKit",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'",
    "  9 | public protocol CryptoServiceProtocol: Sendable {",
    " 10 |   /// The secure storage used for handling sensitive data",
    " 11 |   var secureStorage: SecureStorageProtocol { get }",
    "    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'",
    " 12 | ",
    " 13 |   /// Encrypts binary data using a key from secure storage.",
    "    :",
    " 17 |   ///   - options: Optional encryption configuration.",
    " 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.",
    " 19 |   func encrypt(",
    "    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -> Result<String, SecurityStorageError>'",
    " 20 |     dataIdentifier: String,",
    " 21 |     keyIdentifier: String,",
    "    :",
    " 29 |   ///   - options: Optional decryption configuration.",
    " 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.",
    " 31 |   func decrypt(",
    "    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -> Result<String, SecurityStorageError>'",
    " 32 |     encryptedDataIdentifier: String,",
    " 33 |     keyIdentifier: String,",
    "    :",
    " 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.",
    " 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.",
    " 40 |   func hash(",
    "    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -> Result<String, SecurityStorageError>'",
    " 41 |     dataIdentifier: String,",
    " 42 |     options: HashingOptions?",
    "    :",
    " 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.",
    " 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.",
    " 50 |   func verifyHash(",
    "    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -> Result<Bool, SecurityStorageError>'",
    " 51 |     dataIdentifier: String,",
    " 52 |     hashIdentifier: String,",
    "    :",
    " 59 |   ///   - options: Optional key generation configuration.",
    " 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.",
    " 61 |   func generateKey(",
    "    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -> Result<String, SecurityStorageError>'",
    " 62 |     length: Int,",
    " 63 |     options: KeyGenerationOptions?",
    "    :",
    " 70 |   /// generated.",
    " 71 |   /// - Returns: The identifier for the data in secure storage, or an error.",
    " 72 |   func importData(",
    "    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -> Result<String, SecurityStorageError>'",
    " 73 |     _ data: [UInt8],",
    " 74 |     customIdentifier: String?",
    "    :",
    " 79 |   /// - Returns: The raw data, or an error.",
    " 80 |   /// - Warning: Use with caution as this exposes sensitive data.",
    " 81 |   func exportData(",
    "    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -> Result<[UInt8], SecurityStorageError>'",
    " 82 |     identifier: String",
    " 83 |   ) async -> Result<[UInt8], SecurityStorageError>",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/RingSecurityProvider.swift:298:16: error: type 'RingSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'",
    "296 | #else",
    "297 |   // Empty placeholder when Ring is not available",
    "298 |   public actor RingSecurityProvider: CryptoServiceProtocol, AsyncServiceInitializable {",
    "    |                |- error: type 'RingSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'",
    "    |                `- note: add stubs for conformance",
    "299 |     public nonisolated let providerType: SecurityProviderType = .ring",
    "300 | ",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'",
    "  9 | public protocol CryptoServiceProtocol: Sendable {",
    " 10 |   /// The secure storage used for handling sensitive data",
    " 11 |   var secureStorage: SecureStorageProtocol { get }",
    "    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'",
    " 12 | ",
    " 13 |   /// Encrypts binary data using a key from secure storage.",
    "    :",
    " 17 |   ///   - options: Optional encryption configuration.",
    " 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.",
    " 19 |   func encrypt(",
    "    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -> Result<String, SecurityStorageError>'",
    " 20 |     dataIdentifier: String,",
    " 21 |     keyIdentifier: String,",
    "    :",
    " 29 |   ///   - options: Optional decryption configuration.",
    " 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.",
    " 31 |   func decrypt(",
    "    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -> Result<String, SecurityStorageError>'",
    " 32 |     encryptedDataIdentifier: String,",
    " 33 |     keyIdentifier: String,",
    "    :",
    " 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.",
    " 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.",
    " 40 |   func hash(",
    "    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -> Result<String, SecurityStorageError>'",
    " 41 |     dataIdentifier: String,",
    " 42 |     options: HashingOptions?",
    "    :",
    " 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.",
    " 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.",
    " 50 |   func verifyHash(",
    "    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -> Result<Bool, SecurityStorageError>'",
    " 51 |     dataIdentifier: String,",
    " 52 |     hashIdentifier: String,",
    "    :",
    " 59 |   ///   - options: Optional key generation configuration.",
    " 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.",
    " 61 |   func generateKey(",
    "    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -> Result<String, SecurityStorageError>'",
    " 62 |     length: Int,",
    " 63 |     options: KeyGenerationOptions?",
    "    :",
    " 70 |   /// generated.",
    " 71 |   /// - Returns: The identifier for the data in secure storage, or an error.",
    " 72 |   func importData(",
    "    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -> Result<String, SecurityStorageError>'",
    " 73 |     _ data: [UInt8],",
    " 74 |     customIdentifier: String?",
    "    :",
    " 79 |   /// - Returns: The raw data, or an error.",
    " 80 |   /// - Warning: Use with caution as this exposes sensitive data.",
    " 81 |   func exportData(",
    "    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -> Result<[UInt8], SecurityStorageError>'",
    " 82 |     identifier: String",
    " 83 |   ) async -> Result<[UInt8], SecurityStorageError>",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/CryptoActorIntegration.swift:12:66: error: no type named 'CryptoServiceActor' in module 'SecurityCryptoServices'",
    "10 | public enum CryptoActorImplementations {",
    "11 |     // Re-export the actor types from the implementation files",
    "12 |     public typealias CryptoServiceActor = SecurityCryptoServices.CryptoServiceActor",
    "   |                                                                  `- error: no type named 'CryptoServiceActor' in module 'SecurityCryptoServices'",
    "13 |     public typealias ProviderRegistryActor = SecurityCryptoServices.ProviderRegistryActor",
    "14 |     public typealias SecureStorageActor = SecurityCryptoServices.SecureStorageActor",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/CryptoActorIntegration.swift:13:69: error: no type named 'ProviderRegistryActor' in module 'SecurityCryptoServices'",
    "11 |     // Re-export the actor types from the implementation files",
    "12 |     public typealias CryptoServiceActor = SecurityCryptoServices.CryptoServiceActor",
    "13 |     public typealias ProviderRegistryActor = SecurityCryptoServices.ProviderRegistryActor",
    "   |                                                                     `- error: no type named 'ProviderRegistryActor' in module 'SecurityCryptoServices'",
    "14 |     public typealias SecureStorageActor = SecurityCryptoServices.SecureStorageActor",
    "15 | }",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/CryptoActorIntegration.swift:14:66: error: no type named 'SecureStorageActor' in module 'SecurityCryptoServices'",
    "12 |     public typealias CryptoServiceActor = SecurityCryptoServices.CryptoServiceActor",
    "13 |     public typealias ProviderRegistryActor = SecurityCryptoServices.ProviderRegistryActor",
    "14 |     public typealias SecureStorageActor = SecurityCryptoServices.SecureStorageActor",
    "   |                                                                  `- error: no type named 'SecureStorageActor' in module 'SecurityCryptoServices'",
    "15 | }",
    "16 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:34:16: error: type 'AppleSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'",
    " 32 |    - watchOS 6.0+",
    " 33 |    */",
    " 34 |   public actor AppleSecurityProvider: CryptoServiceProtocol, AsyncServiceInitializable {",
    "    |                |- error: type 'AppleSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'",
    "    |                `- note: add stubs for conformance",
    " 35 |     /// The type of provider implementation (accessible from any actor context)",
    " 36 |     public nonisolated let providerType: SecurityProviderType = .cryptoKit",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'",
    "  9 | public protocol CryptoServiceProtocol: Sendable {",
    " 10 |   /// The secure storage used for handling sensitive data",
    " 11 |   var secureStorage: SecureStorageProtocol { get }",
    "    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'",
    " 12 | ",
    " 13 |   /// Encrypts binary data using a key from secure storage.",
    "    :",
    " 17 |   ///   - options: Optional encryption configuration.",
    " 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.",
    " 19 |   func encrypt(",
    "    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -> Result<String, SecurityStorageError>'",
    " 20 |     dataIdentifier: String,",
    " 21 |     keyIdentifier: String,",
    "    :",
    " 29 |   ///   - options: Optional decryption configuration.",
    " 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.",
    " 31 |   func decrypt(",
    "    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -> Result<String, SecurityStorageError>'",
    " 32 |     encryptedDataIdentifier: String,",
    " 33 |     keyIdentifier: String,",
    "    :",
    " 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.",
    " 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.",
    " 40 |   func hash(",
    "    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -> Result<String, SecurityStorageError>'",
    " 41 |     dataIdentifier: String,",
    " 42 |     options: HashingOptions?",
    "    :",
    " 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.",
    " 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.",
    " 50 |   func verifyHash(",
    "    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -> Result<Bool, SecurityStorageError>'",
    " 51 |     dataIdentifier: String,",
    " 52 |     hashIdentifier: String,",
    "    :",
    " 59 |   ///   - options: Optional key generation configuration.",
    " 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.",
    " 61 |   func generateKey(",
    "    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -> Result<String, SecurityStorageError>'",
    " 62 |     length: Int,",
    " 63 |     options: KeyGenerationOptions?",
    "    :",
    " 70 |   /// generated.",
    " 71 |   /// - Returns: The identifier for the data in secure storage, or an error.",
    " 72 |   func importData(",
    "    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -> Result<String, SecurityStorageError>'",
    " 73 |     _ data: [UInt8],",
    " 74 |     customIdentifier: String?",
    "    :",
    " 79 |   /// - Returns: The raw data, or an error.",
    " 80 |   /// - Warning: Use with caution as this exposes sensitive data.",
    " 81 |   func exportData(",
    "    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -> Result<[UInt8], SecurityStorageError>'",
    " 82 |     identifier: String",
    " 83 |   ) async -> Result<[UInt8], SecurityStorageError>",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:71:17: error: module 'UmbraErrors' has no member named 'Security'",
    " 69 |         // Format: [Nonce][Tag][Ciphertext]",
    " 70 |         guard let combined=sealedBox.combined else {",
    " 71 |           throw UmbraErrors.Security.Core.cryptographicError(",
    "    |                 `- error: module 'UmbraErrors' has no member named 'Security'",
    " 72 |             \"Failed to generate combined ciphertext output\"",
    " 73 |           )",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:60:19: warning: no calls to throwing functions occur within 'try' expression",
    " 58 |       do {",
    " 59 |         // Generate a random nonce for encryption",
    " 60 |         let nonce=try AES.GCM.Nonce()",
    "    |                   `- warning: no calls to throwing functions occur within 'try' expression",
    " 61 | ",
    " 62 |         // Convert byte array to CryptoKit key format",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:133:19: error: module 'UmbraErrors' has no member named 'Security'",
    "131 |             return .success(key.withUnsafeBytes { [UInt8]($0) })",
    "132 |           default:",
    "133 |             throw UmbraErrors.Security.Core.invalidInput(",
    "    |                   `- error: module 'UmbraErrors' has no member named 'Security'",
    "134 |               \"Invalid key size, must be 128, 192, or 256 bits\"",
    "135 |             )",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:153:9: warning: 'catch' block is unreachable because no errors are thrown in 'do' block",
    "151 |         let hashData=SHA256.hash(data: Data(data))",
    "152 |         return .success([UInt8](Data(hashData)))",
    "153 |       } catch {",
    "    |         `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block",
    "154 |         return .failure(mapToSecurityErrorDomain(error))",
    "155 |       }",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:175:17: error: module 'UmbraErrors' has no member named 'Security'",
    "173 |           return SymmetricKey(data: Data(key))",
    "174 |         default:",
    "175 |           throw UmbraErrors.Security.Core.invalidInput(",
    "    |                 `- error: module 'UmbraErrors' has no member named 'Security'",
    "176 |             \"Invalid key size: \\(keySize) bits. Must be 128, 192, or 256 bits.\"",
    "177 |           )",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:185:50: error: no type named 'Security' in module 'UmbraErrors'",
    "183 |      */",
    "184 |     private func mapToSecurityErrorDomain(_ error: Error) -> Error {",
    "185 |       if let securityError=error as? UmbraErrors.Security.Core {",
    "    |                                                  `- error: no type named 'Security' in module 'UmbraErrors'",
    "186 |         return securityError",
    "187 |       }",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:193:20: error: module 'UmbraErrors' has no member named 'Security'",
    "191 |         switch cryptoKitError {",
    "192 |           case .incorrectKeySize:",
    "193 |             return UmbraErrors.Security.Core.invalidInput(",
    "    |                    `- error: module 'UmbraErrors' has no member named 'Security'",
    "194 |               \"CryptoKit error: incorrect key size\"",
    "195 |             )",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:197:20: error: module 'UmbraErrors' has no member named 'Security'",
    "195 |             )",
    "196 |           case .incorrectParameterSize:",
    "197 |             return UmbraErrors.Security.Core.invalidInput(",
    "    |                    `- error: module 'UmbraErrors' has no member named 'Security'",
    "198 |               \"CryptoKit error: incorrect parameter size\"",
    "199 |             )",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:201:20: error: module 'UmbraErrors' has no member named 'Security'",
    "199 |             )",
    "200 |           case .authenticationFailure:",
    "201 |             return UmbraErrors.Security.Core.authenticationFailed(",
    "    |                    `- error: module 'UmbraErrors' has no member named 'Security'",
    "202 |               \"CryptoKit error: authentication tag verification failed\"",
    "203 |             )",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:205:20: error: module 'UmbraErrors' has no member named 'Security'",
    "203 |             )",
    "204 |           case .underlyingCoreCryptoError:",
    "205 |             return UmbraErrors.Security.Core.cryptographicError(",
    "    |                    `- error: module 'UmbraErrors' has no member named 'Security'",
    "206 |               \"CryptoKit error: underlying CoreCrypto operation failed\"",
    "207 |             )",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:209:20: error: module 'UmbraErrors' has no member named 'Security'",
    "207 |             )",
    "208 |           case .wrapFailure, .unwrapFailure, .invalidParameter:",
    "209 |             return UmbraErrors.Security.Core.cryptographicError(",
    "    |                    `- error: module 'UmbraErrors' has no member named 'Security'",
    "210 |               \"CryptoKit specific error: \\(cryptoKitError)\"",
    "211 |             )",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:213:20: error: module 'UmbraErrors' has no member named 'Security'",
    "211 |             )",
    "212 |           @unknown default:",
    "213 |             return UmbraErrors.Security.Core.cryptographicError(",
    "    |                    `- error: module 'UmbraErrors' has no member named 'Security'",
    "214 |               \"Unknown CryptoKit error: \\(cryptoKitError)\"",
    "215 |             )",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:220:14: error: module 'UmbraErrors' has no member named 'Security'",
    "218 | ",
    "219 |       // Handle other error types",
    "220 |       return UmbraErrors.Security.Core.cryptographicError(",
    "    |              `- error: module 'UmbraErrors' has no member named 'Security'",
    "221 |         \"Cryptographic operation failed: \\(error.localizedDescription)\"",
    "222 |       )",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:57:13: error: module 'UmbraErrors' has no member named 'Security'",
    " 55 |   ) throws -> Data {",
    " 56 |     guard let algorithm=getAlgorithm(config: config) else {",
    " 57 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid or unsupported algorithm\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    " 58 |     }",
    " 59 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:61:56: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'String'",
    " 59 | ",
    " 60 |     // Validate key size",
    " 61 |     guard validateKeySize(key.count, algorithm: config.encryptionAlgorithm) != nil else {",
    "    |                                                        `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'String'",
    " 62 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid key size for algorithm \\(config.encryptionAlgorithm)\")",
    " 63 |     }",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:62:13: error: module 'UmbraErrors' has no member named 'Security'",
    " 60 |     // Validate key size",
    " 61 |     guard validateKeySize(key.count, algorithm: config.encryptionAlgorithm) != nil else {",
    " 62 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid key size for algorithm \\(config.encryptionAlgorithm)\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    " 63 |     }",
    " 64 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:67:13: error: module 'UmbraErrors' has no member named 'Security'",
    " 65 |     // Validate IV",
    " 66 |     guard iv.count == kCCBlockSizeAES128 else {",
    " 67 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid IV size, must be 16 bytes for AES-CBC\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    " 68 |     }",
    " 69 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:83:13: error: module 'UmbraErrors' has no member named 'Security'",
    " 81 | ",
    " 82 |     guard status == kCCSuccess, let cryptorRef else {",
    " 83 |       throw UmbraErrors.Security.Core.cryptographicError(\"Failed to create encryption context with status \\(status)\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    " 84 |     }",
    " 85 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:112:13: error: module 'UmbraErrors' has no member named 'Security'",
    "110 | ",
    "111 |     guard status == kCCSuccess else {",
    "112 |       throw UmbraErrors.Security.Core.cryptographicError(\"Encryption update failed with status \\(status)\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    "113 |     }",
    "114 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:135:13: error: module 'UmbraErrors' has no member named 'Security'",
    "133 | ",
    "134 |     guard status == kCCSuccess else {",
    "135 |       throw UmbraErrors.Security.Core.cryptographicError(\"Encryption finalization failed with status \\(status)\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    "136 |     }",
    "137 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:159:13: error: module 'UmbraErrors' has no member named 'Security'",
    "157 |   ) throws -> Data {",
    "158 |     guard let algorithm=getAlgorithm(config: config) else {",
    "159 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid or unsupported algorithm\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    "160 |     }",
    "161 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:163:56: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'String'",
    "161 | ",
    "162 |     // Validate key size",
    "163 |     guard validateKeySize(key.count, algorithm: config.encryptionAlgorithm) != nil else {",
    "    |                                                        `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'String'",
    "164 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid key size for algorithm \\(config.encryptionAlgorithm)\")",
    "165 |     }",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:164:13: error: module 'UmbraErrors' has no member named 'Security'",
    "162 |     // Validate key size",
    "163 |     guard validateKeySize(key.count, algorithm: config.encryptionAlgorithm) != nil else {",
    "164 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid key size for algorithm \\(config.encryptionAlgorithm)\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    "165 |     }",
    "166 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:169:13: error: module 'UmbraErrors' has no member named 'Security'",
    "167 |     // Validate IV",
    "168 |     guard iv.count == kCCBlockSizeAES128 else {",
    "169 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid IV size, must be 16 bytes for AES-CBC\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    "170 |     }",
    "171 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:185:13: error: module 'UmbraErrors' has no member named 'Security'",
    "183 | ",
    "184 |     guard status == kCCSuccess, let cryptorRef else {",
    "185 |       throw UmbraErrors.Security.Core.cryptographicError(\"Failed to create decryption context with status \\(status)\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    "186 |     }",
    "187 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:214:13: error: module 'UmbraErrors' has no member named 'Security'",
    "212 | ",
    "213 |     guard status == kCCSuccess else {",
    "214 |       throw UmbraErrors.Security.Core.cryptographicError(\"Decryption update failed with status \\(status)\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    "215 |     }",
    "216 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:237:13: error: module 'UmbraErrors' has no member named 'Security'",
    "235 | ",
    "236 |     guard status == kCCSuccess else {",
    "237 |       throw UmbraErrors.Security.Core.cryptographicError(\"Decryption finalization failed with status \\(status)\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    "238 |     }",
    "239 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:255:13: error: module 'UmbraErrors' has no member named 'Security'",
    "253 |     // Validate key size",
    "254 |     guard size == 128 || size == 192 || size == 256 else {",
    "255 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid key size, must be 128, 192, or 256 bits\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    "256 |     }",
    "257 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:267:13: error: module 'UmbraErrors' has no member named 'Security'",
    "265 | ",
    "266 |     guard result == errSecSuccess else {",
    "267 |       throw UmbraErrors.Security.Core.cryptographicError(\"Key generation failed with status \\(result)\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    "268 |     }",
    "269 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:283:13: error: module 'UmbraErrors' has no member named 'Security'",
    "281 |   public func generateIV(size: Int) throws -> Data {",
    "282 |     guard size > 0 else {",
    "283 |       throw UmbraErrors.Security.Core.invalidInput(\"IV size must be greater than 0\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    "284 |     }",
    "285 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:294:13: error: module 'UmbraErrors' has no member named 'Security'",
    "292 | ",
    "293 |     guard result == errSecSuccess else {",
    "294 |       throw UmbraErrors.Security.Core.cryptographicError(\"IV generation failed with status \\(result)\")",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    "295 |     }",
    "296 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:336:15: error: module 'UmbraErrors' has no member named 'Security'",
    "334 | ",
    "335 |       default:",
    "336 |         throw UmbraErrors.Security.Core.unsupportedOperation(name: \"Hash algorithm \\(algorithm)\")",
    "    |               `- error: module 'UmbraErrors' has no member named 'Security'",
    "337 |     }",
    "338 |   }",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:359:13: error: type 'EncryptionAlgorithm' has no member 'aes128CBC'",
    "357 |   private func getAlgorithm(config: SecurityConfigDTO) -> CCAlgorithm? {",
    "358 |     switch config.encryptionAlgorithm {",
    "359 |       case .aes128CBC, .aes192CBC, .aes256CBC:",
    "    |             `- error: type 'EncryptionAlgorithm' has no member 'aes128CBC'",
    "360 |         return CCAlgorithm(kCCAlgorithmAES)",
    "361 |       default:",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:359:25: error: type 'EncryptionAlgorithm' has no member 'aes192CBC'",
    "357 |   private func getAlgorithm(config: SecurityConfigDTO) -> CCAlgorithm? {",
    "358 |     switch config.encryptionAlgorithm {",
    "359 |       case .aes128CBC, .aes192CBC, .aes256CBC:",
    "    |                         `- error: type 'EncryptionAlgorithm' has no member 'aes192CBC'",
    "360 |         return CCAlgorithm(kCCAlgorithmAES)",
    "361 |       default:",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/RingSecurityProvider.swift:298:16: error: type 'RingSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'",
    "296 | #else",
    "297 |   // Empty placeholder when Ring is not available",
    "298 |   public actor RingSecurityProvider: CryptoServiceProtocol, AsyncServiceInitializable {",
    "    |                |- error: type 'RingSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'",
    "    |                `- note: add stubs for conformance",
    "299 |     public nonisolated let providerType: SecurityProviderType = .ring",
    "300 | ",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'",
    "  9 | public protocol CryptoServiceProtocol: Sendable {",
    " 10 |   /// The secure storage used for handling sensitive data",
    " 11 |   var secureStorage: SecureStorageProtocol { get }",
    "    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'",
    " 12 | ",
    " 13 |   /// Encrypts binary data using a key from secure storage.",
    "    :",
    " 17 |   ///   - options: Optional encryption configuration.",
    " 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.",
    " 19 |   func encrypt(",
    "    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -> Result<String, SecurityStorageError>'",
    " 20 |     dataIdentifier: String,",
    " 21 |     keyIdentifier: String,",
    "    :",
    " 29 |   ///   - options: Optional decryption configuration.",
    " 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.",
    " 31 |   func decrypt(",
    "    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -> Result<String, SecurityStorageError>'",
    " 32 |     encryptedDataIdentifier: String,",
    " 33 |     keyIdentifier: String,",
    "    :",
    " 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.",
    " 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.",
    " 40 |   func hash(",
    "    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -> Result<String, SecurityStorageError>'",
    " 41 |     dataIdentifier: String,",
    " 42 |     options: HashingOptions?",
    "    :",
    " 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.",
    " 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.",
    " 50 |   func verifyHash(",
    "    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -> Result<Bool, SecurityStorageError>'",
    " 51 |     dataIdentifier: String,",
    " 52 |     hashIdentifier: String,",
    "    :",
    " 59 |   ///   - options: Optional key generation configuration.",
    " 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.",
    " 61 |   func generateKey(",
    "    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -> Result<String, SecurityStorageError>'",
    " 62 |     length: Int,",
    " 63 |     options: KeyGenerationOptions?",
    "    :",
    " 70 |   /// generated.",
    " 71 |   /// - Returns: The identifier for the data in secure storage, or an error.",
    " 72 |   func importData(",
    "    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -> Result<String, SecurityStorageError>'",
    " 73 |     _ data: [UInt8],",
    " 74 |     customIdentifier: String?",
    "    :",
    " 79 |   /// - Returns: The raw data, or an error.",
    " 80 |   /// - Warning: Use with caution as this exposes sensitive data.",
    " 81 |   func exportData(",
    "    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -> Result<[UInt8], SecurityStorageError>'",
    " 82 |     identifier: String",
    " 83 |   ) async -> Result<[UInt8], SecurityStorageError>",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/RingSecurityProvider.swift:304:13: error: module 'UmbraErrors' has no member named 'Security'",
    "302 | ",
    "303 |     public func initialize() async throws {",
    "304 |       throw UmbraErrors.Security.Core.unsupportedOperation(",
    "    |             `- error: module 'UmbraErrors' has no member named 'Security'",
    "305 |         \"Ring crypto library is not available on this platform\"",
    "306 |       )",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/RingSecurityProvider.swift:313:16: error: module 'UmbraErrors' has no member named 'Security'",
    "311 |       using _: [UInt8]",
    "312 |     ) async -> Result<[UInt8], Error> {",
    "313 |       .failure(UmbraErrors.Security.Core.unsupportedOperation(",
    "    |                `- error: module 'UmbraErrors' has no member named 'Security'",
    "314 |         \"Ring crypto library is not available on this platform\"",
    "315 |       ))",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/RingSecurityProvider.swift:322:16: error: module 'UmbraErrors' has no member named 'Security'",
    "320 |       using _: [UInt8]",
    "321 |     ) async -> Result<[UInt8], Error> {",
    "322 |       .failure(UmbraErrors.Security.Core.unsupportedOperation(",
    "    |                `- error: module 'UmbraErrors' has no member named 'Security'",
    "323 |         \"Ring crypto library is not available on this platform\"",
    "324 |       ))",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/RingSecurityProvider.swift:328:16: error: module 'UmbraErrors' has no member named 'Security'",
    "326 | ",
    "327 |     public func generateKey(size _: Int) async -> Result<[UInt8], Error> {",
    "328 |       .failure(UmbraErrors.Security.Core.unsupportedOperation(",
    "    |                `- error: module 'UmbraErrors' has no member named 'Security'",
    "329 |         \"Ring crypto library is not available on this platform\"",
    "330 |       ))",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/RingSecurityProvider.swift:334:16: error: module 'UmbraErrors' has no member named 'Security'",
    "332 | ",
    "333 |     public func hash(data _: [UInt8]) async -> Result<[UInt8], Error> {",
    "334 |       .failure(UmbraErrors.Security.Core.unsupportedOperation(",
    "    |                `- error: module 'UmbraErrors' has no member named 'Security'",
    "335 |         \"Ring crypto library is not available on this platform\"",
    "336 |       ))",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:30:5: error: switch must be exhaustive",
    "28 |   /// Core logging method implementation",
    "29 |   public func logMessage(_ level: LogLevel, _ message: String, context: LogContext) async {",
    "30 |     switch level {",
    "   |     |- error: switch must be exhaustive",
    "   |     `- note: add missing case: '.trace'",
    "31 |       case .debug:",
    "32 |         logger.debug(\"\\(message)\")",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:46:59: error: missing argument for parameter 'source' in call",
    "44 |   /// Log debug message",
    "45 |   public func debug(_ message: String, metadata: LogMetadata?) async {",
    "46 |     await logMessage(.debug, message, context: LogContext(metadata: metadata ?? [:]))",
    "   |                                                           `- error: missing argument for parameter 'source' in call",
    "47 |   }",
    "48 | ",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swift:357:10: note: 'init(source:metadata:correlationID:timestamp:)' declared here",
    "355 |   ///   - correlationId: Unique identifier for correlating related logs",
    "356 |   ///   - timestamp: Timestamp (defaults to a pre-generated value)",
    "357 |   public init(",
    "    |          `- note: 'init(source:metadata:correlationID:timestamp:)' declared here",
    "358 |     source: String,",
    "359 |     metadata: PrivacyMetadata?=nil,",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:46:81: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'",
    "44 |   /// Log debug message",
    "45 |   public func debug(_ message: String, metadata: LogMetadata?) async {",
    "46 |     await logMessage(.debug, message, context: LogContext(metadata: metadata ?? [:]))",
    "   |                                                                                 `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'",
    "47 |   }",
    "48 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:46:69: error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'",
    "44 |   /// Log debug message",
    "45 |   public func debug(_ message: String, metadata: LogMetadata?) async {",
    "46 |     await logMessage(.debug, message, context: LogContext(metadata: metadata ?? [:]))",
    "   |                                                                     `- error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'",
    "47 |   }",
    "48 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:51:58: error: missing argument for parameter 'source' in call",
    "49 |   /// Log info message",
    "50 |   public func info(_ message: String, metadata: LogMetadata?) async {",
    "51 |     await logMessage(.info, message, context: LogContext(metadata: metadata ?? [:]))",
    "   |                                                          `- error: missing argument for parameter 'source' in call",
    "52 |   }",
    "53 | ",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swift:357:10: note: 'init(source:metadata:correlationID:timestamp:)' declared here",
    "355 |   ///   - correlationId: Unique identifier for correlating related logs",
    "356 |   ///   - timestamp: Timestamp (defaults to a pre-generated value)",
    "357 |   public init(",
    "    |          `- note: 'init(source:metadata:correlationID:timestamp:)' declared here",
    "358 |     source: String,",
    "359 |     metadata: PrivacyMetadata?=nil,",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:51:80: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'",
    "49 |   /// Log info message",
    "50 |   public func info(_ message: String, metadata: LogMetadata?) async {",
    "51 |     await logMessage(.info, message, context: LogContext(metadata: metadata ?? [:]))",
    "   |                                                                                `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'",
    "52 |   }",
    "53 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:51:68: error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'",
    "49 |   /// Log info message",
    "50 |   public func info(_ message: String, metadata: LogMetadata?) async {",
    "51 |     await logMessage(.info, message, context: LogContext(metadata: metadata ?? [:]))",
    "   |                                                                    `- error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'",
    "52 |   }",
    "53 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:56:61: error: missing argument for parameter 'source' in call",
    "54 |   /// Log warning message",
    "55 |   public func warning(_ message: String, metadata: LogMetadata?) async {",
    "56 |     await logMessage(.warning, message, context: LogContext(metadata: metadata ?? [:]))",
    "   |                                                             `- error: missing argument for parameter 'source' in call",
    "57 |   }",
    "58 | ",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swift:357:10: note: 'init(source:metadata:correlationID:timestamp:)' declared here",
    "355 |   ///   - correlationId: Unique identifier for correlating related logs",
    "356 |   ///   - timestamp: Timestamp (defaults to a pre-generated value)",
    "357 |   public init(",
    "    |          `- note: 'init(source:metadata:correlationID:timestamp:)' declared here",
    "358 |     source: String,",
    "359 |     metadata: PrivacyMetadata?=nil,",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:56:83: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'",
    "54 |   /// Log warning message",
    "55 |   public func warning(_ message: String, metadata: LogMetadata?) async {",
    "56 |     await logMessage(.warning, message, context: LogContext(metadata: metadata ?? [:]))",
    "   |                                                                                   `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'",
    "57 |   }",
    "58 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:56:71: error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'",
    "54 |   /// Log warning message",
    "55 |   public func warning(_ message: String, metadata: LogMetadata?) async {",
    "56 |     await logMessage(.warning, message, context: LogContext(metadata: metadata ?? [:]))",
    "   |                                                                       `- error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'",
    "57 |   }",
    "58 | ",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:61:59: error: missing argument for parameter 'source' in call",
    "59 |   /// Log error message",
    "60 |   public func error(_ message: String, metadata: LogMetadata?) async {",
    "61 |     await logMessage(.error, message, context: LogContext(metadata: metadata ?? [:]))",
    "   |                                                           `- error: missing argument for parameter 'source' in call",
    "62 |   }",
    "63 | }",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swift:357:10: note: 'init(source:metadata:correlationID:timestamp:)' declared here",
    "355 |   ///   - correlationId: Unique identifier for correlating related logs",
    "356 |   ///   - timestamp: Timestamp (defaults to a pre-generated value)",
    "357 |   public init(",
    "    |          `- note: 'init(source:metadata:correlationID:timestamp:)' declared here",
    "358 |     source: String,",
    "359 |     metadata: PrivacyMetadata?=nil,",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:61:81: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'",
    "59 |   /// Log error message",
    "60 |   public func error(_ message: String, metadata: LogMetadata?) async {",
    "61 |     await logMessage(.error, message, context: LogContext(metadata: metadata ?? [:]))",
    "   |                                                                                 `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'",
    "62 |   }",
    "63 | }",
    "",
    "packages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:61:69: error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'",
    "59 |   /// Log error message",
    "60 |   public func error(_ message: String, metadata: LogMetadata?) async {",
    "61 |     await logMessage(.error, message, context: LogContext(metadata: metadata ?? [:]))",
    "   |                                                                     `- error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'",
    "62 |   }",
    "63 | }",
    "ERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/ConfigServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices) ",
    "  (cd /Users/mpy/.bazel/execroot/_main && \\",
    "  exec env - \\",
    "    APPLE_SDK_PLATFORM=MacOSX \\",
    "    APPLE_SDK_VERSION_OVERRIDE=15.4 \\",
    "    CC=clang \\",
    "    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\",
    "    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\",
    "  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftmodule-0.params)",
    "# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa",
    "# Execution platform: @@platforms//host:host",
    "error: emit-module command failed with exit code 1 (use -v to see invocation)",
    "packages/UmbraImplementations/Sources/ConfigServices/ConfigurationServiceActor.swift:2:8: error: no such module 'CoreTypesInterfaces'",
    "  1 | import ConfigInterfaces",
    "  2 | import CoreTypesInterfaces",
    "    |        `- error: no such module 'CoreTypesInterfaces'",
    "  3 | import DateTimeTypes",
    "  4 | import LoggingInterfaces",
    "packages/UmbraImplementations/Sources/ConfigServices/ConfigurationServiceActor.swift:2:8: error: no such module 'CoreTypesInterfaces'",
    "  1 | import ConfigInterfaces",
    "  2 | import CoreTypesInterfaces",
    "    |        `- error: no such module 'CoreTypesInterfaces'",
    "  3 | import DateTimeTypes",
    "  4 | import LoggingInterfaces",
    "ERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraInterfaces/Sources/FileSystemInterfaces/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces) ",
    "  (cd /Users/mpy/.bazel/execroot/_main && \\",
    "  exec env - \\",
    "    APPLE_SDK_PLATFORM=MacOSX \\",
    "    APPLE_SDK_VERSION_OVERRIDE=15.4 \\",
    "    CC=clang \\",
    "    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\",
    "    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\",
    "  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftmodule-0.params)",
    "# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa",
    "# Execution platform: @@platforms//host:host",
    "error: emit-module command failed with exit code 1 (use -v to see invocation)",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:60: error: expected ']' in array type",
    "39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "40 |   )",
    "41 |   public let extendedAttributes: @unchecked Sendable[String: Any]",
    "   |                                                     |      `- error: expected ']' in array type",
    "   |                                                     `- note: to match this opening '['",
    "42 | ",
    "43 |   /// Creates a new file attributes instance",
    "",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:60: error: consecutive declarations on a line must be separated by ';'",
    "39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "40 |   )",
    "41 |   public let extendedAttributes: @unchecked Sendable[String: Any]",
    "   |                                                            `- error: consecutive declarations on a line must be separated by ';'",
    "42 | ",
    "43 |   /// Creates a new file attributes instance",
    "",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:60: error: expected declaration",
    " 7 |  modification date, and other system-level file metadata.",
    " 8 |  */",
    " 9 | public struct FileAttributes: Sendable, Equatable {",
    "   |               `- note: in declaration of 'FileAttributes'",
    "10 |   /// File size in bytes",
    "11 |   public let size: UInt64",
    "   :",
    "39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "40 |   )",
    "41 |   public let extendedAttributes: @unchecked Sendable[String: Any]",
    "   |                                                            `- error: expected declaration",
    "42 | ",
    "43 |   /// Creates a new file attributes instance",
    "",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:65: error: expected ']' in array type",
    "22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "23 |   )",
    "24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]",
    "   |                                                 |               `- error: expected ']' in array type",
    "   |                                                 `- note: to match this opening '['",
    "25 | ",
    "26 |   /// Whether the file exists",
    "",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:65: error: consecutive declarations on a line must be separated by ';'",
    "22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "23 |   )",
    "24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]",
    "   |                                                                 `- error: consecutive declarations on a line must be separated by ';'",
    "25 | ",
    "26 |   /// Whether the file exists",
    "",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:65: error: expected declaration",
    " 8 |  resource values, and other metadata that might be relevant to the application.",
    " 9 |  */",
    "10 | public struct FileMetadata: Sendable, Equatable {",
    "   |               `- note: in declaration of 'FileMetadata'",
    "11 |   /// The path to the file",
    "12 |   public let path: FilePath",
    "   :",
    "22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "23 |   )",
    "24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]",
    "   |                                                                 `- error: expected declaration",
    "25 | ",
    "26 |   /// Whether the file exists",
    "",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:34: error: 'unchecked' attribute only applies in inheritance clauses",
    "39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "40 |   )",
    "41 |   public let extendedAttributes: @unchecked Sendable[String: Any]",
    "   |                                  `- error: 'unchecked' attribute only applies in inheritance clauses",
    "42 | ",
    "43 |   /// Creates a new file attributes instance",
    "",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:30: error: 'unchecked' attribute only applies in inheritance clauses",
    "22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "23 |   )",
    "24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]",
    "   |                              `- error: 'unchecked' attribute only applies in inheritance clauses",
    "25 | ",
    "26 |   /// Whether the file exists",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:60: error: expected ']' in array type",
    "39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "40 |   )",
    "41 |   public let extendedAttributes: @unchecked Sendable[String: Any]",
    "   |                                                     |      `- error: expected ']' in array type",
    "   |                                                     `- note: to match this opening '['",
    "42 | ",
    "43 |   /// Creates a new file attributes instance",
    "",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:60: error: consecutive declarations on a line must be separated by ';'",
    "39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "40 |   )",
    "41 |   public let extendedAttributes: @unchecked Sendable[String: Any]",
    "   |                                                            `- error: consecutive declarations on a line must be separated by ';'",
    "42 | ",
    "43 |   /// Creates a new file attributes instance",
    "",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:60: error: expected declaration",
    " 7 |  modification date, and other system-level file metadata.",
    " 8 |  */",
    " 9 | public struct FileAttributes: Sendable, Equatable {",
    "   |               `- note: in declaration of 'FileAttributes'",
    "10 |   /// File size in bytes",
    "11 |   public let size: UInt64",
    "   :",
    "39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "40 |   )",
    "41 |   public let extendedAttributes: @unchecked Sendable[String: Any]",
    "   |                                                            `- error: expected declaration",
    "42 | ",
    "43 |   /// Creates a new file attributes instance",
    "",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:65: error: expected ']' in array type",
    "22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "23 |   )",
    "24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]",
    "   |                                                 |               `- error: expected ']' in array type",
    "   |                                                 `- note: to match this opening '['",
    "25 | ",
    "26 |   /// Whether the file exists",
    "",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:65: error: consecutive declarations on a line must be separated by ';'",
    "22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "23 |   )",
    "24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]",
    "   |                                                                 `- error: consecutive declarations on a line must be separated by ';'",
    "25 | ",
    "26 |   /// Whether the file exists",
    "",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:65: error: expected declaration",
    " 8 |  resource values, and other metadata that might be relevant to the application.",
    " 9 |  */",
    "10 | public struct FileMetadata: Sendable, Equatable {",
    "   |               `- note: in declaration of 'FileMetadata'",
    "11 |   /// The path to the file",
    "12 |   public let path: FilePath",
    "   :",
    "22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "23 |   )",
    "24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]",
    "   |                                                                 `- error: expected declaration",
    "25 | ",
    "26 |   /// Whether the file exists",
    "",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:34: error: 'unchecked' attribute only applies in inheritance clauses",
    "39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "40 |   )",
    "41 |   public let extendedAttributes: @unchecked Sendable[String: Any]",
    "   |                                  `- error: 'unchecked' attribute only applies in inheritance clauses",
    "42 | ",
    "43 |   /// Creates a new file attributes instance",
    "",
    "packages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:30: error: 'unchecked' attribute only applies in inheritance clauses",
    "22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"",
    "23 |   )",
    "24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]",
    "   |                              `- error: 'unchecked' attribute only applies in inheritance clauses",
    "25 | ",
    "26 |   /// Whether the file exists",
    "ERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoXPCServices/BUILD.bazel:3:14: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices) ",
    "  (cd /Users/mpy/.bazel/execroot/_main && \\",
    "  exec env - \\",
    "    APPLE_SDK_PLATFORM=MacOSX \\",
    "    APPLE_SDK_VERSION_OVERRIDE=15.4 \\",
    "    CC=clang \\",
    "    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\",
    "    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\",
    "  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftmodule-0.params)",
    "# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa",
    "# Execution platform: @@platforms//host:host",
    "error: emit-module command failed with exit code 1 (use -v to see invocation)",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:22:36: error: cannot find type 'CryptoServiceMonitorProtocol' in scope",
    " 20 |  - Uses domain-specific DTOs for all communications",
    " 21 |  */",
    " 22 | public actor CryptoServiceMonitor: CryptoServiceMonitorProtocol {",
    "    |                                    `- error: cannot find type 'CryptoServiceMonitorProtocol' in scope",
    " 23 |   /// Logger for recording operations and errors",
    " 24 |   private let logger: LoggingProtocol",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:36:31: error: cannot find type 'CryptoProviderProtocol' in scope",
    " 34 | ",
    " 35 |   /// Crypto provider for performing operations",
    " 36 |   private let cryptoProvider: CryptoProviderProtocol",
    "    |                               `- error: cannot find type 'CryptoProviderProtocol' in scope",
    " 37 | ",
    " 38 |   /// Key store for key management",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:39:25: error: cannot find type 'KeyStoreProtocol' in scope",
    " 37 | ",
    " 38 |   /// Key store for key management",
    " 39 |   private let keyStore: KeyStoreProtocol",
    "    |                         `- error: cannot find type 'KeyStoreProtocol' in scope",
    " 40 | ",
    " 41 |   // MARK: - Initialisation",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:52:21: error: cannot find type 'CryptoProviderProtocol' in scope",
    " 50 |    */",
    " 51 |   public init(",
    " 52 |     cryptoProvider: CryptoProviderProtocol,",
    "    |                     `- error: cannot find type 'CryptoProviderProtocol' in scope",
    " 53 |     keyStore: KeyStoreProtocol,",
    " 54 |     logger: LoggingProtocol",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:53:15: error: cannot find type 'KeyStoreProtocol' in scope",
    " 51 |   public init(",
    " 52 |     cryptoProvider: CryptoProviderProtocol,",
    " 53 |     keyStore: KeyStoreProtocol,",
    "    |               `- error: cannot find type 'KeyStoreProtocol' in scope",
    " 54 |     logger: LoggingProtocol",
    " 55 |   ) {",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:78:46: error: no type named 'Crypto' in module 'UmbraErrors'",
    " 76 |     keyIdentifier: String,",
    " 77 |     options: CryptoOperationOptionsDTO?=nil",
    " 78 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'",
    " 79 |     await cryptoLogger.logOperationStart(",
    " 80 |       operation: \"encrypt\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:75:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    " 73 |    */",
    " 74 |   public func encrypt(",
    " 75 |     data: SecureBytes,",
    "    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    " 76 |     keyIdentifier: String,",
    " 77 |     options: CryptoOperationOptionsDTO?=nil",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:144:46: error: no type named 'Crypto' in module 'UmbraErrors'",
    "142 |     keyIdentifier: String,",
    "143 |     options: CryptoOperationOptionsDTO?=nil",
    "144 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "145 |     await cryptoLogger.logOperationStart(",
    "146 |       operation: \"decrypt\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:141:20: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "139 |    */",
    "140 |   public func decrypt(",
    "141 |     encryptedData: SecureBytes,",
    "    |                    `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "142 |     keyIdentifier: String,",
    "143 |     options: CryptoOperationOptionsDTO?=nil",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:214:41: error: no type named 'Crypto' in module 'UmbraErrors'",
    "212 |     options: KeyGenerationOptionsDTO,",
    "213 |     metadata: KeyMetadataDTO?=nil",
    "214 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {",
    "    |                                         `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "215 |     await cryptoLogger.logOperationStart(",
    "216 |       operation: \"generateKey\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:213:15: error: cannot find type 'KeyMetadataDTO' in scope",
    "211 |   public func generateKey(",
    "212 |     options: KeyGenerationOptionsDTO,",
    "213 |     metadata: KeyMetadataDTO?=nil",
    "    |               `- error: cannot find type 'KeyMetadataDTO' in scope",
    "214 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {",
    "215 |     await cryptoLogger.logOperationStart(",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:278:46: error: no type named 'Crypto' in module 'UmbraErrors'",
    "276 |   public func exportKey(",
    "277 |     keyIdentifier: String",
    "278 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "279 |     await cryptoLogger.logOperationStart(",
    "280 |       operation: \"exportKey\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:329:41: error: no type named 'Crypto' in module 'UmbraErrors'",
    "327 |     keyData: SecureBytes,",
    "328 |     metadata: KeyMetadataDTO",
    "329 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {",
    "    |                                         `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "330 |     await cryptoLogger.logOperationStart(",
    "331 |       operation: \"importKey\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:328:15: error: cannot find type 'KeyMetadataDTO' in scope",
    "326 |   public func importKey(",
    "327 |     keyData: SecureBytes,",
    "328 |     metadata: KeyMetadataDTO",
    "    |               `- error: cannot find type 'KeyMetadataDTO' in scope",
    "329 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {",
    "330 |     await cryptoLogger.logOperationStart(",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:327:14: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "325 |    */",
    "326 |   public func importKey(",
    "327 |     keyData: SecureBytes,",
    "    |              `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "328 |     metadata: KeyMetadataDTO",
    "329 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:383:39: error: no type named 'Crypto' in module 'UmbraErrors'",
    "381 |   public func deleteKey(",
    "382 |     keyIdentifier: String",
    "383 |   ) async -> Result<Bool, UmbraErrors.Crypto.Core> {",
    "    |                                       `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "384 |     await cryptoLogger.logOperationStart(",
    "385 |       operation: \"deleteKey\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:438:46: error: no type named 'Crypto' in module 'UmbraErrors'",
    "436 |     keyIdentifier: String,",
    "437 |     options: SigningOptionsDTO?=nil",
    "438 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "439 |     await cryptoLogger.logOperationStart(",
    "440 |       operation: \"sign\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:435:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "433 |    */",
    "434 |   public func sign(",
    "435 |     data: SecureBytes,",
    "    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "436 |     keyIdentifier: String,",
    "437 |     options: SigningOptionsDTO?=nil",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:506:39: error: no type named 'Crypto' in module 'UmbraErrors'",
    "504 |     keyIdentifier: String,",
    "505 |     options: SigningOptionsDTO?=nil",
    "506 |   ) async -> Result<Bool, UmbraErrors.Crypto.Core> {",
    "    |                                       `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "507 |     await cryptoLogger.logOperationStart(",
    "508 |       operation: \"verify\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:502:16: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "500 |    */",
    "501 |   public func verify(",
    "502 |     signature: SecureBytes,",
    "    |                `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "503 |     data: SecureBytes,",
    "504 |     keyIdentifier: String,",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:503:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "501 |   public func verify(",
    "502 |     signature: SecureBytes,",
    "503 |     data: SecureBytes,",
    "    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "504 |     keyIdentifier: String,",
    "505 |     options: SigningOptionsDTO?=nil",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:575:46: error: no type named 'Crypto' in module 'UmbraErrors'",
    "573 |   public func generateRandomBytes(",
    "574 |     length: Int",
    "575 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "576 |     await cryptoLogger.logOperationStart(",
    "577 |       operation: \"generateRandomBytes\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:625:46: error: no type named 'Crypto' in module 'UmbraErrors'",
    "623 |     data: SecureBytes,",
    "624 |     algorithm: HashAlgorithm",
    "625 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "626 |     await cryptoLogger.logOperationStart(",
    "627 |       operation: \"hash\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:624:16: error: 'HashAlgorithm' is ambiguous for type lookup in this context",
    "622 |   public func hash(",
    "623 |     data: SecureBytes,",
    "624 |     algorithm: HashAlgorithm",
    "    |                `- error: 'HashAlgorithm' is ambiguous for type lookup in this context",
    "625 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "626 |     await cryptoLogger.logOperationStart(",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CryptoTypes/DTOs/SigningOptionsDTO.swift:69:13: note: found this candidate",
    "67 | ",
    "68 | /// Hash algorithms for cryptographic operations",
    "69 | public enum HashAlgorithm: String, Sendable, Equatable {",
    "   |             `- note: found this candidate",
    "70 |   case md5 // Not recommended for security applications",
    "71 |   case sha1 // Not recommended for security applications",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/Types/HashAlgorithm.swift:9:13: note: found this candidate",
    " 7 |  representation of domain concepts.",
    " 8 |  */",
    " 9 | public enum HashAlgorithm: String, Sendable, Codable, Equatable, CaseIterable {",
    "   |             `- note: found this candidate",
    "10 |   /// SHA-256 hash algorithm",
    "11 |   case sha256=\"SHA-256\"",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:623:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "621 |    */",
    "622 |   public func hash(",
    "623 |     data: SecureBytes,",
    "    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "624 |     algorithm: HashAlgorithm",
    "625 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:26:37: error: cannot find type 'CryptoXPCServiceProtocol' in scope",
    " 24 |  - Proper actor isolation for all mutable state",
    " 25 |  */",
    " 26 | public actor CryptoXPCServiceActor: CryptoXPCServiceProtocol {",
    "    |                                     `- error: cannot find type 'CryptoXPCServiceProtocol' in scope",
    " 27 |   // MARK: - Private properties",
    " 28 | ",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:55:21: error: cannot find type 'CryptoProviderProtocol' in scope",
    "53 |    */",
    "54 |   public static func create(",
    "55 |     cryptoProvider: CryptoProviderProtocol,",
    "   |                     `- error: cannot find type 'CryptoProviderProtocol' in scope",
    "56 |     keyStore: KeyStoreProtocol,",
    "57 |     logger: LoggingProtocol",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:56:15: error: cannot find type 'KeyStoreProtocol' in scope",
    "54 |   public static func create(",
    "55 |     cryptoProvider: CryptoProviderProtocol,",
    "56 |     keyStore: KeyStoreProtocol,",
    "   |               `- error: cannot find type 'KeyStoreProtocol' in scope",
    "57 |     logger: LoggingProtocol",
    "58 |   ) async -> CryptoXPCServiceActor {",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:22:36: error: cannot find type 'CryptoServiceMonitorProtocol' in scope",
    " 20 |  - Uses domain-specific DTOs for all communications",
    " 21 |  */",
    " 22 | public actor CryptoServiceMonitor: CryptoServiceMonitorProtocol {",
    "    |                                    `- error: cannot find type 'CryptoServiceMonitorProtocol' in scope",
    " 23 |   /// Logger for recording operations and errors",
    " 24 |   private let logger: LoggingProtocol",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:262:21: error: extraneous argument labels 'level:message:' in call",
    "260 |     additionalContext: LogMetadataDTOCollection?=nil",
    "261 |   ) async {",
    "262 |     await logger.log(",
    "    |                     `- error: extraneous argument labels 'level:message:' in call",
    "263 |       level: .debug,",
    "264 |       message: \"Starting crypto monitor operation: \\(operation)\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:265:34: error: missing argument for parameter 'source' in call",
    "263 |       level: .debug,",
    "264 |       message: \"Starting crypto monitor operation: \\(operation)\",",
    "265 |       metadata: additionalContext",
    "    |                                  `- error: missing argument for parameter 'source' in call",
    "266 |     )",
    "267 |   }",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:60:15: note: 'log(_:_:metadata:source:)' declared here",
    " 58 |   ///   - metadata: Optional metadata",
    " 59 |   ///   - source: Source component identifier",
    " 60 |   public func log(",
    "    |               `- note: 'log(_:_:metadata:source:)' declared here",
    " 61 |     _ level: LogLevel,",
    " 62 |     _ message: String,",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:265:17: error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'",
    "263 |       level: .debug,",
    "264 |       message: \"Starting crypto monitor operation: \\(operation)\",",
    "265 |       metadata: additionalContext",
    "    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'",
    "266 |     )",
    "267 |   }",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:273:21: error: extraneous argument labels 'level:message:' in call",
    "271 |     additionalContext: LogMetadataDTOCollection?=nil",
    "272 |   ) async {",
    "273 |     await logger.log(",
    "    |                     `- error: extraneous argument labels 'level:message:' in call",
    "274 |       level: .debug,",
    "275 |       message: \"Successfully completed crypto monitor operation: \\(operation)\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:276:34: error: missing argument for parameter 'source' in call",
    "274 |       level: .debug,",
    "275 |       message: \"Successfully completed crypto monitor operation: \\(operation)\",",
    "276 |       metadata: additionalContext",
    "    |                                  `- error: missing argument for parameter 'source' in call",
    "277 |     )",
    "278 |   }",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:60:15: note: 'log(_:_:metadata:source:)' declared here",
    " 58 |   ///   - metadata: Optional metadata",
    " 59 |   ///   - source: Source component identifier",
    " 60 |   public func log(",
    "    |               `- note: 'log(_:_:metadata:source:)' declared here",
    " 61 |     _ level: LogLevel,",
    " 62 |     _ message: String,",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:276:17: error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'",
    "274 |       level: .debug,",
    "275 |       message: \"Successfully completed crypto monitor operation: \\(operation)\",",
    "276 |       metadata: additionalContext",
    "    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'",
    "277 |     )",
    "278 |   }",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:288:21: error: extraneous argument labels 'level:message:' in call",
    "286 |     context=context.withPrivate(key: \"warning\", value: message)",
    "287 | ",
    "288 |     await logger.log(",
    "    |                     `- error: extraneous argument labels 'level:message:' in call",
    "289 |       level: .warning,",
    "290 |       message: \"Warning in crypto monitor operation: \\(operation)\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:291:24: error: missing argument for parameter 'source' in call",
    "289 |       level: .warning,",
    "290 |       message: \"Warning in crypto monitor operation: \\(operation)\",",
    "291 |       metadata: context",
    "    |                        `- error: missing argument for parameter 'source' in call",
    "292 |     )",
    "293 |   }",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:60:15: note: 'log(_:_:metadata:source:)' declared here",
    " 58 |   ///   - metadata: Optional metadata",
    " 59 |   ///   - source: Source component identifier",
    " 60 |   public func log(",
    "    |               `- note: 'log(_:_:metadata:source:)' declared here",
    " 61 |     _ level: LogLevel,",
    " 62 |     _ message: String,",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:291:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'",
    "289 |       level: .warning,",
    "290 |       message: \"Warning in crypto monitor operation: \\(operation)\",",
    "291 |       metadata: context",
    "    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'",
    "292 |     )",
    "293 |   }",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:303:21: error: extraneous argument labels 'level:message:' in call",
    "301 |     context=context.withPrivate(key: \"error\", value: \"\\(error)\")",
    "302 | ",
    "303 |     await logger.log(",
    "    |                     `- error: extraneous argument labels 'level:message:' in call",
    "304 |       level: .error,",
    "305 |       message: \"Failed crypto monitor operation: \\(operation)\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:306:24: error: missing argument for parameter 'source' in call",
    "304 |       level: .error,",
    "305 |       message: \"Failed crypto monitor operation: \\(operation)\",",
    "306 |       metadata: context",
    "    |                        `- error: missing argument for parameter 'source' in call",
    "307 |     )",
    "308 |   }",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:60:15: note: 'log(_:_:metadata:source:)' declared here",
    " 58 |   ///   - metadata: Optional metadata",
    " 59 |   ///   - source: Source component identifier",
    " 60 |   public func log(",
    "    |               `- note: 'log(_:_:metadata:source:)' declared here",
    " 61 |     _ level: LogLevel,",
    " 62 |     _ message: String,",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:306:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'",
    "304 |       level: .error,",
    "305 |       message: \"Failed crypto monitor operation: \\(operation)\",",
    "306 |       metadata: context",
    "    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'",
    "307 |     )",
    "308 |   }",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:36:31: error: cannot find type 'CryptoProviderProtocol' in scope",
    " 34 | ",
    " 35 |   /// Crypto provider for performing operations",
    " 36 |   private let cryptoProvider: CryptoProviderProtocol",
    "    |                               `- error: cannot find type 'CryptoProviderProtocol' in scope",
    " 37 | ",
    " 38 |   /// Key store for key management",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:39:25: error: cannot find type 'KeyStoreProtocol' in scope",
    " 37 | ",
    " 38 |   /// Key store for key management",
    " 39 |   private let keyStore: KeyStoreProtocol",
    "    |                         `- error: cannot find type 'KeyStoreProtocol' in scope",
    " 40 | ",
    " 41 |   // MARK: - Initialisation",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:52:21: error: cannot find type 'CryptoProviderProtocol' in scope",
    " 50 |    */",
    " 51 |   public init(",
    " 52 |     cryptoProvider: CryptoProviderProtocol,",
    "    |                     `- error: cannot find type 'CryptoProviderProtocol' in scope",
    " 53 |     keyStore: KeyStoreProtocol,",
    " 54 |     logger: LoggingProtocol",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:53:15: error: cannot find type 'KeyStoreProtocol' in scope",
    " 51 |   public init(",
    " 52 |     cryptoProvider: CryptoProviderProtocol,",
    " 53 |     keyStore: KeyStoreProtocol,",
    "    |               `- error: cannot find type 'KeyStoreProtocol' in scope",
    " 54 |     logger: LoggingProtocol",
    " 55 |   ) {",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:78:46: error: no type named 'Crypto' in module 'UmbraErrors'",
    " 76 |     keyIdentifier: String,",
    " 77 |     options: CryptoOperationOptionsDTO?=nil",
    " 78 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'",
    " 79 |     await cryptoLogger.logOperationStart(",
    " 80 |       operation: \"encrypt\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:75:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    " 73 |    */",
    " 74 |   public func encrypt(",
    " 75 |     data: SecureBytes,",
    "    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    " 76 |     keyIdentifier: String,",
    " 77 |     options: CryptoOperationOptionsDTO?=nil",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:144:46: error: no type named 'Crypto' in module 'UmbraErrors'",
    "142 |     keyIdentifier: String,",
    "143 |     options: CryptoOperationOptionsDTO?=nil",
    "144 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "145 |     await cryptoLogger.logOperationStart(",
    "146 |       operation: \"decrypt\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:141:20: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "139 |    */",
    "140 |   public func decrypt(",
    "141 |     encryptedData: SecureBytes,",
    "    |                    `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "142 |     keyIdentifier: String,",
    "143 |     options: CryptoOperationOptionsDTO?=nil",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:214:41: error: no type named 'Crypto' in module 'UmbraErrors'",
    "212 |     options: KeyGenerationOptionsDTO,",
    "213 |     metadata: KeyMetadataDTO?=nil",
    "214 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {",
    "    |                                         `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "215 |     await cryptoLogger.logOperationStart(",
    "216 |       operation: \"generateKey\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:213:15: error: cannot find type 'KeyMetadataDTO' in scope",
    "211 |   public func generateKey(",
    "212 |     options: KeyGenerationOptionsDTO,",
    "213 |     metadata: KeyMetadataDTO?=nil",
    "    |               `- error: cannot find type 'KeyMetadataDTO' in scope",
    "214 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {",
    "215 |     await cryptoLogger.logOperationStart(",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:278:46: error: no type named 'Crypto' in module 'UmbraErrors'",
    "276 |   public func exportKey(",
    "277 |     keyIdentifier: String",
    "278 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "279 |     await cryptoLogger.logOperationStart(",
    "280 |       operation: \"exportKey\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:329:41: error: no type named 'Crypto' in module 'UmbraErrors'",
    "327 |     keyData: SecureBytes,",
    "328 |     metadata: KeyMetadataDTO",
    "329 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {",
    "    |                                         `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "330 |     await cryptoLogger.logOperationStart(",
    "331 |       operation: \"importKey\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:328:15: error: cannot find type 'KeyMetadataDTO' in scope",
    "326 |   public func importKey(",
    "327 |     keyData: SecureBytes,",
    "328 |     metadata: KeyMetadataDTO",
    "    |               `- error: cannot find type 'KeyMetadataDTO' in scope",
    "329 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {",
    "330 |     await cryptoLogger.logOperationStart(",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:327:14: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "325 |    */",
    "326 |   public func importKey(",
    "327 |     keyData: SecureBytes,",
    "    |              `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "328 |     metadata: KeyMetadataDTO",
    "329 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:383:39: error: no type named 'Crypto' in module 'UmbraErrors'",
    "381 |   public func deleteKey(",
    "382 |     keyIdentifier: String",
    "383 |   ) async -> Result<Bool, UmbraErrors.Crypto.Core> {",
    "    |                                       `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "384 |     await cryptoLogger.logOperationStart(",
    "385 |       operation: \"deleteKey\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:438:46: error: no type named 'Crypto' in module 'UmbraErrors'",
    "436 |     keyIdentifier: String,",
    "437 |     options: SigningOptionsDTO?=nil",
    "438 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "439 |     await cryptoLogger.logOperationStart(",
    "440 |       operation: \"sign\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:435:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "433 |    */",
    "434 |   public func sign(",
    "435 |     data: SecureBytes,",
    "    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "436 |     keyIdentifier: String,",
    "437 |     options: SigningOptionsDTO?=nil",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:506:39: error: no type named 'Crypto' in module 'UmbraErrors'",
    "504 |     keyIdentifier: String,",
    "505 |     options: SigningOptionsDTO?=nil",
    "506 |   ) async -> Result<Bool, UmbraErrors.Crypto.Core> {",
    "    |                                       `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "507 |     await cryptoLogger.logOperationStart(",
    "508 |       operation: \"verify\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:502:16: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "500 |    */",
    "501 |   public func verify(",
    "502 |     signature: SecureBytes,",
    "    |                `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "503 |     data: SecureBytes,",
    "504 |     keyIdentifier: String,",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:503:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "501 |   public func verify(",
    "502 |     signature: SecureBytes,",
    "503 |     data: SecureBytes,",
    "    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "504 |     keyIdentifier: String,",
    "505 |     options: SigningOptionsDTO?=nil",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:575:46: error: no type named 'Crypto' in module 'UmbraErrors'",
    "573 |   public func generateRandomBytes(",
    "574 |     length: Int",
    "575 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "576 |     await cryptoLogger.logOperationStart(",
    "577 |       operation: \"generateRandomBytes\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:625:46: error: no type named 'Crypto' in module 'UmbraErrors'",
    "623 |     data: SecureBytes,",
    "624 |     algorithm: HashAlgorithm",
    "625 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'",
    "626 |     await cryptoLogger.logOperationStart(",
    "627 |       operation: \"hash\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:624:16: error: 'HashAlgorithm' is ambiguous for type lookup in this context",
    "622 |   public func hash(",
    "623 |     data: SecureBytes,",
    "624 |     algorithm: HashAlgorithm",
    "    |                `- error: 'HashAlgorithm' is ambiguous for type lookup in this context",
    "625 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "626 |     await cryptoLogger.logOperationStart(",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CryptoTypes/DTOs/SigningOptionsDTO.swift:69:13: note: found this candidate",
    "67 | ",
    "68 | /// Hash algorithms for cryptographic operations",
    "69 | public enum HashAlgorithm: String, Sendable, Equatable {",
    "   |             `- note: found this candidate",
    "70 |   case md5 // Not recommended for security applications",
    "71 |   case sha1 // Not recommended for security applications",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/Types/HashAlgorithm.swift:9:13: note: found this candidate",
    " 7 |  representation of domain concepts.",
    " 8 |  */",
    " 9 | public enum HashAlgorithm: String, Sendable, Codable, Equatable, CaseIterable {",
    "   |             `- note: found this candidate",
    "10 |   /// SHA-256 hash algorithm",
    "11 |   case sha256=\"SHA-256\"",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:623:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "621 |    */",
    "622 |   public func hash(",
    "623 |     data: SecureBytes,",
    "    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead",
    "624 |     algorithm: HashAlgorithm",
    "625 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:26:37: error: cannot find type 'CryptoXPCServiceProtocol' in scope",
    " 24 |  - Proper actor isolation for all mutable state",
    " 25 |  */",
    " 26 | public actor CryptoXPCServiceActor: CryptoXPCServiceProtocol {",
    "    |                                     `- error: cannot find type 'CryptoXPCServiceProtocol' in scope",
    " 27 |   // MARK: - Private properties",
    " 28 | ",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:83:58: error: value of type 'SecureBytes' has no member 'bytes'",
    " 81 |       additionalContext: LogMetadataDTOCollection()",
    " 82 |         .withPrivate(key: \"keyIdentifier\", value: keyIdentifier)",
    " 83 |         .withPrivate(key: \"dataSize\", value: String(data.bytes.count))",
    "    |                                                          `- error: value of type 'SecureBytes' has no member 'bytes'",
    " 84 |     )",
    " 85 | ",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:88:17: error: module 'UmbraErrors' has no member named 'Crypto'",
    " 86 |     // Validate input",
    " 87 |     guard !keyIdentifier.isEmpty else {",
    " 88 |       let error=UmbraErrors.Crypto.Core.invalidInput(\"Empty key identifier\")",
    "    |                 `- error: module 'UmbraErrors' has no member named 'Crypto'",
    " 89 |       await cryptoLogger.logOperationError(",
    " 90 |         operation: \"encrypt\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:121:25: error: module 'UmbraErrors' has no member named 'Crypto'",
    "119 | ",
    "120 |       case let .failure(error):",
    "121 |         let cryptoError=UmbraErrors.Crypto.Core.keyError(\"Failed to retrieve key: \\(error)\")",
    "    |                         `- error: module 'UmbraErrors' has no member named 'Crypto'",
    "122 |         await cryptoLogger.logOperationError(",
    "123 |           operation: \"encrypt\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:149:67: error: value of type 'SecureBytes' has no member 'bytes'",
    "147 |       additionalContext: LogMetadataDTOCollection()",
    "148 |         .withPrivate(key: \"keyIdentifier\", value: keyIdentifier)",
    "149 |         .withPrivate(key: \"dataSize\", value: String(encryptedData.bytes.count))",
    "    |                                                                   `- error: value of type 'SecureBytes' has no member 'bytes'",
    "150 |     )",
    "151 | ",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:154:17: error: module 'UmbraErrors' has no member named 'Crypto'",
    "152 |     // Validate input",
    "153 |     guard !keyIdentifier.isEmpty else {",
    "154 |       let error=UmbraErrors.Crypto.Core.invalidInput(\"Empty key identifier\")",
    "    |                 `- error: module 'UmbraErrors' has no member named 'Crypto'",
    "155 |       await cryptoLogger.logOperationError(",
    "156 |         operation: \"decrypt\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:191:25: error: module 'UmbraErrors' has no member named 'Crypto'",
    "189 | ",
    "190 |       case let .failure(error):",
    "191 |         let cryptoError=UmbraErrors.Crypto.Core.keyError(\"Failed to retrieve key: \\(error)\")",
    "    |                         `- error: module 'UmbraErrors' has no member named 'Crypto'",
    "192 |         await cryptoLogger.logOperationError(",
    "193 |           operation: \"decrypt\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:228:37: error: cannot find 'KeyMetadataDTO' in scope",
    "226 |       case let .success(key):",
    "227 |         // Create metadata if not provided",
    "228 |         let keyMetadata=metadata ?? KeyMetadataDTO(",
    "    |                                     `- error: cannot find 'KeyMetadataDTO' in scope",
    "229 |           algorithm: options.algorithm,",
    "230 |           keySize: options.keySize,",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:231:25: error: cannot find 'TimePointDTO' in scope",
    "229 |           algorithm: options.algorithm,",
    "230 |           keySize: options.keySize,",
    "231 |           creationDate: TimePointDTO.now(),",
    "    |                         `- error: cannot find 'TimePointDTO' in scope",
    "232 |           name: \"Generated key\",",
    "233 |           description: \"Automatically generated key\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:250:29: error: module 'UmbraErrors' has no member named 'Crypto'",
    "248 | ",
    "249 |           case let .failure(error):",
    "250 |             let cryptoError=UmbraErrors.Crypto.Core.keyError(",
    "    |                             `- error: module 'UmbraErrors' has no member named 'Crypto'",
    "251 |               \"Failed to store generated key: \\(error)\"",
    "252 |             )",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:287:17: error: module 'UmbraErrors' has no member named 'Crypto'",
    "285 |     // Validate input",
    "286 |     guard !keyIdentifier.isEmpty else {",
    "287 |       let error=UmbraErrors.Crypto.Core.invalidInput(\"Empty key identifier\")",
    "    |                 `- error: module 'UmbraErrors' has no member named 'Crypto'",
    "288 |       await cryptoLogger.logOperationError(",
    "289 |         operation: \"exportKey\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:308:25: error: module 'UmbraErrors' has no member named 'Crypto'",
    "306 | ",
    "307 |       case let .failure(error):",
    "308 |         let cryptoError=UmbraErrors.Crypto.Core.keyError(\"Failed to export key: \\(error)\")",
    "    |                         `- error: module 'UmbraErrors' has no member named 'Crypto'",
    "309 |         await cryptoLogger.logOperationError(",
    "310 |           operation: \"exportKey\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:333:64: error: value of type 'SecureBytes' has no member 'bytes'",
    "331 |       operation: \"importKey\",",
    "332 |       additionalContext: LogMetadataDTOCollection()",
    "333 |         .withPrivate(key: \"keyDataSize\", value: String(keyData.bytes.count))",
    "    |                                                                `- error: value of type 'SecureBytes' has no member 'bytes'",
    "334 |         .withPrivate(key: \"algorithm\", value: metadata.algorithm.rawValue)",
    "335 |     )",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:355:29: error: module 'UmbraErrors' has no member named 'Crypto'",
    "353 | ",
    "354 |           case let .failure(error):",
    "355 |             let cryptoError=UmbraErrors.Crypto.Core.keyError(",
    "    |                             `- error: module 'UmbraErrors' has no member named 'Crypto'",
    "356 |               \"Failed to store imported key: \\(error)\"",
    "357 |             )",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:392:17: error: module 'UmbraErrors' has no member named 'Crypto'",
    "390 |     // Validate input",
    "391 |     guard !keyIdentifier.isEmpty else {",
    "392 |       let error=UmbraErrors.Crypto.Core.invalidInput(\"Empty key identifier\")",
    "    |                 `- error: module 'UmbraErrors' has no member named 'Crypto'",
    "393 |       await cryptoLogger.logOperationError(",
    "394 |         operation: \"deleteKey\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:413:25: error: module 'UmbraErrors' has no member named 'Crypto'",
    "411 | ",
    "412 |       case let .failure(error):",
    "413 |         let cryptoError=UmbraErrors.Crypto.Core.keyError(\"Failed to delete key: \\(error)\")",
    "    |                         `- error: module 'UmbraErrors' has no member named 'Crypto'",
    "414 |         await cryptoLogger.logOperationError(",
    "415 |           operation: \"deleteKey\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:443:58: error: value of type 'SecureBytes' has no member 'bytes'",
    "441 |       additionalContext: LogMetadataDTOCollection()",
    "442 |         .withPrivate(key: \"keyIdentifier\", value: keyIdentifier)",
    "443 |         .withPrivate(key: \"dataSize\", value: String(data.bytes.count))",
    "    |                                                          `- error: value of type 'SecureBytes' has no member 'bytes'",
    "444 |     )",
    "445 | ",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:448:17: error: module 'UmbraErrors' has no member named 'Crypto'",
    "446 |     // Validate input",
    "447 |     guard !keyIdentifier.isEmpty else {",
    "448 |       let error=UmbraErrors.Crypto.Core.invalidInput(\"Empty key identifier\")",
    "    |                 `- error: module 'UmbraErrors' has no member named 'Crypto'",
    "449 |       await cryptoLogger.logOperationError(",
    "450 |         operation: \"sign\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:481:25: error: module 'UmbraErrors' has no member named 'Crypto'",
    "479 | ",
    "480 |       case let .failure(error):",
    "481 |         let cryptoError=UmbraErrors.Crypto.Core.keyError(\"Failed to retrieve key: \\(error)\")",
    "    |                         `- error: module 'UmbraErrors' has no member named 'Crypto'",
    "482 |         await cryptoLogger.logOperationError(",
    "483 |           operation: \"sign\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:511:58: error: value of type 'SecureBytes' has no member 'bytes'",
    "509 |       additionalContext: LogMetadataDTOCollection()",
    "510 |         .withPrivate(key: \"keyIdentifier\", value: keyIdentifier)",
    "511 |         .withPrivate(key: \"dataSize\", value: String(data.bytes.count))",
    "    |                                                          `- error: value of type 'SecureBytes' has no member 'bytes'",
    "512 |         .withPrivate(key: \"signatureSize\", value: String(signature.bytes.count))",
    "513 |     )",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:512:68: error: value of type 'SecureBytes' has no member 'bytes'",
    "510 |         .withPrivate(key: \"keyIdentifier\", value: keyIdentifier)",
    "511 |         .withPrivate(key: \"dataSize\", value: String(data.bytes.count))",
    "512 |         .withPrivate(key: \"signatureSize\", value: String(signature.bytes.count))",
    "    |                                                                    `- error: value of type 'SecureBytes' has no member 'bytes'",
    "513 |     )",
    "514 | ",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:517:17: error: module 'UmbraErrors' has no member named 'Crypto'",
    "515 |     // Validate input",
    "516 |     guard !keyIdentifier.isEmpty else {",
    "517 |       let error=UmbraErrors.Crypto.Core.invalidInput(\"Empty key identifier\")",
    "    |                 `- error: module 'UmbraErrors' has no member named 'Crypto'",
    "518 |       await cryptoLogger.logOperationError(",
    "519 |         operation: \"verify\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:555:25: error: module 'UmbraErrors' has no member named 'Crypto'",
    "553 | ",
    "554 |       case let .failure(error):",
    "555 |         let cryptoError=UmbraErrors.Crypto.Core.keyError(\"Failed to retrieve key: \\(error)\")",
    "    |                         `- error: module 'UmbraErrors' has no member named 'Crypto'",
    "556 |         await cryptoLogger.logOperationError(",
    "557 |           operation: \"verify\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:584:17: error: module 'UmbraErrors' has no member named 'Crypto'",
    "582 |     // Validate input",
    "583 |     guard length > 0 else {",
    "584 |       let error=UmbraErrors.Crypto.Core.invalidInput(\"Length must be greater than zero\")",
    "    |                 `- error: module 'UmbraErrors' has no member named 'Crypto'",
    "585 |       await cryptoLogger.logOperationError(",
    "586 |         operation: \"generateRandomBytes\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:629:58: error: value of type 'SecureBytes' has no member 'bytes'",
    "627 |       operation: \"hash\",",
    "628 |       additionalContext: LogMetadataDTOCollection()",
    "629 |         .withPrivate(key: \"dataSize\", value: String(data.bytes.count))",
    "    |                                                          `- error: value of type 'SecureBytes' has no member 'bytes'",
    "630 |         .withPublic(key: \"algorithm\", value: algorithm.rawValue)",
    "631 |     )",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:674:21: error: extraneous argument labels 'level:message:' in call",
    "672 |     additionalContext: LogMetadataDTOCollection?=nil",
    "673 |   ) async {",
    "674 |     await logger.log(",
    "    |                     `- error: extraneous argument labels 'level:message:' in call",
    "675 |       level: .debug,",
    "676 |       message: \"Starting crypto operation: \\(operation)\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:677:34: error: missing argument for parameter 'source' in call",
    "675 |       level: .debug,",
    "676 |       message: \"Starting crypto operation: \\(operation)\",",
    "677 |       metadata: additionalContext",
    "    |                                  `- error: missing argument for parameter 'source' in call",
    "678 |     )",
    "679 |   }",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:60:15: note: 'log(_:_:metadata:source:)' declared here",
    " 58 |   ///   - metadata: Optional metadata",
    " 59 |   ///   - source: Source component identifier",
    " 60 |   public func log(",
    "    |               `- note: 'log(_:_:metadata:source:)' declared here",
    " 61 |     _ level: LogLevel,",
    " 62 |     _ message: String,",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:677:17: error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'",
    "675 |       level: .debug,",
    "676 |       message: \"Starting crypto operation: \\(operation)\",",
    "677 |       metadata: additionalContext",
    "    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'",
    "678 |     )",
    "679 |   }",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:685:21: error: extraneous argument labels 'level:message:' in call",
    "683 |     additionalContext: LogMetadataDTOCollection?=nil",
    "684 |   ) async {",
    "685 |     await logger.log(",
    "    |                     `- error: extraneous argument labels 'level:message:' in call",
    "686 |       level: .debug,",
    "687 |       message: \"Successfully completed crypto operation: \\(operation)\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:688:34: error: missing argument for parameter 'source' in call",
    "686 |       level: .debug,",
    "687 |       message: \"Successfully completed crypto operation: \\(operation)\",",
    "688 |       metadata: additionalContext",
    "    |                                  `- error: missing argument for parameter 'source' in call",
    "689 |     )",
    "690 |   }",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:60:15: note: 'log(_:_:metadata:source:)' declared here",
    " 58 |   ///   - metadata: Optional metadata",
    " 59 |   ///   - source: Source component identifier",
    " 60 |   public func log(",
    "    |               `- note: 'log(_:_:metadata:source:)' declared here",
    " 61 |     _ level: LogLevel,",
    " 62 |     _ message: String,",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:688:17: error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'",
    "686 |       level: .debug,",
    "687 |       message: \"Successfully completed crypto operation: \\(operation)\",",
    "688 |       metadata: additionalContext",
    "    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'",
    "689 |     )",
    "690 |   }",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:700:21: error: extraneous argument labels 'level:message:' in call",
    "698 |     context=context.withPrivate(key: \"error\", value: \"\\(error)\")",
    "699 | ",
    "700 |     await logger.log(",
    "    |                     `- error: extraneous argument labels 'level:message:' in call",
    "701 |       level: .error,",
    "702 |       message: \"Failed crypto operation: \\(operation)\",",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:703:24: error: missing argument for parameter 'source' in call",
    "701 |       level: .error,",
    "702 |       message: \"Failed crypto operation: \\(operation)\",",
    "703 |       metadata: context",
    "    |                        `- error: missing argument for parameter 'source' in call",
    "704 |     )",
    "705 |   }",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:60:15: note: 'log(_:_:metadata:source:)' declared here",
    " 58 |   ///   - metadata: Optional metadata",
    " 59 |   ///   - source: Source component identifier",
    " 60 |   public func log(",
    "    |               `- note: 'log(_:_:metadata:source:)' declared here",
    " 61 |     _ level: LogLevel,",
    " 62 |     _ message: String,",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:703:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'",
    "701 |       level: .error,",
    "702 |       message: \"Failed crypto operation: \\(operation)\",",
    "703 |       metadata: context",
    "    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'",
    "704 |     )",
    "705 |   }",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:55:21: error: cannot find type 'CryptoProviderProtocol' in scope",
    "53 |    */",
    "54 |   public static func create(",
    "55 |     cryptoProvider: CryptoProviderProtocol,",
    "   |                     `- error: cannot find type 'CryptoProviderProtocol' in scope",
    "56 |     keyStore: KeyStoreProtocol,",
    "57 |     logger: LoggingProtocol",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:56:15: error: cannot find type 'KeyStoreProtocol' in scope",
    "54 |   public static func create(",
    "55 |     cryptoProvider: CryptoProviderProtocol,",
    "56 |     keyStore: KeyStoreProtocol,",
    "   |               `- error: cannot find type 'KeyStoreProtocol' in scope",
    "57 |     logger: LoggingProtocol",
    "58 |   ) async -> CryptoXPCServiceActor {",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:30:30: error: cannot find 'CryptoProviderFactory' in scope",
    "28 |   ) async -> CryptoXPCServiceActor {",
    "29 |     // Create dependencies",
    "30 |     let cryptoProvider=await CryptoProviderFactory.createDefault(logger: logger)",
    "   |                              `- error: cannot find 'CryptoProviderFactory' in scope",
    "31 |     let keyStore=await KeyStoreFactory.createDefault(logger: logger)",
    "32 | ",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:31:24: error: cannot find 'KeyStoreFactory' in scope",
    "29 |     // Create dependencies",
    "30 |     let cryptoProvider=await CryptoProviderFactory.createDefault(logger: logger)",
    "31 |     let keyStore=await KeyStoreFactory.createDefault(logger: logger)",
    "   |                        `- error: cannot find 'KeyStoreFactory' in scope",
    "32 | ",
    "33 |     // Create and return service actor",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:81:30: error: cannot find 'CryptoProviderFactory' in scope",
    "79 |   ) async -> CryptoXPCServiceActor {",
    "80 |     // Create test dependencies",
    "81 |     let cryptoProvider=await CryptoProviderFactory.createForTesting(logger: logger)",
    "   |                              `- error: cannot find 'CryptoProviderFactory' in scope",
    "82 |     let keyStore=await KeyStoreFactory.createInMemory(logger: logger)",
    "83 | ",
    "",
    "packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:82:24: error: cannot find 'KeyStoreFactory' in scope",
    "80 |     // Create test dependencies",
    "81 |     let cryptoProvider=await CryptoProviderFactory.createForTesting(logger: logger)",
    "82 |     let keyStore=await KeyStoreFactory.createInMemory(logger: logger)",
    "   |                        `- error: cannot find 'KeyStoreFactory' in scope",
    "83 | ",
    "84 |     // Create and return service actor",
    "ERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/APIServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/APIServices:APIServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/APIServices:APIServices) ",
    "  (cd /Users/mpy/.bazel/execroot/_main && \\",
    "  exec env - \\",
    "    APPLE_SDK_PLATFORM=MacOSX \\",
    "    APPLE_SDK_VERSION_OVERRIDE=15.4 \\",
    "    CC=clang \\",
    "    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\",
    "    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\",
    "  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/APIServices/APIServices.swiftmodule-0.params)",
    "# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa",
    "# Execution platform: @@platforms//host:host",
    "error: emit-module command failed with exit code 1 (use -v to see invocation)",
    "packages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:1:8: error: no such module 'APIInterfaces'",
    "  1 | import APIInterfaces",
    "    |        `- error: no such module 'APIInterfaces'",
    "  2 | import LoggingInterfaces",
    "  3 | import SecurityCoreInterfaces",
    "packages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:1:8: error: no such module 'APIInterfaces'",
    "  1 | import APIInterfaces",
    "    |        `- error: no such module 'APIInterfaces'",
    "  2 | import LoggingInterfaces",
    "  3 | import SecurityCoreInterfaces",
    "[287 / 293] Compiling Swift module //packages/UmbraImplementations/Sources/ResticServices:ResticServices; 1s disk-cache, worker",
    "ERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/ResticServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/ResticServices:ResticServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/ResticServices:ResticServices) ",
    "  (cd /Users/mpy/.bazel/execroot/_main && \\",
    "  exec env - \\",
    "    APPLE_SDK_PLATFORM=MacOSX \\",
    "    APPLE_SDK_VERSION_OVERRIDE=15.4 \\",
    "    CC=clang \\",
    "    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\",
    "    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\",
    "  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftmodule-0.params)",
    "# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa",
    "# Execution platform: @@platforms//host:host",
    "error: emit-module command failed with exit code 1 (use -v to see invocation)",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:15:14: error: actor-isolated property 'defaultRepository' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'",
    "  8 | /// This actor-based implementation provides proper isolation for concurrent operations,",
    "  9 | /// ensuring thread safety while maintaining high performance for Restic operations.",
    " 10 | @preconcurrency public actor ResticServiceImpl: ResticServiceProtocol {",
    "    |                                                 `- note: add '@preconcurrency' to the 'ResticServiceProtocol' conformance to defer isolation checking to run time",
    " 11 |   /// The path to the Restic executable",
    " 12 |   public let executablePath: String",
    " 13 | ",
    " 14 |   /// The default repository location, if set",
    " 15 |   public var defaultRepository: String? {",
    "    |              `- error: actor-isolated property 'defaultRepository' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'",
    " 16 |     get { _defaultRepository }",
    " 17 |     set { _defaultRepository = newValue }",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:35:7: note: requirement 'defaultRepository' declared here",
    "33 | ",
    "34 |   /// The default repository location, if set",
    "35 |   var defaultRepository: String? { get set }",
    "   |       `- note: requirement 'defaultRepository' declared here",
    "36 | ",
    "37 |   /// The default repository password, if set",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:22:14: error: actor-isolated property 'defaultPassword' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'",
    " 20 | ",
    " 21 |   /// The default repository password, if set",
    " 22 |   public var defaultPassword: String? {",
    "    |              `- error: actor-isolated property 'defaultPassword' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'",
    " 23 |     get { _defaultPassword }",
    " 24 |     set { _defaultPassword = newValue }",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:38:7: note: requirement 'defaultPassword' declared here",
    "36 | ",
    "37 |   /// The default repository password, if set",
    "38 |   var defaultPassword: String? { get set }",
    "   |       `- note: requirement 'defaultPassword' declared here",
    "39 | ",
    "40 |   /// Progress reporting delegate for receiving operation updates",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:29:14: error: actor-isolated property 'progressDelegate' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'",
    " 27 | ",
    " 28 |   /// Progress reporting delegate for receiving operation updates",
    " 29 |   public var progressDelegate: (any ResticProgressReporting)? {",
    "    |              `- error: actor-isolated property 'progressDelegate' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'",
    " 30 |     get { _progressDelegate }",
    " 31 |     set { _progressDelegate = newValue }",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:41:7: note: requirement 'progressDelegate' declared here",
    "39 | ",
    "40 |   /// Progress reporting delegate for receiving operation updates",
    "41 |   var progressDelegate: ResticProgressReporting? { get set }",
    "   |       `- note: requirement 'progressDelegate' declared here",
    "42 | ",
    "43 |   /// Executes a Restic command and returns its output",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:10:30: error: type 'ResticServiceImpl' does not conform to protocol 'ResticServiceProtocol'",
    "  8 | /// This actor-based implementation provides proper isolation for concurrent operations,",
    "  9 | /// ensuring thread safety while maintaining high performance for Restic operations.",
    " 10 | @preconcurrency public actor ResticServiceImpl: ResticServiceProtocol {",
    "    |                              |- error: type 'ResticServiceImpl' does not conform to protocol 'ResticServiceProtocol'",
    "    |                              `- note: add stubs for conformance",
    " 11 |   /// The path to the Restic executable",
    " 12 |   public let executablePath: String",
    "    :",
    "277 |   /// - Returns: The raw output string from the command",
    "278 |   /// - Throws: ResticError if the command fails",
    "279 |   public func execute(_ command: ResticCommand) async throws -> String {",
    "    |               `- note: candidate has non-matching type '(ResticCommand) async throws -> String'",
    "280 |     try command.validate()",
    "281 | ",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:47:8: note: protocol requires function 'execute' with type '(any ResticCommand) async throws -> String'",
    "45 |   /// - Returns: The command output as a string",
    "46 |   /// - Throws: ResticError if the command fails",
    "47 |   func execute(_ command: ResticCommand) async throws -> String",
    "   |        `- note: protocol requires function 'execute' with type '(any ResticCommand) async throws -> String'",
    "48 | ",
    "49 |   /// Initialises a new repository",
    "   :",
    "53 |   /// - Returns: Result of the initialisation",
    "54 |   /// - Throws: ResticError if initialisation fails",
    "55 |   func initialiseRepository(at location: String, password: String) async throws",
    "   |        `- note: protocol requires function 'initialiseRepository(at:password:)' with type '(String, String) async throws -> ResticCommandResult'",
    "56 |     -> ResticCommandResult",
    "57 | ",
    "   :",
    "77 |   /// - Returns: Result with backup information",
    "78 |   /// - Throws: ResticError if the backup fails",
    "79 |   func backup(paths: [String], tag: String?, excludes: [String]?) async throws",
    "   |        `- note: protocol requires function 'backup(paths:tag:excludes:)' with type '([String], String?, [String]?) async throws -> ResticCommandResult'",
    "80 |     -> ResticCommandResult",
    "81 | ",
    "   :",
    "87 |   /// - Returns: Result with restore information",
    "88 |   /// - Throws: ResticError if the restore fails",
    "89 |   func restore(snapshot: String, to target: String, paths: [String]?) async throws",
    "   |        `- note: protocol requires function 'restore(snapshot:to:paths:)' with type '(String, String, [String]?) async throws -> ResticCommandResult'",
    "90 |     -> ResticCommandResult",
    "91 | ",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:64:35: error: incorrect argument label in call (have 'logger:', expected 'underlyingLogger:')",
    " 62 |     _defaultPassword=nil",
    " 63 |     _progressDelegate=progressDelegate",
    " 64 |     self.resticLogger=ResticLogger(logger: logger)",
    "    |                                   `- error: incorrect argument label in call (have 'logger:', expected 'underlyingLogger:')",
    " 65 |     self.credentialManager=credentialManager",
    " 66 | ",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:85:5: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions",
    " 83 |     }",
    " 84 | ",
    " 85 |     await resticLogger.info(",
    "    |     `- error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions",
    " 86 |       \"Initialised ResticServiceImpl with executable: \\(executablePath)\",",
    " 87 |       metadata: [",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Logging/ResticLogger.swift:12:15: error: type 'ResticLogger' does not conform to protocol 'DomainLogger'",
    " 10 | /// with enhanced privacy controls and contextual information following the",
    " 11 | /// Alpha Dot Five architecture.",
    " 12 | public struct ResticLogger: LoggingInterfaces.DomainLogger, CoreLoggingProtocol, PrivacyAwareLoggingProtocol {",
    "    |               `- error: type 'ResticLogger' does not conform to protocol 'DomainLogger'",
    " 13 |   /// The domain name for this logger",
    " 14 |   public let domainName: String = \"ResticService\"",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Logging/ResticLogger.swift:12:15: error: type 'ResticLogger' does not conform to protocol 'PrivacyAwareLoggingProtocol'",
    " 10 | /// with enhanced privacy controls and contextual information following the",
    " 11 | /// Alpha Dot Five architecture.",
    " 12 | public struct ResticLogger: LoggingInterfaces.DomainLogger, CoreLoggingProtocol, PrivacyAwareLoggingProtocol {",
    "    |               |- error: type 'ResticLogger' does not conform to protocol 'PrivacyAwareLoggingProtocol'",
    "    |               `- note: add stubs for conformance",
    " 13 |   /// The domain name for this logger",
    " 14 |   public let domainName: String = \"ResticService\"",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/DomainLogger.swift:42:8: note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'",
    "40 |   ///   - context: Domain-specific context for the log",
    "41 |   ///   - privacyLevel: The privacy level to apply to the error details",
    "42 |   func logError(",
    "   |        `- note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'",
    "43 |     _ error: Error,",
    "44 |     context: LogContextDTO,",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/PrivacyAwareLoggingProtocol.swift:36:8: note: protocol requires function 'logSensitive(_:_:sensitiveValues:source:)' with type '(LogLevel, String, LogMetadata, String) async -> ()'",
    "34 |   ///   - sensitiveValues: Sensitive values that should be handled with privacy controls",
    "35 |   ///   - source: The component that generated the log",
    "36 |   func logSensitive(",
    "   |        `- note: protocol requires function 'logSensitive(_:_:sensitiveValues:source:)' with type '(LogLevel, String, LogMetadata, String) async -> ()'",
    "37 |     _ level: LogLevel,",
    "38 |     _ message: String,",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:425:8: error: unary operator cannot be separated from its operand",
    "423 | ",
    "424 |     // Store the credentials securely for future access",
    "425 |     if ! await credentialManager.hasCredentials(for: location) {",
    "    |        `- error: unary operator cannot be separated from its operand",
    "426 |       try await credentialManager.storeCredentials(",
    "427 |         ResticCredentials(",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:425:16: error: expected '{' after 'if' condition",
    "423 | ",
    "424 |     // Store the credentials securely for future access",
    "425 |     if ! await credentialManager.hasCredentials(for: location) {",
    "    |                `- error: expected '{' after 'if' condition",
    "426 |       try await credentialManager.storeCredentials(",
    "427 |         ResticCredentials(",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:618:7: error: unary operator cannot be separated from its operand",
    "616 |     if",
    "617 |       let repoPassword,",
    "618 |       ! await credentialManager.hasCredentials(for: repoLocation)",
    "    |       `- error: unary operator cannot be separated from its operand",
    "619 |     {",
    "620 |       try? await credentialManager.storeCredentials(",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:618:15: error: expected '{' after 'if' condition",
    "616 |     if",
    "617 |       let repoPassword,",
    "618 |       ! await credentialManager.hasCredentials(for: repoLocation)",
    "    |               `- error: expected '{' after 'if' condition",
    "619 |     {",
    "620 |       try? await credentialManager.storeCredentials(",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Credentials/KeychainResticCredentialManager.swift:52:62: error: incorrect argument label in call (have 'forAccount:serviceIdentifier:', expected 'forAccount:keyIdentifier:')",
    " 50 |     ",
    " 51 |     do {",
    " 52 |       let secret = try await keychain.retrieveEncryptedSecret(",
    "    |                                                              `- error: incorrect argument label in call (have 'forAccount:serviceIdentifier:', expected 'forAccount:keyIdentifier:')",
    " 53 |         forAccount: makeAccountIdentifier(for: repository),",
    " 54 |         serviceIdentifier: serviceIdentifier",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Credentials/KeychainResticCredentialManager.swift:142:26: error: value of type 'any KeychainSecurityProtocol' has no member 'removeItem'",
    "140 |     ",
    "141 |     do {",
    "142 |       try await keychain.removeItem(",
    "    |                          `- error: value of type 'any KeychainSecurityProtocol' has no member 'removeItem'",
    "143 |         forAccount: makeAccountIdentifier(for: repository),",
    "144 |         serviceIdentifier: serviceIdentifier",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Credentials/KeychainResticCredentialManager.swift:173:51: error: incorrect argument label in call (have 'forAccount:serviceIdentifier:', expected 'forAccount:keyIdentifier:')",
    "171 |   public func hasCredentials(for repository: String) async -> Bool {",
    "172 |     do {",
    "173 |       _=try await keychain.retrieveEncryptedSecret(",
    "    |                                                   `- error: incorrect argument label in call (have 'forAccount:serviceIdentifier:', expected 'forAccount:keyIdentifier:')",
    "174 |         forAccount: makeAccountIdentifier(for: repository),",
    "175 |         serviceIdentifier: serviceIdentifier",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Factory/ResticServiceFactory.swift:52:11: error: 'async' property access in a function that does not support concurrency",
    " 36 |   /// - Returns: A new ResticService instance",
    " 37 |   /// - Throws: ResticError if the service cannot be created",
    " 38 |   public func createResticService(",
    "    |               `- note: add 'async' to function 'createResticService(executablePath:defaultRepository:defaultPassword:progressDelegate:)' to make it asynchronous",
    " 39 |     executablePath: String,",
    " 40 |     defaultRepository: String? = nil,",
    "    :",
    " 50 |     // If default password is provided, store it for the default repository",
    " 51 |     if let defaultRepository = defaultRepository, let defaultPassword = defaultPassword {",
    " 52 |       try Task {",
    "    |           `- error: 'async' property access in a function that does not support concurrency",
    " 53 |         if !(await credentialManager.hasCredentials(for: defaultRepository)) {",
    " 54 |           try await credentialManager.storeCredentials(",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Factory/ResticServiceFactory.swift:169:11: error: 'async' property access in a function that does not support concurrency",
    "156 |   /// - Returns: A new ResticService instance",
    "157 |   /// - Throws: ResticError if the service cannot be created",
    "158 |   public func createSimpleResticService(",
    "    |               `- note: add 'async' to function 'createSimpleResticService(executablePath:defaultRepository:defaultPassword:progressDelegate:)' to make it asynchronous",
    "159 |     executablePath: String,",
    "160 |     defaultRepository: String? = nil,",
    "    :",
    "167 |     // If default password is provided, store it for the default repository",
    "168 |     if let defaultRepository = defaultRepository, let defaultPassword = defaultPassword {",
    "169 |       try Task {",
    "    |           `- error: 'async' property access in a function that does not support concurrency",
    "170 |         if !(await credentialManager.hasCredentials(for: defaultRepository)) {",
    "171 |           try await credentialManager.storeCredentials(",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticCommand.swift:113:13: error: member 'init(rawValue:)' expects argument of type 'String'",
    "111 |           throw ResticError.missingParameter(\"Target path is required for restore\")",
    "112 |         }",
    "113 |       case .init:",
    "    |             `- error: member 'init(rawValue:)' expects argument of type 'String'",
    "114 |         // The repository might not exist yet for init, so no repository validation",
    "115 |         break",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:15:14: error: actor-isolated property 'defaultRepository' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'",
    "  8 | /// This actor-based implementation provides proper isolation for concurrent operations,",
    "  9 | /// ensuring thread safety while maintaining high performance for Restic operations.",
    " 10 | @preconcurrency public actor ResticServiceImpl: ResticServiceProtocol {",
    "    |                                                 `- note: add '@preconcurrency' to the 'ResticServiceProtocol' conformance to defer isolation checking to run time",
    " 11 |   /// The path to the Restic executable",
    " 12 |   public let executablePath: String",
    " 13 | ",
    " 14 |   /// The default repository location, if set",
    " 15 |   public var defaultRepository: String? {",
    "    |              `- error: actor-isolated property 'defaultRepository' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'",
    " 16 |     get { _defaultRepository }",
    " 17 |     set { _defaultRepository = newValue }",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:35:7: note: requirement 'defaultRepository' declared here",
    "33 | ",
    "34 |   /// The default repository location, if set",
    "35 |   var defaultRepository: String? { get set }",
    "   |       `- note: requirement 'defaultRepository' declared here",
    "36 | ",
    "37 |   /// The default repository password, if set",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:22:14: error: actor-isolated property 'defaultPassword' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'",
    " 20 | ",
    " 21 |   /// The default repository password, if set",
    " 22 |   public var defaultPassword: String? {",
    "    |              `- error: actor-isolated property 'defaultPassword' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'",
    " 23 |     get { _defaultPassword }",
    " 24 |     set { _defaultPassword = newValue }",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:38:7: note: requirement 'defaultPassword' declared here",
    "36 | ",
    "37 |   /// The default repository password, if set",
    "38 |   var defaultPassword: String? { get set }",
    "   |       `- note: requirement 'defaultPassword' declared here",
    "39 | ",
    "40 |   /// Progress reporting delegate for receiving operation updates",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:29:14: error: actor-isolated property 'progressDelegate' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'",
    " 27 | ",
    " 28 |   /// Progress reporting delegate for receiving operation updates",
    " 29 |   public var progressDelegate: (any ResticProgressReporting)? {",
    "    |              `- error: actor-isolated property 'progressDelegate' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'",
    " 30 |     get { _progressDelegate }",
    " 31 |     set { _progressDelegate = newValue }",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:41:7: note: requirement 'progressDelegate' declared here",
    "39 | ",
    "40 |   /// Progress reporting delegate for receiving operation updates",
    "41 |   var progressDelegate: ResticProgressReporting? { get set }",
    "   |       `- note: requirement 'progressDelegate' declared here",
    "42 | ",
    "43 |   /// Executes a Restic command and returns its output",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:10:30: error: type 'ResticServiceImpl' does not conform to protocol 'ResticServiceProtocol'",
    "  8 | /// This actor-based implementation provides proper isolation for concurrent operations,",
    "  9 | /// ensuring thread safety while maintaining high performance for Restic operations.",
    " 10 | @preconcurrency public actor ResticServiceImpl: ResticServiceProtocol {",
    "    |                              |- error: type 'ResticServiceImpl' does not conform to protocol 'ResticServiceProtocol'",
    "    |                              `- note: add stubs for conformance",
    " 11 |   /// The path to the Restic executable",
    " 12 |   public let executablePath: String",
    "    :",
    "277 |   /// - Returns: The raw output string from the command",
    "278 |   /// - Throws: ResticError if the command fails",
    "279 |   public func execute(_ command: ResticCommand) async throws -> String {",
    "    |               `- note: candidate has non-matching type '(ResticCommand) async throws -> String'",
    "280 |     try command.validate()",
    "281 | ",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:47:8: note: protocol requires function 'execute' with type '(any ResticCommand) async throws -> String'",
    "45 |   /// - Returns: The command output as a string",
    "46 |   /// - Throws: ResticError if the command fails",
    "47 |   func execute(_ command: ResticCommand) async throws -> String",
    "   |        `- note: protocol requires function 'execute' with type '(any ResticCommand) async throws -> String'",
    "48 | ",
    "49 |   /// Initialises a new repository",
    "   :",
    "53 |   /// - Returns: Result of the initialisation",
    "54 |   /// - Throws: ResticError if initialisation fails",
    "55 |   func initialiseRepository(at location: String, password: String) async throws",
    "   |        `- note: protocol requires function 'initialiseRepository(at:password:)' with type '(String, String) async throws -> ResticCommandResult'",
    "56 |     -> ResticCommandResult",
    "57 | ",
    "   :",
    "77 |   /// - Returns: Result with backup information",
    "78 |   /// - Throws: ResticError if the backup fails",
    "79 |   func backup(paths: [String], tag: String?, excludes: [String]?) async throws",
    "   |        `- note: protocol requires function 'backup(paths:tag:excludes:)' with type '([String], String?, [String]?) async throws -> ResticCommandResult'",
    "80 |     -> ResticCommandResult",
    "81 | ",
    "   :",
    "87 |   /// - Returns: Result with restore information",
    "88 |   /// - Throws: ResticError if the restore fails",
    "89 |   func restore(snapshot: String, to target: String, paths: [String]?) async throws",
    "   |        `- note: protocol requires function 'restore(snapshot:to:paths:)' with type '(String, String, [String]?) async throws -> ResticCommandResult'",
    "90 |     -> ResticCommandResult",
    "91 | ",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:64:35: error: incorrect argument label in call (have 'logger:', expected 'underlyingLogger:')",
    " 62 |     _defaultPassword=nil",
    " 63 |     _progressDelegate=progressDelegate",
    " 64 |     self.resticLogger=ResticLogger(logger: logger)",
    "    |                                   `- error: incorrect argument label in call (have 'logger:', expected 'underlyingLogger:')",
    " 65 |     self.credentialManager=credentialManager",
    " 66 | ",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:85:5: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions",
    " 83 |     }",
    " 84 | ",
    " 85 |     await resticLogger.info(",
    "    |     `- error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions",
    " 86 |       \"Initialised ResticServiceImpl with executable: \\(executablePath)\",",
    " 87 |       metadata: [",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:304:7: error: initializer for conditional binding must have Optional type, not 'String'",
    "302 |       environment[\"RESTIC_PASSWORD\"]=password",
    "303 |     } else if",
    "304 |       let repository=command.repository,",
    "    |       `- error: initializer for conditional binding must have Optional type, not 'String'",
    "305 |       let credentials=try await credentialManager.getCredentials(for: repository)",
    "306 |     {",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:305:7: error: initializer for conditional binding must have Optional type, not 'ResticCredentials'",
    "303 |     } else if",
    "304 |       let repository=command.repository,",
    "305 |       let credentials=try await credentialManager.getCredentials(for: repository)",
    "    |       `- error: initializer for conditional binding must have Optional type, not 'ResticCredentials'",
    "306 |     {",
    "307 |       environment[\"RESTIC_PASSWORD\"]=credentials.password",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:330:24: error: extra argument 'privacyLevel' in call",
    "328 |       await resticLogger.error(",
    "329 |         \"Restic command failed to launch\",",
    "330 |         privacyLevel: .public,",
    "    |                        `- error: extra argument 'privacyLevel' in call",
    "331 |         source: \"ResticService\",",
    "332 |         metadata: PrivacyMetadata([",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:330:24: error: cannot infer contextual base in reference to member 'public'",
    "328 |       await resticLogger.error(",
    "329 |         \"Restic command failed to launch\",",
    "330 |         privacyLevel: .public,",
    "    |                        `- error: cannot infer contextual base in reference to member 'public'",
    "331 |         source: \"ResticService\",",
    "332 |         metadata: PrivacyMetadata([",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:415:16: error: member 'init(rawValue:)' expects argument of type 'String'",
    "413 | ",
    "414 |     let command=ResticCommand(",
    "415 |       action: .init,",
    "    |                `- error: member 'init(rawValue:)' expects argument of type 'String'",
    "416 |       repository: location,",
    "417 |       password: repoPassword",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:425:10: error: cannot find 'await' in scope",
    "423 | ",
    "424 |     // Store the credentials securely for future access",
    "425 |     if ! await credentialManager.hasCredentials(for: location) {",
    "    |          `- error: cannot find 'await' in scope",
    "426 |       try await credentialManager.storeCredentials(",
    "427 |         ResticCredentials(",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:476:34: error: cannot convert value of type 'ResticCheckCommandImpl' to expected argument type 'ResticCommand'",
    "474 |     )",
    "475 | ",
    "476 |     let output=try await execute(command)",
    "    |                                  `- error: cannot convert value of type 'ResticCheckCommandImpl' to expected argument type 'ResticCommand'",
    "477 |     let duration=Date().timeIntervalSince(startTime)",
    "478 | ",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:517:34: error: cannot convert value of type 'ResticSnapshotsCommandImpl' to expected argument type 'ResticCommand'",
    "515 |     )",
    "516 | ",
    "517 |     let output=try await execute(command)",
    "    |                                  `- error: cannot convert value of type 'ResticSnapshotsCommandImpl' to expected argument type 'ResticCommand'",
    "518 |     let duration=Date().timeIntervalSince(startTime)",
    "519 | ",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:565:53: error: value of type 'ResticError' has no member 'logDescription'",
    "563 |           metadata: PrivacyMetadata([",
    "564 |             \"repository\": (value: repoLocation, privacy: .private),",
    "565 |             \"errorDescription\": (value: resticError.logDescription, privacy: .sensitive)",
    "    |                                                     `- error: value of type 'ResticError' has no member 'logDescription'",
    "566 |           ]),",
    "567 |           source: \"ResticService.Backup\"",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:603:17: error: extra argument 'metadata' in call",
    "601 |     await resticLogger.info(",
    "602 |       \"Starting backup operation\",",
    "603 |       metadata: [",
    "    |                 `- error: extra argument 'metadata' in call",
    "604 |         \"repository\": .string(repoLocation),",
    "605 |         \"paths\": .array(paths.map { .string($0) }),",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:604:24: error: type 'Any' has no member 'string'",
    "602 |       \"Starting backup operation\",",
    "603 |       metadata: [",
    "604 |         \"repository\": .string(repoLocation),",
    "    |                        `- error: type 'Any' has no member 'string'",
    "605 |         \"paths\": .array(paths.map { .string($0) }),",
    "606 |         \"excludes\": .array(excludes.map { .string($0) })",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:605:19: error: type 'Any' has no member 'array'",
    "603 |       metadata: [",
    "604 |         \"repository\": .string(repoLocation),",
    "605 |         \"paths\": .array(paths.map { .string($0) }),",
    "    |                   `- error: type 'Any' has no member 'array'",
    "606 |         \"excludes\": .array(excludes.map { .string($0) })",
    "607 |       ],",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:605:38: error: cannot infer contextual base in reference to member 'string'",
    "603 |       metadata: [",
    "604 |         \"repository\": .string(repoLocation),",
    "605 |         \"paths\": .array(paths.map { .string($0) }),",
    "    |                                      `- error: cannot infer contextual base in reference to member 'string'",
    "606 |         \"excludes\": .array(excludes.map { .string($0) })",
    "607 |       ],",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:606:22: error: type 'Any' has no member 'array'",
    "604 |         \"repository\": .string(repoLocation),",
    "605 |         \"paths\": .array(paths.map { .string($0) }),",
    "606 |         \"excludes\": .array(excludes.map { .string($0) })",
    "    |                      `- error: type 'Any' has no member 'array'",
    "607 |       ],",
    "608 |       context: logContext",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:606:44: error: cannot infer contextual base in reference to member 'string'",
    "604 |         \"repository\": .string(repoLocation),",
    "605 |         \"paths\": .array(paths.map { .string($0) }),",
    "606 |         \"excludes\": .array(excludes.map { .string($0) })",
    "    |                                            `- error: cannot infer contextual base in reference to member 'string'",
    "607 |       ],",
    "608 |       context: logContext",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:618:9: error: cannot find 'await' in scope",
    "616 |     if",
    "617 |       let repoPassword,",
    "618 |       ! await credentialManager.hasCredentials(for: repoLocation)",
    "    |         `- error: cannot find 'await' in scope",
    "619 |     {",
    "620 |       try? await credentialManager.storeCredentials(",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:687:53: error: value of type 'ResticError' has no member 'logDescription'",
    "685 |           metadata: PrivacyMetadata([",
    "686 |             \"repository\": (value: repoLocation, privacy: .private),",
    "687 |             \"errorDescription\": (value: resticError.logDescription, privacy: .sensitive)",
    "    |                                                     `- error: value of type 'ResticError' has no member 'logDescription'",
    "688 |           ]),",
    "689 |           source: \"ResticService.Restore\"",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:720:31: error: cannot use optional chaining on non-optional value of type '[String]'",
    "718 |         \"snapshot\": (value: snapshot, privacy: .public),",
    "719 |         \"target\": (value: target, privacy: .public),",
    "720 |         \"paths\": (value: paths?.joined(separator: \", \") ?? \"all\", privacy: .public)",
    "    |                               `- error: cannot use optional chaining on non-optional value of type '[String]'",
    "721 |       ]),",
    "722 |       source: \"ResticService.Restore\"",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:743:31: error: cannot use optional chaining on non-optional value of type '[String]'",
    "741 |         \"snapshot\": (value: snapshot, privacy: .public),",
    "742 |         \"target\": (value: target, privacy: .public),",
    "743 |         \"paths\": (value: paths?.joined(separator: \", \") ?? \"all\", privacy: .public),",
    "    |                               `- error: cannot use optional chaining on non-optional value of type '[String]'",
    "744 |         \"duration\": (value: duration, privacy: .public)",
    "745 |       ]),",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:785:34: error: cannot convert value of type 'ResticMaintenanceCommandImpl' to expected argument type 'ResticCommand'",
    "783 |     )",
    "784 | ",
    "785 |     let output=try await execute(command)",
    "    |                                  `- error: cannot convert value of type 'ResticMaintenanceCommandImpl' to expected argument type 'ResticCommand'",
    "786 |     let duration=Date().timeIntervalSince(startTime)",
    "787 | ",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:816:34: error: for-in loop requires '() -> Dictionary<String, PrivacyMetadataValue>.Keys' to conform to 'Sequence'",
    "814 |     var result: [String: ResticDataValue] = [:]",
    "815 |     ",
    "816 |     for (key, entry) in metadata.entries {",
    "    |                                  `- error: for-in loop requires '() -> Dictionary<String, PrivacyMetadataValue>.Keys' to conform to 'Sequence'",
    "817 |       // Extract the value and convert it to ResticDataValue",
    "818 |       switch entry.value {",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Logging/ResticLogger.swift:12:15: error: type 'ResticLogger' does not conform to protocol 'DomainLogger'",
    " 10 | /// with enhanced privacy controls and contextual information following the",
    " 11 | /// Alpha Dot Five architecture.",
    " 12 | public struct ResticLogger: LoggingInterfaces.DomainLogger, CoreLoggingProtocol, PrivacyAwareLoggingProtocol {",
    "    |               `- error: type 'ResticLogger' does not conform to protocol 'DomainLogger'",
    " 13 |   /// The domain name for this logger",
    " 14 |   public let domainName: String = \"ResticService\"",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Logging/ResticLogger.swift:12:15: error: type 'ResticLogger' does not conform to protocol 'PrivacyAwareLoggingProtocol'",
    " 10 | /// with enhanced privacy controls and contextual information following the",
    " 11 | /// Alpha Dot Five architecture.",
    " 12 | public struct ResticLogger: LoggingInterfaces.DomainLogger, CoreLoggingProtocol, PrivacyAwareLoggingProtocol {",
    "    |               |- error: type 'ResticLogger' does not conform to protocol 'PrivacyAwareLoggingProtocol'",
    "    |               `- note: add stubs for conformance",
    " 13 |   /// The domain name for this logger",
    " 14 |   public let domainName: String = \"ResticService\"",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/DomainLogger.swift:42:8: note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'",
    "40 |   ///   - context: Domain-specific context for the log",
    "41 |   ///   - privacyLevel: The privacy level to apply to the error details",
    "42 |   func logError(",
    "   |        `- note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'",
    "43 |     _ error: Error,",
    "44 |     context: LogContextDTO,",
    "",
    "/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/PrivacyAwareLoggingProtocol.swift:36:8: note: protocol requires function 'logSensitive(_:_:sensitiveValues:source:)' with type '(LogLevel, String, LogMetadata, String) async -> ()'",
    "34 |   ///   - sensitiveValues: Sensitive values that should be handled with privacy controls",
    "35 |   ///   - source: The component that generated the log",
    "36 |   func logSensitive(",
    "   |        `- note: protocol requires function 'logSensitive(_:_:sensitiveValues:source:)' with type '(LogLevel, String, LogMetadata, String) async -> ()'",
    "37 |     _ level: LogLevel,",
    "38 |     _ message: String,",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Logging/ResticLogger.swift:46:35: warning: left side of nil coalescing operator '??' has non-optional type 'String', so the right side is never used",
    " 44 |       message,",
    " 45 |       metadata: context.toPrivacyMetadata(),",
    " 46 |       source: context.getSource() ?? domainName",
    "    |                                   `- warning: left side of nil coalescing operator '??' has non-optional type 'String', so the right side is never used",
    " 47 |     )",
    " 48 |   }",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Logging/ResticLogger.swift:63:7: error: cannot convert value of type 'PrivacyAnnotatedString' to expected argument type 'String'",
    " 61 |     await underlyingLogger.log(",
    " 62 |       level,",
    " 63 |       message,",
    "    |       `- error: cannot convert value of type 'PrivacyAnnotatedString' to expected argument type 'String'",
    " 64 |       metadata: context.toPrivacyMetadata(),",
    " 65 |       source: context.getSource() ?? domainName",
    "",
    "packages/UmbraImplementations/Sources/ResticServices/Logging/ResticLogger.swift:130:7: error: cannot convert value of type 'PrivacyString' to expected argument type 'String'",
    "128 |     await underlyingLogger.log(",
    "129 |       level,",
    "130 |       message,",
    "    |       `- error: cannot convert value of type 'PrivacyString' to expected argument type 'String'",
    "131 |       metadata: metadata,",
    "132 |       source: source",
    "INFO: Build succeeded for only 72 of 92 top-level targets",
    "INFO: Found 92 targets...",
    "INFO: Elapsed time: 9.541s, Critical Path: 9.27s",
    "INFO: 10 processes: 10 internal.",
    "ERROR: Build did NOT complete successfully"
  ],
  "raw_output": "INFO: Invocation ID: 2a5b9f59-0975-4fd9-b911-cce9936600bf\nComputing main repo mapping: \nLoading: \nLoading: 0 packages loaded\nAnalyzing: 92 targets (0 packages loaded, 0 targets configured)\nAnalyzing: 92 targets (0 packages loaded, 0 targets configured)\n\nINFO: Analyzed 92 targets (0 packages loaded, 0 targets configured).\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols:SecurityInterfacesProtocols) \n  (cd /Users/mpy/.bazel/execroot/_main && \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityInterfacesProtocols.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/RandomDataServiceProtocol.swift:11:34: error: cannot find type 'RandomizationOptionsDTO' in scope\n 9 |   /// - Parameter configuration: Configuration options for random data generation\n10 |   /// - Throws: SecurityError if initialisation fails\n11 |   func initialise(configuration: RandomizationOptionsDTO) async throws\n   |                                  `- error: cannot find type 'RandomizationOptionsDTO' in scope\n12 | \n13 |   /// Generates a random double value between 0.0 and 1.0\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:32:46: error: no type named 'Security' in module 'UmbraErrors'\n 30 |     for url: URL,\n 31 |     readOnly: Bool\n 32 |   ) async -> Result<SecureBytes, UmbraErrors.Security.Bookmark>\n    |                                              `- error: no type named 'Security' in module 'UmbraErrors'\n 33 | \n 34 |   /**\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:43:46: error: no type named 'Security' in module 'UmbraErrors'\n 41 |   func resolveBookmark(\n 42 |     _ bookmarkData: SecureBytes\n 43 |   ) async -> Result<(URL, Bool), UmbraErrors.Security.Bookmark>\n    |                                              `- error: no type named 'Security' in module 'UmbraErrors'\n 44 | \n 45 |   /**\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:42:21: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n 40 |    */\n 41 |   func resolveBookmark(\n 42 |     _ bookmarkData: SecureBytes\n    |                     `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n 43 |   ) async -> Result<(URL, Bool), UmbraErrors.Security.Bookmark>\n 44 | \n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:54:39: error: no type named 'Security' in module 'UmbraErrors'\n 52 |   func startAccessing(\n 53 |     _ url: URL\n 54 |   ) async -> Result<Bool, UmbraErrors.Security.Bookmark>\n    |                                       `- error: no type named 'Security' in module 'UmbraErrors'\n 55 | \n 56 |   /**\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:65:38: error: no type named 'Security' in module 'UmbraErrors'\n 63 |   func stopAccessing(\n 64 |     _ url: URL\n 65 |   ) async -> Result<Int, UmbraErrors.Security.Bookmark>\n    |                                      `- error: no type named 'Security' in module 'UmbraErrors'\n 66 | \n 67 |   /**\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:82:21: error: cannot find type 'BookmarkValidationResultDTO' in scope\n 80 |     _ bookmarkData: SecureBytes,\n 81 |     recreateIfStale: Bool\n 82 |   ) async -> Result<BookmarkValidationResultDTO, UmbraErrors.Security.Bookmark>\n    |                     `- error: cannot find type 'BookmarkValidationResultDTO' in scope\n 83 | \n 84 |   /**\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:80:21: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n 78 |    */\n 79 |   func validateBookmark(\n 80 |     _ bookmarkData: SecureBytes,\n    |                     `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n 81 |     recreateIfStale: Bool\n 82 |   ) async -> Result<BookmarkValidationResultDTO, UmbraErrors.Security.Bookmark>\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:15:44: error: cannot find type 'SecurityErrorDTO' in scope\n13 |   /// - Returns: True if the provider is available, false otherwise\n14 |   /// - Throws: SecurityError if the check fails\n15 |   func isAvailable() async -> Result<Bool, SecurityErrorDTO>\n   |                                            `- error: cannot find type 'SecurityErrorDTO' in scope\n16 | \n17 |   /// Get the provider's version information\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:30:51: error: cannot find type 'SecurityErrorDTO' in scope\n28 | \n29 |   /// Default implementation that assumes the provider is available\n30 |   public func isAvailable() async -> Result<Bool, SecurityErrorDTO> {\n   |                                                   `- error: cannot find type 'SecurityErrorDTO' in scope\n31 |     .success(true)\n32 |   }\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:42:29: error: cannot find type 'SecurityProviderProtocol' in scope\n40 | /// Adapter class to convert between SecurityProviderProtocol and SecurityProviderBase\n41 | public final class SecurityProviderBaseAdapter: SecurityProviderBase {\n42 |   private let provider: any SecurityProviderProtocol\n   |                             `- error: cannot find type 'SecurityProviderProtocol' in scope\n43 | \n44 |   /// Initialise with a security provider\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:46:29: error: cannot find type 'SecurityProviderProtocol' in scope\n44 |   /// Initialise with a security provider\n45 |   /// - Parameter provider: The provider to adapt\n46 |   public init(provider: any SecurityProviderProtocol) {\n   |                             `- error: cannot find type 'SecurityProviderProtocol' in scope\n47 |     self.provider=provider\n48 |   }\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:54:51: error: cannot find type 'SecurityErrorDTO' in scope\n52 |   }\n53 | \n54 |   public func isAvailable() async -> Result<Bool, SecurityErrorDTO> {\n   |                                                   `- error: cannot find type 'SecurityErrorDTO' in scope\n55 |     // Simply return success as the underlying provider is assumed to be available\n56 |     .success(true)\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:13:34: error: cannot find type 'SecurityConfigurationDTO' in scope\n11 |   /// - Parameter configuration: Configuration options for the security service\n12 |   /// - Throws: SecurityError if initialisation fails\n13 |   func initialise(configuration: SecurityConfigurationDTO) async throws\n   |                                  `- error: cannot find type 'SecurityConfigurationDTO' in scope\n14 | \n15 |   /// Secures data according to the security policy defined in the security context\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:21:53: error: cannot find type 'SecurityContextDTO' in scope\n19 |   /// - Returns: The secured data\n20 |   /// - Throws: SecurityError if the operation fails\n21 |   func secureData(_ data: [UInt8], securityContext: SecurityContextDTO) async throws -> [UInt8]\n   |                                                     `- error: cannot find type 'SecurityContextDTO' in scope\n22 | \n23 |   /// Retrieves secured data according to the security policy defined in the security context\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:31:22: error: cannot find type 'SecurityContextDTO' in scope\n29 |   func retrieveSecuredData(\n30 |     _ securedData: [UInt8],\n31 |     securityContext: SecurityContextDTO\n   |                      `- error: cannot find type 'SecurityContextDTO' in scope\n32 |   ) async throws -> [UInt8]\n33 | \n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:57:14: error: cannot find type 'SecurityContextDTO' in scope\n55 |     _ data: [UInt8],\n56 |     verification: [UInt8],\n57 |     context: SecurityContextDTO\n   |              `- error: cannot find type 'SecurityContextDTO' in scope\n58 |   ) async throws -> Bool\n59 | \n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:62:30: error: cannot find type 'SecurityVersionDTO' in scope\n60 |   /// Returns version information about the security service\n61 |   /// - Returns: Version information as a DTO\n62 |   func getVersion() async -> SecurityVersionDTO\n   |                              `- error: cannot find type 'SecurityVersionDTO' in scope\n63 | \n64 |   /// Subscribes to security events matching the given filter\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:67:73: error: cannot find type 'SecurityEventDTO' in scope\n65 |   /// - Parameter filter: Filter criteria for events\n66 |   /// - Returns: An async stream of security events\n67 |   func subscribeToEvents(filter: SecurityEventFilterDTO) -> AsyncStream<SecurityEventDTO>\n   |                                                                         `- error: cannot find type 'SecurityEventDTO' in scope\n68 | }\n69 | \n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:67:34: error: cannot find type 'SecurityEventFilterDTO' in scope\n65 |   /// - Parameter filter: Filter criteria for events\n66 |   /// - Returns: An async stream of security events\n67 |   func subscribeToEvents(filter: SecurityEventFilterDTO) -> AsyncStream<SecurityEventDTO>\n   |                                  `- error: cannot find type 'SecurityEventFilterDTO' in scope\n68 | }\n69 | \npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/RandomDataServiceProtocol.swift:11:34: error: cannot find type 'RandomizationOptionsDTO' in scope\n 9 |   /// - Parameter configuration: Configuration options for random data generation\n10 |   /// - Throws: SecurityError if initialisation fails\n11 |   func initialise(configuration: RandomizationOptionsDTO) async throws\n   |                                  `- error: cannot find type 'RandomizationOptionsDTO' in scope\n12 | \n13 |   /// Generates a random double value between 0.0 and 1.0\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:32:46: error: no type named 'Security' in module 'UmbraErrors'\n 30 |     for url: URL,\n 31 |     readOnly: Bool\n 32 |   ) async -> Result<SecureBytes, UmbraErrors.Security.Bookmark>\n    |                                              `- error: no type named 'Security' in module 'UmbraErrors'\n 33 | \n 34 |   /**\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:43:46: error: no type named 'Security' in module 'UmbraErrors'\n 41 |   func resolveBookmark(\n 42 |     _ bookmarkData: SecureBytes\n 43 |   ) async -> Result<(URL, Bool), UmbraErrors.Security.Bookmark>\n    |                                              `- error: no type named 'Security' in module 'UmbraErrors'\n 44 | \n 45 |   /**\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:42:21: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n 40 |    */\n 41 |   func resolveBookmark(\n 42 |     _ bookmarkData: SecureBytes\n    |                     `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n 43 |   ) async -> Result<(URL, Bool), UmbraErrors.Security.Bookmark>\n 44 | \n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:54:39: error: no type named 'Security' in module 'UmbraErrors'\n 52 |   func startAccessing(\n 53 |     _ url: URL\n 54 |   ) async -> Result<Bool, UmbraErrors.Security.Bookmark>\n    |                                       `- error: no type named 'Security' in module 'UmbraErrors'\n 55 | \n 56 |   /**\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:65:38: error: no type named 'Security' in module 'UmbraErrors'\n 63 |   func stopAccessing(\n 64 |     _ url: URL\n 65 |   ) async -> Result<Int, UmbraErrors.Security.Bookmark>\n    |                                      `- error: no type named 'Security' in module 'UmbraErrors'\n 66 | \n 67 |   /**\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:82:21: error: cannot find type 'BookmarkValidationResultDTO' in scope\n 80 |     _ bookmarkData: SecureBytes,\n 81 |     recreateIfStale: Bool\n 82 |   ) async -> Result<BookmarkValidationResultDTO, UmbraErrors.Security.Bookmark>\n    |                     `- error: cannot find type 'BookmarkValidationResultDTO' in scope\n 83 | \n 84 |   /**\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityBookmarkProtocol.swift:80:21: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n 78 |    */\n 79 |   func validateBookmark(\n 80 |     _ bookmarkData: SecureBytes,\n    |                     `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n 81 |     recreateIfStale: Bool\n 82 |   ) async -> Result<BookmarkValidationResultDTO, UmbraErrors.Security.Bookmark>\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:15:44: error: cannot find type 'SecurityErrorDTO' in scope\n13 |   /// - Returns: True if the provider is available, false otherwise\n14 |   /// - Throws: SecurityError if the check fails\n15 |   func isAvailable() async -> Result<Bool, SecurityErrorDTO>\n   |                                            `- error: cannot find type 'SecurityErrorDTO' in scope\n16 | \n17 |   /// Get the provider's version information\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:30:51: error: cannot find type 'SecurityErrorDTO' in scope\n28 | \n29 |   /// Default implementation that assumes the provider is available\n30 |   public func isAvailable() async -> Result<Bool, SecurityErrorDTO> {\n   |                                                   `- error: cannot find type 'SecurityErrorDTO' in scope\n31 |     .success(true)\n32 |   }\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:42:29: error: cannot find type 'SecurityProviderProtocol' in scope\n40 | /// Adapter class to convert between SecurityProviderProtocol and SecurityProviderBase\n41 | public final class SecurityProviderBaseAdapter: SecurityProviderBase {\n42 |   private let provider: any SecurityProviderProtocol\n   |                             `- error: cannot find type 'SecurityProviderProtocol' in scope\n43 | \n44 |   /// Initialise with a security provider\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:46:29: error: cannot find type 'SecurityProviderProtocol' in scope\n44 |   /// Initialise with a security provider\n45 |   /// - Parameter provider: The provider to adapt\n46 |   public init(provider: any SecurityProviderProtocol) {\n   |                             `- error: cannot find type 'SecurityProviderProtocol' in scope\n47 |     self.provider=provider\n48 |   }\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityProviderBase.swift:54:51: error: cannot find type 'SecurityErrorDTO' in scope\n52 |   }\n53 | \n54 |   public func isAvailable() async -> Result<Bool, SecurityErrorDTO> {\n   |                                                   `- error: cannot find type 'SecurityErrorDTO' in scope\n55 |     // Simply return success as the underlying provider is assumed to be available\n56 |     .success(true)\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:13:34: error: cannot find type 'SecurityConfigurationDTO' in scope\n11 |   /// - Parameter configuration: Configuration options for the security service\n12 |   /// - Throws: SecurityError if initialisation fails\n13 |   func initialise(configuration: SecurityConfigurationDTO) async throws\n   |                                  `- error: cannot find type 'SecurityConfigurationDTO' in scope\n14 | \n15 |   /// Secures data according to the security policy defined in the security context\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:21:53: error: cannot find type 'SecurityContextDTO' in scope\n19 |   /// - Returns: The secured data\n20 |   /// - Throws: SecurityError if the operation fails\n21 |   func secureData(_ data: [UInt8], securityContext: SecurityContextDTO) async throws -> [UInt8]\n   |                                                     `- error: cannot find type 'SecurityContextDTO' in scope\n22 | \n23 |   /// Retrieves secured data according to the security policy defined in the security context\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:31:22: error: cannot find type 'SecurityContextDTO' in scope\n29 |   func retrieveSecuredData(\n30 |     _ securedData: [UInt8],\n31 |     securityContext: SecurityContextDTO\n   |                      `- error: cannot find type 'SecurityContextDTO' in scope\n32 |   ) async throws -> [UInt8]\n33 | \n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:57:14: error: cannot find type 'SecurityContextDTO' in scope\n55 |     _ data: [UInt8],\n56 |     verification: [UInt8],\n57 |     context: SecurityContextDTO\n   |              `- error: cannot find type 'SecurityContextDTO' in scope\n58 |   ) async throws -> Bool\n59 | \n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:62:30: error: cannot find type 'SecurityVersionDTO' in scope\n60 |   /// Returns version information about the security service\n61 |   /// - Returns: Version information as a DTO\n62 |   func getVersion() async -> SecurityVersionDTO\n   |                              `- error: cannot find type 'SecurityVersionDTO' in scope\n63 | \n64 |   /// Subscribes to security events matching the given filter\n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:67:73: error: cannot find type 'SecurityEventDTO' in scope\n65 |   /// - Parameter filter: Filter criteria for events\n66 |   /// - Returns: An async stream of security events\n67 |   func subscribeToEvents(filter: SecurityEventFilterDTO) -> AsyncStream<SecurityEventDTO>\n   |                                                                         `- error: cannot find type 'SecurityEventDTO' in scope\n68 | }\n69 | \n\npackages/UmbraCoreTypes/Sources/SecurityInterfaces/Protocols/SecurityServiceProtocol.swift:67:34: error: cannot find type 'SecurityEventFilterDTO' in scope\n65 |   /// - Parameter filter: Filter criteria for events\n66 |   /// - Returns: An async stream of security events\n67 |   func subscribeToEvents(filter: SecurityEventFilterDTO) -> AsyncStream<SecurityEventDTO>\n   |                                  `- error: cannot find type 'SecurityEventFilterDTO' in scope\n68 | }\n69 | \nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/LoggingAdapters/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/LoggingAdapters:LoggingAdapters) \n  (cd /Users/mpy/.bazel/execroot/_main && \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/LoggingAdapters/LoggingAdapters.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:44:14: error: type 'SecurityLogger' does not conform to protocol 'DomainLoggerProtocol'\n 42 |  ```\n 43 |  */\n 44 | public actor SecurityLogger: DomainLoggerProtocol {\n    |              |- error: type 'SecurityLogger' does not conform to protocol 'DomainLoggerProtocol'\n    |              `- note: add stubs for conformance\n 45 |   /// The domain name for this logger\n 46 |   public let domainName: String=\"Security\"\n\npackages/UmbraImplementations/Sources/LoggingAdapters/BaseDomainLogger.swift:32:8: note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'\n 30 | \n 31 |   /// Log an error with context\n 32 |   func logError(_ error: Error, context: LogContextDTO, privacyLevel: PrivacyClassification) async\n    |        `- note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'\n 33 | \n 34 |   /// Log a message with the specified context\npackages/UmbraImplementations/Sources/LoggingAdapters/CryptoLogger.swift:112:9: warning: variable 'context' was never mutated; consider changing to 'let' constant\n110 |     level: LogLevel = .info\n111 |   ) async {\n112 |     var context=CryptoLogContext(\n    |         `- warning: variable 'context' was never mutated; consider changing to 'let' constant\n113 |       operation: operation,\n114 |       algorithm: algorithm\n\npackages/UmbraImplementations/Sources/LoggingAdapters/LoggingServiceAdapter.swift:172:31: warning: left side of nil coalescing operator '??' has non-optional type 'String', so the right side is never used\n170 |   public func logMessage(_ level: LogLevel, _ message: String, context: LogContext) async {\n171 |     let privacyMetadata=context.metadata\n172 |     let source=context.source ?? defaultSource\n    |                               `- warning: left side of nil coalescing operator '??' has non-optional type 'String', so the right side is never used\n173 | \n174 |     // Use the appropriate level-specific method\n\npackages/UmbraImplementations/Sources/LoggingAdapters/LoggingServiceAdapter.swift:195:31: warning: left side of nil coalescing operator '??' has non-optional type 'String', so the right side is never used\n193 |     // Convert PrivacyString to a plain String\n194 |     let stringMessage=message.processForLogging()\n195 |     let source=context.source ?? defaultSource\n    |                               `- warning: left side of nil coalescing operator '??' has non-optional type 'String', so the right side is never used\n196 | \n197 |     // If the underlying logger supports privacy-aware logging, use it\n\npackages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:44:14: error: type 'SecurityLogger' does not conform to protocol 'DomainLoggerProtocol'\n 42 |  ```\n 43 |  */\n 44 | public actor SecurityLogger: DomainLoggerProtocol {\n    |              |- error: type 'SecurityLogger' does not conform to protocol 'DomainLoggerProtocol'\n    |              `- note: add stubs for conformance\n 45 |   /// The domain name for this logger\n 46 |   public let domainName: String=\"Security\"\n\npackages/UmbraImplementations/Sources/LoggingAdapters/BaseDomainLogger.swift:32:8: note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'\n 30 | \n 31 |   /// Log an error with context\n 32 |   func logError(_ error: Error, context: LogContextDTO, privacyLevel: PrivacyClassification) async\n    |        `- note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'\n 33 | \n 34 |   /// Log a message with the specified context\n\npackages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:177:33: error: value of type 'any LogContextDTO' has no member 'parameters'\n175 |     // Convert to privacy-tagged metadata\n176 |     var privacyMetadata: [String: PrivacyTaggedValue]=[:]\n177 |     for (key, value) in context.parameters {\n    |                                 `- error: value of type 'any LogContextDTO' has no member 'parameters'\n178 |       // Apply privacy tag based on key naming conventions\n179 |       let privacyLevel: LogPrivacyLevel=if\n\npackages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:209:17: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n207 |     details: String?=nil\n208 |   ) async {\n209 |     var context=LogContextDTO()\n    |                 `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n210 |     context.parameters[\"keyId\"]=keyIdentifier\n211 |     context.parameters[\"operation\"]=operation\n\npackages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:227:44: error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'\n225 |       resource: keyIdentifier,\n226 |       additionalMetadata: [\n227 |         \"phase\": PrivacyTaggedValue(value: \"start\", privacyLevel: .public),\n    |                                            `- error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'\n228 |         \"details\": PrivacyTaggedValue(value: details ?? \"N/A\", privacyLevel: .public)\n229 |       ]\n\npackages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:228:54: error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'\n226 |       additionalMetadata: [\n227 |         \"phase\": PrivacyTaggedValue(value: \"start\", privacyLevel: .public),\n228 |         \"details\": PrivacyTaggedValue(value: details ?? \"N/A\", privacyLevel: .public)\n    |                                                      `- error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'\n229 |       ]\n230 |     )\n\npackages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:246:17: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n244 |     details: String?=nil\n245 |   ) async {\n246 |     var context=LogContextDTO()\n    |                 `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n247 |     context.parameters[\"keyId\"]=keyIdentifier\n248 |     context.parameters[\"operation\"]=operation\n\npackages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:265:44: error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'\n263 |       resource: keyIdentifier,\n264 |       additionalMetadata: [\n265 |         \"phase\": PrivacyTaggedValue(value: \"complete\", privacyLevel: .public),\n    |                                            `- error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'\n266 |         \"details\": PrivacyTaggedValue(value: details ?? \"N/A\", privacyLevel: .public)\n267 |       ]\n\npackages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:266:54: error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'\n264 |       additionalMetadata: [\n265 |         \"phase\": PrivacyTaggedValue(value: \"complete\", privacyLevel: .public),\n266 |         \"details\": PrivacyTaggedValue(value: details ?? \"N/A\", privacyLevel: .public)\n    |                                                      `- error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'\n267 |       ]\n268 |     )\n\npackages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:286:17: error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n284 |     details: String?=nil\n285 |   ) async {\n286 |     var context=LogContextDTO()\n    |                 `- error: 'any LogContextDTO' cannot be constructed because it has no accessible initializers\n287 |     context.parameters[\"keyId\"]=keyIdentifier\n288 |     context.parameters[\"operation\"]=operation\n\npackages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:310:61: error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'\n308 |       resource: keyIdentifier,\n309 |       additionalMetadata: [\n310 |         \"errorDescription\": PrivacyTaggedValue(value: error.localizedDescription,\n    |                                                             `- error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'\n311 |                                                privacyLevel: .public),\n312 |         \"details\": PrivacyTaggedValue(value: details ?? \"N/A\", privacyLevel: .public)\n\npackages/UmbraImplementations/Sources/LoggingAdapters/SecurityLogger.swift:312:54: error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'\n310 |         \"errorDescription\": PrivacyTaggedValue(value: error.localizedDescription,\n311 |                                                privacyLevel: .public),\n312 |         \"details\": PrivacyTaggedValue(value: details ?? \"N/A\", privacyLevel: .public)\n    |                                                      `- error: cannot convert value of type 'String' to expected argument type 'PrivacyMetadataValue'\n313 |       ]\n314 |     )\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CoreServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/CoreServices:CoreServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CoreServices:CoreServices) \n  (cd /Users/mpy/.bazel/execroot/_main && \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CoreServices/CoreServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CoreServices/Factory/CoreServiceFactory.swift:4:8: error: no such module 'LoggingServices'\n 2 | import Foundation\n 3 | import LoggingInterfaces\n 4 | import LoggingServices\n   |        `- error: no such module 'LoggingServices'\n 5 | import SecurityCoreInterfaces\n 6 | \npackages/UmbraImplementations/Sources/CoreServices/Factory/CoreServiceFactory.swift:4:8: error: no such module 'LoggingServices'\n 2 | import Foundation\n 3 | import LoggingInterfaces\n 4 | import LoggingServices\n   |        `- error: no such module 'LoggingServices'\n 5 | import SecurityCoreInterfaces\n 6 | \nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/SecurityCryptoServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/SecurityCryptoServices:SecurityCryptoServices) \n  (cd /Users/mpy/.bazel/execroot/_main && \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/SecurityCryptoServices/SecurityCryptoServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/SecurityCryptoServices/CryptoActorIntegration.swift:12:66: error: no type named 'CryptoServiceActor' in module 'SecurityCryptoServices'\n10 | public enum CryptoActorImplementations {\n11 |     // Re-export the actor types from the implementation files\n12 |     public typealias CryptoServiceActor = SecurityCryptoServices.CryptoServiceActor\n   |                                                                  `- error: no type named 'CryptoServiceActor' in module 'SecurityCryptoServices'\n13 |     public typealias ProviderRegistryActor = SecurityCryptoServices.ProviderRegistryActor\n14 |     public typealias SecureStorageActor = SecurityCryptoServices.SecureStorageActor\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/CryptoActorIntegration.swift:13:69: error: no type named 'ProviderRegistryActor' in module 'SecurityCryptoServices'\n11 |     // Re-export the actor types from the implementation files\n12 |     public typealias CryptoServiceActor = SecurityCryptoServices.CryptoServiceActor\n13 |     public typealias ProviderRegistryActor = SecurityCryptoServices.ProviderRegistryActor\n   |                                                                     `- error: no type named 'ProviderRegistryActor' in module 'SecurityCryptoServices'\n14 |     public typealias SecureStorageActor = SecurityCryptoServices.SecureStorageActor\n15 | }\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/CryptoActorIntegration.swift:14:66: error: no type named 'SecureStorageActor' in module 'SecurityCryptoServices'\n12 |     public typealias CryptoServiceActor = SecurityCryptoServices.CryptoServiceActor\n13 |     public typealias ProviderRegistryActor = SecurityCryptoServices.ProviderRegistryActor\n14 |     public typealias SecureStorageActor = SecurityCryptoServices.SecureStorageActor\n   |                                                                  `- error: no type named 'SecureStorageActor' in module 'SecurityCryptoServices'\n15 | }\n16 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:34:16: error: type 'AppleSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'\n 32 |    - watchOS 6.0+\n 33 |    */\n 34 |   public actor AppleSecurityProvider: CryptoServiceProtocol, AsyncServiceInitializable {\n    |                |- error: type 'AppleSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'\n    |                `- note: add stubs for conformance\n 35 |     /// The type of provider implementation (accessible from any actor context)\n 36 |     public nonisolated let providerType: SecurityProviderType = .cryptoKit\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -> Result<String, SecurityStorageError>'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -> Result<String, SecurityStorageError>'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -> Result<String, SecurityStorageError>'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -> Result<Bool, SecurityStorageError>'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -> Result<String, SecurityStorageError>'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -> Result<String, SecurityStorageError>'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -> Result<[UInt8], SecurityStorageError>'\n 82 |     identifier: String\n 83 |   ) async -> Result<[UInt8], SecurityStorageError>\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/RingSecurityProvider.swift:298:16: error: type 'RingSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'\n296 | #else\n297 |   // Empty placeholder when Ring is not available\n298 |   public actor RingSecurityProvider: CryptoServiceProtocol, AsyncServiceInitializable {\n    |                |- error: type 'RingSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'\n    |                `- note: add stubs for conformance\n299 |     public nonisolated let providerType: SecurityProviderType = .ring\n300 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -> Result<String, SecurityStorageError>'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -> Result<String, SecurityStorageError>'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -> Result<String, SecurityStorageError>'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -> Result<Bool, SecurityStorageError>'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -> Result<String, SecurityStorageError>'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -> Result<String, SecurityStorageError>'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -> Result<[UInt8], SecurityStorageError>'\n 82 |     identifier: String\n 83 |   ) async -> Result<[UInt8], SecurityStorageError>\npackages/UmbraImplementations/Sources/SecurityCryptoServices/CryptoActorIntegration.swift:12:66: error: no type named 'CryptoServiceActor' in module 'SecurityCryptoServices'\n10 | public enum CryptoActorImplementations {\n11 |     // Re-export the actor types from the implementation files\n12 |     public typealias CryptoServiceActor = SecurityCryptoServices.CryptoServiceActor\n   |                                                                  `- error: no type named 'CryptoServiceActor' in module 'SecurityCryptoServices'\n13 |     public typealias ProviderRegistryActor = SecurityCryptoServices.ProviderRegistryActor\n14 |     public typealias SecureStorageActor = SecurityCryptoServices.SecureStorageActor\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/CryptoActorIntegration.swift:13:69: error: no type named 'ProviderRegistryActor' in module 'SecurityCryptoServices'\n11 |     // Re-export the actor types from the implementation files\n12 |     public typealias CryptoServiceActor = SecurityCryptoServices.CryptoServiceActor\n13 |     public typealias ProviderRegistryActor = SecurityCryptoServices.ProviderRegistryActor\n   |                                                                     `- error: no type named 'ProviderRegistryActor' in module 'SecurityCryptoServices'\n14 |     public typealias SecureStorageActor = SecurityCryptoServices.SecureStorageActor\n15 | }\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/CryptoActorIntegration.swift:14:66: error: no type named 'SecureStorageActor' in module 'SecurityCryptoServices'\n12 |     public typealias CryptoServiceActor = SecurityCryptoServices.CryptoServiceActor\n13 |     public typealias ProviderRegistryActor = SecurityCryptoServices.ProviderRegistryActor\n14 |     public typealias SecureStorageActor = SecurityCryptoServices.SecureStorageActor\n   |                                                                  `- error: no type named 'SecureStorageActor' in module 'SecurityCryptoServices'\n15 | }\n16 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:34:16: error: type 'AppleSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'\n 32 |    - watchOS 6.0+\n 33 |    */\n 34 |   public actor AppleSecurityProvider: CryptoServiceProtocol, AsyncServiceInitializable {\n    |                |- error: type 'AppleSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'\n    |                `- note: add stubs for conformance\n 35 |     /// The type of provider implementation (accessible from any actor context)\n 36 |     public nonisolated let providerType: SecurityProviderType = .cryptoKit\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -> Result<String, SecurityStorageError>'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -> Result<String, SecurityStorageError>'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -> Result<String, SecurityStorageError>'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -> Result<Bool, SecurityStorageError>'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -> Result<String, SecurityStorageError>'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -> Result<String, SecurityStorageError>'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -> Result<[UInt8], SecurityStorageError>'\n 82 |     identifier: String\n 83 |   ) async -> Result<[UInt8], SecurityStorageError>\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:71:17: error: module 'UmbraErrors' has no member named 'Security'\n 69 |         // Format: [Nonce][Tag][Ciphertext]\n 70 |         guard let combined=sealedBox.combined else {\n 71 |           throw UmbraErrors.Security.Core.cryptographicError(\n    |                 `- error: module 'UmbraErrors' has no member named 'Security'\n 72 |             \"Failed to generate combined ciphertext output\"\n 73 |           )\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:60:19: warning: no calls to throwing functions occur within 'try' expression\n 58 |       do {\n 59 |         // Generate a random nonce for encryption\n 60 |         let nonce=try AES.GCM.Nonce()\n    |                   `- warning: no calls to throwing functions occur within 'try' expression\n 61 | \n 62 |         // Convert byte array to CryptoKit key format\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:133:19: error: module 'UmbraErrors' has no member named 'Security'\n131 |             return .success(key.withUnsafeBytes { [UInt8]($0) })\n132 |           default:\n133 |             throw UmbraErrors.Security.Core.invalidInput(\n    |                   `- error: module 'UmbraErrors' has no member named 'Security'\n134 |               \"Invalid key size, must be 128, 192, or 256 bits\"\n135 |             )\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:153:9: warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n151 |         let hashData=SHA256.hash(data: Data(data))\n152 |         return .success([UInt8](Data(hashData)))\n153 |       } catch {\n    |         `- warning: 'catch' block is unreachable because no errors are thrown in 'do' block\n154 |         return .failure(mapToSecurityErrorDomain(error))\n155 |       }\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:175:17: error: module 'UmbraErrors' has no member named 'Security'\n173 |           return SymmetricKey(data: Data(key))\n174 |         default:\n175 |           throw UmbraErrors.Security.Core.invalidInput(\n    |                 `- error: module 'UmbraErrors' has no member named 'Security'\n176 |             \"Invalid key size: \\(keySize) bits. Must be 128, 192, or 256 bits.\"\n177 |           )\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:185:50: error: no type named 'Security' in module 'UmbraErrors'\n183 |      */\n184 |     private func mapToSecurityErrorDomain(_ error: Error) -> Error {\n185 |       if let securityError=error as? UmbraErrors.Security.Core {\n    |                                                  `- error: no type named 'Security' in module 'UmbraErrors'\n186 |         return securityError\n187 |       }\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:193:20: error: module 'UmbraErrors' has no member named 'Security'\n191 |         switch cryptoKitError {\n192 |           case .incorrectKeySize:\n193 |             return UmbraErrors.Security.Core.invalidInput(\n    |                    `- error: module 'UmbraErrors' has no member named 'Security'\n194 |               \"CryptoKit error: incorrect key size\"\n195 |             )\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:197:20: error: module 'UmbraErrors' has no member named 'Security'\n195 |             )\n196 |           case .incorrectParameterSize:\n197 |             return UmbraErrors.Security.Core.invalidInput(\n    |                    `- error: module 'UmbraErrors' has no member named 'Security'\n198 |               \"CryptoKit error: incorrect parameter size\"\n199 |             )\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:201:20: error: module 'UmbraErrors' has no member named 'Security'\n199 |             )\n200 |           case .authenticationFailure:\n201 |             return UmbraErrors.Security.Core.authenticationFailed(\n    |                    `- error: module 'UmbraErrors' has no member named 'Security'\n202 |               \"CryptoKit error: authentication tag verification failed\"\n203 |             )\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:205:20: error: module 'UmbraErrors' has no member named 'Security'\n203 |             )\n204 |           case .underlyingCoreCryptoError:\n205 |             return UmbraErrors.Security.Core.cryptographicError(\n    |                    `- error: module 'UmbraErrors' has no member named 'Security'\n206 |               \"CryptoKit error: underlying CoreCrypto operation failed\"\n207 |             )\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:209:20: error: module 'UmbraErrors' has no member named 'Security'\n207 |             )\n208 |           case .wrapFailure, .unwrapFailure, .invalidParameter:\n209 |             return UmbraErrors.Security.Core.cryptographicError(\n    |                    `- error: module 'UmbraErrors' has no member named 'Security'\n210 |               \"CryptoKit specific error: \\(cryptoKitError)\"\n211 |             )\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:213:20: error: module 'UmbraErrors' has no member named 'Security'\n211 |             )\n212 |           @unknown default:\n213 |             return UmbraErrors.Security.Core.cryptographicError(\n    |                    `- error: module 'UmbraErrors' has no member named 'Security'\n214 |               \"Unknown CryptoKit error: \\(cryptoKitError)\"\n215 |             )\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/AppleSecurityProvider.swift:220:14: error: module 'UmbraErrors' has no member named 'Security'\n218 | \n219 |       // Handle other error types\n220 |       return UmbraErrors.Security.Core.cryptographicError(\n    |              `- error: module 'UmbraErrors' has no member named 'Security'\n221 |         \"Cryptographic operation failed: \\(error.localizedDescription)\"\n222 |       )\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:57:13: error: module 'UmbraErrors' has no member named 'Security'\n 55 |   ) throws -> Data {\n 56 |     guard let algorithm=getAlgorithm(config: config) else {\n 57 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid or unsupported algorithm\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n 58 |     }\n 59 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:61:56: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'String'\n 59 | \n 60 |     // Validate key size\n 61 |     guard validateKeySize(key.count, algorithm: config.encryptionAlgorithm) != nil else {\n    |                                                        `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'String'\n 62 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid key size for algorithm \\(config.encryptionAlgorithm)\")\n 63 |     }\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:62:13: error: module 'UmbraErrors' has no member named 'Security'\n 60 |     // Validate key size\n 61 |     guard validateKeySize(key.count, algorithm: config.encryptionAlgorithm) != nil else {\n 62 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid key size for algorithm \\(config.encryptionAlgorithm)\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n 63 |     }\n 64 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:67:13: error: module 'UmbraErrors' has no member named 'Security'\n 65 |     // Validate IV\n 66 |     guard iv.count == kCCBlockSizeAES128 else {\n 67 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid IV size, must be 16 bytes for AES-CBC\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n 68 |     }\n 69 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:83:13: error: module 'UmbraErrors' has no member named 'Security'\n 81 | \n 82 |     guard status == kCCSuccess, let cryptorRef else {\n 83 |       throw UmbraErrors.Security.Core.cryptographicError(\"Failed to create encryption context with status \\(status)\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n 84 |     }\n 85 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:112:13: error: module 'UmbraErrors' has no member named 'Security'\n110 | \n111 |     guard status == kCCSuccess else {\n112 |       throw UmbraErrors.Security.Core.cryptographicError(\"Encryption update failed with status \\(status)\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n113 |     }\n114 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:135:13: error: module 'UmbraErrors' has no member named 'Security'\n133 | \n134 |     guard status == kCCSuccess else {\n135 |       throw UmbraErrors.Security.Core.cryptographicError(\"Encryption finalization failed with status \\(status)\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n136 |     }\n137 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:159:13: error: module 'UmbraErrors' has no member named 'Security'\n157 |   ) throws -> Data {\n158 |     guard let algorithm=getAlgorithm(config: config) else {\n159 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid or unsupported algorithm\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n160 |     }\n161 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:163:56: error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'String'\n161 | \n162 |     // Validate key size\n163 |     guard validateKeySize(key.count, algorithm: config.encryptionAlgorithm) != nil else {\n    |                                                        `- error: cannot convert value of type 'EncryptionAlgorithm' to expected argument type 'String'\n164 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid key size for algorithm \\(config.encryptionAlgorithm)\")\n165 |     }\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:164:13: error: module 'UmbraErrors' has no member named 'Security'\n162 |     // Validate key size\n163 |     guard validateKeySize(key.count, algorithm: config.encryptionAlgorithm) != nil else {\n164 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid key size for algorithm \\(config.encryptionAlgorithm)\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n165 |     }\n166 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:169:13: error: module 'UmbraErrors' has no member named 'Security'\n167 |     // Validate IV\n168 |     guard iv.count == kCCBlockSizeAES128 else {\n169 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid IV size, must be 16 bytes for AES-CBC\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n170 |     }\n171 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:185:13: error: module 'UmbraErrors' has no member named 'Security'\n183 | \n184 |     guard status == kCCSuccess, let cryptorRef else {\n185 |       throw UmbraErrors.Security.Core.cryptographicError(\"Failed to create decryption context with status \\(status)\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n186 |     }\n187 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:214:13: error: module 'UmbraErrors' has no member named 'Security'\n212 | \n213 |     guard status == kCCSuccess else {\n214 |       throw UmbraErrors.Security.Core.cryptographicError(\"Decryption update failed with status \\(status)\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n215 |     }\n216 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:237:13: error: module 'UmbraErrors' has no member named 'Security'\n235 | \n236 |     guard status == kCCSuccess else {\n237 |       throw UmbraErrors.Security.Core.cryptographicError(\"Decryption finalization failed with status \\(status)\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n238 |     }\n239 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:255:13: error: module 'UmbraErrors' has no member named 'Security'\n253 |     // Validate key size\n254 |     guard size == 128 || size == 192 || size == 256 else {\n255 |       throw UmbraErrors.Security.Core.invalidInput(\"Invalid key size, must be 128, 192, or 256 bits\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n256 |     }\n257 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:267:13: error: module 'UmbraErrors' has no member named 'Security'\n265 | \n266 |     guard result == errSecSuccess else {\n267 |       throw UmbraErrors.Security.Core.cryptographicError(\"Key generation failed with status \\(result)\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n268 |     }\n269 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:283:13: error: module 'UmbraErrors' has no member named 'Security'\n281 |   public func generateIV(size: Int) throws -> Data {\n282 |     guard size > 0 else {\n283 |       throw UmbraErrors.Security.Core.invalidInput(\"IV size must be greater than 0\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n284 |     }\n285 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:294:13: error: module 'UmbraErrors' has no member named 'Security'\n292 | \n293 |     guard result == errSecSuccess else {\n294 |       throw UmbraErrors.Security.Core.cryptographicError(\"IV generation failed with status \\(result)\")\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n295 |     }\n296 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:336:15: error: module 'UmbraErrors' has no member named 'Security'\n334 | \n335 |       default:\n336 |         throw UmbraErrors.Security.Core.unsupportedOperation(name: \"Hash algorithm \\(algorithm)\")\n    |               `- error: module 'UmbraErrors' has no member named 'Security'\n337 |     }\n338 |   }\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:359:13: error: type 'EncryptionAlgorithm' has no member 'aes128CBC'\n357 |   private func getAlgorithm(config: SecurityConfigDTO) -> CCAlgorithm? {\n358 |     switch config.encryptionAlgorithm {\n359 |       case .aes128CBC, .aes192CBC, .aes256CBC:\n    |             `- error: type 'EncryptionAlgorithm' has no member 'aes128CBC'\n360 |         return CCAlgorithm(kCCAlgorithmAES)\n361 |       default:\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/BasicSecurityProvider.swift:359:25: error: type 'EncryptionAlgorithm' has no member 'aes192CBC'\n357 |   private func getAlgorithm(config: SecurityConfigDTO) -> CCAlgorithm? {\n358 |     switch config.encryptionAlgorithm {\n359 |       case .aes128CBC, .aes192CBC, .aes256CBC:\n    |                         `- error: type 'EncryptionAlgorithm' has no member 'aes192CBC'\n360 |         return CCAlgorithm(kCCAlgorithmAES)\n361 |       default:\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/RingSecurityProvider.swift:298:16: error: type 'RingSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'\n296 | #else\n297 |   // Empty placeholder when Ring is not available\n298 |   public actor RingSecurityProvider: CryptoServiceProtocol, AsyncServiceInitializable {\n    |                |- error: type 'RingSecurityProvider' does not conform to protocol 'CryptoServiceProtocol'\n    |                `- note: add stubs for conformance\n299 |     public nonisolated let providerType: SecurityProviderType = .ring\n300 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/SecurityCoreInterfaces/CryptoServiceProtocol.swift:11:7: note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n  9 | public protocol CryptoServiceProtocol: Sendable {\n 10 |   /// The secure storage used for handling sensitive data\n 11 |   var secureStorage: SecureStorageProtocol { get }\n    |       `- note: protocol requires property 'secureStorage' with type 'any SecureStorageProtocol'\n 12 | \n 13 |   /// Encrypts binary data using a key from secure storage.\n    :\n 17 |   ///   - options: Optional encryption configuration.\n 18 |   /// - Returns: Identifier for the encrypted data in secure storage, or an error.\n 19 |   func encrypt(\n    |        `- note: protocol requires function 'encrypt(dataIdentifier:keyIdentifier:options:)' with type '(String, String, EncryptionOptions?) async -> Result<String, SecurityStorageError>'\n 20 |     dataIdentifier: String,\n 21 |     keyIdentifier: String,\n    :\n 29 |   ///   - options: Optional decryption configuration.\n 30 |   /// - Returns: Identifier for the decrypted data in secure storage, or an error.\n 31 |   func decrypt(\n    |        `- note: protocol requires function 'decrypt(encryptedDataIdentifier:keyIdentifier:options:)' with type '(String, String, DecryptionOptions?) async -> Result<String, SecurityStorageError>'\n 32 |     encryptedDataIdentifier: String,\n 33 |     keyIdentifier: String,\n    :\n 38 |   /// - Parameter dataIdentifier: Identifier of the data to hash in secure storage.\n 39 |   /// - Returns: Identifier for the hash in secure storage, or an error.\n 40 |   func hash(\n    |        `- note: protocol requires function 'hash(dataIdentifier:options:)' with type '(String, HashingOptions?) async -> Result<String, SecurityStorageError>'\n 41 |     dataIdentifier: String,\n 42 |     options: HashingOptions?\n    :\n 48 |   ///   - hashIdentifier: Identifier of the expected hash in secure storage.\n 49 |   /// - Returns: `true` if the hash matches, `false` if not, or an error.\n 50 |   func verifyHash(\n    |        `- note: protocol requires function 'verifyHash(dataIdentifier:hashIdentifier:options:)' with type '(String, String, HashingOptions?) async -> Result<Bool, SecurityStorageError>'\n 51 |     dataIdentifier: String,\n 52 |     hashIdentifier: String,\n    :\n 59 |   ///   - options: Optional key generation configuration.\n 60 |   /// - Returns: Identifier for the generated key in secure storage, or an error.\n 61 |   func generateKey(\n    |        `- note: protocol requires function 'generateKey(length:options:)' with type '(Int, KeyGenerationOptions?) async -> Result<String, SecurityStorageError>'\n 62 |     length: Int,\n 63 |     options: KeyGenerationOptions?\n    :\n 70 |   /// generated.\n 71 |   /// - Returns: The identifier for the data in secure storage, or an error.\n 72 |   func importData(\n    |        `- note: protocol requires function 'importData(_:customIdentifier:)' with type '([UInt8], String?) async -> Result<String, SecurityStorageError>'\n 73 |     _ data: [UInt8],\n 74 |     customIdentifier: String?\n    :\n 79 |   /// - Returns: The raw data, or an error.\n 80 |   /// - Warning: Use with caution as this exposes sensitive data.\n 81 |   func exportData(\n    |        `- note: protocol requires function 'exportData(identifier:)' with type '(String) async -> Result<[UInt8], SecurityStorageError>'\n 82 |     identifier: String\n 83 |   ) async -> Result<[UInt8], SecurityStorageError>\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/RingSecurityProvider.swift:304:13: error: module 'UmbraErrors' has no member named 'Security'\n302 | \n303 |     public func initialize() async throws {\n304 |       throw UmbraErrors.Security.Core.unsupportedOperation(\n    |             `- error: module 'UmbraErrors' has no member named 'Security'\n305 |         \"Ring crypto library is not available on this platform\"\n306 |       )\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/RingSecurityProvider.swift:313:16: error: module 'UmbraErrors' has no member named 'Security'\n311 |       using _: [UInt8]\n312 |     ) async -> Result<[UInt8], Error> {\n313 |       .failure(UmbraErrors.Security.Core.unsupportedOperation(\n    |                `- error: module 'UmbraErrors' has no member named 'Security'\n314 |         \"Ring crypto library is not available on this platform\"\n315 |       ))\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/RingSecurityProvider.swift:322:16: error: module 'UmbraErrors' has no member named 'Security'\n320 |       using _: [UInt8]\n321 |     ) async -> Result<[UInt8], Error> {\n322 |       .failure(UmbraErrors.Security.Core.unsupportedOperation(\n    |                `- error: module 'UmbraErrors' has no member named 'Security'\n323 |         \"Ring crypto library is not available on this platform\"\n324 |       ))\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/RingSecurityProvider.swift:328:16: error: module 'UmbraErrors' has no member named 'Security'\n326 | \n327 |     public func generateKey(size _: Int) async -> Result<[UInt8], Error> {\n328 |       .failure(UmbraErrors.Security.Core.unsupportedOperation(\n    |                `- error: module 'UmbraErrors' has no member named 'Security'\n329 |         \"Ring crypto library is not available on this platform\"\n330 |       ))\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Implementation/RingSecurityProvider.swift:334:16: error: module 'UmbraErrors' has no member named 'Security'\n332 | \n333 |     public func hash(data _: [UInt8]) async -> Result<[UInt8], Error> {\n334 |       .failure(UmbraErrors.Security.Core.unsupportedOperation(\n    |                `- error: module 'UmbraErrors' has no member named 'Security'\n335 |         \"Ring crypto library is not available on this platform\"\n336 |       ))\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:30:5: error: switch must be exhaustive\n28 |   /// Core logging method implementation\n29 |   public func logMessage(_ level: LogLevel, _ message: String, context: LogContext) async {\n30 |     switch level {\n   |     |- error: switch must be exhaustive\n   |     `- note: add missing case: '.trace'\n31 |       case .debug:\n32 |         logger.debug(\"\\(message)\")\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:46:59: error: missing argument for parameter 'source' in call\n44 |   /// Log debug message\n45 |   public func debug(_ message: String, metadata: LogMetadata?) async {\n46 |     await logMessage(.debug, message, context: LogContext(metadata: metadata ?? [:]))\n   |                                                           `- error: missing argument for parameter 'source' in call\n47 |   }\n48 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swift:357:10: note: 'init(source:metadata:correlationID:timestamp:)' declared here\n355 |   ///   - correlationId: Unique identifier for correlating related logs\n356 |   ///   - timestamp: Timestamp (defaults to a pre-generated value)\n357 |   public init(\n    |          `- note: 'init(source:metadata:correlationID:timestamp:)' declared here\n358 |     source: String,\n359 |     metadata: PrivacyMetadata?=nil,\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:46:81: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'\n44 |   /// Log debug message\n45 |   public func debug(_ message: String, metadata: LogMetadata?) async {\n46 |     await logMessage(.debug, message, context: LogContext(metadata: metadata ?? [:]))\n   |                                                                                 `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'\n47 |   }\n48 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:46:69: error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'\n44 |   /// Log debug message\n45 |   public func debug(_ message: String, metadata: LogMetadata?) async {\n46 |     await logMessage(.debug, message, context: LogContext(metadata: metadata ?? [:]))\n   |                                                                     `- error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'\n47 |   }\n48 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:51:58: error: missing argument for parameter 'source' in call\n49 |   /// Log info message\n50 |   public func info(_ message: String, metadata: LogMetadata?) async {\n51 |     await logMessage(.info, message, context: LogContext(metadata: metadata ?? [:]))\n   |                                                          `- error: missing argument for parameter 'source' in call\n52 |   }\n53 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swift:357:10: note: 'init(source:metadata:correlationID:timestamp:)' declared here\n355 |   ///   - correlationId: Unique identifier for correlating related logs\n356 |   ///   - timestamp: Timestamp (defaults to a pre-generated value)\n357 |   public init(\n    |          `- note: 'init(source:metadata:correlationID:timestamp:)' declared here\n358 |     source: String,\n359 |     metadata: PrivacyMetadata?=nil,\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:51:80: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'\n49 |   /// Log info message\n50 |   public func info(_ message: String, metadata: LogMetadata?) async {\n51 |     await logMessage(.info, message, context: LogContext(metadata: metadata ?? [:]))\n   |                                                                                `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'\n52 |   }\n53 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:51:68: error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'\n49 |   /// Log info message\n50 |   public func info(_ message: String, metadata: LogMetadata?) async {\n51 |     await logMessage(.info, message, context: LogContext(metadata: metadata ?? [:]))\n   |                                                                    `- error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'\n52 |   }\n53 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:56:61: error: missing argument for parameter 'source' in call\n54 |   /// Log warning message\n55 |   public func warning(_ message: String, metadata: LogMetadata?) async {\n56 |     await logMessage(.warning, message, context: LogContext(metadata: metadata ?? [:]))\n   |                                                             `- error: missing argument for parameter 'source' in call\n57 |   }\n58 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swift:357:10: note: 'init(source:metadata:correlationID:timestamp:)' declared here\n355 |   ///   - correlationId: Unique identifier for correlating related logs\n356 |   ///   - timestamp: Timestamp (defaults to a pre-generated value)\n357 |   public init(\n    |          `- note: 'init(source:metadata:correlationID:timestamp:)' declared here\n358 |     source: String,\n359 |     metadata: PrivacyMetadata?=nil,\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:56:83: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'\n54 |   /// Log warning message\n55 |   public func warning(_ message: String, metadata: LogMetadata?) async {\n56 |     await logMessage(.warning, message, context: LogContext(metadata: metadata ?? [:]))\n   |                                                                                   `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'\n57 |   }\n58 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:56:71: error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'\n54 |   /// Log warning message\n55 |   public func warning(_ message: String, metadata: LogMetadata?) async {\n56 |     await logMessage(.warning, message, context: LogContext(metadata: metadata ?? [:]))\n   |                                                                       `- error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'\n57 |   }\n58 | \n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:61:59: error: missing argument for parameter 'source' in call\n59 |   /// Log error message\n60 |   public func error(_ message: String, metadata: LogMetadata?) async {\n61 |     await logMessage(.error, message, context: LogContext(metadata: metadata ?? [:]))\n   |                                                           `- error: missing argument for parameter 'source' in call\n62 |   }\n63 | }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/LoggingTypes/LoggingTypes.swift:357:10: note: 'init(source:metadata:correlationID:timestamp:)' declared here\n355 |   ///   - correlationId: Unique identifier for correlating related logs\n356 |   ///   - timestamp: Timestamp (defaults to a pre-generated value)\n357 |   public init(\n    |          `- note: 'init(source:metadata:correlationID:timestamp:)' declared here\n358 |     source: String,\n359 |     metadata: PrivacyMetadata?=nil,\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:61:81: error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'\n59 |   /// Log error message\n60 |   public func error(_ message: String, metadata: LogMetadata?) async {\n61 |     await logMessage(.error, message, context: LogContext(metadata: metadata ?? [:]))\n   |                                                                                 `- error: cannot convert value of type '[AnyHashable : Any]' to expected argument type 'PrivacyMetadata?'\n62 |   }\n63 | }\n\npackages/UmbraImplementations/Sources/SecurityCryptoServices/Utilities/DefaultLogger.swift:61:69: error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'\n59 |   /// Log error message\n60 |   public func error(_ message: String, metadata: LogMetadata?) async {\n61 |     await logMessage(.error, message, context: LogContext(metadata: metadata ?? [:]))\n   |                                                                     `- error: cannot convert value of type 'LogMetadata?' to expected argument type 'PrivacyMetadata?'\n62 |   }\n63 | }\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/ConfigServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/ConfigServices:ConfigServices) \n  (cd /Users/mpy/.bazel/execroot/_main && \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/ConfigServices/ConfigServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/ConfigServices/ConfigurationServiceActor.swift:2:8: error: no such module 'CoreTypesInterfaces'\n  1 | import ConfigInterfaces\n  2 | import CoreTypesInterfaces\n    |        `- error: no such module 'CoreTypesInterfaces'\n  3 | import DateTimeTypes\n  4 | import LoggingInterfaces\npackages/UmbraImplementations/Sources/ConfigServices/ConfigurationServiceActor.swift:2:8: error: no such module 'CoreTypesInterfaces'\n  1 | import ConfigInterfaces\n  2 | import CoreTypesInterfaces\n    |        `- error: no such module 'CoreTypesInterfaces'\n  3 | import DateTimeTypes\n  4 | import LoggingInterfaces\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraInterfaces/Sources/FileSystemInterfaces/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraInterfaces/Sources/FileSystemInterfaces:FileSystemInterfaces) \n  (cd /Users/mpy/.bazel/execroot/_main && \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraInterfaces/Sources/FileSystemInterfaces/FileSystemInterfaces.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:60: error: expected ']' in array type\n39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n40 |   )\n41 |   public let extendedAttributes: @unchecked Sendable[String: Any]\n   |                                                     |      `- error: expected ']' in array type\n   |                                                     `- note: to match this opening '['\n42 | \n43 |   /// Creates a new file attributes instance\n\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:60: error: consecutive declarations on a line must be separated by ';'\n39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n40 |   )\n41 |   public let extendedAttributes: @unchecked Sendable[String: Any]\n   |                                                            `- error: consecutive declarations on a line must be separated by ';'\n42 | \n43 |   /// Creates a new file attributes instance\n\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:60: error: expected declaration\n 7 |  modification date, and other system-level file metadata.\n 8 |  */\n 9 | public struct FileAttributes: Sendable, Equatable {\n   |               `- note: in declaration of 'FileAttributes'\n10 |   /// File size in bytes\n11 |   public let size: UInt64\n   :\n39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n40 |   )\n41 |   public let extendedAttributes: @unchecked Sendable[String: Any]\n   |                                                            `- error: expected declaration\n42 | \n43 |   /// Creates a new file attributes instance\n\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:65: error: expected ']' in array type\n22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n23 |   )\n24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]\n   |                                                 |               `- error: expected ']' in array type\n   |                                                 `- note: to match this opening '['\n25 | \n26 |   /// Whether the file exists\n\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:65: error: consecutive declarations on a line must be separated by ';'\n22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n23 |   )\n24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]\n   |                                                                 `- error: consecutive declarations on a line must be separated by ';'\n25 | \n26 |   /// Whether the file exists\n\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:65: error: expected declaration\n 8 |  resource values, and other metadata that might be relevant to the application.\n 9 |  */\n10 | public struct FileMetadata: Sendable, Equatable {\n   |               `- note: in declaration of 'FileMetadata'\n11 |   /// The path to the file\n12 |   public let path: FilePath\n   :\n22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n23 |   )\n24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]\n   |                                                                 `- error: expected declaration\n25 | \n26 |   /// Whether the file exists\n\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:34: error: 'unchecked' attribute only applies in inheritance clauses\n39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n40 |   )\n41 |   public let extendedAttributes: @unchecked Sendable[String: Any]\n   |                                  `- error: 'unchecked' attribute only applies in inheritance clauses\n42 | \n43 |   /// Creates a new file attributes instance\n\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:30: error: 'unchecked' attribute only applies in inheritance clauses\n22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n23 |   )\n24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]\n   |                              `- error: 'unchecked' attribute only applies in inheritance clauses\n25 | \n26 |   /// Whether the file exists\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:60: error: expected ']' in array type\n39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n40 |   )\n41 |   public let extendedAttributes: @unchecked Sendable[String: Any]\n   |                                                     |      `- error: expected ']' in array type\n   |                                                     `- note: to match this opening '['\n42 | \n43 |   /// Creates a new file attributes instance\n\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:60: error: consecutive declarations on a line must be separated by ';'\n39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n40 |   )\n41 |   public let extendedAttributes: @unchecked Sendable[String: Any]\n   |                                                            `- error: consecutive declarations on a line must be separated by ';'\n42 | \n43 |   /// Creates a new file attributes instance\n\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:60: error: expected declaration\n 7 |  modification date, and other system-level file metadata.\n 8 |  */\n 9 | public struct FileAttributes: Sendable, Equatable {\n   |               `- note: in declaration of 'FileAttributes'\n10 |   /// File size in bytes\n11 |   public let size: UInt64\n   :\n39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n40 |   )\n41 |   public let extendedAttributes: @unchecked Sendable[String: Any]\n   |                                                            `- error: expected declaration\n42 | \n43 |   /// Creates a new file attributes instance\n\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:65: error: expected ']' in array type\n22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n23 |   )\n24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]\n   |                                                 |               `- error: expected ']' in array type\n   |                                                 `- note: to match this opening '['\n25 | \n26 |   /// Whether the file exists\n\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:65: error: consecutive declarations on a line must be separated by ';'\n22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n23 |   )\n24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]\n   |                                                                 `- error: consecutive declarations on a line must be separated by ';'\n25 | \n26 |   /// Whether the file exists\n\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:65: error: expected declaration\n 8 |  resource values, and other metadata that might be relevant to the application.\n 9 |  */\n10 | public struct FileMetadata: Sendable, Equatable {\n   |               `- note: in declaration of 'FileMetadata'\n11 |   /// The path to the file\n12 |   public let path: FilePath\n   :\n22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n23 |   )\n24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]\n   |                                                                 `- error: expected declaration\n25 | \n26 |   /// Whether the file exists\n\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileAttributes.swift:41:34: error: 'unchecked' attribute only applies in inheritance clauses\n39 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n40 |   )\n41 |   public let extendedAttributes: @unchecked Sendable[String: Any]\n   |                                  `- error: 'unchecked' attribute only applies in inheritance clauses\n42 | \n43 |   /// Creates a new file attributes instance\n\npackages/UmbraInterfaces/Sources/FileSystemInterfaces/Types/FileMetadata.swift:24:30: error: 'unchecked' attribute only applies in inheritance clauses\n22 |     message: \"This property will be replaced with a safer alternative in Swift 6\"\n23 |   )\n24 |   public let resourceValues: @unchecked Sendable[FileResourceKey: Any]\n   |                              `- error: 'unchecked' attribute only applies in inheritance clauses\n25 | \n26 |   /// Whether the file exists\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/CryptoXPCServices/BUILD.bazel:3:14: Compiling Swift module //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/CryptoXPCServices:CryptoXPCServices) \n  (cd /Users/mpy/.bazel/execroot/_main && \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:22:36: error: cannot find type 'CryptoServiceMonitorProtocol' in scope\n 20 |  - Uses domain-specific DTOs for all communications\n 21 |  */\n 22 | public actor CryptoServiceMonitor: CryptoServiceMonitorProtocol {\n    |                                    `- error: cannot find type 'CryptoServiceMonitorProtocol' in scope\n 23 |   /// Logger for recording operations and errors\n 24 |   private let logger: LoggingProtocol\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:36:31: error: cannot find type 'CryptoProviderProtocol' in scope\n 34 | \n 35 |   /// Crypto provider for performing operations\n 36 |   private let cryptoProvider: CryptoProviderProtocol\n    |                               `- error: cannot find type 'CryptoProviderProtocol' in scope\n 37 | \n 38 |   /// Key store for key management\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:39:25: error: cannot find type 'KeyStoreProtocol' in scope\n 37 | \n 38 |   /// Key store for key management\n 39 |   private let keyStore: KeyStoreProtocol\n    |                         `- error: cannot find type 'KeyStoreProtocol' in scope\n 40 | \n 41 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:52:21: error: cannot find type 'CryptoProviderProtocol' in scope\n 50 |    */\n 51 |   public init(\n 52 |     cryptoProvider: CryptoProviderProtocol,\n    |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n 53 |     keyStore: KeyStoreProtocol,\n 54 |     logger: LoggingProtocol\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:53:15: error: cannot find type 'KeyStoreProtocol' in scope\n 51 |   public init(\n 52 |     cryptoProvider: CryptoProviderProtocol,\n 53 |     keyStore: KeyStoreProtocol,\n    |               `- error: cannot find type 'KeyStoreProtocol' in scope\n 54 |     logger: LoggingProtocol\n 55 |   ) {\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:78:46: error: no type named 'Crypto' in module 'UmbraErrors'\n 76 |     keyIdentifier: String,\n 77 |     options: CryptoOperationOptionsDTO?=nil\n 78 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'\n 79 |     await cryptoLogger.logOperationStart(\n 80 |       operation: \"encrypt\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:75:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n 73 |    */\n 74 |   public func encrypt(\n 75 |     data: SecureBytes,\n    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n 76 |     keyIdentifier: String,\n 77 |     options: CryptoOperationOptionsDTO?=nil\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:144:46: error: no type named 'Crypto' in module 'UmbraErrors'\n142 |     keyIdentifier: String,\n143 |     options: CryptoOperationOptionsDTO?=nil\n144 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'\n145 |     await cryptoLogger.logOperationStart(\n146 |       operation: \"decrypt\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:141:20: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n139 |    */\n140 |   public func decrypt(\n141 |     encryptedData: SecureBytes,\n    |                    `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n142 |     keyIdentifier: String,\n143 |     options: CryptoOperationOptionsDTO?=nil\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:214:41: error: no type named 'Crypto' in module 'UmbraErrors'\n212 |     options: KeyGenerationOptionsDTO,\n213 |     metadata: KeyMetadataDTO?=nil\n214 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {\n    |                                         `- error: no type named 'Crypto' in module 'UmbraErrors'\n215 |     await cryptoLogger.logOperationStart(\n216 |       operation: \"generateKey\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:213:15: error: cannot find type 'KeyMetadataDTO' in scope\n211 |   public func generateKey(\n212 |     options: KeyGenerationOptionsDTO,\n213 |     metadata: KeyMetadataDTO?=nil\n    |               `- error: cannot find type 'KeyMetadataDTO' in scope\n214 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {\n215 |     await cryptoLogger.logOperationStart(\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:278:46: error: no type named 'Crypto' in module 'UmbraErrors'\n276 |   public func exportKey(\n277 |     keyIdentifier: String\n278 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'\n279 |     await cryptoLogger.logOperationStart(\n280 |       operation: \"exportKey\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:329:41: error: no type named 'Crypto' in module 'UmbraErrors'\n327 |     keyData: SecureBytes,\n328 |     metadata: KeyMetadataDTO\n329 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {\n    |                                         `- error: no type named 'Crypto' in module 'UmbraErrors'\n330 |     await cryptoLogger.logOperationStart(\n331 |       operation: \"importKey\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:328:15: error: cannot find type 'KeyMetadataDTO' in scope\n326 |   public func importKey(\n327 |     keyData: SecureBytes,\n328 |     metadata: KeyMetadataDTO\n    |               `- error: cannot find type 'KeyMetadataDTO' in scope\n329 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {\n330 |     await cryptoLogger.logOperationStart(\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:327:14: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n325 |    */\n326 |   public func importKey(\n327 |     keyData: SecureBytes,\n    |              `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n328 |     metadata: KeyMetadataDTO\n329 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:383:39: error: no type named 'Crypto' in module 'UmbraErrors'\n381 |   public func deleteKey(\n382 |     keyIdentifier: String\n383 |   ) async -> Result<Bool, UmbraErrors.Crypto.Core> {\n    |                                       `- error: no type named 'Crypto' in module 'UmbraErrors'\n384 |     await cryptoLogger.logOperationStart(\n385 |       operation: \"deleteKey\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:438:46: error: no type named 'Crypto' in module 'UmbraErrors'\n436 |     keyIdentifier: String,\n437 |     options: SigningOptionsDTO?=nil\n438 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'\n439 |     await cryptoLogger.logOperationStart(\n440 |       operation: \"sign\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:435:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n433 |    */\n434 |   public func sign(\n435 |     data: SecureBytes,\n    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n436 |     keyIdentifier: String,\n437 |     options: SigningOptionsDTO?=nil\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:506:39: error: no type named 'Crypto' in module 'UmbraErrors'\n504 |     keyIdentifier: String,\n505 |     options: SigningOptionsDTO?=nil\n506 |   ) async -> Result<Bool, UmbraErrors.Crypto.Core> {\n    |                                       `- error: no type named 'Crypto' in module 'UmbraErrors'\n507 |     await cryptoLogger.logOperationStart(\n508 |       operation: \"verify\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:502:16: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n500 |    */\n501 |   public func verify(\n502 |     signature: SecureBytes,\n    |                `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n503 |     data: SecureBytes,\n504 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:503:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n501 |   public func verify(\n502 |     signature: SecureBytes,\n503 |     data: SecureBytes,\n    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n504 |     keyIdentifier: String,\n505 |     options: SigningOptionsDTO?=nil\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:575:46: error: no type named 'Crypto' in module 'UmbraErrors'\n573 |   public func generateRandomBytes(\n574 |     length: Int\n575 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'\n576 |     await cryptoLogger.logOperationStart(\n577 |       operation: \"generateRandomBytes\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:625:46: error: no type named 'Crypto' in module 'UmbraErrors'\n623 |     data: SecureBytes,\n624 |     algorithm: HashAlgorithm\n625 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'\n626 |     await cryptoLogger.logOperationStart(\n627 |       operation: \"hash\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:624:16: error: 'HashAlgorithm' is ambiguous for type lookup in this context\n622 |   public func hash(\n623 |     data: SecureBytes,\n624 |     algorithm: HashAlgorithm\n    |                `- error: 'HashAlgorithm' is ambiguous for type lookup in this context\n625 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n626 |     await cryptoLogger.logOperationStart(\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CryptoTypes/DTOs/SigningOptionsDTO.swift:69:13: note: found this candidate\n67 | \n68 | /// Hash algorithms for cryptographic operations\n69 | public enum HashAlgorithm: String, Sendable, Equatable {\n   |             `- note: found this candidate\n70 |   case md5 // Not recommended for security applications\n71 |   case sha1 // Not recommended for security applications\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/Types/HashAlgorithm.swift:9:13: note: found this candidate\n 7 |  representation of domain concepts.\n 8 |  */\n 9 | public enum HashAlgorithm: String, Sendable, Codable, Equatable, CaseIterable {\n   |             `- note: found this candidate\n10 |   /// SHA-256 hash algorithm\n11 |   case sha256=\"SHA-256\"\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:623:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n621 |    */\n622 |   public func hash(\n623 |     data: SecureBytes,\n    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n624 |     algorithm: HashAlgorithm\n625 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:26:37: error: cannot find type 'CryptoXPCServiceProtocol' in scope\n 24 |  - Proper actor isolation for all mutable state\n 25 |  */\n 26 | public actor CryptoXPCServiceActor: CryptoXPCServiceProtocol {\n    |                                     `- error: cannot find type 'CryptoXPCServiceProtocol' in scope\n 27 |   // MARK: - Private properties\n 28 | \n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:55:21: error: cannot find type 'CryptoProviderProtocol' in scope\n53 |    */\n54 |   public static func create(\n55 |     cryptoProvider: CryptoProviderProtocol,\n   |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n56 |     keyStore: KeyStoreProtocol,\n57 |     logger: LoggingProtocol\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:56:15: error: cannot find type 'KeyStoreProtocol' in scope\n54 |   public static func create(\n55 |     cryptoProvider: CryptoProviderProtocol,\n56 |     keyStore: KeyStoreProtocol,\n   |               `- error: cannot find type 'KeyStoreProtocol' in scope\n57 |     logger: LoggingProtocol\n58 |   ) async -> CryptoXPCServiceActor {\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:22:36: error: cannot find type 'CryptoServiceMonitorProtocol' in scope\n 20 |  - Uses domain-specific DTOs for all communications\n 21 |  */\n 22 | public actor CryptoServiceMonitor: CryptoServiceMonitorProtocol {\n    |                                    `- error: cannot find type 'CryptoServiceMonitorProtocol' in scope\n 23 |   /// Logger for recording operations and errors\n 24 |   private let logger: LoggingProtocol\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:262:21: error: extraneous argument labels 'level:message:' in call\n260 |     additionalContext: LogMetadataDTOCollection?=nil\n261 |   ) async {\n262 |     await logger.log(\n    |                     `- error: extraneous argument labels 'level:message:' in call\n263 |       level: .debug,\n264 |       message: \"Starting crypto monitor operation: \\(operation)\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:265:34: error: missing argument for parameter 'source' in call\n263 |       level: .debug,\n264 |       message: \"Starting crypto monitor operation: \\(operation)\",\n265 |       metadata: additionalContext\n    |                                  `- error: missing argument for parameter 'source' in call\n266 |     )\n267 |   }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:60:15: note: 'log(_:_:metadata:source:)' declared here\n 58 |   ///   - metadata: Optional metadata\n 59 |   ///   - source: Source component identifier\n 60 |   public func log(\n    |               `- note: 'log(_:_:metadata:source:)' declared here\n 61 |     _ level: LogLevel,\n 62 |     _ message: String,\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:265:17: error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'\n263 |       level: .debug,\n264 |       message: \"Starting crypto monitor operation: \\(operation)\",\n265 |       metadata: additionalContext\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'\n266 |     )\n267 |   }\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:273:21: error: extraneous argument labels 'level:message:' in call\n271 |     additionalContext: LogMetadataDTOCollection?=nil\n272 |   ) async {\n273 |     await logger.log(\n    |                     `- error: extraneous argument labels 'level:message:' in call\n274 |       level: .debug,\n275 |       message: \"Successfully completed crypto monitor operation: \\(operation)\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:276:34: error: missing argument for parameter 'source' in call\n274 |       level: .debug,\n275 |       message: \"Successfully completed crypto monitor operation: \\(operation)\",\n276 |       metadata: additionalContext\n    |                                  `- error: missing argument for parameter 'source' in call\n277 |     )\n278 |   }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:60:15: note: 'log(_:_:metadata:source:)' declared here\n 58 |   ///   - metadata: Optional metadata\n 59 |   ///   - source: Source component identifier\n 60 |   public func log(\n    |               `- note: 'log(_:_:metadata:source:)' declared here\n 61 |     _ level: LogLevel,\n 62 |     _ message: String,\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:276:17: error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'\n274 |       level: .debug,\n275 |       message: \"Successfully completed crypto monitor operation: \\(operation)\",\n276 |       metadata: additionalContext\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'\n277 |     )\n278 |   }\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:288:21: error: extraneous argument labels 'level:message:' in call\n286 |     context=context.withPrivate(key: \"warning\", value: message)\n287 | \n288 |     await logger.log(\n    |                     `- error: extraneous argument labels 'level:message:' in call\n289 |       level: .warning,\n290 |       message: \"Warning in crypto monitor operation: \\(operation)\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:291:24: error: missing argument for parameter 'source' in call\n289 |       level: .warning,\n290 |       message: \"Warning in crypto monitor operation: \\(operation)\",\n291 |       metadata: context\n    |                        `- error: missing argument for parameter 'source' in call\n292 |     )\n293 |   }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:60:15: note: 'log(_:_:metadata:source:)' declared here\n 58 |   ///   - metadata: Optional metadata\n 59 |   ///   - source: Source component identifier\n 60 |   public func log(\n    |               `- note: 'log(_:_:metadata:source:)' declared here\n 61 |     _ level: LogLevel,\n 62 |     _ message: String,\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:291:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n289 |       level: .warning,\n290 |       message: \"Warning in crypto monitor operation: \\(operation)\",\n291 |       metadata: context\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n292 |     )\n293 |   }\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:303:21: error: extraneous argument labels 'level:message:' in call\n301 |     context=context.withPrivate(key: \"error\", value: \"\\(error)\")\n302 | \n303 |     await logger.log(\n    |                     `- error: extraneous argument labels 'level:message:' in call\n304 |       level: .error,\n305 |       message: \"Failed crypto monitor operation: \\(operation)\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:306:24: error: missing argument for parameter 'source' in call\n304 |       level: .error,\n305 |       message: \"Failed crypto monitor operation: \\(operation)\",\n306 |       metadata: context\n    |                        `- error: missing argument for parameter 'source' in call\n307 |     )\n308 |   }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:60:15: note: 'log(_:_:metadata:source:)' declared here\n 58 |   ///   - metadata: Optional metadata\n 59 |   ///   - source: Source component identifier\n 60 |   public func log(\n    |               `- note: 'log(_:_:metadata:source:)' declared here\n 61 |     _ level: LogLevel,\n 62 |     _ message: String,\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoServiceMonitor.swift:306:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n304 |       level: .error,\n305 |       message: \"Failed crypto monitor operation: \\(operation)\",\n306 |       metadata: context\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n307 |     )\n308 |   }\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:36:31: error: cannot find type 'CryptoProviderProtocol' in scope\n 34 | \n 35 |   /// Crypto provider for performing operations\n 36 |   private let cryptoProvider: CryptoProviderProtocol\n    |                               `- error: cannot find type 'CryptoProviderProtocol' in scope\n 37 | \n 38 |   /// Key store for key management\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:39:25: error: cannot find type 'KeyStoreProtocol' in scope\n 37 | \n 38 |   /// Key store for key management\n 39 |   private let keyStore: KeyStoreProtocol\n    |                         `- error: cannot find type 'KeyStoreProtocol' in scope\n 40 | \n 41 |   // MARK: - Initialisation\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:52:21: error: cannot find type 'CryptoProviderProtocol' in scope\n 50 |    */\n 51 |   public init(\n 52 |     cryptoProvider: CryptoProviderProtocol,\n    |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n 53 |     keyStore: KeyStoreProtocol,\n 54 |     logger: LoggingProtocol\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:53:15: error: cannot find type 'KeyStoreProtocol' in scope\n 51 |   public init(\n 52 |     cryptoProvider: CryptoProviderProtocol,\n 53 |     keyStore: KeyStoreProtocol,\n    |               `- error: cannot find type 'KeyStoreProtocol' in scope\n 54 |     logger: LoggingProtocol\n 55 |   ) {\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:78:46: error: no type named 'Crypto' in module 'UmbraErrors'\n 76 |     keyIdentifier: String,\n 77 |     options: CryptoOperationOptionsDTO?=nil\n 78 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'\n 79 |     await cryptoLogger.logOperationStart(\n 80 |       operation: \"encrypt\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:75:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n 73 |    */\n 74 |   public func encrypt(\n 75 |     data: SecureBytes,\n    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n 76 |     keyIdentifier: String,\n 77 |     options: CryptoOperationOptionsDTO?=nil\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:144:46: error: no type named 'Crypto' in module 'UmbraErrors'\n142 |     keyIdentifier: String,\n143 |     options: CryptoOperationOptionsDTO?=nil\n144 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'\n145 |     await cryptoLogger.logOperationStart(\n146 |       operation: \"decrypt\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:141:20: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n139 |    */\n140 |   public func decrypt(\n141 |     encryptedData: SecureBytes,\n    |                    `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n142 |     keyIdentifier: String,\n143 |     options: CryptoOperationOptionsDTO?=nil\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:214:41: error: no type named 'Crypto' in module 'UmbraErrors'\n212 |     options: KeyGenerationOptionsDTO,\n213 |     metadata: KeyMetadataDTO?=nil\n214 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {\n    |                                         `- error: no type named 'Crypto' in module 'UmbraErrors'\n215 |     await cryptoLogger.logOperationStart(\n216 |       operation: \"generateKey\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:213:15: error: cannot find type 'KeyMetadataDTO' in scope\n211 |   public func generateKey(\n212 |     options: KeyGenerationOptionsDTO,\n213 |     metadata: KeyMetadataDTO?=nil\n    |               `- error: cannot find type 'KeyMetadataDTO' in scope\n214 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {\n215 |     await cryptoLogger.logOperationStart(\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:278:46: error: no type named 'Crypto' in module 'UmbraErrors'\n276 |   public func exportKey(\n277 |     keyIdentifier: String\n278 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'\n279 |     await cryptoLogger.logOperationStart(\n280 |       operation: \"exportKey\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:329:41: error: no type named 'Crypto' in module 'UmbraErrors'\n327 |     keyData: SecureBytes,\n328 |     metadata: KeyMetadataDTO\n329 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {\n    |                                         `- error: no type named 'Crypto' in module 'UmbraErrors'\n330 |     await cryptoLogger.logOperationStart(\n331 |       operation: \"importKey\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:328:15: error: cannot find type 'KeyMetadataDTO' in scope\n326 |   public func importKey(\n327 |     keyData: SecureBytes,\n328 |     metadata: KeyMetadataDTO\n    |               `- error: cannot find type 'KeyMetadataDTO' in scope\n329 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {\n330 |     await cryptoLogger.logOperationStart(\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:327:14: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n325 |    */\n326 |   public func importKey(\n327 |     keyData: SecureBytes,\n    |              `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n328 |     metadata: KeyMetadataDTO\n329 |   ) async -> Result<String, UmbraErrors.Crypto.Core> {\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:383:39: error: no type named 'Crypto' in module 'UmbraErrors'\n381 |   public func deleteKey(\n382 |     keyIdentifier: String\n383 |   ) async -> Result<Bool, UmbraErrors.Crypto.Core> {\n    |                                       `- error: no type named 'Crypto' in module 'UmbraErrors'\n384 |     await cryptoLogger.logOperationStart(\n385 |       operation: \"deleteKey\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:438:46: error: no type named 'Crypto' in module 'UmbraErrors'\n436 |     keyIdentifier: String,\n437 |     options: SigningOptionsDTO?=nil\n438 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'\n439 |     await cryptoLogger.logOperationStart(\n440 |       operation: \"sign\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:435:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n433 |    */\n434 |   public func sign(\n435 |     data: SecureBytes,\n    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n436 |     keyIdentifier: String,\n437 |     options: SigningOptionsDTO?=nil\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:506:39: error: no type named 'Crypto' in module 'UmbraErrors'\n504 |     keyIdentifier: String,\n505 |     options: SigningOptionsDTO?=nil\n506 |   ) async -> Result<Bool, UmbraErrors.Crypto.Core> {\n    |                                       `- error: no type named 'Crypto' in module 'UmbraErrors'\n507 |     await cryptoLogger.logOperationStart(\n508 |       operation: \"verify\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:502:16: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n500 |    */\n501 |   public func verify(\n502 |     signature: SecureBytes,\n    |                `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n503 |     data: SecureBytes,\n504 |     keyIdentifier: String,\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:503:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n501 |   public func verify(\n502 |     signature: SecureBytes,\n503 |     data: SecureBytes,\n    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n504 |     keyIdentifier: String,\n505 |     options: SigningOptionsDTO?=nil\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:575:46: error: no type named 'Crypto' in module 'UmbraErrors'\n573 |   public func generateRandomBytes(\n574 |     length: Int\n575 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'\n576 |     await cryptoLogger.logOperationStart(\n577 |       operation: \"generateRandomBytes\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:625:46: error: no type named 'Crypto' in module 'UmbraErrors'\n623 |     data: SecureBytes,\n624 |     algorithm: HashAlgorithm\n625 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n    |                                              `- error: no type named 'Crypto' in module 'UmbraErrors'\n626 |     await cryptoLogger.logOperationStart(\n627 |       operation: \"hash\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:624:16: error: 'HashAlgorithm' is ambiguous for type lookup in this context\n622 |   public func hash(\n623 |     data: SecureBytes,\n624 |     algorithm: HashAlgorithm\n    |                `- error: 'HashAlgorithm' is ambiguous for type lookup in this context\n625 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n626 |     await cryptoLogger.logOperationStart(\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CryptoTypes/DTOs/SigningOptionsDTO.swift:69:13: note: found this candidate\n67 | \n68 | /// Hash algorithms for cryptographic operations\n69 | public enum HashAlgorithm: String, Sendable, Equatable {\n   |             `- note: found this candidate\n70 |   case md5 // Not recommended for security applications\n71 |   case sha1 // Not recommended for security applications\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraCoreTypes/Sources/CoreSecurityTypes/Types/HashAlgorithm.swift:9:13: note: found this candidate\n 7 |  representation of domain concepts.\n 8 |  */\n 9 | public enum HashAlgorithm: String, Sendable, Codable, Equatable, CaseIterable {\n   |             `- note: found this candidate\n10 |   /// SHA-256 hash algorithm\n11 |   case sha256=\"SHA-256\"\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:623:11: warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n621 |    */\n622 |   public func hash(\n623 |     data: SecureBytes,\n    |           `- warning: 'SecureBytes' is deprecated: Use actor-based SecureStorage instead\n624 |     algorithm: HashAlgorithm\n625 |   ) async -> Result<SecureBytes, UmbraErrors.Crypto.Core> {\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:26:37: error: cannot find type 'CryptoXPCServiceProtocol' in scope\n 24 |  - Proper actor isolation for all mutable state\n 25 |  */\n 26 | public actor CryptoXPCServiceActor: CryptoXPCServiceProtocol {\n    |                                     `- error: cannot find type 'CryptoXPCServiceProtocol' in scope\n 27 |   // MARK: - Private properties\n 28 | \n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:83:58: error: value of type 'SecureBytes' has no member 'bytes'\n 81 |       additionalContext: LogMetadataDTOCollection()\n 82 |         .withPrivate(key: \"keyIdentifier\", value: keyIdentifier)\n 83 |         .withPrivate(key: \"dataSize\", value: String(data.bytes.count))\n    |                                                          `- error: value of type 'SecureBytes' has no member 'bytes'\n 84 |     )\n 85 | \n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:88:17: error: module 'UmbraErrors' has no member named 'Crypto'\n 86 |     // Validate input\n 87 |     guard !keyIdentifier.isEmpty else {\n 88 |       let error=UmbraErrors.Crypto.Core.invalidInput(\"Empty key identifier\")\n    |                 `- error: module 'UmbraErrors' has no member named 'Crypto'\n 89 |       await cryptoLogger.logOperationError(\n 90 |         operation: \"encrypt\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:121:25: error: module 'UmbraErrors' has no member named 'Crypto'\n119 | \n120 |       case let .failure(error):\n121 |         let cryptoError=UmbraErrors.Crypto.Core.keyError(\"Failed to retrieve key: \\(error)\")\n    |                         `- error: module 'UmbraErrors' has no member named 'Crypto'\n122 |         await cryptoLogger.logOperationError(\n123 |           operation: \"encrypt\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:149:67: error: value of type 'SecureBytes' has no member 'bytes'\n147 |       additionalContext: LogMetadataDTOCollection()\n148 |         .withPrivate(key: \"keyIdentifier\", value: keyIdentifier)\n149 |         .withPrivate(key: \"dataSize\", value: String(encryptedData.bytes.count))\n    |                                                                   `- error: value of type 'SecureBytes' has no member 'bytes'\n150 |     )\n151 | \n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:154:17: error: module 'UmbraErrors' has no member named 'Crypto'\n152 |     // Validate input\n153 |     guard !keyIdentifier.isEmpty else {\n154 |       let error=UmbraErrors.Crypto.Core.invalidInput(\"Empty key identifier\")\n    |                 `- error: module 'UmbraErrors' has no member named 'Crypto'\n155 |       await cryptoLogger.logOperationError(\n156 |         operation: \"decrypt\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:191:25: error: module 'UmbraErrors' has no member named 'Crypto'\n189 | \n190 |       case let .failure(error):\n191 |         let cryptoError=UmbraErrors.Crypto.Core.keyError(\"Failed to retrieve key: \\(error)\")\n    |                         `- error: module 'UmbraErrors' has no member named 'Crypto'\n192 |         await cryptoLogger.logOperationError(\n193 |           operation: \"decrypt\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:228:37: error: cannot find 'KeyMetadataDTO' in scope\n226 |       case let .success(key):\n227 |         // Create metadata if not provided\n228 |         let keyMetadata=metadata ?? KeyMetadataDTO(\n    |                                     `- error: cannot find 'KeyMetadataDTO' in scope\n229 |           algorithm: options.algorithm,\n230 |           keySize: options.keySize,\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:231:25: error: cannot find 'TimePointDTO' in scope\n229 |           algorithm: options.algorithm,\n230 |           keySize: options.keySize,\n231 |           creationDate: TimePointDTO.now(),\n    |                         `- error: cannot find 'TimePointDTO' in scope\n232 |           name: \"Generated key\",\n233 |           description: \"Automatically generated key\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:250:29: error: module 'UmbraErrors' has no member named 'Crypto'\n248 | \n249 |           case let .failure(error):\n250 |             let cryptoError=UmbraErrors.Crypto.Core.keyError(\n    |                             `- error: module 'UmbraErrors' has no member named 'Crypto'\n251 |               \"Failed to store generated key: \\(error)\"\n252 |             )\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:287:17: error: module 'UmbraErrors' has no member named 'Crypto'\n285 |     // Validate input\n286 |     guard !keyIdentifier.isEmpty else {\n287 |       let error=UmbraErrors.Crypto.Core.invalidInput(\"Empty key identifier\")\n    |                 `- error: module 'UmbraErrors' has no member named 'Crypto'\n288 |       await cryptoLogger.logOperationError(\n289 |         operation: \"exportKey\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:308:25: error: module 'UmbraErrors' has no member named 'Crypto'\n306 | \n307 |       case let .failure(error):\n308 |         let cryptoError=UmbraErrors.Crypto.Core.keyError(\"Failed to export key: \\(error)\")\n    |                         `- error: module 'UmbraErrors' has no member named 'Crypto'\n309 |         await cryptoLogger.logOperationError(\n310 |           operation: \"exportKey\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:333:64: error: value of type 'SecureBytes' has no member 'bytes'\n331 |       operation: \"importKey\",\n332 |       additionalContext: LogMetadataDTOCollection()\n333 |         .withPrivate(key: \"keyDataSize\", value: String(keyData.bytes.count))\n    |                                                                `- error: value of type 'SecureBytes' has no member 'bytes'\n334 |         .withPrivate(key: \"algorithm\", value: metadata.algorithm.rawValue)\n335 |     )\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:355:29: error: module 'UmbraErrors' has no member named 'Crypto'\n353 | \n354 |           case let .failure(error):\n355 |             let cryptoError=UmbraErrors.Crypto.Core.keyError(\n    |                             `- error: module 'UmbraErrors' has no member named 'Crypto'\n356 |               \"Failed to store imported key: \\(error)\"\n357 |             )\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:392:17: error: module 'UmbraErrors' has no member named 'Crypto'\n390 |     // Validate input\n391 |     guard !keyIdentifier.isEmpty else {\n392 |       let error=UmbraErrors.Crypto.Core.invalidInput(\"Empty key identifier\")\n    |                 `- error: module 'UmbraErrors' has no member named 'Crypto'\n393 |       await cryptoLogger.logOperationError(\n394 |         operation: \"deleteKey\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:413:25: error: module 'UmbraErrors' has no member named 'Crypto'\n411 | \n412 |       case let .failure(error):\n413 |         let cryptoError=UmbraErrors.Crypto.Core.keyError(\"Failed to delete key: \\(error)\")\n    |                         `- error: module 'UmbraErrors' has no member named 'Crypto'\n414 |         await cryptoLogger.logOperationError(\n415 |           operation: \"deleteKey\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:443:58: error: value of type 'SecureBytes' has no member 'bytes'\n441 |       additionalContext: LogMetadataDTOCollection()\n442 |         .withPrivate(key: \"keyIdentifier\", value: keyIdentifier)\n443 |         .withPrivate(key: \"dataSize\", value: String(data.bytes.count))\n    |                                                          `- error: value of type 'SecureBytes' has no member 'bytes'\n444 |     )\n445 | \n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:448:17: error: module 'UmbraErrors' has no member named 'Crypto'\n446 |     // Validate input\n447 |     guard !keyIdentifier.isEmpty else {\n448 |       let error=UmbraErrors.Crypto.Core.invalidInput(\"Empty key identifier\")\n    |                 `- error: module 'UmbraErrors' has no member named 'Crypto'\n449 |       await cryptoLogger.logOperationError(\n450 |         operation: \"sign\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:481:25: error: module 'UmbraErrors' has no member named 'Crypto'\n479 | \n480 |       case let .failure(error):\n481 |         let cryptoError=UmbraErrors.Crypto.Core.keyError(\"Failed to retrieve key: \\(error)\")\n    |                         `- error: module 'UmbraErrors' has no member named 'Crypto'\n482 |         await cryptoLogger.logOperationError(\n483 |           operation: \"sign\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:511:58: error: value of type 'SecureBytes' has no member 'bytes'\n509 |       additionalContext: LogMetadataDTOCollection()\n510 |         .withPrivate(key: \"keyIdentifier\", value: keyIdentifier)\n511 |         .withPrivate(key: \"dataSize\", value: String(data.bytes.count))\n    |                                                          `- error: value of type 'SecureBytes' has no member 'bytes'\n512 |         .withPrivate(key: \"signatureSize\", value: String(signature.bytes.count))\n513 |     )\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:512:68: error: value of type 'SecureBytes' has no member 'bytes'\n510 |         .withPrivate(key: \"keyIdentifier\", value: keyIdentifier)\n511 |         .withPrivate(key: \"dataSize\", value: String(data.bytes.count))\n512 |         .withPrivate(key: \"signatureSize\", value: String(signature.bytes.count))\n    |                                                                    `- error: value of type 'SecureBytes' has no member 'bytes'\n513 |     )\n514 | \n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:517:17: error: module 'UmbraErrors' has no member named 'Crypto'\n515 |     // Validate input\n516 |     guard !keyIdentifier.isEmpty else {\n517 |       let error=UmbraErrors.Crypto.Core.invalidInput(\"Empty key identifier\")\n    |                 `- error: module 'UmbraErrors' has no member named 'Crypto'\n518 |       await cryptoLogger.logOperationError(\n519 |         operation: \"verify\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:555:25: error: module 'UmbraErrors' has no member named 'Crypto'\n553 | \n554 |       case let .failure(error):\n555 |         let cryptoError=UmbraErrors.Crypto.Core.keyError(\"Failed to retrieve key: \\(error)\")\n    |                         `- error: module 'UmbraErrors' has no member named 'Crypto'\n556 |         await cryptoLogger.logOperationError(\n557 |           operation: \"verify\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:584:17: error: module 'UmbraErrors' has no member named 'Crypto'\n582 |     // Validate input\n583 |     guard length > 0 else {\n584 |       let error=UmbraErrors.Crypto.Core.invalidInput(\"Length must be greater than zero\")\n    |                 `- error: module 'UmbraErrors' has no member named 'Crypto'\n585 |       await cryptoLogger.logOperationError(\n586 |         operation: \"generateRandomBytes\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:629:58: error: value of type 'SecureBytes' has no member 'bytes'\n627 |       operation: \"hash\",\n628 |       additionalContext: LogMetadataDTOCollection()\n629 |         .withPrivate(key: \"dataSize\", value: String(data.bytes.count))\n    |                                                          `- error: value of type 'SecureBytes' has no member 'bytes'\n630 |         .withPublic(key: \"algorithm\", value: algorithm.rawValue)\n631 |     )\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:674:21: error: extraneous argument labels 'level:message:' in call\n672 |     additionalContext: LogMetadataDTOCollection?=nil\n673 |   ) async {\n674 |     await logger.log(\n    |                     `- error: extraneous argument labels 'level:message:' in call\n675 |       level: .debug,\n676 |       message: \"Starting crypto operation: \\(operation)\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:677:34: error: missing argument for parameter 'source' in call\n675 |       level: .debug,\n676 |       message: \"Starting crypto operation: \\(operation)\",\n677 |       metadata: additionalContext\n    |                                  `- error: missing argument for parameter 'source' in call\n678 |     )\n679 |   }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:60:15: note: 'log(_:_:metadata:source:)' declared here\n 58 |   ///   - metadata: Optional metadata\n 59 |   ///   - source: Source component identifier\n 60 |   public func log(\n    |               `- note: 'log(_:_:metadata:source:)' declared here\n 61 |     _ level: LogLevel,\n 62 |     _ message: String,\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:677:17: error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'\n675 |       level: .debug,\n676 |       message: \"Starting crypto operation: \\(operation)\",\n677 |       metadata: additionalContext\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'\n678 |     )\n679 |   }\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:685:21: error: extraneous argument labels 'level:message:' in call\n683 |     additionalContext: LogMetadataDTOCollection?=nil\n684 |   ) async {\n685 |     await logger.log(\n    |                     `- error: extraneous argument labels 'level:message:' in call\n686 |       level: .debug,\n687 |       message: \"Successfully completed crypto operation: \\(operation)\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:688:34: error: missing argument for parameter 'source' in call\n686 |       level: .debug,\n687 |       message: \"Successfully completed crypto operation: \\(operation)\",\n688 |       metadata: additionalContext\n    |                                  `- error: missing argument for parameter 'source' in call\n689 |     )\n690 |   }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:60:15: note: 'log(_:_:metadata:source:)' declared here\n 58 |   ///   - metadata: Optional metadata\n 59 |   ///   - source: Source component identifier\n 60 |   public func log(\n    |               `- note: 'log(_:_:metadata:source:)' declared here\n 61 |     _ level: LogLevel,\n 62 |     _ message: String,\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:688:17: error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'\n686 |       level: .debug,\n687 |       message: \"Successfully completed crypto operation: \\(operation)\",\n688 |       metadata: additionalContext\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection?' to expected argument type 'PrivacyMetadata?'\n689 |     )\n690 |   }\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:700:21: error: extraneous argument labels 'level:message:' in call\n698 |     context=context.withPrivate(key: \"error\", value: \"\\(error)\")\n699 | \n700 |     await logger.log(\n    |                     `- error: extraneous argument labels 'level:message:' in call\n701 |       level: .error,\n702 |       message: \"Failed crypto operation: \\(operation)\",\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:703:24: error: missing argument for parameter 'source' in call\n701 |       level: .error,\n702 |       message: \"Failed crypto operation: \\(operation)\",\n703 |       metadata: context\n    |                        `- error: missing argument for parameter 'source' in call\n704 |     )\n705 |   }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/LoggingProtocol.swift:60:15: note: 'log(_:_:metadata:source:)' declared here\n 58 |   ///   - metadata: Optional metadata\n 59 |   ///   - source: Source component identifier\n 60 |   public func log(\n    |               `- note: 'log(_:_:metadata:source:)' declared here\n 61 |     _ level: LogLevel,\n 62 |     _ message: String,\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceActor.swift:703:17: error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n701 |       level: .error,\n702 |       message: \"Failed crypto operation: \\(operation)\",\n703 |       metadata: context\n    |                 `- error: cannot convert value of type 'LogMetadataDTOCollection' to expected argument type 'PrivacyMetadata'\n704 |     )\n705 |   }\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:55:21: error: cannot find type 'CryptoProviderProtocol' in scope\n53 |    */\n54 |   public static func create(\n55 |     cryptoProvider: CryptoProviderProtocol,\n   |                     `- error: cannot find type 'CryptoProviderProtocol' in scope\n56 |     keyStore: KeyStoreProtocol,\n57 |     logger: LoggingProtocol\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:56:15: error: cannot find type 'KeyStoreProtocol' in scope\n54 |   public static func create(\n55 |     cryptoProvider: CryptoProviderProtocol,\n56 |     keyStore: KeyStoreProtocol,\n   |               `- error: cannot find type 'KeyStoreProtocol' in scope\n57 |     logger: LoggingProtocol\n58 |   ) async -> CryptoXPCServiceActor {\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:30:30: error: cannot find 'CryptoProviderFactory' in scope\n28 |   ) async -> CryptoXPCServiceActor {\n29 |     // Create dependencies\n30 |     let cryptoProvider=await CryptoProviderFactory.createDefault(logger: logger)\n   |                              `- error: cannot find 'CryptoProviderFactory' in scope\n31 |     let keyStore=await KeyStoreFactory.createDefault(logger: logger)\n32 | \n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:31:24: error: cannot find 'KeyStoreFactory' in scope\n29 |     // Create dependencies\n30 |     let cryptoProvider=await CryptoProviderFactory.createDefault(logger: logger)\n31 |     let keyStore=await KeyStoreFactory.createDefault(logger: logger)\n   |                        `- error: cannot find 'KeyStoreFactory' in scope\n32 | \n33 |     // Create and return service actor\n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:81:30: error: cannot find 'CryptoProviderFactory' in scope\n79 |   ) async -> CryptoXPCServiceActor {\n80 |     // Create test dependencies\n81 |     let cryptoProvider=await CryptoProviderFactory.createForTesting(logger: logger)\n   |                              `- error: cannot find 'CryptoProviderFactory' in scope\n82 |     let keyStore=await KeyStoreFactory.createInMemory(logger: logger)\n83 | \n\npackages/UmbraImplementations/Sources/CryptoXPCServices/CryptoXPCServiceFactory.swift:82:24: error: cannot find 'KeyStoreFactory' in scope\n80 |     // Create test dependencies\n81 |     let cryptoProvider=await CryptoProviderFactory.createForTesting(logger: logger)\n82 |     let keyStore=await KeyStoreFactory.createInMemory(logger: logger)\n   |                        `- error: cannot find 'KeyStoreFactory' in scope\n83 | \n84 |     // Create and return service actor\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/APIServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/APIServices:APIServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/APIServices:APIServices) \n  (cd /Users/mpy/.bazel/execroot/_main && \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/APIServices/APIServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:1:8: error: no such module 'APIInterfaces'\n  1 | import APIInterfaces\n    |        `- error: no such module 'APIInterfaces'\n  2 | import LoggingInterfaces\n  3 | import SecurityCoreInterfaces\npackages/UmbraImplementations/Sources/APIServices/APIServiceActor.swift:1:8: error: no such module 'APIInterfaces'\n  1 | import APIInterfaces\n    |        `- error: no such module 'APIInterfaces'\n  2 | import LoggingInterfaces\n  3 | import SecurityCoreInterfaces\n[287 / 293] Compiling Swift module //packages/UmbraImplementations/Sources/ResticServices:ResticServices; 1s disk-cache, worker\nERROR: /Users/mpy/CascadeProjects/UmbraCore/packages/UmbraImplementations/Sources/ResticServices/BUILD.bazel:3:20: Compiling Swift module //packages/UmbraImplementations/Sources/ResticServices:ResticServices failed: (Exit 1): worker failed: error executing SwiftCompile command (from target //packages/UmbraImplementations/Sources/ResticServices:ResticServices) \n  (cd /Users/mpy/.bazel/execroot/_main && \\\n  exec env - \\\n    APPLE_SDK_PLATFORM=MacOSX \\\n    APPLE_SDK_VERSION_OVERRIDE=15.4 \\\n    CC=clang \\\n    PATH=/Users/mpy/Library/Caches/bazelisk/downloads/sha256/ac72ad67f7a8c6b18bf605d8602425182b417de4369715bf89146daf62f7ae48/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/Apple/usr/bin:/usr/local/go/bin:/Users/mpy/.rbenv/bin:/Users/mpy/.codeium/windsurf/bin:/opt/homebrew/opt/node@18/bin:/opt/homebrew/opt/node@20/bin:/opt/anaconda3/bin:/opt/anaconda3/condabin:/Users/mpy/.docker/bin:/opt/homebrew/opt/openjdk/bin:/Users/mpy/bin:/Users/mpy/.cargo/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts:/Users/mpy/.fzf/bin:/Users/mpy/Library/Python/3.8/bin:/Users/mpy/go/bin:/Users/mpy/.scripts \\\n    XCODE_VERSION_OVERRIDE=16.3.0.16E140 \\\n  bazel-out/darwin_arm64-opt-exec-ST-d57f47055a04/bin/external/rules_swift+/tools/worker/worker swiftc @bazel-out/darwin_arm64-fastbuild/bin/packages/UmbraImplementations/Sources/ResticServices/ResticServices.swiftmodule-0.params)\n# Configuration: 76a1bf3a80f2d50513004915454165d2f164db794b63e4666809cbd93e1abeaa\n# Execution platform: @@platforms//host:host\nerror: emit-module command failed with exit code 1 (use -v to see invocation)\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:15:14: error: actor-isolated property 'defaultRepository' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'\n  8 | /// This actor-based implementation provides proper isolation for concurrent operations,\n  9 | /// ensuring thread safety while maintaining high performance for Restic operations.\n 10 | @preconcurrency public actor ResticServiceImpl: ResticServiceProtocol {\n    |                                                 `- note: add '@preconcurrency' to the 'ResticServiceProtocol' conformance to defer isolation checking to run time\n 11 |   /// The path to the Restic executable\n 12 |   public let executablePath: String\n 13 | \n 14 |   /// The default repository location, if set\n 15 |   public var defaultRepository: String? {\n    |              `- error: actor-isolated property 'defaultRepository' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'\n 16 |     get { _defaultRepository }\n 17 |     set { _defaultRepository = newValue }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:35:7: note: requirement 'defaultRepository' declared here\n33 | \n34 |   /// The default repository location, if set\n35 |   var defaultRepository: String? { get set }\n   |       `- note: requirement 'defaultRepository' declared here\n36 | \n37 |   /// The default repository password, if set\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:22:14: error: actor-isolated property 'defaultPassword' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'\n 20 | \n 21 |   /// The default repository password, if set\n 22 |   public var defaultPassword: String? {\n    |              `- error: actor-isolated property 'defaultPassword' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'\n 23 |     get { _defaultPassword }\n 24 |     set { _defaultPassword = newValue }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:38:7: note: requirement 'defaultPassword' declared here\n36 | \n37 |   /// The default repository password, if set\n38 |   var defaultPassword: String? { get set }\n   |       `- note: requirement 'defaultPassword' declared here\n39 | \n40 |   /// Progress reporting delegate for receiving operation updates\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:29:14: error: actor-isolated property 'progressDelegate' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'\n 27 | \n 28 |   /// Progress reporting delegate for receiving operation updates\n 29 |   public var progressDelegate: (any ResticProgressReporting)? {\n    |              `- error: actor-isolated property 'progressDelegate' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'\n 30 |     get { _progressDelegate }\n 31 |     set { _progressDelegate = newValue }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:41:7: note: requirement 'progressDelegate' declared here\n39 | \n40 |   /// Progress reporting delegate for receiving operation updates\n41 |   var progressDelegate: ResticProgressReporting? { get set }\n   |       `- note: requirement 'progressDelegate' declared here\n42 | \n43 |   /// Executes a Restic command and returns its output\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:10:30: error: type 'ResticServiceImpl' does not conform to protocol 'ResticServiceProtocol'\n  8 | /// This actor-based implementation provides proper isolation for concurrent operations,\n  9 | /// ensuring thread safety while maintaining high performance for Restic operations.\n 10 | @preconcurrency public actor ResticServiceImpl: ResticServiceProtocol {\n    |                              |- error: type 'ResticServiceImpl' does not conform to protocol 'ResticServiceProtocol'\n    |                              `- note: add stubs for conformance\n 11 |   /// The path to the Restic executable\n 12 |   public let executablePath: String\n    :\n277 |   /// - Returns: The raw output string from the command\n278 |   /// - Throws: ResticError if the command fails\n279 |   public func execute(_ command: ResticCommand) async throws -> String {\n    |               `- note: candidate has non-matching type '(ResticCommand) async throws -> String'\n280 |     try command.validate()\n281 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:47:8: note: protocol requires function 'execute' with type '(any ResticCommand) async throws -> String'\n45 |   /// - Returns: The command output as a string\n46 |   /// - Throws: ResticError if the command fails\n47 |   func execute(_ command: ResticCommand) async throws -> String\n   |        `- note: protocol requires function 'execute' with type '(any ResticCommand) async throws -> String'\n48 | \n49 |   /// Initialises a new repository\n   :\n53 |   /// - Returns: Result of the initialisation\n54 |   /// - Throws: ResticError if initialisation fails\n55 |   func initialiseRepository(at location: String, password: String) async throws\n   |        `- note: protocol requires function 'initialiseRepository(at:password:)' with type '(String, String) async throws -> ResticCommandResult'\n56 |     -> ResticCommandResult\n57 | \n   :\n77 |   /// - Returns: Result with backup information\n78 |   /// - Throws: ResticError if the backup fails\n79 |   func backup(paths: [String], tag: String?, excludes: [String]?) async throws\n   |        `- note: protocol requires function 'backup(paths:tag:excludes:)' with type '([String], String?, [String]?) async throws -> ResticCommandResult'\n80 |     -> ResticCommandResult\n81 | \n   :\n87 |   /// - Returns: Result with restore information\n88 |   /// - Throws: ResticError if the restore fails\n89 |   func restore(snapshot: String, to target: String, paths: [String]?) async throws\n   |        `- note: protocol requires function 'restore(snapshot:to:paths:)' with type '(String, String, [String]?) async throws -> ResticCommandResult'\n90 |     -> ResticCommandResult\n91 | \n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:64:35: error: incorrect argument label in call (have 'logger:', expected 'underlyingLogger:')\n 62 |     _defaultPassword=nil\n 63 |     _progressDelegate=progressDelegate\n 64 |     self.resticLogger=ResticLogger(logger: logger)\n    |                                   `- error: incorrect argument label in call (have 'logger:', expected 'underlyingLogger:')\n 65 |     self.credentialManager=credentialManager\n 66 | \n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:85:5: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n 83 |     }\n 84 | \n 85 |     await resticLogger.info(\n    |     `- error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n 86 |       \"Initialised ResticServiceImpl with executable: \\(executablePath)\",\n 87 |       metadata: [\n\npackages/UmbraImplementations/Sources/ResticServices/Logging/ResticLogger.swift:12:15: error: type 'ResticLogger' does not conform to protocol 'DomainLogger'\n 10 | /// with enhanced privacy controls and contextual information following the\n 11 | /// Alpha Dot Five architecture.\n 12 | public struct ResticLogger: LoggingInterfaces.DomainLogger, CoreLoggingProtocol, PrivacyAwareLoggingProtocol {\n    |               `- error: type 'ResticLogger' does not conform to protocol 'DomainLogger'\n 13 |   /// The domain name for this logger\n 14 |   public let domainName: String = \"ResticService\"\n\npackages/UmbraImplementations/Sources/ResticServices/Logging/ResticLogger.swift:12:15: error: type 'ResticLogger' does not conform to protocol 'PrivacyAwareLoggingProtocol'\n 10 | /// with enhanced privacy controls and contextual information following the\n 11 | /// Alpha Dot Five architecture.\n 12 | public struct ResticLogger: LoggingInterfaces.DomainLogger, CoreLoggingProtocol, PrivacyAwareLoggingProtocol {\n    |               |- error: type 'ResticLogger' does not conform to protocol 'PrivacyAwareLoggingProtocol'\n    |               `- note: add stubs for conformance\n 13 |   /// The domain name for this logger\n 14 |   public let domainName: String = \"ResticService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/DomainLogger.swift:42:8: note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'\n40 |   ///   - context: Domain-specific context for the log\n41 |   ///   - privacyLevel: The privacy level to apply to the error details\n42 |   func logError(\n   |        `- note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'\n43 |     _ error: Error,\n44 |     context: LogContextDTO,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/PrivacyAwareLoggingProtocol.swift:36:8: note: protocol requires function 'logSensitive(_:_:sensitiveValues:source:)' with type '(LogLevel, String, LogMetadata, String) async -> ()'\n34 |   ///   - sensitiveValues: Sensitive values that should be handled with privacy controls\n35 |   ///   - source: The component that generated the log\n36 |   func logSensitive(\n   |        `- note: protocol requires function 'logSensitive(_:_:sensitiveValues:source:)' with type '(LogLevel, String, LogMetadata, String) async -> ()'\n37 |     _ level: LogLevel,\n38 |     _ message: String,\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:425:8: error: unary operator cannot be separated from its operand\n423 | \n424 |     // Store the credentials securely for future access\n425 |     if ! await credentialManager.hasCredentials(for: location) {\n    |        `- error: unary operator cannot be separated from its operand\n426 |       try await credentialManager.storeCredentials(\n427 |         ResticCredentials(\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:425:16: error: expected '{' after 'if' condition\n423 | \n424 |     // Store the credentials securely for future access\n425 |     if ! await credentialManager.hasCredentials(for: location) {\n    |                `- error: expected '{' after 'if' condition\n426 |       try await credentialManager.storeCredentials(\n427 |         ResticCredentials(\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:618:7: error: unary operator cannot be separated from its operand\n616 |     if\n617 |       let repoPassword,\n618 |       ! await credentialManager.hasCredentials(for: repoLocation)\n    |       `- error: unary operator cannot be separated from its operand\n619 |     {\n620 |       try? await credentialManager.storeCredentials(\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:618:15: error: expected '{' after 'if' condition\n616 |     if\n617 |       let repoPassword,\n618 |       ! await credentialManager.hasCredentials(for: repoLocation)\n    |               `- error: expected '{' after 'if' condition\n619 |     {\n620 |       try? await credentialManager.storeCredentials(\n\npackages/UmbraImplementations/Sources/ResticServices/Credentials/KeychainResticCredentialManager.swift:52:62: error: incorrect argument label in call (have 'forAccount:serviceIdentifier:', expected 'forAccount:keyIdentifier:')\n 50 |     \n 51 |     do {\n 52 |       let secret = try await keychain.retrieveEncryptedSecret(\n    |                                                              `- error: incorrect argument label in call (have 'forAccount:serviceIdentifier:', expected 'forAccount:keyIdentifier:')\n 53 |         forAccount: makeAccountIdentifier(for: repository),\n 54 |         serviceIdentifier: serviceIdentifier\n\npackages/UmbraImplementations/Sources/ResticServices/Credentials/KeychainResticCredentialManager.swift:142:26: error: value of type 'any KeychainSecurityProtocol' has no member 'removeItem'\n140 |     \n141 |     do {\n142 |       try await keychain.removeItem(\n    |                          `- error: value of type 'any KeychainSecurityProtocol' has no member 'removeItem'\n143 |         forAccount: makeAccountIdentifier(for: repository),\n144 |         serviceIdentifier: serviceIdentifier\n\npackages/UmbraImplementations/Sources/ResticServices/Credentials/KeychainResticCredentialManager.swift:173:51: error: incorrect argument label in call (have 'forAccount:serviceIdentifier:', expected 'forAccount:keyIdentifier:')\n171 |   public func hasCredentials(for repository: String) async -> Bool {\n172 |     do {\n173 |       _=try await keychain.retrieveEncryptedSecret(\n    |                                                   `- error: incorrect argument label in call (have 'forAccount:serviceIdentifier:', expected 'forAccount:keyIdentifier:')\n174 |         forAccount: makeAccountIdentifier(for: repository),\n175 |         serviceIdentifier: serviceIdentifier\n\npackages/UmbraImplementations/Sources/ResticServices/Factory/ResticServiceFactory.swift:52:11: error: 'async' property access in a function that does not support concurrency\n 36 |   /// - Returns: A new ResticService instance\n 37 |   /// - Throws: ResticError if the service cannot be created\n 38 |   public func createResticService(\n    |               `- note: add 'async' to function 'createResticService(executablePath:defaultRepository:defaultPassword:progressDelegate:)' to make it asynchronous\n 39 |     executablePath: String,\n 40 |     defaultRepository: String? = nil,\n    :\n 50 |     // If default password is provided, store it for the default repository\n 51 |     if let defaultRepository = defaultRepository, let defaultPassword = defaultPassword {\n 52 |       try Task {\n    |           `- error: 'async' property access in a function that does not support concurrency\n 53 |         if !(await credentialManager.hasCredentials(for: defaultRepository)) {\n 54 |           try await credentialManager.storeCredentials(\n\npackages/UmbraImplementations/Sources/ResticServices/Factory/ResticServiceFactory.swift:169:11: error: 'async' property access in a function that does not support concurrency\n156 |   /// - Returns: A new ResticService instance\n157 |   /// - Throws: ResticError if the service cannot be created\n158 |   public func createSimpleResticService(\n    |               `- note: add 'async' to function 'createSimpleResticService(executablePath:defaultRepository:defaultPassword:progressDelegate:)' to make it asynchronous\n159 |     executablePath: String,\n160 |     defaultRepository: String? = nil,\n    :\n167 |     // If default password is provided, store it for the default repository\n168 |     if let defaultRepository = defaultRepository, let defaultPassword = defaultPassword {\n169 |       try Task {\n    |           `- error: 'async' property access in a function that does not support concurrency\n170 |         if !(await credentialManager.hasCredentials(for: defaultRepository)) {\n171 |           try await credentialManager.storeCredentials(\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticCommand.swift:113:13: error: member 'init(rawValue:)' expects argument of type 'String'\n111 |           throw ResticError.missingParameter(\"Target path is required for restore\")\n112 |         }\n113 |       case .init:\n    |             `- error: member 'init(rawValue:)' expects argument of type 'String'\n114 |         // The repository might not exist yet for init, so no repository validation\n115 |         break\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:15:14: error: actor-isolated property 'defaultRepository' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'\n  8 | /// This actor-based implementation provides proper isolation for concurrent operations,\n  9 | /// ensuring thread safety while maintaining high performance for Restic operations.\n 10 | @preconcurrency public actor ResticServiceImpl: ResticServiceProtocol {\n    |                                                 `- note: add '@preconcurrency' to the 'ResticServiceProtocol' conformance to defer isolation checking to run time\n 11 |   /// The path to the Restic executable\n 12 |   public let executablePath: String\n 13 | \n 14 |   /// The default repository location, if set\n 15 |   public var defaultRepository: String? {\n    |              `- error: actor-isolated property 'defaultRepository' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'\n 16 |     get { _defaultRepository }\n 17 |     set { _defaultRepository = newValue }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:35:7: note: requirement 'defaultRepository' declared here\n33 | \n34 |   /// The default repository location, if set\n35 |   var defaultRepository: String? { get set }\n   |       `- note: requirement 'defaultRepository' declared here\n36 | \n37 |   /// The default repository password, if set\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:22:14: error: actor-isolated property 'defaultPassword' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'\n 20 | \n 21 |   /// The default repository password, if set\n 22 |   public var defaultPassword: String? {\n    |              `- error: actor-isolated property 'defaultPassword' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'\n 23 |     get { _defaultPassword }\n 24 |     set { _defaultPassword = newValue }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:38:7: note: requirement 'defaultPassword' declared here\n36 | \n37 |   /// The default repository password, if set\n38 |   var defaultPassword: String? { get set }\n   |       `- note: requirement 'defaultPassword' declared here\n39 | \n40 |   /// Progress reporting delegate for receiving operation updates\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:29:14: error: actor-isolated property 'progressDelegate' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'\n 27 | \n 28 |   /// Progress reporting delegate for receiving operation updates\n 29 |   public var progressDelegate: (any ResticProgressReporting)? {\n    |              `- error: actor-isolated property 'progressDelegate' cannot be used to satisfy nonisolated requirement from protocol 'ResticServiceProtocol'\n 30 |     get { _progressDelegate }\n 31 |     set { _progressDelegate = newValue }\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:41:7: note: requirement 'progressDelegate' declared here\n39 | \n40 |   /// Progress reporting delegate for receiving operation updates\n41 |   var progressDelegate: ResticProgressReporting? { get set }\n   |       `- note: requirement 'progressDelegate' declared here\n42 | \n43 |   /// Executes a Restic command and returns its output\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:10:30: error: type 'ResticServiceImpl' does not conform to protocol 'ResticServiceProtocol'\n  8 | /// This actor-based implementation provides proper isolation for concurrent operations,\n  9 | /// ensuring thread safety while maintaining high performance for Restic operations.\n 10 | @preconcurrency public actor ResticServiceImpl: ResticServiceProtocol {\n    |                              |- error: type 'ResticServiceImpl' does not conform to protocol 'ResticServiceProtocol'\n    |                              `- note: add stubs for conformance\n 11 |   /// The path to the Restic executable\n 12 |   public let executablePath: String\n    :\n277 |   /// - Returns: The raw output string from the command\n278 |   /// - Throws: ResticError if the command fails\n279 |   public func execute(_ command: ResticCommand) async throws -> String {\n    |               `- note: candidate has non-matching type '(ResticCommand) async throws -> String'\n280 |     try command.validate()\n281 | \n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/ResticInterfaces/ResticServiceProtocol.swift:47:8: note: protocol requires function 'execute' with type '(any ResticCommand) async throws -> String'\n45 |   /// - Returns: The command output as a string\n46 |   /// - Throws: ResticError if the command fails\n47 |   func execute(_ command: ResticCommand) async throws -> String\n   |        `- note: protocol requires function 'execute' with type '(any ResticCommand) async throws -> String'\n48 | \n49 |   /// Initialises a new repository\n   :\n53 |   /// - Returns: Result of the initialisation\n54 |   /// - Throws: ResticError if initialisation fails\n55 |   func initialiseRepository(at location: String, password: String) async throws\n   |        `- note: protocol requires function 'initialiseRepository(at:password:)' with type '(String, String) async throws -> ResticCommandResult'\n56 |     -> ResticCommandResult\n57 | \n   :\n77 |   /// - Returns: Result with backup information\n78 |   /// - Throws: ResticError if the backup fails\n79 |   func backup(paths: [String], tag: String?, excludes: [String]?) async throws\n   |        `- note: protocol requires function 'backup(paths:tag:excludes:)' with type '([String], String?, [String]?) async throws -> ResticCommandResult'\n80 |     -> ResticCommandResult\n81 | \n   :\n87 |   /// - Returns: Result with restore information\n88 |   /// - Throws: ResticError if the restore fails\n89 |   func restore(snapshot: String, to target: String, paths: [String]?) async throws\n   |        `- note: protocol requires function 'restore(snapshot:to:paths:)' with type '(String, String, [String]?) async throws -> ResticCommandResult'\n90 |     -> ResticCommandResult\n91 | \n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:64:35: error: incorrect argument label in call (have 'logger:', expected 'underlyingLogger:')\n 62 |     _defaultPassword=nil\n 63 |     _progressDelegate=progressDelegate\n 64 |     self.resticLogger=ResticLogger(logger: logger)\n    |                                   `- error: incorrect argument label in call (have 'logger:', expected 'underlyingLogger:')\n 65 |     self.credentialManager=credentialManager\n 66 | \n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:85:5: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n 83 |     }\n 84 | \n 85 |     await resticLogger.info(\n    |     `- error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n 86 |       \"Initialised ResticServiceImpl with executable: \\(executablePath)\",\n 87 |       metadata: [\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:304:7: error: initializer for conditional binding must have Optional type, not 'String'\n302 |       environment[\"RESTIC_PASSWORD\"]=password\n303 |     } else if\n304 |       let repository=command.repository,\n    |       `- error: initializer for conditional binding must have Optional type, not 'String'\n305 |       let credentials=try await credentialManager.getCredentials(for: repository)\n306 |     {\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:305:7: error: initializer for conditional binding must have Optional type, not 'ResticCredentials'\n303 |     } else if\n304 |       let repository=command.repository,\n305 |       let credentials=try await credentialManager.getCredentials(for: repository)\n    |       `- error: initializer for conditional binding must have Optional type, not 'ResticCredentials'\n306 |     {\n307 |       environment[\"RESTIC_PASSWORD\"]=credentials.password\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:330:24: error: extra argument 'privacyLevel' in call\n328 |       await resticLogger.error(\n329 |         \"Restic command failed to launch\",\n330 |         privacyLevel: .public,\n    |                        `- error: extra argument 'privacyLevel' in call\n331 |         source: \"ResticService\",\n332 |         metadata: PrivacyMetadata([\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:330:24: error: cannot infer contextual base in reference to member 'public'\n328 |       await resticLogger.error(\n329 |         \"Restic command failed to launch\",\n330 |         privacyLevel: .public,\n    |                        `- error: cannot infer contextual base in reference to member 'public'\n331 |         source: \"ResticService\",\n332 |         metadata: PrivacyMetadata([\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:415:16: error: member 'init(rawValue:)' expects argument of type 'String'\n413 | \n414 |     let command=ResticCommand(\n415 |       action: .init,\n    |                `- error: member 'init(rawValue:)' expects argument of type 'String'\n416 |       repository: location,\n417 |       password: repoPassword\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:425:10: error: cannot find 'await' in scope\n423 | \n424 |     // Store the credentials securely for future access\n425 |     if ! await credentialManager.hasCredentials(for: location) {\n    |          `- error: cannot find 'await' in scope\n426 |       try await credentialManager.storeCredentials(\n427 |         ResticCredentials(\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:476:34: error: cannot convert value of type 'ResticCheckCommandImpl' to expected argument type 'ResticCommand'\n474 |     )\n475 | \n476 |     let output=try await execute(command)\n    |                                  `- error: cannot convert value of type 'ResticCheckCommandImpl' to expected argument type 'ResticCommand'\n477 |     let duration=Date().timeIntervalSince(startTime)\n478 | \n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:517:34: error: cannot convert value of type 'ResticSnapshotsCommandImpl' to expected argument type 'ResticCommand'\n515 |     )\n516 | \n517 |     let output=try await execute(command)\n    |                                  `- error: cannot convert value of type 'ResticSnapshotsCommandImpl' to expected argument type 'ResticCommand'\n518 |     let duration=Date().timeIntervalSince(startTime)\n519 | \n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:565:53: error: value of type 'ResticError' has no member 'logDescription'\n563 |           metadata: PrivacyMetadata([\n564 |             \"repository\": (value: repoLocation, privacy: .private),\n565 |             \"errorDescription\": (value: resticError.logDescription, privacy: .sensitive)\n    |                                                     `- error: value of type 'ResticError' has no member 'logDescription'\n566 |           ]),\n567 |           source: \"ResticService.Backup\"\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:603:17: error: extra argument 'metadata' in call\n601 |     await resticLogger.info(\n602 |       \"Starting backup operation\",\n603 |       metadata: [\n    |                 `- error: extra argument 'metadata' in call\n604 |         \"repository\": .string(repoLocation),\n605 |         \"paths\": .array(paths.map { .string($0) }),\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:604:24: error: type 'Any' has no member 'string'\n602 |       \"Starting backup operation\",\n603 |       metadata: [\n604 |         \"repository\": .string(repoLocation),\n    |                        `- error: type 'Any' has no member 'string'\n605 |         \"paths\": .array(paths.map { .string($0) }),\n606 |         \"excludes\": .array(excludes.map { .string($0) })\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:605:19: error: type 'Any' has no member 'array'\n603 |       metadata: [\n604 |         \"repository\": .string(repoLocation),\n605 |         \"paths\": .array(paths.map { .string($0) }),\n    |                   `- error: type 'Any' has no member 'array'\n606 |         \"excludes\": .array(excludes.map { .string($0) })\n607 |       ],\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:605:38: error: cannot infer contextual base in reference to member 'string'\n603 |       metadata: [\n604 |         \"repository\": .string(repoLocation),\n605 |         \"paths\": .array(paths.map { .string($0) }),\n    |                                      `- error: cannot infer contextual base in reference to member 'string'\n606 |         \"excludes\": .array(excludes.map { .string($0) })\n607 |       ],\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:606:22: error: type 'Any' has no member 'array'\n604 |         \"repository\": .string(repoLocation),\n605 |         \"paths\": .array(paths.map { .string($0) }),\n606 |         \"excludes\": .array(excludes.map { .string($0) })\n    |                      `- error: type 'Any' has no member 'array'\n607 |       ],\n608 |       context: logContext\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:606:44: error: cannot infer contextual base in reference to member 'string'\n604 |         \"repository\": .string(repoLocation),\n605 |         \"paths\": .array(paths.map { .string($0) }),\n606 |         \"excludes\": .array(excludes.map { .string($0) })\n    |                                            `- error: cannot infer contextual base in reference to member 'string'\n607 |       ],\n608 |       context: logContext\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:618:9: error: cannot find 'await' in scope\n616 |     if\n617 |       let repoPassword,\n618 |       ! await credentialManager.hasCredentials(for: repoLocation)\n    |         `- error: cannot find 'await' in scope\n619 |     {\n620 |       try? await credentialManager.storeCredentials(\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:687:53: error: value of type 'ResticError' has no member 'logDescription'\n685 |           metadata: PrivacyMetadata([\n686 |             \"repository\": (value: repoLocation, privacy: .private),\n687 |             \"errorDescription\": (value: resticError.logDescription, privacy: .sensitive)\n    |                                                     `- error: value of type 'ResticError' has no member 'logDescription'\n688 |           ]),\n689 |           source: \"ResticService.Restore\"\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:720:31: error: cannot use optional chaining on non-optional value of type '[String]'\n718 |         \"snapshot\": (value: snapshot, privacy: .public),\n719 |         \"target\": (value: target, privacy: .public),\n720 |         \"paths\": (value: paths?.joined(separator: \", \") ?? \"all\", privacy: .public)\n    |                               `- error: cannot use optional chaining on non-optional value of type '[String]'\n721 |       ]),\n722 |       source: \"ResticService.Restore\"\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:743:31: error: cannot use optional chaining on non-optional value of type '[String]'\n741 |         \"snapshot\": (value: snapshot, privacy: .public),\n742 |         \"target\": (value: target, privacy: .public),\n743 |         \"paths\": (value: paths?.joined(separator: \", \") ?? \"all\", privacy: .public),\n    |                               `- error: cannot use optional chaining on non-optional value of type '[String]'\n744 |         \"duration\": (value: duration, privacy: .public)\n745 |       ]),\n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:785:34: error: cannot convert value of type 'ResticMaintenanceCommandImpl' to expected argument type 'ResticCommand'\n783 |     )\n784 | \n785 |     let output=try await execute(command)\n    |                                  `- error: cannot convert value of type 'ResticMaintenanceCommandImpl' to expected argument type 'ResticCommand'\n786 |     let duration=Date().timeIntervalSince(startTime)\n787 | \n\npackages/UmbraImplementations/Sources/ResticServices/Implementation/ResticServiceImpl.swift:816:34: error: for-in loop requires '() -> Dictionary<String, PrivacyMetadataValue>.Keys' to conform to 'Sequence'\n814 |     var result: [String: ResticDataValue] = [:]\n815 |     \n816 |     for (key, entry) in metadata.entries {\n    |                                  `- error: for-in loop requires '() -> Dictionary<String, PrivacyMetadataValue>.Keys' to conform to 'Sequence'\n817 |       // Extract the value and convert it to ResticDataValue\n818 |       switch entry.value {\n\npackages/UmbraImplementations/Sources/ResticServices/Logging/ResticLogger.swift:12:15: error: type 'ResticLogger' does not conform to protocol 'DomainLogger'\n 10 | /// with enhanced privacy controls and contextual information following the\n 11 | /// Alpha Dot Five architecture.\n 12 | public struct ResticLogger: LoggingInterfaces.DomainLogger, CoreLoggingProtocol, PrivacyAwareLoggingProtocol {\n    |               `- error: type 'ResticLogger' does not conform to protocol 'DomainLogger'\n 13 |   /// The domain name for this logger\n 14 |   public let domainName: String = \"ResticService\"\n\npackages/UmbraImplementations/Sources/ResticServices/Logging/ResticLogger.swift:12:15: error: type 'ResticLogger' does not conform to protocol 'PrivacyAwareLoggingProtocol'\n 10 | /// with enhanced privacy controls and contextual information following the\n 11 | /// Alpha Dot Five architecture.\n 12 | public struct ResticLogger: LoggingInterfaces.DomainLogger, CoreLoggingProtocol, PrivacyAwareLoggingProtocol {\n    |               |- error: type 'ResticLogger' does not conform to protocol 'PrivacyAwareLoggingProtocol'\n    |               `- note: add stubs for conformance\n 13 |   /// The domain name for this logger\n 14 |   public let domainName: String = \"ResticService\"\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/DomainLogger.swift:42:8: note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'\n40 |   ///   - context: Domain-specific context for the log\n41 |   ///   - privacyLevel: The privacy level to apply to the error details\n42 |   func logError(\n   |        `- note: protocol requires function 'logError(_:context:privacyLevel:)' with type '(any Error, any LogContextDTO, PrivacyClassification) async -> ()'\n43 |     _ error: Error,\n44 |     context: LogContextDTO,\n\n/Users/mpy/.bazel/execroot/_main/packages/UmbraInterfaces/Sources/LoggingInterfaces/PrivacyAwareLoggingProtocol.swift:36:8: note: protocol requires function 'logSensitive(_:_:sensitiveValues:source:)' with type '(LogLevel, String, LogMetadata, String) async -> ()'\n34 |   ///   - sensitiveValues: Sensitive values that should be handled with privacy controls\n35 |   ///   - source: The component that generated the log\n36 |   func logSensitive(\n   |        `- note: protocol requires function 'logSensitive(_:_:sensitiveValues:source:)' with type '(LogLevel, String, LogMetadata, String) async -> ()'\n37 |     _ level: LogLevel,\n38 |     _ message: String,\n\npackages/UmbraImplementations/Sources/ResticServices/Logging/ResticLogger.swift:46:35: warning: left side of nil coalescing operator '??' has non-optional type 'String', so the right side is never used\n 44 |       message,\n 45 |       metadata: context.toPrivacyMetadata(),\n 46 |       source: context.getSource() ?? domainName\n    |                                   `- warning: left side of nil coalescing operator '??' has non-optional type 'String', so the right side is never used\n 47 |     )\n 48 |   }\n\npackages/UmbraImplementations/Sources/ResticServices/Logging/ResticLogger.swift:63:7: error: cannot convert value of type 'PrivacyAnnotatedString' to expected argument type 'String'\n 61 |     await underlyingLogger.log(\n 62 |       level,\n 63 |       message,\n    |       `- error: cannot convert value of type 'PrivacyAnnotatedString' to expected argument type 'String'\n 64 |       metadata: context.toPrivacyMetadata(),\n 65 |       source: context.getSource() ?? domainName\n\npackages/UmbraImplementations/Sources/ResticServices/Logging/ResticLogger.swift:130:7: error: cannot convert value of type 'PrivacyString' to expected argument type 'String'\n128 |     await underlyingLogger.log(\n129 |       level,\n130 |       message,\n    |       `- error: cannot convert value of type 'PrivacyString' to expected argument type 'String'\n131 |       metadata: metadata,\n132 |       source: source\nINFO: Build succeeded for only 72 of 92 top-level targets\nINFO: Found 92 targets...\nINFO: Elapsed time: 9.541s, Critical Path: 9.27s\nINFO: 10 processes: 10 internal.\nERROR: Build did NOT complete successfully\n"
}