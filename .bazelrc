# Import user-specific configurations if present
try-import %workspace%/.bazelrc.user

# Platform configuration
build --apple_platform_type=macos
build --cpu=darwin_arm64
build --host_cpu=darwin_arm64
build --platforms=//:macos_arm64
build --apple_crosstool_top=@local_config_apple_cc//:toolchain
build --crosstool_top=@local_config_apple_cc//:toolchain
build --host_crosstool_top=@local_config_apple_cc//:toolchain
build --xcode_version=16.3.0
build --define=APPLE_SDK_PLATFORM=MacOSX
# Explicitly unset any SDK version override to ensure Xcode's built-in SDK is used
build --action_env=APPLE_SDK_VERSION_OVERRIDE=
# Additional guard to make sure SDK version is not overridden elsewhere
build --noenable_platform_specific_config
# Swift compiler flags for target platform consistency
# Note: We rely on the compiler_options.bzl settings instead of setting Swift flags here

# Import Swift-specific configurations
# import ./.bazelrc.swift
# Enable Swift ARM64 config by default
# build --config=swift_arm64

# Test configuration
test --test_output=errors
test --test_env=DYLD_LIBRARY_PATH
test --test_env=DYLD_FRAMEWORK_PATH
test --test_env=DEVELOPER_DIR
test --test_env=SWIFT_DETERMINISTIC_HASHING=1
test --test_env=SDKROOT
test --test_env=XCODE_VERSION_OVERRIDE=16.3.0
test --test_env=PLATFORM_NAME=macosx
test --test_verbose_timeout_warnings
test --test_summary=detailed
test --build_tests_only
test --test_strategy=exclusive

# Swift specific settings
build --features=swift.use_global_module_cache
build --features=swift.enable_batch_mode
build --features=swift.enable_concurrency_checking
build --features=swift.use_global_index_store
build --strategy=SwiftCompile=worker
build --worker_max_instances=4
# build --worker_sandboxing

# C++ settings for crypto dependencies
build --cxxopt=-std=c++14

# Environment setup
build --action_env=PATH
build --action_env=CC=clang

# Cache optimization settings
build --disk_cache=~/.cache/bazel-disk
build --repository_cache=~/.cache/bazel-repo
build --experimental_repository_cache_hardlinks
build --noexperimental_check_output_files
build --experimental_remote_merkle_tree_cache

# Memory usage optimizations
startup --host_jvm_args=-Xmx4g
build --experimental_reuse_sandbox_directories
build --experimental_merged_skyframe_analysis_execution

# Coverage settings
coverage --instrument_test_targets
coverage --combined_report=lcov
coverage --coverage_report_generator=@bazel_tools//tools/test/CoverageOutputGenerator/java/com/google/devtools/coverageoutputgenerator:Main
coverage --instrumentation_filter="^//Sources"

# Performance optimizations
build --incompatible_strict_action_env
build --remote_local_fallback
build --spawn_strategy=local,sandboxed
# build --sandbox_default_allow_network=false

# Keep previous glob behavior (allow empty glob patterns)
build --noincompatible_disallow_empty_glob

# Exclude problematic directories
build --deleted_packages=.build/checkouts/swift-syntax

# Build configurations
build:debug -c dbg
build:debug --swiftcopt=-g
build:debug --swiftcopt=-Onone
build:debug --swiftcopt=-enable-testing
build:debug --swiftcopt=-DDEBUG

build:release -c opt
build:release --workspace_status_command=tools/workspace_status.sh

# Production-only build configuration (skips tests)
build:prodonly --compilation_mode=opt
build:prodonly --build_tests_only=false
# Add manual tag to tests by default so we can control when they're built
build:prodonly --build_tag_filters=-test,-tests

# Test-focused configuration for targeted test runs
build:withtests --compilation_mode=dbg
build:withtests --build_tests_only=true
build:withtests --test_output=errors
build:withtests --flaky_test_attempts=3
build:withtests --keep_going

# CI-focused configuration that excludes problematic tests
build:ci_tests --config=withtests
build:ci_tests --test_tag_filters=-problematic
build:ci_tests --test_env=BAZEL_TEST_TIMEOUT=300

# Production build configuration using targets from production_targets.txt
build:prod --compilation_mode=opt
build:prod --build_tests_only=false
build:prod --build_tag_filters=-test,-tests
# Use targets from production_targets.txt file
build:prod --target_pattern_file=production_targets.txt

# Production build configuration
build:prod --compilation_mode=opt
build:prod --build_tests_only=false
build:prod --build_tag_filters=-test,-tests

# DocC documentation build configuration
build:docc --compilation_mode=opt
build:docc --build_tests_only=false
build:docc --build_tag_filters=-test,-tests
build:docc --define=build_environment=ci
build:docc --output_groups=+docc

# Local build configuration - used to identify local builds for DocC
build:local_build --define=build_environment=local

# Default environment detection flag - always set to nonlocal by default
build --define=build_environment=nonlocal
