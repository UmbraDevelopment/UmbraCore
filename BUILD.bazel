load("@bazel_gazelle//:def.bzl", "gazelle", "gazelle_binary")
load("@build_bazel_rules_swift//swift:swift.bzl", "swift_library")
load("//tools/bazel:docc.bzl", "docc_archive")

# Ignore the Swift build folder
# gazelle:exclude .build

# Configure repository names for Swift packages
# gazelle:swift_repository_prefix swiftpkg_

gazelle_binary(
    name = "gazelle_bin",
    languages = [
        "@rules_swift_package_manager//gazelle",
    ],
)

gazelle(
    name = "update_build_files",
    gazelle = ":gazelle_bin",
)

# Common Swift compiler options for all targets
SWIFT_COPTS = [
    "-strict-concurrency=complete",  # Full concurrency checking
    "-warn-concurrency",  # Warn about potential concurrency issues
    "-enable-actor-data-race-checks",  # Runtime checks for actor data races
    "-target", "arm64-apple-macos14.0",  # Ensure consistent target triple
]

# DocC documentation targets
docc_archive(
    name = "UmbraCore.docc",
    srcs = ["//Sources/UmbraCore:sources"],
    deps = [
        "//Sources/SecurityTypes",
        "//Sources/CryptoTypes",
        "//Sources/UmbraKeychainService",
    ],
    module_name = "UmbraCore",
    display_name = "UmbraCore",
    bundle_identifier = "com.umbra.core.documentation",
    docc_bundle = ":UmbraCore.docc",
)

docc_archive(
    name = "SecurityTypes.docc",
    srcs = ["//Sources/SecurityTypes:sources"],
    deps = [],
    module_name = "SecurityTypes",
    display_name = "SecurityTypes",
    bundle_identifier = "com.umbra.security.types.documentation",
    docc_bundle = ":SecurityTypes.docc",
)

docc_archive(
    name = "CryptoTypes.docc",
    srcs = ["//Sources/CryptoTypes:sources"],
    deps = ["//Sources/SecurityTypes"],
    module_name = "CryptoTypes",
    display_name = "CryptoTypes",
    bundle_identifier = "com.umbra.crypto.types.documentation",
    docc_bundle = ":CryptoTypes.docc",
)

docc_archive(
    name = "UmbraKeychainService.docc",
    srcs = ["//Sources/UmbraKeychainService:sources"],
    deps = [
        "//Sources/SecurityTypes",
        "//Sources/CryptoTypes",
        "//Sources/UmbraLogging",
        "//Sources/XPC/Core:UmbraXPC",
    ],
    module_name = "UmbraKeychainService",
    display_name = "Keychain Service",
    bundle_identifier = "com.umbra.keychain.service.documentation",
    docc_bundle = ":UmbraKeychainService.docc",
)

# Target to build documentation
alias(
    name = "docs",
    actual = ":UmbraCore.docc",
)

# Build all documentation
filegroup(
    name = "all_docs",
    srcs = [
        ":UmbraCore.docc",
        ":SecurityTypes.docc",
        ":CryptoTypes.docc",
        ":UmbraKeychainService.docc",
    ],
    visibility = ["//visibility:public"],
)

load("@build_bazel_rules_swift//swift:swift.bzl", "swift_library")

package(default_visibility = ["//visibility:public"])

# Platform configuration
platform(
    name = "macos_arm64",
    constraint_values = [
        "@platforms//os:macos",
        "@platforms//cpu:arm64",
    ],
    parents = ["@build_bazel_apple_support//platforms:macos"],
)

# Default Swift library configuration
swift_library(
    name = "UmbraCore",
    srcs = [],
    module_name = "UmbraCore",
    copts = [
        "-target", "arm64-apple-macos14.0",  # Ensure consistent target triple
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//Sources/UmbraCore",
        "//Sources/UmbraLogging",
        "//Sources/UmbraKeychainService",
        "//Sources/SecurityTypes",
        "//Sources/CryptoTypes",
        "//Sources/XPC/Core:UmbraXPC",
    ],
)

# Documentation targets
filegroup(
    name = "UmbraCore.docc",
    srcs = glob(["Sources/UmbraCore/**/*.md", "Sources/UmbraCore/**/*.docc/**"]),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "UmbraLogging.docc",
    srcs = glob(["Sources/UmbraLogging/**/*.md", "Sources/UmbraLogging/**/*.docc/**"]),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "UmbraKeychainService.docc",
    srcs = glob(["Sources/UmbraKeychainService/**/*.md", "Sources/UmbraKeychainService/**/*.docc/**"]),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "SecurityTypes.docc",
    srcs = glob(["Sources/SecurityTypes/**/*.md", "Sources/SecurityTypes/**/*.docc/**"]),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "CryptoTypes.docc",
    srcs = glob(["Sources/CryptoTypes/**/*.md", "Sources/CryptoTypes/**/*.docc/**"]),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "UmbraXPC.docc",
    srcs = glob(["Sources/XPC/Core/**/*.md", "Sources/XPC/Core/**/*.docc/**"]),
    visibility = ["//visibility:public"],
)
