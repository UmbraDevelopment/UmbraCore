load("//bazel:swift_rules.bzl", "umbra_swift_library")

# Configuration settings for conditional compilation
config_setting(
    name = "crypto_standard",
    values = {"define": "crypto_implementation=standard"},
)

config_setting(
    name = "crypto_xfn",
    values = {"define": "crypto_implementation=xfn"},
)

config_setting(
    name = "crypto_apple",
    values = {"define": "crypto_implementation=apple"},
)

# Main CryptoServices module that uses conditional compilation
umbra_swift_library(
    name = "CryptoServices",
    srcs = glob([
        "*.swift",  # Only include root Swift files for delegation
    ], exclude = [
        "**/*Tests.swift",
        "**/*.bak",
    ]),
    visibility = ["//visibility:public"],
    deps = [
        "//packages/UmbraCoreTypes/Sources/CoreSecurityTypes",
        "//packages/UmbraCoreTypes/Sources/KeychainTypes",
        "//packages/UmbraCoreTypes/Sources/LoggingTypes",
        "//packages/UmbraCoreTypes/Sources/CryptoTypes",
        "//packages/UmbraCoreTypes/Sources/DomainSecurityTypes",
        "//packages/UmbraInterfaces/Sources/LoggingInterfaces",
        "//packages/UmbraInterfaces/Sources/SecurityCoreInterfaces",
        "//packages/UmbraInterfaces/Sources/SecurityInterfaces",
        "//packages/UmbraInterfaces/Sources/CryptoInterfaces",
        "//packages/UmbraInterfaces/Sources/CoreInterfaces",
        "//packages/UmbraImplementations/Sources/LoggingServices",
        "//packages/UmbraImplementations/Sources/CryptoServices/Logging:CryptoLogger",
        "//packages/UmbraCoreTypes/Sources/BuildConfig",
        "//packages/UmbraImplementations/Sources/CryptoServicesCore",
    ] + select({
        ":crypto_standard": ["//packages/UmbraImplementations/Sources/CryptoServicesStandard"],
        ":crypto_xfn": ["//packages/UmbraImplementations/Sources/CryptoServicesXfn"],
        ":crypto_apple": ["//packages/UmbraImplementations/Sources/CryptoServicesApple"],
        "//conditions:default": ["//packages/UmbraImplementations/Sources/CryptoServicesStandard"],
    }),
)
