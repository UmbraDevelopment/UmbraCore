{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#umbracore-documentation","title":"UmbraCore Documentation","text":"<p>UmbraCore is built upon the foundation of Restic, a remarkable open-source backup programme that has set the standard for secure, efficient, and reliable backups. We are deeply grateful to the Restic team for their years of dedication in creating and maintaining such an exceptional tool.</p> <p>Our mission with UmbraCore is to extend Restic's capabilities specifically for macOS application developers, providing a type-safe, Swift-native interface while maintaining complete compatibility with Restic's core functionality. UmbraCore is not an alternative to Restic, but rather a complementary tool that makes Restic's powerful features more accessible in the macOS development ecosystem.</p>"},{"location":"#core-applications","title":"Core Applications","text":"<p>UmbraCore powers several macOS backup management tools: - ResticBar: macOS menu bar app for developers - Rbx: VS Code extension - Rbum: User-friendly GUI</p>"},{"location":"#features","title":"Features","text":""},{"location":"#implemented","title":"Implemented","text":"<ul> <li>Secure keychain operations with XPC service</li> <li>Comprehensive error handling and logging</li> <li>Thread-safe operations</li> <li>SwiftyBeaver logging integration</li> <li>Modular architecture</li> <li>Extensive test coverage</li> </ul>"},{"location":"#in-development","title":"In Development","text":"<ul> <li>SSH key management</li> <li>Cloud provider credentials</li> <li>Repository password handling</li> </ul>"},{"location":"#architecture","title":"Architecture","text":""},{"location":"#core-libraries","title":"Core Libraries","text":"<ul> <li>SecurityTypes: Base security primitives and protocols</li> <li>CryptoTypes: Cryptographic operations and types</li> <li>UmbraLogging: Centralised logging infrastructure</li> </ul>"},{"location":"#service-layer","title":"Service Layer","text":"<ul> <li>UmbraKeychainService: Secure keychain operations</li> <li>UmbraCryptoService: Cryptographic operations service</li> <li>UmbraBookmarkService: File system bookmark management</li> <li>UmbraXPC: XPC communication infrastructure</li> </ul>"},{"location":"#features_1","title":"Features","text":"<ul> <li>ResticCLIHelper: Command-line interface integration</li> <li>Repositories: Repository management and operations</li> <li>Snapshots: Snapshot creation and management</li> <li>Config: Configuration and settings management</li> <li>Logging: Privacy-aware structured logging</li> <li>ErrorHandling: Comprehensive error management</li> <li>Autocomplete: Context-aware command completion</li> </ul>"},{"location":"#project-status","title":"Project Status","text":"<p>UmbraCore is currently in active development with the following features:</p>"},{"location":"#tested-operable","title":"Tested &amp; Operable","text":"<ul> <li>Repository Management<ul> <li>Secure repository initialisation</li> <li>Repository health monitoring</li> <li>Multi-repository support</li> </ul> </li> <li>Core Restic Integration<ul> <li>Command execution system</li> <li>Output parsing</li> <li>Error handling</li> <li>Process management</li> </ul> </li> <li>Security Layer<ul> <li>XPC protocol consolidation</li> <li>Keychain integration</li> <li>Secure error handling</li> </ul> </li> <li>Testing Infrastructure<ul> <li>Unit testing framework</li> <li>Integration test suite</li> <li>Performance benchmarks</li> <li>Mock services</li> </ul> </li> </ul>"},{"location":"#future-development","title":"Future Development","text":"<ul> <li>Advanced Security Features<ul> <li>SSH key management</li> <li>Cloud provider credentials</li> <li>Enhanced repository password handling</li> </ul> </li> <li>Configuration System<ul> <li>Configuration file format</li> <li>Validation system</li> <li>Migration support</li> </ul> </li> <li>Analytics &amp; Monitoring<ul> <li>Progress reporting protocol</li> <li>Performance metrics</li> <li>Usage statistics</li> <li>System diagnostics</li> </ul> </li> <li>Event System<ul> <li>Event dispatching</li> <li>Notification management</li> <li>Webhook support</li> </ul> </li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Please refer to our development documentation for installation and usage instructions.</p>"},{"location":"#security","title":"Security","text":"<p>UmbraCore prioritises security in all aspects of its implementation. For details, see our development documentation on security practices.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>Key documentation sections:</p> <ul> <li>Configuration: See modules/configuration.md</li> <li>Features: Explore the modules section</li> <li>Development: See the development section</li> <li>Support: Contact us via GitHub issues</li> </ul>"},{"location":"#support","title":"Support","text":"<p>If you find UmbraCore useful, please consider:</p> <ol> <li>Contributing to the project</li> <li>Supporting Restic</li> <li>Starring us on GitHub</li> <li>Sharing your experience with others</li> </ol>"},{"location":"#license","title":"License","text":"<p>UmbraCore is available under the MIT license. See the LICENSE file for more info.</p>"},{"location":"README_build_system/","title":"UmbraCore Build System Restructuring","text":"<p>This document outlines the build system restructuring process for UmbraCore, explaining the changes made and how to use the new build system.</p>"},{"location":"README_build_system/#overview","title":"Overview","text":"<p>The UmbraCore build system has been restructured to improve modularity, build performance, and separation of concerns between production and test code.</p>"},{"location":"README_build_system/#key-changes","title":"Key Changes","text":"<ol> <li>Directory Structure Reorganisation</li> <li>Created dedicated <code>TestSupport</code> directories for test-only code</li> <li>Separated test utilities by domain (Security, Core, Common)</li> <li> <p>Created missing packages like <code>CoreServicesTypes</code></p> </li> <li> <p>Build Configuration</p> </li> <li>Added build configurations for production, development, and test-only builds</li> <li>Improved dependency management between modules</li> <li> <p>Fixed target configuration issues</p> </li> <li> <p>Build Scripts</p> </li> <li>Added convenience scripts for common build operations</li> <li>Created selective build capability for affected targets</li> </ol>"},{"location":"README_build_system/#directory-structure","title":"Directory Structure","text":"<p>The new structure follows this pattern:</p> <pre><code>/UmbraCore\n\u251c\u2500\u2500 Sources/            # Production code only\n\u2502   \u251c\u2500\u2500 Core/\n\u2502   \u251c\u2500\u2500 CoreTypes/\n\u2502   \u251c\u2500\u2500 CoreServicesTypes/\n\u2502   \u251c\u2500\u2500 Security/\n\u2502   \u251c\u2500\u2500 SecurityInterfaces/\n\u2502   \u2514\u2500\u2500 SecurityTypes/\n\u251c\u2500\u2500 Tests/              # Test code\n\u2502   \u251c\u2500\u2500 CoreTests/\n\u2502   \u251c\u2500\u2500 SecurityTests/\n\u2502   \u2514\u2500\u2500 XPCTests/\n\u2514\u2500\u2500 TestSupport/        # Test utilities and mocks\n    \u251c\u2500\u2500 Security/\n    \u251c\u2500\u2500 Core/\n    \u2514\u2500\u2500 Common/\n</code></pre>"},{"location":"README_build_system/#restructuring-tool","title":"Restructuring Tool","text":"<p>A Go-based restructuring tool (<code>umbra_restructure.go</code>) has been created to automate the migration process. This tool:</p> <ol> <li>Creates the necessary directory structure</li> <li>Moves test-related code to appropriate TestSupport directories</li> <li>Creates and updates BUILD.bazel files</li> <li>Configures Bazel build settings</li> <li>Creates build scripts</li> </ol>"},{"location":"README_build_system/#using-the-restructuring-tool","title":"Using the Restructuring Tool","text":"<pre><code># Perform a dry run to see planned changes without applying them\ngo run umbra_restructure.go --dry-run\n\n# Execute the restructuring\ngo run umbra_restructure.go\n\n# Additional options\ngo run umbra_restructure.go --help\n</code></pre> <p>Options: - <code>--root</code>: Specify the project root directory (default: current directory) - <code>--dry-run</code>: Perform a dry run without making changes - <code>--verbose</code>: Enable verbose output - <code>--skip-bazel</code>: Skip Bazel configuration updates - <code>--skip-scripts</code>: Skip build script creation</p>"},{"location":"README_build_system/#build-scripts","title":"Build Scripts","text":"<p>The restructuring adds several convenience scripts:</p> <ol> <li> <p>build_prod.sh: Builds only production code    <pre><code>./build_prod.sh\n</code></pre></p> </li> <li> <p>build_test.sh: Builds and runs all tests    <pre><code>./build_test.sh\n</code></pre></p> </li> <li> <p>build_affected.sh: Builds only targets affected by recent changes    <pre><code>./build_affected.sh\n</code></pre></p> </li> </ol>"},{"location":"README_build_system/#bazel-configuration","title":"Bazel Configuration","text":"<p>The <code>.bazelrc</code> file has been updated with configurations for different build types:</p> <ul> <li><code>--config=prod</code>: Production build (no tests)</li> <li><code>--config=dev</code>: Development build with tests</li> <li><code>--config=test</code>: Test-only build</li> </ul> <p>Example usage: <pre><code>bazel build --config=prod //Sources/...\nbazel test --config=dev //...\n</code></pre></p>"},{"location":"README_build_system/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter build issues after restructuring:</p> <ol> <li>Check that all dependencies are correctly specified in BUILD.bazel files</li> <li>Verify that imports have been updated to reflect the new package structure</li> <li>Run <code>bazel clean --expunge</code> to clear the build cache</li> <li>Check for any remaining test code in production directories</li> </ol>"},{"location":"README_build_system/#future-improvements","title":"Future Improvements","text":"<p>Planned improvements for the build system:</p> <ol> <li>Dependency visualization tools</li> <li>Comprehensive CI/CD pipeline integration</li> <li>Build performance metrics and optimization</li> <li>Automated dependency management</li> </ol>"},{"location":"ROADMAP/","title":"UmbraCore Development Roadmap","text":"<p>This document outlines the development roadmap for UmbraCore, detailing both completed and planned features.</p>"},{"location":"ROADMAP/#common-requirements-across-applications","title":"Common Requirements Across Applications","text":"<p>UmbraCore serves as the foundation for multiple applications (Rbum, Rbx, ResticBar), sharing these core requirements:</p> <ul> <li>Core Restic Integration: Repository initialisation, backup operations, restoration</li> <li>Security &amp; Credentials: Password management, SSH keys, secure storage</li> <li>Configuration Management: Backup sources, exclusions, retention policies</li> <li>Progress &amp; Status: Monitoring, metrics, notifications</li> <li>Repository Management: Multi-repository support, health checks</li> <li>Scheduling System: Timed operations, maintenance</li> <li>State Management: History, status tracking, preferences</li> <li>Network Operations: Remote repository access, bandwidth control</li> </ul>"},{"location":"ROADMAP/#implementation-status","title":"Implementation Status","text":""},{"location":"ROADMAP/#tested-operable","title":"Tested &amp; Operable","text":"<ul> <li>Core Restic Integration<ul> <li>Command execution system</li> <li>Process management</li> <li>Output parsing</li> <li>Error handling</li> <li>Basic repository operations</li> </ul> </li> <li>Security Layer<ul> <li>Keychain integration</li> <li>XPC service implementation</li> <li>Secure data handling</li> <li>XPC protocol consolidation</li> </ul> </li> <li>Repository Management<ul> <li>Repository initialisation</li> <li>Repository health monitoring</li> <li>Multi-repository support</li> </ul> </li> <li>Testing Infrastructure<ul> <li>Unit testing framework</li> <li>Integration test suite</li> <li>Performance benchmarks</li> <li>Mock services</li> </ul> </li> </ul>"},{"location":"ROADMAP/#current-development-focus","title":"Current Development Focus","text":"<ul> <li>Security Enhancements<ul> <li>SSH key management</li> <li>Cloud provider credentials</li> <li>Repository password handling</li> </ul> </li> <li>Configuration System<ul> <li>Configuration format design</li> <li>Validation system</li> <li>Migration framework</li> </ul> </li> <li>Progress Monitoring<ul> <li>Progress protocol design</li> <li>Status update system</li> <li>Metrics collection</li> </ul> </li> </ul>"},{"location":"ROADMAP/#future-development","title":"Future Development","text":""},{"location":"ROADMAP/#short-term-goals-3-6-months","title":"Short-term Goals (3-6 months)","text":"<ul> <li>Advanced Repository Management<ul> <li>Statistics collection</li> <li>Space management</li> <li>Cache handling</li> </ul> </li> <li>Scheduling System<ul> <li>Schedule format design</li> <li>Timer implementation</li> <li>Queue management</li> <li>Conflict resolution</li> </ul> </li> <li>Network Operations<ul> <li>Connection management</li> <li>Protocol handlers</li> <li>Retry logic</li> <li>Rate limiting</li> </ul> </li> <li>State Management<ul> <li>State persistence design</li> <li>History tracking</li> <li>Recovery management</li> <li>Preference storage</li> </ul> </li> </ul>"},{"location":"ROADMAP/#mid-term-goals-6-12-months","title":"Mid-term Goals (6-12 months)","text":"<ul> <li>Statistics &amp; Analytics<ul> <li>Performance metrics</li> <li>Usage statistics</li> <li>Trend analysis</li> <li>Report generation</li> </ul> </li> <li>Health Monitoring<ul> <li>System diagnostics</li> <li>Performance monitoring</li> <li>Resource tracking</li> <li>Alert system</li> </ul> </li> <li>Event System<ul> <li>Event dispatching</li> <li>Notification management</li> <li>Webhook support</li> <li>Custom triggers</li> </ul> </li> <li>Cache Optimisation<ul> <li>Memory usage optimisation</li> <li>Disk cache management</li> <li>Network caching</li> <li>Cold/warm/hot cache strategies</li> </ul> </li> </ul>"},{"location":"ROADMAP/#long-term-goals-12-months","title":"Long-term Goals (12+ months)","text":"<ul> <li>Enhanced User Experience<ul> <li>Improved error messaging</li> <li>Contextual help</li> <li>Smart suggestions</li> <li>Accessibility features</li> </ul> </li> <li>Extended Platform Support<ul> <li>Linux compatibility</li> <li>Windows compatibility (where feasible)</li> <li>Cross-platform testing</li> </ul> </li> <li>Enterprise Features<ul> <li>Advanced logging</li> <li>Audit trails</li> <li>Team management</li> <li>Policy enforcement</li> </ul> </li> <li>Integration Ecosystem<ul> <li>Plugin architecture</li> <li>Integration with monitoring tools</li> <li>Backup verification workflows</li> <li>Scripting support</li> </ul> </li> </ul>"},{"location":"ROADMAP/#development-principles","title":"Development Principles","text":""},{"location":"ROADMAP/#1-security-first","title":"1. Security First","text":"<ul> <li>Defence in depth approach</li> <li>Zero trust architecture</li> <li>Regular security reviews</li> <li>Secure by default</li> </ul>"},{"location":"ROADMAP/#2-performance","title":"2. Performance","text":"<ul> <li>Minimal resource usage</li> <li>Responsive user interface</li> <li>Efficient background operations</li> <li>Optimised network usage</li> </ul>"},{"location":"ROADMAP/#3-reliability","title":"3. Reliability","text":"<ul> <li>Comprehensive error handling</li> <li>Graceful degradation</li> <li>Automatic recovery where possible</li> <li>Thorough logging</li> </ul>"},{"location":"ROADMAP/#4-maintainability","title":"4. Maintainability","text":"<ul> <li>Clean architecture</li> <li>Comprehensive documentation</li> <li>Consistent coding standards</li> <li>Automated testing</li> </ul>"},{"location":"ROADMAP/#5-user-experience","title":"5. User Experience","text":"<ul> <li>Intuitive interfaces</li> <li>Clear error messages</li> <li>Predictable behaviour</li> <li>Focus on developer workflows</li> </ul>"},{"location":"module_structure/","title":"UmbraCore Module Structure","text":""},{"location":"module_structure/#overview","title":"Overview","text":"<p>This document outlines the modular architecture of UmbraCore, explaining how the various modules interact and depend on each other.</p>"},{"location":"module_structure/#core-module-organisation","title":"Core Module Organisation","text":"<p>UmbraCore follows a layered architecture with clearly defined responsibilities:</p>"},{"location":"module_structure/#foundation-free-core-layer","title":"Foundation-Free Core Layer","text":"<p>These modules have no dependencies on Foundation or other Apple frameworks, making them portable and easier to test:</p> <ul> <li>UmbraCoreTypes: Core type definitions used throughout the system</li> <li>SecurityProtocolsCore: Security protocol definitions without Foundation dependencies</li> <li>XPCProtocolsCore: XPC communication protocols without Foundation dependencies</li> <li>SecureBytes: Foundation-free binary data handling</li> </ul>"},{"location":"module_structure/#bridge-layer","title":"Bridge Layer","text":"<p>These modules bridge between Foundation-free and Foundation-dependent code:</p> <ul> <li>SecurityBridge: Adapts between Foundation-free security protocols and Foundation types</li> <li>XPCBridge: Provides Foundation-compatible XPC service implementations</li> </ul>"},{"location":"module_structure/#implementation-layer","title":"Implementation Layer","text":"<p>These modules provide concrete implementations of the protocols:</p> <ul> <li>SecurityImplementation: Implements security protocols using CryptoKit</li> <li>UmbraSecurity: High-level security services</li> <li>UmbraXPC: XPC service implementations</li> </ul>"},{"location":"module_structure/#application-services","title":"Application Services","text":"<p>These modules provide application-specific functionality:</p> <ul> <li>UmbraKeychainService: Keychain access and management</li> <li>ResticCLIHelper: Interface to the Restic command-line tool</li> <li>RepositoryManager: Repository configuration and management</li> <li>BackupCoordinator: Coordinates backup operations</li> <li>Configuration: Application and service configuration</li> </ul>"},{"location":"module_structure/#dependency-graph","title":"Dependency Graph","text":"<pre><code>Application Services\n      \u2191\nImplementation Layer\n      \u2191\n   Bridge Layer\n      \u2191\nFoundation-Free Core\n</code></pre>"},{"location":"module_structure/#module-import-guidelines","title":"Module Import Guidelines","text":"<p>When importing modules, follow these guidelines:</p> <ol> <li>Always import the most specific module required</li> <li>Avoid importing both a module and its submodules</li> <li>Use explicit imports instead of <code>@_exported import</code></li> <li>Be consistent with import ordering</li> <li>Keep Foundation imports separate from project module imports</li> </ol>"},{"location":"module_structure/#circular-dependency-prevention","title":"Circular Dependency Prevention","text":"<p>The layered architecture is designed to prevent circular dependencies:</p> <ul> <li>Foundation-free modules must not import Foundation-dependent modules</li> <li>Lower-layer modules must not import higher-layer modules</li> <li>Use protocol-based design to maintain separation of concerns</li> </ul>"},{"location":"api/","title":"API Documentation","text":""},{"location":"api/#core-services","title":"Core Services","text":""},{"location":"api/#umbrakeychainservice","title":"UmbraKeychainService","text":"<p>Secure credential storage service. - API Reference - Usage Guide: See modules/umbrakeychainservice.md</p>"},{"location":"api/#umbracryptoservice","title":"UmbraCryptoService","text":"<p>Cryptographic operations service. - API Reference - Usage Guide: See modules/umbracryptoservice.md</p>"},{"location":"api/#umbrabookmarkservice","title":"UmbraBookmarkService","text":"<p>File system bookmark management. - API Reference - Usage Guide: Coming soon</p>"},{"location":"api/#security-types","title":"Security Types","text":""},{"location":"api/#securitytypes","title":"SecurityTypes","text":"<p>Base security primitives. - API Reference - Usage Guide: See modules/securitytypes.md</p>"},{"location":"api/#cryptotypes","title":"CryptoTypes","text":"<p>Cryptographic types and operations. - API Reference - Usage Guide: Coming soon</p>"},{"location":"api/#utilities","title":"Utilities","text":""},{"location":"api/#umbralogging","title":"UmbraLogging","text":"<p>Logging infrastructure. - API Reference - Usage Guide: Coming soon</p>"},{"location":"api/#umbraxpc","title":"UmbraXPC","text":"<p>XPC communication layer. - API Reference - Usage Guide: See modules/umbraxpc.md</p>"},{"location":"api/#error-types","title":"Error Types","text":""},{"location":"api/#commonerror","title":"CommonError","text":"<p>Shared error types. - API Reference - Usage Guide: See modules/errortypes.md</p>"},{"location":"api/#best-practices","title":"Best Practices","text":"<ul> <li>Thread Safety: Ensure all service calls are thread-safe in your implementation</li> <li>Error Handling: Always handle errors appropriately</li> <li>Logging: Use the provided logging infrastructure for consistent logs</li> <li>Performance: Consider using async/await for operations that might take time</li> </ul> <p>For more detailed information, please refer to the documentation in the development section.</p>"},{"location":"development/","title":"Development Guide","text":"<p>This section contains technical documentation for developers working with UmbraCore.</p>"},{"location":"development/#development-topics","title":"Development Topics","text":"<ul> <li>Architecture overview</li> <li>Integration guides</li> <li>Contributing guidelines</li> <li>API documentation</li> </ul>"},{"location":"development/#available-guides","title":"Available Guides","text":"<ul> <li>Bazel &amp; SPM Integration: Build system integration guide</li> <li>Architecture: System architecture and design</li> <li>Contributing: Guidelines for contributors</li> </ul>"},{"location":"development/architecture/","title":"UmbraCore Architecture","text":""},{"location":"development/architecture/#overview","title":"Overview","text":"<p>UmbraCore follows a modular architecture with a strong focus on security, type safety, and maintainability. The system is designed around the principle of separation of concerns, with distinct modules handling specific aspects of the backup management process.</p>"},{"location":"development/architecture/#core-architecture-principles","title":"Core Architecture Principles","text":""},{"location":"development/architecture/#security-first-design","title":"Security-First Design","text":"<ul> <li>Foundation-free core modules for critical security operations</li> <li>XPC services for privileged operations</li> <li>Secure keychain integration with sandboxing support</li> </ul>"},{"location":"development/architecture/#module-organisation","title":"Module Organisation","text":"<p>UmbraCore is organised into several logical layers:</p> <ol> <li>Core Foundation-Free Layer</li> <li>SecurityProtocolsCore</li> <li>XPCProtocolsCore</li> <li> <p>UmbraCoreTypes</p> </li> <li> <p>Foundation Bridge Layer</p> </li> <li>SecurityBridge</li> <li> <p>XPCBridge</p> </li> <li> <p>Implementation Layer</p> </li> <li>SecurityImplementation</li> <li> <p>UmbraSecurity</p> </li> <li> <p>Application Services</p> </li> <li>UmbraKeychainService</li> <li>ResticCLIHelper</li> <li>RepositoryManager</li> <li>BackupCoordinator</li> </ol>"},{"location":"development/architecture/#error-handling-architecture","title":"Error Handling Architecture","text":"<p>UmbraCore implements a comprehensive error handling system with:</p> <ul> <li>Domain-specific error types</li> <li>Consistent error mapping between modules</li> <li>Rich error context for debugging</li> </ul>"},{"location":"development/architecture/#concurrency-model","title":"Concurrency Model","text":"<p>The project uses Swift's structured concurrency model with:</p> <ul> <li>Async/await for asynchronous operations</li> <li>Actor-based isolation for thread safety</li> <li>Task management for cancellation support</li> </ul>"},{"location":"development/architecture/#xpc-integration","title":"XPC Integration","text":"<p>UmbraCore uses XPC extensively for privilege separation:</p> <ul> <li>Main app remains sandboxed</li> <li>XPC services handle privileged operations</li> <li>Well-defined protocol interfaces using Swift's protocol system</li> </ul>"},{"location":"development/bazel_spm/","title":"UmbraCore: Bazel and SPM Integration Brief","text":""},{"location":"development/bazel_spm/#overview","title":"Overview","text":"<p>This document outlines our strategy for integrating Bazel build system while maintaining Swift Package Manager (SPM) compatibility in the UmbraCore project.</p>"},{"location":"development/bazel_spm/#1-integration-goals","title":"1. Integration Goals","text":"<ul> <li>Maintain existing SPM dependencies</li> <li>Leverage Bazel's build caching</li> <li>Optimise CI/CD performance</li> <li>Support future scalability</li> </ul>"},{"location":"development/bazel_spm/#2-technical-architecture","title":"2. Technical Architecture","text":""},{"location":"development/bazel_spm/#21-build-system-components","title":"2.1 Build System Components","text":"<pre><code>UmbraCore/\n\u251c\u2500\u2500 WORKSPACE\n\u251c\u2500\u2500 MODULE.bazel          # Bazel module configuration\n\u251c\u2500\u2500 Package.swift         # SPM dependencies\n\u251c\u2500\u2500 Package.resolved      # SPM version lock\n\u251c\u2500\u2500 .bazelrc             # Bazel settings\n\u251c\u2500\u2500 BUILD.bazel          # Root build file\n\u251c\u2500\u2500 Sources/             # Source files\n\u2502   \u2514\u2500\u2500 */\n\u2502       \u251c\u2500\u2500 BUILD       # Generated by Gazelle\n\u2502       \u2514\u2500\u2500 *.swift\n\u2514\u2500\u2500 Tests/              # Test files\n    \u2514\u2500\u2500 */\n        \u251c\u2500\u2500 BUILD       # Generated by Gazelle\n        \u2514\u2500\u2500 *.swift\n</code></pre>"},{"location":"development/bazel_spm/#22-key-configuration-files","title":"2.2 Key Configuration Files","text":""},{"location":"development/bazel_spm/#modulebazel","title":"MODULE.bazel","text":"<pre><code>bazel_dep(name = \"rules_swift_package_manager\", version = \"0.46.0\")\n\nswift_deps = use_extension(\n    \"@rules_swift_package_manager//:extensions.bzl\",\n    \"swift_deps\",\n)\n\nswift_deps.configure_swift_package(\n    build_path = \"spm-build\",\n    cache_path = \"spm-cache\",\n    dependency_caching = \"true\",\n    manifest_cache = \"local\",\n    manifest_caching = \"true\",\n)\n\nswift_deps.from_package(\n    declare_swift_deps_info = True,\n    declare_swift_package = True,\n    resolved = \"//:Package.resolved\",\n    swift = \"//:Package.swift\",\n)\n</code></pre>"},{"location":"development/bazel_spm/#bazelrc","title":".bazelrc","text":"<pre><code># Enable bzlmod\nbuild --enable_bzlmod\n\n# SPM integration\nbuild --experimental_enable_swift_package_manager\n\n# Caching configuration\nbuild --remote_cache=grpcs://cache.buildbuddy.io\nbuild --remote_timeout=3600\n</code></pre>"},{"location":"development/bazel_spm/#3-dependency-management","title":"3. Dependency Management","text":""},{"location":"development/bazel_spm/#31-spm-dependencies","title":"3.1 SPM Dependencies","text":"<ul> <li>CryptoSwift (v1.8.0+)</li> <li>SwiftyBeaver (v2.0.0+)</li> </ul>"},{"location":"development/bazel_spm/#32-bazel-dependencies","title":"3.2 Bazel Dependencies","text":"<ul> <li>rules_swift_package_manager</li> <li>rules_swift</li> <li>rules_apple (optional)</li> <li>Gazelle</li> </ul>"},{"location":"development/bazel_spm/#4-caching-strategy","title":"4. Caching Strategy","text":""},{"location":"development/bazel_spm/#41-cache-locations","title":"4.1 Cache Locations","text":"<ul> <li><code>spm-cache/</code>: SPM dependency cache</li> <li><code>spm-build/</code>: SPM build artifacts</li> <li><code>bazel-*/</code>: Bazel build outputs</li> <li><code>~/.cache/bazel</code>: Bazel system cache</li> </ul>"},{"location":"development/bazel_spm/#42-cicd-caching","title":"4.2 CI/CD Caching","text":"<pre><code>cache:\n  paths:\n    - ~/.cache/bazel\n    - spm-cache\n    - spm-build\n  key: ${CI_COMMIT_REF_SLUG}\n</code></pre>"},{"location":"development/bazel_spm/#5-common-operations","title":"5. Common Operations","text":""},{"location":"development/bazel_spm/#51-dependency-management","title":"5.1 Dependency Management","text":"<pre><code># Update all dependencies\nbazel run @swift_package//:update\n\n# Update specific package\nbazel run @swift_package//:update -- SwiftyBeaver\n\n# Resolve dependencies\nbazel run @swift_package//:resolve\n</code></pre>"},{"location":"development/bazel_spm/#52-build-operations","title":"5.2 Build Operations","text":"<pre><code># Build entire project\nbazel build //...\n\n# Run tests\nbazel test //...\n\n# Generate BUILD files\nbazel run //:update_build_files\n</code></pre>"},{"location":"development/bazel_spm/#6-best-practices","title":"6. Best Practices","text":""},{"location":"development/bazel_spm/#61-development-workflow","title":"6.1 Development Workflow","text":"<ol> <li>Use Bazel commands for all build operations</li> <li>Keep Package.swift minimal and focused</li> <li>Regularly update cached dependencies</li> <li>Monitor cache size and performance</li> </ol>"},{"location":"development/bazel_spm/#62-code-organisation","title":"6.2 Code Organisation","text":"<ol> <li>Follow module structure in Sources/</li> <li>Maintain clear dependency boundaries</li> <li>Use proper visibility declarations</li> <li>Keep BUILD files organised</li> </ol>"},{"location":"development/bazel_spm/#63-language-standards","title":"6.3 Language Standards","text":"<ol> <li>Use British English in:</li> <li>Documentation</li> <li>Comments</li> <li>User-facing text</li> <li>Use American English in:</li> <li>Code</li> <li>Build files</li> <li>Configuration</li> </ol>"},{"location":"development/bazel_spm/#7-performance-considerations","title":"7. Performance Considerations","text":""},{"location":"development/bazel_spm/#71-local-development","title":"7.1 Local Development","text":"<ul> <li>Use local caching</li> <li>Enable parallel builds</li> <li>Monitor resource usage</li> <li>Regular cache cleanup</li> </ul>"},{"location":"development/bazel_spm/#72-cicd-pipeline","title":"7.2 CI/CD Pipeline","text":"<ul> <li>Optimise cache sharing</li> <li>Use remote caching</li> <li>Enable parallel testing</li> <li>Monitor build times</li> </ul>"},{"location":"development/bazel_spm/#8-migration-timeline","title":"8. Migration Timeline","text":""},{"location":"development/bazel_spm/#phase-1-initial-setup-1-week","title":"Phase 1: Initial Setup (1 week)","text":"<ul> <li>[ ] Configure Bazel</li> <li>[ ] Set up SPM integration</li> <li>[ ] Configure caching</li> <li>[ ] Update documentation</li> </ul>"},{"location":"development/bazel_spm/#phase-2-build-migration-2-weeks","title":"Phase 2: Build Migration (2 weeks)","text":"<ul> <li>[ ] Generate BUILD files</li> <li>[ ] Test build system</li> <li>[ ] Validate dependencies</li> <li>[ ] Performance testing</li> </ul>"},{"location":"development/bazel_spm/#phase-3-cicd-integration-1-week","title":"Phase 3: CI/CD Integration (1 week)","text":"<ul> <li>[ ] Configure GitHub Actions</li> <li>[ ] Set up caching</li> <li>[ ] Test workflows</li> <li>[ ] Monitor performance</li> </ul>"},{"location":"development/bazel_spm/#9-support-and-maintenance","title":"9. Support and Maintenance","text":""},{"location":"development/bazel_spm/#91-regular-tasks","title":"9.1 Regular Tasks","text":"<ul> <li>Weekly dependency updates</li> <li>Monthly cache cleanup</li> <li>Quarterly performance review</li> <li>Regular documentation updates</li> </ul>"},{"location":"development/bazel_spm/#92-monitoring","title":"9.2 Monitoring","text":"<ul> <li>Build times</li> <li>Cache hit rates</li> <li>Dependency updates</li> <li>Resource usage</li> </ul>"},{"location":"development/bazel_spm/#10-references","title":"10. References","text":"<ol> <li>Bazel Documentation</li> <li>rules_swift_package_manager</li> <li>Swift Package Manager</li> <li>GitHub Actions Documentation</li> </ol>"},{"location":"development/contributing/","title":"Contributing to UmbraCore","text":"<p>This page will contain information about contributing to UmbraCore. Check back soon for updates.</p>"},{"location":"development/contributing/#coming-soon","title":"Coming Soon","text":"<ul> <li>Development setup</li> <li>Coding standards</li> <li>Testing guidelines</li> <li>Pull request process</li> <li>Documentation guidelines</li> </ul>"},{"location":"development/project_structure/","title":"Project Structure","text":"<p>/Users/mpy/CascadeProjects/UmbraCore |-- Sources |   |-- API |   |   <code>-- UmbraAPI.swift |   |-- Autocomplete |   |   |-- Errors |   |   |-- Extensions |   |   |-- Models |   |   |-- Protocols |   |   |</code>-- AutocompleteProtocol.swift |   |   |-- Services |   |   <code>-- README.md |   |-- Config |   |   |-- Errors |   |   |-- Extensions |   |   |-- Models |   |   |-- Protocols |   |   |</code>-- ConfigurationProtocol.swift |   |   |-- Services |   |   <code>-- README.md |   |-- Core |   |   |-- CryptoTypes |   |   |-- Protocols |   |   |-- SecurityTypes |   |   |-- Services |   |   |</code>-- CoreService.swift |   |   |-- Types |   |   <code>-- UmbraCore |   |       |-- Security |   |</code>-- UmbraCore.swift |   |-- CryptoTypes |   |   |-- Models |   |   |   <code>-- SecureStorageData.swift |   |   |-- Protocols |   |   |</code>-- CryptoServiceProtocol.swift |   |   |-- Services |   |   |   |-- CredentialManager.swift |   |   |   <code>-- CryptoService.swift |   |</code>-- Types |   |       |-- CryptoConfiguration.swift |   |       <code>-- CryptoError.swift |   |-- ErrorHandling |   |   |-- Errors |   |   |-- Extensions |   |   |</code>-- Error+Context.swift |   |   |-- Models |   |   |   |-- CommonError.swift |   |   |   |-- CoreError.swift |   |   |   |-- ErrorContext.swift |   |   |   <code>-- ServiceErrorTypes.swift |   |   |-- Protocols |   |   |   |-- ErrorHandlingProtocol.swift |   |   |   |-- ErrorReporting.swift |   |   |</code>-- ServiceErrorProtocol.swift |   |   |-- Services |   |   <code>-- README.md |   |-- Features |   |   |-- Crypto |   |   |   |-- Errors |   |   |   |-- Models |   |   |   |</code>-- SecureStorageData.swift |   |   |   |-- Protocols |   |   |   |   <code>-- SecureStorageProvider.swift |   |   |</code>-- Services |   |   <code>-- Logging |   |       |-- Errors |   |       |</code>-- LoggingError.swift |   |       |-- Extensions |   |       |-- Models |   |       |   <code>-- LogEntry.swift |   |       |-- Protocols |   |       |</code>-- LoggingProtocol.swift |   |       |-- Services |   |       |   |-- LoggingService.swift |   |       |   <code>-- SwiftyBeaverLoggingService.swift |   |</code>-- README.md |   |-- Mocks |   |   |-- MockKeychain.swift |   |   |-- MockSecurityProvider.swift |   |   <code>-- MockURLProvider.swift |   |-- Repositories |   |   |-- Errors |   |   |-- Extensions |   |   |-- Models |   |   |-- Protocols |   |   |</code>-- RepositoryProtocol.swift |   |   |-- Services |   |   <code>-- README.md |   |-- ResticCLIHelper |   |   |-- Errors |   |   |-- Extensions |   |   |-- Models |   |   |-- Protocols |   |   |</code>-- ResticCLIHelperProtocol.swift |   |   |-- Services |   |   <code>-- README.md |   |-- SecurityTypes |   |   |-- Models |   |   |   |-- FilePermission.swift |   |   |</code>-- SecurityError.swift |   |   |-- Protocols |   |   |   |-- SecureStorageProvider.swift |   |   |   <code>-- SecurityProvider.swift |   |   |-- Testing |   |</code>-- Types |   |       <code>-- SecurityErrorHandler.swift |   |-- Services |   |</code>-- SecurityUtils |   |       |-- Extensions |   |       |-- Protocols |   |       |   <code>-- URLProvider.swift |   |       |-- Services |   |       |   |-- EncryptedBookmarkService.swift |   |       |</code>-- SecurityBookmarkService.swift |   |       |-- Testing |   |       <code>-- Types |   |-- Snapshots |   |   |-- Errors |   |   |-- Extensions |   |   |-- Models |   |   |-- Protocols |   |   |</code>-- SnapshotProtocol.swift |   |   |-- Services |   |   <code>-- README.md |   |-- UmbraCore |   |</code>-- UmbraCore.swift |   |-- UmbraMocks |   |   |-- MockCryptoService.swift |   |   |-- MockKeychain.swift |   |   <code>-- MockSecurityProvider.swift |   |-- UmbraSecurity |   |   |-- Extensions |   |   |</code>-- URL+SecurityScoped.swift |   |   <code>-- Services |   |</code>-- SecurityService.swift |   <code>-- XPC |       |-- Core |       |   |-- XPCConnectionManager.swift |       |   |-- XPCError.swift |       |</code>-- XPCServiceProtocols.swift |       |-- CryptoService |       <code>-- SecurityService |-- Tests |   |-- AutocompleteTests |   |   |-- Errors |   |   |-- Extensions |   |   |-- Models |   |   |-- Protocols |   |</code>-- Services |   |-- ConfigTests |   |   |-- Errors |   |   |-- Extensions |   |   |-- Models |   |   |-- Protocols |   |   <code>-- Services |   |-- CoreTests |   |   |-- CoreServiceTests.swift |   |</code>-- URLSecurityTests.swift |   |-- CryptoTests |   |   |-- Mocks |   |   |-- CredentialManagerTests.swift |   |   <code>-- CryptoServiceTests.swift |   |-- ErrorHandlingTests |   |   |-- Errors |   |   |-- Extensions |   |   |-- Models |   |   |-- Protocols |   |   |-- Services |   |   |-- CommonErrorTests.swift |   |</code>-- CoreErrorTests.swift |   |-- LoggingTests |   |   |-- Errors |   |   |-- Extensions |   |   |-- Models |   |   |-- Protocols |   |   |-- Services |   |   <code>-- LoggingServiceTests.swift |   |-- RepositoriesTests |   |   |-- Errors |   |   |-- Extensions |   |   |-- Models |   |   |-- Protocols |   |</code>-- Services |   |-- ResticCLIHelperTests |   |   |-- Errors |   |   |-- Extensions |   |   |-- Models |   |   |-- Protocols |   |   <code>-- Services |   |-- SecurityTypesTests |   |   |-- MockSecurityProviderTests.swift |   |</code>-- SecurityErrorTests.swift |   |-- SecurityUtilsTests |   |   |-- EncryptedBookmarkServiceTests.swift |   |   <code>-- SecurityBookmarkServiceTests.swift |   |-- SnapshotsTests |   |   |-- Errors |   |   |-- Extensions |   |   |-- Models |   |   |-- Protocols |   |</code>-- Services |   |-- UmbraCoreTests |   |   <code>-- UmbraCoreTests.swift |</code>-- UmbraSecurityTests |       <code>-- SecurityServiceTests.swift |-- .gitignore |-- LICENSE |-- Package.resolved |-- Package.swift |-- README.md |-- STRUCTURE.md |-- UmbraCore.md</code>-- project_structure.md</p> <p>136 directories, 77 files</p>"},{"location":"development/project_structure/#umbracore-project-structure-documentation","title":"UmbraCore Project Structure Documentation","text":""},{"location":"development/project_structure/#project-overview","title":"Project Overview","text":"<ul> <li>Name: UmbraCore</li> <li>Version: 1.0.0</li> <li>Swift Version: 5.9.2/6.0.3</li> <li>Platform: macOS 14+</li> <li>Package Manager: Swift Package Manager (SPM)</li> </ul>"},{"location":"development/project_structure/#key-dependencies","title":"Key Dependencies","text":"<ul> <li>SwiftyBeaver: v2.1.1 (logging)</li> <li>CryptoSwift: v1.8.4 (crypto operations)</li> </ul>"},{"location":"development/project_structure/#core-components","title":"Core Components","text":""},{"location":"development/project_structure/#security-infrastructure","title":"Security Infrastructure","text":"<ul> <li>SecurityTypes Module: Core security types and protocols</li> <li>CryptoTypes Module: Cryptographic operations and types</li> <li>UmbraMocks Module: Mock implementations for testing</li> </ul>"},{"location":"development/project_structure/#implementation-details","title":"Implementation Details","text":"<ul> <li>Encryption: AES-256-GCM with combined auth mode</li> <li>Key Derivation: PBKDF2 with SHA-256 (10,000 iterations)</li> <li>IV Length: 12 bytes (GCM requirement)</li> <li>Salt Length: 32 bytes</li> <li>HMAC: SHA-256 based</li> </ul>"},{"location":"development/project_structure/#xpc-integration-in-progress","title":"XPC Integration (In Progress)","text":"<ul> <li>Core XPC infrastructure</li> <li>CryptoService XPC implementation</li> <li>SecurityService XPC implementation</li> </ul>"},{"location":"development/project_structure/#build-instructions","title":"Build Instructions","text":"<pre><code>swift build\nswift test\n</code></pre>"},{"location":"development/project_structure/#note","title":"Note","text":"<p>This structure snapshot was created on 2025-02-17 before implementing XPC services. Keep this file for reference in case rollback is needed.</p>"},{"location":"development/xpc_implementation_plan/","title":"UmbraCore XPC Implementation Plan","text":""},{"location":"development/xpc_implementation_plan/#overview","title":"Overview","text":"<p>Document Version: 1.0.0 Date: 2025-02-17 Status: In Progress</p>"},{"location":"development/xpc_implementation_plan/#1-architecture-changes","title":"1. Architecture Changes","text":""},{"location":"development/xpc_implementation_plan/#current-architecture","title":"Current Architecture","text":"<pre><code>UmbraCore/\n\u251c\u2500\u2500 CryptoTypes/\n\u2502   \u2514\u2500\u2500 Services/\n\u2502       \u251c\u2500\u2500 CryptoService.swift       # Direct crypto operations\n\u2502       \u2514\u2500\u2500 CredentialManager.swift    # Direct credential management\n\u2514\u2500\u2500 SecurityTypes/\n    \u2514\u2500\u2500 Protocols/\n        \u2514\u2500\u2500 SecurityProvider.swift     # Direct security operations\n</code></pre>"},{"location":"development/xpc_implementation_plan/#target-architecture","title":"Target Architecture","text":"<pre><code>UmbraCore/\n\u251c\u2500\u2500 XPC/\n\u2502   \u251c\u2500\u2500 Core/                         # XPC infrastructure\n\u2502   \u2502   \u251c\u2500\u2500 XPCError.swift\n\u2502   \u2502   \u251c\u2500\u2500 XPCServiceProtocols.swift\n\u2502   \u2502   \u2514\u2500\u2500 XPCConnectionManager.swift\n\u2502   \u251c\u2500\u2500 CryptoService/               # Crypto XPC service\n\u2502   \u2502   \u251c\u2500\u2500 CryptoXPCService.swift\n\u2502   \u2502   \u2514\u2500\u2500 Info.plist\n\u2502   \u2514\u2500\u2500 SecurityService/             # Security XPC service\n\u2502       \u251c\u2500\u2500 SecurityXPCService.swift\n\u2502       \u2514\u2500\u2500 Info.plist\n\u2514\u2500\u2500 [existing modules remain]\n</code></pre>"},{"location":"development/xpc_implementation_plan/#2-migration-strategy","title":"2. Migration Strategy","text":""},{"location":"development/xpc_implementation_plan/#phase-1-infrastructure-current","title":"Phase 1: Infrastructure (Current)","text":"<ul> <li>[x] Create XPC Core module</li> <li>[x] Define XPC protocols</li> <li>[x] Implement connection management</li> <li>[x] Add error handling</li> </ul>"},{"location":"development/xpc_implementation_plan/#phase-2-service-implementation","title":"Phase 2: Service Implementation","text":"<ul> <li>[ ] Create CryptoXPCService</li> <li>[ ] Implement service bundle</li> <li>[ ] Add privilege separation</li> <li>[ ] Set up entitlements</li> <li> <p>[ ] Configure sandbox</p> </li> <li> <p>[ ] Create SecurityXPCService</p> </li> <li>[ ] Implement service bundle</li> <li>[ ] Add privilege separation</li> <li>[ ] Set up entitlements</li> <li>[ ] Configure sandbox</li> </ul>"},{"location":"development/xpc_implementation_plan/#phase-3-client-updates","title":"Phase 3: Client Updates","text":"<ul> <li>[ ] Update CredentialManager</li> <li>[ ] Add XPC client implementation</li> <li>[ ] Implement fallback mechanism</li> <li> <p>[ ] Add connection recovery</p> </li> <li> <p>[ ] Update SecurityProvider clients</p> </li> <li>[ ] Add XPC client implementation</li> <li>[ ] Implement fallback mechanism</li> <li>[ ] Add connection recovery</li> </ul>"},{"location":"development/xpc_implementation_plan/#phase-4-testing-validation","title":"Phase 4: Testing &amp; Validation","text":"<ul> <li>[ ] Create XPCTests target</li> <li>[ ] Implement service tests</li> <li>[ ] Add connection tests</li> <li>[ ] Test error scenarios</li> <li>[ ] Validate security boundaries</li> </ul>"},{"location":"development/xpc_implementation_plan/#3-security-considerations","title":"3. Security Considerations","text":""},{"location":"development/xpc_implementation_plan/#privilege-separation","title":"Privilege Separation","text":"<pre><code>// Example service configuration\nlet connection = NSXPCConnection(serviceName: \"com.umbracore.cryptoservice\")\nconnection.remoteObjectInterface = NSXPCInterface(with: CryptoXPCServiceProtocol.self)\nconnection.auditSessionIdentifier = au_session_self()\n</code></pre>"},{"location":"development/xpc_implementation_plan/#entitlements","title":"Entitlements","text":"<pre><code>&lt;!-- Required entitlements --&gt;\n&lt;key&gt;com.apple.security.app-sandbox&lt;/key&gt;\n&lt;true/&gt;\n&lt;key&gt;com.apple.security.temporary-exception.files.home-relative-path.read-write&lt;/key&gt;\n&lt;string&gt;Library/Application Support/UmbraCore/&lt;/string&gt;\n</code></pre>"},{"location":"development/xpc_implementation_plan/#4-error-handling-strategy","title":"4. Error Handling Strategy","text":""},{"location":"development/xpc_implementation_plan/#error-categories","title":"Error Categories","text":"<ol> <li>Connection Errors</li> <li>Service Errors</li> <li>Security Validation Errors</li> <li>Resource Errors</li> </ol>"},{"location":"development/xpc_implementation_plan/#recovery-strategy","title":"Recovery Strategy","text":"<pre><code>public protocol XPCErrorRecoverable {\n    var isRecoverable: Bool { get }\n    var retryCount: Int { get }\n    var retryDelay: TimeInterval { get }\n}\n</code></pre>"},{"location":"development/xpc_implementation_plan/#5-performance-considerations","title":"5. Performance Considerations","text":""},{"location":"development/xpc_implementation_plan/#connection-management","title":"Connection Management","text":"<ul> <li>Connection pooling</li> <li>Request batching</li> <li>Async operations</li> <li>Resource cleanup</li> </ul>"},{"location":"development/xpc_implementation_plan/#monitoring","title":"Monitoring","text":"<ul> <li>Connection status</li> <li>Operation latency</li> <li>Error rates</li> <li>Resource usage</li> </ul>"},{"location":"development/xpc_implementation_plan/#6-testing-strategy","title":"6. Testing Strategy","text":""},{"location":"development/xpc_implementation_plan/#unit-tests","title":"Unit Tests","text":"<pre><code>func testCryptoXPCService() async throws {\n    let service = CryptoXPCService()\n    let data = Data([1, 2, 3])\n    let key = try await service.generateSecureRandomKey(length: 32)\n    let encrypted = try await service.encrypt(data, using: key)\n    XCTAssertNotEqual(data, encrypted)\n}\n</code></pre>"},{"location":"development/xpc_implementation_plan/#integration-tests","title":"Integration Tests","text":"<ul> <li>Service lifecycle</li> <li>Error propagation</li> <li>Recovery mechanisms</li> <li>Security boundaries</li> </ul>"},{"location":"development/xpc_implementation_plan/#7-rollback-plan","title":"7. Rollback Plan","text":""},{"location":"development/xpc_implementation_plan/#trigger-conditions","title":"Trigger Conditions","text":"<ol> <li>Critical security issues</li> <li>Performance degradation</li> <li>Stability problems</li> <li>Data integrity issues</li> </ol>"},{"location":"development/xpc_implementation_plan/#rollback-steps","title":"Rollback Steps","text":"<ol> <li>Revert to pre-XPC commits</li> <li>Restore original service implementations</li> <li>Update client code</li> <li>Run validation tests</li> </ol>"},{"location":"development/xpc_implementation_plan/#8-success-criteria","title":"8. Success Criteria","text":""},{"location":"development/xpc_implementation_plan/#functional","title":"Functional","text":"<ul> <li>All operations work through XPC</li> <li>Error handling works correctly</li> <li>Recovery mechanisms function</li> <li>Performance meets targets</li> </ul>"},{"location":"development/xpc_implementation_plan/#security","title":"Security","text":"<ul> <li>Process isolation verified</li> <li>Privilege separation effective</li> <li>Sandbox rules working</li> <li>Entitlements correct</li> </ul>"},{"location":"development/xpc_implementation_plan/#performance","title":"Performance","text":"<ul> <li>Latency within bounds</li> <li>Resource usage acceptable</li> <li>Connection management efficient</li> <li>Error recovery timely</li> </ul>"},{"location":"development/xpc_implementation_plan/#9-documentation-requirements","title":"9. Documentation Requirements","text":""},{"location":"development/xpc_implementation_plan/#api-documentation","title":"API Documentation","text":"<ul> <li>XPC protocol documentation</li> <li>Error handling guidance</li> <li>Security considerations</li> <li>Best practices</li> </ul>"},{"location":"development/xpc_implementation_plan/#operational-documentation","title":"Operational Documentation","text":"<ul> <li>Deployment guide</li> <li>Monitoring guide</li> <li>Troubleshooting guide</li> <li>Recovery procedures</li> </ul>"},{"location":"development/xpc_implementation_plan/#10-future-enhancements","title":"10. Future Enhancements","text":""},{"location":"development/xpc_implementation_plan/#planned-features","title":"Planned Features","text":"<ul> <li>[ ] Enhanced monitoring</li> <li>[ ] Performance metrics</li> <li>[ ] Automatic recovery</li> <li>[ ] Load balancing</li> </ul>"},{"location":"development/xpc_implementation_plan/#security-improvements","title":"Security Improvements","text":"<ul> <li>[ ] Additional sandbox rules</li> <li>[ ] Enhanced audit logging</li> <li>[ ] Security event monitoring</li> <li>[ ] Threat detection</li> </ul> <p>unction - Performance meets targets</p>"},{"location":"development/xpc_implementation_plan/#security_1","title":"Security","text":"<ul> <li>Process isolation verified</li> <li>Privilege separation effective</li> <li>Sandbox rules working</li> <li>Entitlements correct</li> </ul>"},{"location":"development/xpc_implementation_plan/#performance_1","title":"Performance","text":"<ul> <li>Latency within bounds</li> <li>Resource usage acceptable</li> <li>Connection management efficient</li> <li>Error recovery timely</li> </ul>"},{"location":"development/xpc_implementation_plan/#9-documentation-requirements_1","title":"9. Documentation Requirements","text":""},{"location":"development/xpc_implementation_plan/#api-documentation_1","title":"API Documentation","text":"<ul> <li>XPC protocol documentation</li> <li>Error handling guidance</li> <li>Security considerations</li> <li>Best practices</li> </ul>"},{"location":"development/xpc_implementation_plan/#operational-documentation_1","title":"Operational Documentation","text":"<ul> <li>Deployment guide</li> <li>Monitoring guide</li> <li>Troubleshooting guide</li> <li>Recovery procedures</li> </ul>"},{"location":"development/xpc_implementation_plan/#10-future-enhancements_1","title":"10. Future Enhancements","text":""},{"location":"development/xpc_implementation_plan/#planned-features_1","title":"Planned Features","text":"<ul> <li>[ ] Enhanced monitoring</li> <li>[ ] Performance metrics</li> <li>[ ] Automatic recovery</li> <li>[ ] Load balancing</li> </ul>"},{"location":"development/xpc_implementation_plan/#security-improvements_1","title":"Security Improvements","text":"<ul> <li>[ ] Additional sandbox rules</li> <li>[ ] Enhanced audit logging</li> <li>[ ] Security event monitoring</li> <li>[ ] Threat detection</li> </ul>"},{"location":"development/xpc_implementation_plan/#version-history","title":"Version History","text":"Version Date Changes 1.0.0 2025-02-17 Initial XPC implementation plan document"},{"location":"modules/","title":"UmbraCore Modules","text":"<p>UmbraCore is organised into a set of specialised modules that work together to provide a comprehensive backup solution for macOS applications. Each module has a specific responsibility within the framework.</p>"},{"location":"modules/#core-modules","title":"Core Modules","text":"Module Description UmbraCore The main integration module providing core functionality XPCProtocolsCore Foundation-free XPC protocol definitions SecurityProtocolsCore Foundation-free security interfaces"},{"location":"modules/#security-modules","title":"Security Modules","text":"Module Description SecurityTypes Core security primitives and types UmbraCryptoService Cryptographic operations implementation UmbraKeychainService Secure credential storage"},{"location":"modules/#infrastructure-modules","title":"Infrastructure Modules","text":"Module Description UmbraXPC Cross-process communication infrastructure ErrorTypes Error handling architecture Configuration Settings and preferences management"},{"location":"modules/#repository-and-backup-modules","title":"Repository and Backup Modules","text":"Module Description RepositoryManager Repository lifecycle management BackupCoordinator Backup orchestration ResticCLIHelper Type-safe Restic command execution"},{"location":"modules/#module-integration","title":"Module Integration","text":"<p>These modules are designed to work together seamlessly whilst maintaining clear boundaries and separation of concerns. The modular architecture allows for flexible integration into different types of applications.</p>"},{"location":"modules/backupcoordinator/","title":"BackupCoordinator Module","text":"<p>The BackupCoordinator module orchestrates backup operations across the UmbraCore framework, providing a streamlined approach to managing backup processes.</p>"},{"location":"modules/backupcoordinator/#overview","title":"Overview","text":"<p>BackupCoordinator handles the orchestration of backup operations, managing the creation, scheduling, execution, and monitoring of backups. It coordinates between different modules to provide a cohesive backup experience.</p>"},{"location":"modules/backupcoordinator/#features","title":"Features","text":"<ul> <li>Backup task orchestration</li> <li>Backup scheduling and timing</li> <li>Progress monitoring and reporting</li> <li>Error handling and recovery</li> <li>Backup verification and validation</li> </ul>"},{"location":"modules/backupcoordinator/#usage","title":"Usage","text":"<pre><code>import BackupCoordinator\n\n// Create a backup coordinator\nlet coordinator = BackupCoordinator()\n\n// Configure a backup job\nlet backupJob = BackupJob(\n    sources: [\"/Users/username/Documents\", \"/Users/username/Pictures\"],\n    excludes: [\"**/.DS_Store\", \"**/node_modules\"],\n    repository: mainRepository,\n    schedule: BackupSchedule(\n        frequency: .daily,\n        preferredTime: \"02:00\",\n        retryStrategy: .exponentialBackoff(maxAttempts: 3)\n    ),\n    tags: [\"documents\", \"pictures\", \"important\"]\n)\n\n// Register the backup job\ntry coordinator.registerBackupJob(backupJob)\n\n// Run a backup immediately\ntry await coordinator.runBackupJob(\n    id: backupJob.id,\n    options: BackupOptions(\n        compressionLevel: 6,\n        verifyAfterCompletion: true\n    )\n)\n\n// Monitor progress\ncoordinator.progressHandler = { progress in\n    print(\"Backup progress: \\(progress.percentage)%\")\n    print(\"Files processed: \\(progress.filesProcessed)\")\n    print(\"Bytes processed: \\(progress.bytesProcessed)\")\n}\n\n// Get backup history\nlet history = try await coordinator.getBackupHistory(\n    forRepository: mainRepository,\n    limit: 10\n)\n</code></pre>"},{"location":"modules/backupcoordinator/#integration","title":"Integration","text":"<p>BackupCoordinator integrates with:</p> <ul> <li>RepositoryManager for repository access and management</li> <li>ResticCLIHelper for executing backup commands</li> <li>UmbraXPC for privileged operations</li> <li>Configuration for backup settings</li> </ul>"},{"location":"modules/backupcoordinator/#advanced-features","title":"Advanced Features","text":"<ul> <li>Incremental backups</li> <li>Snapshot management</li> <li>Differential backup strategies</li> <li>Backup chains and dependencies</li> <li>Resource-aware backup throttling</li> </ul>"},{"location":"modules/backupcoordinator/#source-code","title":"Source Code","text":"<p>The source code for this module is located in the <code>Sources/BackupCoordinator</code> directory of the UmbraCore repository.</p>"},{"location":"modules/configuration/","title":"Configuration Module","text":"<p>The Configuration module provides settings and preferences management capabilities for the UmbraCore framework.</p>"},{"location":"modules/configuration/#overview","title":"Overview","text":"<p>The Configuration module handles application settings, user preferences, and framework configuration, offering a consistent and type-safe approach to managing configuration across the UmbraCore framework.</p>"},{"location":"modules/configuration/#features","title":"Features","text":"<ul> <li>Type-safe configuration management</li> <li>Default value handling</li> <li>Configuration validation</li> <li>Secure storage for sensitive settings</li> <li>Configuration migration support</li> </ul>"},{"location":"modules/configuration/#usage","title":"Usage","text":"<pre><code>import Configuration\n\n// Access application configuration\nlet config = Configuration.shared\n\n// Read configuration values\nlet backupInterval = config.get(\\.backupSchedule.intervalHours)\nlet compressionLevel = config.get(\\.backup.compressionLevel)\nlet isEncryptionEnabled = config.get(\\.security.encryptBackups)\n\n// Update configuration values\ntry config.set(\\.backup.compressionLevel, to: 6)\ntry config.set(\\.security.encryptBackups, to: true)\n\n// Use strongly-typed configuration\nstruct BackupSettings: ConfigurationProvider {\n    @ConfigurationProperty(\\.backup.excludedPaths)\n    var excludedPaths: [String]\n\n    @ConfigurationProperty(\\.backup.maxParallelOperations)\n    var maxParallelOperations: Int\n}\n\nlet backupSettings = BackupSettings()\nprint(\"Excluded paths: \\(backupSettings.excludedPaths)\")\nprint(\"Max parallel operations: \\(backupSettings.maxParallelOperations)\")\n</code></pre>"},{"location":"modules/configuration/#integration","title":"Integration","text":"<p>The Configuration module integrates with:</p> <ul> <li>UmbraCore for framework-level settings</li> <li>UmbraKeychainService for secure settings storage</li> <li>RepositoryManager for repository configuration</li> <li>BackupCoordinator for backup settings</li> </ul>"},{"location":"modules/configuration/#security-considerations","title":"Security Considerations","text":"<ul> <li>Sensitive configuration values are stored securely</li> <li>Configuration validation prevents insecure settings</li> <li>Configuration access is controlled through appropriate access levels</li> <li>Configuration migration handles changes safely</li> </ul>"},{"location":"modules/configuration/#source-code","title":"Source Code","text":"<p>The source code for this module is located in the <code>Sources/Configuration</code> directory of the UmbraCore repository.</p>"},{"location":"modules/errortypes/","title":"ErrorTypes Module","text":"<p>The ErrorTypes module provides a comprehensive error handling architecture for the UmbraCore framework.</p>"},{"location":"modules/errortypes/#overview","title":"Overview","text":"<p>ErrorTypes defines a structured approach to error handling across the UmbraCore framework, ensuring consistency, proper error propagation, and meaningful error reporting. This module establishes error domains, error types, and conventions for error handling throughout the codebase.</p>"},{"location":"modules/errortypes/#features","title":"Features","text":"<ul> <li>Comprehensive error type definitions</li> <li>Domain-specific error categorisation</li> <li>Structured error propagation</li> <li>Localised error descriptions</li> <li>Error recovery strategies</li> </ul>"},{"location":"modules/errortypes/#usage","title":"Usage","text":"<pre><code>import ErrorTypes\n\n// Define a function that can throw specific errors\nfunc performOperation() throws {\n    guard isAvailable else {\n        throw CoreError.serviceUnavailable(\n            reason: \"The service is currently offline\", \n            suggestion: \"Try again later\"\n        )\n    }\n\n    guard hasPermission else {\n        throw SecurityError.insufficientPermissions(\n            resource: \"backup-repository\",\n            requiredPermission: \"write\"\n        )\n    }\n\n    // Perform operation\n}\n\n// Handle errors with structured catching\ndo {\n    try performOperation()\n} catch let error as CoreError {\n    // Handle core framework errors\n    switch error {\n    case .serviceUnavailable(let reason, let suggestion):\n        log(\"Service unavailable: \\(reason). \\(suggestion)\")\n    // Handle other core errors\n    }\n} catch let error as SecurityError {\n    // Handle security-specific errors\n} catch {\n    // Handle unexpected errors\n}\n</code></pre>"},{"location":"modules/errortypes/#integration","title":"Integration","text":"<p>ErrorTypes integrates with all UmbraCore modules to provide consistent error handling throughout the framework:</p> <ul> <li>UmbraCore for framework-level errors</li> <li>UmbraXPC for cross-process error propagation</li> <li>SecurityTypes for security-specific errors</li> <li>ResticCLIHelper for command execution errors</li> </ul>"},{"location":"modules/errortypes/#design-philosophy","title":"Design Philosophy","text":"<p>The ErrorTypes module follows these key principles:</p> <ul> <li>Errors should be specific and meaningful</li> <li>Error types should include helpful context</li> <li>Errors should suggest recovery actions when possible</li> <li>Error handling should be consistent across the framework</li> </ul>"},{"location":"modules/errortypes/#source-code","title":"Source Code","text":"<p>The source code for this module is located in the <code>Sources/ErrorTypes</code> directory of the UmbraCore repository.</p>"},{"location":"modules/repositorymanager/","title":"RepositoryManager Module","text":"<p>The RepositoryManager module provides repository lifecycle management capabilities for the UmbraCore framework.</p>"},{"location":"modules/repositorymanager/#overview","title":"Overview","text":"<p>RepositoryManager handles all aspects of repository management, including creation, initialisation, validation, and maintenance of Restic repositories. It ensures repositories are properly configured, accessible, and maintained throughout their lifecycle.</p>"},{"location":"modules/repositorymanager/#features","title":"Features","text":"<ul> <li>Repository initialisation and setup</li> <li>Repository validation and health checks</li> <li>Repository configuration management</li> <li>Repository maintenance operations</li> <li>Multi-repository support</li> </ul>"},{"location":"modules/repositorymanager/#usage","title":"Usage","text":"<pre><code>import RepositoryManager\n\n// Create a repository manager\nlet repoManager = RepositoryManager()\n\n// Initialise a new repository\nlet repository = try await repoManager.initialise(\n    at: \"/Volumes/Backup/my-repository\",\n    withPassword: securePasswordReference,\n    options: RepositoryOptions(\n        compressionLevel: 6,\n        encryptionAlgorithm: .aes256\n    )\n)\n\n// Check repository health\nlet healthStatus = try await repoManager.checkHealth(repository)\nif healthStatus.needsMaintenance {\n    try await repoManager.performMaintenance(\n        on: repository,\n        operations: [.prune, .check, .rebuild]\n    )\n}\n\n// List repositories\nlet allRepositories = try await repoManager.listRepositories()\nfor repo in allRepositories {\n    print(\"Repository: \\(repo.name), Status: \\(repo.status)\")\n}\n</code></pre>"},{"location":"modules/repositorymanager/#integration","title":"Integration","text":"<p>RepositoryManager integrates with:</p> <ul> <li>ResticCLIHelper for Restic command execution</li> <li>UmbraKeychainService for secure password management</li> <li>UmbraXPC for privileged operations</li> <li>BackupCoordinator for coordinating backup operations</li> </ul>"},{"location":"modules/repositorymanager/#security-considerations","title":"Security Considerations","text":"<ul> <li>Repository passwords are managed securely</li> <li>Repository access control is enforced</li> <li>Repository integrity is validated</li> <li>Secure storage locations are recommended</li> </ul>"},{"location":"modules/repositorymanager/#source-code","title":"Source Code","text":"<p>The source code for this module is located in the <code>Sources/RepositoryManager</code> directory of the UmbraCore repository.</p>"},{"location":"modules/resticlihelper/","title":"ResticCLIHelper Module","text":"<p>The ResticCLIHelper module provides type-safe Restic command execution capabilities for the UmbraCore framework.</p>"},{"location":"modules/resticlihelper/#overview","title":"Overview","text":"<p>ResticCLIHelper encapsulates the interaction with the Restic command-line tool, providing a type-safe and structured API for executing Restic commands. This module handles command building, parameter validation, and execution in a secure environment.</p>"},{"location":"modules/resticlihelper/#features","title":"Features","text":"<ul> <li>Type-safe Restic command building</li> <li>Secure parameter validation</li> <li>Structured output parsing</li> <li>Error handling and logging</li> <li>Sandboxed execution support</li> </ul>"},{"location":"modules/resticlihelper/#usage","title":"Usage","text":"<pre><code>import ResticCLIHelper\n\n// Create a helper instance\nlet resticHelper = ResticCLIHelper()\n\n// Configure a repository\nlet repoConfig = ResticRepositoryConfiguration(\n    path: \"/Volumes/Backup/main-repository\",\n    password: securePasswordReference,\n    extraEnvironment: [\"RESTIC_CACHE_DIR\": \"/tmp/restic-cache\"]\n)\n\n// Initialise a repository\ntry await resticHelper.initialise(repository: repoConfig)\n\n// Create a backup\ntry await resticHelper.backup(\n    repository: repoConfig,\n    sourcePaths: [\"/Users/username/Documents\"],\n    excludePaths: [\"/Users/username/Documents/temp\"],\n    tags: [\"documents\", \"important\"]\n)\n\n// List snapshots\nlet snapshots = try await resticHelper.listSnapshots(\n    repository: repoConfig,\n    tag: \"documents\"\n)\n</code></pre>"},{"location":"modules/resticlihelper/#integration","title":"Integration","text":"<p>ResticCLIHelper integrates with:</p> <ul> <li>UmbraXPC for executing commands in a privileged context</li> <li>SecurityTypes for secure credential handling</li> <li>RepositoryManager for repository lifecycle operations</li> <li>BackupCoordinator for orchestrating backup operations</li> </ul>"},{"location":"modules/resticlihelper/#security-considerations","title":"Security Considerations","text":"<ul> <li>Never exposes raw passwords in command-line arguments</li> <li>Validates all parameters before execution</li> <li>Uses secure environment variables for credentials</li> <li>Sanitises command output for logging</li> </ul>"},{"location":"modules/resticlihelper/#source-code","title":"Source Code","text":"<p>The source code for this module is located in the <code>Sources/ResticCLIHelper</code> directory of the UmbraCore repository.</p>"},{"location":"modules/securityprotocolscore/","title":"SecurityProtocolsCore Module","text":"<p>The SecurityProtocolsCore module provides foundation-free security protocol definitions for the UmbraCore framework.</p>"},{"location":"modules/securityprotocolscore/#overview","title":"Overview","text":"<p>SecurityProtocolsCore defines the core security interfaces used throughout the UmbraCore framework, allowing for consistent and reliable security operations across different modules. This module is designed to be foundation-free, enabling it to be used in contexts where Foundation dependencies would be problematic.</p>"},{"location":"modules/securityprotocolscore/#features","title":"Features","text":"<ul> <li>Foundation-free security protocol definitions</li> <li>Secure credential management interfaces</li> <li>Cryptographic operation protocols</li> <li>Authentication validation interfaces</li> </ul>"},{"location":"modules/securityprotocolscore/#usage","title":"Usage","text":"<pre><code>import SecurityProtocolsCore\n\n// Create a type that implements a security protocol\nclass MySecurityProvider: CryptoServiceProvider {\n    func generateKey(strength: KeyStrength) throws -&gt; SecureKey {\n        // Implementation\n    }\n\n    func encryptData(_ data: Data, withKey key: SecureKey) throws -&gt; EncryptedData {\n        // Implementation\n    }\n}\n</code></pre>"},{"location":"modules/securityprotocolscore/#integration","title":"Integration","text":"<p>SecurityProtocolsCore integrates with:</p> <ul> <li>SecurityTypes for core security type definitions</li> <li>UmbraCryptoService for cryptographic operations</li> <li>UmbraKeychainService for secure storage</li> <li>UmbraXPC for secure cross-process operations</li> </ul>"},{"location":"modules/securityprotocolscore/#source-code","title":"Source Code","text":"<p>The source code for this module is located in the <code>Sources/SecurityProtocolsCore</code> directory of the UmbraCore repository.</p>"},{"location":"modules/securitytypes/","title":"SecurityTypes Module","text":"<p>The SecurityTypes module provides the core security primitives and types used throughout the UmbraCore framework.</p>"},{"location":"modules/securitytypes/#overview","title":"Overview","text":"<p>SecurityTypes defines foundational security-related types, enumerations, and structures that are shared across different modules of the UmbraCore framework. It serves as a central library of security primitives designed to be used consistently throughout the system.</p>"},{"location":"modules/securitytypes/#features","title":"Features","text":"<ul> <li>Core security primitive types</li> <li>Cryptographic key representations</li> <li>Secure credential containers</li> <li>Error types for security operations</li> <li>Serialisation protocols for secure types</li> </ul>"},{"location":"modules/securitytypes/#usage","title":"Usage","text":"<pre><code>import SecurityTypes\n\n// Create a secure credential\nlet credential = SecureCredential(\n    username: \"repouser\",\n    passwordData: encryptedPasswordData,\n    metadata: [\n        \"repository\": \"backup-main\",\n        \"created\": ISO8601DateFormatter().string(from: Date())\n    ]\n)\n\n// Use a security error\nfunc handleError(_ error: SecurityError) {\n    switch error {\n    case .authenticationFailed:\n        // Handle authentication failure\n    case .keyGenerationFailed(let reason):\n        // Handle key generation failure\n    case .encryptionFailed(let underlyingError):\n        // Handle encryption failure\n    // ...other cases\n    }\n}\n</code></pre>"},{"location":"modules/securitytypes/#integration","title":"Integration","text":"<p>SecurityTypes is a foundational module that integrates with:</p> <ul> <li>SecurityProtocolsCore for protocol definitions</li> <li>UmbraCryptoService for cryptographic operations</li> <li>UmbraKeychainService for secure storage</li> <li>UmbraXPC for secure cross-process operations</li> </ul>"},{"location":"modules/securitytypes/#source-code","title":"Source Code","text":"<p>The source code for this module is located in the <code>Sources/SecurityTypes</code> directory of the UmbraCore repository.</p>"},{"location":"modules/umbracore/","title":"UmbraCore Module","text":"<p>The UmbraCore module is the main integration point of the framework, providing the core functionality for integrating with Restic backup on macOS systems.</p>"},{"location":"modules/umbracore/#overview","title":"Overview","text":"<p>The UmbraCore module brings together all the components of the framework to provide a cohesive and unified API for macOS applications to interact with Restic backup functionality. It serves as the main entry point for applications using the framework.</p>"},{"location":"modules/umbracore/#features","title":"Features","text":"<ul> <li>Unified API for Restic operations</li> <li>Integration with macOS security features</li> <li>Complete backup and restore functionality</li> <li>Cross-process security operations</li> </ul>"},{"location":"modules/umbracore/#usage","title":"Usage","text":"<pre><code>import UmbraCore\n\n// Initialize the core framework\nlet core = UmbraCore()\n\n// Access various subsystems\nlet repositories = core.repositories\nlet snapshots = core.snapshots\nlet securityService = core.securityService\n</code></pre>"},{"location":"modules/umbracore/#integration","title":"Integration","text":"<p>This module integrates with all other UmbraCore modules to provide a seamless experience for developers building backup solutions on macOS.</p>"},{"location":"modules/umbracore/#source-code","title":"Source Code","text":"<p>The source code for this module is located in the <code>Sources/UmbraCore</code> directory of the UmbraCore repository.</p>"},{"location":"modules/umbracryptoservice/","title":"UmbraCryptoService Module","text":"<p>The UmbraCryptoService module provides cryptographic operations and services for the UmbraCore framework.</p>"},{"location":"modules/umbracryptoservice/#overview","title":"Overview","text":"<p>UmbraCryptoService implements secure cryptographic functions required for encrypting and decrypting data, generating secure keys, and providing other essential cryptographic operations needed by the UmbraCore framework.</p>"},{"location":"modules/umbracryptoservice/#features","title":"Features","text":"<ul> <li>Secure encryption and decryption operations</li> <li>Cryptographic key generation and management</li> <li>Password hashing with modern algorithms</li> <li>Secure random data generation</li> <li>Digital signature verification</li> </ul>"},{"location":"modules/umbracryptoservice/#usage","title":"Usage","text":"<pre><code>import UmbraCryptoService\n\n// Create a crypto service instance\nlet cryptoService = UmbraCryptoService()\n\n// Generate a secure key\nlet key = try cryptoService.generateKey(\n    strength: .high,\n    purpose: .encryption\n)\n\n// Encrypt sensitive data\nlet encryptedData = try cryptoService.encrypt(\n    data: sensitiveData,\n    using: key,\n    algorithm: .aes256GCM\n)\n\n// Decrypt the encrypted data\nlet decryptedData = try cryptoService.decrypt(\n    data: encryptedData,\n    using: key,\n    algorithm: .aes256GCM\n)\n</code></pre>"},{"location":"modules/umbracryptoservice/#integration","title":"Integration","text":"<p>UmbraCryptoService integrates with:</p> <ul> <li>SecurityTypes for core security primitives</li> <li>SecurityProtocolsCore for protocol conformance</li> <li>UmbraKeychainService for secure key storage</li> <li>UmbraCore for high-level security operations</li> </ul>"},{"location":"modules/umbracryptoservice/#security-considerations","title":"Security Considerations","text":"<ul> <li>Implements industry-standard cryptographic algorithms</li> <li>Uses secure key management practices</li> <li>Implements key rotation capabilities</li> <li>Provides secure memory handling for sensitive data</li> </ul>"},{"location":"modules/umbracryptoservice/#source-code","title":"Source Code","text":"<p>The source code for this module is located in the <code>Sources/UmbraCryptoService</code> directory of the UmbraCore repository.</p>"},{"location":"modules/umbrakeychainservice/","title":"UmbraKeychainService Module","text":"<p>The UmbraKeychainService module provides secure credential storage and management using macOS Keychain for the UmbraCore framework.</p>"},{"location":"modules/umbrakeychainservice/#overview","title":"Overview","text":"<p>UmbraKeychainService encapsulates secure credential management functionality, allowing the application to store and retrieve sensitive information such as repository passwords and encryption keys securely using the macOS Keychain.</p>"},{"location":"modules/umbrakeychainservice/#features","title":"Features","text":"<ul> <li>Secure password storage and retrieval</li> <li>Encryption key management</li> <li>Access control for credential access</li> <li>Secure credential sharing with XPC service</li> <li>Automatic credential lifecycle management</li> </ul>"},{"location":"modules/umbrakeychainservice/#usage","title":"Usage","text":"<pre><code>import UmbraKeychainService\n\n// Store a repository password\nlet keychainService = UmbraKeychainService()\ntry await keychainService.storePassword(\n    \"my-secure-password\",\n    forRepository: repositoryID,\n    accessGroup: \"com.example.myapp.shared\"\n)\n\n// Retrieve a repository password\nlet password = try await keychainService.retrievePassword(\n    forRepository: repositoryID,\n    accessGroup: \"com.example.myapp.shared\"\n)\n</code></pre>"},{"location":"modules/umbrakeychainservice/#integration","title":"Integration","text":"<p>UmbraKeychainService integrates with:</p> <ul> <li>SecurityTypes for secure credential types</li> <li>SecurityProtocolsCore for security interfaces</li> <li>UmbraCore for application integration</li> <li>UmbraXPC for secure credential passing to XPC service</li> </ul>"},{"location":"modules/umbrakeychainservice/#security-considerations","title":"Security Considerations","text":"<ul> <li>Passwords are never stored in plain text</li> <li>Credentials are accessible only to authorised processes</li> <li>Access control lists limit which processes can access credentials</li> <li>Automatic cleanup of orphaned credentials</li> </ul>"},{"location":"modules/umbrakeychainservice/#source-code","title":"Source Code","text":"<p>The source code for this module is located in the <code>Sources/UmbraKeychainService</code> directory of the UmbraCore repository.</p>"},{"location":"modules/umbraxpc/","title":"UmbraXPC Module","text":"<p>The UmbraXPC module provides the cross-process communication infrastructure for the UmbraCore framework, enabling secure operations between the sandboxed application and privileged XPC service.</p>"},{"location":"modules/umbraxpc/#overview","title":"Overview","text":"<p>UmbraXPC implements the infrastructure required for secure and reliable communication between the main application and the XPC service. It handles process lifecycle management, error handling, and secure message passing to maintain the security boundaries required by macOS.</p>"},{"location":"modules/umbraxpc/#features","title":"Features","text":"<ul> <li>Secure XPC service implementation</li> <li>Process lifecycle management</li> <li>Robust error handling</li> <li>Secure credential passing</li> <li>Permission validation</li> </ul>"},{"location":"modules/umbraxpc/#usage","title":"Usage","text":"<pre><code>import UmbraXPC\n\n// Set up the XPC service connection\nlet xpcService = UmbraXPCServiceConnector.shared\n\n// Execute a command via XPC\ntry await xpcService.executeCommand(\n    command: \"backup\",\n    arguments: [\"--source\", sourcePath, \"--target\", targetPath],\n    environment: [\"RESTIC_PASSWORD\": passwordReference]\n)\n</code></pre>"},{"location":"modules/umbraxpc/#integration","title":"Integration","text":"<p>UmbraXPC integrates with:</p> <ul> <li>XPCProtocolsCore for protocol definitions</li> <li>SecurityTypes for secure type passing</li> <li>ResticCLIHelper for command execution</li> <li>UmbraCore for main application integration</li> </ul>"},{"location":"modules/umbraxpc/#security-model","title":"Security Model","text":"<p>UmbraXPC follows a strict security model:</p> <ul> <li>Main app requests permissions</li> <li>XPC service executes commands</li> <li>Secure data passing between components</li> <li>Resource cleanup on both sides</li> </ul>"},{"location":"modules/umbraxpc/#source-code","title":"Source Code","text":"<p>The source code for this module is located in the <code>Sources/UmbraXPC</code> directory of the UmbraCore repository.</p>"},{"location":"modules/xpcprotocolscore/","title":"XPCProtocolsCore Module","text":"<p>The XPCProtocolsCore module defines the foundation-free protocols used for XPC communication between the sandboxed application and XPC service.</p>"},{"location":"modules/xpcprotocolscore/#overview","title":"Overview","text":"<p>XPCProtocolsCore provides a consistent set of protocols and interfaces for secure cross-process communication, enabling sandboxed applications to perform privileged operations without compromising security. This module is designed to work without Foundation dependencies, making it lightweight and suitable for use in security-critical contexts.</p>"},{"location":"modules/xpcprotocolscore/#features","title":"Features","text":"<ul> <li>Foundation-free protocol definitions</li> <li>Standardised error handling</li> <li>Type-safe message passing</li> <li>Secure parameter validation</li> </ul>"},{"location":"modules/xpcprotocolscore/#usage","title":"Usage","text":"<pre><code>import XPCProtocolsCore\n\n// Define a service conforming to XPC protocols\nclass MyXPCService: XPCServiceProtocol {\n    func performOperation(\n        parameters: OperationParameters, \n        withReply reply: @escaping (Result&lt;OperationResult, XPCSecurityError&gt;) -&gt; Void\n    ) {\n        // Implementation\n    }\n}\n</code></pre>"},{"location":"modules/xpcprotocolscore/#integration","title":"Integration","text":"<p>XPCProtocolsCore is primarily integrated with:</p> <ul> <li>UmbraXPC for XPC service implementation</li> <li>SecurityProtocolsCore for security protocols</li> <li>UmbraCore for main application integration</li> </ul>"},{"location":"modules/xpcprotocolscore/#source-code","title":"Source Code","text":"<p>The source code for this module is located in the <code>Sources/XPCProtocolsCore</code> directory of the UmbraCore repository.</p>"}]}